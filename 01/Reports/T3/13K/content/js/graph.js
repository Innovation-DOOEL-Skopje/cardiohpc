/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 5.0, "minX": 0.0, "maxY": 209350.0, "series": [{"data": [[0.0, 5.0], [0.1, 9.0], [0.2, 10.0], [0.3, 13.0], [0.4, 15.0], [0.5, 17.0], [0.6, 18.0], [0.7, 19.0], [0.8, 20.0], [0.9, 22.0], [1.0, 23.0], [1.1, 24.0], [1.2, 25.0], [1.3, 26.0], [1.4, 27.0], [1.5, 28.0], [1.6, 29.0], [1.7, 29.0], [1.8, 30.0], [1.9, 31.0], [2.0, 32.0], [2.1, 33.0], [2.2, 34.0], [2.3, 34.0], [2.4, 35.0], [2.5, 36.0], [2.6, 36.0], [2.7, 37.0], [2.8, 38.0], [2.9, 38.0], [3.0, 39.0], [3.1, 39.0], [3.2, 40.0], [3.3, 41.0], [3.4, 41.0], [3.5, 42.0], [3.6, 42.0], [3.7, 43.0], [3.8, 44.0], [3.9, 44.0], [4.0, 45.0], [4.1, 45.0], [4.2, 46.0], [4.3, 46.0], [4.4, 47.0], [4.5, 47.0], [4.6, 47.0], [4.7, 48.0], [4.8, 48.0], [4.9, 49.0], [5.0, 49.0], [5.1, 50.0], [5.2, 50.0], [5.3, 50.0], [5.4, 51.0], [5.5, 51.0], [5.6, 52.0], [5.7, 52.0], [5.8, 52.0], [5.9, 53.0], [6.0, 53.0], [6.1, 53.0], [6.2, 54.0], [6.3, 54.0], [6.4, 54.0], [6.5, 55.0], [6.6, 55.0], [6.7, 56.0], [6.8, 56.0], [6.9, 56.0], [7.0, 56.0], [7.1, 57.0], [7.2, 57.0], [7.3, 58.0], [7.4, 58.0], [7.5, 58.0], [7.6, 59.0], [7.7, 59.0], [7.8, 59.0], [7.9, 60.0], [8.0, 60.0], [8.1, 60.0], [8.2, 61.0], [8.3, 61.0], [8.4, 61.0], [8.5, 61.0], [8.6, 62.0], [8.7, 62.0], [8.8, 62.0], [8.9, 62.0], [9.0, 63.0], [9.1, 63.0], [9.2, 63.0], [9.3, 64.0], [9.4, 64.0], [9.5, 64.0], [9.6, 64.0], [9.7, 64.0], [9.8, 65.0], [9.9, 65.0], [10.0, 65.0], [10.1, 66.0], [10.2, 66.0], [10.3, 66.0], [10.4, 66.0], [10.5, 67.0], [10.6, 67.0], [10.7, 67.0], [10.8, 68.0], [10.9, 68.0], [11.0, 68.0], [11.1, 68.0], [11.2, 68.0], [11.3, 69.0], [11.4, 69.0], [11.5, 69.0], [11.6, 70.0], [11.7, 70.0], [11.8, 70.0], [11.9, 70.0], [12.0, 71.0], [12.1, 71.0], [12.2, 71.0], [12.3, 72.0], [12.4, 72.0], [12.5, 72.0], [12.6, 72.0], [12.7, 72.0], [12.8, 73.0], [12.9, 73.0], [13.0, 73.0], [13.1, 74.0], [13.2, 74.0], [13.3, 74.0], [13.4, 74.0], [13.5, 75.0], [13.6, 75.0], [13.7, 75.0], [13.8, 75.0], [13.9, 76.0], [14.0, 76.0], [14.1, 76.0], [14.2, 76.0], [14.3, 76.0], [14.4, 77.0], [14.5, 77.0], [14.6, 77.0], [14.7, 78.0], [14.8, 78.0], [14.9, 78.0], [15.0, 78.0], [15.1, 79.0], [15.2, 79.0], [15.3, 79.0], [15.4, 79.0], [15.5, 80.0], [15.6, 80.0], [15.7, 80.0], [15.8, 80.0], [15.9, 81.0], [16.0, 81.0], [16.1, 81.0], [16.2, 81.0], [16.3, 82.0], [16.4, 82.0], [16.5, 82.0], [16.6, 82.0], [16.7, 82.0], [16.8, 83.0], [16.9, 83.0], [17.0, 83.0], [17.1, 83.0], [17.2, 84.0], [17.3, 84.0], [17.4, 84.0], [17.5, 84.0], [17.6, 85.0], [17.7, 85.0], [17.8, 85.0], [17.9, 86.0], [18.0, 86.0], [18.1, 86.0], [18.2, 87.0], [18.3, 87.0], [18.4, 87.0], [18.5, 87.0], [18.6, 88.0], [18.7, 88.0], [18.8, 88.0], [18.9, 88.0], [19.0, 88.0], [19.1, 89.0], [19.2, 89.0], [19.3, 89.0], [19.4, 89.0], [19.5, 90.0], [19.6, 90.0], [19.7, 90.0], [19.8, 90.0], [19.9, 91.0], [20.0, 91.0], [20.1, 91.0], [20.2, 92.0], [20.3, 92.0], [20.4, 92.0], [20.5, 92.0], [20.6, 93.0], [20.7, 93.0], [20.8, 94.0], [20.9, 94.0], [21.0, 94.0], [21.1, 95.0], [21.2, 95.0], [21.3, 95.0], [21.4, 96.0], [21.5, 96.0], [21.6, 96.0], [21.7, 96.0], [21.8, 97.0], [21.9, 97.0], [22.0, 97.0], [22.1, 98.0], [22.2, 98.0], [22.3, 98.0], [22.4, 98.0], [22.5, 99.0], [22.6, 99.0], [22.7, 99.0], [22.8, 100.0], [22.9, 100.0], [23.0, 100.0], [23.1, 100.0], [23.2, 101.0], [23.3, 101.0], [23.4, 102.0], [23.5, 102.0], [23.6, 102.0], [23.7, 103.0], [23.8, 103.0], [23.9, 103.0], [24.0, 104.0], [24.1, 104.0], [24.2, 104.0], [24.3, 104.0], [24.4, 104.0], [24.5, 105.0], [24.6, 105.0], [24.7, 105.0], [24.8, 106.0], [24.9, 106.0], [25.0, 106.0], [25.1, 107.0], [25.2, 107.0], [25.3, 107.0], [25.4, 107.0], [25.5, 108.0], [25.6, 108.0], [25.7, 108.0], [25.8, 108.0], [25.9, 109.0], [26.0, 109.0], [26.1, 109.0], [26.2, 109.0], [26.3, 110.0], [26.4, 110.0], [26.5, 110.0], [26.6, 111.0], [26.7, 111.0], [26.8, 111.0], [26.9, 111.0], [27.0, 112.0], [27.1, 112.0], [27.2, 113.0], [27.3, 113.0], [27.4, 114.0], [27.5, 114.0], [27.6, 115.0], [27.7, 115.0], [27.8, 116.0], [27.9, 116.0], [28.0, 117.0], [28.1, 117.0], [28.2, 117.0], [28.3, 118.0], [28.4, 118.0], [28.5, 118.0], [28.6, 119.0], [28.7, 119.0], [28.8, 120.0], [28.9, 120.0], [29.0, 121.0], [29.1, 122.0], [29.2, 122.0], [29.3, 123.0], [29.4, 123.0], [29.5, 124.0], [29.6, 124.0], [29.7, 125.0], [29.8, 125.0], [29.9, 125.0], [30.0, 126.0], [30.1, 126.0], [30.2, 127.0], [30.3, 127.0], [30.4, 128.0], [30.5, 128.0], [30.6, 128.0], [30.7, 129.0], [30.8, 129.0], [30.9, 129.0], [31.0, 130.0], [31.1, 130.0], [31.2, 131.0], [31.3, 131.0], [31.4, 131.0], [31.5, 132.0], [31.6, 132.0], [31.7, 133.0], [31.8, 134.0], [31.9, 135.0], [32.0, 136.0], [32.1, 136.0], [32.2, 137.0], [32.3, 137.0], [32.4, 138.0], [32.5, 138.0], [32.6, 139.0], [32.7, 139.0], [32.8, 140.0], [32.9, 140.0], [33.0, 141.0], [33.1, 142.0], [33.2, 142.0], [33.3, 143.0], [33.4, 143.0], [33.5, 143.0], [33.6, 144.0], [33.7, 144.0], [33.8, 144.0], [33.9, 145.0], [34.0, 145.0], [34.1, 145.0], [34.2, 146.0], [34.3, 146.0], [34.4, 146.0], [34.5, 146.0], [34.6, 147.0], [34.7, 147.0], [34.8, 147.0], [34.9, 148.0], [35.0, 149.0], [35.1, 149.0], [35.2, 150.0], [35.3, 151.0], [35.4, 151.0], [35.5, 152.0], [35.6, 152.0], [35.7, 152.0], [35.8, 153.0], [35.9, 153.0], [36.0, 153.0], [36.1, 154.0], [36.2, 154.0], [36.3, 154.0], [36.4, 155.0], [36.5, 156.0], [36.6, 157.0], [36.7, 158.0], [36.8, 158.0], [36.9, 160.0], [37.0, 160.0], [37.1, 161.0], [37.2, 162.0], [37.3, 163.0], [37.4, 163.0], [37.5, 164.0], [37.6, 166.0], [37.7, 167.0], [37.8, 167.0], [37.9, 168.0], [38.0, 169.0], [38.1, 170.0], [38.2, 171.0], [38.3, 171.0], [38.4, 172.0], [38.5, 172.0], [38.6, 174.0], [38.7, 175.0], [38.8, 175.0], [38.9, 176.0], [39.0, 177.0], [39.1, 177.0], [39.2, 178.0], [39.3, 178.0], [39.4, 179.0], [39.5, 180.0], [39.6, 180.0], [39.7, 181.0], [39.8, 182.0], [39.9, 183.0], [40.0, 184.0], [40.1, 184.0], [40.2, 185.0], [40.3, 186.0], [40.4, 186.0], [40.5, 186.0], [40.6, 187.0], [40.7, 187.0], [40.8, 187.0], [40.9, 188.0], [41.0, 188.0], [41.1, 189.0], [41.2, 190.0], [41.3, 191.0], [41.4, 191.0], [41.5, 192.0], [41.6, 192.0], [41.7, 192.0], [41.8, 192.0], [41.9, 193.0], [42.0, 193.0], [42.1, 193.0], [42.2, 193.0], [42.3, 194.0], [42.4, 194.0], [42.5, 194.0], [42.6, 195.0], [42.7, 195.0], [42.8, 196.0], [42.9, 196.0], [43.0, 197.0], [43.1, 197.0], [43.2, 197.0], [43.3, 198.0], [43.4, 198.0], [43.5, 199.0], [43.6, 199.0], [43.7, 200.0], [43.8, 201.0], [43.9, 201.0], [44.0, 201.0], [44.1, 202.0], [44.2, 202.0], [44.3, 202.0], [44.4, 203.0], [44.5, 203.0], [44.6, 203.0], [44.7, 203.0], [44.8, 204.0], [44.9, 204.0], [45.0, 204.0], [45.1, 204.0], [45.2, 205.0], [45.3, 205.0], [45.4, 206.0], [45.5, 206.0], [45.6, 207.0], [45.7, 208.0], [45.8, 208.0], [45.9, 208.0], [46.0, 209.0], [46.1, 209.0], [46.2, 209.0], [46.3, 210.0], [46.4, 210.0], [46.5, 211.0], [46.6, 212.0], [46.7, 212.0], [46.8, 213.0], [46.9, 213.0], [47.0, 214.0], [47.1, 214.0], [47.2, 214.0], [47.3, 215.0], [47.4, 215.0], [47.5, 215.0], [47.6, 215.0], [47.7, 216.0], [47.8, 216.0], [47.9, 216.0], [48.0, 216.0], [48.1, 217.0], [48.2, 217.0], [48.3, 217.0], [48.4, 217.0], [48.5, 218.0], [48.6, 218.0], [48.7, 218.0], [48.8, 219.0], [48.9, 219.0], [49.0, 220.0], [49.1, 220.0], [49.2, 221.0], [49.3, 221.0], [49.4, 222.0], [49.5, 222.0], [49.6, 223.0], [49.7, 223.0], [49.8, 224.0], [49.9, 224.0], [50.0, 225.0], [50.1, 225.0], [50.2, 225.0], [50.3, 226.0], [50.4, 226.0], [50.5, 227.0], [50.6, 227.0], [50.7, 227.0], [50.8, 228.0], [50.9, 228.0], [51.0, 229.0], [51.1, 229.0], [51.2, 229.0], [51.3, 230.0], [51.4, 230.0], [51.5, 230.0], [51.6, 230.0], [51.7, 230.0], [51.8, 230.0], [51.9, 231.0], [52.0, 231.0], [52.1, 231.0], [52.2, 231.0], [52.3, 231.0], [52.4, 232.0], [52.5, 232.0], [52.6, 232.0], [52.7, 232.0], [52.8, 233.0], [52.9, 233.0], [53.0, 233.0], [53.1, 233.0], [53.2, 234.0], [53.3, 234.0], [53.4, 234.0], [53.5, 234.0], [53.6, 235.0], [53.7, 235.0], [53.8, 236.0], [53.9, 236.0], [54.0, 236.0], [54.1, 237.0], [54.2, 237.0], [54.3, 237.0], [54.4, 237.0], [54.5, 237.0], [54.6, 238.0], [54.7, 238.0], [54.8, 238.0], [54.9, 239.0], [55.0, 240.0], [55.1, 240.0], [55.2, 241.0], [55.3, 241.0], [55.4, 241.0], [55.5, 241.0], [55.6, 242.0], [55.7, 242.0], [55.8, 242.0], [55.9, 242.0], [56.0, 243.0], [56.1, 243.0], [56.2, 243.0], [56.3, 243.0], [56.4, 243.0], [56.5, 244.0], [56.6, 244.0], [56.7, 244.0], [56.8, 244.0], [56.9, 244.0], [57.0, 245.0], [57.1, 245.0], [57.2, 245.0], [57.3, 245.0], [57.4, 246.0], [57.5, 246.0], [57.6, 246.0], [57.7, 246.0], [57.8, 247.0], [57.9, 247.0], [58.0, 247.0], [58.1, 248.0], [58.2, 248.0], [58.3, 249.0], [58.4, 249.0], [58.5, 249.0], [58.6, 250.0], [58.7, 250.0], [58.8, 250.0], [58.9, 250.0], [59.0, 251.0], [59.1, 251.0], [59.2, 251.0], [59.3, 252.0], [59.4, 252.0], [59.5, 252.0], [59.6, 252.0], [59.7, 253.0], [59.8, 253.0], [59.9, 253.0], [60.0, 253.0], [60.1, 253.0], [60.2, 254.0], [60.3, 254.0], [60.4, 254.0], [60.5, 254.0], [60.6, 255.0], [60.7, 255.0], [60.8, 255.0], [60.9, 256.0], [61.0, 256.0], [61.1, 256.0], [61.2, 257.0], [61.3, 257.0], [61.4, 257.0], [61.5, 257.0], [61.6, 258.0], [61.7, 258.0], [61.8, 258.0], [61.9, 258.0], [62.0, 259.0], [62.1, 259.0], [62.2, 259.0], [62.3, 259.0], [62.4, 260.0], [62.5, 260.0], [62.6, 260.0], [62.7, 260.0], [62.8, 260.0], [62.9, 261.0], [63.0, 261.0], [63.1, 261.0], [63.2, 262.0], [63.3, 262.0], [63.4, 263.0], [63.5, 263.0], [63.6, 264.0], [63.7, 264.0], [63.8, 265.0], [63.9, 265.0], [64.0, 265.0], [64.1, 266.0], [64.2, 266.0], [64.3, 267.0], [64.4, 267.0], [64.5, 268.0], [64.6, 269.0], [64.7, 270.0], [64.8, 270.0], [64.9, 271.0], [65.0, 272.0], [65.1, 272.0], [65.2, 273.0], [65.3, 274.0], [65.4, 274.0], [65.5, 275.0], [65.6, 276.0], [65.7, 277.0], [65.8, 278.0], [65.9, 279.0], [66.0, 281.0], [66.1, 282.0], [66.2, 285.0], [66.3, 286.0], [66.4, 288.0], [66.5, 289.0], [66.6, 290.0], [66.7, 291.0], [66.8, 292.0], [66.9, 295.0], [67.0, 297.0], [67.1, 297.0], [67.2, 298.0], [67.3, 299.0], [67.4, 301.0], [67.5, 302.0], [67.6, 307.0], [67.7, 308.0], [67.8, 309.0], [67.9, 314.0], [68.0, 315.0], [68.1, 316.0], [68.2, 317.0], [68.3, 321.0], [68.4, 322.0], [68.5, 322.0], [68.6, 323.0], [68.7, 328.0], [68.8, 330.0], [68.9, 331.0], [69.0, 336.0], [69.1, 338.0], [69.2, 340.0], [69.3, 343.0], [69.4, 344.0], [69.5, 345.0], [69.6, 345.0], [69.7, 346.0], [69.8, 346.0], [69.9, 347.0], [70.0, 347.0], [70.1, 351.0], [70.2, 352.0], [70.3, 353.0], [70.4, 354.0], [70.5, 354.0], [70.6, 355.0], [70.7, 355.0], [70.8, 356.0], [70.9, 356.0], [71.0, 357.0], [71.1, 363.0], [71.2, 365.0], [71.3, 367.0], [71.4, 371.0], [71.5, 373.0], [71.6, 375.0], [71.7, 375.0], [71.8, 377.0], [71.9, 381.0], [72.0, 385.0], [72.1, 387.0], [72.2, 388.0], [72.3, 389.0], [72.4, 391.0], [72.5, 392.0], [72.6, 393.0], [72.7, 396.0], [72.8, 403.0], [72.9, 410.0], [73.0, 412.0], [73.1, 413.0], [73.2, 415.0], [73.3, 417.0], [73.4, 418.0], [73.5, 419.0], [73.6, 420.0], [73.7, 426.0], [73.8, 429.0], [73.9, 430.0], [74.0, 432.0], [74.1, 434.0], [74.2, 439.0], [74.3, 440.0], [74.4, 440.0], [74.5, 441.0], [74.6, 443.0], [74.7, 444.0], [74.8, 445.0], [74.9, 446.0], [75.0, 446.0], [75.1, 447.0], [75.2, 449.0], [75.3, 451.0], [75.4, 452.0], [75.5, 453.0], [75.6, 454.0], [75.7, 455.0], [75.8, 456.0], [75.9, 457.0], [76.0, 458.0], [76.1, 459.0], [76.2, 460.0], [76.3, 461.0], [76.4, 463.0], [76.5, 464.0], [76.6, 465.0], [76.7, 466.0], [76.8, 467.0], [76.9, 467.0], [77.0, 468.0], [77.1, 468.0], [77.2, 469.0], [77.3, 469.0], [77.4, 469.0], [77.5, 470.0], [77.6, 470.0], [77.7, 470.0], [77.8, 471.0], [77.9, 471.0], [78.0, 471.0], [78.1, 472.0], [78.2, 473.0], [78.3, 473.0], [78.4, 474.0], [78.5, 474.0], [78.6, 475.0], [78.7, 475.0], [78.8, 476.0], [78.9, 479.0], [79.0, 481.0], [79.1, 482.0], [79.2, 484.0], [79.3, 486.0], [79.4, 495.0], [79.5, 507.0], [79.6, 514.0], [79.7, 516.0], [79.8, 521.0], [79.9, 522.0], [80.0, 523.0], [80.1, 524.0], [80.2, 525.0], [80.3, 526.0], [80.4, 527.0], [80.5, 529.0], [80.6, 530.0], [80.7, 531.0], [80.8, 548.0], [80.9, 557.0], [81.0, 564.0], [81.1, 566.0], [81.2, 568.0], [81.3, 580.0], [81.4, 583.0], [81.5, 584.0], [81.6, 586.0], [81.7, 588.0], [81.8, 590.0], [81.9, 604.0], [82.0, 642.0], [82.1, 645.0], [82.2, 668.0], [82.3, 677.0], [82.4, 679.0], [82.5, 680.0], [82.6, 709.0], [82.7, 710.0], [82.8, 712.0], [82.9, 735.0], [83.0, 867.0], [83.1, 990.0], [83.2, 1085.0], [83.3, 1155.0], [83.4, 1242.0], [83.5, 1312.0], [83.6, 1448.0], [83.7, 1588.0], [83.8, 1807.0], [83.9, 1871.0], [84.0, 2005.0], [84.1, 2248.0], [84.2, 2360.0], [84.3, 2686.0], [84.4, 3293.0], [84.5, 3636.0], [84.6, 3742.0], [84.7, 4306.0], [84.8, 4492.0], [84.9, 4604.0], [85.0, 5204.0], [85.1, 5280.0], [85.2, 5500.0], [85.3, 5944.0], [85.4, 6293.0], [85.5, 6741.0], [85.6, 6781.0], [85.7, 7050.0], [85.8, 7286.0], [85.9, 7300.0], [86.0, 7411.0], [86.1, 7522.0], [86.2, 7662.0], [86.3, 7782.0], [86.4, 7846.0], [86.5, 7861.0], [86.6, 7866.0], [86.7, 7948.0], [86.8, 8025.0], [86.9, 8211.0], [87.0, 8514.0], [87.1, 8605.0], [87.2, 8659.0], [87.3, 8770.0], [87.4, 8775.0], [87.5, 8815.0], [87.6, 8894.0], [87.7, 8914.0], [87.8, 8921.0], [87.9, 8973.0], [88.0, 9049.0], [88.1, 9074.0], [88.2, 9085.0], [88.3, 9109.0], [88.4, 9127.0], [88.5, 9151.0], [88.6, 9211.0], [88.7, 9247.0], [88.8, 9306.0], [88.9, 9326.0], [89.0, 9338.0], [89.1, 9347.0], [89.2, 9350.0], [89.3, 9354.0], [89.4, 9401.0], [89.5, 9523.0], [89.6, 9531.0], [89.7, 9611.0], [89.8, 9653.0], [89.9, 9710.0], [90.0, 9728.0], [90.1, 9765.0], [90.2, 9886.0], [90.3, 9941.0], [90.4, 9956.0], [90.5, 10044.0], [90.6, 10075.0], [90.7, 10092.0], [90.8, 10128.0], [90.9, 10174.0], [91.0, 10186.0], [91.1, 10189.0], [91.2, 10417.0], [91.3, 10491.0], [91.4, 10492.0], [91.5, 10585.0], [91.6, 10607.0], [91.7, 10617.0], [91.8, 10648.0], [91.9, 10697.0], [92.0, 10700.0], [92.1, 10725.0], [92.2, 10732.0], [92.3, 10828.0], [92.4, 10862.0], [92.5, 11074.0], [92.6, 11135.0], [92.7, 11185.0], [92.8, 11217.0], [92.9, 11342.0], [93.0, 11547.0], [93.1, 11585.0], [93.2, 11690.0], [93.3, 12025.0], [93.4, 12678.0], [93.5, 13055.0], [93.6, 13400.0], [93.7, 13624.0], [93.8, 13837.0], [93.9, 13931.0], [94.0, 14432.0], [94.1, 14514.0], [94.2, 14793.0], [94.3, 14968.0], [94.4, 15185.0], [94.5, 15298.0], [94.6, 15668.0], [94.7, 16102.0], [94.8, 16322.0], [94.9, 16531.0], [95.0, 17243.0], [95.1, 18416.0], [95.2, 18747.0], [95.3, 19915.0], [95.4, 20339.0], [95.5, 21566.0], [95.6, 22364.0], [95.7, 22703.0], [95.8, 24806.0], [95.9, 25311.0], [96.0, 27421.0], [96.1, 29167.0], [96.2, 32696.0], [96.3, 33804.0], [96.4, 35174.0], [96.5, 37009.0], [96.6, 38505.0], [96.7, 39746.0], [96.8, 40450.0], [96.9, 42041.0], [97.0, 45841.0], [97.1, 49924.0], [97.2, 54069.0], [97.3, 59220.0], [97.4, 63366.0], [97.5, 64188.0], [97.6, 65603.0], [97.7, 66165.0], [97.8, 70279.0], [97.9, 70527.0], [98.0, 72080.0], [98.1, 72561.0], [98.2, 76708.0], [98.3, 79255.0], [98.4, 92835.0], [98.5, 100056.0], [98.6, 100199.0], [98.7, 100219.0], [98.8, 100488.0], [98.9, 100497.0], [99.0, 103152.0], [99.1, 103374.0], [99.2, 127289.0], [99.3, 128110.0], [99.4, 128673.0], [99.5, 130715.0], [99.6, 131499.0], [99.7, 132336.0], [99.8, 139013.0], [99.9, 147820.0], [100.0, 209350.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 30854.0, "series": [{"data": [[0.0, 29689.0], [148000.0, 29.0], [132900.0, 4.0], [73100.0, 27.0], [69900.0, 2.0], [76300.0, 1.0], [82700.0, 1.0], [85900.0, 1.0], [95500.0, 1.0], [105100.0, 1.0], [111500.0, 1.0], [130700.0, 35.0], [127500.0, 4.0], [100.0, 27144.0], [32900.0, 18.0], [37700.0, 10.0], [39300.0, 3.0], [40900.0, 2.0], [42500.0, 3.0], [44100.0, 4.0], [48900.0, 3.0], [50500.0, 41.0], [200.0, 30854.0], [52100.0, 6.0], [60100.0, 5.0], [63300.0, 66.0], [61700.0, 2.0], [64900.0, 4.0], [65800.0, 15.0], [72200.0, 14.0], [300.0, 7124.0], [75400.0, 1.0], [78600.0, 2.0], [85000.0, 2.0], [101000.0, 2.0], [400.0, 8672.0], [104200.0, 1.0], [107400.0, 1.0], [113800.0, 1.0], [120200.0, 2.0], [129800.0, 1.0], [500.0, 3213.0], [600.0, 872.0], [700.0, 500.0], [800.0, 97.0], [900.0, 123.0], [1000.0, 149.0], [1100.0, 151.0], [1200.0, 186.0], [1300.0, 87.0], [1400.0, 100.0], [1500.0, 97.0], [1600.0, 56.0], [1700.0, 46.0], [1800.0, 184.0], [1900.0, 100.0], [2000.0, 17.0], [2100.0, 86.0], [2200.0, 73.0], [142900.0, 2.0], [2300.0, 118.0], [2400.0, 8.0], [2500.0, 28.0], [2600.0, 74.0], [168500.0, 1.0], [2700.0, 7.0], [2800.0, 23.0], [2900.0, 16.0], [3000.0, 13.0], [3100.0, 23.0], [3200.0, 39.0], [3300.0, 31.0], [3400.0, 71.0], [3500.0, 12.0], [3600.0, 111.0], [3700.0, 77.0], [3800.0, 10.0], [3900.0, 1.0], [4000.0, 16.0], [4200.0, 26.0], [68100.0, 5.0], [4400.0, 103.0], [4600.0, 20.0], [71300.0, 2.0], [4800.0, 34.0], [77700.0, 3.0], [5000.0, 6.0], [80900.0, 2.0], [5200.0, 165.0], [5600.0, 37.0], [5400.0, 86.0], [5800.0, 33.0], [6000.0, 17.0], [6200.0, 98.0], [100100.0, 103.0], [6600.0, 28.0], [103300.0, 87.0], [6400.0, 7.0], [6800.0, 24.0], [7000.0, 33.0], [7400.0, 86.0], [7200.0, 207.0], [7600.0, 88.0], [7800.0, 419.0], [8000.0, 151.0], [8400.0, 16.0], [8800.0, 160.0], [9200.0, 258.0], [9600.0, 257.0], [10000.0, 450.0], [10400.0, 380.0], [10800.0, 314.0], [11200.0, 97.0], [11600.0, 95.0], [12000.0, 38.0], [12400.0, 27.0], [12800.0, 15.0], [13200.0, 23.0], [13600.0, 47.0], [14000.0, 59.0], [14400.0, 100.0], [14800.0, 55.0], [15200.0, 127.0], [15600.0, 55.0], [16000.0, 12.0], [16800.0, 8.0], [17600.0, 10.0], [18400.0, 39.0], [19200.0, 14.0], [20000.0, 2.0], [20800.0, 11.0], [22400.0, 93.0], [21600.0, 9.0], [23200.0, 7.0], [24000.0, 2.0], [24800.0, 34.0], [25600.0, 33.0], [27200.0, 3.0], [28800.0, 66.0], [30400.0, 1.0], [31200.0, 7.0], [32000.0, 3.0], [131900.0, 70.0], [33600.0, 22.0], [36800.0, 2.0], [35200.0, 1.0], [38400.0, 2.0], [40000.0, 12.0], [41600.0, 4.0], [44800.0, 2.0], [46400.0, 7.0], [48000.0, 4.0], [49600.0, 1.0], [56000.0, 1.0], [59200.0, 3.0], [57600.0, 2.0], [60800.0, 3.0], [62400.0, 1.0], [64000.0, 3.0], [67200.0, 1.0], [70400.0, 2.0], [76800.0, 1.0], [80000.0, 7.0], [83200.0, 1.0], [86400.0, 1.0], [92800.0, 43.0], [128000.0, 14.0], [153600.0, 1.0], [132100.0, 2.0], [67100.0, 1.0], [70300.0, 108.0], [73500.0, 2.0], [76700.0, 2.0], [79900.0, 2.0], [83100.0, 1.0], [108700.0, 1.0], [124700.0, 1.0], [142600.0, 1.0], [33100.0, 4.0], [34700.0, 11.0], [140300.0, 6.0], [37900.0, 6.0], [39500.0, 5.0], [42700.0, 4.0], [44300.0, 2.0], [45900.0, 2.0], [49100.0, 2.0], [47500.0, 2.0], [52300.0, 4.0], [53900.0, 1.0], [57100.0, 40.0], [55500.0, 2.0], [58700.0, 2.0], [61900.0, 1.0], [63500.0, 2.0], [91800.0, 2.0], [107800.0, 1.0], [130200.0, 1.0], [127000.0, 1.0], [131600.0, 1.0], [68500.0, 1.0], [71700.0, 8.0], [74900.0, 5.0], [81300.0, 1.0], [100500.0, 34.0], [126100.0, 2.0], [16900.0, 5.0], [17700.0, 1.0], [19300.0, 2.0], [18500.0, 25.0], [20100.0, 18.0], [21700.0, 33.0], [22500.0, 2.0], [23300.0, 3.0], [24100.0, 2.0], [24900.0, 7.0], [25700.0, 12.0], [27300.0, 4.0], [28100.0, 5.0], [30500.0, 2.0], [31300.0, 2.0], [32100.0, 5.0], [131100.0, 1.0], [137500.0, 1.0], [33800.0, 66.0], [35400.0, 2.0], [37000.0, 36.0], [38600.0, 7.0], [40200.0, 8.0], [43400.0, 5.0], [45000.0, 3.0], [46600.0, 2.0], [53000.0, 4.0], [57800.0, 4.0], [61000.0, 1.0], [59400.0, 2.0], [62600.0, 2.0], [64200.0, 27.0], [67600.0, 3.0], [74000.0, 1.0], [77200.0, 2.0], [80400.0, 8.0], [118800.0, 1.0], [128400.0, 5.0], [140900.0, 2.0], [67500.0, 1.0], [70700.0, 5.0], [80300.0, 2.0], [96300.0, 2.0], [105900.0, 1.0], [102700.0, 2.0], [128300.0, 3.0], [132200.0, 2.0], [183400.0, 4.0], [33300.0, 14.0], [34900.0, 3.0], [36500.0, 3.0], [38100.0, 1.0], [39700.0, 64.0], [42900.0, 6.0], [41300.0, 20.0], [44500.0, 2.0], [46100.0, 19.0], [49300.0, 11.0], [50900.0, 1.0], [52500.0, 2.0], [55700.0, 2.0], [57300.0, 2.0], [58900.0, 6.0], [63700.0, 4.0], [65300.0, 4.0], [66600.0, 2.0], [73000.0, 47.0], [79400.0, 2.0], [85800.0, 1.0], [98600.0, 7.0], [105000.0, 2.0], [108200.0, 1.0], [127400.0, 35.0], [130600.0, 12.0], [146800.0, 1.0], [140400.0, 2.0], [159600.0, 1.0], [131700.0, 3.0], [65700.0, 65.0], [68900.0, 1.0], [72100.0, 3.0], [75300.0, 2.0], [81700.0, 11.0], [110500.0, 1.0], [116900.0, 2.0], [123300.0, 2.0], [8500.0, 146.0], [8900.0, 381.0], [9300.0, 819.0], [9700.0, 364.0], [10100.0, 435.0], [10500.0, 92.0], [10900.0, 13.0], [11300.0, 104.0], [11700.0, 22.0], [12100.0, 19.0], [12500.0, 22.0], [13300.0, 80.0], [12900.0, 4.0], [13700.0, 96.0], [14100.0, 1.0], [14500.0, 139.0], [15300.0, 45.0], [14900.0, 37.0], [15700.0, 9.0], [16100.0, 5.0], [17000.0, 2.0], [17800.0, 2.0], [18600.0, 25.0], [19400.0, 7.0], [20200.0, 50.0], [21800.0, 30.0], [22600.0, 7.0], [23400.0, 3.0], [24200.0, 4.0], [27400.0, 26.0], [28200.0, 4.0], [29000.0, 4.0], [30600.0, 2.0], [29800.0, 1.0], [31400.0, 14.0], [32200.0, 1.0], [34000.0, 43.0], [35600.0, 47.0], [38800.0, 3.0], [37200.0, 46.0], [40400.0, 38.0], [42000.0, 104.0], [46800.0, 5.0], [50000.0, 4.0], [56400.0, 13.0], [58000.0, 2.0], [59600.0, 2.0], [71200.0, 37.0], [77600.0, 3.0], [87200.0, 3.0], [100000.0, 49.0], [103200.0, 31.0], [125600.0, 1.0], [128800.0, 21.0], [67900.0, 10.0], [71100.0, 3.0], [74300.0, 2.0], [83900.0, 2.0], [90300.0, 2.0], [103100.0, 79.0], [128700.0, 20.0], [131400.0, 93.0], [135500.0, 11.0], [141900.0, 16.0], [35100.0, 17.0], [36700.0, 1.0], [38300.0, 2.0], [39900.0, 2.0], [41500.0, 25.0], [43100.0, 1.0], [46300.0, 2.0], [47900.0, 11.0], [51100.0, 1.0], [49500.0, 3.0], [54300.0, 2.0], [55900.0, 1.0], [57500.0, 1.0], [60700.0, 1.0], [62300.0, 1.0], [65500.0, 26.0], [67000.0, 7.0], [70200.0, 48.0], [76600.0, 1.0], [83000.0, 1.0], [86200.0, 3.0], [92600.0, 1.0], [121400.0, 2.0], [127800.0, 9.0], [169300.0, 1.0], [69300.0, 1.0], [66100.0, 8.0], [72500.0, 6.0], [75700.0, 2.0], [78900.0, 1.0], [85300.0, 2.0], [82100.0, 2.0], [130100.0, 3.0], [141400.0, 1.0], [147800.0, 106.0], [17100.0, 6.0], [18700.0, 91.0], [19500.0, 28.0], [20300.0, 62.0], [21100.0, 3.0], [21900.0, 18.0], [23500.0, 12.0], [22700.0, 7.0], [24300.0, 3.0], [25100.0, 14.0], [25900.0, 2.0], [26700.0, 2.0], [27500.0, 6.0], [28300.0, 4.0], [29100.0, 7.0], [30700.0, 2.0], [29900.0, 5.0], [32300.0, 16.0], [139100.0, 28.0], [35800.0, 2.0], [37400.0, 4.0], [39000.0, 11.0], [42200.0, 10.0], [45400.0, 10.0], [47000.0, 6.0], [50200.0, 16.0], [53400.0, 1.0], [56600.0, 2.0], [58200.0, 2.0], [59800.0, 1.0], [61400.0, 2.0], [63000.0, 1.0], [64600.0, 1.0], [71600.0, 8.0], [84400.0, 3.0], [100400.0, 205.0], [110000.0, 1.0], [129200.0, 1.0], [132000.0, 15.0], [144800.0, 1.0], [71500.0, 6.0], [74700.0, 2.0], [77900.0, 3.0], [87500.0, 1.0], [100300.0, 30.0], [113100.0, 1.0], [129100.0, 25.0], [140200.0, 12.0], [131500.0, 18.0], [33700.0, 2.0], [35300.0, 2.0], [36900.0, 23.0], [38500.0, 14.0], [40100.0, 22.0], [41700.0, 4.0], [52900.0, 2.0], [51300.0, 1.0], [54500.0, 2.0], [59300.0, 12.0], [57700.0, 1.0], [60900.0, 1.0], [62500.0, 3.0], [64100.0, 28.0], [80200.0, 6.0], [83400.0, 2.0], [89800.0, 1.0], [99400.0, 1.0], [128200.0, 18.0], [135600.0, 20.0], [139700.0, 3.0], [4300.0, 75.0], [66500.0, 34.0], [4100.0, 18.0], [72900.0, 22.0], [4500.0, 96.0], [4700.0, 19.0], [76100.0, 3.0], [5100.0, 36.0], [79300.0, 5.0], [4900.0, 14.0], [5300.0, 11.0], [5500.0, 24.0], [5700.0, 14.0], [5900.0, 41.0], [6100.0, 11.0], [6300.0, 40.0], [6500.0, 24.0], [6700.0, 242.0], [6900.0, 7.0], [7100.0, 26.0], [7300.0, 120.0], [7500.0, 116.0], [7900.0, 124.0], [7700.0, 158.0], [8100.0, 33.0], [130500.0, 10.0], [127300.0, 4.0], [8200.0, 80.0], [8600.0, 224.0], [9000.0, 459.0], [9400.0, 54.0], [9800.0, 52.0], [10200.0, 15.0], [10600.0, 598.0], [11000.0, 74.0], [11400.0, 35.0], [11800.0, 69.0], [12200.0, 3.0], [12600.0, 12.0], [13000.0, 96.0], [13400.0, 87.0], [13800.0, 105.0], [14200.0, 10.0], [14600.0, 7.0], [15000.0, 38.0], [15400.0, 15.0], [15800.0, 69.0], [16200.0, 37.0], [17200.0, 25.0], [16400.0, 62.0], [18800.0, 20.0], [20400.0, 11.0], [19600.0, 2.0], [21200.0, 22.0], [22000.0, 9.0], [22800.0, 2.0], [23600.0, 4.0], [25200.0, 72.0], [26000.0, 3.0], [26800.0, 1.0], [27600.0, 3.0], [29200.0, 2.0], [30000.0, 3.0], [32400.0, 17.0], [32800.0, 11.0], [36000.0, 2.0], [37600.0, 4.0], [39200.0, 6.0], [40800.0, 5.0], [42400.0, 2.0], [45600.0, 3.0], [48800.0, 2.0], [47200.0, 1.0], [52000.0, 2.0], [60000.0, 5.0], [61600.0, 2.0], [64800.0, 3.0], [65600.0, 48.0], [72000.0, 91.0], [81600.0, 2.0], [78400.0, 4.0], [97600.0, 2.0], [107200.0, 1.0], [129600.0, 3.0], [131200.0, 1.0], [135300.0, 7.0], [68700.0, 2.0], [71900.0, 1.0], [75100.0, 2.0], [78300.0, 3.0], [81500.0, 1.0], [84700.0, 2.0], [91100.0, 1.0], [97500.0, 55.0], [119900.0, 1.0], [129500.0, 2.0], [33900.0, 2.0], [35500.0, 1.0], [38700.0, 20.0], [37100.0, 22.0], [40300.0, 11.0], [41900.0, 3.0], [46700.0, 2.0], [45100.0, 1.0], [49900.0, 12.0], [51500.0, 2.0], [56300.0, 3.0], [57900.0, 6.0], [61100.0, 4.0], [59500.0, 1.0], [62700.0, 2.0], [64300.0, 3.0], [67800.0, 4.0], [71000.0, 1.0], [77400.0, 1.0], [80600.0, 1.0], [96600.0, 3.0], [103000.0, 5.0], [115800.0, 1.0], [119000.0, 1.0], [122200.0, 1.0], [128600.0, 52.0], [209300.0, 2.0], [66900.0, 4.0], [76500.0, 1.0], [89300.0, 1.0], [86100.0, 1.0], [95700.0, 1.0], [127700.0, 22.0], [143000.0, 1.0], [17300.0, 23.0], [16500.0, 9.0], [18100.0, 18.0], [19700.0, 9.0], [21300.0, 5.0], [20500.0, 7.0], [22100.0, 2.0], [22900.0, 7.0], [23700.0, 2.0], [24500.0, 1.0], [25300.0, 36.0], [26100.0, 34.0], [26900.0, 1.0], [28500.0, 2.0], [27700.0, 3.0], [30100.0, 10.0], [32500.0, 2.0], [34600.0, 19.0], [36200.0, 7.0], [37800.0, 4.0], [39400.0, 9.0], [166300.0, 1.0], [42600.0, 1.0], [45800.0, 6.0], [49000.0, 3.0], [52200.0, 12.0], [53800.0, 1.0], [57000.0, 3.0], [58600.0, 2.0], [60200.0, 1.0], [61800.0, 5.0], [63400.0, 2.0], [65000.0, 10.0], [66000.0, 7.0], [72400.0, 38.0], [78800.0, 2.0], [85200.0, 1.0], [82000.0, 2.0], [88400.0, 2.0], [94800.0, 2.0], [152800.0, 1.0], [131300.0, 7.0], [144100.0, 2.0], [69100.0, 2.0], [65900.0, 10.0], [72300.0, 24.0], [75500.0, 2.0], [81900.0, 1.0], [85100.0, 1.0], [88300.0, 3.0], [101100.0, 2.0], [107500.0, 1.0], [123500.0, 14.0], [135400.0, 31.0], [141800.0, 5.0], [154600.0, 1.0], [37300.0, 4.0], [40500.0, 4.0], [42100.0, 7.0], [46900.0, 1.0], [45300.0, 3.0], [48500.0, 10.0], [54900.0, 2.0], [56500.0, 3.0], [61300.0, 7.0], [59700.0, 2.0], [62900.0, 4.0], [64500.0, 10.0], [68200.0, 1.0], [71400.0, 2.0], [77800.0, 1.0], [81000.0, 2.0], [90600.0, 2.0], [93800.0, 1.0], [100200.0, 201.0], [103400.0, 28.0], [129000.0, 21.0], [147700.0, 13.0], [70500.0, 10.0], [76900.0, 1.0], [92900.0, 1.0], [128100.0, 72.0], [8300.0, 21.0], [8700.0, 295.0], [139000.0, 7.0], [132600.0, 2.0], [9100.0, 407.0], [9500.0, 320.0], [9900.0, 318.0], [10700.0, 310.0], [10300.0, 48.0], [11100.0, 316.0], [11500.0, 228.0], [11900.0, 17.0], [12300.0, 14.0], [12700.0, 34.0], [13100.0, 8.0], [13500.0, 21.0], [14300.0, 40.0], [13900.0, 48.0], [14700.0, 62.0], [15100.0, 102.0], [15500.0, 14.0], [16300.0, 156.0], [15900.0, 32.0], [16600.0, 56.0], [18200.0, 25.0], [19000.0, 12.0], [19800.0, 12.0], [20600.0, 27.0], [21400.0, 23.0], [22200.0, 3.0], [23000.0, 3.0], [26200.0, 6.0], [27000.0, 1.0], [32600.0, 25.0], [31800.0, 7.0], [33200.0, 3.0], [34800.0, 2.0], [36400.0, 1.0], [38000.0, 1.0], [39600.0, 4.0], [41200.0, 1.0], [44400.0, 3.0], [49200.0, 2.0], [52400.0, 1.0], [54000.0, 5.0], [55600.0, 4.0], [57200.0, 14.0], [58800.0, 3.0], [60400.0, 2.0], [62000.0, 2.0], [65200.0, 2.0], [63600.0, 59.0], [69600.0, 1.0], [66400.0, 5.0], [72800.0, 1.0], [79200.0, 84.0], [82400.0, 1.0], [127200.0, 10.0], [130400.0, 1.0], [139200.0, 2.0], [66300.0, 3.0], [69500.0, 1.0], [72700.0, 1.0], [75900.0, 2.0], [79100.0, 25.0], [82300.0, 2.0], [101500.0, 1.0], [120700.0, 1.0], [127100.0, 2.0], [130300.0, 2.0], [134600.0, 42.0], [141000.0, 4.0], [132300.0, 16.0], [34300.0, 1.0], [35900.0, 1.0], [37500.0, 7.0], [40700.0, 2.0], [39100.0, 24.0], [45500.0, 3.0], [47100.0, 7.0], [48700.0, 1.0], [50300.0, 3.0], [51900.0, 3.0], [53500.0, 3.0], [59900.0, 3.0], [61500.0, 1.0], [63100.0, 15.0], [64700.0, 7.0], [81400.0, 1.0], [70900.0, 9.0], [74100.0, 2.0], [83700.0, 2.0], [90100.0, 1.0], [96500.0, 2.0], [106100.0, 3.0], [102900.0, 1.0], [109300.0, 1.0], [115700.0, 1.0], [118900.0, 4.0], [128500.0, 3.0], [131800.0, 8.0], [144600.0, 1.0], [157400.0, 3.0], [16700.0, 27.0], [17500.0, 11.0], [18300.0, 5.0], [19100.0, 1.0], [19900.0, 18.0], [20700.0, 2.0], [21500.0, 9.0], [22300.0, 48.0], [23100.0, 7.0], [23900.0, 9.0], [25500.0, 13.0], [24700.0, 33.0], [27100.0, 1.0], [28700.0, 3.0], [31100.0, 2.0], [32700.0, 24.0], [31900.0, 4.0], [135900.0, 3.0], [33400.0, 6.0], [35000.0, 3.0], [36600.0, 1.0], [38200.0, 1.0], [39800.0, 5.0], [43000.0, 2.0], [44600.0, 1.0], [47800.0, 4.0], [51000.0, 7.0], [49400.0, 6.0], [52600.0, 2.0], [54200.0, 1.0], [59000.0, 2.0], [60600.0, 2.0], [65400.0, 9.0], [89200.0, 2.0], [95600.0, 2.0], [121200.0, 2.0], [130800.0, 2.0], [127600.0, 22.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 209300.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 394.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 103484.0, "series": [{"data": [[0.0, 103484.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 5477.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 20937.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 394.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 511.91780821917905, "minX": 1.68288738E12, "maxY": 3000.0, "series": [{"data": [[1.68288774E12, 511.91780821917905], [1.68288756E12, 3000.0], [1.68288738E12, 3000.0], [1.68288768E12, 2918.0168487317146], [1.6828875E12, 3000.0], [1.68288762E12, 3000.0], [1.68288744E12, 3000.0]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68288774E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 36.5, "minX": 2.0, "maxY": 168508.0, "series": [{"data": [[2.0, 41391.5], [4.0, 41393.5], [5.0, 41391.0], [6.0, 41387.0], [7.0, 41384.0], [8.0, 41381.0], [9.0, 41381.0], [10.0, 41379.0], [11.0, 41380.0], [12.0, 41381.0], [13.0, 41379.0], [15.0, 41379.5], [16.0, 41380.0], [17.0, 40440.0], [19.0, 41344.0], [20.0, 41343.5], [21.0, 41248.0], [23.0, 39984.0], [24.0, 40452.0], [25.0, 39514.0], [26.0, 40453.0], [27.0, 40454.0], [28.0, 40453.0], [29.0, 40450.0], [30.0, 40453.0], [31.0, 40449.0], [35.0, 40449.0], [34.0, 39512.0], [37.0, 40450.0], [36.0, 40450.0], [39.0, 40450.0], [38.0, 39509.0], [41.0, 40448.0], [43.0, 40447.0], [42.0, 40448.0], [44.0, 40446.0], [47.0, 40443.0], [46.0, 39975.5], [49.0, 40442.0], [48.0, 40439.0], [51.0, 40438.0], [50.0, 40441.0], [53.0, 40434.0], [52.0, 40436.0], [54.0, 39493.0], [57.0, 40119.333333333336], [59.0, 40426.0], [58.0, 39492.0], [61.0, 40426.0], [60.0, 40426.0], [62.0, 40425.0], [67.0, 40409.0], [66.0, 39478.0], [65.0, 40421.0], [64.0, 39955.0], [71.0, 40398.0], [70.0, 39782.0], [74.0, 39301.0], [73.0, 40394.0], [72.0, 40399.0], [79.0, 26179.0], [78.0, 26180.5], [76.0, 65190.0], [82.0, 26179.0], [81.0, 26179.5], [87.0, 26178.0], [86.0, 26179.0], [85.0, 26178.0], [91.0, 26161.0], [90.0, 26168.0], [89.0, 26169.0], [88.0, 26171.0], [95.0, 26157.0], [94.0, 26160.0], [93.0, 26159.0], [92.0, 26160.0], [99.0, 26146.0], [98.0, 26147.0], [97.0, 26154.5], [102.0, 25702.0], [101.0, 25703.0], [100.0, 25706.0], [106.0, 25702.0], [105.0, 25701.5], [104.0, 25703.0], [111.0, 25700.0], [110.0, 25699.5], [108.0, 25702.0], [115.0, 25695.0], [114.0, 25696.0], [112.0, 25696.0], [119.0, 25689.0], [118.0, 25690.0], [117.0, 25691.0], [116.0, 25693.0], [123.0, 25688.333333333332], [120.0, 25687.0], [127.0, 25315.0], [126.0, 23312.0], [125.0, 25315.0], [124.0, 25651.0], [135.0, 25311.0], [134.0, 25312.333333333332], [131.0, 25312.0], [130.0, 25312.0], [129.0, 25313.0], [128.0, 25312.0], [143.0, 24309.5], [141.0, 25311.0], [140.0, 25311.0], [139.0, 25310.0], [138.0, 25312.0], [137.0, 25312.0], [151.0, 25308.0], [150.0, 25308.0], [148.0, 25308.0], [144.0, 25310.0], [159.0, 25302.0], [158.0, 25304.0], [157.0, 25305.5], [156.0, 25305.0], [154.0, 25306.0], [153.0, 25307.0], [152.0, 25306.0], [167.0, 25299.0], [166.0, 25299.0], [165.0, 25298.0], [164.0, 25300.0], [163.0, 25299.0], [162.0, 25302.0], [161.0, 25301.0], [160.0, 59251.0], [175.0, 25291.0], [174.0, 25292.0], [173.0, 25290.0], [172.0, 25292.0], [171.0, 25292.0], [170.0, 25293.0], [169.0, 25294.0], [168.0, 25295.0], [183.0, 25281.0], [182.0, 25282.0], [181.0, 25285.0], [180.0, 25285.0], [179.0, 25288.0], [178.0, 25287.0], [177.0, 25289.0], [176.0, 25289.0], [191.0, 25277.0], [190.0, 25278.5], [188.0, 24280.0], [186.0, 25281.0], [185.0, 25282.0], [199.0, 25269.0], [198.0, 24269.0], [196.0, 25272.0], [195.0, 25273.0], [194.0, 24313.0], [193.0, 25276.0], [192.0, 25276.0], [207.0, 25254.0], [205.0, 25254.0], [204.0, 25257.5], [202.0, 25257.0], [201.0, 25259.0], [200.0, 25266.0], [215.0, 25242.0], [214.0, 25242.0], [213.0, 25243.0], [211.0, 25244.0], [210.0, 25246.0], [209.0, 25251.0], [208.0, 25253.0], [222.0, 24277.0], [221.0, 25240.0], [220.0, 25241.0], [218.0, 24573.333333333332], [230.0, 25215.0], [229.0, 25226.0], [227.0, 25227.5], [225.0, 25236.0], [224.0, 25238.0], [239.0, 25194.0], [238.0, 25197.0], [237.0, 25203.0], [236.0, 25208.0], [235.0, 25208.0], [233.0, 23208.0], [232.0, 24212.0], [245.0, 23183.0], [244.0, 25187.0], [243.0, 25188.5], [241.0, 23191.0], [240.0, 23191.0], [255.0, 25172.0], [253.0, 23170.0], [252.0, 24178.5], [250.0, 25179.0], [249.0, 25183.0], [248.0, 24829.666666666668], [258.0, 26981.0], [269.0, 20362.0], [268.0, 20340.0], [267.0, 22320.0], [265.0, 42270.0], [264.0, 20318.0], [263.0, 20634.5], [261.0, 24569.0], [260.0, 21628.0], [257.0, 25170.0], [256.0, 23169.0], [275.0, 21316.0], [286.0, 21311.0], [284.0, 20311.333333333332], [281.0, 20355.0], [280.0, 20332.5], [278.0, 23254.0], [277.0, 20313.0], [276.0, 20356.0], [273.0, 20316.0], [272.0, 41247.333333333336], [302.0, 20306.5], [303.0, 20350.0], [300.0, 21306.5], [291.0, 20309.0], [289.0, 20310.0], [288.0, 20332.5], [299.0, 20307.0], [298.0, 39198.0], [296.0, 20350.0], [295.0, 20308.0], [294.0, 20307.0], [293.0, 20307.0], [292.0, 20309.0], [307.0, 29750.5], [319.0, 26611.333333333332], [316.0, 20301.0], [315.0, 22302.0], [314.0, 35933.0], [312.0, 31277.5], [310.0, 20324.5], [308.0, 20347.0], [305.0, 20304.0], [304.0, 22306.0], [334.0, 20292.0], [335.0, 20336.0], [333.0, 20336.0], [332.0, 20293.0], [331.0, 20294.0], [330.0, 39186.0], [329.0, 20316.0], [327.0, 20338.5], [321.0, 39190.0], [323.0, 39189.0], [322.0, 20342.0], [326.0, 20295.0], [324.0, 20342.0], [349.0, 22281.0], [348.0, 39172.0], [339.0, 20333.0], [338.0, 20288.0], [337.0, 20333.0], [336.0, 22292.0], [347.0, 39173.0], [346.0, 20325.0], [345.0, 20327.0], [344.0, 29754.0], [342.0, 20285.0], [341.0, 20329.0], [340.0, 20289.0], [365.0, 39161.0], [366.0, 39158.0], [364.0, 20314.0], [355.0, 20277.0], [354.0, 39168.0], [353.0, 20319.0], [352.0, 20277.0], [363.0, 20315.0], [362.0, 20317.0], [361.0, 20274.0], [360.0, 29741.5], [358.0, 20298.0], [357.0, 20277.0], [382.0, 39143.0], [383.0, 20290.0], [380.0, 29696.0], [369.0, 20265.0], [368.0, 20288.0], [379.0, 39143.0], [378.0, 20298.0], [376.0, 39150.0], [375.0, 42210.0], [374.0, 40680.5], [373.0, 39151.0], [372.0, 29705.0], [398.0, 39076.0], [399.0, 39076.0], [397.0, 29631.0], [385.0, 29692.0], [395.0, 20236.0], [394.0, 40622.5], [392.0, 42154.0], [391.0, 20246.0], [390.0, 20249.0], [389.0, 42159.0], [388.0, 26557.333333333332], [413.0, 42096.0], [414.0, 42095.0], [412.0, 39035.5], [402.0, 39074.0], [401.0, 42135.0], [400.0, 20229.0], [410.0, 39035.0], [409.0, 42104.0], [408.0, 22157.0], [407.0, 42114.0], [406.0, 32141.0], [404.0, 39058.0], [430.0, 38550.0], [431.0, 38546.0], [429.0, 38549.0], [428.0, 35490.0], [427.0, 35986.0], [426.0, 39049.0], [425.0, 17143.0], [424.0, 40057.0], [423.0, 36998.0], [416.0, 19138.0], [419.0, 40067.0], [418.0, 27584.5], [422.0, 37002.0], [421.0, 40061.0], [420.0, 37003.0], [446.0, 37295.0], [447.0, 37294.0], [445.0, 37294.5], [435.0, 32508.5], [433.0, 18284.0], [432.0, 38006.0], [443.0, 37294.0], [442.0, 28995.5], [440.0, 37296.0], [439.0, 37297.0], [438.0, 27791.5], [437.0, 15388.0], [456.0, 37292.0], [461.0, 28990.5], [459.0, 37290.0], [458.0, 20691.0], [457.0, 20691.0], [455.0, 37293.0], [454.0, 20692.333333333332], [451.0, 20692.0], [450.0, 18280.0], [449.0, 37294.0], [467.0, 37288.0], [479.0, 33196.0], [476.0, 40557.0], [475.0, 27781.0], [473.0, 15335.0], [472.0, 20687.0], [471.0, 41619.0], [470.0, 24300.333333333332], [466.0, 30474.5], [464.0, 32746.333333333332], [494.0, 38691.0], [495.0, 38156.0], [493.0, 18026.5], [481.0, 40556.0], [480.0, 20685.0], [491.0, 37281.0], [490.0, 40276.0], [489.0, 49098.0], [488.0, 28983.0], [486.0, 37284.0], [485.0, 20823.25], [509.0, 30470.5], [510.0, 15365.0], [508.0, 27768.0], [505.0, 37274.0], [504.0, 37386.0], [503.0, 15368.0], [502.0, 17793.0], [500.0, 28976.5], [498.0, 20676.0], [497.0, 26324.0], [540.0, 37323.0], [543.0, 41543.0], [528.0, 22926.0], [530.0, 40213.0], [529.0, 15312.0], [533.0, 19409.5], [531.0, 18210.0], [542.0, 41543.0], [541.0, 18200.0], [539.0, 38625.0], [538.0, 41545.0], [537.0, 38625.0], [536.0, 18201.0], [526.0, 30957.666666666668], [513.0, 40266.0], [512.0, 30468.5], [516.0, 17792.0], [515.0, 27711.0], [518.0, 37257.0], [517.0, 18259.0], [523.0, 28722.0], [520.0, 38751.5], [535.0, 15308.0], [534.0, 18206.0], [573.0, 23564.0], [575.0, 26240.5], [563.0, 27229.0], [561.0, 27126.666666666668], [572.0, 27619.0], [571.0, 37196.0], [570.0, 15294.0], [569.0, 28900.5], [568.0, 37201.0], [549.0, 17727.0], [547.0, 15302.0], [546.0, 30141.0], [545.0, 27705.0], [558.0, 37203.0], [557.0, 37205.0], [556.0, 40200.0], [555.0, 27701.5], [553.0, 24038.0], [552.0, 15302.0], [567.0, 40193.0], [565.0, 16273.0], [593.0, 37180.0], [605.0, 19943.333333333332], [607.0, 15252.0], [592.0, 33799.75], [602.0, 20560.0], [601.0, 37165.0], [600.0, 37169.0], [583.0, 40175.0], [582.0, 23553.0], [581.0, 30369.0], [579.0, 28396.5], [577.0, 15280.0], [576.0, 37192.0], [588.0, 28879.0], [587.0, 15272.0], [586.0, 37181.0], [584.0, 37295.0], [597.0, 15262.0], [596.0, 27595.0], [595.0, 27670.5], [633.0, 20521.0], [627.0, 19365.5], [637.0, 27078.333333333332], [639.0, 25514.0], [625.0, 37143.0], [624.0, 15236.0], [634.0, 15213.0], [632.0, 37122.0], [615.0, 37267.0], [614.0, 37157.0], [613.0, 15251.0], [612.0, 37267.0], [611.0, 25554.5], [609.0, 18149.0], [608.0, 15251.5], [623.0, 32288.0], [622.0, 25543.5], [620.0, 19379.5], [618.0, 15247.0], [617.0, 26201.5], [631.0, 26168.5], [629.0, 15215.0], [628.0, 23493.0], [670.0, 26119.0], [671.0, 15165.0], [656.0, 15184.0], [669.0, 37073.0], [667.0, 15164.0], [666.0, 26120.5], [664.0, 32206.333333333332], [655.0, 15185.5], [640.0, 15196.0], [643.0, 37099.0], [642.0, 15172.5], [646.0, 37100.0], [644.0, 15193.0], [653.0, 15187.0], [652.0, 15190.0], [651.0, 22530.666666666668], [648.0, 26144.5], [661.0, 15167.0], [660.0, 15182.0], [659.0, 37089.0], [657.0, 15183.0], [702.0, 9650.0], [703.0, 9650.0], [689.0, 12093.333333333334], [691.0, 9659.0], [690.0, 12552.0], [693.0, 9657.0], [692.0, 9657.0], [701.0, 9650.0], [700.0, 9652.0], [699.0, 11102.0], [697.0, 9654.0], [696.0, 9654.0], [678.0, 28804.0], [677.0, 15140.0], [675.0, 20449.0], [674.0, 15146.0], [673.0, 15148.0], [672.0, 37054.0], [686.0, 10657.0], [685.0, 9659.5], [683.0, 26429.2], [695.0, 9655.0], [694.0, 9655.0], [722.0, 14718.5], [734.0, 13262.5], [732.0, 12046.666666666666], [730.0, 9613.0], [728.0, 9614.5], [718.0, 9629.0], [704.0, 12542.0], [707.0, 10143.5], [705.0, 9647.0], [710.0, 10138.0], [708.0, 9645.0], [717.0, 9630.0], [716.0, 9638.0], [714.0, 9637.0], [712.0, 9638.0], [727.0, 16915.0], [726.0, 9613.5], [724.0, 9614.0], [720.0, 9624.0], [761.0, 10030.0], [766.0, 7665.0], [767.0, 8607.0], [753.0, 9062.0], [752.0, 21393.0], [755.0, 9061.0], [754.0, 25196.0], [757.0, 10057.0], [756.0, 10058.0], [765.0, 9604.0], [764.0, 9107.0], [762.0, 9605.0], [760.0, 25168.0], [742.0, 9591.0], [741.0, 9591.0], [740.0, 9593.0], [739.0, 9601.0], [737.0, 14918.0], [736.0, 9611.5], [751.0, 9064.0], [749.0, 9064.0], [748.0, 10060.0], [747.0, 9064.0], [746.0, 9064.0], [745.0, 8751.666666666666], [759.0, 10046.0], [758.0, 9054.0], [796.0, 8026.0], [799.0, 9018.0], [784.0, 7636.0], [786.0, 7633.0], [785.0, 8578.0], [789.0, 9552.0], [788.0, 8574.0], [798.0, 7079.0], [797.0, 7080.0], [795.0, 9023.0], [794.0, 7086.0], [793.0, 9023.0], [792.0, 8549.0], [783.0, 7638.0], [772.0, 9103.5], [770.0, 8291.666666666666], [775.0, 8603.5], [773.0, 8604.0], [782.0, 7638.0], [781.0, 7648.0], [780.0, 8596.0], [779.0, 9595.0], [778.0, 9598.0], [777.0, 7661.0], [776.0, 7661.0], [791.0, 7611.0], [790.0, 9549.0], [826.0, 6291.0], [830.0, 6291.0], [831.0, 6289.0], [817.0, 30020.0], [816.0, 12542.0], [820.0, 6293.0], [818.0, 6293.0], [829.0, 6290.0], [828.0, 6290.0], [827.0, 14533.0], [825.0, 32436.0], [807.0, 6620.0], [806.0, 6620.0], [805.0, 6621.0], [804.0, 7590.0], [802.0, 6622.0], [800.0, 20366.0], [815.0, 14185.5], [813.0, 8377.333333333334], [810.0, 6612.0], [809.0, 8552.0], [808.0, 8557.0], [823.0, 12540.0], [822.0, 9657.5], [839.0, 6283.0], [861.0, 9384.5], [863.0, 19850.0], [859.0, 6261.0], [858.0, 6264.0], [856.0, 6264.333333333333], [838.0, 6285.0], [837.0, 6285.0], [835.0, 47225.0], [834.0, 20332.0], [833.0, 6287.0], [832.0, 32129.0], [846.0, 20318.0], [844.0, 6273.0], [843.0, 19543.0], [842.0, 29234.0], [841.0, 43121.0], [840.0, 6280.0], [853.0, 7550.333333333333], [850.0, 13654.0], [849.0, 7241.5], [848.0, 52317.0], [882.0, 6250.0], [891.0, 6246.0], [893.0, 31184.5], [880.0, 30510.0], [890.0, 33428.0], [889.0, 13876.0], [888.0, 19519.0], [871.0, 33439.0], [869.0, 11395.333333333334], [866.0, 44972.5], [865.0, 6261.0], [879.0, 32090.0], [878.0, 6250.0], [877.0, 6251.0], [876.0, 15250.5], [874.0, 6260.0], [873.0, 39755.666666666664], [886.0, 20295.0], [884.0, 33429.0], [883.0, 6250.0], [921.0, 6239.0], [925.0, 52276.0], [927.0, 10073.0], [913.0, 33421.0], [912.0, 6242.0], [917.0, 29968.0], [915.0, 12491.0], [924.0, 56481.0], [923.0, 6236.0], [922.0, 6237.0], [920.0, 6239.0], [902.0, 33864.333333333336], [900.0, 6245.0], [899.0, 52310.0], [898.0, 56489.0], [896.0, 28599.333333333336], [911.0, 39256.0], [909.0, 37357.5], [907.0, 38389.0], [906.0, 43089.0], [904.0, 8162.5], [919.0, 9139.0], [918.0, 26485.333333333332], [957.0, 43957.8], [959.0, 56464.0], [955.0, 29947.0], [952.0, 27818.0], [951.0, 33381.0], [949.0, 52286.0], [948.0, 29254.0], [945.0, 26693.0], [943.0, 56468.0], [931.0, 21590.0], [928.0, 26705.5], [933.0, 6230.0], [932.0, 47171.0], [942.0, 14762.0], [940.0, 52289.0], [939.0, 49231.0], [938.0, 52293.0], [937.0, 26851.0], [936.0, 6227.5], [989.0, 60168.0], [991.0, 48850.0], [987.0, 29909.0], [986.0, 6185.0], [985.0, 46877.0], [967.0, 18081.5], [966.0, 20265.0], [964.0, 54764.5], [963.0, 21574.0], [960.0, 6219.0], [975.0, 168508.0], [974.0, 56443.0], [973.0, 49202.0], [972.0, 60185.0], [971.0, 33380.0], [970.0, 53063.0], [969.0, 6217.0], [968.0, 33379.0], [983.0, 49170.0], [981.0, 60172.0], [980.0, 44899.0], [977.0, 18049.5], [1017.0, 56343.0], [1022.0, 60062.0], [1023.0, 54285.0], [1009.0, 52156.0], [1008.0, 25761.5], [1011.0, 45399.0], [1010.0, 29838.0], [1021.0, 56321.0], [1020.0, 114702.0], [1018.0, 47040.0], [1016.0, 52141.5], [999.0, 60135.0], [998.0, 50374.0], [997.0, 47117.0], [996.0, 6181.0], [995.0, 56425.0], [994.0, 58711.0], [993.0, 52805.5], [992.0, 45477.0], [1006.0, 49531.0], [1005.0, 56142.0], [1003.0, 6136.0], [1002.0, 47078.0], [1001.0, 31266.0], [1014.0, 60089.0], [1013.0, 32604.0], [1028.0, 535.0], [1026.0, 58911.0], [1024.0, 56444.0], [1336.0, 471.625], [1340.0, 490.85714285714283], [1312.0, 467.3333333333333], [1316.0, 467.3], [1318.0, 466.0], [1320.0, 465.0], [1324.0, 465.5], [1342.0, 467.0], [1338.0, 466.5], [1334.0, 466.0], [1332.0, 466.14285714285717], [1328.0, 466.3333333333333], [1294.0, 469.3333333333333], [1292.0, 510.0], [1290.0, 467.5], [1310.0, 467.8], [1308.0, 467.3333333333333], [1306.0, 467.52941176470586], [1304.0, 467.22222222222223], [1302.0, 467.16666666666663], [1300.0, 467.0], [1296.0, 467.75], [1350.0, 466.9230769230769], [1388.0, 508.0], [1378.0, 464.0], [1376.0, 510.0], [1358.0, 465.0], [1356.0, 466.5], [1354.0, 473.8], [1352.0, 470.625], [1348.0, 464.5], [1346.0, 464.0], [1374.0, 463.0], [1372.0, 463.6666666666667], [1370.0, 466.0], [1368.0, 465.0], [1366.0, 508.0], [1364.0, 464.5], [1362.0, 465.25], [1360.0, 465.0], [1436.0, 461.6666666666667], [1434.0, 461.25], [1464.0, 478.72727272727275], [1470.0, 280.0], [1456.0, 461.0], [1440.0, 475.3333333333333], [1432.0, 461.75], [1430.0, 496.4], [1428.0, 506.25], [1426.0, 507.0], [1424.0, 462.6666666666667], [1526.0, 268.0], [1516.0, 278.5], [1506.0, 278.0], [1504.0, 278.25], [1508.0, 15799.5], [1520.0, 270.0], [1472.0, 281.0], [1476.0, 279.6666666666667], [1480.0, 279.6666666666667], [1478.0, 280.0], [1482.0, 279.6666666666667], [1486.0, 277.0], [1502.0, 277.0], [1500.0, 279.0], [1496.0, 278.25], [1494.0, 279.0], [1492.0, 278.0], [1518.0, 278.0], [1608.0, 254.0], [1634.0, 252.28571428571428], [1638.0, 251.75], [1658.0, 241.0], [1604.0, 257.0], [1612.0, 254.0], [1614.0, 254.0], [1626.0, 254.0], [1624.0, 254.0], [1620.0, 2153.57142857143], [1618.0, 255.0], [1616.0, 3703.277777777778], [1644.0, 250.0], [1642.0, 252.0], [1640.0, 252.0], [1670.0, 57902.0], [1668.0, 165.0], [1666.0, 174.5], [1664.0, 176.0], [1854.0, 274.0], [1864.0, 276.0], [1888.0, 276.0], [1980.0, 270.3333333333333], [1960.0, 274.0], [1952.0, 276.0], [1962.0, 274.0], [1982.0, 269.6], [1978.0, 272.0], [1974.0, 271.82198952879594], [1972.0, 273.58730158730157], [1970.0, 272.0], [1944.0, 275.3333333333333], [1948.0, 275.0], [1950.0, 275.0], [1994.0, 248.33333333333334], [2040.0, 72.0], [2038.0, 73.0], [2034.0, 217.66666666666666], [1992.0, 250.0], [1984.0, 270.0], [2006.0, 247.0], [2004.0, 249.0], [2000.0, 248.33333333333334], [2030.0, 219.0], [2016.0, 239.0], [2160.0, 271.0], [2128.0, 276.3333333333333], [2168.0, 271.0], [2164.0, 272.2], [2148.0, 275.0], [2144.0, 275.0], [2108.0, 307.0], [2052.0, 51.0], [2060.0, 49.5], [2056.0, 50.0], [2064.0, 49.25], [2076.0, 47.714285714285715], [2100.0, 1268.0], [2092.0, 1269.0], [2080.0, 59750.0], [2284.0, 232.57142857142858], [2292.0, 231.5], [2240.0, 239.5], [2300.0, 232.0], [2288.0, 232.0], [2192.0, 255.0], [2188.0, 258.0], [2184.0, 258.0], [2236.0, 240.5], [2232.0, 240.0], [2228.0, 242.0], [2224.0, 241.5], [2304.0, 232.5], [2308.0, 231.25], [2356.0, 3038.0], [2324.0, 210.0], [2332.0, 210.25], [2328.0, 209.5], [2340.0, 179.0], [2664.0, 10049.0], [2596.0, 5879.5], [2788.0, 471.0], [2800.0, 807.7500000000001], [2796.0, 468.8571428571429], [2792.0, 471.0], [2784.0, 470.42857142857144], [2712.0, 3367.5], [2700.0, 479.3333333333333], [2692.0, 481.0], [2744.0, 624.6818181818181], [2740.0, 480.0], [2804.0, 469.3333333333333], [2808.0, 468.6666666666667], [2780.0, 469.0], [2812.0, 469.5], [2760.0, 472.0], [2764.0, 472.0], [2824.0, 468.0], [2828.0, 467.5], [2892.0, 456.0], [2916.0, 158.7826086956522], [2820.0, 469.57142857142856], [2876.0, 458.0], [2868.0, 456.0], [2848.0, 459.6], [2896.0, 169.0], [2884.0, 458.0], [2880.0, 454.0], [3000.0, 4530.353936249655], [2964.0, 161.0], [2972.0, 159.0], [2988.0, 765.6896551724138], [2157.0, 272.5], [2165.0, 271.25], [2173.0, 271.0], [2161.0, 271.6666666666667], [2061.0, 50.0], [2065.0, 49.0], [2069.0, 49.0], [2077.0, 38.0], [2105.0, 641.0], [2097.0, 1098.272727272727], [2081.0, 59748.0], [2285.0, 234.0], [2277.0, 235.0], [2301.0, 231.0], [2297.0, 232.22222222222223], [2293.0, 231.5], [2281.0, 233.0], [2189.0, 258.0], [2181.0, 258.5], [2177.0, 271.3333333333333], [2237.0, 241.5], [2229.0, 241.4], [2305.0, 231.25], [2309.0, 232.15384615384616], [2353.0, 2140.6666666666665], [2325.0, 210.33333333333334], [2661.0, 5870.5], [2677.0, 5866.0], [2785.0, 468.0], [2793.0, 470.59999999999997], [2797.0, 469.0], [2789.0, 474.0], [2713.0, 479.0], [2709.0, 5864.0], [2705.0, 484.0], [2697.0, 481.0], [2749.0, 473.0], [2741.0, 471.0], [2801.0, 470.0], [2805.0, 469.3333333333333], [2809.0, 470.1666666666667], [2813.0, 469.0], [2761.0, 472.0], [2825.0, 468.5], [2885.0, 457.0], [2833.0, 462.83333333333337], [2829.0, 3406.3333333333335], [2821.0, 468.6666666666667], [2817.0, 468.7142857142857], [2877.0, 455.75], [2873.0, 457.5], [2869.0, 459.0], [2857.0, 456.66666666666663], [2889.0, 458.0], [2881.0, 458.0], [2961.0, 161.0], [2965.0, 4567.0], [2989.0, 1017.1935483870967], [2973.0, 1041.2], [2981.0, 159.33333333333334], [2977.0, 159.0], [1027.0, 539.0], [1025.0, 58914.0], [1341.0, 466.6], [1343.0, 467.0], [1313.0, 473.25], [1315.0, 468.5], [1317.0, 468.0], [1319.0, 465.5], [1323.0, 488.5], [1321.0, 466.0], [1327.0, 465.3333333333333], [1339.0, 466.5], [1337.0, 476.2307692307693], [1335.0, 466.55555555555554], [1333.0, 488.5], [1331.0, 488.0], [1329.0, 465.6666666666667], [1293.0, 491.0], [1311.0, 467.3333333333333], [1309.0, 467.4], [1307.0, 465.5], [1305.0, 467.8], [1303.0, 468.0], [1301.0, 466.5], [1297.0, 468.0], [1349.0, 464.75], [1373.0, 481.6], [1377.0, 478.6666666666667], [1379.0, 486.125], [1359.0, 465.75], [1357.0, 465.75], [1355.0, 464.5], [1353.0, 467.0], [1351.0, 466.0], [1347.0, 465.0], [1345.0, 465.3333333333333], [1375.0, 507.0], [1371.0, 464.2222222222223], [1369.0, 478.3333333333333], [1367.0, 480.75], [1365.0, 486.0], [1363.0, 465.3333333333333], [1361.0, 466.0], [1435.0, 461.0], [1439.0, 460.8], [1441.0, 504.99999999999994], [1437.0, 461.0], [1433.0, 461.8], [1431.0, 505.3333333333333], [1429.0, 504.6666666666667], [1427.0, 477.6666666666667], [1425.0, 462.83333333333337], [1485.0, 277.0], [1507.0, 279.0], [1523.0, 268.5], [1521.0, 269.0], [1503.0, 280.0], [1473.0, 281.0], [1481.0, 279.0], [1483.0, 277.0], [1487.0, 279.0], [1495.0, 281.0], [1493.0, 15799.5], [1491.0, 279.0], [1489.0, 277.0], [1519.0, 270.0], [1517.0, 277.0], [1515.0, 277.0], [1511.0, 278.14285714285717], [1593.0, 255.0], [1661.0, 175.0], [1635.0, 252.66666666666666], [1641.0, 252.0], [1633.0, 253.0], [1659.0, 176.0], [1655.0, 4123.0], [1627.0, 252.66666666666666], [1607.0, 254.0], [1611.0, 254.5], [1609.0, 254.0], [1613.0, 255.0], [1615.0, 15774.5], [1625.0, 253.0], [1623.0, 251.33333333333334], [1621.0, 254.0], [1647.0, 250.5], [1639.0, 253.0], [1669.0, 57903.0], [1667.0, 165.0], [1913.0, 277.0], [1857.0, 278.0], [1975.0, 270.0], [1983.0, 270.0], [1967.0, 275.0], [1981.0, 270.5], [1973.0, 272.90909090909093], [1971.0, 273.7142857142857], [1969.0, 273.5], [1927.0, 277.0], [2013.0, 236.5], [2023.0, 219.5], [1991.0, 249.66666666666666], [1987.0, 270.0], [2009.0, 242.5], [2007.0, 247.0], [2005.0, 247.5], [2003.0, 249.5], [2031.0, 219.0], [2029.0, 219.6], [2017.0, 238.4], [2162.0, 273.0], [2170.0, 270.625], [2134.0, 273.0], [2166.0, 272.0], [2158.0, 275.0], [2054.0, 50.5], [2062.0, 49.0], [2066.0, 48.0], [2074.0, 47.5], [2106.0, 1264.0], [2098.0, 1268.75], [2282.0, 232.0], [2302.0, 232.5], [2298.0, 231.66666666666666], [2290.0, 235.0], [2278.0, 233.0], [2198.0, 246.33333333333331], [2190.0, 256.0], [2186.0, 256.0], [2238.0, 240.21428571428572], [2226.0, 241.0], [2306.0, 231.5], [2326.0, 209.0], [2354.0, 2946.0], [2350.0, 2946.0], [2342.0, 3234.0], [2334.0, 179.0], [2662.0, 12432.0], [2670.0, 2704.041666666667], [2786.0, 470.0], [2798.0, 470.0], [2794.0, 468.0], [2790.0, 469.0], [2714.0, 483.5], [2698.0, 478.0], [2746.0, 472.0], [2750.0, 472.0], [2742.0, 479.9333333333334], [2802.0, 470.6666666666667], [2806.0, 469.5], [2810.0, 469.0], [2814.0, 469.0], [2818.0, 467.8], [2830.0, 467.5], [2826.0, 469.07142857142856], [2822.0, 467.6666666666667], [2878.0, 455.0], [2870.0, 459.0], [2866.0, 456.69230769230774], [2862.0, 455.0], [2850.0, 458.56], [2894.0, 454.5], [2890.0, 456.5], [2882.0, 456.5], [2962.0, 161.0], [2970.0, 160.0], [2990.0, 156.0], [2986.0, 2498.5], [2974.0, 160.0], [2167.0, 272.3333333333333], [2175.0, 269.5], [2127.0, 279.0], [2171.0, 270.0], [2163.0, 271.3333333333333], [2159.0, 272.45454545454544], [2055.0, 50.0], [2079.0, 36.5], [2107.0, 306.0], [2103.0, 1268.5], [2091.0, 1269.0], [2291.0, 231.0], [2299.0, 230.66666666666666], [2191.0, 254.0], [2187.0, 256.0], [2179.0, 269.3333333333333], [2231.0, 241.0], [2223.0, 242.0], [2307.0, 232.0], [2355.0, 534.0], [2343.0, 2947.0], [2339.0, 181.0], [2335.0, 179.0], [2667.0, 5381.5], [2591.0, 12756.5], [2587.0, 5886.0], [2795.0, 472.0], [2799.0, 469.5], [2711.0, 476.6666666666667], [2703.0, 4890.0], [2699.0, 479.6666666666667], [2747.0, 473.0], [2731.0, 483.0], [2715.0, 478.0], [2803.0, 469.73333333333335], [2807.0, 469.0], [2783.0, 470.0], [2811.0, 470.6666666666667], [2815.0, 469.0], [2771.0, 472.0], [2763.0, 472.5], [2823.0, 468.0], [2919.0, 162.75], [2831.0, 501.2222222222222], [2827.0, 468.7142857142857], [2819.0, 468.2], [2879.0, 458.0], [2871.0, 457.8], [2867.0, 456.0], [2851.0, 458.0], [2895.0, 1337.8000000000002], [2891.0, 458.0], [2883.0, 458.0], [2963.0, 2364.5], [2967.0, 160.0], [2971.0, 159.8], [2995.0, 4833.0], [2983.0, 159.0], [2975.0, 160.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[2966.8897169434963, 4643.090443004939]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 3000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 33.6, "minX": 1.68288738E12, "maxY": 361484.55, "series": [{"data": [[1.68288774E12, 10743.133333333333], [1.68288756E12, 361484.55], [1.68288738E12, 48.88333333333333], [1.68288768E12, 258926.4], [1.6828875E12, 345346.5], [1.68288762E12, 297573.73333333334], [1.68288744E12, 291537.93333333335]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.68288774E12, 8584.8], [1.68288756E12, 247707.6], [1.68288738E12, 33.6], [1.68288768E12, 181356.0], [1.6828875E12, 241054.8], [1.68288762E12, 206950.8], [1.68288744E12, 205455.6]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68288774E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 1682.5, "minX": 1.68288738E12, "maxY": 26237.32876712329, "series": [{"data": [[1.68288774E12, 26237.32876712329], [1.68288756E12, 4498.079043931986], [1.68288738E12, 1682.5], [1.68288768E12, 3405.017080170341], [1.6828875E12, 5684.227580695598], [1.68288762E12, 5786.351175304445], [1.68288744E12, 2630.5178870763443]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68288774E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 1678.0, "minX": 1.68288738E12, "maxY": 26237.31898238748, "series": [{"data": [[1.68288774E12, 26237.31898238748], [1.68288756E12, 4160.914425180911], [1.68288738E12, 1678.0], [1.68288768E12, 3331.3655341603658], [1.6828875E12, 5631.378235641599], [1.68288762E12, 5589.351579884243], [1.68288744E12, 2630.503372991544]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68288774E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 69.77820025348518, "minX": 1.68288738E12, "maxY": 4934.137964774942, "series": [{"data": [[1.68288774E12, 4934.137964774942], [1.68288756E12, 2656.943679515263], [1.68288738E12, 1002.5], [1.68288768E12, 1690.2140807257758], [1.6828875E12, 1356.1863382092345], [1.68288762E12, 2044.9159283084716], [1.68288744E12, 69.77820025348518]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68288774E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 5.0, "minX": 1.68288738E12, "maxY": 209350.0, "series": [{"data": [[1.68288774E12, 169341.0], [1.68288756E12, 159608.0], [1.68288738E12, 2165.0], [1.68288768E12, 183443.0], [1.6828875E12, 119000.0], [1.68288762E12, 209350.0], [1.68288744E12, 59929.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.68288774E12, 41471.700000000004], [1.68288756E12, 522.0], [1.68288738E12, 2165.0], [1.68288768E12, 1032.2000000000116], [1.6828875E12, 10709.0], [1.68288762E12, 9961.0], [1.68288744E12, 10613.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.68288774E12, 60099.01], [1.68288756E12, 84489.3300000001], [1.68288738E12, 2165.0], [1.68288768E12, 128158.0], [1.6828875E12, 103151.99], [1.68288762E12, 128093.99], [1.68288744E12, 42037.990000000005]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.68288774E12, 52217.7], [1.68288756E12, 679.9500000000007], [1.68288738E12, 2165.0], [1.68288768E12, 4889.9000000000015], [1.6828875E12, 16319.0], [1.68288762E12, 40121.850000000006], [1.68288744E12, 14514.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.68288774E12, 6115.0], [1.68288756E12, 10.0], [1.68288738E12, 1205.0], [1.68288768E12, 6.0], [1.6828875E12, 5.0], [1.68288762E12, 12.0], [1.68288744E12, 5.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.68288774E12, 25227.5], [1.68288756E12, 259.0], [1.68288738E12, 1680.0], [1.68288768E12, 247.0], [1.6828875E12, 108.0], [1.68288762E12, 285.0], [1.68288744E12, 104.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68288774E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 23.0, "minX": 1.0, "maxY": 135916.0, "series": [{"data": [[2.0, 47518.0], [3.0, 65349.0], [4.0, 44977.0], [5.0, 16295.0], [6.0, 8384.0], [7.0, 17143.0], [8.0, 29371.5], [9.0, 48527.5], [10.0, 4465.0], [11.0, 7485.5], [12.0, 9023.0], [14.0, 126801.5], [15.0, 4977.0], [16.0, 5124.0], [17.0, 123559.5], [18.0, 9788.0], [19.0, 63158.0], [21.0, 41381.0], [24.0, 9934.0], [30.0, 212.0], [36.0, 297.5], [38.0, 13928.5], [41.0, 31.0], [40.0, 22011.0], [46.0, 7643.0], [48.0, 25704.5], [50.0, 54.0], [53.0, 40434.0], [54.0, 41.0], [59.0, 9647.0], [65.0, 130.0], [69.0, 4307.0], [77.0, 203.0], [76.0, 84.0], [81.0, 62.0], [80.0, 209.0], [83.0, 9555.0], [82.0, 104.0], [84.0, 212.0], [95.0, 7512.0], [99.0, 12062.0], [104.0, 118.0], [108.0, 100173.0], [120.0, 9920.0], [133.0, 23182.5], [130.0, 142.5], [129.0, 242.0], [146.0, 128.0], [151.0, 20341.0], [152.0, 119.0], [165.0, 1446.0], [166.0, 110.0], [184.0, 107.0], [199.0, 196.0], [205.0, 146.0], [222.0, 22050.5], [231.0, 231.0], [233.0, 143.0], [247.0, 65.0], [251.0, 23548.0], [258.0, 96.5], [272.0, 462.0], [284.0, 103202.0], [285.0, 6782.0], [289.0, 77.0], [296.0, 160.0], [309.0, 70345.0], [307.0, 9942.0], [322.0, 63.5], [332.0, 10862.0], [330.0, 7838.0], [324.0, 243.0], [344.0, 225.5], [350.0, 191.0], [349.0, 219.0], [362.0, 9520.5], [363.0, 9275.0], [364.0, 10128.0], [369.0, 10697.0], [368.0, 227.0], [381.0, 202.0], [372.0, 485.0], [399.0, 152.0], [385.0, 216.0], [390.0, 208.0], [407.0, 137.0], [402.0, 5475.0], [412.0, 217.5], [411.0, 272.0], [429.0, 259.0], [417.0, 92.5], [428.0, 123.0], [419.0, 230.0], [423.0, 203.0], [421.0, 212.0], [425.0, 248.0], [426.0, 231.0], [424.0, 252.0], [431.0, 233.0], [445.0, 168.0], [438.0, 130.0], [440.0, 265.0], [446.0, 243.0], [436.0, 208.0], [437.0, 257.0], [434.0, 186.0], [444.0, 220.0], [439.0, 229.0], [441.0, 220.0], [442.0, 258.0], [456.0, 146.0], [452.0, 259.0], [448.0, 230.0], [469.0, 10491.0], [479.0, 202.0], [471.0, 232.0], [468.0, 249.0], [484.0, 346.0], [482.0, 352.0], [498.0, 57.0], [524.0, 81.0], [513.0, 63.0], [520.0, 252.0], [545.0, 196.0], [559.0, 11180.0], [556.0, 9726.0], [557.0, 208.0], [583.0, 147.0], [587.0, 103.0], [604.0, 9355.0], [589.0, 309.0], [601.0, 287.0], [636.0, 60.0], [624.0, 257.0], [664.0, 266.0], [644.0, 465.0], [685.0, 72.0], [696.0, 241.0], [682.0, 216.0], [706.0, 36.0], [765.0, 84.0], [740.0, 565.0], [743.0, 440.0], [799.0, 86.0], [789.0, 472.5], [792.0, 231.0], [782.0, 211.0], [793.0, 202.0], [818.0, 209.0], [824.0, 346.0], [814.0, 526.0], [820.0, 431.0], [817.0, 245.0], [856.0, 61.0], [852.0, 381.0], [860.0, 296.0], [848.0, 226.0], [850.0, 416.0], [854.0, 356.0], [851.0, 204.0], [872.0, 129.0], [869.0, 239.0], [874.0, 117.0], [867.0, 142.0], [873.0, 232.0], [883.0, 707.0], [868.0, 263.5], [904.0, 372.0], [912.0, 584.0], [923.0, 329.0], [942.0, 260.0], [957.0, 307.0], [991.0, 108.0], [963.0, 521.0], [976.0, 387.0], [1015.0, 84.0], [1055.0, 421.0], [1118.0, 63.0], [1126.0, 120.0], [1141.0, 86.0], [1140.0, 123.0], [1105.0, 438.0], [1168.0, 23.0], [1161.0, 89.0], [1167.0, 473.0], [1275.0, 68.0], [1252.0, 94.5], [1230.0, 249.0], [1278.0, 233.0], [1316.0, 74.0], [1306.0, 100.0], [1334.0, 128.0], [1298.0, 530.0], [1296.0, 243.0], [1299.0, 458.0], [1348.0, 548.0], [1497.0, 217.0], [1657.0, 261.0], [1698.0, 70.0], [1690.0, 104.0], [1678.0, 355.0], [1929.0, 110.0], [1.0, 58626.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[520.0, 97518.0], [36.0, 72246.0], [589.0, 18676.0], [696.0, 53853.0], [818.0, 120708.0], [54.0, 5654.0], [872.0, 38566.5], [883.0, 83262.0], [963.0, 21277.0], [1167.0, 38435.0], [1230.0, 28152.5], [1298.0, 81718.0], [82.0, 55749.0], [1296.0, 135916.0], [1497.0, 61709.0], [99.0, 28300.0], [1678.0, 42265.5], [146.0, 32446.0], [9.0, 98696.0], [10.0, 121404.0], [12.0, 14783.0], [231.0, 20276.5], [233.0, 10351.0], [17.0, 123545.0], [350.0, 92835.0], [381.0, 80456.0], [372.0, 81707.0], [423.0, 63602.0], [426.0, 10817.0], [429.0, 35174.0], [441.0, 32825.0], [439.0, 38429.0], [442.0, 37419.0], [30.0, 27423.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1929.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 126801.5, "series": [{"data": [[2.0, 47518.0], [3.0, 65349.0], [4.0, 44977.0], [5.0, 16295.0], [6.0, 8384.0], [7.0, 17143.0], [8.0, 29371.5], [9.0, 48527.5], [10.0, 4465.0], [11.0, 7485.5], [12.0, 9023.0], [14.0, 126801.5], [15.0, 4977.0], [16.0, 5124.0], [17.0, 123559.5], [18.0, 9788.0], [19.0, 63158.0], [21.0, 41381.0], [24.0, 9934.0], [30.0, 212.0], [36.0, 297.5], [38.0, 13928.5], [41.0, 31.0], [40.0, 22011.0], [46.0, 7643.0], [48.0, 25704.5], [50.0, 54.0], [53.0, 40434.0], [54.0, 41.0], [59.0, 9647.0], [65.0, 130.0], [69.0, 4307.0], [77.0, 203.0], [76.0, 84.0], [81.0, 62.0], [80.0, 209.0], [83.0, 9555.0], [82.0, 104.0], [84.0, 212.0], [95.0, 7512.0], [99.0, 12062.0], [104.0, 118.0], [108.0, 100173.0], [120.0, 9920.0], [133.0, 23182.5], [130.0, 142.5], [129.0, 242.0], [146.0, 128.0], [151.0, 20341.0], [152.0, 119.0], [165.0, 1446.0], [166.0, 110.0], [184.0, 107.0], [199.0, 196.0], [205.0, 146.0], [222.0, 22050.5], [231.0, 231.0], [233.0, 143.0], [247.0, 65.0], [251.0, 23548.0], [258.0, 96.5], [272.0, 462.0], [284.0, 103202.0], [285.0, 6782.0], [289.0, 77.0], [296.0, 160.0], [309.0, 70345.0], [307.0, 9942.0], [322.0, 63.5], [332.0, 10862.0], [330.0, 7838.0], [324.0, 243.0], [344.0, 225.5], [350.0, 191.0], [349.0, 219.0], [362.0, 9520.5], [363.0, 9275.0], [364.0, 10128.0], [369.0, 10697.0], [368.0, 227.0], [381.0, 202.0], [372.0, 485.0], [399.0, 152.0], [385.0, 216.0], [390.0, 208.0], [407.0, 137.0], [402.0, 5475.0], [412.0, 217.5], [411.0, 271.0], [429.0, 259.0], [417.0, 92.5], [428.0, 123.0], [419.0, 230.0], [423.0, 203.0], [421.0, 212.0], [425.0, 248.0], [426.0, 231.0], [424.0, 252.0], [431.0, 233.0], [445.0, 168.0], [438.0, 130.0], [440.0, 265.0], [446.0, 243.0], [436.0, 208.0], [437.0, 257.0], [434.0, 186.0], [444.0, 220.0], [439.0, 229.0], [441.0, 220.0], [442.0, 258.0], [456.0, 146.0], [452.0, 259.0], [448.0, 230.0], [469.0, 10491.0], [479.0, 202.0], [471.0, 232.0], [468.0, 249.0], [484.0, 346.0], [482.0, 352.0], [498.0, 57.0], [524.0, 81.0], [513.0, 63.0], [520.0, 252.0], [545.0, 196.0], [559.0, 11180.0], [556.0, 9726.0], [557.0, 208.0], [583.0, 147.0], [587.0, 103.0], [604.0, 9355.0], [589.0, 309.0], [601.0, 287.0], [636.0, 60.0], [624.0, 257.0], [664.0, 266.0], [644.0, 465.0], [685.0, 72.0], [696.0, 241.0], [682.0, 216.0], [706.0, 36.0], [765.0, 84.0], [740.0, 565.0], [743.0, 440.0], [799.0, 86.0], [789.0, 472.0], [792.0, 231.0], [782.0, 211.0], [793.0, 202.0], [818.0, 209.0], [824.0, 346.0], [814.0, 526.0], [820.0, 431.0], [817.0, 245.0], [856.0, 61.0], [852.0, 381.0], [860.0, 296.0], [848.0, 226.0], [850.0, 416.0], [854.0, 356.0], [851.0, 204.0], [872.0, 129.0], [869.0, 239.0], [874.0, 117.0], [867.0, 142.0], [873.0, 232.0], [883.0, 707.0], [868.0, 263.5], [904.0, 372.0], [912.0, 584.0], [923.0, 329.0], [942.0, 260.0], [957.0, 307.0], [991.0, 108.0], [963.0, 521.0], [976.0, 387.0], [1015.0, 84.0], [1055.0, 421.0], [1118.0, 63.0], [1126.0, 120.0], [1141.0, 86.0], [1140.0, 123.0], [1105.0, 438.0], [1168.0, 23.0], [1161.0, 89.0], [1167.0, 473.0], [1275.0, 68.0], [1252.0, 94.0], [1230.0, 249.0], [1278.0, 233.0], [1316.0, 74.0], [1306.0, 100.0], [1334.0, 128.0], [1298.0, 530.0], [1296.0, 243.0], [1299.0, 458.0], [1348.0, 548.0], [1497.0, 217.0], [1657.0, 261.0], [1698.0, 70.0], [1690.0, 104.0], [1678.0, 355.0], [1929.0, 110.0], [1.0, 58626.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[520.0, 0.0], [36.0, 0.0], [589.0, 0.0], [696.0, 0.0], [818.0, 0.0], [54.0, 0.0], [872.0, 0.0], [883.0, 0.0], [963.0, 0.0], [1167.0, 0.0], [1230.0, 0.0], [1298.0, 0.0], [82.0, 0.0], [1296.0, 0.0], [1497.0, 0.0], [99.0, 0.0], [1678.0, 0.0], [146.0, 0.0], [9.0, 0.0], [10.0, 0.0], [12.0, 0.0], [231.0, 0.0], [233.0, 0.0], [17.0, 0.0], [350.0, 0.0], [381.0, 0.0], [372.0, 0.0], [423.0, 0.0], [426.0, 0.0], [429.0, 0.0], [441.0, 0.0], [439.0, 0.0], [442.0, 0.0], [30.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1929.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 36.166666666666664, "minX": 1.68288738E12, "maxY": 484.6333333333333, "series": [{"data": [[1.68288756E12, 477.4], [1.68288738E12, 36.166666666666664], [1.68288768E12, 363.2], [1.6828875E12, 484.6333333333333], [1.68288762E12, 397.8333333333333], [1.68288744E12, 412.3]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68288768E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.06666666666666667, "minX": 1.68288738E12, "maxY": 491.48333333333335, "series": [{"data": [[1.68288774E12, 17.033333333333335], [1.68288756E12, 491.48333333333335], [1.68288738E12, 0.06666666666666667], [1.68288768E12, 359.8333333333333], [1.6828875E12, 478.28333333333336], [1.68288762E12, 410.6166666666667], [1.68288744E12, 407.65]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.68288756E12, 3.6], [1.68288768E12, 0.23333333333333334], [1.6828875E12, 1.4], [1.68288762E12, 1.3333333333333333]], "isOverall": false, "label": "Non HTTP response code: java.net.SocketException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68288774E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.06666666666666667, "minX": 1.68288738E12, "maxY": 491.48333333333335, "series": [{"data": [[1.68288774E12, 17.033333333333335], [1.68288756E12, 491.48333333333335], [1.68288738E12, 0.06666666666666667], [1.68288768E12, 359.8333333333333], [1.6828875E12, 478.28333333333336], [1.68288762E12, 410.6166666666667], [1.68288744E12, 407.65]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.68288756E12, 3.6], [1.68288768E12, 0.23333333333333334], [1.6828875E12, 1.4], [1.68288762E12, 1.3333333333333333]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68288774E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.06666666666666667, "minX": 1.68288738E12, "maxY": 491.48333333333335, "series": [{"data": [[1.68288774E12, 17.033333333333335], [1.68288756E12, 491.48333333333335], [1.68288738E12, 0.06666666666666667], [1.68288768E12, 359.8333333333333], [1.6828875E12, 478.28333333333336], [1.68288762E12, 410.6166666666667], [1.68288744E12, 407.65]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.68288756E12, 3.6], [1.68288768E12, 0.23333333333333334], [1.6828875E12, 1.4], [1.68288762E12, 1.3333333333333333]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68288774E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

