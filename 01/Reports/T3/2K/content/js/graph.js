/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 7.0, "minX": 0.0, "maxY": 136340.0, "series": [{"data": [[0.0, 7.0], [0.1, 23.0], [0.2, 26.0], [0.3, 28.0], [0.4, 29.0], [0.5, 30.0], [0.6, 31.0], [0.7, 33.0], [0.8, 34.0], [0.9, 35.0], [1.0, 36.0], [1.1, 38.0], [1.2, 39.0], [1.3, 41.0], [1.4, 43.0], [1.5, 44.0], [1.6, 45.0], [1.7, 46.0], [1.8, 47.0], [1.9, 48.0], [2.0, 49.0], [2.1, 50.0], [2.2, 51.0], [2.3, 51.0], [2.4, 52.0], [2.5, 53.0], [2.6, 53.0], [2.7, 53.0], [2.8, 54.0], [2.9, 54.0], [3.0, 55.0], [3.1, 56.0], [3.2, 57.0], [3.3, 58.0], [3.4, 59.0], [3.5, 61.0], [3.6, 62.0], [3.7, 65.0], [3.8, 68.0], [3.9, 71.0], [4.0, 88.0], [4.1, 96.0], [4.2, 103.0], [4.3, 142.0], [4.4, 157.0], [4.5, 165.0], [4.6, 178.0], [4.7, 209.0], [4.8, 270.0], [4.9, 279.0], [5.0, 295.0], [5.1, 360.0], [5.2, 519.0], [5.3, 668.0], [5.4, 691.0], [5.5, 1053.0], [5.6, 1059.0], [5.7, 1065.0], [5.8, 1072.0], [5.9, 1082.0], [6.0, 1088.0], [6.1, 1091.0], [6.2, 1096.0], [6.3, 1101.0], [6.4, 1103.0], [6.5, 1107.0], [6.6, 1113.0], [6.7, 1116.0], [6.8, 1118.0], [6.9, 1122.0], [7.0, 1124.0], [7.1, 1127.0], [7.2, 1130.0], [7.3, 1131.0], [7.4, 1133.0], [7.5, 1135.0], [7.6, 1136.0], [7.7, 1137.0], [7.8, 1138.0], [7.9, 1140.0], [8.0, 1142.0], [8.1, 1144.0], [8.2, 1147.0], [8.3, 1149.0], [8.4, 1151.0], [8.5, 1154.0], [8.6, 1157.0], [8.7, 1161.0], [8.8, 1163.0], [8.9, 1165.0], [9.0, 1168.0], [9.1, 1173.0], [9.2, 1176.0], [9.3, 1182.0], [9.4, 1186.0], [9.5, 1190.0], [9.6, 1197.0], [9.7, 1199.0], [9.8, 1250.0], [9.9, 1308.0], [10.0, 1321.0], [10.1, 1334.0], [10.2, 1341.0], [10.3, 1346.0], [10.4, 1350.0], [10.5, 1353.0], [10.6, 1358.0], [10.7, 1362.0], [10.8, 1365.0], [10.9, 1371.0], [11.0, 1376.0], [11.1, 1381.0], [11.2, 1383.0], [11.3, 1390.0], [11.4, 1405.0], [11.5, 1409.0], [11.6, 1414.0], [11.7, 1452.0], [11.8, 1488.0], [11.9, 1503.0], [12.0, 1543.0], [12.1, 1566.0], [12.2, 1607.0], [12.3, 1681.0], [12.4, 1703.0], [12.5, 1710.0], [12.6, 1714.0], [12.7, 1730.0], [12.8, 1735.0], [12.9, 1740.0], [13.0, 1744.0], [13.1, 1749.0], [13.2, 1752.0], [13.3, 1761.0], [13.4, 1782.0], [13.5, 1793.0], [13.6, 1801.0], [13.7, 1805.0], [13.8, 1812.0], [13.9, 1819.0], [14.0, 1826.0], [14.1, 1836.0], [14.2, 1838.0], [14.3, 1841.0], [14.4, 1845.0], [14.5, 1857.0], [14.6, 1869.0], [14.7, 1875.0], [14.8, 1892.0], [14.9, 1901.0], [15.0, 1937.0], [15.1, 1943.0], [15.2, 1952.0], [15.3, 1959.0], [15.4, 1966.0], [15.5, 1969.0], [15.6, 1971.0], [15.7, 1978.0], [15.8, 1981.0], [15.9, 1987.0], [16.0, 1997.0], [16.1, 2002.0], [16.2, 2005.0], [16.3, 2009.0], [16.4, 2033.0], [16.5, 2049.0], [16.6, 2057.0], [16.7, 2072.0], [16.8, 2079.0], [16.9, 2086.0], [17.0, 2093.0], [17.1, 2097.0], [17.2, 2100.0], [17.3, 2103.0], [17.4, 2113.0], [17.5, 2115.0], [17.6, 2119.0], [17.7, 2124.0], [17.8, 2128.0], [17.9, 2131.0], [18.0, 2134.0], [18.1, 2136.0], [18.2, 2138.0], [18.3, 2140.0], [18.4, 2142.0], [18.5, 2143.0], [18.6, 2147.0], [18.7, 2150.0], [18.8, 2153.0], [18.9, 2157.0], [19.0, 2160.0], [19.1, 2164.0], [19.2, 2166.0], [19.3, 2169.0], [19.4, 2180.0], [19.5, 2189.0], [19.6, 2197.0], [19.7, 2202.0], [19.8, 2224.0], [19.9, 2240.0], [20.0, 2250.0], [20.1, 2256.0], [20.2, 2260.0], [20.3, 2266.0], [20.4, 2270.0], [20.5, 2274.0], [20.6, 2278.0], [20.7, 2281.0], [20.8, 2283.0], [20.9, 2288.0], [21.0, 2292.0], [21.1, 2295.0], [21.2, 2298.0], [21.3, 2300.0], [21.4, 2308.0], [21.5, 2322.0], [21.6, 2347.0], [21.7, 2371.0], [21.8, 2388.0], [21.9, 2410.0], [22.0, 2428.0], [22.1, 2461.0], [22.2, 2477.0], [22.3, 2484.0], [22.4, 2489.0], [22.5, 2499.0], [22.6, 2507.0], [22.7, 2514.0], [22.8, 2518.0], [22.9, 2533.0], [23.0, 2550.0], [23.1, 2555.0], [23.2, 2561.0], [23.3, 2566.0], [23.4, 2569.0], [23.5, 2574.0], [23.6, 2590.0], [23.7, 2602.0], [23.8, 2612.0], [23.9, 2619.0], [24.0, 2626.0], [24.1, 2629.0], [24.2, 2630.0], [24.3, 2636.0], [24.4, 2643.0], [24.5, 2648.0], [24.6, 2657.0], [24.7, 2664.0], [24.8, 2679.0], [24.9, 2688.0], [25.0, 2695.0], [25.1, 2704.0], [25.2, 2710.0], [25.3, 2715.0], [25.4, 2722.0], [25.5, 2726.0], [25.6, 2732.0], [25.7, 2737.0], [25.8, 2743.0], [25.9, 2747.0], [26.0, 2753.0], [26.1, 2760.0], [26.2, 2775.0], [26.3, 2791.0], [26.4, 2800.0], [26.5, 2807.0], [26.6, 2811.0], [26.7, 2814.0], [26.8, 2820.0], [26.9, 2826.0], [27.0, 2831.0], [27.1, 2847.0], [27.2, 2851.0], [27.3, 2867.0], [27.4, 2870.0], [27.5, 2874.0], [27.6, 2879.0], [27.7, 2882.0], [27.8, 2887.0], [27.9, 2896.0], [28.0, 2900.0], [28.1, 2906.0], [28.2, 2911.0], [28.3, 2917.0], [28.4, 2920.0], [28.5, 2924.0], [28.6, 2929.0], [28.7, 2932.0], [28.8, 2938.0], [28.9, 2946.0], [29.0, 2950.0], [29.1, 2961.0], [29.2, 2972.0], [29.3, 2985.0], [29.4, 2991.0], [29.5, 2997.0], [29.6, 3005.0], [29.7, 3016.0], [29.8, 3020.0], [29.9, 3024.0], [30.0, 3029.0], [30.1, 3034.0], [30.2, 3037.0], [30.3, 3042.0], [30.4, 3047.0], [30.5, 3054.0], [30.6, 3059.0], [30.7, 3061.0], [30.8, 3068.0], [30.9, 3080.0], [31.0, 3086.0], [31.1, 3092.0], [31.2, 3108.0], [31.3, 3115.0], [31.4, 3120.0], [31.5, 3128.0], [31.6, 3137.0], [31.7, 3149.0], [31.8, 3163.0], [31.9, 3177.0], [32.0, 3187.0], [32.1, 3197.0], [32.2, 3202.0], [32.3, 3211.0], [32.4, 3216.0], [32.5, 3223.0], [32.6, 3226.0], [32.7, 3228.0], [32.8, 3235.0], [32.9, 3240.0], [33.0, 3243.0], [33.1, 3251.0], [33.2, 3255.0], [33.3, 3263.0], [33.4, 3268.0], [33.5, 3276.0], [33.6, 3285.0], [33.7, 3298.0], [33.8, 3311.0], [33.9, 3317.0], [34.0, 3322.0], [34.1, 3331.0], [34.2, 3341.0], [34.3, 3351.0], [34.4, 3364.0], [34.5, 3375.0], [34.6, 3390.0], [34.7, 3404.0], [34.8, 3409.0], [34.9, 3416.0], [35.0, 3427.0], [35.1, 3435.0], [35.2, 3440.0], [35.3, 3445.0], [35.4, 3452.0], [35.5, 3458.0], [35.6, 3466.0], [35.7, 3472.0], [35.8, 3478.0], [35.9, 3485.0], [36.0, 3501.0], [36.1, 3522.0], [36.2, 3530.0], [36.3, 3535.0], [36.4, 3538.0], [36.5, 3543.0], [36.6, 3548.0], [36.7, 3553.0], [36.8, 3557.0], [36.9, 3577.0], [37.0, 3597.0], [37.1, 3613.0], [37.2, 3619.0], [37.3, 3626.0], [37.4, 3632.0], [37.5, 3644.0], [37.6, 3654.0], [37.7, 3666.0], [37.8, 3682.0], [37.9, 3689.0], [38.0, 3698.0], [38.1, 3704.0], [38.2, 3716.0], [38.3, 3723.0], [38.4, 3731.0], [38.5, 3738.0], [38.6, 3745.0], [38.7, 3749.0], [38.8, 3752.0], [38.9, 3754.0], [39.0, 3759.0], [39.1, 3768.0], [39.2, 3773.0], [39.3, 3777.0], [39.4, 3781.0], [39.5, 3788.0], [39.6, 3794.0], [39.7, 3797.0], [39.8, 3803.0], [39.9, 3809.0], [40.0, 3836.0], [40.1, 3849.0], [40.2, 3860.0], [40.3, 3874.0], [40.4, 3881.0], [40.5, 3905.0], [40.6, 3910.0], [40.7, 3920.0], [40.8, 3928.0], [40.9, 3930.0], [41.0, 3946.0], [41.1, 3961.0], [41.2, 3974.0], [41.3, 3982.0], [41.4, 4004.0], [41.5, 4049.0], [41.6, 4078.0], [41.7, 4109.0], [41.8, 4120.0], [41.9, 4138.0], [42.0, 4161.0], [42.1, 4177.0], [42.2, 4187.0], [42.3, 4198.0], [42.4, 4231.0], [42.5, 4234.0], [42.6, 4236.0], [42.7, 4251.0], [42.8, 4277.0], [42.9, 4288.0], [43.0, 4301.0], [43.1, 4308.0], [43.2, 4328.0], [43.3, 4366.0], [43.4, 4382.0], [43.5, 4390.0], [43.6, 4404.0], [43.7, 4412.0], [43.8, 4418.0], [43.9, 4424.0], [44.0, 4438.0], [44.1, 4467.0], [44.2, 4489.0], [44.3, 4498.0], [44.4, 4502.0], [44.5, 4509.0], [44.6, 4515.0], [44.7, 4524.0], [44.8, 4528.0], [44.9, 4539.0], [45.0, 4545.0], [45.1, 4549.0], [45.2, 4562.0], [45.3, 4578.0], [45.4, 4584.0], [45.5, 4596.0], [45.6, 4608.0], [45.7, 4616.0], [45.8, 4626.0], [45.9, 4635.0], [46.0, 4667.0], [46.1, 4689.0], [46.2, 4706.0], [46.3, 4714.0], [46.4, 4726.0], [46.5, 4735.0], [46.6, 4740.0], [46.7, 4749.0], [46.8, 4758.0], [46.9, 4777.0], [47.0, 4783.0], [47.1, 4791.0], [47.2, 4805.0], [47.3, 4812.0], [47.4, 4820.0], [47.5, 4834.0], [47.6, 4864.0], [47.7, 4872.0], [47.8, 4880.0], [47.9, 4891.0], [48.0, 4914.0], [48.1, 4939.0], [48.2, 4959.0], [48.3, 4962.0], [48.4, 4990.0], [48.5, 5003.0], [48.6, 5023.0], [48.7, 5037.0], [48.8, 5049.0], [48.9, 5057.0], [49.0, 5064.0], [49.1, 5076.0], [49.2, 5087.0], [49.3, 5096.0], [49.4, 5106.0], [49.5, 5114.0], [49.6, 5119.0], [49.7, 5123.0], [49.8, 5130.0], [49.9, 5139.0], [50.0, 5145.0], [50.1, 5150.0], [50.2, 5158.0], [50.3, 5162.0], [50.4, 5164.0], [50.5, 5169.0], [50.6, 5177.0], [50.7, 5186.0], [50.8, 5194.0], [50.9, 5208.0], [51.0, 5219.0], [51.1, 5227.0], [51.2, 5239.0], [51.3, 5248.0], [51.4, 5255.0], [51.5, 5264.0], [51.6, 5278.0], [51.7, 5289.0], [51.8, 5292.0], [51.9, 5296.0], [52.0, 5307.0], [52.1, 5313.0], [52.2, 5318.0], [52.3, 5322.0], [52.4, 5327.0], [52.5, 5333.0], [52.6, 5342.0], [52.7, 5356.0], [52.8, 5372.0], [52.9, 5389.0], [53.0, 5398.0], [53.1, 5405.0], [53.2, 5410.0], [53.3, 5416.0], [53.4, 5422.0], [53.5, 5435.0], [53.6, 5449.0], [53.7, 5459.0], [53.8, 5471.0], [53.9, 5476.0], [54.0, 5488.0], [54.1, 5499.0], [54.2, 5517.0], [54.3, 5523.0], [54.4, 5533.0], [54.5, 5542.0], [54.6, 5552.0], [54.7, 5565.0], [54.8, 5575.0], [54.9, 5583.0], [55.0, 5592.0], [55.1, 5597.0], [55.2, 5604.0], [55.3, 5613.0], [55.4, 5623.0], [55.5, 5640.0], [55.6, 5647.0], [55.7, 5655.0], [55.8, 5660.0], [55.9, 5663.0], [56.0, 5668.0], [56.1, 5672.0], [56.2, 5676.0], [56.3, 5680.0], [56.4, 5689.0], [56.5, 5697.0], [56.6, 5706.0], [56.7, 5712.0], [56.8, 5717.0], [56.9, 5720.0], [57.0, 5725.0], [57.1, 5730.0], [57.2, 5733.0], [57.3, 5737.0], [57.4, 5745.0], [57.5, 5750.0], [57.6, 5757.0], [57.7, 5761.0], [57.8, 5764.0], [57.9, 5767.0], [58.0, 5771.0], [58.1, 5774.0], [58.2, 5785.0], [58.3, 5795.0], [58.4, 5805.0], [58.5, 5814.0], [58.6, 5826.0], [58.7, 5847.0], [58.8, 5856.0], [58.9, 5862.0], [59.0, 5869.0], [59.1, 5878.0], [59.2, 5883.0], [59.3, 5888.0], [59.4, 5893.0], [59.5, 5897.0], [59.6, 5906.0], [59.7, 5914.0], [59.8, 5922.0], [59.9, 5935.0], [60.0, 5945.0], [60.1, 5956.0], [60.2, 5963.0], [60.3, 5971.0], [60.4, 5979.0], [60.5, 5989.0], [60.6, 5996.0], [60.7, 6004.0], [60.8, 6009.0], [60.9, 6017.0], [61.0, 6024.0], [61.1, 6038.0], [61.2, 6051.0], [61.3, 6058.0], [61.4, 6064.0], [61.5, 6070.0], [61.6, 6074.0], [61.7, 6078.0], [61.8, 6083.0], [61.9, 6087.0], [62.0, 6093.0], [62.1, 6098.0], [62.2, 6103.0], [62.3, 6109.0], [62.4, 6113.0], [62.5, 6118.0], [62.6, 6126.0], [62.7, 6133.0], [62.8, 6145.0], [62.9, 6165.0], [63.0, 6173.0], [63.1, 6188.0], [63.2, 6203.0], [63.3, 6213.0], [63.4, 6225.0], [63.5, 6239.0], [63.6, 6245.0], [63.7, 6253.0], [63.8, 6272.0], [63.9, 6291.0], [64.0, 6310.0], [64.1, 6326.0], [64.2, 6339.0], [64.3, 6357.0], [64.4, 6371.0], [64.5, 6388.0], [64.6, 6399.0], [64.7, 6406.0], [64.8, 6413.0], [64.9, 6429.0], [65.0, 6445.0], [65.1, 6458.0], [65.2, 6466.0], [65.3, 6478.0], [65.4, 6484.0], [65.5, 6491.0], [65.6, 6510.0], [65.7, 6523.0], [65.8, 6534.0], [65.9, 6540.0], [66.0, 6546.0], [66.1, 6550.0], [66.2, 6557.0], [66.3, 6566.0], [66.4, 6574.0], [66.5, 6578.0], [66.6, 6583.0], [66.7, 6587.0], [66.8, 6591.0], [66.9, 6597.0], [67.0, 6610.0], [67.1, 6616.0], [67.2, 6619.0], [67.3, 6634.0], [67.4, 6645.0], [67.5, 6659.0], [67.6, 6673.0], [67.7, 6685.0], [67.8, 6706.0], [67.9, 6721.0], [68.0, 6732.0], [68.1, 6739.0], [68.2, 6743.0], [68.3, 6749.0], [68.4, 6758.0], [68.5, 6762.0], [68.6, 6770.0], [68.7, 6779.0], [68.8, 6784.0], [68.9, 6789.0], [69.0, 6795.0], [69.1, 6803.0], [69.2, 6810.0], [69.3, 6816.0], [69.4, 6828.0], [69.5, 6836.0], [69.6, 6840.0], [69.7, 6843.0], [69.8, 6854.0], [69.9, 6865.0], [70.0, 6870.0], [70.1, 6874.0], [70.2, 6879.0], [70.3, 6883.0], [70.4, 6887.0], [70.5, 6891.0], [70.6, 6896.0], [70.7, 6900.0], [70.8, 6903.0], [70.9, 6907.0], [71.0, 6912.0], [71.1, 6913.0], [71.2, 6917.0], [71.3, 6920.0], [71.4, 6925.0], [71.5, 6928.0], [71.6, 6932.0], [71.7, 6941.0], [71.8, 6949.0], [71.9, 6957.0], [72.0, 6964.0], [72.1, 6971.0], [72.2, 6979.0], [72.3, 6984.0], [72.4, 6991.0], [72.5, 6997.0], [72.6, 7003.0], [72.7, 7010.0], [72.8, 7015.0], [72.9, 7021.0], [73.0, 7028.0], [73.1, 7032.0], [73.2, 7036.0], [73.3, 7040.0], [73.4, 7044.0], [73.5, 7050.0], [73.6, 7057.0], [73.7, 7077.0], [73.8, 7092.0], [73.9, 7098.0], [74.0, 7103.0], [74.1, 7107.0], [74.2, 7113.0], [74.3, 7117.0], [74.4, 7123.0], [74.5, 7133.0], [74.6, 7140.0], [74.7, 7150.0], [74.8, 7164.0], [74.9, 7180.0], [75.0, 7187.0], [75.1, 7196.0], [75.2, 7204.0], [75.3, 7211.0], [75.4, 7214.0], [75.5, 7218.0], [75.6, 7221.0], [75.7, 7227.0], [75.8, 7232.0], [75.9, 7236.0], [76.0, 7246.0], [76.1, 7266.0], [76.2, 7288.0], [76.3, 7290.0], [76.4, 7314.0], [76.5, 7324.0], [76.6, 7345.0], [76.7, 7358.0], [76.8, 7368.0], [76.9, 7379.0], [77.0, 7424.0], [77.1, 7441.0], [77.2, 7467.0], [77.3, 7491.0], [77.4, 7501.0], [77.5, 7526.0], [77.6, 7541.0], [77.7, 7565.0], [77.8, 7569.0], [77.9, 7578.0], [78.0, 7589.0], [78.1, 7618.0], [78.2, 7658.0], [78.3, 7679.0], [78.4, 7685.0], [78.5, 7691.0], [78.6, 7698.0], [78.7, 7706.0], [78.8, 7712.0], [78.9, 7737.0], [79.0, 7749.0], [79.1, 7758.0], [79.2, 7765.0], [79.3, 7774.0], [79.4, 7787.0], [79.5, 7800.0], [79.6, 7818.0], [79.7, 7829.0], [79.8, 7850.0], [79.9, 7862.0], [80.0, 7880.0], [80.1, 7887.0], [80.2, 7893.0], [80.3, 7900.0], [80.4, 7906.0], [80.5, 7916.0], [80.6, 7921.0], [80.7, 7933.0], [80.8, 7947.0], [80.9, 7966.0], [81.0, 7977.0], [81.1, 7996.0], [81.2, 8003.0], [81.3, 8017.0], [81.4, 8030.0], [81.5, 8035.0], [81.6, 8043.0], [81.7, 8047.0], [81.8, 8052.0], [81.9, 8057.0], [82.0, 8065.0], [82.1, 8069.0], [82.2, 8076.0], [82.3, 8085.0], [82.4, 8090.0], [82.5, 8103.0], [82.6, 8120.0], [82.7, 8134.0], [82.8, 8144.0], [82.9, 8155.0], [83.0, 8163.0], [83.1, 8168.0], [83.2, 8175.0], [83.3, 8182.0], [83.4, 8187.0], [83.5, 8193.0], [83.6, 8199.0], [83.7, 8204.0], [83.8, 8211.0], [83.9, 8222.0], [84.0, 8236.0], [84.1, 8241.0], [84.2, 8244.0], [84.3, 8251.0], [84.4, 8259.0], [84.5, 8272.0], [84.6, 8278.0], [84.7, 8289.0], [84.8, 8332.0], [84.9, 8355.0], [85.0, 8370.0], [85.1, 8376.0], [85.2, 8380.0], [85.3, 8395.0], [85.4, 8410.0], [85.5, 8417.0], [85.6, 8440.0], [85.7, 8468.0], [85.8, 8517.0], [85.9, 8530.0], [86.0, 8538.0], [86.1, 8539.0], [86.2, 8541.0], [86.3, 8553.0], [86.4, 8563.0], [86.5, 8571.0], [86.6, 8584.0], [86.7, 8598.0], [86.8, 8637.0], [86.9, 8675.0], [87.0, 8688.0], [87.1, 8706.0], [87.2, 8732.0], [87.3, 8766.0], [87.4, 8800.0], [87.5, 8816.0], [87.6, 8844.0], [87.7, 8857.0], [87.8, 8868.0], [87.9, 8880.0], [88.0, 8890.0], [88.1, 8901.0], [88.2, 8916.0], [88.3, 8926.0], [88.4, 8931.0], [88.5, 8943.0], [88.6, 8958.0], [88.7, 8973.0], [88.8, 8983.0], [88.9, 8989.0], [89.0, 9010.0], [89.1, 9039.0], [89.2, 9054.0], [89.3, 9098.0], [89.4, 9198.0], [89.5, 9236.0], [89.6, 9240.0], [89.7, 9291.0], [89.8, 9327.0], [89.9, 9360.0], [90.0, 9390.0], [90.1, 9422.0], [90.2, 9445.0], [90.3, 9467.0], [90.4, 9489.0], [90.5, 9502.0], [90.6, 9521.0], [90.7, 9531.0], [90.8, 9545.0], [90.9, 9555.0], [91.0, 9573.0], [91.1, 9582.0], [91.2, 9589.0], [91.3, 9600.0], [91.4, 9618.0], [91.5, 9641.0], [91.6, 9669.0], [91.7, 9700.0], [91.8, 9718.0], [91.9, 9729.0], [92.0, 9746.0], [92.1, 9769.0], [92.2, 9867.0], [92.3, 9891.0], [92.4, 9926.0], [92.5, 9938.0], [92.6, 9947.0], [92.7, 9955.0], [92.8, 9966.0], [92.9, 9975.0], [93.0, 9986.0], [93.1, 10008.0], [93.2, 10030.0], [93.3, 10061.0], [93.4, 10143.0], [93.5, 10178.0], [93.6, 10291.0], [93.7, 10379.0], [93.8, 10382.0], [93.9, 10384.0], [94.0, 10436.0], [94.1, 10506.0], [94.2, 10554.0], [94.3, 10585.0], [94.4, 10725.0], [94.5, 10757.0], [94.6, 10778.0], [94.7, 10801.0], [94.8, 10904.0], [94.9, 10956.0], [95.0, 11002.0], [95.1, 11077.0], [95.2, 11105.0], [95.3, 11126.0], [95.4, 11364.0], [95.5, 11403.0], [95.6, 11470.0], [95.7, 11545.0], [95.8, 11623.0], [95.9, 11651.0], [96.0, 11716.0], [96.1, 11724.0], [96.2, 11799.0], [96.3, 11967.0], [96.4, 12379.0], [96.5, 12446.0], [96.6, 12491.0], [96.7, 12623.0], [96.8, 12688.0], [96.9, 12750.0], [97.0, 12783.0], [97.1, 12880.0], [97.2, 13588.0], [97.3, 13611.0], [97.4, 13646.0], [97.5, 14349.0], [97.6, 14383.0], [97.7, 14423.0], [97.8, 15912.0], [97.9, 19311.0], [98.0, 20405.0], [98.1, 22221.0], [98.2, 22272.0], [98.3, 24508.0], [98.4, 24956.0], [98.5, 25107.0], [98.6, 26151.0], [98.7, 26189.0], [98.8, 29172.0], [98.9, 29401.0], [99.0, 30480.0], [99.1, 30925.0], [99.2, 31351.0], [99.3, 37718.0], [99.4, 50999.0], [99.5, 63730.0], [99.6, 72790.0], [99.7, 72792.0], [99.8, 136118.0], [99.9, 136245.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 836.0, "series": [{"data": [[0.0, 836.0], [136100.0, 13.0], [100.0, 94.0], [32900.0, 1.0], [136300.0, 12.0], [38500.0, 1.0], [37700.0, 3.0], [47700.0, 2.0], [50900.0, 3.0], [49300.0, 1.0], [52100.0, 3.0], [200.0, 79.0], [57700.0, 1.0], [63700.0, 2.0], [300.0, 23.0], [400.0, 5.0], [500.0, 9.0], [600.0, 40.0], [700.0, 4.0], [1000.0, 173.0], [1100.0, 694.0], [1200.0, 27.0], [1300.0, 300.0], [1400.0, 97.0], [1500.0, 62.0], [1600.0, 45.0], [1700.0, 239.0], [1800.0, 265.0], [1900.0, 231.0], [2000.0, 226.0], [2100.0, 500.0], [2300.0, 116.0], [2200.0, 326.0], [2400.0, 133.0], [2500.0, 233.0], [2600.0, 278.0], [2800.0, 321.0], [2700.0, 271.0], [2900.0, 315.0], [3000.0, 314.0], [3100.0, 210.0], [3200.0, 309.0], [3300.0, 195.0], [3400.0, 264.0], [3500.0, 205.0], [3600.0, 206.0], [3700.0, 350.0], [3800.0, 140.0], [3900.0, 183.0], [4000.0, 57.0], [4200.0, 134.0], [4300.0, 119.0], [4100.0, 130.0], [4600.0, 125.0], [4400.0, 158.0], [4500.0, 235.0], [4700.0, 208.0], [4800.0, 159.0], [5000.0, 182.0], [5100.0, 294.0], [4900.0, 97.0], [5200.0, 220.0], [5300.0, 223.0], [5400.0, 216.0], [5500.0, 213.0], [5600.0, 272.0], [5800.0, 233.0], [5700.0, 369.0], [6000.0, 300.0], [6100.0, 210.0], [5900.0, 229.0], [6200.0, 158.0], [6300.0, 128.0], [6600.0, 167.0], [6400.0, 195.0], [6500.0, 270.0], [6800.0, 331.0], [6900.0, 375.0], [6700.0, 260.0], [7000.0, 274.0], [7100.0, 243.0], [7200.0, 241.0], [7400.0, 87.0], [7300.0, 120.0], [7500.0, 138.0], [7600.0, 116.0], [7900.0, 170.0], [7800.0, 160.0], [7700.0, 175.0], [8000.0, 267.0], [8100.0, 233.0], [8200.0, 223.0], [8400.0, 87.0], [8300.0, 119.0], [8500.0, 191.0], [8600.0, 69.0], [8700.0, 69.0], [9200.0, 57.0], [8800.0, 138.0], [8900.0, 172.0], [9000.0, 73.0], [9100.0, 25.0], [9300.0, 68.0], [9400.0, 88.0], [9500.0, 163.0], [9600.0, 80.0], [9700.0, 88.0], [9800.0, 41.0], [10200.0, 20.0], [9900.0, 144.0], [10000.0, 56.0], [10100.0, 36.0], [10500.0, 50.0], [10400.0, 22.0], [10600.0, 13.0], [10700.0, 63.0], [10300.0, 70.0], [11200.0, 5.0], [10900.0, 39.0], [10800.0, 18.0], [11000.0, 43.0], [11100.0, 25.0], [11500.0, 28.0], [11700.0, 53.0], [11300.0, 28.0], [11400.0, 32.0], [11600.0, 36.0], [12200.0, 2.0], [11800.0, 11.0], [11900.0, 6.0], [12400.0, 43.0], [12600.0, 29.0], [12700.0, 48.0], [12500.0, 7.0], [12300.0, 24.0], [12800.0, 12.0], [12900.0, 12.0], [13300.0, 2.0], [13600.0, 37.0], [13500.0, 7.0], [14200.0, 7.0], [14300.0, 34.0], [14400.0, 22.0], [14500.0, 1.0], [15000.0, 2.0], [15700.0, 4.0], [15600.0, 4.0], [15900.0, 15.0], [17400.0, 1.0], [17000.0, 4.0], [19200.0, 1.0], [19600.0, 1.0], [19800.0, 4.0], [20400.0, 5.0], [22000.0, 4.0], [22200.0, 28.0], [22400.0, 1.0], [21800.0, 1.0], [23400.0, 1.0], [24400.0, 2.0], [24000.0, 1.0], [24800.0, 3.0], [25400.0, 1.0], [25000.0, 5.0], [26000.0, 7.0], [26200.0, 1.0], [27400.0, 3.0], [28000.0, 1.0], [28200.0, 2.0], [29400.0, 8.0], [29200.0, 3.0], [30400.0, 20.0], [30200.0, 4.0], [30600.0, 2.0], [31400.0, 2.0], [31200.0, 6.0], [30800.0, 1.0], [31000.0, 1.0], [32000.0, 1.0], [36800.0, 3.0], [38800.0, 1.0], [47600.0, 2.0], [49200.0, 1.0], [52000.0, 4.0], [72800.0, 2.0], [105600.0, 2.0], [72700.0, 48.0], [136200.0, 17.0], [38700.0, 4.0], [39500.0, 1.0], [49100.0, 1.0], [51100.0, 4.0], [51900.0, 3.0], [130900.0, 1.0], [17500.0, 1.0], [19300.0, 6.0], [19700.0, 1.0], [20300.0, 6.0], [21900.0, 1.0], [22100.0, 3.0], [21700.0, 3.0], [22700.0, 2.0], [23500.0, 6.0], [23300.0, 1.0], [24500.0, 2.0], [24100.0, 3.0], [24700.0, 5.0], [24900.0, 26.0], [25100.0, 2.0], [25900.0, 8.0], [26100.0, 24.0], [27500.0, 6.0], [28100.0, 4.0], [28300.0, 1.0], [29300.0, 15.0], [29100.0, 1.0], [30500.0, 3.0], [31500.0, 5.0], [30900.0, 6.0], [31300.0, 16.0], [31900.0, 3.0], [131100.0, 1.0], [38600.0, 1.0], [51000.0, 2.0], [52200.0, 2.0], [66000.0, 2.0], [103600.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 136300.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 3.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 17711.0, "series": [{"data": [[0.0, 1037.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 1349.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 17711.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 3.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1735.1854248733803, "minX": 1.6828803E12, "maxY": 3000.0, "series": [{"data": [[1.6828803E12, 3000.0], [1.68288042E12, 3000.0], [1.68288054E12, 3000.0], [1.68288036E12, 3000.0], [1.6828806E12, 1735.1854248733803], [1.68288048E12, 3000.0]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6828806E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 1049.0, "minX": 3.0, "maxY": 12959.0, "series": [{"data": [[3.0, 1809.0], [5.0, 1808.0], [6.0, 1806.0], [7.0, 1807.0], [8.0, 1804.0], [10.0, 1803.0], [12.0, 1803.0], [13.0, 1802.0], [15.0, 1801.0], [16.0, 1801.0], [17.0, 1798.0], [18.0, 1799.0], [19.0, 1796.0], [20.0, 1793.0], [21.0, 1792.0], [22.0, 1788.0], [23.0, 1786.0], [24.0, 1782.0], [25.0, 1776.0], [26.0, 1776.0], [28.0, 1773.5], [29.0, 1773.0], [30.0, 1108.0], [33.0, 1107.0], [32.0, 1108.5], [34.0, 1108.0], [37.0, 1106.0], [36.0, 1106.0], [39.0, 1105.5], [38.0, 1105.0], [40.0, 1104.0], [43.0, 1103.0], [45.0, 1095.0], [44.0, 1102.0], [47.0, 1091.0], [46.0, 1094.0], [49.0, 1090.0], [51.0, 1089.0], [50.0, 1089.0], [53.0, 1088.0], [52.0, 1088.0], [55.0, 1086.0], [54.0, 1087.0], [56.0, 1078.0], [59.0, 1076.0], [58.0, 1077.5], [60.0, 1072.0], [63.0, 1069.0], [62.0, 1070.0], [67.0, 1060.0], [66.0, 1062.0], [65.0, 1064.0], [64.0, 1067.0], [70.0, 1151.6666666666667], [75.0, 1149.0], [74.0, 1151.0], [72.0, 1150.5], [77.0, 1149.0], [76.0, 1150.0], [81.0, 1147.0], [80.0, 1147.5], [87.0, 1143.0], [86.0, 1143.0], [85.0, 1145.0], [84.0, 1146.3333333333333], [91.0, 1140.0], [90.0, 1141.0], [89.0, 1142.0], [95.0, 1138.0], [94.0, 1137.5], [92.0, 1138.0], [99.0, 1135.0], [98.0, 1136.0], [97.0, 1136.0], [103.0, 1133.5], [100.0, 1135.0], [106.0, 1122.0], [104.0, 1133.5], [110.0, 1119.0], [108.0, 1119.5], [115.0, 1118.0], [114.0, 1119.0], [119.0, 1114.5], [117.0, 1114.0], [116.0, 1118.0], [123.0, 1111.0], [122.0, 1112.0], [121.0, 1113.0], [125.0, 1107.0], [124.0, 1109.0], [135.0, 1971.0], [134.0, 1063.5], [132.0, 1087.5], [130.0, 1088.0], [129.0, 1090.0], [128.0, 1102.0], [141.0, 1968.0], [140.0, 1968.0], [139.0, 1970.0], [138.0, 1971.0], [137.0, 1972.0], [150.0, 1964.5], [148.0, 1966.0], [146.0, 1966.0], [145.0, 1967.0], [144.0, 1967.6666666666667], [159.0, 1955.0], [158.0, 1958.0], [157.0, 1959.0], [156.0, 1961.0], [154.0, 1962.0], [153.0, 1964.0], [152.0, 1964.0], [167.0, 1949.0], [166.0, 1950.5], [164.0, 1952.0], [162.0, 1952.5], [160.0, 1954.0], [174.0, 1937.0], [173.0, 1938.5], [171.0, 1939.0], [170.0, 1944.0], [169.0, 1944.0], [168.0, 1948.0], [183.0, 1880.0], [182.0, 1895.0], [181.0, 1896.0], [179.0, 1897.0], [178.0, 1900.0], [177.0, 1901.0], [176.0, 1901.0], [191.0, 1869.0], [190.0, 1869.5], [188.0, 1871.5], [187.0, 1873.0], [185.0, 1873.0], [184.0, 1877.0], [199.0, 1734.0], [198.0, 1735.0], [197.0, 1736.0], [196.0, 1782.3333333333333], [193.0, 1867.5], [207.0, 1728.0], [206.0, 1731.0], [205.0, 1800.0], [203.0, 1870.0], [202.0, 1871.0], [201.0, 1871.0], [200.0, 1872.0], [215.0, 1855.0], [214.0, 1856.0], [213.0, 1857.0], [212.0, 1857.0], [211.0, 1860.0], [210.0, 1864.0], [208.0, 1864.0], [223.0, 1841.0], [222.0, 1843.0], [221.0, 1845.0], [220.0, 1848.0], [218.0, 1849.0], [217.0, 1850.0], [216.0, 1850.0], [231.0, 1705.0], [230.0, 1834.0], [229.0, 1834.0], [228.0, 1836.0], [227.0, 1837.0], [225.0, 1837.0], [224.0, 1839.0], [239.0, 1412.0], [237.0, 1298.5], [235.0, 1356.75], [246.0, 1409.0], [245.0, 1333.6666666666667], [244.0, 1410.0], [241.0, 1411.0], [255.0, 1406.0], [253.0, 1177.0], [252.0, 1407.0], [249.0, 1331.6666666666667], [270.0, 1167.0], [271.0, 1394.0], [269.0, 1281.5], [259.0, 1174.0], [258.0, 1405.0], [256.0, 1176.0], [267.0, 1168.0], [266.0, 1398.0], [265.0, 1170.0], [264.0, 1398.0], [263.0, 1399.0], [262.0, 1400.0], [261.0, 1401.0], [260.0, 1173.0], [286.0, 1265.0], [287.0, 1377.0], [285.0, 1381.0], [275.0, 1388.0], [274.0, 1390.0], [273.0, 1277.5], [283.0, 1381.0], [281.0, 1382.0], [280.0, 1384.0], [279.0, 1270.5], [277.0, 1386.0], [276.0, 1386.0], [301.0, 1135.0], [300.0, 1250.5], [298.0, 1367.0], [297.0, 1368.0], [296.0, 1369.0], [294.0, 1216.3333333333333], [291.0, 1374.5], [289.0, 1147.0], [288.0, 1148.0], [318.0, 1231.0], [316.0, 1117.0], [315.0, 1117.0], [313.0, 1239.0], [311.0, 1131.0], [310.0, 1130.0], [309.0, 1284.6666666666667], [306.0, 1286.6666666666667], [305.0, 1363.0], [323.0, 1344.0], [334.0, 1086.0], [335.0, 1314.0], [332.0, 1315.0], [329.0, 1316.0], [327.0, 1332.0], [326.0, 1114.6666666666667], [324.0, 1114.0], [322.0, 1115.0], [321.0, 1116.0], [320.0, 1230.5], [350.0, 1182.0], [351.0, 1180.0], [349.0, 1182.5], [339.0, 1187.0], [338.0, 1187.0], [337.0, 1187.0], [347.0, 1184.0], [345.0, 1184.0], [344.0, 1185.0], [343.0, 1184.0], [342.0, 1185.0], [341.0, 1186.0], [366.0, 1167.0], [367.0, 1167.0], [365.0, 1172.0], [364.0, 1173.0], [363.0, 1174.0], [362.0, 1175.0], [361.0, 1175.0], [360.0, 1175.0], [359.0, 1176.0], [353.0, 1179.0], [352.0, 1180.0], [355.0, 1178.0], [354.0, 1179.0], [358.0, 1177.0], [357.0, 1177.0], [356.0, 1177.0], [381.0, 1145.0], [382.0, 1145.0], [380.0, 1148.0], [370.0, 1164.0], [369.0, 1165.0], [368.0, 1167.0], [379.0, 1149.0], [378.0, 1161.0], [377.0, 1162.0], [374.0, 1162.0], [373.0, 1163.0], [372.0, 1164.0], [387.0, 1138.0], [399.0, 1129.6666666666667], [396.0, 1129.0], [395.0, 1136.25], [393.0, 1137.0], [390.0, 1137.0], [389.0, 1137.5], [385.0, 1142.0], [384.0, 1142.0], [414.0, 3022.0], [415.0, 3022.0], [412.0, 3023.0], [403.0, 3029.0], [402.0, 1058.0], [401.0, 1123.0], [400.0, 1129.0], [411.0, 3025.0], [410.0, 3026.5], [409.0, 3028.0], [407.0, 3027.0], [406.0, 3028.5], [404.0, 3030.0], [430.0, 2988.0], [431.0, 2986.0], [429.0, 2988.0], [428.0, 2989.0], [427.0, 2988.0], [426.0, 2990.0], [425.0, 3017.4], [420.0, 3019.5], [418.0, 3020.0], [446.0, 2190.0], [447.0, 2171.0], [445.0, 2200.0], [444.0, 2581.0], [443.0, 2585.0], [442.0, 2594.0], [441.0, 2625.0], [440.0, 2975.0], [439.0, 2977.0], [432.0, 2985.0], [438.0, 2978.0], [437.0, 2983.0], [436.0, 2985.0], [462.0, 2166.0], [461.0, 2166.0], [459.0, 2405.0], [458.0, 2167.5], [455.0, 2406.0], [454.0, 2645.0], [452.0, 2169.0], [451.0, 2170.5], [449.0, 2171.0], [479.0, 2631.0], [477.0, 2631.0], [476.0, 2635.0], [475.0, 2161.0], [474.0, 2160.0], [473.0, 2477.3333333333335], [470.0, 2231.714285714286], [469.0, 2165.0], [494.0, 2624.0], [495.0, 3443.0], [492.0, 2625.5], [483.0, 2629.3333333333335], [480.0, 2629.5], [490.0, 2626.0], [489.0, 2627.0], [488.0, 2628.0], [486.0, 2629.0], [485.0, 2629.0], [484.0, 2629.0], [511.0, 3705.0], [509.0, 4251.0], [507.0, 2617.0], [506.0, 2618.0], [505.0, 2618.0], [504.0, 4257.0], [500.0, 4257.0], [499.0, 3439.0], [497.0, 2619.5], [540.0, 4236.0], [538.0, 4236.0], [534.0, 3698.0], [532.0, 4239.0], [530.0, 2602.0], [524.0, 4244.0], [522.0, 2606.0], [520.0, 4246.0], [518.0, 2609.0], [514.0, 2612.0], [550.0, 4231.5], [570.0, 2554.0], [568.0, 2557.0], [566.0, 4090.8], [562.0, 2558.0], [558.0, 4197.0], [556.0, 3388.0], [554.0, 2585.0], [552.0, 2593.0], [548.0, 4232.0], [544.0, 4234.0], [600.0, 4172.0], [598.0, 4182.0], [586.0, 4185.0], [582.0, 4186.5], [580.0, 2550.0], [576.0, 4746.0], [612.0, 4146.0], [638.0, 6543.0], [624.0, 3781.5], [632.0, 3779.0], [610.0, 4147.0], [608.0, 4155.5], [622.0, 6546.0], [618.0, 6549.0], [616.0, 4138.0], [630.0, 6844.0], [628.0, 3781.0], [668.0, 3753.0], [670.0, 3752.0], [656.0, 5612.0], [658.0, 6529.0], [664.0, 3755.0], [646.0, 6540.0], [652.0, 3770.0], [650.0, 3772.0], [648.0, 3775.0], [662.0, 5140.5], [660.0, 6529.0], [698.0, 6496.5], [702.0, 6495.0], [688.0, 3733.0], [700.0, 5112.5], [686.0, 3744.0], [672.0, 6517.0], [676.0, 6513.0], [684.0, 4667.0], [680.0, 3748.0], [694.0, 5113.5], [690.0, 6498.0], [710.0, 6640.0], [724.0, 3718.0], [720.0, 3722.0], [728.0, 6470.0], [708.0, 6640.0], [706.0, 3727.0], [716.0, 5566.666666666667], [714.0, 6488.0], [712.0, 6489.0], [726.0, 3708.0], [722.0, 6487.0], [760.0, 5128.0], [766.0, 5126.0], [764.0, 5126.0], [762.0, 6137.5], [736.0, 6489.8], [738.0, 6715.0], [740.0, 6413.0], [742.0, 6562.5], [748.0, 5667.5], [746.0, 6406.5], [744.0, 6408.0], [758.0, 6093.0], [756.0, 5611.0], [754.0, 8584.0], [792.0, 5117.0], [794.0, 5408.0], [788.0, 6084.0], [796.0, 9512.0], [798.0, 7324.0], [786.0, 5119.0], [772.0, 5416.0], [768.0, 6852.0], [782.0, 5603.5], [780.0, 5750.0], [778.0, 5220.0], [790.0, 6084.0], [802.0, 5596.0], [830.0, 6349.0], [826.0, 6067.0], [820.0, 5179.0], [816.0, 5589.5], [814.0, 5400.0], [800.0, 5595.5], [804.0, 8566.0], [806.0, 5403.0], [812.0, 5738.0], [808.0, 9505.0], [838.0, 5099.0], [862.0, 5081.0], [860.0, 5372.0], [858.0, 6650.666666666667], [836.0, 5100.0], [844.0, 8553.0], [842.0, 6064.0], [840.0, 6445.0], [854.0, 5711.5], [852.0, 8539.0], [850.0, 5387.0], [868.0, 5067.0], [894.0, 8442.0], [890.0, 8443.0], [888.0, 5135.5], [866.0, 5359.0], [876.0, 7223.5], [874.0, 5980.0], [872.0, 5356.0], [886.0, 5964.0], [920.0, 5248.0], [926.0, 5574.5], [912.0, 5461.5], [922.0, 5577.5], [900.0, 7189.0], [896.0, 7197.0], [908.0, 4981.0], [906.0, 5273.0], [918.0, 9354.0], [916.0, 8413.0], [956.0, 6781.5], [958.0, 8357.0], [944.0, 5217.5], [946.0, 5886.0], [954.0, 5201.0], [952.0, 8366.0], [942.0, 8380.0], [932.0, 5905.0], [940.0, 5084.5], [938.0, 8393.0], [950.0, 5548.0], [962.0, 8355.0], [978.0, 9284.0], [990.0, 5032.666666666667], [986.0, 5004.0], [960.0, 5530.0], [974.0, 7104.5], [970.0, 8351.0], [968.0, 5188.0], [980.0, 5851.0], [976.0, 5858.0], [1016.0, 7360.0], [1010.0, 5646.0], [1008.0, 5647.0], [1020.0, 7263.333333333333], [996.0, 5336.0], [994.0, 5000.0], [1006.0, 5649.0], [1004.0, 8143.0], [1002.0, 5670.0], [1000.0, 4998.0], [1012.0, 6596.0], [1072.0, 6579.0], [1056.0, 6584.0], [1060.0, 8701.0], [1076.0, 6464.0], [1028.0, 12958.0], [1024.0, 12959.0], [1052.0, 6528.0], [1040.0, 6589.0], [1064.0, 5527.0], [1144.0, 8647.0], [1124.0, 6445.0], [1120.0, 8679.0], [1148.0, 8637.0], [1140.0, 7305.0], [1136.0, 7550.5], [1088.0, 6461.0], [1096.0, 6573.0], [1116.0, 6511.0], [1104.0, 7334.0], [1208.0, 12782.0], [1212.0, 6297.0], [1184.0, 6446.0], [1188.0, 7536.0], [1192.0, 6429.0], [1204.0, 12784.0], [1200.0, 6307.0], [1160.0, 12881.0], [1156.0, 8635.0], [1152.0, 12883.0], [1176.0, 12813.5], [1172.0, 7242.0], [1168.0, 7263.0], [1196.0, 8546.0], [1264.0, 7774.0], [1276.0, 6232.0], [1252.0, 6887.0], [1272.0, 7113.0], [1228.0, 7775.333333333333], [1224.0, 8522.0], [1220.0, 6291.0], [1244.0, 7803.0], [1232.0, 7152.0], [1256.0, 7452.0], [1332.0, 12395.0], [1316.0, 9775.0], [1312.0, 5638.0], [1336.0, 8713.0], [1328.0, 6602.0], [1308.0, 10585.0], [1280.0, 6228.0], [1292.0, 7757.5], [1304.0, 6904.0], [1300.0, 7423.5], [1296.0, 5662.0], [1320.0, 9647.5], [1392.0, 7364.666666666667], [1380.0, 8925.5], [1404.0, 11710.0], [1400.0, 9419.0], [1372.0, 11655.0], [1344.0, 10958.0], [1348.0, 6840.0], [1352.0, 5231.0], [1368.0, 5576.0], [1364.0, 5577.0], [1360.0, 11047.333333333334], [1376.0, 6133.0], [1468.0, 7279.5], [1440.0, 7162.0], [1460.0, 7130.0], [1456.0, 4816.0], [1420.0, 7184.0], [1416.0, 7185.0], [1432.0, 4847.0], [1452.0, 5514.0], [1448.0, 7146.0], [1476.0, 11575.0], [1532.0, 5473.0], [1524.0, 5901.75], [1516.0, 7110.0], [1508.0, 5103.75], [1504.0, 7154.0], [1500.0, 5682.0], [1472.0, 5499.0], [1480.0, 8084.333333333333], [1484.0, 7117.5], [1492.0, 7116.0], [1488.0, 6051.0], [1588.0, 7061.0], [1596.0, 8253.5], [1568.0, 8025.333333333333], [1572.0, 7078.0], [1584.0, 11594.0], [1548.0, 11612.0], [1544.0, 10562.0], [1560.0, 6018.0], [1556.0, 11544.666666666666], [1552.0, 11545.0], [1580.0, 5644.0], [1576.0, 9698.0], [1648.0, 9184.5], [1660.0, 10416.0], [1632.0, 7667.0], [1652.0, 9576.0], [1628.0, 5592.0], [1604.0, 8320.333333333334], [1600.0, 8361.0], [1608.0, 9667.0], [1612.0, 5978.0], [1624.0, 5966.0], [1616.0, 5613.0], [1644.0, 11481.0], [1640.0, 5571.0], [1636.0, 7525.666666666667], [1676.0, 5490.0], [1712.0, 7136.4], [1672.0, 11378.0], [1696.0, 6886.0], [1688.0, 5463.0], [1684.0, 6900.0], [1680.0, 11429.0], [1776.0, 6139.5], [1788.0, 4774.0], [1732.0, 5356.4], [1740.0, 6481.333333333333], [1752.0, 5716.4], [1748.0, 5645.5], [1772.0, 4781.0], [1768.0, 7893.0], [1760.0, 4809.0], [1840.0, 6647.333333333333], [1852.0, 5817.666666666667], [1824.0, 6408.0], [1828.0, 7027.0], [1832.0, 6407.0], [1804.0, 7469.0], [1800.0, 7020.5], [1792.0, 6575.0], [1820.0, 5886.0], [1816.0, 6549.0], [1808.0, 6484.0], [1904.0, 6925.0], [1908.0, 6533.0], [1912.0, 6532.0], [1896.0, 6928.0], [1900.0, 6731.5], [1916.0, 5523.666666666667], [1856.0, 5538.5], [1864.0, 5581.5], [1868.0, 4659.0], [1880.0, 6936.0], [1876.0, 6937.0], [1872.0, 5786.75], [1976.0, 5450.0], [1964.0, 5454.0], [1972.0, 6072.0], [1920.0, 5615.0], [1948.0, 5466.0], [1944.0, 6192.0], [1936.0, 5473.0], [2044.0, 5959.0], [2020.0, 5990.0], [2024.0, 5495.0], [2028.0, 6403.0], [2032.0, 7293.0], [1996.0, 6872.0], [1992.0, 5445.0], [1988.0, 7389.0], [2012.0, 6189.0], [2008.0, 6843.0], [2004.0, 6027.0], [2000.0, 5478.5], [2160.0, 5265.0], [2112.0, 5159.0], [2120.0, 5906.0], [2168.0, 4982.0], [2048.0, 6506.333333333333], [2064.0, 5763.0], [2104.0, 5538.0], [2080.0, 5005.5], [2288.0, 4782.0], [2296.0, 4470.0], [2240.0, 5457.5], [2256.0, 5703.0], [2264.0, 3772.0], [2280.0, 4477.0], [2272.0, 4169.0], [2192.0, 5535.0], [2184.0, 5097.0], [2176.0, 5115.0], [2224.0, 5116.5], [2208.0, 4936.5], [2408.0, 3111.6666666666665], [2400.0, 3217.0], [2320.0, 4542.666666666667], [2304.0, 4769.0], [2360.0, 3062.0], [2344.0, 3978.0], [2544.0, 3005.0], [2496.0, 3115.0], [2504.0, 2950.0], [2512.0, 3165.0], [2536.0, 3109.5], [2528.0, 2888.0], [2432.0, 3231.3333333333335], [2440.0, 3118.0], [2448.0, 3034.0], [2464.0, 3202.5], [2680.0, 1049.0], [2624.0, 1698.0], [2632.0, 1293.0], [2640.0, 1122.0], [2648.0, 1113.0], [2672.0, 1076.0], [2664.0, 1101.0], [2560.0, 1146.0], [2568.0, 1136.0], [2616.0, 1713.0], [2608.0, 1074.0], [2600.0, 1085.0], [2592.0, 1093.6666666666667], [2784.0, 2303.0], [2752.0, 2066.75], [2768.0, 2315.0], [2800.0, 2282.0], [2704.0, 1995.0], [2736.0, 1102.0], [2728.0, 1958.0], [2720.0, 1978.0], [2912.0, 2709.0], [2896.0, 3317.0], [2904.0, 1531.0], [2920.0, 3750.0], [2824.0, 2251.0], [2832.0, 1936.0], [2840.0, 1566.0], [2848.0, 3570.0], [2944.0, 2611.5], [3000.0, 6117.610426041719], [2952.0, 2608.5], [2960.0, 3267.0], [2968.0, 3256.0], [2984.0, 5598.5], [2976.0, 3233.0], [2169.0, 4847.0], [2113.0, 4889.0], [2129.0, 5524.0], [2137.0, 5146.0], [2161.0, 5130.0], [2153.0, 5002.0], [2145.0, 5139.0], [2049.0, 5465.0], [2057.0, 5432.0], [2065.0, 5373.0], [2073.0, 4683.5], [2097.0, 5164.5], [2089.0, 4396.0], [2081.0, 4918.0], [2289.0, 4939.0], [2281.0, 4164.0], [2241.0, 5767.0], [2249.0, 5707.5], [2257.0, 5704.0], [2265.0, 4793.0], [2297.0, 4777.0], [2177.0, 5246.0], [2185.0, 5229.0], [2201.0, 5156.5], [2233.0, 5103.0], [2225.0, 4780.0], [2217.0, 5125.5], [2209.0, 5068.0], [2401.0, 3188.0], [2425.0, 3198.0], [2417.0, 3189.5384615384614], [2369.0, 3061.0], [2385.0, 3218.0], [2305.0, 4758.0], [2329.0, 4326.333333333333], [2353.0, 4098.0], [2345.0, 4728.0], [2553.0, 1150.0], [2497.0, 3213.0], [2505.0, 3207.0], [2521.0, 3051.0], [2537.0, 3110.0], [2529.0, 3044.0], [2433.0, 3040.0], [2449.0, 3021.0], [2489.0, 3110.6666666666665], [2481.0, 3199.0], [2473.0, 2994.0], [2569.0, 1134.0], [2657.0, 1102.0], [2665.0, 1100.6666666666667], [2625.0, 1640.0], [2649.0, 1113.0], [2561.0, 1146.0], [2577.0, 1122.0], [2617.0, 1712.0], [2609.0, 1069.0], [2601.0, 1085.0], [2593.0, 1093.0], [2801.0, 2280.0], [2753.0, 1097.0], [2761.0, 2322.0], [2769.0, 2312.0], [2793.0, 2387.5], [2689.0, 2004.0], [2697.0, 2003.0], [2705.0, 1995.0], [2713.0, 1984.0], [2745.0, 1918.6666666666667], [2729.0, 1958.0], [2721.0, 1977.5], [2929.0, 3284.0], [2881.0, 2667.5], [2889.0, 2880.25], [2905.0, 1531.0], [2817.0, 2461.0], [2825.0, 2251.0], [2841.0, 3799.0], [2873.0, 2446.5], [2865.0, 1561.0], [2849.0, 1564.0], [2953.0, 1492.0], [2961.0, 3267.0], [2969.0, 3255.0], [1029.0, 10157.0], [1077.0, 6579.0], [1073.0, 6579.0], [1037.0, 6588.0], [1025.0, 6593.0], [1053.0, 6471.0], [1049.0, 6586.0], [1045.0, 6750.25], [1041.0, 6532.0], [1061.0, 6582.0], [1057.0, 6469.0], [1141.0, 6535.0], [1121.0, 8679.0], [1125.0, 6445.0], [1145.0, 7290.0], [1089.0, 6460.0], [1093.0, 7632.5], [1097.0, 6573.0], [1101.0, 6457.0], [1117.0, 6567.0], [1113.0, 6569.0], [1109.0, 6951.75], [1105.0, 12936.0], [1133.0, 7025.333333333333], [1129.0, 6496.5], [1205.0, 12783.0], [1213.0, 6296.0], [1189.0, 8553.0], [1209.0, 7835.5], [1161.0, 10757.0], [1157.0, 6841.0], [1181.0, 8391.5], [1177.0, 8565.0], [1173.0, 7212.0], [1169.0, 6487.0], [1265.0, 8472.0], [1277.0, 7767.0], [1249.0, 6263.0], [1269.0, 9200.0], [1217.0, 7848.5], [1221.0, 6404.0], [1225.0, 12767.0], [1229.0, 7165.0], [1245.0, 7144.0], [1241.0, 7444.0], [1237.0, 6386.0], [1233.0, 7151.0], [1257.0, 7123.0], [1253.0, 7125.0], [1329.0, 6881.0], [1317.0, 10579.0], [1341.0, 8417.5], [1333.0, 8717.5], [1281.0, 7763.0], [1285.0, 7761.0], [1289.0, 8458.5], [1293.0, 6556.0], [1309.0, 6896.0], [1305.0, 6345.0], [1321.0, 10572.0], [1313.0, 12414.0], [1405.0, 6027.5], [1377.0, 5365.0], [1401.0, 7190.0], [1397.0, 11647.0], [1393.0, 11650.0], [1349.0, 11373.0], [1365.0, 11657.0], [1389.0, 11651.0], [1457.0, 6423.25], [1445.0, 11669.0], [1469.0, 6597.0], [1441.0, 5731.0], [1421.0, 7183.5], [1417.0, 7185.0], [1413.0, 10200.666666666666], [1409.0, 8584.5], [1433.0, 6104.0], [1429.0, 8242.5], [1425.0, 7182.0], [1449.0, 7144.0], [1533.0, 5665.0], [1513.0, 4788.0], [1529.0, 10641.5], [1477.0, 5689.0], [1473.0, 7120.0], [1497.0, 5953.0], [1489.0, 7117.0], [1517.0, 5678.0], [1589.0, 5623.0], [1593.0, 7309.333333333334], [1577.0, 4753.0], [1597.0, 5620.0], [1569.0, 5647.0], [1565.0, 5895.333333333333], [1537.0, 8224.666666666666], [1545.0, 9712.0], [1549.0, 5781.666666666667], [1561.0, 9706.0], [1557.0, 6022.0], [1553.0, 9712.0], [1581.0, 5642.0], [1653.0, 10526.0], [1649.0, 9579.0], [1661.0, 7542.0], [1633.0, 9637.0], [1657.0, 7544.5], [1629.0, 5949.0], [1601.0, 7050.0], [1605.0, 9671.0], [1613.0, 4721.0], [1625.0, 5601.0], [1617.0, 7043.0], [1645.0, 6957.0], [1641.0, 5532.0], [1669.0, 8437.5], [1693.0, 11376.0], [1713.0, 9543.0], [1665.0, 5495.0], [1697.0, 6886.0], [1689.0, 11349.0], [1685.0, 5465.0], [1761.0, 7919.0], [1765.0, 6162.5], [1781.0, 6331.5], [1757.0, 5794.25], [1749.0, 4812.0], [1773.0, 7891.0], [1769.0, 4783.0], [1853.0, 6510.0], [1825.0, 7028.0], [1833.0, 6542.0], [1837.0, 6396.0], [1845.0, 7821.0], [1841.0, 6532.0], [1801.0, 7478.0], [1797.0, 4760.0], [1821.0, 6409.0], [1817.0, 6549.0], [1813.0, 6221.0], [1809.0, 7467.0], [1917.0, 6921.0], [1893.0, 6928.0], [1889.0, 6014.0], [1897.0, 6537.0], [1901.0, 6927.0], [1905.0, 5619.0], [1861.0, 7789.0], [1865.0, 7379.0], [1885.0, 6860.333333333333], [1881.0, 7693.833333333334], [1969.0, 5803.333333333333], [1973.0, 6071.0], [1953.0, 6254.0], [1961.0, 5529.5], [1965.0, 6075.0], [1921.0, 6098.0], [1925.0, 6097.0], [1929.0, 6506.0], [1945.0, 5604.0], [1941.0, 6194.0], [1937.0, 5610.0], [2041.0, 5475.0], [2037.0, 5962.666666666667], [2017.0, 5451.5], [2025.0, 6798.0], [2029.0, 5729.5], [2045.0, 5957.5], [1997.0, 5429.0], [1993.0, 6887.0], [1989.0, 6890.0], [1985.0, 5757.5], [2013.0, 5534.0], [2009.0, 6020.0], [2005.0, 5543.0], [2001.0, 6853.0], [2170.0, 5117.0], [2114.0, 4890.0], [2122.0, 5020.0], [2138.0, 5099.666666666667], [2162.0, 4849.0], [2146.0, 5004.0], [2058.0, 5429.0], [2050.0, 5948.0], [2066.0, 5763.0], [2106.0, 5161.5], [2298.0, 4932.0], [2242.0, 5017.0], [2290.0, 4470.5], [2274.0, 4478.0], [2202.0, 5220.0], [2178.0, 5113.0], [2314.0, 4750.0], [2402.0, 3216.0], [2330.0, 4893.0], [2322.0, 4749.0], [2306.0, 4137.0], [2362.0, 3166.3333333333335], [2346.0, 4108.0], [2338.0, 4271.75], [2546.0, 3105.0], [2498.0, 2956.0], [2514.0, 2985.5], [2522.0, 3100.5], [2538.0, 2851.0], [2530.0, 3015.5], [2434.0, 3039.0], [2490.0, 3129.0], [2482.0, 2993.0], [2466.0, 3152.0], [2674.0, 1072.0], [2666.0, 1090.0], [2682.0, 2009.0], [2626.0, 1357.0], [2634.0, 1124.0], [2642.0, 1122.0], [2650.0, 1113.0], [2658.0, 1102.0], [2562.0, 1145.0], [2570.0, 1133.0], [2578.0, 1121.0], [2586.0, 1097.0], [2602.0, 1084.0], [2594.0, 1092.0], [2762.0, 2322.0], [2786.0, 2301.5], [2698.0, 2002.0], [2706.0, 1993.0], [2714.0, 1984.0], [2722.0, 1968.0], [2938.0, 2925.2], [2930.0, 3283.0], [2882.0, 1550.0], [2818.0, 2270.0], [2826.0, 2250.0], [2866.0, 2677.5], [2858.0, 2896.5], [2946.0, 3272.5], [2962.0, 3266.6666666666665], [2986.0, 5598.0], [2954.0, 3271.0], [2970.0, 1475.0], [2978.0, 1423.5], [2163.0, 4850.0], [2155.0, 5202.5], [2115.0, 3888.0], [2123.0, 5154.0], [2131.0, 5078.0], [2139.0, 5140.0], [2171.0, 5117.0], [2147.0, 4869.0], [2051.0, 6770.0], [2067.0, 4938.0], [2091.0, 5030.0], [2083.0, 5127.0], [2283.0, 4784.0], [2291.0, 4781.0], [2243.0, 5766.0], [2251.0, 5707.5], [2267.0, 4791.0], [2275.0, 4944.0], [2179.0, 5113.0], [2187.0, 5227.0], [2203.0, 4814.0], [2235.0, 5472.0], [2227.0, 4779.5], [2219.0, 5058.0], [2211.0, 4931.5], [2403.0, 3267.5], [2427.0, 3298.0], [2379.0, 3218.0], [2395.0, 3231.0], [2323.0, 4439.25], [2315.0, 4749.5], [2355.0, 3193.5], [2347.0, 4103.0], [2531.0, 2874.0], [2507.0, 3078.5], [2555.0, 1149.0], [2523.0, 3049.0], [2435.0, 3168.5], [2451.0, 3150.5], [2483.0, 3148.0], [2475.0, 3216.3333333333335], [2675.0, 1072.0], [2659.0, 1102.0], [2627.0, 1339.0], [2643.0, 1121.0], [2683.0, 2009.0], [2667.0, 1078.0], [2563.0, 1144.0], [2571.0, 1132.0], [2579.0, 1121.0], [2587.0, 1097.0], [2619.0, 1711.0], [2611.0, 1066.5], [2603.0, 1083.0], [2595.0, 1091.0], [2795.0, 2480.0], [2803.0, 2374.5], [2755.0, 2324.0], [2763.0, 2513.0], [2771.0, 2407.5], [2779.0, 2001.0], [2691.0, 2005.0], [2699.0, 2002.0], [2707.0, 1992.0], [2715.0, 1983.5], [2747.0, 2422.5], [2739.0, 1511.0], [2731.0, 1949.0], [2723.0, 1967.0], [2939.0, 3275.0], [2819.0, 2397.6666666666665], [2827.0, 2249.0], [2835.0, 1567.0], [2867.0, 1560.0], [2851.0, 2453.5], [2955.0, 3723.0], [2979.0, 2740.0], [541.0, 4234.0], [543.0, 3416.0], [539.0, 4792.0], [537.0, 4237.5], [535.0, 4238.0], [531.0, 4240.0], [529.0, 4240.5], [527.0, 3422.5], [519.0, 2609.0], [515.0, 3431.0], [525.0, 4243.0], [523.0, 4243.5], [569.0, 2558.0], [575.0, 3371.0], [573.0, 3373.0], [571.0, 4192.0], [561.0, 4475.0], [557.0, 2569.0], [553.0, 2588.0], [551.0, 4230.0], [547.0, 2594.0], [545.0, 4233.0], [583.0, 4185.0], [603.0, 4432.5], [607.0, 4711.0], [601.0, 2532.0], [599.0, 4181.0], [597.0, 4002.6666666666665], [591.0, 4184.5], [589.0, 3824.0], [587.0, 4185.0], [579.0, 3369.0], [577.0, 4745.0], [633.0, 3779.0], [637.0, 5622.0], [639.0, 6542.0], [635.0, 6543.0], [621.0, 6546.666666666667], [615.0, 4330.333333333333], [611.0, 4702.0], [609.0, 4154.333333333333], [617.0, 3784.0], [629.0, 5163.5], [625.0, 6546.0], [665.0, 3754.0], [671.0, 3753.0], [657.0, 3767.0], [667.0, 5135.0], [653.0, 3770.0], [645.0, 6841.0], [641.0, 3777.0], [647.0, 5434.6], [651.0, 3773.0], [649.0, 3774.0], [663.0, 6520.0], [659.0, 3764.0], [701.0, 6795.0], [703.0, 3729.0], [699.0, 4652.333333333333], [675.0, 5594.666666666667], [673.0, 3752.0], [679.0, 4670.666666666667], [685.0, 6510.0], [681.0, 6513.0], [691.0, 3733.0], [689.0, 6496.5], [729.0, 6464.0], [731.0, 6612.5], [705.0, 5108.0], [719.0, 6489.0], [717.0, 3723.0], [715.0, 6488.0], [727.0, 3708.0], [725.0, 6779.0], [723.0, 3721.0], [765.0, 5418.0], [753.0, 6094.0], [763.0, 6092.0], [751.0, 7003.5], [737.0, 6421.0], [739.0, 6414.0], [743.0, 6410.0], [749.0, 5422.0], [755.0, 6094.0], [795.0, 5598.0], [785.0, 5748.5], [775.0, 5415.0], [773.0, 6088.0], [771.0, 5318.0], [783.0, 6085.0], [777.0, 6089.0], [791.0, 5410.0], [789.0, 5411.0], [827.0, 5395.0], [825.0, 5731.5], [823.0, 6977.5], [821.0, 8559.0], [803.0, 5404.0], [807.0, 5112.0], [813.0, 5253.0], [809.0, 7320.5], [863.0, 6327.666666666667], [851.0, 5376.0], [847.0, 6969.5], [835.0, 7309.5], [837.0, 6065.0], [845.0, 8553.0], [843.0, 5420.666666666667], [855.0, 5081.0], [849.0, 6824.0], [869.0, 8520.0], [893.0, 7185.5], [889.0, 8443.0], [871.0, 6791.5], [867.0, 5067.0], [865.0, 5078.0], [879.0, 7413.0], [873.0, 5356.0], [885.0, 6731.0], [883.0, 5487.0], [881.0, 6880.0], [925.0, 8402.0], [927.0, 8397.0], [915.0, 6703.0], [913.0, 8433.0], [923.0, 5239.0], [911.0, 8434.0], [903.0, 7193.0], [901.0, 8438.0], [909.0, 8435.5], [905.0, 5274.0], [919.0, 5247.0], [917.0, 8414.0], [957.0, 5869.0], [945.0, 8376.0], [953.0, 4909.0], [929.0, 7152.0], [931.0, 8866.0], [935.0, 4938.5], [933.0, 4939.0], [941.0, 8393.0], [939.0, 5083.5], [951.0, 5884.0], [949.0, 4919.0], [947.0, 8376.0], [985.0, 5513.75], [991.0, 5339.5], [975.0, 6778.0], [961.0, 8355.0], [963.0, 5865.0], [967.0, 7107.0], [965.0, 6770.5], [971.0, 8350.0], [981.0, 5180.0], [979.0, 5855.0], [977.0, 9288.0], [999.0, 6580.0], [1019.0, 7359.0], [1021.0, 8714.0], [1023.0, 7653.5], [997.0, 4706.0], [993.0, 5337.5], [1007.0, 5648.0], [1005.0, 4980.0], [1003.0, 9088.0], [1001.0, 4705.0], [1015.0, 6521.0], [1011.0, 6889.5], [1078.0, 6463.0], [1082.0, 6462.666666666667], [1062.0, 8003.0], [1086.0, 7084.0], [1058.0, 12948.0], [1038.0, 5534.0], [1034.0, 7965.333333333333], [1030.0, 6592.0], [1026.0, 8712.0], [1054.0, 6470.0], [1050.0, 6585.0], [1046.0, 6587.0], [1070.0, 8664.0], [1066.0, 6906.5], [1138.0, 8668.0], [1150.0, 7282.5], [1146.0, 6412.0], [1142.0, 6536.0], [1118.0, 6565.0], [1090.0, 6460.0], [1102.0, 8011.5], [1098.0, 6897.5], [1114.0, 7332.0], [1106.0, 6456.0], [1134.0, 7315.0], [1126.0, 7319.0], [1202.0, 7862.5], [1214.0, 6409.0], [1186.0, 8564.0], [1190.0, 6318.0], [1194.0, 7137.5], [1210.0, 6412.0], [1166.0, 6400.0], [1158.0, 8183.0], [1174.0, 7214.0], [1170.0, 7250.0], [1198.0, 10318.0], [1266.0, 7115.0], [1278.0, 7764.0], [1274.0, 7111.0], [1270.0, 8469.0], [1222.0, 6404.0], [1218.0, 7170.0], [1246.0, 7800.0], [1242.0, 9467.666666666666], [1234.0, 7150.0], [1258.0, 7124.5], [1338.0, 11893.0], [1342.0, 6850.0], [1330.0, 10567.0], [1290.0, 7759.0], [1294.0, 6362.0], [1306.0, 10591.0], [1302.0, 6917.0], [1326.0, 6882.0], [1322.0, 10572.0], [1318.0, 5633.0], [1358.0, 5579.0], [1394.0, 9816.0], [1346.0, 11871.0], [1350.0, 4883.0], [1354.0, 8900.0], [1370.0, 8615.0], [1362.0, 5508.5], [1390.0, 11716.0], [1386.0, 9711.0], [1382.0, 8296.5], [1378.0, 9820.0], [1458.0, 5514.0], [1446.0, 5717.0], [1470.0, 5698.0], [1442.0, 5524.0], [1422.0, 5558.0], [1414.0, 4863.0], [1410.0, 4865.0], [1438.0, 8193.333333333334], [1426.0, 9441.0], [1450.0, 7139.0], [1534.0, 11618.0], [1530.0, 11557.0], [1482.0, 5688.0], [1486.0, 5493.0], [1498.0, 7114.0], [1494.0, 6400.5], [1594.0, 7052.0], [1598.0, 5984.0], [1570.0, 6013.0], [1574.0, 5549.5], [1590.0, 5623.0], [1586.0, 6539.0], [1542.0, 6260.666666666667], [1538.0, 7093.0], [1554.0, 6025.0], [1658.0, 11404.0], [1662.0, 11401.0], [1650.0, 9577.0], [1606.0, 5614.0], [1614.0, 5613.0], [1626.0, 11553.0], [1618.0, 11564.0], [1646.0, 11479.0], [1674.0, 7516.5], [1694.0, 11406.0], [1718.0, 6390.6], [1670.0, 5494.0], [1702.0, 5334.333333333333], [1686.0, 11353.0], [1682.0, 8218.5], [1738.0, 6480.0], [1766.0, 4794.0], [1790.0, 4774.0], [1778.0, 4778.5], [1758.0, 7922.0], [1754.0, 6050.2], [1750.0, 4812.0], [1746.0, 6480.0], [1774.0, 7891.0], [1806.0, 5651.0], [1830.0, 5191.0], [1834.0, 6541.0], [1846.0, 6687.0], [1802.0, 6557.666666666667], [1794.0, 4770.5], [1818.0, 6412.0], [1814.0, 4746.0], [1910.0, 5480.0], [1890.0, 6929.0], [1894.0, 6928.5], [1898.0, 6104.0], [1902.0, 6534.0], [1906.0, 5481.0], [1886.0, 6930.0], [1858.0, 6670.666666666667], [1866.0, 4660.0], [1882.0, 5489.0], [1978.0, 5450.0], [1954.0, 5465.0], [1958.0, 6149.666666666667], [1966.0, 6896.0], [1982.0, 5759.0], [1926.0, 5476.0], [1934.0, 6001.0], [1950.0, 6755.5], [1946.0, 6087.0], [1942.0, 5608.0], [1998.0, 5565.0], [2042.0, 6781.0], [2022.0, 5749.0], [2018.0, 5995.0], [2026.0, 5973.0], [2030.0, 6794.0], [1990.0, 5583.0], [1986.0, 6067.0], [2014.0, 5520.0], [2010.0, 5468.0], [2006.0, 6453.0], [2148.0, 4868.0], [2172.0, 5115.0], [2116.0, 3887.0], [2132.0, 5896.0], [2140.0, 5139.0], [2068.0, 4454.0], [2076.0, 5332.5], [2108.0, 5092.5], [2100.0, 4893.0], [2092.0, 5164.0], [2084.0, 5728.0], [2300.0, 4466.5], [2244.0, 5766.0], [2252.0, 5706.0], [2260.0, 4115.333333333333], [2268.0, 3769.0], [2292.0, 4162.0], [2204.0, 4813.0], [2196.0, 5093.0], [2188.0, 5839.0], [2180.0, 5243.0], [2236.0, 5020.0], [2212.0, 4797.0], [2412.0, 3252.0], [2404.0, 3227.5], [2420.0, 3198.0], [2324.0, 4897.0], [2316.0, 4749.0], [2356.0, 3222.0], [2348.0, 4103.0], [2548.0, 1152.0], [2500.0, 3162.0], [2524.0, 3146.0], [2540.0, 2979.5], [2444.0, 3119.0], [2572.0, 1131.0], [2676.0, 1071.0], [2628.0, 1333.0], [2636.0, 1123.0], [2652.0, 1111.5], [2564.0, 1144.0], [2580.0, 1118.0], [2620.0, 1709.0], [2612.0, 1061.0], [2604.0, 1082.0], [2596.0, 1088.0], [2804.0, 2469.0], [2788.0, 2395.5], [2756.0, 1710.0], [2764.0, 1092.0], [2772.0, 2311.0], [2780.0, 2309.0], [2796.0, 2479.0], [2748.0, 2518.0], [2692.0, 2004.5], [2700.0, 2000.0], [2708.0, 1989.0], [2716.0, 1981.0], [2732.0, 1512.0], [2724.0, 1961.0], [2940.0, 3276.0], [2892.0, 2728.6666666666665], [2884.0, 3783.0], [2900.0, 3543.0], [2908.0, 2119.0], [2932.0, 2951.75], [2924.0, 3517.5], [2820.0, 2269.0], [2836.0, 2160.0], [2868.0, 1559.0], [2956.0, 3268.0], [2061.0, 5825.0], [2165.0, 5117.0], [2117.0, 4886.0], [2053.0, 5464.0], [2069.0, 4936.0], [2077.0, 5743.0], [2109.0, 4890.0], [2101.0, 4893.0], [2093.0, 4895.0], [2085.0, 5917.0], [2285.0, 4327.666666666667], [2253.0, 5705.0], [2261.0, 4797.0], [2269.0, 4790.0], [2277.0, 4477.0], [2197.0, 5224.5], [2189.0, 5026.5], [2205.0, 4813.0], [2237.0, 5768.0], [2221.0, 5057.0], [2213.0, 5064.0], [2413.0, 3290.75], [2373.0, 3318.0], [2381.0, 3218.0], [2389.0, 3317.0], [2357.0, 3063.0], [2309.0, 4505.0], [2325.0, 4121.0], [2349.0, 4102.0], [2533.0, 3067.0], [2509.0, 3076.5], [2557.0, 1149.0], [2549.0, 1151.0], [2445.0, 3205.8], [2453.0, 3227.0], [2461.0, 3131.0], [2493.0, 3075.3333333333335], [2485.0, 3196.0], [2477.0, 2993.0], [2469.0, 2995.0], [2685.0, 2007.5], [2629.0, 1322.0], [2645.0, 1120.5], [2653.0, 1109.0], [2669.0, 1078.0], [2565.0, 1143.0], [2573.0, 1127.0], [2589.0, 1096.0], [2621.0, 1708.0], [2613.0, 1053.0], [2605.0, 1081.0], [2597.0, 1088.0], [2789.0, 2298.0], [2757.0, 1096.0], [2765.0, 2318.0], [2781.0, 2304.0], [2693.0, 2003.0], [2709.0, 1986.0], [2717.0, 1980.0], [2733.0, 2332.0], [2845.0, 3012.75], [2933.0, 1503.0], [2885.0, 3556.0], [2893.0, 1541.0], [2837.0, 3800.0], [2877.0, 2891.0], [2869.0, 3338.0], [2853.0, 3796.0], [2965.0, 3048.25], [2989.0, 2737.0], [2981.0, 2739.0], [1079.0, 6576.0], [1083.0, 5521.0], [1075.0, 6579.0], [1039.0, 10153.0], [1031.0, 8710.0], [1055.0, 6584.0], [1047.0, 6472.0], [1067.0, 6466.0], [1063.0, 9765.0], [1139.0, 6546.5], [1147.0, 12886.0], [1151.0, 6404.0], [1123.0, 6885.5], [1143.0, 6418.0], [1119.0, 6448.0], [1091.0, 8692.0], [1095.0, 6458.0], [1099.0, 5517.0], [1111.0, 6950.5], [1131.0, 6438.0], [1127.0, 6440.0], [1211.0, 7177.0], [1215.0, 12773.0], [1187.0, 6445.0], [1191.0, 6428.0], [1207.0, 6415.0], [1203.0, 7183.0], [1167.0, 6985.0], [1163.0, 7574.0], [1183.0, 7156.0], [1171.0, 6483.0], [1199.0, 6309.0], [1195.0, 7191.0], [1271.0, 6234.0], [1279.0, 8462.0], [1251.0, 7142.0], [1275.0, 7768.0], [1247.0, 7143.0], [1219.0, 7169.0], [1223.0, 8524.0], [1231.0, 6388.0], [1243.0, 7149.0], [1239.0, 6272.0], [1235.0, 6386.0], [1263.0, 7285.5], [1259.0, 6243.0], [1283.0, 6995.0], [1339.0, 10542.0], [1311.0, 9655.5], [1287.0, 7323.0], [1295.0, 6362.0], [1307.0, 6339.0], [1303.0, 6915.0], [1327.0, 6603.0], [1323.0, 12403.0], [1395.0, 11647.0], [1403.0, 11710.0], [1383.0, 4873.0], [1399.0, 11646.0], [1359.0, 6138.0], [1355.0, 7204.0], [1347.0, 10530.0], [1371.0, 11655.0], [1367.0, 4879.0], [1363.0, 11724.0], [1387.0, 11651.0], [1423.0, 7184.0], [1459.0, 11586.0], [1471.0, 6058.0], [1467.0, 5935.6], [1419.0, 4861.0], [1415.0, 6119.0], [1439.0, 6097.0], [1435.0, 5636.0], [1431.0, 8687.0], [1427.0, 7180.0], [1455.0, 7139.0], [1447.0, 7084.333333333333], [1523.0, 11628.0], [1527.0, 5377.666666666667], [1531.0, 6032.0], [1511.0, 8993.666666666666], [1487.0, 7118.0], [1483.0, 5688.0], [1475.0, 6307.5], [1503.0, 5682.0], [1499.0, 6048.0], [1495.0, 5685.0], [1491.0, 6050.0], [1519.0, 7704.5], [1515.0, 7365.333333333333], [1551.0, 6023.0], [1587.0, 9694.0], [1543.0, 5662.5], [1563.0, 6017.0], [1559.0, 6023.0], [1583.0, 10645.5], [1579.0, 11530.0], [1575.0, 11532.0], [1571.0, 11534.0], [1655.0, 5523.0], [1663.0, 6946.0], [1607.0, 11567.0], [1611.0, 8556.0], [1627.0, 5595.0], [1623.0, 8163.333333333333], [1619.0, 11496.0], [1643.0, 5084.0], [1639.0, 6295.0], [1671.0, 5494.0], [1727.0, 5716.5], [1679.0, 7918.666666666667], [1675.0, 11441.0], [1667.0, 8056.333333333333], [1699.0, 9112.5], [1691.0, 11380.5], [1687.0, 11351.0], [1683.0, 11355.0], [1783.0, 5677.5], [1767.0, 6452.0], [1787.0, 6236.0], [1791.0, 5536.666666666667], [1763.0, 5638.5], [1779.0, 6444.0], [1743.0, 4814.0], [1731.0, 6617.0], [1759.0, 4811.0], [1755.0, 7099.0], [1771.0, 6141.0], [1851.0, 4706.0], [1843.0, 5544.5], [1855.0, 6992.0], [1835.0, 4737.0], [1839.0, 7015.0], [1803.0, 4755.0], [1795.0, 6574.0], [1823.0, 4742.5], [1815.0, 4746.0], [1891.0, 6929.0], [1895.0, 6928.0], [1919.0, 5479.0], [1903.0, 6925.0], [1911.0, 6923.0], [1859.0, 7795.0], [1863.0, 4680.0], [1867.0, 6463.0], [1979.0, 5517.5], [1983.0, 6169.5], [1955.0, 7907.0], [1959.0, 6082.0], [1963.0, 6298.0], [1975.0, 6482.5], [1971.0, 6243.0], [1951.0, 6085.0], [1923.0, 6773.333333333333], [1927.0, 5474.0], [1931.0, 5543.5], [1935.0, 5473.0], [1947.0, 6086.0], [1939.0, 5851.5], [2035.0, 6179.0], [2047.0, 6389.0], [2019.0, 5991.0], [2023.0, 7802.0], [2039.0, 6129.0], [1995.0, 5581.0], [1991.0, 7887.0], [2015.0, 5520.0], [2003.0, 4576.0], [2158.0, 4955.0], [2166.0, 5249.0], [2126.0, 5015.0], [2134.0, 5011.0], [2150.0, 5138.0], [2110.0, 4891.0], [2062.0, 4942.0], [2070.0, 5757.0], [2102.0, 5162.0], [2294.0, 4161.0], [2246.0, 5842.5], [2302.0, 4463.5], [2262.0, 4795.0], [2270.0, 3768.0], [2286.0, 4164.0], [2278.0, 4168.0], [2206.0, 4804.0], [2198.0, 5093.0], [2182.0, 4976.5], [2222.0, 5122.5], [2214.0, 5062.0], [2414.0, 3154.166666666667], [2406.0, 3189.0], [2382.0, 3062.0], [2430.0, 3248.0], [2422.0, 3179.3333333333335], [2334.0, 4117.25], [2326.0, 4895.0], [2310.0, 4755.0], [2342.0, 4317.333333333333], [2534.0, 3016.0], [2542.0, 3056.5], [2550.0, 1150.0], [2510.0, 3090.0], [2518.0, 3137.75], [2558.0, 1149.0], [2438.0, 3247.0], [2446.0, 3190.0], [2462.0, 3252.0], [2494.0, 2965.0], [2486.0, 3146.0], [2678.0, 1058.0], [2630.0, 1308.0], [2646.0, 1114.0], [2654.0, 1104.0], [2662.0, 1102.0], [2566.0, 1142.0], [2574.0, 1126.0], [2622.0, 1706.0], [2614.0, 1718.0], [2606.0, 1077.0], [2598.0, 1086.0], [2710.0, 1986.0], [2798.0, 2287.0], [2758.0, 1096.0], [2774.0, 2405.5], [2782.0, 2304.0], [2702.0, 1997.0], [2742.0, 2329.0], [2734.0, 1103.0], [2726.0, 1959.0], [2838.0, 1566.0], [2894.0, 1539.0], [2926.0, 2623.5], [2918.0, 2965.25], [2830.0, 2247.6666666666665], [2870.0, 1558.0], [2862.0, 3009.75], [2854.0, 2679.5], [2950.0, 3574.6666666666665], [2974.0, 2792.5], [2982.0, 5599.0], [2159.0, 5134.0], [2119.0, 5221.0], [2175.0, 5025.666666666667], [2127.0, 4879.0], [2143.0, 4959.666666666667], [2151.0, 5137.0], [2111.0, 4891.0], [2055.0, 6612.0], [2063.0, 4942.0], [2071.0, 4926.0], [2095.0, 4894.5], [2087.0, 4897.0], [2295.0, 4029.0], [2303.0, 4773.0], [2247.0, 5762.0], [2255.0, 5704.5], [2263.0, 4795.0], [2239.0, 5768.0], [2183.0, 5230.0], [2199.0, 5024.5], [2231.0, 5046.25], [2215.0, 5062.0], [2431.0, 3297.0], [2423.0, 3198.0], [2407.0, 3163.25], [2311.0, 4755.0], [2351.0, 4796.0], [2343.0, 4111.0], [2543.0, 3106.0], [2559.0, 1147.0], [2503.0, 3093.0], [2511.0, 3189.0], [2519.0, 3163.0], [2527.0, 3044.5], [2495.0, 3116.0], [2447.0, 3190.0], [2455.0, 3098.0], [2479.0, 3130.6666666666665], [2471.0, 3123.0], [2671.0, 1077.0], [2631.0, 1305.0], [2687.0, 2006.0], [2639.0, 1123.0], [2679.0, 1051.0], [2663.0, 1101.0], [2623.0, 1707.0], [2567.0, 1138.0], [2575.0, 1124.0], [2583.0, 1098.3333333333333], [2615.0, 1717.0], [2607.0, 1074.0], [2599.0, 1085.0], [2807.0, 2272.0], [2815.0, 2270.0], [2759.0, 1095.0], [2767.0, 1701.0], [2775.0, 2309.0], [2783.0, 2303.0], [2799.0, 2286.0], [2791.0, 2297.0], [2695.0, 2002.5], [2703.0, 1997.0], [2711.0, 1986.0], [2735.0, 1102.0], [2727.0, 1959.0], [2943.0, 2384.5], [2919.0, 2406.5], [2895.0, 1538.0], [2903.0, 3462.3333333333335], [2911.0, 3303.0], [2879.0, 3562.0], [2847.0, 1564.0], [2871.0, 1558.0], [2863.0, 3794.0], [2967.0, 2371.5], [2975.0, 3236.0], [2991.0, 5160.5], [2983.0, 2739.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[2776.360199004972, 5911.58656716419]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 3000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 3435.6, "minX": 1.6828803E12, "maxY": 47658.01666666667, "series": [{"data": [[1.6828803E12, 4289.766666666666], [1.68288042E12, 47658.01666666667], [1.68288054E12, 41662.816666666666], [1.68288036E12, 37075.083333333336], [1.6828806E12, 37281.75], [1.68288048E12, 47076.5]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.6828803E12, 3435.6], [1.68288042E12, 36531.6], [1.68288054E12, 32272.8], [1.68288036E12, 29685.6], [1.6828806E12, 29853.6], [1.68288048E12, 37035.6]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6828806E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 3396.4278728606355, "minX": 1.6828803E12, "maxY": 7848.471832605223, "series": [{"data": [[1.6828803E12, 3396.4278728606355], [1.68288042E12, 7848.471832605223], [1.68288054E12, 3916.5143154607017], [1.68288036E12, 5874.617996604422], [1.6828806E12, 4516.167979741131], [1.68288048E12, 7126.504533091554]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6828806E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 3395.828850855744, "minX": 1.6828803E12, "maxY": 7848.457346516435, "series": [{"data": [[1.6828803E12, 3395.828850855744], [1.68288042E12, 7848.457346516435], [1.68288054E12, 3916.5005205622138], [1.68288036E12, 5874.597906055467], [1.6828806E12, 4516.153911086102], [1.68288048E12, 7055.0917951042675]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6828806E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.31181676210307185, "minX": 1.6828803E12, "maxY": 1447.3073436083412, "series": [{"data": [[1.6828803E12, 12.953545232273834], [1.68288042E12, 1083.4283743389246], [1.68288054E12, 0.31181676210307185], [1.68288036E12, 0.4994340690435771], [1.6828806E12, 0.5872256612267851], [1.68288048E12, 1447.3073436083412]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6828806E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 7.0, "minX": 1.6828803E12, "maxY": 136340.0, "series": [{"data": [[1.6828803E12, 5576.0], [1.68288042E12, 72808.0], [1.68288054E12, 12393.0], [1.68288036E12, 26197.0], [1.6828806E12, 12959.0], [1.68288048E12, 136340.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.6828803E12, 5163.0], [1.68288042E12, 11138.0], [1.68288054E12, 8491.600000000008], [1.68288036E12, 9451.0], [1.6828806E12, 7357.5], [1.68288048E12, 8857.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.6828803E12, 5562.8], [1.68288042E12, 72790.0], [1.68288054E12, 11403.57], [1.68288036E12, 24980.65], [1.6828806E12, 11717.45], [1.68288048E12, 121766.4999999665]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.6828803E12, 5471.5], [1.68288042E12, 25046.0], [1.68288054E12, 9931.85], [1.68288036E12, 14275.0], [1.6828806E12, 9406.25], [1.68288048E12, 10394.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.6828803E12, 1197.0], [1.68288042E12, 24.0], [1.68288054E12, 7.0], [1.68288036E12, 1050.0], [1.6828806E12, 1049.0], [1.68288048E12, 33.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.6828803E12, 3227.0], [1.68288042E12, 6675.0], [1.68288054E12, 2931.5], [1.68288036E12, 5626.0], [1.6828806E12, 4499.0], [1.68288048E12, 5713.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6828806E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 39.0, "minX": 1.0, "maxY": 105684.5, "series": [{"data": [[2.0, 3406.0], [3.0, 1971.0], [4.0, 3871.0], [5.0, 3388.0], [6.0, 7851.0], [7.0, 5764.5], [9.0, 2072.0], [10.0, 4329.0], [11.0, 5928.5], [12.0, 3353.0], [13.0, 8879.0], [14.0, 6673.0], [16.0, 4900.0], [17.0, 7363.0], [19.0, 2625.5], [20.0, 7973.5], [21.0, 2487.0], [24.0, 5909.5], [25.0, 5684.0], [26.0, 2831.0], [27.0, 5724.0], [28.0, 6804.5], [29.0, 1697.0], [30.0, 2280.5], [42.0, 3017.0], [45.0, 4760.0], [49.0, 4855.0], [50.0, 5361.5], [51.0, 1132.0], [53.0, 2000.0], [56.0, 2103.5], [57.0, 6917.0], [59.0, 1832.5], [61.0, 6180.0], [60.0, 2128.0], [63.0, 6030.5], [62.0, 2289.0], [67.0, 1142.0], [65.0, 3213.0], [64.0, 2276.0], [66.0, 1166.0], [68.0, 1411.5], [69.0, 53.0], [72.0, 2528.0], [75.0, 2152.0], [73.0, 1161.0], [77.0, 4912.5], [76.0, 2918.0], [79.0, 2731.0], [82.0, 1830.5], [81.0, 2570.0], [83.0, 39.0], [85.0, 12854.0], [87.0, 1983.5], [92.0, 8187.5], [93.0, 2271.0], [96.0, 4972.5], [99.0, 1123.0], [102.0, 3980.5], [100.0, 2299.0], [105.0, 2505.0], [106.0, 4498.0], [111.0, 2717.0], [113.0, 2136.0], [114.0, 3702.5], [116.0, 8380.0], [117.0, 6722.0], [120.0, 3385.5], [123.0, 2115.0], [124.0, 7760.0], [127.0, 4715.5], [126.0, 5766.0], [132.0, 3551.0], [130.0, 3781.0], [131.0, 3686.0], [134.0, 3517.0], [135.0, 6705.0], [138.0, 2826.0], [151.0, 5223.0], [144.0, 3127.5], [146.0, 3281.0], [148.0, 1389.0], [154.0, 54.0], [157.0, 6585.0], [162.0, 5292.5], [161.0, 5974.0], [163.0, 6064.0], [172.0, 4871.5], [175.0, 6027.0], [170.0, 3177.5], [173.0, 5117.0], [181.0, 397.0], [177.0, 5884.5], [191.0, 6157.0], [186.0, 8944.5], [189.0, 2914.0], [190.0, 6759.5], [192.0, 5614.0], [193.0, 3149.0], [211.0, 5295.0], [210.0, 4562.0], [226.0, 8031.5], [229.0, 5773.0], [231.0, 3830.0], [228.0, 8533.5], [237.0, 6409.0], [245.0, 8848.0], [249.0, 3759.0], [262.0, 9594.0], [261.0, 7360.0], [282.0, 7932.0], [288.0, 7290.0], [301.0, 7063.0], [289.0, 7248.0], [298.0, 6917.0], [332.0, 9651.5], [341.0, 7100.0], [353.0, 6907.0], [376.0, 9239.0], [383.0, 2948.0], [395.0, 6842.0], [1.0, 1058.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[1.0, 103643.0], [2.0, 105684.5]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 395.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 12854.0, "series": [{"data": [[2.0, 3406.0], [3.0, 1971.0], [4.0, 3871.0], [5.0, 3388.0], [6.0, 7851.0], [7.0, 5764.5], [9.0, 2072.0], [10.0, 4329.0], [11.0, 5928.5], [12.0, 3353.0], [13.0, 8879.0], [14.0, 6673.0], [16.0, 4900.0], [17.0, 7363.0], [19.0, 2625.5], [20.0, 7973.5], [21.0, 2487.0], [24.0, 5909.0], [25.0, 5684.0], [26.0, 2831.0], [27.0, 5724.0], [28.0, 6804.5], [29.0, 1697.0], [30.0, 2280.5], [42.0, 3017.0], [45.0, 4760.0], [49.0, 4855.0], [50.0, 5361.5], [51.0, 1132.0], [53.0, 2000.0], [56.0, 2103.5], [57.0, 6917.0], [59.0, 1832.5], [61.0, 6180.0], [60.0, 2128.0], [63.0, 6030.5], [62.0, 2289.0], [67.0, 1142.0], [65.0, 3213.0], [64.0, 2276.0], [66.0, 1166.0], [68.0, 1411.5], [69.0, 53.0], [72.0, 2528.0], [75.0, 2152.0], [73.0, 1161.0], [77.0, 4912.5], [76.0, 2918.0], [79.0, 2731.0], [82.0, 1830.5], [81.0, 2570.0], [83.0, 39.0], [85.0, 12854.0], [87.0, 1983.5], [92.0, 8187.5], [93.0, 2271.0], [96.0, 4972.5], [99.0, 1123.0], [102.0, 3980.5], [100.0, 2299.0], [105.0, 2505.0], [106.0, 4498.0], [111.0, 2717.0], [113.0, 2136.0], [114.0, 3702.5], [116.0, 8380.0], [117.0, 6722.0], [120.0, 3385.5], [123.0, 2115.0], [124.0, 7760.0], [127.0, 4715.5], [126.0, 5766.0], [132.0, 3551.0], [130.0, 3781.0], [131.0, 3686.0], [134.0, 3517.0], [135.0, 6705.0], [138.0, 2826.0], [151.0, 5223.0], [144.0, 3127.5], [146.0, 3281.0], [148.0, 1389.0], [154.0, 54.0], [157.0, 6585.0], [162.0, 5292.5], [161.0, 5974.0], [163.0, 6064.0], [172.0, 4871.5], [175.0, 6027.0], [170.0, 3177.5], [173.0, 5117.0], [181.0, 397.0], [177.0, 5884.5], [191.0, 6157.0], [186.0, 8944.5], [189.0, 2914.0], [190.0, 6759.5], [192.0, 5614.0], [193.0, 3149.0], [211.0, 5295.0], [210.0, 4562.0], [226.0, 8031.5], [229.0, 5773.0], [231.0, 3830.0], [228.0, 8533.5], [237.0, 6409.0], [245.0, 8848.0], [249.0, 3759.0], [262.0, 9594.0], [261.0, 7360.0], [282.0, 7932.0], [288.0, 7290.0], [301.0, 7063.0], [289.0, 7248.0], [298.0, 6917.0], [332.0, 9651.5], [341.0, 7100.0], [353.0, 6907.0], [376.0, 9239.0], [383.0, 2948.0], [395.0, 6842.0], [1.0, 1058.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[1.0, 0.0], [2.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 395.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 16.75, "minX": 1.6828803E12, "maxY": 77.05, "series": [{"data": [[1.6828803E12, 16.75], [1.68288042E12, 77.05], [1.68288054E12, 59.18333333333333], [1.68288036E12, 54.71666666666667], [1.6828806E12, 56.95], [1.68288048E12, 70.35]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6828806E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.05, "minX": 1.6828803E12, "maxY": 73.48333333333333, "series": [{"data": [[1.6828803E12, 6.816666666666666], [1.68288042E12, 72.48333333333333], [1.68288054E12, 64.03333333333333], [1.68288036E12, 58.9], [1.6828806E12, 59.233333333333334], [1.68288048E12, 73.48333333333333]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.68288048E12, 0.05]], "isOverall": false, "label": "Non HTTP response code: java.net.SocketException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6828806E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.05, "minX": 1.6828803E12, "maxY": 73.48333333333333, "series": [{"data": [[1.6828803E12, 6.816666666666666], [1.68288042E12, 72.48333333333333], [1.68288054E12, 64.03333333333333], [1.68288036E12, 58.9], [1.6828806E12, 59.233333333333334], [1.68288048E12, 73.48333333333333]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.68288048E12, 0.05]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6828806E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.05, "minX": 1.6828803E12, "maxY": 73.48333333333333, "series": [{"data": [[1.6828803E12, 6.816666666666666], [1.68288042E12, 72.48333333333333], [1.68288054E12, 64.03333333333333], [1.68288036E12, 58.9], [1.6828806E12, 59.233333333333334], [1.68288048E12, 73.48333333333333]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.68288048E12, 0.05]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6828806E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

