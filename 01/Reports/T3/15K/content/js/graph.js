/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 3.0, "minX": 0.0, "maxY": 230933.0, "series": [{"data": [[0.0, 3.0], [0.1, 4.0], [0.2, 5.0], [0.3, 5.0], [0.4, 5.0], [0.5, 5.0], [0.6, 5.0], [0.7, 5.0], [0.8, 6.0], [0.9, 6.0], [1.0, 6.0], [1.1, 6.0], [1.2, 7.0], [1.3, 7.0], [1.4, 8.0], [1.5, 8.0], [1.6, 9.0], [1.7, 9.0], [1.8, 10.0], [1.9, 10.0], [2.0, 10.0], [2.1, 11.0], [2.2, 11.0], [2.3, 11.0], [2.4, 12.0], [2.5, 12.0], [2.6, 13.0], [2.7, 13.0], [2.8, 14.0], [2.9, 14.0], [3.0, 14.0], [3.1, 15.0], [3.2, 15.0], [3.3, 16.0], [3.4, 16.0], [3.5, 17.0], [3.6, 18.0], [3.7, 18.0], [3.8, 19.0], [3.9, 20.0], [4.0, 20.0], [4.1, 21.0], [4.2, 21.0], [4.3, 22.0], [4.4, 22.0], [4.5, 23.0], [4.6, 23.0], [4.7, 24.0], [4.8, 24.0], [4.9, 25.0], [5.0, 26.0], [5.1, 26.0], [5.2, 27.0], [5.3, 28.0], [5.4, 28.0], [5.5, 29.0], [5.6, 29.0], [5.7, 30.0], [5.8, 31.0], [5.9, 32.0], [6.0, 32.0], [6.1, 33.0], [6.2, 34.0], [6.3, 34.0], [6.4, 35.0], [6.5, 35.0], [6.6, 36.0], [6.7, 37.0], [6.8, 38.0], [6.9, 38.0], [7.0, 39.0], [7.1, 40.0], [7.2, 41.0], [7.3, 41.0], [7.4, 42.0], [7.5, 43.0], [7.6, 43.0], [7.7, 44.0], [7.8, 44.0], [7.9, 45.0], [8.0, 46.0], [8.1, 46.0], [8.2, 47.0], [8.3, 48.0], [8.4, 49.0], [8.5, 50.0], [8.6, 50.0], [8.7, 51.0], [8.8, 52.0], [8.9, 53.0], [9.0, 53.0], [9.1, 54.0], [9.2, 55.0], [9.3, 55.0], [9.4, 57.0], [9.5, 57.0], [9.6, 58.0], [9.7, 59.0], [9.8, 60.0], [9.9, 61.0], [10.0, 62.0], [10.1, 63.0], [10.2, 63.0], [10.3, 64.0], [10.4, 65.0], [10.5, 66.0], [10.6, 67.0], [10.7, 67.0], [10.8, 68.0], [10.9, 68.0], [11.0, 69.0], [11.1, 70.0], [11.2, 70.0], [11.3, 71.0], [11.4, 71.0], [11.5, 72.0], [11.6, 72.0], [11.7, 73.0], [11.8, 74.0], [11.9, 74.0], [12.0, 76.0], [12.1, 76.0], [12.2, 77.0], [12.3, 77.0], [12.4, 78.0], [12.5, 79.0], [12.6, 79.0], [12.7, 80.0], [12.8, 80.0], [12.9, 81.0], [13.0, 82.0], [13.1, 83.0], [13.2, 84.0], [13.3, 84.0], [13.4, 85.0], [13.5, 85.0], [13.6, 86.0], [13.7, 86.0], [13.8, 87.0], [13.9, 87.0], [14.0, 88.0], [14.1, 88.0], [14.2, 89.0], [14.3, 89.0], [14.4, 90.0], [14.5, 90.0], [14.6, 91.0], [14.7, 91.0], [14.8, 92.0], [14.9, 92.0], [15.0, 93.0], [15.1, 93.0], [15.2, 94.0], [15.3, 94.0], [15.4, 94.0], [15.5, 95.0], [15.6, 95.0], [15.7, 96.0], [15.8, 97.0], [15.9, 97.0], [16.0, 98.0], [16.1, 98.0], [16.2, 99.0], [16.3, 100.0], [16.4, 100.0], [16.5, 101.0], [16.6, 101.0], [16.7, 102.0], [16.8, 102.0], [16.9, 103.0], [17.0, 103.0], [17.1, 104.0], [17.2, 104.0], [17.3, 105.0], [17.4, 105.0], [17.5, 106.0], [17.6, 106.0], [17.7, 107.0], [17.8, 107.0], [17.9, 108.0], [18.0, 109.0], [18.1, 109.0], [18.2, 110.0], [18.3, 111.0], [18.4, 111.0], [18.5, 112.0], [18.6, 112.0], [18.7, 113.0], [18.8, 114.0], [18.9, 115.0], [19.0, 115.0], [19.1, 116.0], [19.2, 117.0], [19.3, 118.0], [19.4, 118.0], [19.5, 119.0], [19.6, 120.0], [19.7, 120.0], [19.8, 121.0], [19.9, 122.0], [20.0, 123.0], [20.1, 124.0], [20.2, 124.0], [20.3, 125.0], [20.4, 125.0], [20.5, 126.0], [20.6, 127.0], [20.7, 127.0], [20.8, 128.0], [20.9, 128.0], [21.0, 128.0], [21.1, 129.0], [21.2, 129.0], [21.3, 130.0], [21.4, 130.0], [21.5, 130.0], [21.6, 131.0], [21.7, 132.0], [21.8, 133.0], [21.9, 133.0], [22.0, 134.0], [22.1, 135.0], [22.2, 135.0], [22.3, 136.0], [22.4, 137.0], [22.5, 137.0], [22.6, 137.0], [22.7, 138.0], [22.8, 139.0], [22.9, 139.0], [23.0, 140.0], [23.1, 141.0], [23.2, 142.0], [23.3, 142.0], [23.4, 143.0], [23.5, 144.0], [23.6, 145.0], [23.7, 146.0], [23.8, 146.0], [23.9, 147.0], [24.0, 147.0], [24.1, 148.0], [24.2, 148.0], [24.3, 149.0], [24.4, 149.0], [24.5, 150.0], [24.6, 150.0], [24.7, 151.0], [24.8, 152.0], [24.9, 152.0], [25.0, 153.0], [25.1, 153.0], [25.2, 154.0], [25.3, 155.0], [25.4, 155.0], [25.5, 156.0], [25.6, 156.0], [25.7, 156.0], [25.8, 157.0], [25.9, 157.0], [26.0, 158.0], [26.1, 158.0], [26.2, 159.0], [26.3, 159.0], [26.4, 160.0], [26.5, 160.0], [26.6, 160.0], [26.7, 161.0], [26.8, 161.0], [26.9, 162.0], [27.0, 162.0], [27.1, 163.0], [27.2, 164.0], [27.3, 165.0], [27.4, 165.0], [27.5, 166.0], [27.6, 167.0], [27.7, 167.0], [27.8, 168.0], [27.9, 169.0], [28.0, 169.0], [28.1, 170.0], [28.2, 170.0], [28.3, 171.0], [28.4, 172.0], [28.5, 172.0], [28.6, 173.0], [28.7, 174.0], [28.8, 174.0], [28.9, 175.0], [29.0, 176.0], [29.1, 176.0], [29.2, 177.0], [29.3, 177.0], [29.4, 178.0], [29.5, 179.0], [29.6, 180.0], [29.7, 181.0], [29.8, 182.0], [29.9, 183.0], [30.0, 184.0], [30.1, 185.0], [30.2, 185.0], [30.3, 186.0], [30.4, 187.0], [30.5, 188.0], [30.6, 189.0], [30.7, 189.0], [30.8, 190.0], [30.9, 190.0], [31.0, 191.0], [31.1, 192.0], [31.2, 193.0], [31.3, 194.0], [31.4, 195.0], [31.5, 196.0], [31.6, 197.0], [31.7, 198.0], [31.8, 199.0], [31.9, 200.0], [32.0, 200.0], [32.1, 201.0], [32.2, 202.0], [32.3, 203.0], [32.4, 205.0], [32.5, 207.0], [32.6, 208.0], [32.7, 209.0], [32.8, 209.0], [32.9, 210.0], [33.0, 210.0], [33.1, 211.0], [33.2, 211.0], [33.3, 212.0], [33.4, 212.0], [33.5, 213.0], [33.6, 213.0], [33.7, 213.0], [33.8, 214.0], [33.9, 214.0], [34.0, 215.0], [34.1, 215.0], [34.2, 215.0], [34.3, 216.0], [34.4, 216.0], [34.5, 217.0], [34.6, 217.0], [34.7, 217.0], [34.8, 218.0], [34.9, 218.0], [35.0, 219.0], [35.1, 220.0], [35.2, 220.0], [35.3, 221.0], [35.4, 222.0], [35.5, 222.0], [35.6, 223.0], [35.7, 223.0], [35.8, 224.0], [35.9, 224.0], [36.0, 225.0], [36.1, 225.0], [36.2, 226.0], [36.3, 226.0], [36.4, 227.0], [36.5, 227.0], [36.6, 228.0], [36.7, 229.0], [36.8, 230.0], [36.9, 230.0], [37.0, 231.0], [37.1, 231.0], [37.2, 232.0], [37.3, 232.0], [37.4, 233.0], [37.5, 233.0], [37.6, 233.0], [37.7, 234.0], [37.8, 234.0], [37.9, 234.0], [38.0, 234.0], [38.1, 235.0], [38.2, 235.0], [38.3, 235.0], [38.4, 236.0], [38.5, 236.0], [38.6, 237.0], [38.7, 237.0], [38.8, 238.0], [38.9, 239.0], [39.0, 240.0], [39.1, 240.0], [39.2, 241.0], [39.3, 242.0], [39.4, 243.0], [39.5, 244.0], [39.6, 244.0], [39.7, 245.0], [39.8, 245.0], [39.9, 245.0], [40.0, 246.0], [40.1, 246.0], [40.2, 246.0], [40.3, 246.0], [40.4, 247.0], [40.5, 247.0], [40.6, 247.0], [40.7, 247.0], [40.8, 248.0], [40.9, 248.0], [41.0, 248.0], [41.1, 248.0], [41.2, 248.0], [41.3, 249.0], [41.4, 249.0], [41.5, 249.0], [41.6, 249.0], [41.7, 249.0], [41.8, 250.0], [41.9, 250.0], [42.0, 250.0], [42.1, 251.0], [42.2, 251.0], [42.3, 251.0], [42.4, 252.0], [42.5, 252.0], [42.6, 253.0], [42.7, 253.0], [42.8, 254.0], [42.9, 254.0], [43.0, 254.0], [43.1, 255.0], [43.2, 255.0], [43.3, 255.0], [43.4, 256.0], [43.5, 256.0], [43.6, 256.0], [43.7, 256.0], [43.8, 257.0], [43.9, 257.0], [44.0, 257.0], [44.1, 257.0], [44.2, 257.0], [44.3, 258.0], [44.4, 258.0], [44.5, 258.0], [44.6, 258.0], [44.7, 259.0], [44.8, 259.0], [44.9, 259.0], [45.0, 260.0], [45.1, 260.0], [45.2, 260.0], [45.3, 261.0], [45.4, 261.0], [45.5, 261.0], [45.6, 261.0], [45.7, 261.0], [45.8, 262.0], [45.9, 262.0], [46.0, 262.0], [46.1, 262.0], [46.2, 263.0], [46.3, 263.0], [46.4, 263.0], [46.5, 263.0], [46.6, 263.0], [46.7, 264.0], [46.8, 264.0], [46.9, 264.0], [47.0, 264.0], [47.1, 264.0], [47.2, 265.0], [47.3, 265.0], [47.4, 265.0], [47.5, 265.0], [47.6, 265.0], [47.7, 266.0], [47.8, 266.0], [47.9, 266.0], [48.0, 267.0], [48.1, 267.0], [48.2, 267.0], [48.3, 267.0], [48.4, 268.0], [48.5, 268.0], [48.6, 269.0], [48.7, 269.0], [48.8, 269.0], [48.9, 270.0], [49.0, 270.0], [49.1, 270.0], [49.2, 271.0], [49.3, 271.0], [49.4, 271.0], [49.5, 271.0], [49.6, 271.0], [49.7, 271.0], [49.8, 272.0], [49.9, 272.0], [50.0, 272.0], [50.1, 272.0], [50.2, 272.0], [50.3, 272.0], [50.4, 273.0], [50.5, 273.0], [50.6, 273.0], [50.7, 273.0], [50.8, 273.0], [50.9, 273.0], [51.0, 273.0], [51.1, 274.0], [51.2, 274.0], [51.3, 274.0], [51.4, 274.0], [51.5, 274.0], [51.6, 274.0], [51.7, 274.0], [51.8, 275.0], [51.9, 275.0], [52.0, 275.0], [52.1, 275.0], [52.2, 275.0], [52.3, 275.0], [52.4, 275.0], [52.5, 275.0], [52.6, 276.0], [52.7, 276.0], [52.8, 276.0], [52.9, 276.0], [53.0, 276.0], [53.1, 276.0], [53.2, 276.0], [53.3, 277.0], [53.4, 277.0], [53.5, 277.0], [53.6, 277.0], [53.7, 277.0], [53.8, 277.0], [53.9, 278.0], [54.0, 278.0], [54.1, 278.0], [54.2, 278.0], [54.3, 278.0], [54.4, 278.0], [54.5, 279.0], [54.6, 279.0], [54.7, 279.0], [54.8, 279.0], [54.9, 279.0], [55.0, 279.0], [55.1, 279.0], [55.2, 280.0], [55.3, 280.0], [55.4, 280.0], [55.5, 280.0], [55.6, 280.0], [55.7, 280.0], [55.8, 281.0], [55.9, 281.0], [56.0, 281.0], [56.1, 281.0], [56.2, 282.0], [56.3, 282.0], [56.4, 282.0], [56.5, 282.0], [56.6, 282.0], [56.7, 282.0], [56.8, 283.0], [56.9, 283.0], [57.0, 283.0], [57.1, 283.0], [57.2, 283.0], [57.3, 283.0], [57.4, 284.0], [57.5, 284.0], [57.6, 284.0], [57.7, 284.0], [57.8, 284.0], [57.9, 284.0], [58.0, 285.0], [58.1, 285.0], [58.2, 285.0], [58.3, 285.0], [58.4, 285.0], [58.5, 285.0], [58.6, 286.0], [58.7, 286.0], [58.8, 286.0], [58.9, 286.0], [59.0, 286.0], [59.1, 286.0], [59.2, 286.0], [59.3, 287.0], [59.4, 287.0], [59.5, 287.0], [59.6, 287.0], [59.7, 287.0], [59.8, 287.0], [59.9, 288.0], [60.0, 288.0], [60.1, 288.0], [60.2, 288.0], [60.3, 288.0], [60.4, 288.0], [60.5, 289.0], [60.6, 289.0], [60.7, 289.0], [60.8, 289.0], [60.9, 289.0], [61.0, 290.0], [61.1, 290.0], [61.2, 290.0], [61.3, 290.0], [61.4, 290.0], [61.5, 291.0], [61.6, 291.0], [61.7, 291.0], [61.8, 291.0], [61.9, 292.0], [62.0, 292.0], [62.1, 292.0], [62.2, 292.0], [62.3, 293.0], [62.4, 293.0], [62.5, 293.0], [62.6, 294.0], [62.7, 294.0], [62.8, 295.0], [62.9, 295.0], [63.0, 296.0], [63.1, 296.0], [63.2, 296.0], [63.3, 297.0], [63.4, 297.0], [63.5, 297.0], [63.6, 298.0], [63.7, 298.0], [63.8, 298.0], [63.9, 299.0], [64.0, 299.0], [64.1, 299.0], [64.2, 300.0], [64.3, 301.0], [64.4, 302.0], [64.5, 303.0], [64.6, 304.0], [64.7, 305.0], [64.8, 306.0], [64.9, 306.0], [65.0, 307.0], [65.1, 307.0], [65.2, 307.0], [65.3, 308.0], [65.4, 308.0], [65.5, 308.0], [65.6, 309.0], [65.7, 309.0], [65.8, 310.0], [65.9, 310.0], [66.0, 310.0], [66.1, 311.0], [66.2, 311.0], [66.3, 311.0], [66.4, 311.0], [66.5, 312.0], [66.6, 312.0], [66.7, 312.0], [66.8, 313.0], [66.9, 313.0], [67.0, 314.0], [67.1, 314.0], [67.2, 314.0], [67.3, 315.0], [67.4, 316.0], [67.5, 316.0], [67.6, 317.0], [67.7, 317.0], [67.8, 317.0], [67.9, 318.0], [68.0, 318.0], [68.1, 319.0], [68.2, 319.0], [68.3, 320.0], [68.4, 320.0], [68.5, 321.0], [68.6, 322.0], [68.7, 325.0], [68.8, 331.0], [68.9, 332.0], [69.0, 334.0], [69.1, 334.0], [69.2, 335.0], [69.3, 335.0], [69.4, 336.0], [69.5, 336.0], [69.6, 337.0], [69.7, 337.0], [69.8, 338.0], [69.9, 339.0], [70.0, 340.0], [70.1, 341.0], [70.2, 344.0], [70.3, 347.0], [70.4, 348.0], [70.5, 350.0], [70.6, 352.0], [70.7, 353.0], [70.8, 355.0], [70.9, 367.0], [71.0, 372.0], [71.1, 373.0], [71.2, 373.0], [71.3, 374.0], [71.4, 375.0], [71.5, 377.0], [71.6, 379.0], [71.7, 380.0], [71.8, 382.0], [71.9, 385.0], [72.0, 385.0], [72.1, 386.0], [72.2, 386.0], [72.3, 386.0], [72.4, 386.0], [72.5, 387.0], [72.6, 387.0], [72.7, 388.0], [72.8, 388.0], [72.9, 390.0], [73.0, 392.0], [73.1, 398.0], [73.2, 401.0], [73.3, 402.0], [73.4, 403.0], [73.5, 404.0], [73.6, 405.0], [73.7, 407.0], [73.8, 415.0], [73.9, 416.0], [74.0, 420.0], [74.1, 422.0], [74.2, 423.0], [74.3, 424.0], [74.4, 426.0], [74.5, 431.0], [74.6, 435.0], [74.7, 436.0], [74.8, 436.0], [74.9, 437.0], [75.0, 439.0], [75.1, 440.0], [75.2, 443.0], [75.3, 446.0], [75.4, 449.0], [75.5, 450.0], [75.6, 453.0], [75.7, 455.0], [75.8, 458.0], [75.9, 459.0], [76.0, 460.0], [76.1, 461.0], [76.2, 461.0], [76.3, 462.0], [76.4, 467.0], [76.5, 470.0], [76.6, 472.0], [76.7, 473.0], [76.8, 474.0], [76.9, 476.0], [77.0, 477.0], [77.1, 478.0], [77.2, 479.0], [77.3, 481.0], [77.4, 481.0], [77.5, 482.0], [77.6, 485.0], [77.7, 486.0], [77.8, 487.0], [77.9, 488.0], [78.0, 492.0], [78.1, 494.0], [78.2, 499.0], [78.3, 502.0], [78.4, 503.0], [78.5, 503.0], [78.6, 504.0], [78.7, 504.0], [78.8, 506.0], [78.9, 508.0], [79.0, 509.0], [79.1, 510.0], [79.2, 515.0], [79.3, 516.0], [79.4, 517.0], [79.5, 519.0], [79.6, 522.0], [79.7, 525.0], [79.8, 528.0], [79.9, 537.0], [80.0, 540.0], [80.1, 542.0], [80.2, 543.0], [80.3, 544.0], [80.4, 546.0], [80.5, 549.0], [80.6, 551.0], [80.7, 552.0], [80.8, 553.0], [80.9, 554.0], [81.0, 555.0], [81.1, 557.0], [81.2, 578.0], [81.3, 594.0], [81.4, 596.0], [81.5, 597.0], [81.6, 598.0], [81.7, 607.0], [81.8, 623.0], [81.9, 626.0], [82.0, 627.0], [82.1, 630.0], [82.2, 632.0], [82.3, 633.0], [82.4, 634.0], [82.5, 648.0], [82.6, 649.0], [82.7, 650.0], [82.8, 687.0], [82.9, 688.0], [83.0, 690.0], [83.1, 729.0], [83.2, 734.0], [83.3, 735.0], [83.4, 737.0], [83.5, 741.0], [83.6, 742.0], [83.7, 744.0], [83.8, 828.0], [83.9, 847.0], [84.0, 849.0], [84.1, 852.0], [84.2, 1016.0], [84.3, 1213.0], [84.4, 1319.0], [84.5, 1445.0], [84.6, 1584.0], [84.7, 1844.0], [84.8, 1886.0], [84.9, 2148.0], [85.0, 2262.0], [85.1, 2487.0], [85.2, 2643.0], [85.3, 2940.0], [85.4, 3119.0], [85.5, 3453.0], [85.6, 3921.0], [85.7, 4127.0], [85.8, 4389.0], [85.9, 4561.0], [86.0, 5181.0], [86.1, 5512.0], [86.2, 5860.0], [86.3, 6174.0], [86.4, 6427.0], [86.5, 6779.0], [86.6, 6908.0], [86.7, 6934.0], [86.8, 7083.0], [86.9, 7158.0], [87.0, 7277.0], [87.1, 7335.0], [87.2, 7350.0], [87.3, 7381.0], [87.4, 7443.0], [87.5, 7682.0], [87.6, 7964.0], [87.7, 8231.0], [87.8, 8289.0], [87.9, 8304.0], [88.0, 8379.0], [88.1, 8406.0], [88.2, 8472.0], [88.3, 8478.0], [88.4, 8559.0], [88.5, 8624.0], [88.6, 8627.0], [88.7, 8644.0], [88.8, 8660.0], [88.9, 8724.0], [89.0, 8808.0], [89.1, 8906.0], [89.2, 8914.0], [89.3, 8964.0], [89.4, 8988.0], [89.5, 9018.0], [89.6, 9107.0], [89.7, 9140.0], [89.8, 9188.0], [89.9, 9260.0], [90.0, 9278.0], [90.1, 9310.0], [90.2, 9333.0], [90.3, 9497.0], [90.4, 9555.0], [90.5, 9688.0], [90.6, 9774.0], [90.7, 9808.0], [90.8, 9969.0], [90.9, 10011.0], [91.0, 10062.0], [91.1, 10068.0], [91.2, 10070.0], [91.3, 10079.0], [91.4, 10104.0], [91.5, 10137.0], [91.6, 10151.0], [91.7, 10165.0], [91.8, 10180.0], [91.9, 10212.0], [92.0, 10259.0], [92.1, 10276.0], [92.2, 10362.0], [92.3, 10462.0], [92.4, 10493.0], [92.5, 10682.0], [92.6, 10704.0], [92.7, 10743.0], [92.8, 10914.0], [92.9, 10961.0], [93.0, 10999.0], [93.1, 11109.0], [93.2, 11398.0], [93.3, 11432.0], [93.4, 11458.0], [93.5, 11683.0], [93.6, 12107.0], [93.7, 12212.0], [93.8, 12642.0], [93.9, 12836.0], [94.0, 13142.0], [94.1, 13340.0], [94.2, 13854.0], [94.3, 14061.0], [94.4, 14329.0], [94.5, 14573.0], [94.6, 14789.0], [94.7, 15156.0], [94.8, 15376.0], [94.9, 15432.0], [95.0, 15834.0], [95.1, 16224.0], [95.2, 16631.0], [95.3, 17365.0], [95.4, 18064.0], [95.5, 19446.0], [95.6, 20266.0], [95.7, 20952.0], [95.8, 21188.0], [95.9, 22899.0], [96.0, 23595.0], [96.1, 25658.0], [96.2, 27239.0], [96.3, 28745.0], [96.4, 30482.0], [96.5, 31672.0], [96.6, 32334.0], [96.7, 33162.0], [96.8, 33387.0], [96.9, 33804.0], [97.0, 36733.0], [97.1, 37907.0], [97.2, 40243.0], [97.3, 41439.0], [97.4, 43264.0], [97.5, 44420.0], [97.6, 45867.0], [97.7, 48192.0], [97.8, 49615.0], [97.9, 54844.0], [98.0, 63281.0], [98.1, 65129.0], [98.2, 67411.0], [98.3, 71665.0], [98.4, 73179.0], [98.5, 74982.0], [98.6, 79313.0], [98.7, 94808.0], [98.8, 100044.0], [98.9, 100083.0], [99.0, 100105.0], [99.1, 100143.0], [99.2, 100232.0], [99.3, 100318.0], [99.4, 100445.0], [99.5, 128270.0], [99.6, 130098.0], [99.7, 130489.0], [99.8, 130674.0], [99.9, 145110.0], [100.0, 230933.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 48620.0, "series": [{"data": [[0.0, 24488.0], [66700.0, 1.0], [73100.0, 107.0], [79500.0, 4.0], [85900.0, 2.0], [82700.0, 1.0], [89100.0, 4.0], [92300.0, 2.0], [95500.0, 1.0], [101900.0, 1.0], [121100.0, 5.0], [130700.0, 11.0], [137000.0, 4.0], [194600.0, 2.0], [207400.0, 1.0], [100.0, 23404.0], [34500.0, 1.0], [32900.0, 2.0], [36100.0, 1.0], [37700.0, 26.0], [39300.0, 5.0], [40900.0, 2.0], [42500.0, 5.0], [44100.0, 13.0], [45700.0, 4.0], [50500.0, 2.0], [200.0, 48620.0], [211500.0, 56.0], [53700.0, 2.0], [55300.0, 2.0], [58500.0, 3.0], [63300.0, 3.0], [64900.0, 2.0], [69000.0, 2.0], [65800.0, 9.0], [72200.0, 4.0], [300.0, 13593.0], [75400.0, 1.0], [78600.0, 10.0], [81800.0, 2.0], [91400.0, 2.0], [97800.0, 3.0], [101000.0, 1.0], [400.0, 7622.0], [500.0, 5238.0], [129800.0, 3.0], [600.0, 2081.0], [700.0, 1082.0], [800.0, 587.0], [900.0, 16.0], [1000.0, 67.0], [1100.0, 99.0], [1200.0, 139.0], [1300.0, 118.0], [1400.0, 99.0], [1500.0, 108.0], [1600.0, 33.0], [1700.0, 37.0], [1800.0, 246.0], [1900.0, 85.0], [2000.0, 39.0], [2100.0, 69.0], [2200.0, 94.0], [2300.0, 34.0], [2400.0, 132.0], [2500.0, 54.0], [2600.0, 80.0], [2800.0, 66.0], [2700.0, 73.0], [2900.0, 21.0], [3000.0, 41.0], [3100.0, 146.0], [3200.0, 60.0], [3300.0, 16.0], [3400.0, 79.0], [3500.0, 34.0], [3600.0, 33.0], [3700.0, 9.0], [3800.0, 17.0], [3900.0, 25.0], [4000.0, 71.0], [4200.0, 58.0], [4400.0, 111.0], [4600.0, 20.0], [4800.0, 10.0], [5000.0, 27.0], [5200.0, 58.0], [84100.0, 1.0], [5600.0, 17.0], [5400.0, 39.0], [87300.0, 1.0], [5800.0, 37.0], [93700.0, 1.0], [6000.0, 16.0], [6200.0, 45.0], [100100.0, 340.0], [6400.0, 67.0], [6600.0, 33.0], [6800.0, 108.0], [7000.0, 138.0], [7200.0, 195.0], [7400.0, 191.0], [7600.0, 81.0], [7800.0, 15.0], [8000.0, 47.0], [8400.0, 446.0], [9200.0, 369.0], [8800.0, 93.0], [9600.0, 60.0], [10000.0, 773.0], [10400.0, 356.0], [10800.0, 29.0], [11600.0, 45.0], [12000.0, 18.0], [12400.0, 1.0], [13200.0, 78.0], [12800.0, 75.0], [13600.0, 21.0], [14000.0, 150.0], [14400.0, 57.0], [14800.0, 42.0], [15200.0, 20.0], [15600.0, 63.0], [16000.0, 54.0], [16800.0, 5.0], [18400.0, 5.0], [19200.0, 25.0], [20000.0, 18.0], [20800.0, 2.0], [21600.0, 11.0], [23200.0, 4.0], [24000.0, 1.0], [26400.0, 1.0], [25600.0, 9.0], [27200.0, 95.0], [28000.0, 1.0], [28800.0, 24.0], [29600.0, 2.0], [30400.0, 4.0], [31200.0, 1.0], [33600.0, 15.0], [35200.0, 12.0], [36800.0, 1.0], [38400.0, 2.0], [40000.0, 8.0], [41600.0, 11.0], [44800.0, 2.0], [43200.0, 27.0], [48000.0, 20.0], [49600.0, 12.0], [51200.0, 5.0], [52800.0, 2.0], [54400.0, 1.0], [59200.0, 1.0], [60800.0, 2.0], [62400.0, 2.0], [64000.0, 7.0], [67200.0, 14.0], [70400.0, 1.0], [73600.0, 18.0], [76800.0, 14.0], [80000.0, 1.0], [83200.0, 6.0], [99200.0, 1.0], [128000.0, 3.0], [67100.0, 11.0], [76700.0, 2.0], [83100.0, 1.0], [86300.0, 1.0], [99100.0, 2.0], [102300.0, 1.0], [127900.0, 8.0], [33100.0, 49.0], [37900.0, 27.0], [39500.0, 4.0], [41100.0, 37.0], [42700.0, 11.0], [44300.0, 2.0], [49100.0, 36.0], [53900.0, 7.0], [57100.0, 3.0], [55500.0, 3.0], [61900.0, 2.0], [63500.0, 7.0], [65100.0, 18.0], [69400.0, 5.0], [66200.0, 1.0], [72600.0, 2.0], [82200.0, 3.0], [88600.0, 1.0], [95000.0, 2.0], [98200.0, 1.0], [130200.0, 46.0], [138000.0, 1.0], [163600.0, 5.0], [161300.0, 1.0], [68500.0, 8.0], [71700.0, 2.0], [74900.0, 11.0], [78100.0, 59.0], [81300.0, 3.0], [84500.0, 3.0], [87700.0, 2.0], [16900.0, 8.0], [17700.0, 38.0], [18500.0, 35.0], [19300.0, 21.0], [20100.0, 73.0], [20900.0, 86.0], [21700.0, 4.0], [22500.0, 10.0], [23300.0, 5.0], [24100.0, 1.0], [24900.0, 3.0], [26500.0, 5.0], [27300.0, 17.0], [31300.0, 5.0], [32100.0, 11.0], [131100.0, 3.0], [33800.0, 25.0], [35400.0, 1.0], [38600.0, 3.0], [37000.0, 3.0], [40200.0, 17.0], [41800.0, 1.0], [43400.0, 26.0], [45000.0, 6.0], [46600.0, 27.0], [48200.0, 13.0], [49800.0, 4.0], [53000.0, 3.0], [51400.0, 1.0], [54600.0, 7.0], [57800.0, 4.0], [64200.0, 15.0], [67600.0, 2.0], [70800.0, 1.0], [77200.0, 7.0], [93200.0, 1.0], [96400.0, 2.0], [128400.0, 12.0], [67500.0, 2.0], [73900.0, 7.0], [77100.0, 3.0], [80300.0, 2.0], [83500.0, 2.0], [86700.0, 2.0], [128300.0, 45.0], [157800.0, 25.0], [164200.0, 17.0], [33300.0, 57.0], [36500.0, 10.0], [34900.0, 1.0], [38100.0, 6.0], [39700.0, 10.0], [42900.0, 1.0], [41300.0, 5.0], [44500.0, 13.0], [46100.0, 8.0], [47700.0, 5.0], [50900.0, 6.0], [49300.0, 2.0], [57300.0, 2.0], [58900.0, 1.0], [62100.0, 2.0], [63700.0, 5.0], [65300.0, 4.0], [66600.0, 35.0], [73000.0, 21.0], [69800.0, 1.0], [76200.0, 5.0], [92200.0, 1.0], [95400.0, 4.0], [130600.0, 51.0], [127400.0, 7.0], [210800.0, 2.0], [131700.0, 8.0], [68900.0, 1.0], [72100.0, 1.0], [75300.0, 1.0], [88100.0, 1.0], [91300.0, 2.0], [110500.0, 1.0], [8500.0, 179.0], [8900.0, 619.0], [9300.0, 276.0], [9700.0, 255.0], [10100.0, 710.0], [10500.0, 52.0], [10900.0, 354.0], [11300.0, 137.0], [11700.0, 66.0], [12100.0, 155.0], [12500.0, 19.0], [12900.0, 25.0], [13300.0, 100.0], [13700.0, 22.0], [14100.0, 76.0], [14500.0, 61.0], [15300.0, 85.0], [14900.0, 40.0], [15700.0, 18.0], [16100.0, 34.0], [17000.0, 3.0], [17800.0, 25.0], [19400.0, 8.0], [18600.0, 10.0], [20200.0, 73.0], [21000.0, 81.0], [21800.0, 3.0], [22600.0, 6.0], [23400.0, 44.0], [24200.0, 1.0], [25000.0, 1.0], [27400.0, 8.0], [28200.0, 9.0], [29000.0, 8.0], [29800.0, 4.0], [30600.0, 12.0], [32200.0, 4.0], [133500.0, 4.0], [34000.0, 2.0], [146300.0, 1.0], [35600.0, 2.0], [38800.0, 17.0], [37200.0, 3.0], [40400.0, 5.0], [42000.0, 2.0], [43600.0, 3.0], [45200.0, 1.0], [46800.0, 5.0], [48400.0, 58.0], [53200.0, 2.0], [51600.0, 1.0], [54800.0, 12.0], [56400.0, 3.0], [58000.0, 2.0], [61200.0, 2.0], [64400.0, 11.0], [71200.0, 2.0], [74400.0, 1.0], [77600.0, 1.0], [90400.0, 1.0], [96800.0, 3.0], [100000.0, 352.0], [128800.0, 16.0], [136000.0, 1.0], [67900.0, 2.0], [71100.0, 2.0], [74300.0, 3.0], [83900.0, 1.0], [90300.0, 2.0], [99900.0, 2.0], [103100.0, 1.0], [128700.0, 13.0], [33500.0, 15.0], [35100.0, 8.0], [36700.0, 36.0], [38300.0, 1.0], [39900.0, 4.0], [41500.0, 16.0], [43100.0, 8.0], [44700.0, 4.0], [46300.0, 21.0], [47900.0, 1.0], [51100.0, 4.0], [49500.0, 8.0], [54300.0, 15.0], [55900.0, 4.0], [59100.0, 2.0], [63900.0, 13.0], [65500.0, 2.0], [67000.0, 3.0], [70200.0, 1.0], [73400.0, 2.0], [79800.0, 2.0], [83000.0, 1.0], [95800.0, 3.0], [99000.0, 1.0], [115000.0, 16.0], [131000.0, 8.0], [133200.0, 10.0], [66100.0, 2.0], [72500.0, 4.0], [75700.0, 1.0], [82100.0, 1.0], [88500.0, 9.0], [98100.0, 2.0], [130100.0, 26.0], [211800.0, 1.0], [17100.0, 36.0], [17900.0, 10.0], [18700.0, 6.0], [19500.0, 9.0], [20300.0, 15.0], [21100.0, 17.0], [21900.0, 11.0], [23500.0, 21.0], [22700.0, 5.0], [24300.0, 8.0], [25100.0, 8.0], [25900.0, 1.0], [26700.0, 16.0], [28300.0, 4.0], [29100.0, 8.0], [30700.0, 34.0], [29900.0, 2.0], [31500.0, 4.0], [32300.0, 57.0], [132700.0, 1.0], [34200.0, 2.0], [35800.0, 18.0], [37400.0, 25.0], [39000.0, 8.0], [40600.0, 11.0], [42200.0, 1.0], [43800.0, 4.0], [48600.0, 1.0], [50200.0, 2.0], [51800.0, 6.0], [56600.0, 1.0], [59800.0, 2.0], [63000.0, 2.0], [68400.0, 12.0], [71600.0, 11.0], [81200.0, 1.0], [78000.0, 1.0], [84400.0, 1.0], [97200.0, 3.0], [100400.0, 102.0], [219300.0, 1.0], [68300.0, 52.0], [74700.0, 1.0], [81100.0, 3.0], [84300.0, 1.0], [93900.0, 2.0], [97100.0, 1.0], [100300.0, 144.0], [133800.0, 5.0], [153000.0, 2.0], [131500.0, 1.0], [33700.0, 18.0], [35300.0, 10.0], [36900.0, 9.0], [38500.0, 2.0], [163500.0, 3.0], [41700.0, 13.0], [43300.0, 3.0], [44900.0, 5.0], [48100.0, 12.0], [49700.0, 1.0], [52900.0, 2.0], [54500.0, 3.0], [60900.0, 2.0], [64100.0, 18.0], [67400.0, 4.0], [70600.0, 1.0], [73800.0, 42.0], [77000.0, 2.0], [96200.0, 2.0], [112200.0, 1.0], [128200.0, 13.0], [186800.0, 13.0], [133300.0, 54.0], [210100.0, 4.0], [4100.0, 103.0], [4300.0, 71.0], [66500.0, 11.0], [4500.0, 39.0], [69700.0, 1.0], [72900.0, 1.0], [4700.0, 18.0], [76100.0, 1.0], [5100.0, 57.0], [4900.0, 3.0], [79300.0, 3.0], [5300.0, 33.0], [82500.0, 2.0], [85700.0, 1.0], [5500.0, 101.0], [5700.0, 43.0], [5900.0, 49.0], [6100.0, 79.0], [95300.0, 1.0], [6300.0, 55.0], [101700.0, 1.0], [6500.0, 37.0], [6900.0, 219.0], [6700.0, 65.0], [7100.0, 144.0], [7300.0, 388.0], [7500.0, 22.0], [7900.0, 83.0], [7700.0, 46.0], [8100.0, 20.0], [130500.0, 97.0], [127300.0, 1.0], [8200.0, 235.0], [8600.0, 639.0], [9000.0, 191.0], [9400.0, 102.0], [10200.0, 468.0], [9800.0, 177.0], [10600.0, 58.0], [11000.0, 142.0], [11400.0, 321.0], [12200.0, 96.0], [11800.0, 14.0], [12600.0, 54.0], [13000.0, 47.0], [13800.0, 29.0], [13400.0, 16.0], [14200.0, 7.0], [14600.0, 59.0], [15000.0, 49.0], [15400.0, 161.0], [15800.0, 44.0], [16200.0, 57.0], [17200.0, 53.0], [16400.0, 26.0], [18000.0, 35.0], [18800.0, 12.0], [20400.0, 15.0], [19600.0, 2.0], [21200.0, 2.0], [22000.0, 9.0], [22800.0, 69.0], [23600.0, 5.0], [24400.0, 1.0], [25200.0, 2.0], [27600.0, 2.0], [30000.0, 67.0], [31600.0, 106.0], [32400.0, 5.0], [34400.0, 12.0], [32800.0, 12.0], [36000.0, 1.0], [37600.0, 3.0], [39200.0, 9.0], [40800.0, 4.0], [42400.0, 27.0], [44000.0, 9.0], [47200.0, 4.0], [48800.0, 2.0], [50400.0, 2.0], [52000.0, 3.0], [53600.0, 2.0], [56800.0, 4.0], [60000.0, 4.0], [63200.0, 43.0], [64800.0, 2.0], [68800.0, 11.0], [65600.0, 3.0], [72000.0, 1.0], [75200.0, 6.0], [78400.0, 6.0], [81600.0, 5.0], [84800.0, 4.0], [88000.0, 1.0], [97600.0, 1.0], [129600.0, 3.0], [131200.0, 2.0], [148100.0, 1.0], [68700.0, 1.0], [71900.0, 1.0], [81500.0, 1.0], [84700.0, 22.0], [94300.0, 1.0], [100700.0, 1.0], [35500.0, 7.0], [38700.0, 14.0], [43500.0, 50.0], [45100.0, 4.0], [46700.0, 3.0], [48300.0, 3.0], [51500.0, 1.0], [54700.0, 2.0], [61100.0, 2.0], [64300.0, 22.0], [67800.0, 2.0], [71000.0, 1.0], [77400.0, 3.0], [74200.0, 7.0], [80600.0, 3.0], [83800.0, 1.0], [99800.0, 1.0], [128600.0, 3.0], [134800.0, 3.0], [154000.0, 1.0], [230800.0, 1.0], [66900.0, 4.0], [73300.0, 7.0], [108500.0, 6.0], [162200.0, 1.0], [16500.0, 49.0], [17300.0, 21.0], [18100.0, 17.0], [18900.0, 4.0], [20500.0, 16.0], [21300.0, 2.0], [22900.0, 71.0], [23700.0, 2.0], [24500.0, 1.0], [25300.0, 62.0], [26900.0, 43.0], [27700.0, 2.0], [28500.0, 4.0], [29300.0, 4.0], [30100.0, 3.0], [31700.0, 26.0], [30900.0, 34.0], [32500.0, 20.0], [33000.0, 2.0], [34600.0, 13.0], [147100.0, 1.0], [36200.0, 2.0], [37800.0, 23.0], [39400.0, 14.0], [41000.0, 2.0], [44200.0, 13.0], [45800.0, 86.0], [47400.0, 1.0], [49000.0, 1.0], [50600.0, 1.0], [52200.0, 2.0], [53800.0, 2.0], [57000.0, 1.0], [55400.0, 1.0], [58600.0, 1.0], [61800.0, 2.0], [63400.0, 5.0], [65000.0, 11.0], [69200.0, 3.0], [66000.0, 1.0], [72400.0, 1.0], [75600.0, 1.0], [78800.0, 3.0], [85200.0, 1.0], [88400.0, 11.0], [94800.0, 1.0], [130000.0, 26.0], [133600.0, 16.0], [131300.0, 8.0], [144100.0, 1.0], [69100.0, 5.0], [65900.0, 5.0], [78700.0, 3.0], [129900.0, 21.0], [34100.0, 3.0], [35700.0, 1.0], [37300.0, 20.0], [38900.0, 1.0], [40500.0, 4.0], [43700.0, 5.0], [45300.0, 10.0], [46900.0, 2.0], [48500.0, 6.0], [50100.0, 10.0], [51700.0, 2.0], [209900.0, 2.0], [54900.0, 4.0], [53300.0, 21.0], [62900.0, 2.0], [64500.0, 1.0], [68200.0, 5.0], [74600.0, 9.0], [100200.0, 147.0], [134900.0, 2.0], [230900.0, 1.0], [67300.0, 1.0], [73700.0, 26.0], [70500.0, 1.0], [76900.0, 1.0], [83300.0, 2.0], [108900.0, 1.0], [128100.0, 9.0], [8300.0, 365.0], [8700.0, 168.0], [9100.0, 316.0], [9500.0, 246.0], [9900.0, 107.0], [10300.0, 74.0], [10700.0, 347.0], [11100.0, 39.0], [11500.0, 80.0], [11900.0, 16.0], [12700.0, 72.0], [12300.0, 33.0], [13100.0, 79.0], [13500.0, 10.0], [14300.0, 79.0], [13900.0, 54.0], [14700.0, 53.0], [15100.0, 69.0], [15500.0, 15.0], [15900.0, 42.0], [16300.0, 23.0], [16600.0, 21.0], [18200.0, 1.0], [19000.0, 2.0], [19800.0, 2.0], [20600.0, 6.0], [21400.0, 15.0], [22200.0, 3.0], [23000.0, 1.0], [23800.0, 13.0], [24600.0, 4.0], [25400.0, 8.0], [28600.0, 3.0], [27800.0, 20.0], [29400.0, 1.0], [30200.0, 3.0], [31000.0, 2.0], [32600.0, 5.0], [31800.0, 19.0], [34800.0, 4.0], [33200.0, 103.0], [36400.0, 3.0], [38000.0, 2.0], [41200.0, 35.0], [42800.0, 2.0], [44400.0, 31.0], [46000.0, 4.0], [47600.0, 1.0], [49200.0, 2.0], [50800.0, 3.0], [57200.0, 1.0], [58800.0, 4.0], [63600.0, 12.0], [65200.0, 11.0], [66400.0, 5.0], [69600.0, 3.0], [76000.0, 1.0], [79200.0, 1.0], [95200.0, 3.0], [117600.0, 1.0], [130400.0, 82.0], [136900.0, 1.0], [66300.0, 12.0], [69500.0, 10.0], [79100.0, 2.0], [82300.0, 2.0], [88700.0, 1.0], [127100.0, 1.0], [173000.0, 1.0], [34300.0, 1.0], [35900.0, 7.0], [145100.0, 2.0], [37500.0, 1.0], [39100.0, 1.0], [40700.0, 14.0], [157900.0, 1.0], [42300.0, 4.0], [164300.0, 1.0], [43900.0, 17.0], [47100.0, 10.0], [48700.0, 3.0], [50300.0, 2.0], [51900.0, 1.0], [56700.0, 1.0], [59900.0, 2.0], [63100.0, 2.0], [64700.0, 1.0], [71800.0, 11.0], [75000.0, 3.0], [78200.0, 6.0], [84600.0, 2.0], [94200.0, 2.0], [97400.0, 1.0], [100600.0, 2.0], [194000.0, 1.0], [210900.0, 3.0], [67700.0, 3.0], [70900.0, 1.0], [77300.0, 3.0], [74100.0, 2.0], [80500.0, 3.0], [83700.0, 1.0], [86900.0, 2.0], [131800.0, 2.0], [16700.0, 20.0], [17500.0, 42.0], [18300.0, 1.0], [19100.0, 2.0], [19900.0, 3.0], [20700.0, 30.0], [21500.0, 2.0], [23100.0, 2.0], [23900.0, 10.0], [25500.0, 1.0], [24700.0, 9.0], [26300.0, 6.0], [27100.0, 15.0], [27900.0, 49.0], [28700.0, 19.0], [30300.0, 2.0], [31100.0, 5.0], [32700.0, 5.0], [31900.0, 35.0], [33400.0, 75.0], [35000.0, 6.0], [36600.0, 5.0], [38200.0, 1.0], [39800.0, 3.0], [43000.0, 16.0], [41400.0, 38.0], [44600.0, 5.0], [46200.0, 6.0], [47800.0, 5.0], [49400.0, 8.0], [51000.0, 1.0], [52600.0, 3.0], [54200.0, 3.0], [55800.0, 4.0], [59000.0, 2.0], [57400.0, 23.0], [63800.0, 8.0], [65400.0, 1.0], [73200.0, 4.0], [70000.0, 2.0], [79600.0, 2.0], [98800.0, 2.0], [127600.0, 8.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 230900.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 503.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 117753.0, "series": [{"data": [[0.0, 117753.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 9515.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 22768.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 503.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 233.71767241379322, "minX": 1.682892E12, "maxY": 3000.0, "series": [{"data": [[1.68289224E12, 3000.0], [1.6828923E12, 2582.9763354552974], [1.68289212E12, 3000.0], [1.68289218E12, 3000.0], [1.682892E12, 3000.0], [1.68289206E12, 3000.0], [1.68289236E12, 233.71767241379322]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68289236E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 116.0, "minX": 1.0, "maxY": 128349.0, "series": [{"data": [[2.0, 100211.0], [3.0, 100210.0], [4.0, 100182.0], [5.0, 100179.0], [6.0, 100162.0], [7.0, 100163.0], [8.0, 100163.0], [10.0, 100161.0], [11.0, 100161.0], [12.0, 100160.0], [14.0, 100157.5], [16.0, 100156.0], [19.0, 100148.0], [20.0, 100148.0], [21.0, 100148.0], [23.0, 100147.0], [24.0, 100147.0], [26.0, 100147.0], [27.0, 100147.0], [28.0, 100148.0], [30.0, 100147.5], [32.0, 100146.0], [35.0, 100147.0], [34.0, 100146.0], [37.0, 100147.0], [36.0, 100145.5], [39.0, 100145.0], [38.0, 100145.0], [40.0, 100145.0], [45.0, 100144.0], [47.0, 100143.0], [49.0, 100143.5], [48.0, 100143.0], [50.0, 100144.0], [53.0, 100142.33333333333], [52.0, 100143.0], [55.0, 100142.5], [57.0, 100136.0], [56.0, 100138.0], [58.0, 100135.0], [60.0, 100134.5], [62.0, 100134.0], [67.0, 100129.0], [66.0, 100132.0], [65.0, 100133.0], [71.0, 100128.5], [69.0, 100130.0], [74.0, 100118.0], [77.0, 100117.0], [76.0, 100117.0], [83.0, 100106.0], [82.0, 100107.5], [81.0, 100107.0], [84.0, 100104.0], [95.0, 100101.25], [93.0, 100100.5], [92.0, 100101.0], [103.0, 100098.0], [102.0, 100099.66666666667], [101.0, 100100.0], [100.0, 100100.0], [105.0, 100097.0], [104.0, 100098.0], [111.0, 100095.0], [110.0, 100096.66666666667], [115.0, 100095.0], [113.0, 100095.0], [112.0, 100096.0], [119.0, 100093.0], [117.0, 100094.0], [116.0, 100095.0], [123.0, 100089.0], [122.0, 100089.5], [120.0, 100091.0], [126.0, 100087.5], [124.0, 100089.0], [135.0, 100086.25], [132.0, 100086.0], [130.0, 100087.0], [143.0, 100083.0], [142.0, 100083.0], [141.0, 100082.0], [138.0, 100084.0], [137.0, 100085.0], [148.0, 100077.0], [147.0, 100082.0], [144.0, 100082.0], [157.0, 100067.0], [156.0, 100068.0], [155.0, 100069.0], [154.0, 100076.0], [153.0, 100077.0], [152.0, 100077.0], [167.0, 100036.0], [166.0, 100040.0], [165.0, 100040.0], [164.0, 100041.0], [163.0, 100055.5], [161.0, 100064.0], [175.0, 100332.5], [173.0, 100333.0], [171.0, 100336.0], [169.0, 100334.0], [168.0, 100033.0], [183.0, 100097.0], [178.0, 100147.0], [176.0, 100333.0], [191.0, 100085.66666666667], [188.0, 100085.0], [187.0, 100091.0], [186.0, 100096.0], [185.0, 100097.0], [184.0, 100097.0], [199.0, 100063.0], [198.0, 100067.5], [196.0, 100069.0], [194.0, 100072.5], [192.0, 100084.0], [207.0, 100058.0], [206.0, 100056.0], [205.0, 100057.5], [200.0, 100059.0], [215.0, 100051.0], [214.0, 100055.0], [213.0, 100055.75], [211.0, 100056.0], [223.0, 100044.5], [222.0, 100044.0], [221.0, 100043.0], [220.0, 100044.0], [231.0, 100043.0], [230.0, 100042.5], [229.0, 100042.0], [228.0, 100042.5], [225.0, 100043.0], [224.0, 100044.0], [239.0, 100035.0], [237.0, 100035.0], [236.0, 100037.5], [234.0, 100039.0], [233.0, 100042.0], [232.0, 100042.0], [247.0, 100030.75], [246.0, 100030.5], [244.0, 100031.0], [254.0, 100025.0], [252.0, 100029.0], [251.0, 100029.5], [270.0, 100329.0], [263.0, 97835.0], [262.0, 95464.0], [261.0, 96471.0], [260.0, 96473.0], [259.0, 99853.0], [258.0, 97482.0], [257.0, 100018.33333333333], [275.0, 100327.0], [286.0, 100325.33333333333], [284.0, 100326.0], [283.0, 100327.0], [281.0, 100326.0], [280.0, 100327.33333333333], [278.0, 100328.0], [276.0, 100327.0], [274.0, 100328.0], [272.0, 100328.625], [302.0, 100322.0], [298.0, 100323.0], [291.0, 100324.0], [290.0, 100324.0], [289.0, 100325.0], [288.0, 100325.0], [306.0, 100322.0], [319.0, 100311.5], [317.0, 100319.14285714286], [305.0, 100322.5], [304.0, 100322.0], [315.0, 100320.0], [314.0, 100320.0], [312.0, 100320.0], [311.0, 100320.0], [310.0, 100320.0], [309.0, 100320.0], [308.0, 100321.0], [334.0, 100279.0], [333.0, 100279.5], [331.0, 100281.0], [330.0, 100280.5], [326.0, 96827.0], [325.0, 100286.0], [324.0, 100291.5], [322.0, 100297.0], [320.0, 100311.0], [351.0, 100212.0], [350.0, 100213.0], [347.0, 100217.0], [346.0, 100219.0], [344.0, 100247.0], [343.0, 100250.0], [342.0, 100276.0], [340.0, 100277.0], [339.0, 100277.0], [337.0, 100279.0], [366.0, 94230.0], [367.0, 94229.0], [365.0, 95237.0], [364.0, 95239.0], [363.0, 96246.0], [362.0, 96248.0], [361.0, 97255.0], [360.0, 97258.0], [359.0, 98264.0], [353.0, 100212.0], [355.0, 100150.0], [354.0, 100211.0], [358.0, 94808.0], [357.0, 95816.0], [356.0, 99277.0], [382.0, 80322.0], [383.0, 80321.0], [381.0, 81328.0], [380.0, 81331.0], [379.0, 82337.0], [378.0, 82341.0], [377.0, 83349.0], [376.0, 85725.0], [375.0, 86731.0], [369.0, 87386.0], [368.0, 93222.0], [371.0, 88749.0], [370.0, 86379.0], [374.0, 86733.0], [373.0, 87741.0], [372.0, 87743.0], [398.0, 73257.0], [399.0, 75628.0], [397.0, 73304.0], [396.0, 73432.0], [395.0, 74264.0], [394.0, 80098.0], [393.0, 81107.0], [392.0, 81107.0], [391.0, 82116.0], [385.0, 81684.0], [384.0, 79313.0], [387.0, 80674.0], [386.0, 80676.0], [390.0, 78659.0], [389.0, 79666.0], [388.0, 79667.0], [414.0, 68205.0], [415.0, 67200.0], [413.0, 70583.0], [412.0, 69218.0], [411.0, 69219.0], [410.0, 72600.0], [409.0, 72601.0], [408.0, 73609.0], [407.0, 71238.0], [401.0, 72245.0], [400.0, 74620.0], [406.0, 74270.75], [405.0, 74272.0], [430.0, 65965.0], [431.0, 64956.0], [429.0, 65966.0], [428.0, 66971.0], [427.0, 66974.0], [426.0, 67981.0], [425.0, 64523.0], [424.0, 65531.0], [423.0, 65534.0], [417.0, 66190.0], [416.0, 67198.0], [419.0, 67555.0], [418.0, 68561.0], [422.0, 66543.0], [421.0, 66545.0], [420.0, 67552.0], [446.0, 57888.0], [447.0, 56880.0], [445.0, 57890.0], [444.0, 58898.0], [443.0, 58899.0], [442.0, 59906.0], [441.0, 59909.0], [440.0, 60916.0], [439.0, 60917.0], [433.0, 63946.0], [432.0, 64953.0], [435.0, 62936.0], [434.0, 63944.0], [438.0, 61925.0], [437.0, 61926.0], [436.0, 62934.0], [462.0, 49812.0], [463.0, 48804.0], [461.0, 49814.0], [460.0, 50820.0], [459.0, 50824.0], [458.0, 51831.0], [457.0, 51831.0], [456.0, 52839.0], [455.0, 52841.0], [449.0, 55869.0], [448.0, 56876.0], [451.0, 54859.0], [450.0, 55867.0], [454.0, 53848.0], [453.0, 53851.0], [452.0, 54859.0], [478.0, 41736.0], [479.0, 40728.0], [477.0, 41739.0], [476.0, 42747.0], [475.0, 42747.0], [474.0, 43757.0], [473.0, 43758.0], [472.0, 44764.0], [471.0, 44766.0], [465.0, 47794.0], [464.0, 48802.0], [467.0, 46785.0], [466.0, 47792.0], [470.0, 45775.0], [469.0, 45777.0], [468.0, 46783.0], [494.0, 33661.0], [495.0, 32654.0], [493.0, 33664.0], [492.0, 34672.0], [491.0, 34672.0], [490.0, 35680.0], [489.0, 35682.0], [488.0, 36690.0], [487.0, 36691.0], [481.0, 39718.0], [480.0, 40727.0], [483.0, 38708.0], [482.0, 39717.0], [486.0, 37699.0], [485.0, 37701.0], [484.0, 38707.0], [510.0, 128331.0], [511.0, 128330.0], [508.0, 30632.0], [499.0, 128277.0], [498.0, 31643.0], [497.0, 31644.0], [496.0, 32652.0], [507.0, 30635.0], [506.0, 128270.0], [505.0, 128271.0], [504.0, 128272.0], [503.0, 128272.0], [502.0, 128274.0], [501.0, 128274.0], [500.0, 128276.0], [536.0, 25341.0], [541.0, 39750.5], [543.0, 42734.5], [529.0, 29604.0], [528.0, 29606.0], [531.0, 28366.0], [530.0, 28368.0], [539.0, 24329.0], [538.0, 24332.0], [537.0, 25339.0], [527.0, 128310.0], [512.0, 128330.0], [515.0, 128328.0], [514.0, 128330.0], [517.0, 128327.0], [516.0, 128328.0], [519.0, 128326.0], [518.0, 128325.0], [525.0, 128312.0], [523.0, 128313.0], [522.0, 128314.0], [520.0, 128322.0], [535.0, 26349.0], [534.0, 26350.0], [533.0, 27357.0], [532.0, 27359.0], [572.0, 36744.0], [575.0, 47860.0], [560.0, 36759.0], [562.0, 36755.0], [561.0, 42727.0], [564.0, 36754.0], [563.0, 36754.0], [574.0, 49503.0], [573.0, 36742.0], [571.0, 36746.0], [570.0, 36746.0], [569.0, 36749.0], [568.0, 42312.5], [559.0, 36760.0], [545.0, 36764.0], [547.0, 36764.5], [546.0, 42735.0], [550.0, 36763.5], [548.0, 42733.0], [558.0, 36759.666666666664], [555.0, 39745.0], [553.0, 36762.0], [552.0, 36762.0], [566.0, 36751.0], [565.0, 36752.0], [604.0, 23179.0], [605.0, 37907.0], [592.0, 38786.0], [594.0, 38784.0], [593.0, 36696.0], [603.0, 23182.0], [602.0, 38674.0], [601.0, 36596.0], [600.0, 38778.0], [590.0, 38787.0], [579.0, 36733.0], [576.0, 49501.0], [581.0, 49499.0], [580.0, 49500.0], [589.0, 38789.0], [587.0, 38811.0], [586.0, 36722.0], [585.0, 41136.333333333336], [584.0, 36731.5], [599.0, 38778.0], [598.0, 37735.0], [596.0, 38781.0], [595.0, 38782.0], [615.0, 37903.0], [625.0, 33423.0], [638.0, 33418.0], [637.0, 33419.0], [635.0, 34910.666666666664], [614.0, 40965.0], [612.0, 44027.0], [611.0, 37907.0], [610.0, 44029.0], [609.0, 37906.0], [608.0, 37907.666666666664], [631.0, 35657.0], [629.0, 36954.0], [627.0, 37898.0], [624.0, 34218.0], [621.0, 33423.0], [620.0, 37900.0], [619.0, 44024.0], [618.0, 40964.0], [617.0, 37904.0], [668.0, 33390.0], [670.0, 33387.0], [666.0, 33390.0], [665.0, 33391.0], [664.0, 33392.0], [647.0, 33408.0], [646.0, 37415.0], [645.0, 33410.0], [644.0, 43296.666666666664], [641.0, 35653.0], [640.0, 37892.0], [654.0, 33404.5], [653.0, 33403.0], [651.0, 36193.666666666664], [648.0, 59131.0], [663.0, 33394.0], [662.0, 33396.25], [660.0, 33398.5], [656.0, 33403.5], [701.0, 33325.0], [702.0, 33325.0], [689.0, 33358.5], [699.0, 33324.0], [698.0, 33341.0], [697.0, 33340.0], [696.0, 33346.5], [687.0, 33359.0], [673.0, 33387.0], [676.0, 33372.0], [674.0, 33386.0], [679.0, 33370.5], [677.0, 33371.0], [686.0, 33360.333333333336], [683.0, 33366.0], [682.0, 33364.5], [680.0, 33366.0], [695.0, 33347.0], [693.0, 33351.0], [692.0, 33353.0], [690.0, 33358.0], [722.0, 32396.5], [733.0, 32393.0], [735.0, 32394.0], [721.0, 32400.0], [732.0, 32394.0], [731.0, 32395.0], [729.0, 32395.0], [711.0, 33306.333333333336], [708.0, 33314.5], [706.0, 33320.0], [705.0, 33321.0], [704.0, 33322.5], [719.0, 32398.0], [716.0, 32399.666666666668], [713.0, 22278.0], [712.0, 22281.0], [727.0, 32396.0], [726.0, 32396.0], [725.0, 32396.0], [761.0, 32350.0], [766.0, 32347.0], [767.0, 32342.0], [753.0, 32369.0], [752.0, 32370.0], [755.0, 32367.0], [754.0, 32370.0], [757.0, 32363.0], [756.0, 32365.0], [765.0, 32347.0], [764.0, 32349.0], [763.0, 32350.5], [760.0, 32358.0], [743.0, 32386.0], [742.0, 32387.0], [741.0, 32389.0], [740.0, 32388.0], [739.0, 32389.0], [737.0, 32390.0], [736.0, 32392.5], [751.0, 32372.0], [750.0, 32375.0], [749.0, 32375.0], [748.0, 32377.0], [747.0, 32381.0], [746.0, 32387.0], [745.0, 32386.5], [759.0, 32360.0], [758.0, 32364.0], [793.0, 50671.0], [798.0, 49158.0], [799.0, 49158.0], [785.0, 27880.0], [784.0, 27883.0], [787.0, 128349.0], [786.0, 27879.0], [797.0, 49490.0], [795.0, 49158.0], [794.0, 49161.0], [783.0, 27882.0], [768.0, 32340.0], [771.0, 32334.0], [770.0, 32339.5], [773.0, 21031.0], [772.0, 21038.0], [775.0, 20064.0], [774.0, 20068.0], [782.0, 17863.0], [781.0, 17865.0], [780.0, 18045.0], [779.0, 18048.0], [778.0, 44217.0], [777.0, 19055.0], [776.0, 19056.0], [791.0, 49172.0], [790.0, 49180.0], [789.0, 16671.0], [788.0, 16672.0], [828.0, 8785.0], [831.0, 8769.0], [816.0, 8836.0], [818.0, 8834.0], [817.0, 8836.0], [821.0, 8826.0], [820.0, 8830.5], [830.0, 8772.0], [829.0, 8775.0], [827.0, 8808.0], [826.0, 8808.0], [825.0, 8811.0], [824.0, 8822.0], [815.0, 8837.0], [800.0, 49155.0], [803.0, 8852.5], [801.0, 49490.0], [805.0, 49459.0], [804.0, 8852.0], [807.0, 49128.0], [806.0, 18952.0], [814.0, 28985.0], [813.0, 8847.0], [810.0, 8849.0], [809.0, 29155.5], [823.0, 8824.0], [822.0, 8826.0], [856.0, 18543.0], [849.0, 8613.0], [863.0, 11528.5], [862.0, 8509.75], [858.0, 11530.0], [847.0, 8621.0], [833.0, 8759.0], [832.0, 8760.0], [835.0, 14986.0], [834.0, 14987.0], [837.0, 8718.0], [836.0, 8733.0], [839.0, 8699.0], [838.0, 8712.0], [846.0, 8629.0], [845.0, 8639.0], [844.0, 8643.0], [843.0, 8660.0], [842.0, 8667.0], [841.0, 8678.0], [840.0, 8689.0], [855.0, 38402.0], [851.0, 8614.0], [850.0, 14979.0], [848.0, 8613.0], [889.0, 38373.0], [883.0, 8586.0], [891.0, 8584.0], [895.0, 23553.0], [882.0, 10573.0], [890.0, 14419.0], [888.0, 14949.0], [871.0, 11522.0], [869.0, 8201.0], [868.0, 11792.5], [866.0, 48480.0], [865.0, 8610.5], [879.0, 14421.0], [878.0, 8588.0], [877.0, 8588.0], [876.0, 11504.0], [874.0, 8586.0], [873.0, 8401.0], [887.0, 14419.0], [886.0, 8587.0], [885.0, 8586.0], [923.0, 8562.0], [914.0, 8564.0], [925.0, 8561.0], [926.0, 8560.0], [913.0, 14399.0], [912.0, 8565.0], [924.0, 8561.0], [921.0, 8291.333333333334], [901.0, 14412.0], [900.0, 14412.0], [899.0, 8582.0], [898.0, 8581.0], [897.0, 8419.0], [911.0, 14400.0], [910.0, 8565.0], [909.0, 8570.0], [908.0, 8367.5], [907.0, 14405.0], [906.0, 14405.0], [904.0, 10521.666666666666], [918.0, 8562.0], [916.0, 8564.0], [915.0, 23534.0], [957.0, 15893.0], [959.0, 8135.0], [956.0, 8544.0], [955.0, 14911.0], [954.0, 14384.0], [953.0, 16523.8], [943.0, 16834.0], [929.0, 12030.0], [928.0, 14394.0], [934.0, 9915.25], [932.0, 8558.0], [941.0, 8555.0], [940.0, 8151.0], [939.0, 8557.666666666666], [938.0, 8557.0], [937.0, 8557.0], [951.0, 8550.5], [947.0, 8551.0], [945.0, 14386.0], [944.0, 11469.5], [985.0, 8518.5], [990.0, 8519.0], [991.0, 8511.0], [988.0, 12954.333333333334], [987.0, 8518.0], [986.0, 8520.0], [974.0, 14360.0], [960.0, 8542.0], [962.0, 14372.0], [961.0, 14373.0], [964.0, 8534.0], [963.0, 15883.0], [966.0, 8531.0], [965.0, 8532.0], [973.0, 8525.0], [972.0, 8527.0], [971.0, 8527.0], [970.0, 11241.0], [968.0, 18930.0], [983.0, 14354.0], [982.0, 14354.0], [981.0, 12409.0], [976.0, 16011.5], [1016.0, 15811.0], [1020.0, 14819.0], [1023.0, 14815.0], [1008.0, 16896.0], [1011.0, 8470.0], [1010.0, 8478.5], [1022.0, 40440.0], [1021.0, 14815.0], [1019.0, 8452.0], [1018.0, 15810.0], [1017.0, 8462.0], [1006.0, 14315.0], [994.0, 12574.666666666666], [996.0, 8506.0], [995.0, 8509.0], [999.0, 8506.0], [998.0, 8506.0], [1005.0, 8479.0], [1004.0, 14851.0], [1003.0, 15852.0], [1002.0, 14340.0], [1001.0, 11422.0], [1000.0, 8506.0], [1015.0, 12862.333333333334], [1012.0, 8470.0], [1030.0, 8443.0], [1060.0, 8409.0], [1078.0, 8400.0], [1056.0, 25246.0], [1064.0, 8408.0], [1068.0, 10526.333333333334], [1084.0, 8400.0], [1074.0, 8402.5], [1072.0, 8403.0], [1024.0, 48318.0], [1026.0, 8039.0], [1028.0, 14811.0], [1032.0, 11360.0], [1034.0, 14804.0], [1036.0, 40428.0], [1054.0, 15762.0], [1052.0, 8415.0], [1050.0, 32196.5], [1048.0, 8421.5], [1046.0, 8421.0], [1044.0, 8431.0], [1042.0, 8433.0], [1040.0, 8434.0], [1144.0, 8351.0], [1122.0, 8383.0], [1124.0, 27235.0], [1128.0, 18782.5], [1126.0, 43212.0], [1132.0, 8379.5], [1130.0, 28316.0], [1134.0, 17897.0], [1150.0, 8349.0], [1148.0, 50906.0], [1142.0, 37382.333333333336], [1138.0, 15025.0], [1136.0, 28314.0], [1102.0, 8388.0], [1096.0, 8394.0], [1094.0, 13384.0], [1092.0, 8393.0], [1088.0, 8394.0], [1116.0, 23279.5], [1114.0, 15734.0], [1112.0, 8386.0], [1110.0, 35806.5], [1108.0, 21141.0], [1106.0, 8389.0], [1104.0, 8388.5], [1208.0, 14048.0], [1212.0, 11982.0], [1188.0, 20122.25], [1192.0, 16127.5], [1190.0, 15663.0], [1196.0, 15624.0], [1198.0, 14919.0], [1214.0, 10995.0], [1210.0, 13719.0], [1204.0, 48130.0], [1202.0, 31379.0], [1200.0, 32868.0], [1152.0, 48216.0], [1154.0, 14710.0], [1158.0, 15692.0], [1166.0, 13241.666666666666], [1164.0, 20347.0], [1180.0, 15641.0], [1176.0, 11236.0], [1174.0, 16136.0], [1172.0, 31173.5], [1168.0, 28278.0], [1272.0, 34814.0], [1254.0, 11726.0], [1274.0, 44561.0], [1248.0, 11728.0], [1250.0, 11727.0], [1256.0, 44572.0], [1260.0, 19343.0], [1278.0, 31941.5], [1276.0, 11707.0], [1268.0, 11716.0], [1264.0, 19339.0], [1230.0, 14591.0], [1226.0, 11740.0], [1224.0, 34058.6], [1216.0, 11744.0], [1246.0, 15540.0], [1244.0, 46383.0], [1242.0, 11732.0], [1240.0, 11733.5], [1238.0, 12667.0], [1236.0, 46387.0], [1234.0, 19359.0], [1232.0, 19359.0], [1342.0, 11655.0], [1312.0, 15481.5], [1314.0, 19292.0], [1318.0, 32807.0], [1320.0, 11663.0], [1326.0, 46865.0], [1332.0, 19277.0], [1330.0, 11657.0], [1328.0, 19278.0], [1290.0, 11695.0], [1286.0, 23248.0], [1284.0, 11696.0], [1282.0, 11698.0], [1310.0, 19298.0], [1304.0, 44528.0], [1298.0, 14234.333333333334], [1296.0, 22844.333333333332], [1378.0, 28067.5], [1376.0, 11642.0], [1380.0, 45392.5], [1384.0, 44465.0], [1386.0, 44461.0], [1388.0, 44447.0], [1390.0, 13765.0], [1406.0, 13746.0], [1402.0, 44437.0], [1398.0, 13760.0], [1396.0, 44445.0], [1352.0, 46856.0], [1370.0, 15924.0], [1366.0, 44498.0], [1362.0, 46301.0], [1422.0, 19165.0], [1444.0, 9429.0], [1448.0, 7036.0], [1458.0, 17346.0], [1420.0, 45014.0], [1416.0, 44421.0], [1412.0, 29085.5], [1410.0, 44427.0], [1436.0, 13687.0], [1434.0, 13695.0], [1432.0, 12620.5], [1430.0, 11536.0], [1426.0, 29951.0], [1424.0, 44065.0], [1452.0, 10635.0], [1450.0, 10636.0], [1446.0, 8087.0], [1442.0, 9969.0], [1440.0, 13678.0], [1772.0, 18842.333333333332], [1852.0, 10153.0], [1854.0, 17292.0], [1806.0, 16250.375], [1804.0, 6123.857142857142], [1802.0, 13998.433333333334], [1822.0, 15430.0], [1810.0, 18902.416666666668], [1910.0, 452.0], [1890.0, 5301.0], [1898.0, 2876.5], [1892.0, 12306.166666666666], [1908.0, 452.0], [1904.0, 452.5], [1856.0, 12788.5], [1858.0, 22679.0], [1860.0, 8886.428571428572], [1862.0, 11285.0], [1864.0, 11682.5], [1866.0, 15425.0], [1868.0, 14105.75], [1870.0, 455.0], [1884.0, 454.3333333333333], [1880.0, 24435.0], [1878.0, 11849.666666666666], [1876.0, 6577.0], [1874.0, 6066.0], [1872.0, 15425.0], [1902.0, 452.0], [1896.0, 10149.0], [1924.0, 17010.18181818182], [1938.0, 4204.0], [1926.0, 42368.0], [1928.0, 10061.0], [1936.0, 5215.0], [1934.0, 7849.5], [1932.0, 10061.0], [1930.0, 27801.0], [2300.0, 330.5], [2296.0, 330.6], [2288.0, 359.24918032786906], [2316.0, 2035.0], [2312.0, 128.0], [2308.0, 329.5], [2528.0, 274.0], [2540.0, 274.25], [2500.0, 303.0], [2504.0, 302.0], [2508.0, 303.0], [2512.0, 301.0], [2492.0, 308.0], [2480.0, 308.8333333333333], [2476.0, 308.0], [2472.0, 309.95833333333337], [2468.0, 309.0], [2748.0, 265.0], [2740.0, 1253.0], [2768.0, 1250.0], [2752.0, 1252.0], [2932.0, 254.0], [2884.0, 257.55555555555554], [2892.0, 354.70000000000005], [2940.0, 253.0], [2880.0, 256.75], [2900.0, 256.61538461538464], [2904.0, 353.7], [2908.0, 255.5], [2936.0, 252.75], [2928.0, 253.5], [2924.0, 253.33333333333334], [2916.0, 254.13333333333335], [2912.0, 253.6], [2876.0, 258.0], [2872.0, 257.8181818181818], [2868.0, 257.45454545454544], [2864.0, 258.0], [2860.0, 258.3333333333333], [2856.0, 1242.0], [2848.0, 258.75], [2944.0, 253.0], [2948.0, 252.8], [3000.0, 3707.1643915743066], [2952.0, 540.0], [2956.0, 252.0], [2968.0, 535.0], [2996.0, 286.46491228070187], [2988.0, 290.6], [2984.0, 290.6666666666667], [2297.0, 330.3333333333333], [2301.0, 330.1111111111111], [2293.0, 330.53846153846155], [2289.0, 331.20000000000005], [2317.0, 2033.0], [2313.0, 127.5], [2485.0, 309.15384615384613], [2489.0, 308.0], [2501.0, 305.0], [2505.0, 302.6], [2509.0, 301.0], [2481.0, 308.25], [2477.0, 309.1111111111111], [2473.0, 309.85185185185185], [2469.0, 312.0], [2513.0, 302.0], [2801.0, 1248.0], [2745.0, 760.5], [2765.0, 594.0], [2757.0, 266.0], [2753.0, 1252.0], [2929.0, 254.0], [2881.0, 257.3333333333333], [2885.0, 256.0], [2889.0, 256.3333333333333], [2893.0, 256.46153846153845], [2901.0, 256.0], [2905.0, 426.4], [2909.0, 254.0], [2937.0, 254.0], [2933.0, 254.0], [2925.0, 253.66666666666666], [2921.0, 254.0], [2917.0, 451.2], [2913.0, 253.5], [2877.0, 256.6666666666667], [2873.0, 257.6363636363636], [2869.0, 258.2], [2865.0, 258.2], [2861.0, 258.8], [2857.0, 258.5], [2993.0, 288.2222222222222], [2997.0, 285.088888888889], [2945.0, 539.0], [2953.0, 252.33333333333334], [2961.0, 447.6], [2965.0, 742.0], [2989.0, 289.8076923076923], [2985.0, 289.0], [2981.0, 178.5], [2977.0, 179.0], [1075.0, 8401.0], [1085.0, 16680.0], [1059.0, 12085.0], [1057.0, 8411.0], [1061.0, 8410.0], [1063.0, 8408.0], [1065.0, 8407.0], [1083.0, 8399.8], [1077.0, 43230.5], [1055.0, 8413.0], [1025.0, 8449.0], [1027.0, 8446.0], [1029.0, 8444.0], [1033.0, 14805.0], [1035.0, 15093.0], [1039.0, 11907.0], [1037.0, 23407.0], [1053.0, 15069.0], [1051.0, 8418.0], [1045.0, 8431.0], [1043.0, 8431.0], [1071.0, 8402.5], [1069.0, 8404.0], [1145.0, 8349.0], [1147.0, 49286.0], [1151.0, 31198.0], [1123.0, 8383.0], [1135.0, 15730.0], [1143.0, 23322.0], [1139.0, 28304.5], [1101.0, 11685.5], [1097.0, 38182.0], [1095.0, 8394.0], [1089.0, 8394.0], [1119.0, 8382.5], [1117.0, 8384.0], [1111.0, 8385.0], [1213.0, 11979.0], [1215.0, 10993.0], [1189.0, 17648.0], [1195.0, 15657.333333333334], [1197.0, 48136.0], [1211.0, 13718.0], [1209.0, 14047.0], [1207.0, 19055.0], [1205.0, 23228.0], [1203.0, 48130.0], [1183.0, 11501.0], [1155.0, 11673.0], [1157.0, 28281.0], [1181.0, 15668.0], [1179.0, 8319.0], [1171.0, 31930.5], [1273.0, 19334.0], [1279.0, 11700.0], [1249.0, 11728.0], [1253.0, 15535.5], [1251.0, 19347.0], [1255.0, 11725.0], [1257.0, 19343.0], [1259.0, 11721.0], [1263.0, 34983.0], [1261.0, 15532.5], [1269.0, 19335.0], [1267.0, 15528.0], [1265.0, 19338.0], [1231.0, 19359.0], [1227.0, 11741.0], [1225.0, 11742.0], [1219.0, 28170.0], [1217.0, 19363.0], [1247.0, 11730.0], [1241.0, 44584.0], [1237.0, 11735.0], [1235.0, 19357.0], [1233.0, 46390.0], [1339.0, 25747.333333333336], [1317.0, 44191.0], [1343.0, 44504.0], [1313.0, 11673.0], [1315.0, 44191.0], [1319.0, 19285.0], [1323.0, 32798.0], [1321.0, 11662.0], [1325.0, 27919.5], [1341.0, 11654.5], [1337.0, 19276.0], [1335.0, 15465.5], [1333.0, 19276.0], [1329.0, 44512.0], [1295.0, 19315.0], [1287.0, 11697.0], [1281.0, 11699.0], [1309.0, 45266.0], [1307.0, 11678.0], [1305.0, 46333.0], [1303.0, 29010.75], [1299.0, 11693.0], [1297.0, 11694.5], [1397.0, 19214.0], [1383.0, 15435.5], [1403.0, 46237.0], [1407.0, 46228.0], [1381.0, 12562.0], [1385.0, 19231.0], [1387.0, 11598.0], [1389.0, 11597.0], [1405.0, 29833.5], [1399.0, 19213.0], [1395.0, 32733.0], [1393.0, 44337.333333333336], [1359.0, 27907.0], [1357.0, 12581.0], [1353.0, 44501.0], [1351.0, 27681.333333333332], [1349.0, 44502.5], [1347.0, 11652.0], [1345.0, 19272.5], [1375.0, 28370.0], [1373.0, 28535.5], [1371.0, 44387.666666666664], [1367.0, 24323.0], [1363.0, 11648.0], [1361.0, 46299.0], [1417.0, 34192.333333333336], [1457.0, 16753.4], [1423.0, 44395.0], [1421.0, 44396.0], [1413.0, 13744.0], [1411.0, 28001.0], [1439.0, 13685.0], [1437.0, 13685.0], [1433.0, 13706.0], [1431.0, 13705.0], [1429.0, 19158.0], [1427.0, 11540.0], [1449.0, 41318.0], [1447.0, 7042.0], [1445.0, 8089.0], [1443.0, 9432.0], [1441.0, 9972.0], [1773.0, 15435.0], [1807.0, 11915.333333333334], [1849.0, 9977.0], [1855.0, 17902.0], [1847.0, 13107.818181818182], [1805.0, 15001.75], [1801.0, 17373.2], [1815.0, 15430.0], [1811.0, 18820.0], [1863.0, 15890.5], [1913.0, 451.875], [1889.0, 452.0], [1885.0, 8209.4], [1859.0, 13554.361963190182], [1861.0, 17290.0], [1865.0, 8253.0], [1867.0, 8676.0], [1869.0, 21185.0], [1871.0, 12138.5], [1883.0, 11011.460000000003], [1881.0, 9044.25], [1879.0, 24435.333333333332], [1877.0, 13385.0], [1875.0, 16290.333333333332], [1901.0, 1837.714285714286], [1899.0, 10149.0], [1895.0, 2877.25], [1931.0, 10059.0], [1925.0, 15338.0], [1927.0, 15337.0], [1937.0, 4207.0], [1935.0, 5216.0], [1929.0, 10061.0], [2302.0, 331.0], [2298.0, 331.0], [2294.0, 330.0], [2290.0, 331.0], [2318.0, 1026.0], [2314.0, 117.0], [2310.0, 130.5], [2306.0, 330.0], [2534.0, 275.0], [2538.0, 274.5], [2542.0, 288.5], [2498.0, 303.0], [2510.0, 302.0], [2494.0, 307.7692307692308], [2490.0, 308.0], [2482.0, 310.0], [2478.0, 309.0], [2474.0, 309.6666666666667], [2754.0, 759.0], [2798.0, 263.0], [2750.0, 922.6666666666667], [2746.0, 1252.0], [2762.0, 266.0], [2758.0, 264.0], [2926.0, 253.66666666666666], [2882.0, 257.0], [2886.0, 283.45454545454544], [2890.0, 256.5], [2898.0, 256.5], [2902.0, 344.72727272727275], [2906.0, 326.625], [2910.0, 254.0], [2934.0, 252.33333333333334], [2930.0, 253.6], [2922.0, 255.0], [2918.0, 254.28571428571428], [2914.0, 253.92857142857142], [2818.0, 261.5], [2878.0, 257.1428571428571], [2874.0, 258.0833333333333], [2866.0, 259.0], [2862.0, 258.0], [2854.0, 258.0], [2850.0, 259.0], [2998.0, 284.72727272727275], [2946.0, 253.0], [2950.0, 744.0], [2958.0, 347.6666666666667], [2966.0, 345.3333333333333], [2974.0, 179.75], [2994.0, 288.33333333333337], [2990.0, 289.17777777777775], [2986.0, 290.2352941176471], [2982.0, 213.66666666666669], [2303.0, 331.0], [2299.0, 330.0], [2295.0, 330.25], [2291.0, 331.0], [2319.0, 1025.0], [2315.0, 116.0], [2307.0, 330.0], [2531.0, 274.0], [2507.0, 301.0], [2499.0, 305.0], [2511.0, 300.0], [2535.0, 274.25], [2491.0, 308.4], [2487.0, 308.875], [2483.0, 310.0], [2479.0, 309.5555555555555], [2475.0, 309.3333333333333], [2467.0, 310.70000000000005], [2527.0, 275.6363636363636], [2759.0, 264.0], [2755.0, 265.0], [2927.0, 254.0], [2883.0, 398.00000000000006], [2931.0, 253.0], [2935.0, 254.0], [2887.0, 256.0], [2891.0, 256.49999999999994], [2895.0, 257.0], [2903.0, 256.0], [2907.0, 254.57142857142858], [2911.0, 254.66666666666666], [2923.0, 254.14285714285714], [2919.0, 254.5], [2915.0, 253.66666666666666], [2879.0, 257.0], [2835.0, 260.0], [2875.0, 257.8181818181818], [2871.0, 258.0], [2867.0, 258.6363636363636], [2863.0, 259.0], [2859.0, 258.0], [2855.0, 258.0], [2947.0, 253.0], [2991.0, 288.52941176470586], [2951.0, 254.0], [2955.0, 252.0], [2959.0, 251.0], [2967.0, 250.0], [2971.0, 185.66666666666666], [2999.0, 126.52499999999999], [2987.0, 290.1], [2983.0, 290.49019607843144], [2979.0, 179.33333333333334], [1.0, 100231.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[2971.455994792045, 4128.395013916645]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 3000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 3897.6, "minX": 1.682892E12, "maxY": 410590.36666666664, "series": [{"data": [[1.68289224E12, 356644.93333333335], [1.6828923E12, 84862.05], [1.68289212E12, 378652.3333333333], [1.68289218E12, 410590.36666666664], [1.682892E12, 194370.86666666667], [1.68289206E12, 379317.05], [1.68289236E12, 5599.566666666667]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.68289224E12, 250521.6], [1.6828923E12, 60698.4], [1.68289212E12, 259324.8], [1.68289218E12, 287506.8], [1.682892E12, 137524.8], [1.68289206E12, 260828.4], [1.68289236E12, 3897.6]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68289236E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 2135.8500488639006, "minX": 1.682892E12, "maxY": 93513.92456896552, "series": [{"data": [[1.68289224E12, 3201.113845122343], [1.6828923E12, 6021.743980071968], [1.68289212E12, 5219.230442887413], [1.68289218E12, 3188.818359660123], [1.682892E12, 2135.8500488639006], [1.68289206E12, 4235.984369006529], [1.68289236E12, 93513.92456896552]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68289236E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 2135.8314194966974, "minX": 1.682892E12, "maxY": 93513.9073275862, "series": [{"data": [[1.68289224E12, 3179.26211867248], [1.6828923E12, 6021.734846388057], [1.68289212E12, 4914.261200745705], [1.68289218E12, 3149.7306490700557], [1.682892E12, 2135.8314194966974], [1.68289206E12, 4011.849699526894], [1.68289236E12, 93513.9073275862]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68289236E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.019396551724137914, "minX": 1.682892E12, "maxY": 1842.2321463006829, "series": [{"data": [[1.68289224E12, 1189.0974187059912], [1.6828923E12, 1166.9778577359555], [1.68289212E12, 1842.2321463006829], [1.68289218E12, 1373.4969488160286], [1.682892E12, 40.082091375519056], [1.68289206E12, 1355.743606955633], [1.68289236E12, 0.019396551724137914]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68289236E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 3.0, "minX": 1.682892E12, "maxY": 230933.0, "series": [{"data": [[1.68289224E12, 230933.0], [1.6828923E12, 128349.0], [1.68289212E12, 148143.0], [1.68289218E12, 211897.0], [1.682892E12, 41728.0], [1.68289206E12, 98885.0], [1.68289236E12, 100336.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.68289224E12, 6466.500000000007], [1.6828923E12, 20065.2], [1.68289212E12, 1218.9000000000015], [1.68289218E12, 651.0], [1.682892E12, 9131.7], [1.68289206E12, 10744.0], [1.68289236E12, 100321.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.68289224E12, 65131.0], [1.6828923E12, 48207.32999999999], [1.68289212E12, 130487.99], [1.68289218E12, 127939.0], [1.682892E12, 27241.0], [1.68289206E12, 73833.99], [1.68289236E12, 100333.35]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.68289224E12, 9352.0], [1.6828923E12, 33362.95], [1.68289212E12, 8479.95], [1.68289218E12, 16994.3500000003], [1.682892E12, 11001.0], [1.68289206E12, 16341.900000000001], [1.68289236E12, 100327.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.68289224E12, 11.0], [1.6828923E12, 34.0], [1.68289212E12, 16.0], [1.68289218E12, 10.0], [1.682892E12, 10.0], [1.68289206E12, 3.0], [1.68289236E12, 48802.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.68289224E12, 275.0], [1.6828923E12, 318.0], [1.68289212E12, 288.0], [1.68289218E12, 281.0], [1.682892E12, 147.0], [1.68289206E12, 52.0], [1.68289236E12, 100089.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68289236E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 6.0, "minX": 1.0, "maxY": 211575.0, "series": [{"data": [[2.0, 56676.5], [3.0, 41464.5], [4.0, 43545.0], [5.0, 18046.5], [6.0, 16284.0], [7.0, 3578.0], [8.0, 9305.5], [9.0, 3262.0], [10.0, 5674.5], [11.0, 41677.0], [14.0, 3307.5], [15.0, 32553.0], [17.0, 8238.5], [18.0, 52382.5], [19.0, 99073.5], [21.0, 11471.0], [26.0, 6176.0], [28.0, 12716.0], [29.0, 57389.0], [31.0, 197.0], [32.0, 15813.0], [34.0, 1193.5], [41.0, 7303.0], [43.0, 4126.0], [47.0, 35212.0], [56.0, 57.5], [59.0, 8847.0], [58.0, 63.0], [60.0, 32387.0], [63.0, 211575.0], [65.0, 36764.0], [70.0, 67.0], [75.0, 71.0], [83.0, 100044.0], [87.0, 213.0], [88.0, 5181.0], [92.0, 100320.0], [97.0, 234.0], [103.0, 4393.0], [107.0, 3447.0], [108.0, 15.0], [109.0, 33397.0], [119.0, 99.0], [120.0, 118.0], [125.0, 224.0], [127.0, 22208.0], [135.0, 8371.0], [128.0, 153.0], [140.0, 12706.0], [150.0, 87.5], [145.0, 293.0], [160.0, 33212.0], [171.0, 105.0], [168.0, 100103.0], [183.0, 148.0], [186.0, 143.0], [190.0, 151.0], [211.0, 339.0], [216.0, 202.0], [223.0, 309.0], [227.0, 19272.0], [242.0, 7.0], [260.0, 119.0], [267.0, 82.0], [256.0, 278.0], [344.0, 8888.0], [347.0, 10988.0], [361.0, 10704.0], [353.0, 254.0], [357.0, 257.0], [356.0, 247.0], [372.0, 4205.5], [397.0, 244.0], [390.0, 290.0], [427.0, 11411.0], [429.0, 261.0], [421.0, 100064.0], [423.0, 249.0], [418.0, 189.0], [435.0, 212.0], [447.0, 267.0], [436.0, 276.0], [455.0, 7370.5], [457.0, 10261.0], [450.0, 251.0], [475.0, 10024.0], [478.0, 9261.0], [465.0, 8626.0], [494.0, 170.0], [481.0, 191.0], [495.0, 8281.0], [480.0, 73092.5], [482.0, 452.0], [483.0, 236.0], [487.0, 276.0], [490.0, 291.0], [493.0, 281.0], [496.0, 272.0], [504.0, 219.0], [506.0, 161.0], [502.0, 141.0], [507.0, 289.0], [508.0, 279.0], [499.0, 493.0], [497.0, 255.0], [498.0, 234.0], [500.0, 278.0], [503.0, 272.0], [501.0, 260.0], [536.0, 130.0], [533.0, 201.0], [517.0, 10078.0], [540.0, 269.0], [529.0, 8474.0], [525.0, 277.0], [514.0, 283.0], [541.0, 285.0], [520.0, 273.0], [549.0, 131.0], [563.0, 61.0], [554.0, 475.0], [557.0, 220.0], [566.0, 266.0], [604.0, 169.0], [588.0, 476.0], [576.0, 303.0], [630.0, 120.0], [636.0, 217.0], [661.0, 149.0], [668.0, 74.0], [649.0, 9786.0], [656.0, 192.0], [676.0, 288.0], [700.0, 347.0], [689.0, 277.0], [714.0, 40.0], [712.0, 316.0], [720.0, 373.0], [731.0, 273.0], [756.0, 92.0], [760.0, 236.0], [797.0, 230.0], [768.0, 6.0], [781.0, 374.0], [776.0, 252.0], [826.0, 277.0], [802.0, 44.0], [821.0, 243.0], [825.0, 283.0], [861.0, 264.0], [882.0, 95.0], [890.0, 10739.0], [891.0, 260.0], [892.0, 268.0], [871.0, 266.0], [913.0, 289.0], [923.0, 294.0], [919.0, 286.0], [972.0, 138.0], [985.0, 209.0], [991.0, 233.0], [981.0, 245.0], [971.0, 273.0], [964.0, 525.0], [979.0, 351.0], [967.0, 445.0], [1004.0, 217.0], [1000.0, 245.0], [1016.0, 422.0], [1003.0, 435.0], [998.0, 268.0], [1037.0, 171.0], [1057.0, 38.0], [1079.0, 403.0], [1031.0, 469.0], [1074.0, 375.0], [1061.0, 385.0], [1062.0, 434.0], [1125.0, 151.0], [1092.0, 296.0], [1127.0, 378.0], [1107.0, 296.0], [1100.0, 271.0], [1165.0, 285.0], [1242.0, 83.0], [1244.0, 405.0], [1260.0, 310.0], [1378.0, 20.0], [1407.0, 287.0], [1361.0, 246.0], [1358.0, 299.0], [1416.0, 264.0], [1446.0, 320.0], [1433.0, 314.5], [1513.0, 169.0], [1520.0, 688.0], [1510.0, 287.0], [1483.0, 541.0], [1565.0, 34.0], [1537.0, 12.0], [1579.0, 22.0], [1686.0, 130.0], [1734.0, 8.0], [1916.0, 286.0], [1873.0, 631.0], [2521.0, 503.0], [1.0, 7746.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[554.0, 20955.0], [10.0, 63974.0], [47.0, 66633.0], [802.0, 8285.5], [913.0, 117695.0], [59.0, 48408.0], [1057.0, 15834.0], [1061.0, 74601.0], [1092.0, 7401.0], [17.0, 108548.0], [19.0, 54331.0], [5.0, 29430.0], [1510.0, 34629.0], [1537.0, 7937.0], [1579.0, 9265.0], [108.0, 53371.0], [465.0, 12106.0], [1916.0, 45867.0], [506.0, 31735.5]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 2521.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 211575.0, "series": [{"data": [[2.0, 56676.5], [3.0, 41464.5], [4.0, 43545.0], [5.0, 18046.5], [6.0, 16284.0], [7.0, 3578.0], [8.0, 9305.5], [9.0, 3262.0], [10.0, 5674.5], [11.0, 41677.0], [14.0, 3307.5], [15.0, 32553.0], [17.0, 8238.5], [18.0, 52382.5], [19.0, 99073.5], [21.0, 11471.0], [26.0, 6176.0], [28.0, 12716.0], [29.0, 57389.0], [31.0, 197.0], [32.0, 15813.0], [34.0, 1193.5], [41.0, 7303.0], [43.0, 4126.0], [47.0, 35211.5], [56.0, 57.5], [59.0, 8847.0], [58.0, 63.0], [60.0, 32387.0], [63.0, 211575.0], [65.0, 36764.0], [70.0, 67.0], [75.0, 71.0], [83.0, 100044.0], [87.0, 213.0], [88.0, 5181.0], [92.0, 100320.0], [97.0, 234.0], [103.0, 4393.0], [107.0, 3447.0], [108.0, 15.0], [109.0, 33397.0], [119.0, 99.0], [120.0, 118.0], [125.0, 224.0], [127.0, 22208.0], [135.0, 8371.0], [128.0, 153.0], [140.0, 12706.0], [150.0, 87.5], [145.0, 293.0], [160.0, 33212.0], [171.0, 105.0], [168.0, 100103.0], [183.0, 148.0], [186.0, 143.0], [190.0, 151.0], [211.0, 339.0], [216.0, 202.0], [223.0, 309.0], [227.0, 19272.0], [242.0, 7.0], [260.0, 119.0], [267.0, 82.0], [256.0, 278.0], [344.0, 8888.0], [347.0, 10988.0], [361.0, 10704.0], [353.0, 254.0], [357.0, 257.0], [356.0, 247.0], [372.0, 4205.5], [397.0, 244.0], [390.0, 290.0], [427.0, 11411.0], [429.0, 261.0], [421.0, 100064.0], [423.0, 249.0], [418.0, 189.0], [435.0, 212.0], [447.0, 267.0], [436.0, 276.0], [455.0, 7370.5], [457.0, 10261.0], [450.0, 251.0], [475.0, 10024.0], [478.0, 9261.0], [465.0, 8626.0], [494.0, 170.0], [481.0, 191.0], [495.0, 8281.0], [480.0, 73092.5], [482.0, 452.0], [483.0, 236.0], [487.0, 276.0], [490.0, 291.0], [493.0, 281.0], [496.0, 272.0], [504.0, 218.5], [506.0, 161.0], [502.0, 141.0], [507.0, 289.0], [508.0, 279.0], [499.0, 493.0], [497.0, 255.0], [498.0, 234.0], [500.0, 278.0], [503.0, 272.0], [501.0, 260.0], [536.0, 130.0], [533.0, 201.0], [517.0, 10078.0], [540.0, 269.0], [529.0, 8474.0], [525.0, 277.0], [514.0, 283.0], [541.0, 285.0], [520.0, 273.0], [549.0, 131.0], [563.0, 61.0], [554.0, 475.0], [557.0, 220.0], [566.0, 266.0], [604.0, 169.0], [588.0, 476.0], [576.0, 303.0], [630.0, 120.0], [636.0, 217.0], [661.0, 149.0], [668.0, 74.0], [649.0, 9786.0], [656.0, 192.0], [676.0, 288.0], [700.0, 347.0], [689.0, 277.0], [714.0, 40.0], [712.0, 316.0], [720.0, 373.0], [731.0, 273.0], [756.0, 92.0], [760.0, 236.0], [797.0, 230.0], [768.0, 6.0], [781.0, 374.0], [776.0, 252.0], [826.0, 277.0], [802.0, 44.0], [821.0, 243.0], [825.0, 283.0], [861.0, 264.0], [882.0, 95.0], [890.0, 10739.0], [891.0, 260.0], [892.0, 268.0], [871.0, 266.0], [913.0, 289.0], [923.0, 294.0], [919.0, 286.0], [972.0, 138.0], [985.0, 209.0], [991.0, 233.0], [981.0, 245.0], [971.0, 273.0], [964.0, 525.0], [979.0, 351.0], [967.0, 445.0], [1004.0, 217.0], [1000.0, 245.0], [1016.0, 422.0], [1003.0, 435.0], [998.0, 268.0], [1037.0, 171.0], [1057.0, 38.0], [1079.0, 403.0], [1031.0, 469.0], [1074.0, 375.0], [1061.0, 385.0], [1062.0, 434.0], [1125.0, 151.0], [1092.0, 296.0], [1127.0, 378.0], [1107.0, 296.0], [1100.0, 271.0], [1165.0, 285.0], [1242.0, 83.0], [1244.0, 405.0], [1260.0, 310.0], [1378.0, 20.0], [1407.0, 287.0], [1361.0, 246.0], [1358.0, 299.0], [1416.0, 264.0], [1446.0, 320.0], [1433.0, 314.5], [1513.0, 169.0], [1520.0, 688.0], [1510.0, 287.0], [1483.0, 541.0], [1565.0, 34.0], [1537.0, 12.0], [1579.0, 21.0], [1686.0, 130.0], [1734.0, 8.0], [1916.0, 286.0], [1873.0, 631.0], [2521.0, 503.0], [1.0, 7746.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[554.0, 0.0], [10.0, 0.0], [47.0, 0.0], [802.0, 0.0], [913.0, 0.0], [59.0, 0.0], [1057.0, 0.0], [1061.0, 0.0], [1092.0, 0.0], [17.0, 0.0], [19.0, 0.0], [5.0, 0.0], [1510.0, 0.0], [1537.0, 0.0], [1579.0, 0.0], [108.0, 0.0], [465.0, 0.0], [1916.0, 0.0], [506.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 2521.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 117.31666666666666, "minX": 1.682892E12, "maxY": 583.3333333333334, "series": [{"data": [[1.68289224E12, 475.0], [1.6828923E12, 117.31666666666666], [1.68289212E12, 500.0], [1.68289218E12, 583.3333333333334], [1.682892E12, 322.8666666666667], [1.68289206E12, 510.46666666666664]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6828923E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.1, "minX": 1.682892E12, "maxY": 570.45, "series": [{"data": [[1.68289224E12, 497.06666666666666], [1.6828923E12, 120.43333333333334], [1.68289212E12, 514.5333333333333], [1.68289218E12, 570.45], [1.682892E12, 272.8666666666667], [1.68289206E12, 517.5166666666667], [1.68289236E12, 7.733333333333333]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.68289224E12, 0.1], [1.68289212E12, 4.033333333333333], [1.68289218E12, 0.36666666666666664], [1.68289206E12, 3.8833333333333333]], "isOverall": false, "label": "Non HTTP response code: java.net.SocketException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68289236E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.1, "minX": 1.682892E12, "maxY": 570.45, "series": [{"data": [[1.68289224E12, 497.06666666666666], [1.6828923E12, 120.43333333333334], [1.68289212E12, 514.5333333333333], [1.68289218E12, 570.45], [1.682892E12, 272.8666666666667], [1.68289206E12, 517.5166666666667], [1.68289236E12, 7.733333333333333]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.68289224E12, 0.1], [1.68289212E12, 4.033333333333333], [1.68289218E12, 0.36666666666666664], [1.68289206E12, 3.8833333333333333]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68289236E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.1, "minX": 1.682892E12, "maxY": 570.45, "series": [{"data": [[1.68289224E12, 497.06666666666666], [1.6828923E12, 120.43333333333334], [1.68289212E12, 514.5333333333333], [1.68289218E12, 570.45], [1.682892E12, 272.8666666666667], [1.68289206E12, 517.5166666666667], [1.68289236E12, 7.733333333333333]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.68289224E12, 0.1], [1.68289212E12, 4.033333333333333], [1.68289218E12, 0.36666666666666664], [1.68289206E12, 3.8833333333333333]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68289236E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

