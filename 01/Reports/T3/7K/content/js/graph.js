/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 5.0, "minX": 0.0, "maxY": 227386.0, "series": [{"data": [[0.0, 5.0], [0.1, 21.0], [0.2, 26.0], [0.3, 28.0], [0.4, 30.0], [0.5, 32.0], [0.6, 35.0], [0.7, 37.0], [0.8, 39.0], [0.9, 40.0], [1.0, 41.0], [1.1, 42.0], [1.2, 43.0], [1.3, 45.0], [1.4, 46.0], [1.5, 47.0], [1.6, 49.0], [1.7, 51.0], [1.8, 51.0], [1.9, 52.0], [2.0, 53.0], [2.1, 54.0], [2.2, 55.0], [2.3, 56.0], [2.4, 57.0], [2.5, 58.0], [2.6, 59.0], [2.7, 59.0], [2.8, 60.0], [2.9, 61.0], [3.0, 61.0], [3.1, 62.0], [3.2, 63.0], [3.3, 63.0], [3.4, 64.0], [3.5, 65.0], [3.6, 65.0], [3.7, 66.0], [3.8, 66.0], [3.9, 67.0], [4.0, 68.0], [4.1, 68.0], [4.2, 69.0], [4.3, 70.0], [4.4, 70.0], [4.5, 71.0], [4.6, 72.0], [4.7, 73.0], [4.8, 74.0], [4.9, 74.0], [5.0, 75.0], [5.1, 75.0], [5.2, 76.0], [5.3, 76.0], [5.4, 77.0], [5.5, 77.0], [5.6, 78.0], [5.7, 78.0], [5.8, 79.0], [5.9, 79.0], [6.0, 80.0], [6.1, 80.0], [6.2, 81.0], [6.3, 81.0], [6.4, 82.0], [6.5, 82.0], [6.6, 83.0], [6.7, 83.0], [6.8, 84.0], [6.9, 85.0], [7.0, 85.0], [7.1, 86.0], [7.2, 86.0], [7.3, 87.0], [7.4, 87.0], [7.5, 87.0], [7.6, 88.0], [7.7, 88.0], [7.8, 89.0], [7.9, 89.0], [8.0, 90.0], [8.1, 90.0], [8.2, 91.0], [8.3, 91.0], [8.4, 92.0], [8.5, 92.0], [8.6, 92.0], [8.7, 92.0], [8.8, 93.0], [8.9, 93.0], [9.0, 93.0], [9.1, 93.0], [9.2, 94.0], [9.3, 94.0], [9.4, 94.0], [9.5, 94.0], [9.6, 95.0], [9.7, 95.0], [9.8, 95.0], [9.9, 95.0], [10.0, 95.0], [10.1, 96.0], [10.2, 96.0], [10.3, 96.0], [10.4, 96.0], [10.5, 96.0], [10.6, 97.0], [10.7, 97.0], [10.8, 97.0], [10.9, 97.0], [11.0, 98.0], [11.1, 98.0], [11.2, 98.0], [11.3, 99.0], [11.4, 99.0], [11.5, 99.0], [11.6, 99.0], [11.7, 100.0], [11.8, 100.0], [11.9, 100.0], [12.0, 101.0], [12.1, 101.0], [12.2, 101.0], [12.3, 102.0], [12.4, 102.0], [12.5, 102.0], [12.6, 102.0], [12.7, 103.0], [12.8, 103.0], [12.9, 104.0], [13.0, 104.0], [13.1, 104.0], [13.2, 104.0], [13.3, 104.0], [13.4, 104.0], [13.5, 105.0], [13.6, 105.0], [13.7, 105.0], [13.8, 106.0], [13.9, 106.0], [14.0, 106.0], [14.1, 106.0], [14.2, 107.0], [14.3, 107.0], [14.4, 107.0], [14.5, 108.0], [14.6, 108.0], [14.7, 108.0], [14.8, 109.0], [14.9, 109.0], [15.0, 109.0], [15.1, 109.0], [15.2, 109.0], [15.3, 109.0], [15.4, 110.0], [15.5, 110.0], [15.6, 110.0], [15.7, 110.0], [15.8, 110.0], [15.9, 110.0], [16.0, 110.0], [16.1, 111.0], [16.2, 111.0], [16.3, 111.0], [16.4, 111.0], [16.5, 112.0], [16.6, 112.0], [16.7, 112.0], [16.8, 112.0], [16.9, 112.0], [17.0, 113.0], [17.1, 113.0], [17.2, 113.0], [17.3, 114.0], [17.4, 114.0], [17.5, 114.0], [17.6, 115.0], [17.7, 115.0], [17.8, 115.0], [17.9, 115.0], [18.0, 115.0], [18.1, 116.0], [18.2, 116.0], [18.3, 116.0], [18.4, 116.0], [18.5, 117.0], [18.6, 117.0], [18.7, 117.0], [18.8, 117.0], [18.9, 117.0], [19.0, 118.0], [19.1, 118.0], [19.2, 118.0], [19.3, 118.0], [19.4, 119.0], [19.5, 119.0], [19.6, 119.0], [19.7, 119.0], [19.8, 120.0], [19.9, 120.0], [20.0, 120.0], [20.1, 120.0], [20.2, 120.0], [20.3, 120.0], [20.4, 121.0], [20.5, 121.0], [20.6, 121.0], [20.7, 121.0], [20.8, 122.0], [20.9, 122.0], [21.0, 122.0], [21.1, 122.0], [21.2, 123.0], [21.3, 123.0], [21.4, 123.0], [21.5, 123.0], [21.6, 123.0], [21.7, 124.0], [21.8, 124.0], [21.9, 124.0], [22.0, 124.0], [22.1, 124.0], [22.2, 124.0], [22.3, 125.0], [22.4, 125.0], [22.5, 125.0], [22.6, 125.0], [22.7, 125.0], [22.8, 126.0], [22.9, 126.0], [23.0, 126.0], [23.1, 126.0], [23.2, 126.0], [23.3, 126.0], [23.4, 126.0], [23.5, 126.0], [23.6, 127.0], [23.7, 127.0], [23.8, 127.0], [23.9, 127.0], [24.0, 127.0], [24.1, 127.0], [24.2, 127.0], [24.3, 127.0], [24.4, 128.0], [24.5, 128.0], [24.6, 128.0], [24.7, 128.0], [24.8, 128.0], [24.9, 128.0], [25.0, 128.0], [25.1, 128.0], [25.2, 129.0], [25.3, 129.0], [25.4, 129.0], [25.5, 129.0], [25.6, 129.0], [25.7, 129.0], [25.8, 129.0], [25.9, 130.0], [26.0, 130.0], [26.1, 130.0], [26.2, 130.0], [26.3, 130.0], [26.4, 130.0], [26.5, 130.0], [26.6, 130.0], [26.7, 131.0], [26.8, 131.0], [26.9, 131.0], [27.0, 131.0], [27.1, 131.0], [27.2, 131.0], [27.3, 131.0], [27.4, 131.0], [27.5, 131.0], [27.6, 131.0], [27.7, 132.0], [27.8, 132.0], [27.9, 132.0], [28.0, 132.0], [28.1, 132.0], [28.2, 132.0], [28.3, 132.0], [28.4, 133.0], [28.5, 133.0], [28.6, 133.0], [28.7, 133.0], [28.8, 133.0], [28.9, 133.0], [29.0, 133.0], [29.1, 133.0], [29.2, 134.0], [29.3, 134.0], [29.4, 134.0], [29.5, 134.0], [29.6, 134.0], [29.7, 134.0], [29.8, 134.0], [29.9, 134.0], [30.0, 135.0], [30.1, 135.0], [30.2, 135.0], [30.3, 135.0], [30.4, 135.0], [30.5, 135.0], [30.6, 135.0], [30.7, 135.0], [30.8, 135.0], [30.9, 136.0], [31.0, 136.0], [31.1, 136.0], [31.2, 136.0], [31.3, 136.0], [31.4, 136.0], [31.5, 136.0], [31.6, 136.0], [31.7, 136.0], [31.8, 137.0], [31.9, 137.0], [32.0, 137.0], [32.1, 137.0], [32.2, 137.0], [32.3, 137.0], [32.4, 137.0], [32.5, 137.0], [32.6, 137.0], [32.7, 137.0], [32.8, 137.0], [32.9, 137.0], [33.0, 138.0], [33.1, 138.0], [33.2, 138.0], [33.3, 138.0], [33.4, 138.0], [33.5, 138.0], [33.6, 138.0], [33.7, 138.0], [33.8, 138.0], [33.9, 138.0], [34.0, 138.0], [34.1, 138.0], [34.2, 139.0], [34.3, 139.0], [34.4, 139.0], [34.5, 139.0], [34.6, 139.0], [34.7, 139.0], [34.8, 139.0], [34.9, 139.0], [35.0, 139.0], [35.1, 139.0], [35.2, 139.0], [35.3, 139.0], [35.4, 140.0], [35.5, 140.0], [35.6, 140.0], [35.7, 140.0], [35.8, 140.0], [35.9, 140.0], [36.0, 140.0], [36.1, 141.0], [36.2, 141.0], [36.3, 141.0], [36.4, 141.0], [36.5, 141.0], [36.6, 141.0], [36.7, 141.0], [36.8, 141.0], [36.9, 141.0], [37.0, 141.0], [37.1, 142.0], [37.2, 142.0], [37.3, 142.0], [37.4, 142.0], [37.5, 142.0], [37.6, 142.0], [37.7, 142.0], [37.8, 142.0], [37.9, 142.0], [38.0, 142.0], [38.1, 143.0], [38.2, 143.0], [38.3, 143.0], [38.4, 143.0], [38.5, 143.0], [38.6, 143.0], [38.7, 144.0], [38.8, 144.0], [38.9, 144.0], [39.0, 144.0], [39.1, 144.0], [39.2, 144.0], [39.3, 145.0], [39.4, 145.0], [39.5, 145.0], [39.6, 145.0], [39.7, 145.0], [39.8, 145.0], [39.9, 145.0], [40.0, 145.0], [40.1, 146.0], [40.2, 146.0], [40.3, 146.0], [40.4, 146.0], [40.5, 146.0], [40.6, 146.0], [40.7, 146.0], [40.8, 146.0], [40.9, 147.0], [41.0, 147.0], [41.1, 147.0], [41.2, 147.0], [41.3, 147.0], [41.4, 147.0], [41.5, 147.0], [41.6, 148.0], [41.7, 148.0], [41.8, 148.0], [41.9, 148.0], [42.0, 148.0], [42.1, 148.0], [42.2, 148.0], [42.3, 149.0], [42.4, 149.0], [42.5, 149.0], [42.6, 149.0], [42.7, 149.0], [42.8, 149.0], [42.9, 149.0], [43.0, 149.0], [43.1, 150.0], [43.2, 150.0], [43.3, 150.0], [43.4, 150.0], [43.5, 150.0], [43.6, 150.0], [43.7, 150.0], [43.8, 151.0], [43.9, 151.0], [44.0, 151.0], [44.1, 151.0], [44.2, 151.0], [44.3, 151.0], [44.4, 151.0], [44.5, 151.0], [44.6, 151.0], [44.7, 151.0], [44.8, 152.0], [44.9, 152.0], [45.0, 152.0], [45.1, 152.0], [45.2, 152.0], [45.3, 152.0], [45.4, 152.0], [45.5, 152.0], [45.6, 152.0], [45.7, 152.0], [45.8, 152.0], [45.9, 152.0], [46.0, 153.0], [46.1, 153.0], [46.2, 153.0], [46.3, 153.0], [46.4, 153.0], [46.5, 153.0], [46.6, 153.0], [46.7, 153.0], [46.8, 153.0], [46.9, 153.0], [47.0, 153.0], [47.1, 154.0], [47.2, 154.0], [47.3, 154.0], [47.4, 154.0], [47.5, 154.0], [47.6, 154.0], [47.7, 154.0], [47.8, 154.0], [47.9, 154.0], [48.0, 154.0], [48.1, 154.0], [48.2, 155.0], [48.3, 155.0], [48.4, 155.0], [48.5, 155.0], [48.6, 155.0], [48.7, 155.0], [48.8, 155.0], [48.9, 155.0], [49.0, 155.0], [49.1, 155.0], [49.2, 155.0], [49.3, 156.0], [49.4, 156.0], [49.5, 156.0], [49.6, 156.0], [49.7, 156.0], [49.8, 156.0], [49.9, 156.0], [50.0, 156.0], [50.1, 157.0], [50.2, 157.0], [50.3, 157.0], [50.4, 157.0], [50.5, 157.0], [50.6, 157.0], [50.7, 158.0], [50.8, 158.0], [50.9, 158.0], [51.0, 158.0], [51.1, 159.0], [51.2, 159.0], [51.3, 159.0], [51.4, 159.0], [51.5, 159.0], [51.6, 160.0], [51.7, 160.0], [51.8, 160.0], [51.9, 160.0], [52.0, 160.0], [52.1, 160.0], [52.2, 160.0], [52.3, 161.0], [52.4, 161.0], [52.5, 161.0], [52.6, 161.0], [52.7, 161.0], [52.8, 161.0], [52.9, 161.0], [53.0, 161.0], [53.1, 162.0], [53.2, 162.0], [53.3, 162.0], [53.4, 162.0], [53.5, 162.0], [53.6, 162.0], [53.7, 162.0], [53.8, 162.0], [53.9, 163.0], [54.0, 163.0], [54.1, 163.0], [54.2, 163.0], [54.3, 163.0], [54.4, 163.0], [54.5, 163.0], [54.6, 163.0], [54.7, 163.0], [54.8, 164.0], [54.9, 164.0], [55.0, 164.0], [55.1, 164.0], [55.2, 164.0], [55.3, 164.0], [55.4, 164.0], [55.5, 165.0], [55.6, 165.0], [55.7, 165.0], [55.8, 165.0], [55.9, 165.0], [56.0, 166.0], [56.1, 166.0], [56.2, 166.0], [56.3, 166.0], [56.4, 166.0], [56.5, 167.0], [56.6, 167.0], [56.7, 167.0], [56.8, 167.0], [56.9, 167.0], [57.0, 167.0], [57.1, 168.0], [57.2, 168.0], [57.3, 168.0], [57.4, 168.0], [57.5, 168.0], [57.6, 169.0], [57.7, 169.0], [57.8, 169.0], [57.9, 169.0], [58.0, 169.0], [58.1, 170.0], [58.2, 170.0], [58.3, 170.0], [58.4, 170.0], [58.5, 171.0], [58.6, 171.0], [58.7, 171.0], [58.8, 172.0], [58.9, 172.0], [59.0, 172.0], [59.1, 173.0], [59.2, 173.0], [59.3, 173.0], [59.4, 174.0], [59.5, 174.0], [59.6, 175.0], [59.7, 175.0], [59.8, 176.0], [59.9, 176.0], [60.0, 177.0], [60.1, 177.0], [60.2, 177.0], [60.3, 178.0], [60.4, 179.0], [60.5, 179.0], [60.6, 180.0], [60.7, 180.0], [60.8, 180.0], [60.9, 181.0], [61.0, 181.0], [61.1, 182.0], [61.2, 182.0], [61.3, 182.0], [61.4, 183.0], [61.5, 183.0], [61.6, 184.0], [61.7, 184.0], [61.8, 185.0], [61.9, 185.0], [62.0, 185.0], [62.1, 185.0], [62.2, 186.0], [62.3, 186.0], [62.4, 186.0], [62.5, 186.0], [62.6, 187.0], [62.7, 187.0], [62.8, 188.0], [62.9, 189.0], [63.0, 190.0], [63.1, 190.0], [63.2, 191.0], [63.3, 191.0], [63.4, 192.0], [63.5, 192.0], [63.6, 193.0], [63.7, 193.0], [63.8, 196.0], [63.9, 198.0], [64.0, 200.0], [64.1, 202.0], [64.2, 205.0], [64.3, 207.0], [64.4, 208.0], [64.5, 209.0], [64.6, 209.0], [64.7, 210.0], [64.8, 210.0], [64.9, 212.0], [65.0, 216.0], [65.1, 219.0], [65.2, 220.0], [65.3, 221.0], [65.4, 223.0], [65.5, 225.0], [65.6, 225.0], [65.7, 228.0], [65.8, 229.0], [65.9, 229.0], [66.0, 229.0], [66.1, 230.0], [66.2, 230.0], [66.3, 230.0], [66.4, 231.0], [66.5, 231.0], [66.6, 232.0], [66.7, 232.0], [66.8, 233.0], [66.9, 234.0], [67.0, 236.0], [67.1, 236.0], [67.2, 237.0], [67.3, 238.0], [67.4, 240.0], [67.5, 241.0], [67.6, 243.0], [67.7, 244.0], [67.8, 246.0], [67.9, 247.0], [68.0, 248.0], [68.1, 254.0], [68.2, 262.0], [68.3, 264.0], [68.4, 266.0], [68.5, 271.0], [68.6, 273.0], [68.7, 277.0], [68.8, 278.0], [68.9, 279.0], [69.0, 282.0], [69.1, 285.0], [69.2, 288.0], [69.3, 293.0], [69.4, 298.0], [69.5, 346.0], [69.6, 364.0], [69.7, 365.0], [69.8, 367.0], [69.9, 408.0], [70.0, 424.0], [70.1, 425.0], [70.2, 426.0], [70.3, 429.0], [70.4, 431.0], [70.5, 438.0], [70.6, 488.0], [70.7, 579.0], [70.8, 646.0], [70.9, 676.0], [71.0, 899.0], [71.1, 1038.0], [71.2, 1147.0], [71.3, 1243.0], [71.4, 1330.0], [71.5, 1398.0], [71.6, 1525.0], [71.7, 1745.0], [71.8, 1970.0], [71.9, 2077.0], [72.0, 2123.0], [72.1, 2233.0], [72.2, 2431.0], [72.3, 2655.0], [72.4, 2846.0], [72.5, 3072.0], [72.6, 3312.0], [72.7, 3422.0], [72.8, 3523.0], [72.9, 3552.0], [73.0, 3568.0], [73.1, 3573.0], [73.2, 3748.0], [73.3, 3776.0], [73.4, 3870.0], [73.5, 3953.0], [73.6, 3977.0], [73.7, 3980.0], [73.8, 3984.0], [73.9, 4297.0], [74.0, 4349.0], [74.1, 4392.0], [74.2, 4520.0], [74.3, 4589.0], [74.4, 4622.0], [74.5, 4799.0], [74.6, 4891.0], [74.7, 4918.0], [74.8, 4930.0], [74.9, 4954.0], [75.0, 5010.0], [75.1, 5258.0], [75.2, 5636.0], [75.3, 5673.0], [75.4, 5702.0], [75.5, 5727.0], [75.6, 5787.0], [75.7, 5897.0], [75.8, 5925.0], [75.9, 5957.0], [76.0, 6004.0], [76.1, 6006.0], [76.2, 6048.0], [76.3, 6115.0], [76.4, 6127.0], [76.5, 6128.0], [76.6, 6135.0], [76.7, 6161.0], [76.8, 6176.0], [76.9, 6209.0], [77.0, 6302.0], [77.1, 6525.0], [77.2, 6769.0], [77.3, 6795.0], [77.4, 6803.0], [77.5, 6931.0], [77.6, 6933.0], [77.7, 7032.0], [77.8, 7109.0], [77.9, 7116.0], [78.0, 7119.0], [78.1, 7120.0], [78.2, 7374.0], [78.3, 7545.0], [78.4, 7605.0], [78.5, 7652.0], [78.6, 7676.0], [78.7, 7727.0], [78.8, 7784.0], [78.9, 7786.0], [79.0, 7811.0], [79.1, 7852.0], [79.2, 7919.0], [79.3, 7978.0], [79.4, 8017.0], [79.5, 8018.0], [79.6, 8031.0], [79.7, 8079.0], [79.8, 8095.0], [79.9, 8096.0], [80.0, 8103.0], [80.1, 8148.0], [80.2, 8232.0], [80.3, 8306.0], [80.4, 8309.0], [80.5, 8418.0], [80.6, 8450.0], [80.7, 8460.0], [80.8, 8635.0], [80.9, 8643.0], [81.0, 8660.0], [81.1, 8803.0], [81.2, 8826.0], [81.3, 8847.0], [81.4, 8864.0], [81.5, 8911.0], [81.6, 8927.0], [81.7, 8930.0], [81.8, 9113.0], [81.9, 9114.0], [82.0, 9201.0], [82.1, 9203.0], [82.2, 9270.0], [82.3, 9314.0], [82.4, 9325.0], [82.5, 9326.0], [82.6, 9451.0], [82.7, 9483.0], [82.8, 9485.0], [82.9, 9490.0], [83.0, 9500.0], [83.1, 9513.0], [83.2, 9522.0], [83.3, 9534.0], [83.4, 9555.0], [83.5, 9585.0], [83.6, 9586.0], [83.7, 9590.0], [83.8, 9651.0], [83.9, 9828.0], [84.0, 9864.0], [84.1, 9901.0], [84.2, 9902.0], [84.3, 9923.0], [84.4, 9926.0], [84.5, 9984.0], [84.6, 10002.0], [84.7, 10064.0], [84.8, 10073.0], [84.9, 10075.0], [85.0, 10097.0], [85.1, 10121.0], [85.2, 10136.0], [85.3, 10138.0], [85.4, 10139.0], [85.5, 10150.0], [85.6, 10217.0], [85.7, 10219.0], [85.8, 10240.0], [85.9, 10296.0], [86.0, 10344.0], [86.1, 10429.0], [86.2, 10692.0], [86.3, 10768.0], [86.4, 10862.0], [86.5, 10943.0], [86.6, 10944.0], [86.7, 10947.0], [86.8, 11051.0], [86.9, 11142.0], [87.0, 11186.0], [87.1, 11203.0], [87.2, 11208.0], [87.3, 11252.0], [87.4, 11254.0], [87.5, 11310.0], [87.6, 11351.0], [87.7, 11352.0], [87.8, 11353.0], [87.9, 11357.0], [88.0, 11595.0], [88.1, 11655.0], [88.2, 11716.0], [88.3, 11721.0], [88.4, 11730.0], [88.5, 11817.0], [88.6, 11864.0], [88.7, 11866.0], [88.8, 11875.0], [88.9, 11993.0], [89.0, 12040.0], [89.1, 12042.0], [89.2, 12166.0], [89.3, 12207.0], [89.4, 12246.0], [89.5, 12410.0], [89.6, 12619.0], [89.7, 12729.0], [89.8, 12791.0], [89.9, 12986.0], [90.0, 13039.0], [90.1, 13095.0], [90.2, 13097.0], [90.3, 13390.0], [90.4, 13576.0], [90.5, 13603.0], [90.6, 13650.0], [90.7, 13746.0], [90.8, 13795.0], [90.9, 13926.0], [91.0, 14027.0], [91.1, 14099.0], [91.2, 14371.0], [91.3, 14410.0], [91.4, 14512.0], [91.5, 14676.0], [91.6, 15029.0], [91.7, 15213.0], [91.8, 15287.0], [91.9, 15288.0], [92.0, 15443.0], [92.1, 15906.0], [92.2, 16122.0], [92.3, 16624.0], [92.4, 17082.0], [92.5, 17205.0], [92.6, 18056.0], [92.7, 18324.0], [92.8, 18341.0], [92.9, 18618.0], [93.0, 19216.0], [93.1, 19299.0], [93.2, 20274.0], [93.3, 21736.0], [93.4, 22448.0], [93.5, 24319.0], [93.6, 24429.0], [93.7, 26040.0], [93.8, 27595.0], [93.9, 28000.0], [94.0, 28019.0], [94.1, 29273.0], [94.2, 30014.0], [94.3, 32085.0], [94.4, 33426.0], [94.5, 33514.0], [94.6, 34177.0], [94.7, 35197.0], [94.8, 35204.0], [94.9, 36167.0], [95.0, 36857.0], [95.1, 37868.0], [95.2, 41574.0], [95.3, 43909.0], [95.4, 46294.0], [95.5, 47093.0], [95.6, 47603.0], [95.7, 51634.0], [95.8, 53578.0], [95.9, 58201.0], [96.0, 59282.0], [96.1, 62660.0], [96.2, 63334.0], [96.3, 63732.0], [96.4, 66025.0], [96.5, 66089.0], [96.6, 66960.0], [96.7, 69169.0], [96.8, 73905.0], [96.9, 75283.0], [97.0, 79842.0], [97.1, 83037.0], [97.2, 90633.0], [97.3, 96562.0], [97.4, 100021.0], [97.5, 100039.0], [97.6, 100053.0], [97.7, 100080.0], [97.8, 100086.0], [97.9, 100099.0], [98.0, 100112.0], [98.1, 100119.0], [98.2, 100125.0], [98.3, 100129.0], [98.4, 100132.0], [98.5, 100138.0], [98.6, 100152.0], [98.7, 127360.0], [98.8, 127540.0], [98.9, 127800.0], [99.0, 128798.0], [99.1, 131055.0], [99.2, 133118.0], [99.3, 133736.0], [99.4, 140192.0], [99.5, 142413.0], [99.6, 146970.0], [99.7, 155520.0], [99.8, 159507.0], [99.9, 161509.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 36731.0, "series": [{"data": [[0.0, 8187.0], [160800.0, 1.0], [158500.0, 1.0], [190500.0, 4.0], [69900.0, 2.0], [73100.0, 3.0], [89100.0, 2.0], [95500.0, 3.0], [127500.0, 103.0], [130700.0, 2.0], [149800.0, 4.0], [156200.0, 2.0], [100.0, 36731.0], [34500.0, 1.0], [32900.0, 2.0], [36100.0, 29.0], [37700.0, 6.0], [40900.0, 3.0], [44100.0, 19.0], [48900.0, 3.0], [50500.0, 2.0], [200.0, 3806.0], [56900.0, 2.0], [58500.0, 1.0], [61700.0, 2.0], [63300.0, 76.0], [64900.0, 2.0], [65800.0, 2.0], [72200.0, 2.0], [300.0, 316.0], [75400.0, 3.0], [78600.0, 2.0], [81800.0, 1.0], [85000.0, 1.0], [94600.0, 3.0], [400.0, 531.0], [110600.0, 2.0], [500.0, 84.0], [129800.0, 3.0], [600.0, 133.0], [151600.0, 1.0], [158000.0, 1.0], [700.0, 25.0], [800.0, 30.0], [900.0, 27.0], [1000.0, 85.0], [1100.0, 69.0], [1200.0, 69.0], [1300.0, 102.0], [1400.0, 55.0], [1500.0, 31.0], [1600.0, 29.0], [1700.0, 46.0], [1800.0, 16.0], [1900.0, 47.0], [2000.0, 86.0], [2100.0, 99.0], [2300.0, 44.0], [2200.0, 23.0], [142900.0, 1.0], [2400.0, 44.0], [2500.0, 17.0], [2600.0, 31.0], [2700.0, 56.0], [2800.0, 19.0], [2900.0, 33.0], [3000.0, 30.0], [3100.0, 12.0], [3200.0, 50.0], [3300.0, 32.0], [3400.0, 50.0], [213300.0, 1.0], [3500.0, 285.0], [3600.0, 20.0], [3700.0, 131.0], [3800.0, 95.0], [3900.0, 247.0], [4000.0, 8.0], [4200.0, 44.0], [68100.0, 1.0], [4600.0, 115.0], [4400.0, 20.0], [4800.0, 70.0], [74500.0, 1.0], [5000.0, 32.0], [80900.0, 3.0], [5200.0, 53.0], [84100.0, 2.0], [5600.0, 153.0], [5400.0, 7.0], [5800.0, 34.0], [93700.0, 2.0], [90500.0, 1.0], [6000.0, 202.0], [6200.0, 60.0], [100100.0, 512.0], [6600.0, 6.0], [6400.0, 33.0], [6800.0, 127.0], [109700.0, 6.0], [7000.0, 75.0], [7400.0, 7.0], [7200.0, 21.0], [7600.0, 212.0], [7800.0, 144.0], [8000.0, 455.0], [8400.0, 178.0], [8800.0, 241.0], [9200.0, 224.0], [140600.0, 7.0], [9600.0, 100.0], [10000.0, 305.0], [159800.0, 4.0], [10400.0, 13.0], [11200.0, 284.0], [10800.0, 52.0], [11600.0, 96.0], [12000.0, 178.0], [12400.0, 32.0], [13200.0, 7.0], [12800.0, 36.0], [13600.0, 133.0], [14000.0, 92.0], [14400.0, 75.0], [14800.0, 15.0], [15200.0, 186.0], [15600.0, 12.0], [16000.0, 44.0], [16800.0, 8.0], [18400.0, 17.0], [17600.0, 4.0], [19200.0, 88.0], [20000.0, 5.0], [20800.0, 2.0], [21600.0, 10.0], [22400.0, 9.0], [23200.0, 5.0], [24000.0, 2.0], [24800.0, 3.0], [27200.0, 14.0], [28000.0, 88.0], [28800.0, 1.0], [29600.0, 1.0], [31200.0, 7.0], [32000.0, 2.0], [33600.0, 2.0], [36800.0, 46.0], [35200.0, 26.0], [38400.0, 2.0], [41600.0, 1.0], [44800.0, 1.0], [46400.0, 2.0], [48000.0, 5.0], [49600.0, 2.0], [52800.0, 2.0], [56000.0, 1.0], [59200.0, 51.0], [57600.0, 2.0], [60800.0, 2.0], [64000.0, 2.0], [67200.0, 1.0], [76800.0, 1.0], [80000.0, 5.0], [83200.0, 2.0], [99200.0, 1.0], [128000.0, 54.0], [153600.0, 3.0], [132100.0, 1.0], [144900.0, 2.0], [157700.0, 3.0], [70300.0, 1.0], [76700.0, 1.0], [79900.0, 11.0], [92700.0, 1.0], [95900.0, 1.0], [127900.0, 6.0], [142600.0, 1.0], [155400.0, 1.0], [33100.0, 4.0], [133900.0, 1.0], [34700.0, 2.0], [140300.0, 20.0], [159500.0, 2.0], [39500.0, 1.0], [42700.0, 1.0], [41100.0, 14.0], [47500.0, 6.0], [52300.0, 20.0], [53900.0, 1.0], [55500.0, 12.0], [61900.0, 2.0], [69400.0, 1.0], [66200.0, 1.0], [72600.0, 1.0], [75800.0, 3.0], [79000.0, 1.0], [88600.0, 1.0], [98200.0, 3.0], [95000.0, 5.0], [130200.0, 2.0], [131600.0, 3.0], [150800.0, 7.0], [142100.0, 7.0], [161300.0, 2.0], [68500.0, 3.0], [71700.0, 1.0], [74900.0, 1.0], [78100.0, 3.0], [87700.0, 5.0], [90900.0, 1.0], [129300.0, 4.0], [133400.0, 1.0], [146200.0, 5.0], [16900.0, 3.0], [17700.0, 3.0], [19300.0, 17.0], [18500.0, 1.0], [20100.0, 11.0], [20900.0, 5.0], [21700.0, 62.0], [23300.0, 2.0], [24100.0, 1.0], [24900.0, 2.0], [25700.0, 27.0], [26500.0, 3.0], [27300.0, 8.0], [28100.0, 2.0], [28900.0, 26.0], [29700.0, 12.0], [31300.0, 3.0], [32100.0, 6.0], [35400.0, 6.0], [143900.0, 2.0], [37000.0, 7.0], [150300.0, 1.0], [38600.0, 2.0], [45000.0, 2.0], [43400.0, 2.0], [48200.0, 10.0], [53000.0, 2.0], [214300.0, 1.0], [59400.0, 4.0], [62600.0, 2.0], [64200.0, 2.0], [67600.0, 2.0], [70800.0, 1.0], [74000.0, 5.0], [77200.0, 2.0], [80400.0, 8.0], [86800.0, 2.0], [90000.0, 1.0], [93200.0, 2.0], [149600.0, 1.0], [207200.0, 2.0], [153700.0, 2.0], [67500.0, 4.0], [70700.0, 3.0], [77100.0, 18.0], [73900.0, 27.0], [86700.0, 2.0], [89900.0, 1.0], [99500.0, 1.0], [132200.0, 1.0], [157800.0, 9.0], [33300.0, 19.0], [142700.0, 2.0], [34900.0, 2.0], [36500.0, 2.0], [38100.0, 2.0], [155500.0, 1.0], [47700.0, 2.0], [50900.0, 12.0], [52500.0, 2.0], [54100.0, 2.0], [65300.0, 3.0], [63700.0, 13.0], [66600.0, 1.0], [73000.0, 1.0], [76200.0, 2.0], [85800.0, 1.0], [130600.0, 3.0], [146800.0, 1.0], [140400.0, 1.0], [131700.0, 11.0], [157300.0, 9.0], [65700.0, 3.0], [68900.0, 5.0], [72100.0, 3.0], [81700.0, 4.0], [84900.0, 1.0], [88100.0, 2.0], [94500.0, 3.0], [129700.0, 13.0], [8500.0, 26.0], [135800.0, 1.0], [8900.0, 247.0], [142200.0, 2.0], [9300.0, 199.0], [155000.0, 1.0], [9700.0, 21.0], [10100.0, 388.0], [161400.0, 3.0], [10500.0, 3.0], [10900.0, 222.0], [11700.0, 244.0], [11300.0, 309.0], [12100.0, 70.0], [12500.0, 26.0], [12900.0, 38.0], [13300.0, 33.0], [206200.0, 1.0], [13700.0, 114.0], [14100.0, 5.0], [14500.0, 42.0], [14900.0, 35.0], [15300.0, 21.0], [15700.0, 6.0], [16100.0, 21.0], [17000.0, 50.0], [17800.0, 5.0], [19400.0, 15.0], [18600.0, 2.0], [20200.0, 7.0], [21000.0, 5.0], [21800.0, 7.0], [23400.0, 5.0], [22600.0, 2.0], [24200.0, 19.0], [25800.0, 1.0], [27400.0, 1.0], [28200.0, 2.0], [29000.0, 10.0], [29800.0, 2.0], [30600.0, 2.0], [31400.0, 4.0], [133500.0, 4.0], [34000.0, 2.0], [139900.0, 3.0], [146300.0, 3.0], [38800.0, 4.0], [37200.0, 7.0], [159100.0, 8.0], [40400.0, 2.0], [42000.0, 31.0], [43600.0, 1.0], [45200.0, 2.0], [50000.0, 2.0], [51600.0, 1.0], [56400.0, 1.0], [58000.0, 1.0], [59600.0, 2.0], [64400.0, 2.0], [68000.0, 3.0], [80800.0, 2.0], [84000.0, 1.0], [87200.0, 2.0], [96800.0, 1.0], [100000.0, 404.0], [128800.0, 1.0], [142400.0, 17.0], [133700.0, 88.0], [140100.0, 6.0], [159300.0, 18.0], [67900.0, 32.0], [77500.0, 1.0], [83900.0, 1.0], [87100.0, 3.0], [90300.0, 7.0], [128700.0, 1.0], [131400.0, 9.0], [137800.0, 2.0], [144200.0, 2.0], [208200.0, 1.0], [33500.0, 70.0], [135500.0, 1.0], [35100.0, 102.0], [36700.0, 24.0], [39900.0, 2.0], [161100.0, 1.0], [41500.0, 3.0], [46300.0, 2.0], [51100.0, 2.0], [49500.0, 2.0], [54300.0, 9.0], [63900.0, 2.0], [67000.0, 2.0], [73400.0, 2.0], [79800.0, 12.0], [83000.0, 16.0], [92600.0, 2.0], [95800.0, 2.0], [131000.0, 50.0], [127800.0, 1.0], [133200.0, 1.0], [66100.0, 1.0], [72500.0, 1.0], [75700.0, 1.0], [78900.0, 1.0], [85300.0, 1.0], [82100.0, 1.0], [98100.0, 2.0], [94900.0, 1.0], [130100.0, 2.0], [154200.0, 4.0], [160600.0, 5.0], [17100.0, 58.0], [17900.0, 8.0], [19500.0, 2.0], [20300.0, 10.0], [21100.0, 5.0], [21900.0, 6.0], [22700.0, 6.0], [24300.0, 35.0], [25100.0, 2.0], [25900.0, 1.0], [26700.0, 1.0], [27500.0, 7.0], [28300.0, 2.0], [29900.0, 1.0], [30700.0, 1.0], [31500.0, 20.0], [32300.0, 2.0], [34200.0, 1.0], [145500.0, 1.0], [151900.0, 2.0], [37400.0, 2.0], [40600.0, 1.0], [42200.0, 2.0], [47000.0, 80.0], [51800.0, 12.0], [55000.0, 2.0], [56600.0, 2.0], [58200.0, 20.0], [64600.0, 2.0], [68400.0, 1.0], [71600.0, 2.0], [87600.0, 4.0], [90800.0, 3.0], [97200.0, 2.0], [106800.0, 1.0], [129200.0, 1.0], [144800.0, 3.0], [164000.0, 2.0], [142500.0, 5.0], [212900.0, 1.0], [68300.0, 4.0], [71500.0, 1.0], [74700.0, 1.0], [84300.0, 1.0], [93900.0, 4.0], [97100.0, 1.0], [133800.0, 2.0], [140200.0, 7.0], [159400.0, 3.0], [223400.0, 2.0], [137900.0, 1.0], [150700.0, 3.0], [43300.0, 2.0], [44900.0, 4.0], [46500.0, 4.0], [48100.0, 11.0], [51300.0, 1.0], [208300.0, 1.0], [54500.0, 2.0], [60900.0, 34.0], [62500.0, 2.0], [64100.0, 10.0], [67400.0, 1.0], [70600.0, 3.0], [73800.0, 2.0], [77000.0, 1.0], [80200.0, 2.0], [86600.0, 1.0], [96200.0, 2.0], [105800.0, 2.0], [128200.0, 1.0], [142000.0, 12.0], [154800.0, 2.0], [133300.0, 4.0], [139700.0, 1.0], [146100.0, 2.0], [4100.0, 11.0], [66500.0, 3.0], [4300.0, 160.0], [72900.0, 3.0], [4500.0, 107.0], [76100.0, 1.0], [4700.0, 13.0], [4900.0, 260.0], [5100.0, 19.0], [5300.0, 3.0], [82500.0, 2.0], [5500.0, 27.0], [5700.0, 192.0], [92100.0, 2.0], [6100.0, 432.0], [5900.0, 185.0], [6300.0, 57.0], [98500.0, 1.0], [6500.0, 18.0], [6700.0, 121.0], [6900.0, 130.0], [7100.0, 267.0], [7300.0, 44.0], [7500.0, 71.0], [7900.0, 121.0], [7700.0, 217.0], [8100.0, 136.0], [127300.0, 15.0], [130500.0, 7.0], [8600.0, 182.0], [8200.0, 49.0], [137400.0, 1.0], [9000.0, 17.0], [9400.0, 293.0], [9800.0, 125.0], [10200.0, 232.0], [163000.0, 2.0], [10600.0, 65.0], [11000.0, 51.0], [11400.0, 15.0], [12200.0, 109.0], [11800.0, 244.0], [12600.0, 23.0], [13000.0, 193.0], [13800.0, 22.0], [13400.0, 46.0], [14200.0, 29.0], [14600.0, 47.0], [15000.0, 54.0], [15800.0, 27.0], [15400.0, 15.0], [16200.0, 12.0], [16400.0, 10.0], [17200.0, 44.0], [18000.0, 12.0], [18800.0, 1.0], [19600.0, 7.0], [21200.0, 4.0], [22000.0, 2.0], [22800.0, 1.0], [24400.0, 45.0], [25200.0, 1.0], [26000.0, 2.0], [26800.0, 5.0], [27600.0, 2.0], [28400.0, 1.0], [29200.0, 7.0], [30000.0, 23.0], [31600.0, 3.0], [30800.0, 6.0], [36000.0, 17.0], [147900.0, 2.0], [154300.0, 1.0], [40800.0, 3.0], [42400.0, 4.0], [44000.0, 22.0], [47200.0, 23.0], [52000.0, 2.0], [63200.0, 4.0], [61600.0, 4.0], [64800.0, 2.0], [65600.0, 2.0], [68800.0, 1.0], [72000.0, 2.0], [75200.0, 6.0], [81600.0, 1.0], [94400.0, 10.0], [141700.0, 1.0], [154500.0, 3.0], [160900.0, 11.0], [68700.0, 1.0], [71900.0, 2.0], [75100.0, 16.0], [78300.0, 4.0], [91100.0, 2.0], [97500.0, 2.0], [94300.0, 1.0], [143500.0, 3.0], [35500.0, 4.0], [156300.0, 3.0], [41900.0, 19.0], [46700.0, 2.0], [48300.0, 1.0], [53100.0, 2.0], [51500.0, 2.0], [54700.0, 2.0], [56300.0, 2.0], [57900.0, 1.0], [64300.0, 1.0], [71000.0, 1.0], [74200.0, 6.0], [83800.0, 1.0], [87000.0, 1.0], [90200.0, 1.0], [96600.0, 2.0], [119000.0, 1.0], [128600.0, 2.0], [134800.0, 1.0], [160400.0, 3.0], [224400.0, 1.0], [138900.0, 1.0], [151700.0, 4.0], [164500.0, 5.0], [66900.0, 21.0], [73300.0, 3.0], [79700.0, 2.0], [82900.0, 1.0], [86100.0, 3.0], [127700.0, 3.0], [130900.0, 2.0], [155800.0, 2.0], [16500.0, 5.0], [17300.0, 2.0], [18100.0, 10.0], [18900.0, 4.0], [19700.0, 2.0], [20500.0, 2.0], [21300.0, 3.0], [22100.0, 3.0], [22900.0, 2.0], [24500.0, 8.0], [23700.0, 2.0], [25300.0, 8.0], [26100.0, 4.0], [26900.0, 6.0], [29300.0, 38.0], [30100.0, 1.0], [31700.0, 5.0], [30900.0, 1.0], [32500.0, 4.0], [33000.0, 10.0], [34600.0, 1.0], [36200.0, 11.0], [140700.0, 1.0], [37800.0, 19.0], [159900.0, 32.0], [39400.0, 2.0], [41000.0, 3.0], [44200.0, 3.0], [49000.0, 2.0], [53800.0, 3.0], [55400.0, 2.0], [58600.0, 7.0], [63400.0, 23.0], [65000.0, 2.0], [66000.0, 82.0], [69200.0, 1.0], [72400.0, 2.0], [78800.0, 1.0], [91600.0, 2.0], [104400.0, 1.0], [126800.0, 1.0], [133600.0, 14.0], [140000.0, 4.0], [146400.0, 10.0], [159200.0, 5.0], [131300.0, 11.0], [144100.0, 3.0], [156900.0, 2.0], [227300.0, 23.0], [69100.0, 2.0], [65900.0, 10.0], [72300.0, 1.0], [78700.0, 2.0], [81900.0, 3.0], [91500.0, 1.0], [101100.0, 1.0], [154600.0, 5.0], [161000.0, 1.0], [34100.0, 3.0], [133100.0, 1.0], [35700.0, 5.0], [38900.0, 2.0], [152300.0, 1.0], [37300.0, 8.0], [46900.0, 9.0], [48500.0, 2.0], [51700.0, 2.0], [58100.0, 9.0], [59700.0, 2.0], [62900.0, 4.0], [68200.0, 2.0], [71400.0, 1.0], [77800.0, 3.0], [74600.0, 1.0], [81000.0, 3.0], [84200.0, 1.0], [90600.0, 1.0], [97000.0, 1.0], [100200.0, 11.0], [116200.0, 1.0], [129000.0, 1.0], [160500.0, 4.0], [67300.0, 4.0], [73700.0, 2.0], [70500.0, 1.0], [83300.0, 1.0], [96100.0, 2.0], [128100.0, 1.0], [8700.0, 37.0], [8300.0, 142.0], [9100.0, 136.0], [145400.0, 1.0], [9500.0, 503.0], [151800.0, 2.0], [9900.0, 365.0], [158200.0, 1.0], [10300.0, 140.0], [10700.0, 107.0], [11100.0, 181.0], [11500.0, 35.0], [11900.0, 58.0], [12700.0, 148.0], [12300.0, 49.0], [13100.0, 39.0], [13500.0, 74.0], [14300.0, 98.0], [13900.0, 70.0], [14700.0, 1.0], [15100.0, 18.0], [15500.0, 9.0], [15900.0, 31.0], [16300.0, 14.0], [16600.0, 22.0], [18200.0, 32.0], [19000.0, 7.0], [19800.0, 4.0], [21400.0, 3.0], [22200.0, 2.0], [23000.0, 4.0], [23800.0, 1.0], [25400.0, 5.0], [24600.0, 4.0], [26200.0, 10.0], [27000.0, 7.0], [27800.0, 6.0], [28600.0, 10.0], [29400.0, 2.0], [30200.0, 1.0], [31000.0, 2.0], [32600.0, 1.0], [33200.0, 3.0], [34800.0, 4.0], [36400.0, 8.0], [39600.0, 2.0], [41200.0, 3.0], [44400.0, 2.0], [47600.0, 5.0], [49200.0, 4.0], [55600.0, 1.0], [58800.0, 2.0], [63600.0, 7.0], [65200.0, 1.0], [66400.0, 36.0], [72800.0, 1.0], [79200.0, 3.0], [85600.0, 1.0], [92000.0, 3.0], [95200.0, 2.0], [98400.0, 1.0], [130400.0, 5.0], [139200.0, 3.0], [196800.0, 1.0], [222400.0, 1.0], [149700.0, 7.0], [69500.0, 1.0], [66300.0, 8.0], [72700.0, 4.0], [79100.0, 1.0], [82300.0, 2.0], [91900.0, 1.0], [98300.0, 5.0], [95100.0, 1.0], [127100.0, 4.0], [132300.0, 5.0], [34300.0, 2.0], [35900.0, 1.0], [39100.0, 2.0], [40700.0, 12.0], [43900.0, 14.0], [47100.0, 8.0], [45500.0, 2.0], [51900.0, 24.0], [55100.0, 2.0], [53500.0, 2.0], [56700.0, 4.0], [58300.0, 2.0], [63100.0, 16.0], [64700.0, 4.0], [75000.0, 1.0], [81400.0, 1.0], [94200.0, 2.0], [91000.0, 2.0], [107000.0, 1.0], [142800.0, 5.0], [146900.0, 12.0], [140500.0, 8.0], [153300.0, 1.0], [70900.0, 1.0], [74100.0, 19.0], [80500.0, 11.0], [90100.0, 2.0], [93300.0, 1.0], [96500.0, 4.0], [99700.0, 2.0], [102900.0, 1.0], [128500.0, 6.0], [131800.0, 2.0], [151000.0, 2.0], [157400.0, 1.0], [16700.0, 2.0], [17500.0, 6.0], [18300.0, 143.0], [19100.0, 40.0], [19900.0, 2.0], [20700.0, 2.0], [21500.0, 1.0], [22300.0, 2.0], [23100.0, 5.0], [23900.0, 1.0], [25500.0, 1.0], [24700.0, 1.0], [26300.0, 3.0], [27100.0, 1.0], [27900.0, 54.0], [28700.0, 1.0], [30300.0, 2.0], [31100.0, 1.0], [33400.0, 83.0], [35000.0, 9.0], [142300.0, 2.0], [36600.0, 1.0], [155100.0, 1.0], [161500.0, 24.0], [43000.0, 2.0], [41400.0, 2.0], [46200.0, 7.0], [51000.0, 1.0], [55800.0, 2.0], [57400.0, 2.0], [59000.0, 4.0], [60600.0, 2.0], [63800.0, 3.0], [66800.0, 1.0], [73200.0, 2.0], [76400.0, 1.0], [82800.0, 1.0], [86000.0, 2.0], [89200.0, 1.0], [98800.0, 1.0], [127600.0, 25.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 227300.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 225.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 49571.0, "series": [{"data": [[0.0, 49571.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 679.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 19725.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 225.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 150.19798657718127, "minX": 1.68288312E12, "maxY": 3000.0, "series": [{"data": [[1.68288354E12, 150.19798657718127], [1.68288336E12, 3000.0], [1.68288342E12, 2597.8858980110654], [1.68288324E12, 3000.0], [1.6828833E12, 3000.0], [1.68288312E12, 3000.0], [1.68288318E12, 3000.0], [1.68288348E12, 479.3518005540168]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68288354E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 80.39999999999999, "minX": 1.0, "maxY": 227385.0, "series": [{"data": [[3.0, 100286.0], [5.0, 100284.5], [7.0, 100282.5], [8.0, 100282.0], [9.0, 100280.0], [10.0, 100167.0], [11.0, 100137.0], [12.0, 100135.0], [13.0, 100132.0], [17.0, 100152.5], [18.0, 100130.66666666667], [19.0, 100128.0], [21.0, 100168.0], [22.0, 100147.0], [23.0, 100124.0], [24.0, 100122.0], [25.0, 100122.0], [27.0, 100114.0], [28.0, 100136.0], [31.0, 100129.0], [33.0, 100135.0], [35.0, 100134.5], [39.0, 100155.0], [41.0, 100139.66666666667], [40.0, 100132.5], [43.0, 100150.0], [42.0, 100151.0], [47.0, 100147.0], [46.0, 100149.0], [48.0, 100146.0], [51.0, 100146.0], [53.0, 100140.0], [52.0, 100155.0], [55.0, 100132.0], [59.0, 100131.25], [60.0, 100128.0], [62.0, 100090.5], [67.0, 100090.0], [66.0, 100091.0], [65.0, 100091.0], [71.0, 100080.0], [70.0, 100088.0], [69.0, 100087.0], [75.0, 100069.0], [74.0, 100071.0], [73.0, 100079.0], [72.0, 100079.0], [79.0, 100064.5], [77.0, 100065.0], [76.0, 100067.0], [83.0, 100056.0], [82.0, 100056.0], [86.0, 100055.8], [90.0, 100053.0], [89.0, 100054.5], [88.0, 100056.0], [95.0, 100053.0], [93.0, 100053.66666666667], [99.0, 100051.0], [98.0, 100052.0], [97.0, 100053.0], [103.0, 100050.0], [101.0, 100051.0], [100.0, 100052.0], [106.0, 100050.0], [105.0, 100050.33333333333], [110.0, 100049.0], [108.0, 100049.0], [113.0, 100049.0], [112.0, 100049.0], [117.0, 100048.0], [116.0, 100048.0], [123.0, 100046.0], [122.0, 100047.0], [120.0, 100047.0], [127.0, 100046.0], [135.0, 100043.0], [133.0, 100044.0], [132.0, 100044.0], [131.0, 100044.0], [130.0, 100045.5], [128.0, 100045.0], [143.0, 100037.0], [142.0, 100039.0], [141.0, 100038.0], [140.0, 100039.0], [139.0, 100040.0], [138.0, 100041.0], [137.0, 100042.0], [150.0, 100034.0], [148.0, 100035.5], [146.0, 100035.5], [144.0, 100036.0], [159.0, 100026.0], [158.0, 100030.0], [157.0, 100029.0], [156.0, 100030.0], [155.0, 100032.0], [154.0, 100032.0], [153.0, 100032.0], [152.0, 100034.33333333333], [166.0, 100022.8], [161.0, 100025.0], [160.0, 100024.0], [175.0, 100017.0], [174.0, 100020.5], [172.0, 100021.0], [170.0, 100022.0], [168.0, 100022.0], [182.0, 100166.0], [181.0, 100168.0], [180.0, 100170.0], [179.0, 100015.0], [177.0, 100016.5], [191.0, 100159.0], [189.0, 100165.0], [188.0, 100165.0], [187.0, 100165.0], [186.0, 100165.0], [184.0, 100166.0], [199.0, 100152.0], [195.0, 100155.0], [194.0, 100157.33333333333], [206.0, 100150.0], [204.0, 100151.0], [203.0, 100150.0], [202.0, 100151.8], [200.0, 100152.0], [215.0, 100148.66666666667], [214.0, 100149.0], [212.0, 100149.5], [210.0, 100148.0], [209.0, 100149.0], [222.0, 100147.0], [221.0, 100147.0], [220.0, 100146.33333333333], [217.0, 100147.0], [216.0, 100148.0], [231.0, 100143.0], [230.0, 100142.0], [227.0, 100146.0], [226.0, 100144.33333333333], [225.0, 100146.0], [238.0, 100139.0], [237.0, 100140.0], [236.0, 100140.0], [234.0, 100141.0], [233.0, 100142.0], [246.0, 100135.0], [245.0, 100135.0], [244.0, 100134.0], [243.0, 100136.0], [242.0, 100136.0], [241.0, 100138.0], [240.0, 100137.5], [254.0, 100124.0], [253.0, 100127.0], [252.0, 100128.0], [251.0, 100130.5], [250.0, 100131.0], [248.0, 100133.0], [264.0, 100102.5], [270.0, 100091.33333333333], [267.0, 100093.0], [266.0, 100094.0], [265.0, 100096.0], [262.0, 100105.0], [261.0, 100111.0], [259.0, 100122.66666666667], [256.0, 100123.5], [286.0, 96562.0], [287.0, 95984.0], [285.0, 95167.0], [284.0, 96174.0], [283.0, 97575.0], [282.0, 98581.0], [281.0, 97142.0], [280.0, 100019.0], [279.0, 99593.0], [273.0, 100090.66666666667], [278.0, 100086.0], [276.0, 100088.33333333333], [303.0, 227385.0], [301.0, 227370.5], [291.0, 93964.0], [290.0, 94970.0], [289.0, 94544.0], [288.0, 95552.0], [299.0, 87045.0], [298.0, 90505.0], [297.0, 90935.0], [296.0, 91942.0], [295.0, 90075.0], [294.0, 91083.0], [293.0, 91085.0], [292.0, 93963.0], [318.0, 227340.0], [319.0, 227364.0], [317.0, 227372.0], [307.0, 227365.5], [305.0, 227382.0], [304.0, 227354.0], [315.0, 227374.0], [314.0, 227361.0], [312.0, 227346.0], [311.0, 227362.5], [309.0, 227379.0], [308.0, 227349.0], [334.0, 83860.0], [335.0, 80983.0], [333.0, 222406.0], [332.0, 223444.0], [331.0, 83003.0], [330.0, 83008.0], [329.0, 223454.0], [328.0, 224430.0], [327.0, 85888.0], [321.0, 227329.0], [320.0, 227330.0], [323.0, 86038.0], [322.0, 227326.0], [326.0, 86894.0], [325.0, 85073.0], [324.0, 86080.0], [350.0, 214359.0], [351.0, 213352.0], [349.0, 73917.0], [348.0, 74925.0], [347.0, 76797.0], [346.0, 77804.0], [345.0, 77805.0], [344.0, 78813.0], [343.0, 78386.0], [337.0, 79973.0], [336.0, 80982.0], [339.0, 80834.0], [338.0, 81841.0], [342.0, 79822.0], [341.0, 79824.0], [340.0, 80832.0], [366.0, 65883.0], [367.0, 64876.0], [365.0, 206285.0], [364.0, 207292.0], [363.0, 207263.0], [362.0, 208303.0], [361.0, 208274.0], [360.0, 68867.0], [359.0, 68914.0], [353.0, 71942.0], [352.0, 72950.0], [355.0, 72757.0], [354.0, 73765.0], [358.0, 69921.0], [357.0, 71749.0], [356.0, 72756.0], [382.0, 59633.0], [383.0, 58626.0], [381.0, 59635.0], [380.0, 60641.0], [379.0, 60643.0], [378.0, 61651.0], [377.0, 61654.0], [376.0, 62660.0], [375.0, 62662.0], [369.0, 65691.0], [368.0, 66698.0], [371.0, 64682.0], [370.0, 65689.0], [374.0, 63671.0], [373.0, 63673.0], [372.0, 64681.0], [398.0, 51556.0], [399.0, 50550.0], [397.0, 51558.0], [396.0, 52567.0], [395.0, 52568.0], [394.0, 53575.0], [393.0, 53578.0], [392.0, 54586.0], [391.0, 54588.0], [385.0, 57616.0], [384.0, 58625.0], [387.0, 56606.0], [386.0, 57614.0], [390.0, 55595.0], [389.0, 55597.0], [388.0, 56604.0], [414.0, 43483.0], [415.0, 42474.0], [413.0, 43483.0], [412.0, 44490.0], [411.0, 44493.0], [410.0, 45500.0], [409.0, 45503.0], [408.0, 46510.0], [407.0, 46512.0], [401.0, 49540.0], [400.0, 50548.0], [403.0, 48531.0], [402.0, 49538.0], [406.0, 47519.0], [405.0, 47521.0], [404.0, 48529.0], [430.0, 35406.0], [431.0, 34398.0], [429.0, 35408.0], [428.0, 36415.0], [427.0, 36417.0], [426.0, 37425.0], [425.0, 37427.0], [424.0, 38434.0], [423.0, 38436.0], [417.0, 41465.0], [416.0, 42472.0], [419.0, 40456.0], [418.0, 41463.0], [422.0, 39443.0], [421.0, 39446.0], [420.0, 40453.0], [445.0, 36875.0], [447.0, 36874.0], [444.0, 36875.0], [434.0, 33387.0], [433.0, 33389.0], [432.0, 34396.0], [442.0, 36874.0], [441.0, 36875.0], [440.0, 36875.0], [439.0, 36878.0], [438.0, 36877.5], [436.0, 36879.0], [462.0, 36852.0], [463.0, 36851.0], [460.0, 36853.0], [450.0, 36867.0], [449.0, 36873.0], [448.0, 36874.0], [459.0, 36857.0], [458.0, 36857.0], [457.0, 36857.5], [455.0, 36860.0], [454.0, 36861.0], [453.0, 36862.666666666664], [478.0, 36825.0], [479.0, 36566.0], [476.0, 36826.0], [467.0, 36846.0], [465.0, 36846.0], [464.0, 36850.0], [475.0, 36827.0], [474.0, 36832.0], [473.0, 36833.0], [471.0, 36833.0], [470.0, 36834.0], [469.0, 36836.0], [468.0, 36837.0], [494.0, 33539.666666666664], [495.0, 36019.0], [492.0, 36020.0], [491.0, 33540.0], [489.0, 33540.0], [488.0, 33540.0], [486.0, 33541.0], [485.0, 34369.0], [482.0, 32085.0], [481.0, 32088.0], [480.0, 36553.0], [499.0, 36019.0], [511.0, 33535.0], [510.0, 33535.25], [506.0, 33535.5], [504.0, 33536.5], [502.0, 36018.0], [501.0, 33537.0], [500.0, 33537.5], [497.0, 33538.0], [496.0, 33538.0], [538.0, 33526.0], [542.0, 33523.0], [528.0, 33528.0], [540.0, 33525.0], [514.0, 33533.0], [512.0, 33534.0], [518.0, 33533.333333333336], [516.0, 33534.0], [526.0, 33529.0], [524.0, 33531.0], [534.0, 33526.5], [532.0, 33526.5], [530.0, 33528.0], [568.0, 33481.0], [572.0, 33480.0], [562.0, 33488.5], [560.0, 33489.0], [550.0, 33522.0], [548.0, 33522.75], [544.0, 33523.0], [558.0, 33493.0], [556.0, 33513.0], [554.0, 33513.666666666664], [564.0, 33487.0], [580.0, 33476.0], [592.0, 33448.0], [604.0, 33434.0], [600.0, 33440.0], [578.0, 33477.333333333336], [590.0, 33455.0], [588.0, 33469.0], [584.0, 33471.0], [598.0, 33440.0], [596.0, 33444.666666666664], [634.0, 33413.0], [636.0, 33406.0], [626.0, 33416.0], [638.0, 33396.0], [632.0, 33414.0], [610.0, 33431.0], [614.0, 33431.0], [612.0, 33432.5], [622.0, 33426.0], [620.0, 33427.0], [618.0, 33426.0], [616.0, 33427.0], [668.0, 25318.0], [656.0, 31379.0], [658.0, 30696.0], [660.0, 29375.0], [670.0, 24309.0], [666.0, 26327.0], [664.0, 27336.0], [640.0, 33394.0], [644.0, 33390.0], [646.0, 33386.0], [652.0, 33382.5], [650.0, 33384.0], [662.0, 28345.0], [698.0, 19227.0], [696.0, 19228.0], [702.0, 19226.0], [690.0, 19232.0], [700.0, 19226.0], [686.0, 19248.0], [672.0, 23300.0], [674.0, 22291.0], [676.0, 21283.0], [678.0, 20274.0], [684.0, 19236.0], [682.0, 18258.0], [680.0, 19265.0], [694.0, 19228.0], [692.0, 19233.0], [728.0, 19200.0], [732.0, 19190.0], [720.0, 19206.0], [722.0, 19203.0], [734.0, 19185.0], [730.0, 19192.0], [704.0, 19225.0], [706.0, 19221.0], [708.0, 19219.0], [710.0, 19216.0], [714.0, 19213.0], [712.0, 19214.0], [726.0, 19200.0], [742.0, 19162.0], [756.0, 19091.0], [766.0, 18351.666666666668], [760.0, 25407.0], [740.0, 19167.0], [738.0, 19175.0], [750.0, 19156.0], [746.0, 19158.0], [744.0, 19161.0], [758.0, 19088.0], [752.0, 19151.0], [792.0, 18348.5], [798.0, 18339.0], [784.0, 18349.0], [796.0, 18344.0], [772.0, 18350.0], [770.0, 18536.166666666664], [780.0, 18349.0], [778.0, 18341.5], [790.0, 18347.0], [788.0, 18348.0], [800.0, 18338.0], [856.0, 18286.0], [862.0, 18284.0], [848.0, 18597.5], [860.0, 19401.0], [844.0, 18319.5], [838.0, 18322.75], [834.0, 18323.5], [832.0, 18327.0], [842.0, 18320.666666666668], [852.0, 18289.0], [888.0, 19317.0], [892.0, 18181.0], [882.0, 18215.0], [890.0, 21349.5], [868.0, 18282.0], [866.0, 18282.5], [878.0, 20375.333333333332], [874.0, 18280.5], [872.0, 18654.333333333332], [886.0, 19320.0], [922.0, 17220.0], [920.0, 17223.0], [926.0, 17215.0], [902.0, 18738.5], [910.0, 18347.0], [906.0, 24472.0], [904.0, 18156.0], [916.0, 17226.5], [914.0, 17971.666666666668], [954.0, 16726.0], [958.0, 22448.0], [946.0, 17151.0], [944.0, 17185.5], [948.0, 17708.5], [956.0, 17249.0], [952.0, 16169.0], [934.0, 17207.5], [932.0, 17207.666666666668], [930.0, 18326.0], [942.0, 18306.0], [940.0, 17198.5], [938.0, 17199.0], [936.0, 18317.0], [950.0, 23460.0], [986.0, 13924.0], [990.0, 13919.0], [978.0, 13927.0], [988.0, 13920.0], [984.0, 13924.0], [964.0, 20153.0], [962.0, 21161.0], [960.0, 21429.0], [974.0, 13930.0], [972.0, 13933.0], [970.0, 13936.0], [982.0, 13926.0], [1020.0, 13766.0], [1008.0, 12780.0], [1010.0, 13889.0], [1022.0, 13745.0], [1018.0, 13781.0], [1016.0, 13803.0], [996.0, 13918.0], [998.0, 13913.0], [1006.0, 13898.0], [1002.0, 12784.0], [1000.0, 12786.0], [1014.0, 13882.0], [1028.0, 18903.0], [1072.0, 12475.0], [1080.0, 10005.5], [1076.0, 11916.0], [1024.0, 13727.0], [1036.0, 8117.0], [1032.0, 11933.0], [1052.0, 8112.0], [1048.0, 11929.0], [1044.0, 13047.0], [1040.0, 11536.25], [1068.0, 13039.0], [1060.0, 12297.666666666666], [1140.0, 11834.0], [1144.0, 8008.0], [1120.0, 8056.0], [1148.0, 17997.0], [1132.0, 8037.0], [1096.0, 8084.0], [1092.0, 13023.0], [1088.0, 8091.0], [1116.0, 10524.5], [1112.0, 12993.0], [1108.0, 11883.0], [1104.0, 11889.0], [1208.0, 6135.0], [1184.0, 6156.0], [1196.0, 6150.0], [1212.0, 6133.0], [1204.0, 6150.0], [1160.0, 6164.0], [1156.0, 16989.0], [1180.0, 6160.0], [1176.0, 12439.5], [1172.0, 16310.0], [1168.0, 6163.0], [1272.0, 6085.0], [1268.0, 8625.75], [1248.0, 6102.0], [1252.0, 6101.0], [1260.0, 8635.0], [1256.0, 6099.0], [1276.0, 7357.333333333333], [1264.0, 12368.0], [1224.0, 6122.0], [1220.0, 6127.0], [1216.0, 7401.666666666667], [1244.0, 6103.0], [1232.0, 6115.0], [1336.0, 6019.0], [1340.0, 6016.0], [1312.0, 6048.666666666667], [1316.0, 6045.0], [1324.0, 6037.0], [1332.0, 6020.5], [1288.0, 6073.5], [1280.0, 6085.0], [1308.0, 6048.0], [1304.0, 7959.5], [1296.0, 6072.5], [1396.0, 7976.0], [1392.0, 4871.0], [1376.0, 9330.0], [1404.0, 9307.0], [1400.0, 8872.333333333334], [1356.0, 14425.0], [1352.0, 12268.0], [1372.0, 7985.0], [1368.0, 9332.0], [1364.0, 10647.0], [1464.0, 4783.0], [1444.0, 9262.0], [1440.0, 7921.0], [1448.0, 9257.0], [1456.0, 9248.0], [1420.0, 9290.0], [1416.0, 9292.0], [1412.0, 7393.0], [1436.0, 9270.0], [1432.0, 9280.0], [1424.0, 9286.0], [1480.0, 9227.0], [1484.0, 11210.5], [1476.0, 4778.0], [1472.0, 8559.0], [1500.0, 13030.0], [1492.0, 7863.0], [1488.0, 9217.0], [1724.0, 2768.5], [1696.0, 283.0], [1712.0, 14857.769230769232], [1692.0, 5260.0], [1776.0, 140512.0], [1780.0, 49247.42857142857], [1784.0, 140540.0], [1788.0, 14646.0], [1756.0, 140686.0], [1728.0, 776.5], [1732.0, 531.3000000000001], [1736.0, 278.0], [1740.0, 299.0], [1848.0, 4860.5], [1852.0, 7515.5], [1824.0, 10106.0], [1832.0, 140323.0], [1804.0, 98073.0], [1796.0, 72662.0], [1812.0, 140349.0], [1808.0, 10236.0], [1860.0, 9112.5], [1904.0, 9020.0], [1856.0, 4852.0], [1876.0, 7478.0], [1872.0, 72562.0], [1888.0, 6158.0], [1892.0, 15414.0], [1900.0, 139247.0], [1896.0, 3812.0], [1980.0, 126.25], [1964.0, 127.0], [1960.0, 130.0], [1996.0, 125.5], [2020.0, 12404.0], [2024.0, 9632.0], [1988.0, 125.6], [2008.0, 12414.0], [2004.0, 8458.0], [2120.0, 66943.0], [2112.0, 66953.0], [2128.0, 66896.0], [2136.0, 66061.0], [2104.0, 165.8333333333333], [2096.0, 167.0], [2088.0, 166.5], [2240.0, 66403.0], [2288.0, 196.5], [2256.0, 7709.0], [2184.0, 66046.0], [2232.0, 66001.0], [2216.0, 66026.0], [2208.0, 66136.0], [2544.0, 156.5], [2536.0, 156.75], [2520.0, 158.0], [2432.0, 264.0], [2440.0, 160.0], [2448.0, 185.0], [2456.0, 157.88888888888889], [2464.0, 157.0], [2672.0, 177.0], [2664.0, 178.0], [2800.0, 114.0], [2752.0, 119.0], [2688.0, 175.0], [2712.0, 174.0], [2728.0, 172.0], [2720.0, 172.0], [2928.0, 177.0], [2880.0, 3589.0], [2888.0, 3575.0], [2904.0, 2005.6923076923076], [2936.0, 180.0], [2920.0, 3571.0], [2840.0, 110.42857142857143], [2832.0, 112.0], [2824.0, 111.66666666666666], [2848.0, 104.0], [3000.0, 6444.376457119073], [2968.0, 166.0], [2169.0, 66473.0], [2113.0, 66955.0], [2121.0, 66937.0], [2129.0, 66063.0], [2161.0, 66057.5], [2153.0, 66057.0], [2105.0, 131.0], [2097.0, 167.0], [2185.0, 66254.0], [2289.0, 190.57142857142858], [2241.0, 66317.8], [2249.0, 66376.0], [2257.0, 8781.0], [2177.0, 66256.5], [2193.0, 66039.0], [2201.0, 66037.66666666667], [2233.0, 65996.0], [2225.0, 66435.0], [2217.0, 66022.0], [2209.0, 66029.0], [2425.0, 211.5], [2537.0, 157.0], [2529.0, 158.0], [2521.0, 157.66666666666666], [2545.0, 156.0], [2441.0, 185.75], [2449.0, 192.55555555555554], [2457.0, 183.99999999999997], [2681.0, 175.8], [2649.0, 80.39999999999999], [2673.0, 177.0], [2665.0, 178.25], [2609.0, 88.0], [2753.0, 119.0], [2809.0, 113.0], [2793.0, 116.0], [2689.0, 176.0], [2729.0, 172.0], [2721.0, 172.54545454545453], [2881.0, 197.0], [2833.0, 111.0], [2825.0, 111.5], [2817.0, 112.2], [2873.0, 524.25], [2849.0, 104.0], [1081.0, 11913.0], [1061.0, 11924.0], [1085.0, 11909.0], [1057.0, 10018.5], [1077.0, 11240.75], [1029.0, 18901.0], [1025.0, 12601.0], [1049.0, 8113.0], [1045.0, 13047.0], [1065.0, 12666.333333333334], [1145.0, 8007.0], [1121.0, 8056.0], [1129.0, 8041.0], [1133.0, 8037.0], [1149.0, 6864.0], [1141.0, 11832.0], [1137.0, 8031.0], [1089.0, 8091.0], [1097.0, 13016.0], [1101.0, 11894.0], [1105.0, 8072.0], [1209.0, 6135.0], [1213.0, 6131.0], [1185.0, 6157.0], [1189.0, 11229.0], [1193.0, 7423.333333333333], [1205.0, 11624.333333333334], [1165.0, 6164.0], [1161.0, 6165.0], [1157.0, 16987.0], [1153.0, 6863.0], [1181.0, 6158.0], [1177.0, 6161.0], [1173.0, 12440.0], [1169.0, 12442.0], [1221.0, 6126.0], [1253.0, 12379.0], [1261.0, 6090.0], [1269.0, 12368.0], [1217.0, 16277.0], [1245.0, 9919.0], [1241.0, 6107.0], [1237.0, 6112.5], [1233.0, 6113.0], [1333.0, 9159.5], [1329.0, 6027.333333333333], [1313.0, 9862.0], [1317.0, 7953.0], [1341.0, 6015.0], [1293.0, 9213.0], [1285.0, 9222.5], [1281.0, 6084.0], [1305.0, 12329.0], [1301.0, 6071.0], [1401.0, 7973.0], [1397.0, 9324.0], [1377.0, 8042.25], [1381.0, 8714.75], [1389.0, 7100.0], [1405.0, 9307.0], [1357.0, 13419.0], [1353.0, 15435.0], [1369.0, 7985.0], [1365.0, 9334.0], [1361.0, 5876.5], [1465.0, 7890.0], [1441.0, 9266.0], [1449.0, 9255.0], [1453.0, 8579.0], [1469.0, 5817.0], [1461.0, 7019.5], [1421.0, 9289.0], [1417.0, 9291.5], [1413.0, 6834.0], [1409.0, 6548.333333333333], [1437.0, 7922.0], [1433.0, 9279.0], [1429.0, 9285.0], [1473.0, 7885.0], [1485.0, 4769.0], [1505.0, 5822.5], [1481.0, 7879.0], [1501.0, 13028.0], [1497.0, 7851.0], [1493.0, 7862.0], [1489.0, 7869.0], [1701.0, 5260.5], [1705.0, 2771.0], [1725.0, 2317.2], [1721.0, 324.0], [1713.0, 8425.6], [1693.0, 283.6666666666667], [1781.0, 13600.0], [1785.0, 15777.0], [1777.0, 54811.0], [1729.0, 279.0], [1733.0, 734.0909090909091], [1741.0, 277.0], [1753.0, 18716.88888888889], [1749.0, 320.0], [1849.0, 10176.0], [1853.0, 140292.0], [1825.0, 4891.0], [1833.0, 4883.0], [1837.0, 11801.0], [1845.0, 4860.0], [1841.0, 4864.0], [1805.0, 140385.0], [1801.0, 53623.33333333333], [1793.0, 12309.8], [1821.0, 95223.0], [1813.0, 15618.0], [1809.0, 140352.0], [1865.0, 14996.5], [1861.0, 140318.0], [1869.0, 72578.5], [1885.0, 4814.0], [1877.0, 15443.0], [1873.0, 13366.0], [1893.0, 15412.0], [1897.0, 12335.0], [1973.0, 127.0], [1961.0, 128.0], [1997.0, 125.5], [1989.0, 125.47058823529412], [2013.0, 14147.5], [2009.0, 12454.5], [2005.0, 7205.0], [2001.0, 124.5], [2170.0, 66262.0], [2114.0, 66955.0], [2122.0, 66933.0], [2138.0, 66063.0], [2162.0, 66056.0], [2146.0, 66059.4], [2106.0, 66962.0], [2098.0, 166.0], [2090.0, 167.0], [2186.0, 66044.0], [2298.0, 174.0], [2242.0, 143547.0], [2250.0, 65956.0], [2258.0, 6974.0], [2178.0, 66048.0], [2234.0, 65988.0], [2226.0, 66013.0], [2210.0, 66451.0], [2530.0, 157.6], [2522.0, 157.5], [2546.0, 156.0], [2538.0, 157.0], [2442.0, 160.0], [2450.0, 157.5], [2642.0, 81.0], [2650.0, 4912.0], [2666.0, 177.0], [2570.0, 106.0], [2562.0, 112.0], [2578.0, 106.0], [2610.0, 88.0], [2794.0, 115.66666666666667], [2754.0, 119.0], [2810.0, 112.8], [2690.0, 175.0], [2714.0, 173.0], [2722.0, 172.0], [2914.0, 181.0], [2938.0, 178.0], [2906.0, 3572.0], [2930.0, 1875.0], [2834.0, 112.0], [2826.0, 112.0], [2818.0, 112.0], [2858.0, 102.66666666666667], [2850.0, 104.0], [2171.0, 66053.0], [2115.0, 66953.0], [2123.0, 66932.0], [2131.0, 66061.0], [2155.0, 66058.0], [2107.0, 66960.0], [2099.0, 167.0], [2083.0, 168.0], [2283.0, 176.0], [2299.0, 194.2], [2243.0, 66400.0], [2251.0, 66367.0], [2259.0, 7052.0], [2235.0, 66404.0], [2187.0, 66044.0], [2203.0, 66246.0], [2227.0, 66010.0], [2219.0, 73277.0], [2531.0, 158.0], [2547.0, 155.84999999999997], [2523.0, 158.0], [2451.0, 210.0], [2467.0, 198.2], [2675.0, 177.2], [2635.0, 82.0], [2651.0, 4904.0], [2571.0, 107.0], [2715.0, 172.25], [2731.0, 171.5], [2907.0, 179.0], [2931.0, 179.0], [2835.0, 111.5], [2827.0, 111.28571428571428], [2859.0, 5293.0], [539.0, 33524.0], [541.0, 33524.0], [537.0, 33526.0], [527.0, 33529.0], [525.0, 33531.0], [523.0, 33532.5], [521.0, 33532.666666666664], [529.0, 33527.0], [569.0, 33481.0], [563.0, 33488.0], [573.0, 33478.0], [571.0, 33482.0], [551.0, 33515.0], [549.0, 33523.0], [547.0, 33522.0], [559.0, 33490.0], [557.0, 33494.0], [567.0, 33483.0], [565.0, 33483.0], [607.0, 33433.5], [593.0, 33445.0], [605.0, 33433.0], [603.0, 33438.0], [581.0, 33472.0], [579.0, 33477.0], [591.0, 33448.0], [597.0, 33440.0], [635.0, 33411.0], [639.0, 33395.0], [625.0, 33417.0], [637.0, 33401.0], [633.0, 33413.0], [623.0, 33426.0], [611.0, 33431.5], [621.0, 33426.333333333336], [617.0, 33427.0], [631.0, 33414.5], [629.0, 33415.666666666664], [669.0, 25316.0], [671.0, 24307.0], [657.0, 31377.0], [659.0, 30694.0], [661.0, 29317.0], [667.0, 26326.0], [665.0, 27335.0], [655.0, 33378.5], [643.0, 33391.0], [641.0, 33392.0], [645.0, 33390.0], [647.0, 33400.0], [653.0, 33381.0], [663.0, 28344.0], [675.0, 22289.0], [703.0, 19226.0], [699.0, 19227.0], [673.0, 23299.0], [677.0, 21281.0], [679.0, 20272.0], [685.0, 19235.0], [683.0, 26578.0], [681.0, 19263.0], [693.0, 19246.0], [691.0, 19232.333333333332], [733.0, 19190.0], [735.0, 19192.0], [721.0, 19218.0], [723.0, 19202.0], [731.0, 19191.0], [729.0, 19200.5], [719.0, 19207.5], [705.0, 19222.0], [707.0, 19221.0], [709.0, 19217.0], [711.0, 19214.0], [717.0, 19210.5], [715.0, 19211.0], [713.0, 19229.0], [727.0, 19200.0], [739.0, 19171.0], [743.0, 19162.0], [761.0, 18351.0], [741.0, 19166.0], [737.0, 19176.0], [751.0, 19167.0], [749.0, 19156.5], [747.0, 19158.0], [745.0, 19160.0], [759.0, 25409.0], [757.0, 19081.0], [755.0, 19160.333333333332], [797.0, 18340.0], [799.0, 18338.0], [787.0, 18348.5], [785.0, 18348.0], [795.0, 18903.0], [793.0, 18344.0], [775.0, 18349.5], [773.0, 18350.0], [783.0, 18347.5], [781.0, 18349.0], [777.0, 18349.0], [831.0, 18326.0], [815.0, 18328.0], [809.0, 18327.0], [805.0, 18338.0], [803.0, 18337.0], [859.0, 18285.5], [863.0, 18284.0], [857.0, 18285.0], [839.0, 18323.0], [835.0, 18323.75], [833.0, 18442.63157894737], [855.0, 18846.0], [853.0, 18288.0], [851.0, 24622.0], [891.0, 19301.0], [883.0, 18774.5], [895.0, 18181.0], [881.0, 19332.0], [871.0, 19400.0], [869.0, 18281.0], [879.0, 19347.0], [875.0, 18280.0], [887.0, 19319.5], [885.0, 18202.0], [901.0, 19297.0], [927.0, 17210.0], [925.0, 17774.0], [923.0, 17216.0], [911.0, 17228.0], [897.0, 18181.0], [899.0, 18926.333333333332], [903.0, 18163.0], [909.0, 17973.666666666668], [905.0, 24473.0], [919.0, 17223.5], [917.0, 18343.0], [959.0, 21435.0], [949.0, 18267.0], [957.0, 22451.0], [955.0, 17251.0], [935.0, 18320.0], [929.0, 17209.0], [941.0, 18316.0], [951.0, 23458.0], [985.0, 13922.0], [991.0, 13920.0], [977.0, 13926.5], [981.0, 13925.5], [979.0, 13926.0], [987.0, 13922.0], [967.0, 13937.0], [965.0, 13945.0], [963.0, 20155.0], [961.0, 21164.0], [975.0, 13928.0], [973.0, 13931.0], [971.0, 13935.0], [969.0, 13937.0], [983.0, 13924.0], [1021.0, 13755.0], [1023.0, 13737.0], [1009.0, 13894.0], [1013.0, 13884.5], [1011.0, 13888.0], [1019.0, 13777.0], [1017.0, 13793.0], [1007.0, 13900.0], [995.0, 13918.25], [997.0, 13916.0], [999.0, 12789.0], [1005.0, 13340.5], [1003.0, 12782.0], [1001.0, 13901.0], [1015.0, 13817.0], [1026.0, 12593.0], [1082.0, 11912.0], [1086.0, 13025.0], [1078.0, 11914.0], [1054.0, 11926.0], [1030.0, 11933.0], [1050.0, 11928.0], [1046.0, 11929.0], [1042.0, 12490.5], [1070.0, 13035.0], [1062.0, 8109.0], [1150.0, 6864.0], [1126.0, 8043.666666666667], [1130.0, 8039.0], [1134.0, 12967.0], [1146.0, 8005.0], [1142.0, 8009.0], [1138.0, 8031.0], [1102.0, 8078.0], [1098.0, 13014.0], [1090.0, 13022.0], [1118.0, 9965.5], [1110.0, 8066.0], [1106.0, 11886.0], [1166.0, 12441.0], [1210.0, 6133.0], [1190.0, 6156.0], [1198.0, 9289.0], [1202.0, 11223.0], [1154.0, 6856.0], [1182.0, 6157.0], [1178.0, 6161.0], [1174.0, 9976.0], [1170.0, 6162.0], [1230.0, 6120.25], [1274.0, 9900.0], [1250.0, 6101.0], [1266.0, 6090.0], [1226.0, 6120.0], [1222.0, 6125.0], [1218.0, 6128.0], [1246.0, 6102.0], [1242.0, 6105.0], [1234.0, 9929.0], [1342.0, 6015.0], [1314.0, 6046.0], [1318.0, 6044.0], [1322.0, 10226.333333333334], [1326.0, 6028.0], [1338.0, 6018.5], [1294.0, 6073.0], [1286.0, 6075.0], [1282.0, 6084.0], [1306.0, 6050.0], [1302.0, 6060.0], [1298.0, 6072.0], [1402.0, 9314.0], [1406.0, 9306.0], [1382.0, 7983.0], [1386.0, 7395.666666666667], [1390.0, 7979.0], [1358.0, 13390.0], [1354.0, 15434.0], [1370.0, 7984.0], [1366.0, 9333.0], [1362.0, 9333.0], [1450.0, 4801.0], [1446.0, 9261.5], [1454.0, 9248.0], [1466.0, 9236.0], [1422.0, 9288.0], [1434.0, 9275.0], [1430.0, 9282.0], [1506.0, 5804.0], [1482.0, 13198.0], [1474.0, 7886.0], [1502.0, 12021.0], [1494.0, 9209.0], [1726.0, 2304.1000000000004], [1698.0, 283.0], [1722.0, 1284.1000000000001], [1718.0, 280.0], [1714.0, 1524.3333333333333], [1694.0, 282.0], [1778.0, 140522.33333333334], [1774.0, 13600.0], [1786.0, 13596.0], [1782.0, 34237.0], [1730.0, 3456.54], [1734.0, 3397.4], [1738.0, 1543.75], [1742.0, 277.0], [1750.0, 276.0], [1842.0, 4864.0], [1830.0, 7522.75], [1838.0, 4867.0], [1854.0, 75197.0], [1798.0, 72661.5], [1794.0, 140495.0], [1822.0, 140358.0], [1818.0, 7568.5], [1814.0, 73303.5], [1870.0, 4845.0], [1894.0, 9370.0], [1862.0, 15475.0], [1886.0, 72532.5], [1882.0, 140252.0], [1878.0, 15442.0], [1874.0, 15469.0], [1890.0, 75204.0], [1902.0, 139260.5], [1978.0, 126.33333333333333], [1962.0, 128.0], [1990.0, 125.0], [2022.0, 12443.5], [1986.0, 126.5], [2014.0, 12412.0], [2006.0, 7203.0], [2002.0, 101.0], [2116.0, 66953.0], [2172.0, 66471.0], [2124.0, 66917.0], [2132.0, 66064.0], [2140.0, 66059.0], [2108.0, 66959.0], [2100.0, 166.66666666666666], [2284.0, 176.0], [2244.0, 66400.0], [2252.0, 66362.0], [2260.0, 6045.0], [2188.0, 66042.0], [2196.0, 66144.5], [2228.0, 66009.0], [2220.0, 66019.0], [2212.0, 66171.0], [2428.0, 263.0], [2524.0, 157.5], [2556.0, 113.0], [2452.0, 210.0], [2636.0, 82.5], [2676.0, 177.0], [2644.0, 81.0], [2652.0, 5075.0], [2612.0, 88.0], [2604.0, 89.41176470588236], [2796.0, 115.0], [2932.0, 3570.5], [2940.0, 1206.75], [2884.0, 569.3333333333334], [2908.0, 179.0], [2924.0, 2359.4], [2916.0, 182.0], [2836.0, 111.0], [2828.0, 111.25], [2868.0, 233.4], [2860.0, 10479.0], [2956.0, 166.0], [2173.0, 66049.0], [2117.0, 66951.0], [2125.0, 8689.0], [2133.0, 66062.0], [2141.0, 66059.0], [2165.0, 66056.0], [2157.0, 66268.5], [2109.0, 66959.0], [2101.0, 166.85714285714286], [2093.0, 167.0], [2085.0, 168.0], [2285.0, 176.0], [2301.0, 277.3333333333333], [2245.0, 66396.0], [2261.0, 5963.0], [2277.0, 177.0], [2181.0, 66326.0], [2229.0, 66426.0], [2213.0, 66026.0], [2525.0, 158.0], [2533.0, 156.5], [2469.0, 173.0], [2437.0, 160.0], [2453.0, 209.875], [2677.0, 177.0], [2645.0, 81.0], [2653.0, 4000.0], [2685.0, 176.5], [2669.0, 177.0], [2573.0, 107.0], [2613.0, 88.5], [2605.0, 89.0], [2701.0, 174.0], [2709.0, 172.0], [2749.0, 119.0], [2733.0, 171.6], [2725.0, 172.0], [2837.0, 110.33333333333333], [2917.0, 3571.0], [2925.0, 180.0], [2885.0, 1340.0], [2829.0, 110.5], [2869.0, 216.0], [2861.0, 137422.0], [2853.0, 103.66666666666666], [2957.0, 166.0], [1027.0, 12584.0], [1087.0, 12468.0], [1083.0, 8095.0], [1035.0, 11033.666666666666], [1055.0, 12485.0], [1051.0, 8112.0], [1047.0, 11929.0], [1043.0, 13049.0], [1071.0, 11918.0], [1067.0, 11921.0], [1147.0, 17998.0], [1151.0, 6863.0], [1123.0, 8043.5], [1127.0, 8042.0], [1131.0, 8038.0], [1143.0, 8008.0], [1139.0, 8021.0], [1119.0, 8058.0], [1095.0, 10629.666666666666], [1091.0, 13022.0], [1099.0, 8081.0], [1103.0, 11892.0], [1111.0, 11875.0], [1107.0, 11883.0], [1207.0, 9288.5], [1187.0, 9295.0], [1195.0, 6151.0], [1211.0, 6133.0], [1203.0, 6149.0], [1163.0, 12442.0], [1159.0, 12444.5], [1155.0, 6855.0], [1179.0, 12438.0], [1171.0, 11236.5], [1231.0, 16265.0], [1279.0, 8550.0], [1251.0, 6101.0], [1255.0, 6099.0], [1263.0, 6090.0], [1275.0, 6085.0], [1227.0, 6120.0], [1219.0, 9943.0], [1243.0, 6105.0], [1239.0, 9247.0], [1235.0, 6113.0], [1335.0, 11094.5], [1343.0, 6015.0], [1323.0, 9852.0], [1339.0, 6017.0], [1295.0, 6072.0], [1291.0, 6073.0], [1283.0, 8177.666666666667], [1311.0, 9863.0], [1307.0, 6049.0], [1299.0, 11118.0], [1395.0, 10648.333333333334], [1403.0, 7960.0], [1383.0, 9328.0], [1387.0, 9327.0], [1391.0, 7980.0], [1359.0, 9336.0], [1355.0, 14427.0], [1351.0, 15207.75], [1347.0, 14592.25], [1367.0, 9333.0], [1463.0, 7011.0], [1447.0, 9260.0], [1471.0, 9231.0], [1443.0, 9266.5], [1451.0, 9253.0], [1455.0, 9248.0], [1459.0, 4793.0], [1419.0, 8619.0], [1415.0, 9290.0], [1411.0, 9299.0], [1439.0, 7922.5], [1435.0, 9271.0], [1431.0, 9281.0], [1427.0, 8836.333333333334], [1475.0, 9232.0], [1503.0, 12020.0], [1507.0, 5802.0], [1487.0, 7873.0], [1479.0, 9231.0], [1499.0, 7851.5], [1495.0, 6744.0], [1491.0, 7305.0], [1699.0, 5260.0], [1723.0, 279.5], [1711.0, 1277.2], [1719.0, 280.0], [1715.0, 280.16666666666663], [1695.0, 283.0], [1675.0, 284.0], [1779.0, 13849.0], [1783.0, 13597.0], [1731.0, 6252.846153846156], [1735.0, 277.0], [1755.0, 13212.0], [1827.0, 4889.0], [1855.0, 15480.0], [1831.0, 4888.0], [1835.0, 72600.5], [1839.0, 4865.0], [1847.0, 7519.5], [1843.0, 4860.0], [1807.0, 76897.5], [1811.0, 15537.0], [1863.0, 140317.0], [1899.0, 13385.5], [1887.0, 11735.0], [1867.0, 76841.5], [1883.0, 72548.0], [1879.0, 13338.0], [1891.0, 13334.0], [1903.0, 14433.0], [1895.0, 9368.0], [1983.0, 126.25], [1979.0, 126.8076923076923], [1975.0, 127.0], [1963.0, 128.4], [2019.0, 12718.25], [2023.0, 9634.0], [1999.0, 125.0], [1991.0, 126.0], [1987.0, 126.0], [2015.0, 12411.0], [2011.0, 12989.5], [2166.0, 66473.0], [2126.0, 8607.0], [2142.0, 66062.0], [2174.0, 66051.0], [2150.0, 66269.0], [2078.0, 168.0], [2102.0, 166.63636363636363], [2094.0, 166.8], [2086.0, 168.0], [2246.0, 66396.0], [2254.0, 66152.0], [2182.0, 66465.0], [2190.0, 66042.5], [2198.0, 66038.0], [2230.0, 66005.0], [2222.0, 66226.5], [2430.0, 160.0], [2422.0, 160.9], [2438.0, 159.0], [2446.0, 158.74999999999997], [2454.0, 158.0], [2462.0, 156.66666666666666], [2686.0, 175.0], [2678.0, 176.0], [2638.0, 81.0], [2646.0, 81.0], [2654.0, 4066.0], [2670.0, 177.0], [2614.0, 87.30000000000001], [2606.0, 89.0], [2798.0, 113.7272727272727], [2806.0, 112.0], [2702.0, 174.5], [2718.0, 172.5], [2934.0, 1873.5], [2902.0, 180.0], [2926.0, 3570.0], [2862.0, 9980.0], [2159.0, 66162.25], [2175.0, 66049.0], [2119.0, 66943.5], [2127.0, 66904.0], [2143.0, 66061.0], [2151.0, 72484.33333333333], [2111.0, 66956.0], [2103.0, 166.58333333333331], [2095.0, 166.5], [2247.0, 65957.0], [2255.0, 65937.0], [2287.0, 175.71428571428572], [2191.0, 66042.0], [2199.0, 66038.0], [2231.0, 66002.0], [2223.0, 66436.0], [2551.0, 155.25], [2543.0, 156.5], [2559.0, 113.0], [2535.0, 156.5], [2447.0, 179.5], [2455.0, 157.875], [2463.0, 177.8], [2647.0, 81.25], [2655.0, 2991.0], [2615.0, 87.0], [2575.0, 107.0], [2607.0, 88.5], [2799.0, 114.0], [2815.0, 112.75], [2751.0, 119.0], [2719.0, 172.0], [2847.0, 104.0], [2935.0, 1310.0], [2927.0, 179.0], [2887.0, 2453.5], [2903.0, 1876.0], [2911.0, 2826.6666666666665], [2839.0, 110.0], [2831.0, 111.0], [2879.0, 1176.3333333333335], [2855.0, 103.0], [2967.0, 166.0], [1.0, 100287.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[2936.636168091158, 7319.25440170941]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 3000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 2503.2, "minX": 1.68288312E12, "maxY": 193009.3, "series": [{"data": [[1.68288354E12, 3581.9666666666667], [1.68288336E12, 193009.3], [1.68288342E12, 78419.5], [1.68288324E12, 180673.33333333334], [1.6828833E12, 175168.11666666667], [1.68288312E12, 33831.5], [1.68288318E12, 171731.0], [1.68288348E12, 4039.3166666666666]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.68288354E12, 2503.2], [1.68288336E12, 135702.0], [1.68288342E12, 56162.4], [1.68288324E12, 127125.6], [1.6828833E12, 120346.8], [1.68288312E12, 23881.2], [1.68288318E12, 119036.4], [1.68288348E12, 3032.4]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68288354E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 2908.2842068237633, "minX": 1.68288312E12, "maxY": 99745.23825503344, "series": [{"data": [[1.68288354E12, 99745.23825503344], [1.68288336E12, 4604.095815795978], [1.68288342E12, 6052.13354269478], [1.68288324E12, 9129.127355382752], [1.6828833E12, 7683.656215316232], [1.68288312E12, 2908.2842068237633], [1.68288318E12, 6331.886613841935], [1.68288348E12, 59103.653739612164]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68288354E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 2908.2529018642276, "minX": 1.68288312E12, "maxY": 99745.22147651004, "series": [{"data": [[1.68288354E12, 99745.22147651004], [1.68288336E12, 4597.9706610547255], [1.68288342E12, 6034.74353222671], [1.68288324E12, 9033.903346949513], [1.6828833E12, 6861.607866259734], [1.68288312E12, 2908.2529018642276], [1.68288318E12, 6039.301942360289], [1.68288348E12, 59103.64819944596]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68288354E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.20805369127516787, "minX": 1.68288312E12, "maxY": 11990.32409972299, "series": [{"data": [[1.68288354E12, 0.20805369127516787], [1.68288336E12, 846.0710571923751], [1.68288342E12, 2276.2383729624726], [1.68288324E12, 2519.0206878376634], [1.6828833E12, 5165.219894561594], [1.68288312E12, 73.77172001406956], [1.68288318E12, 512.3636491129661], [1.68288348E12, 11990.32409972299]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68288354E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 5.0, "minX": 1.68288312E12, "maxY": 227386.0, "series": [{"data": [[1.68288354E12, 100287.0], [1.68288336E12, 212921.0], [1.68288342E12, 143547.0], [1.68288324E12, 130721.0], [1.6828833E12, 164558.0], [1.68288312E12, 21090.0], [1.68288318E12, 80943.0], [1.68288348E12, 227386.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.68288354E12, 100157.0], [1.68288336E12, 11354.0], [1.68288342E12, 13924.0], [1.68288324E12, 11721.0], [1.6828833E12, 6433.0], [1.68288312E12, 11829.4], [1.68288318E12, 13094.0], [1.68288348E12, 86731.20000000001]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.68288354E12, 100286.0], [1.68288336E12, 100106.0], [1.68288342E12, 128066.0], [1.68288324E12, 127533.0], [1.6828833E12, 157809.72], [1.68288312E12, 14413.24], [1.68288318E12, 60833.72000000007], [1.68288348E12, 227383.14]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.68288354E12, 100167.05], [1.68288336E12, 25715.0], [1.68288342E12, 19299.0], [1.68288324E12, 63698.0], [1.6828833E12, 24334.6], [1.68288312E12, 12725.0], [1.68288318E12, 27990.0], [1.68288348E12, 227346.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.68288354E12, 90075.0], [1.68288336E12, 16.0], [1.68288342E12, 17.0], [1.68288324E12, 18.0], [1.6828833E12, 19.0], [1.68288312E12, 24.0], [1.68288318E12, 5.0], [1.68288348E12, 30694.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.68288354E12, 100091.5], [1.68288336E12, 151.0], [1.68288342E12, 154.0], [1.68288324E12, 219.5], [1.6828833E12, 152.0], [1.68288312E12, 148.0], [1.68288318E12, 161.0], [1.68288348E12, 36018.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68288354E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 68.0, "minX": 1.0, "maxY": 133736.0, "series": [{"data": [[2.0, 52062.5], [3.0, 40955.0], [4.0, 25458.0], [6.0, 36197.5], [7.0, 17251.0], [8.0, 59408.5], [9.0, 6864.0], [10.0, 20371.5], [11.0, 12335.0], [12.0, 84.5], [14.0, 55518.0], [15.0, 63134.5], [18.0, 12413.5], [20.0, 14146.0], [21.0, 7965.0], [22.0, 11635.0], [23.0, 36860.0], [24.0, 50062.0], [26.0, 16031.5], [28.0, 11357.0], [33.0, 88402.0], [36.0, 10063.0], [37.0, 36163.0], [45.0, 17223.0], [46.0, 7654.5], [48.0, 36857.0], [51.0, 100149.0], [55.0, 8082.0], [57.0, 13760.5], [60.0, 102.0], [64.0, 1040.0], [68.0, 4332.0], [76.0, 68.0], [78.0, 101.0], [77.0, 19207.0], [83.0, 167.0], [95.0, 115.0], [94.0, 7923.0], [100.0, 126.0], [107.0, 141.0], [104.0, 71.0], [115.0, 11873.0], [127.0, 11912.0], [131.0, 12205.0], [129.0, 66058.0], [137.0, 11819.0], [136.0, 13393.5], [139.0, 128.0], [145.0, 9232.0], [146.0, 18326.0], [155.0, 10344.0], [165.0, 130.0], [171.0, 139.0], [180.0, 134.0], [177.0, 33481.0], [185.0, 145.0], [195.0, 6128.0], [204.0, 3952.0], [205.0, 114.0], [231.0, 125.0], [229.0, 100087.0], [238.0, 152.0], [239.0, 129.0], [236.0, 141.0], [237.0, 146.0], [233.0, 5541.5], [235.0, 142.0], [232.0, 145.0], [234.0, 149.0], [242.0, 149.0], [244.0, 163.0], [247.0, 161.0], [240.0, 165.0], [241.0, 155.0], [245.0, 137.0], [254.0, 142.0], [248.0, 147.0], [266.0, 8308.0], [256.0, 180.0], [257.0, 180.0], [258.0, 11536.0], [287.0, 14678.0], [281.0, 163.0], [279.0, 135.0], [282.0, 189.0], [297.0, 130.0], [301.0, 100105.0], [307.0, 9501.0], [340.0, 10945.0], [342.0, 9325.0], [359.0, 141.0], [366.0, 138.0], [380.0, 11835.0], [375.0, 137.0], [383.0, 3870.0], [371.0, 134.0], [393.0, 9585.0], [396.0, 11194.0], [390.0, 158.0], [386.0, 321.0], [410.0, 151.5], [431.0, 8911.0], [418.0, 210.0], [425.0, 144.0], [439.0, 6802.0], [440.0, 145.0], [436.0, 137.0], [447.0, 155.0], [446.0, 134.5], [460.0, 133.0], [463.0, 9900.0], [454.0, 134.0], [459.0, 129.0], [453.0, 7119.0], [448.0, 137.0], [462.0, 149.0], [461.0, 162.0], [449.0, 229.0], [457.0, 168.0], [478.0, 113.0], [472.0, 139.0], [470.0, 138.0], [465.0, 132.0], [468.0, 133.0], [475.0, 10323.0], [479.0, 5996.0], [474.0, 7376.5], [473.0, 141.0], [466.0, 164.0], [467.0, 161.0], [477.0, 163.0], [485.0, 139.0], [484.0, 171.5], [489.0, 6177.0], [481.0, 4930.0], [490.0, 124.0], [500.0, 288.0], [525.0, 147.0], [526.0, 184.0], [512.0, 186.0], [523.0, 12039.0], [561.0, 15279.0], [580.0, 162.0], [588.0, 138.0], [589.0, 170.0], [592.0, 173.0], [651.0, 11608.0], [642.0, 6946.0], [665.0, 208.0], [659.0, 153.0], [690.0, 93.0], [688.0, 9485.0], [683.0, 132.0], [689.0, 151.0], [702.0, 133.5], [718.0, 168.0], [733.0, 140.0], [704.0, 150.0], [780.0, 133.0], [864.0, 204.0], [928.0, 130.0], [994.0, 8839.0], [1018.0, 430.0], [1.0, 40595.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[64.0, 54323.0], [33.0, 19278.0], [1.0, 98251.0], [393.0, 44062.0], [780.0, 133736.0], [439.0, 26855.0], [115.0, 52313.0], [463.0, 27040.0], [473.0, 116233.0], [481.0, 109747.5], [60.0, 81767.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1018.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 100149.0, "series": [{"data": [[2.0, 52062.5], [3.0, 40955.0], [4.0, 25458.0], [6.0, 36197.5], [7.0, 17251.0], [8.0, 59408.5], [9.0, 6864.0], [10.0, 20371.5], [11.0, 12335.0], [12.0, 84.5], [14.0, 55518.0], [15.0, 63134.5], [18.0, 12413.5], [20.0, 14146.0], [21.0, 7965.0], [22.0, 11635.0], [23.0, 36860.0], [24.0, 50062.0], [26.0, 16031.5], [28.0, 11357.0], [33.0, 88402.0], [36.0, 10063.0], [37.0, 36163.0], [45.0, 17223.0], [46.0, 7654.5], [48.0, 36857.0], [51.0, 100149.0], [55.0, 8082.0], [57.0, 13760.5], [60.0, 102.0], [64.0, 1040.0], [68.0, 4332.0], [76.0, 68.0], [78.0, 101.0], [77.0, 19207.0], [83.0, 167.0], [95.0, 115.0], [94.0, 7923.0], [100.0, 126.0], [107.0, 141.0], [104.0, 71.0], [115.0, 11873.0], [127.0, 11912.0], [131.0, 12205.0], [129.0, 66058.0], [137.0, 11818.0], [136.0, 13393.5], [139.0, 128.0], [145.0, 9232.0], [146.0, 18326.0], [155.0, 10344.0], [165.0, 130.0], [171.0, 139.0], [180.0, 134.0], [177.0, 33481.0], [185.0, 145.0], [195.0, 6128.0], [204.0, 3952.0], [205.0, 114.0], [231.0, 125.0], [229.0, 100087.0], [238.0, 152.0], [239.0, 129.0], [236.0, 141.0], [237.0, 146.0], [233.0, 5541.5], [235.0, 142.0], [232.0, 145.0], [234.0, 149.0], [242.0, 148.5], [244.0, 163.0], [247.0, 161.0], [240.0, 165.0], [241.0, 155.0], [245.0, 137.0], [254.0, 142.0], [248.0, 147.0], [266.0, 8308.0], [256.0, 180.0], [257.0, 180.0], [258.0, 11536.0], [287.0, 14678.0], [281.0, 163.0], [279.0, 135.0], [282.0, 189.0], [297.0, 130.0], [301.0, 100105.0], [307.0, 9501.0], [340.0, 10945.0], [342.0, 9325.0], [359.0, 141.0], [366.0, 138.0], [380.0, 11835.0], [375.0, 137.0], [383.0, 3870.0], [371.0, 134.0], [393.0, 9585.0], [396.0, 11194.0], [390.0, 158.0], [386.0, 321.0], [410.0, 151.5], [431.0, 8911.0], [418.0, 210.0], [425.0, 144.0], [439.0, 6802.0], [440.0, 145.0], [436.0, 137.0], [447.0, 155.0], [446.0, 134.5], [460.0, 133.0], [463.0, 9900.0], [454.0, 134.0], [459.0, 129.0], [453.0, 7119.0], [448.0, 137.0], [462.0, 149.0], [461.0, 162.0], [449.0, 229.0], [457.0, 168.0], [478.0, 113.0], [472.0, 139.0], [470.0, 138.0], [465.0, 132.0], [468.0, 133.0], [475.0, 10323.0], [479.0, 5996.0], [474.0, 7376.5], [473.0, 141.0], [466.0, 164.0], [467.0, 161.0], [477.0, 163.0], [485.0, 139.0], [484.0, 171.5], [489.0, 6177.0], [481.0, 4930.0], [490.0, 124.0], [500.0, 288.0], [525.0, 147.0], [526.0, 184.0], [512.0, 186.0], [523.0, 12039.0], [561.0, 15279.0], [580.0, 162.0], [588.0, 138.0], [589.0, 170.0], [592.0, 173.0], [651.0, 11608.0], [642.0, 6946.0], [665.0, 208.0], [659.0, 153.0], [690.0, 93.0], [688.0, 9485.0], [683.0, 132.0], [689.0, 151.0], [702.0, 133.5], [718.0, 168.0], [733.0, 140.0], [704.0, 150.0], [780.0, 133.0], [864.0, 204.0], [928.0, 130.0], [994.0, 8839.0], [1018.0, 430.0], [1.0, 40595.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[64.0, 0.0], [33.0, 0.0], [1.0, 0.0], [393.0, 0.0], [780.0, 0.0], [439.0, 0.0], [115.0, 0.0], [463.0, 0.0], [473.0, 0.0], [481.0, 0.0], [60.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1018.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 93.6, "minX": 1.68288312E12, "maxY": 253.5, "series": [{"data": [[1.68288336E12, 253.5], [1.68288342E12, 117.0], [1.68288324E12, 230.1], [1.6828833E12, 237.9], [1.68288312E12, 93.6], [1.68288318E12, 237.9]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68288342E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.68288312E12, "maxY": 269.25, "series": [{"data": [[1.68288354E12, 4.966666666666667], [1.68288336E12, 269.25], [1.68288342E12, 111.43333333333334], [1.68288324E12, 252.23333333333332], [1.6828833E12, 238.78333333333333], [1.68288312E12, 47.38333333333333], [1.68288318E12, 236.18333333333334], [1.68288348E12, 6.016666666666667]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.68288336E12, 0.016666666666666666], [1.68288342E12, 0.016666666666666666], [1.68288324E12, 0.7333333333333333], [1.6828833E12, 1.4833333333333334], [1.68288318E12, 1.5]], "isOverall": false, "label": "Non HTTP response code: java.net.SocketException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68288354E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.68288312E12, "maxY": 269.25, "series": [{"data": [[1.68288354E12, 4.966666666666667], [1.68288336E12, 269.25], [1.68288342E12, 111.43333333333334], [1.68288324E12, 252.23333333333332], [1.6828833E12, 238.78333333333333], [1.68288312E12, 47.38333333333333], [1.68288318E12, 236.18333333333334], [1.68288348E12, 6.016666666666667]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.68288336E12, 0.016666666666666666], [1.68288342E12, 0.016666666666666666], [1.68288324E12, 0.7333333333333333], [1.6828833E12, 1.4833333333333334], [1.68288318E12, 1.5]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68288354E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.68288312E12, "maxY": 269.25, "series": [{"data": [[1.68288354E12, 4.966666666666667], [1.68288336E12, 269.25], [1.68288342E12, 111.43333333333334], [1.68288324E12, 252.23333333333332], [1.6828833E12, 238.78333333333333], [1.68288312E12, 47.38333333333333], [1.68288318E12, 236.18333333333334], [1.68288348E12, 6.016666666666667]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.68288336E12, 0.016666666666666666], [1.68288342E12, 0.016666666666666666], [1.68288324E12, 0.7333333333333333], [1.6828833E12, 1.4833333333333334], [1.68288318E12, 1.5]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68288354E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

