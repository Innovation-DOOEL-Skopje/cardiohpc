/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 4.0, "minX": 0.0, "maxY": 229339.0, "series": [{"data": [[0.0, 4.0], [0.1, 10.0], [0.2, 14.0], [0.3, 16.0], [0.4, 18.0], [0.5, 19.0], [0.6, 21.0], [0.7, 23.0], [0.8, 25.0], [0.9, 26.0], [1.0, 27.0], [1.1, 28.0], [1.2, 30.0], [1.3, 30.0], [1.4, 31.0], [1.5, 33.0], [1.6, 33.0], [1.7, 34.0], [1.8, 35.0], [1.9, 35.0], [2.0, 36.0], [2.1, 36.0], [2.2, 37.0], [2.3, 38.0], [2.4, 38.0], [2.5, 39.0], [2.6, 40.0], [2.7, 40.0], [2.8, 41.0], [2.9, 42.0], [3.0, 42.0], [3.1, 43.0], [3.2, 43.0], [3.3, 44.0], [3.4, 45.0], [3.5, 45.0], [3.6, 46.0], [3.7, 46.0], [3.8, 47.0], [3.9, 48.0], [4.0, 48.0], [4.1, 49.0], [4.2, 49.0], [4.3, 50.0], [4.4, 51.0], [4.5, 52.0], [4.6, 52.0], [4.7, 53.0], [4.8, 53.0], [4.9, 54.0], [5.0, 54.0], [5.1, 54.0], [5.2, 55.0], [5.3, 55.0], [5.4, 56.0], [5.5, 57.0], [5.6, 57.0], [5.7, 57.0], [5.8, 58.0], [5.9, 58.0], [6.0, 59.0], [6.1, 59.0], [6.2, 60.0], [6.3, 60.0], [6.4, 60.0], [6.5, 61.0], [6.6, 61.0], [6.7, 61.0], [6.8, 62.0], [6.9, 62.0], [7.0, 62.0], [7.1, 63.0], [7.2, 63.0], [7.3, 64.0], [7.4, 64.0], [7.5, 64.0], [7.6, 65.0], [7.7, 65.0], [7.8, 66.0], [7.9, 66.0], [8.0, 67.0], [8.1, 67.0], [8.2, 68.0], [8.3, 68.0], [8.4, 69.0], [8.5, 69.0], [8.6, 70.0], [8.7, 70.0], [8.8, 70.0], [8.9, 71.0], [9.0, 71.0], [9.1, 72.0], [9.2, 72.0], [9.3, 72.0], [9.4, 73.0], [9.5, 73.0], [9.6, 74.0], [9.7, 74.0], [9.8, 74.0], [9.9, 75.0], [10.0, 75.0], [10.1, 75.0], [10.2, 76.0], [10.3, 76.0], [10.4, 77.0], [10.5, 77.0], [10.6, 78.0], [10.7, 78.0], [10.8, 79.0], [10.9, 80.0], [11.0, 80.0], [11.1, 81.0], [11.2, 81.0], [11.3, 81.0], [11.4, 81.0], [11.5, 82.0], [11.6, 82.0], [11.7, 82.0], [11.8, 82.0], [11.9, 83.0], [12.0, 83.0], [12.1, 83.0], [12.2, 83.0], [12.3, 84.0], [12.4, 84.0], [12.5, 84.0], [12.6, 85.0], [12.7, 85.0], [12.8, 85.0], [12.9, 86.0], [13.0, 86.0], [13.1, 86.0], [13.2, 86.0], [13.3, 87.0], [13.4, 87.0], [13.5, 88.0], [13.6, 88.0], [13.7, 88.0], [13.8, 89.0], [13.9, 89.0], [14.0, 89.0], [14.1, 90.0], [14.2, 90.0], [14.3, 90.0], [14.4, 91.0], [14.5, 91.0], [14.6, 91.0], [14.7, 92.0], [14.8, 92.0], [14.9, 92.0], [15.0, 93.0], [15.1, 93.0], [15.2, 94.0], [15.3, 94.0], [15.4, 94.0], [15.5, 94.0], [15.6, 95.0], [15.7, 95.0], [15.8, 95.0], [15.9, 95.0], [16.0, 96.0], [16.1, 96.0], [16.2, 96.0], [16.3, 97.0], [16.4, 97.0], [16.5, 97.0], [16.6, 98.0], [16.7, 98.0], [16.8, 99.0], [16.9, 99.0], [17.0, 99.0], [17.1, 100.0], [17.2, 100.0], [17.3, 100.0], [17.4, 101.0], [17.5, 101.0], [17.6, 102.0], [17.7, 102.0], [17.8, 102.0], [17.9, 103.0], [18.0, 103.0], [18.1, 104.0], [18.2, 104.0], [18.3, 104.0], [18.4, 105.0], [18.5, 105.0], [18.6, 106.0], [18.7, 106.0], [18.8, 107.0], [18.9, 108.0], [19.0, 108.0], [19.1, 109.0], [19.2, 109.0], [19.3, 109.0], [19.4, 110.0], [19.5, 110.0], [19.6, 110.0], [19.7, 110.0], [19.8, 111.0], [19.9, 111.0], [20.0, 111.0], [20.1, 111.0], [20.2, 111.0], [20.3, 112.0], [20.4, 112.0], [20.5, 112.0], [20.6, 113.0], [20.7, 113.0], [20.8, 114.0], [20.9, 114.0], [21.0, 115.0], [21.1, 115.0], [21.2, 115.0], [21.3, 116.0], [21.4, 116.0], [21.5, 116.0], [21.6, 117.0], [21.7, 117.0], [21.8, 118.0], [21.9, 118.0], [22.0, 118.0], [22.1, 118.0], [22.2, 119.0], [22.3, 119.0], [22.4, 119.0], [22.5, 120.0], [22.6, 120.0], [22.7, 121.0], [22.8, 121.0], [22.9, 121.0], [23.0, 122.0], [23.1, 122.0], [23.2, 122.0], [23.3, 123.0], [23.4, 123.0], [23.5, 124.0], [23.6, 124.0], [23.7, 124.0], [23.8, 125.0], [23.9, 125.0], [24.0, 125.0], [24.1, 126.0], [24.2, 126.0], [24.3, 127.0], [24.4, 127.0], [24.5, 127.0], [24.6, 128.0], [24.7, 128.0], [24.8, 129.0], [24.9, 129.0], [25.0, 130.0], [25.1, 130.0], [25.2, 131.0], [25.3, 131.0], [25.4, 132.0], [25.5, 133.0], [25.6, 133.0], [25.7, 134.0], [25.8, 135.0], [25.9, 135.0], [26.0, 136.0], [26.1, 136.0], [26.2, 137.0], [26.3, 137.0], [26.4, 137.0], [26.5, 137.0], [26.6, 138.0], [26.7, 138.0], [26.8, 138.0], [26.9, 138.0], [27.0, 139.0], [27.1, 139.0], [27.2, 140.0], [27.3, 141.0], [27.4, 141.0], [27.5, 142.0], [27.6, 142.0], [27.7, 143.0], [27.8, 144.0], [27.9, 145.0], [28.0, 146.0], [28.1, 146.0], [28.2, 147.0], [28.3, 147.0], [28.4, 148.0], [28.5, 149.0], [28.6, 150.0], [28.7, 150.0], [28.8, 151.0], [28.9, 152.0], [29.0, 153.0], [29.1, 154.0], [29.2, 154.0], [29.3, 155.0], [29.4, 155.0], [29.5, 156.0], [29.6, 156.0], [29.7, 157.0], [29.8, 157.0], [29.9, 158.0], [30.0, 158.0], [30.1, 158.0], [30.2, 159.0], [30.3, 159.0], [30.4, 159.0], [30.5, 160.0], [30.6, 160.0], [30.7, 161.0], [30.8, 161.0], [30.9, 161.0], [31.0, 161.0], [31.1, 162.0], [31.2, 162.0], [31.3, 162.0], [31.4, 162.0], [31.5, 163.0], [31.6, 163.0], [31.7, 163.0], [31.8, 164.0], [31.9, 164.0], [32.0, 164.0], [32.1, 165.0], [32.2, 165.0], [32.3, 165.0], [32.4, 165.0], [32.5, 166.0], [32.6, 166.0], [32.7, 167.0], [32.8, 167.0], [32.9, 167.0], [33.0, 168.0], [33.1, 168.0], [33.2, 169.0], [33.3, 169.0], [33.4, 169.0], [33.5, 170.0], [33.6, 171.0], [33.7, 172.0], [33.8, 173.0], [33.9, 173.0], [34.0, 174.0], [34.1, 175.0], [34.2, 175.0], [34.3, 176.0], [34.4, 177.0], [34.5, 177.0], [34.6, 178.0], [34.7, 179.0], [34.8, 180.0], [34.9, 181.0], [35.0, 181.0], [35.1, 182.0], [35.2, 182.0], [35.3, 183.0], [35.4, 184.0], [35.5, 184.0], [35.6, 185.0], [35.7, 186.0], [35.8, 187.0], [35.9, 187.0], [36.0, 188.0], [36.1, 189.0], [36.2, 190.0], [36.3, 191.0], [36.4, 192.0], [36.5, 193.0], [36.6, 193.0], [36.7, 194.0], [36.8, 195.0], [36.9, 195.0], [37.0, 196.0], [37.1, 197.0], [37.2, 197.0], [37.3, 198.0], [37.4, 198.0], [37.5, 198.0], [37.6, 199.0], [37.7, 199.0], [37.8, 200.0], [37.9, 200.0], [38.0, 201.0], [38.1, 201.0], [38.2, 201.0], [38.3, 202.0], [38.4, 202.0], [38.5, 203.0], [38.6, 203.0], [38.7, 204.0], [38.8, 204.0], [38.9, 205.0], [39.0, 206.0], [39.1, 206.0], [39.2, 207.0], [39.3, 207.0], [39.4, 208.0], [39.5, 209.0], [39.6, 210.0], [39.7, 211.0], [39.8, 211.0], [39.9, 212.0], [40.0, 213.0], [40.1, 213.0], [40.2, 214.0], [40.3, 214.0], [40.4, 214.0], [40.5, 214.0], [40.6, 215.0], [40.7, 215.0], [40.8, 216.0], [40.9, 216.0], [41.0, 217.0], [41.1, 217.0], [41.2, 218.0], [41.3, 218.0], [41.4, 218.0], [41.5, 219.0], [41.6, 219.0], [41.7, 220.0], [41.8, 220.0], [41.9, 221.0], [42.0, 222.0], [42.1, 223.0], [42.2, 223.0], [42.3, 224.0], [42.4, 224.0], [42.5, 224.0], [42.6, 225.0], [42.7, 225.0], [42.8, 225.0], [42.9, 226.0], [43.0, 227.0], [43.1, 227.0], [43.2, 228.0], [43.3, 228.0], [43.4, 228.0], [43.5, 229.0], [43.6, 229.0], [43.7, 230.0], [43.8, 231.0], [43.9, 232.0], [44.0, 233.0], [44.1, 233.0], [44.2, 234.0], [44.3, 234.0], [44.4, 235.0], [44.5, 235.0], [44.6, 236.0], [44.7, 237.0], [44.8, 237.0], [44.9, 238.0], [45.0, 238.0], [45.1, 239.0], [45.2, 239.0], [45.3, 239.0], [45.4, 240.0], [45.5, 240.0], [45.6, 240.0], [45.7, 241.0], [45.8, 241.0], [45.9, 241.0], [46.0, 242.0], [46.1, 242.0], [46.2, 242.0], [46.3, 242.0], [46.4, 243.0], [46.5, 243.0], [46.6, 243.0], [46.7, 244.0], [46.8, 244.0], [46.9, 244.0], [47.0, 245.0], [47.1, 245.0], [47.2, 245.0], [47.3, 245.0], [47.4, 246.0], [47.5, 246.0], [47.6, 246.0], [47.7, 246.0], [47.8, 247.0], [47.9, 247.0], [48.0, 247.0], [48.1, 248.0], [48.2, 248.0], [48.3, 248.0], [48.4, 248.0], [48.5, 248.0], [48.6, 249.0], [48.7, 249.0], [48.8, 249.0], [48.9, 249.0], [49.0, 250.0], [49.1, 250.0], [49.2, 250.0], [49.3, 250.0], [49.4, 251.0], [49.5, 251.0], [49.6, 251.0], [49.7, 251.0], [49.8, 252.0], [49.9, 252.0], [50.0, 252.0], [50.1, 252.0], [50.2, 253.0], [50.3, 253.0], [50.4, 253.0], [50.5, 253.0], [50.6, 253.0], [50.7, 254.0], [50.8, 254.0], [50.9, 254.0], [51.0, 254.0], [51.1, 254.0], [51.2, 254.0], [51.3, 254.0], [51.4, 255.0], [51.5, 255.0], [51.6, 255.0], [51.7, 255.0], [51.8, 255.0], [51.9, 255.0], [52.0, 256.0], [52.1, 256.0], [52.2, 256.0], [52.3, 256.0], [52.4, 256.0], [52.5, 257.0], [52.6, 257.0], [52.7, 257.0], [52.8, 257.0], [52.9, 257.0], [53.0, 258.0], [53.1, 258.0], [53.2, 258.0], [53.3, 258.0], [53.4, 259.0], [53.5, 259.0], [53.6, 260.0], [53.7, 260.0], [53.8, 260.0], [53.9, 261.0], [54.0, 261.0], [54.1, 261.0], [54.2, 262.0], [54.3, 262.0], [54.4, 262.0], [54.5, 262.0], [54.6, 262.0], [54.7, 263.0], [54.8, 263.0], [54.9, 263.0], [55.0, 263.0], [55.1, 263.0], [55.2, 263.0], [55.3, 264.0], [55.4, 264.0], [55.5, 264.0], [55.6, 264.0], [55.7, 264.0], [55.8, 264.0], [55.9, 264.0], [56.0, 264.0], [56.1, 265.0], [56.2, 265.0], [56.3, 265.0], [56.4, 265.0], [56.5, 265.0], [56.6, 266.0], [56.7, 266.0], [56.8, 266.0], [56.9, 266.0], [57.0, 267.0], [57.1, 267.0], [57.2, 268.0], [57.3, 268.0], [57.4, 269.0], [57.5, 269.0], [57.6, 270.0], [57.7, 270.0], [57.8, 271.0], [57.9, 271.0], [58.0, 271.0], [58.1, 271.0], [58.2, 271.0], [58.3, 272.0], [58.4, 272.0], [58.5, 272.0], [58.6, 272.0], [58.7, 272.0], [58.8, 273.0], [58.9, 273.0], [59.0, 273.0], [59.1, 273.0], [59.2, 273.0], [59.3, 274.0], [59.4, 274.0], [59.5, 274.0], [59.6, 274.0], [59.7, 274.0], [59.8, 274.0], [59.9, 275.0], [60.0, 275.0], [60.1, 275.0], [60.2, 275.0], [60.3, 275.0], [60.4, 276.0], [60.5, 276.0], [60.6, 276.0], [60.7, 276.0], [60.8, 277.0], [60.9, 277.0], [61.0, 277.0], [61.1, 277.0], [61.2, 277.0], [61.3, 278.0], [61.4, 278.0], [61.5, 278.0], [61.6, 278.0], [61.7, 279.0], [61.8, 279.0], [61.9, 279.0], [62.0, 280.0], [62.1, 280.0], [62.2, 280.0], [62.3, 280.0], [62.4, 280.0], [62.5, 281.0], [62.6, 281.0], [62.7, 281.0], [62.8, 282.0], [62.9, 282.0], [63.0, 282.0], [63.1, 282.0], [63.2, 282.0], [63.3, 283.0], [63.4, 283.0], [63.5, 283.0], [63.6, 283.0], [63.7, 284.0], [63.8, 284.0], [63.9, 284.0], [64.0, 285.0], [64.1, 285.0], [64.2, 285.0], [64.3, 286.0], [64.4, 286.0], [64.5, 287.0], [64.6, 287.0], [64.7, 288.0], [64.8, 288.0], [64.9, 288.0], [65.0, 289.0], [65.1, 289.0], [65.2, 290.0], [65.3, 290.0], [65.4, 290.0], [65.5, 291.0], [65.6, 291.0], [65.7, 291.0], [65.8, 291.0], [65.9, 292.0], [66.0, 292.0], [66.1, 292.0], [66.2, 292.0], [66.3, 292.0], [66.4, 293.0], [66.5, 293.0], [66.6, 293.0], [66.7, 293.0], [66.8, 294.0], [66.9, 294.0], [67.0, 294.0], [67.1, 295.0], [67.2, 295.0], [67.3, 296.0], [67.4, 298.0], [67.5, 298.0], [67.6, 299.0], [67.7, 300.0], [67.8, 300.0], [67.9, 300.0], [68.0, 301.0], [68.1, 301.0], [68.2, 302.0], [68.3, 302.0], [68.4, 303.0], [68.5, 303.0], [68.6, 304.0], [68.7, 304.0], [68.8, 305.0], [68.9, 306.0], [69.0, 306.0], [69.1, 307.0], [69.2, 308.0], [69.3, 314.0], [69.4, 320.0], [69.5, 321.0], [69.6, 324.0], [69.7, 325.0], [69.8, 334.0], [69.9, 335.0], [70.0, 336.0], [70.1, 339.0], [70.2, 343.0], [70.3, 344.0], [70.4, 345.0], [70.5, 350.0], [70.6, 352.0], [70.7, 352.0], [70.8, 354.0], [70.9, 355.0], [71.0, 356.0], [71.1, 356.0], [71.2, 357.0], [71.3, 358.0], [71.4, 363.0], [71.5, 365.0], [71.6, 365.0], [71.7, 366.0], [71.8, 374.0], [71.9, 378.0], [72.0, 379.0], [72.1, 380.0], [72.2, 385.0], [72.3, 387.0], [72.4, 388.0], [72.5, 394.0], [72.6, 402.0], [72.7, 403.0], [72.8, 404.0], [72.9, 409.0], [73.0, 411.0], [73.1, 413.0], [73.2, 414.0], [73.3, 415.0], [73.4, 416.0], [73.5, 420.0], [73.6, 420.0], [73.7, 421.0], [73.8, 421.0], [73.9, 422.0], [74.0, 422.0], [74.1, 423.0], [74.2, 424.0], [74.3, 425.0], [74.4, 426.0], [74.5, 430.0], [74.6, 433.0], [74.7, 436.0], [74.8, 437.0], [74.9, 439.0], [75.0, 441.0], [75.1, 446.0], [75.2, 447.0], [75.3, 448.0], [75.4, 449.0], [75.5, 452.0], [75.6, 453.0], [75.7, 454.0], [75.8, 455.0], [75.9, 457.0], [76.0, 459.0], [76.1, 462.0], [76.2, 478.0], [76.3, 480.0], [76.4, 481.0], [76.5, 483.0], [76.6, 486.0], [76.7, 495.0], [76.8, 502.0], [76.9, 504.0], [77.0, 509.0], [77.1, 512.0], [77.2, 514.0], [77.3, 519.0], [77.4, 541.0], [77.5, 569.0], [77.6, 572.0], [77.7, 574.0], [77.8, 575.0], [77.9, 576.0], [78.0, 577.0], [78.1, 578.0], [78.2, 579.0], [78.3, 580.0], [78.4, 584.0], [78.5, 630.0], [78.6, 636.0], [78.7, 638.0], [78.8, 642.0], [78.9, 643.0], [79.0, 645.0], [79.1, 647.0], [79.2, 648.0], [79.3, 649.0], [79.4, 656.0], [79.5, 659.0], [79.6, 671.0], [79.7, 676.0], [79.8, 680.0], [79.9, 682.0], [80.0, 683.0], [80.1, 684.0], [80.2, 685.0], [80.3, 687.0], [80.4, 689.0], [80.5, 690.0], [80.6, 691.0], [80.7, 692.0], [80.8, 693.0], [80.9, 694.0], [81.0, 695.0], [81.1, 697.0], [81.2, 698.0], [81.3, 717.0], [81.4, 726.0], [81.5, 728.0], [81.6, 729.0], [81.7, 739.0], [81.8, 741.0], [81.9, 743.0], [82.0, 752.0], [82.1, 760.0], [82.2, 763.0], [82.3, 765.0], [82.4, 787.0], [82.5, 796.0], [82.6, 800.0], [82.7, 833.0], [82.8, 841.0], [82.9, 843.0], [83.0, 935.0], [83.1, 953.0], [83.2, 956.0], [83.3, 964.0], [83.4, 979.0], [83.5, 1034.0], [83.6, 1228.0], [83.7, 1335.0], [83.8, 1391.0], [83.9, 1435.0], [84.0, 1652.0], [84.1, 2057.0], [84.2, 2169.0], [84.3, 2267.0], [84.4, 2481.0], [84.5, 2510.0], [84.6, 2558.0], [84.7, 2712.0], [84.8, 2944.0], [84.9, 3098.0], [85.0, 3123.0], [85.1, 3246.0], [85.2, 3418.0], [85.3, 3658.0], [85.4, 3953.0], [85.5, 4131.0], [85.6, 4304.0], [85.7, 4509.0], [85.8, 4936.0], [85.9, 5193.0], [86.0, 5275.0], [86.1, 5613.0], [86.2, 6211.0], [86.3, 6259.0], [86.4, 6298.0], [86.5, 6305.0], [86.6, 6375.0], [86.7, 6402.0], [86.8, 6586.0], [86.9, 6987.0], [87.0, 6998.0], [87.1, 6999.0], [87.2, 7158.0], [87.3, 7280.0], [87.4, 7369.0], [87.5, 7371.0], [87.6, 7602.0], [87.7, 8034.0], [87.8, 8112.0], [87.9, 8116.0], [88.0, 8118.0], [88.1, 8149.0], [88.2, 8168.0], [88.3, 8202.0], [88.4, 8211.0], [88.5, 8212.0], [88.6, 8216.0], [88.7, 8329.0], [88.8, 8380.0], [88.9, 8391.0], [89.0, 8444.0], [89.1, 8447.0], [89.2, 8449.0], [89.3, 8711.0], [89.4, 8776.0], [89.5, 8802.0], [89.6, 8842.0], [89.7, 8905.0], [89.8, 8908.0], [89.9, 8941.0], [90.0, 8961.0], [90.1, 8976.0], [90.2, 8982.0], [90.3, 8984.0], [90.4, 9134.0], [90.5, 9238.0], [90.6, 9249.0], [90.7, 9327.0], [90.8, 9474.0], [90.9, 9538.0], [91.0, 9633.0], [91.1, 9664.0], [91.2, 9736.0], [91.3, 9773.0], [91.4, 9841.0], [91.5, 9891.0], [91.6, 9913.0], [91.7, 10003.0], [91.8, 10071.0], [91.9, 10096.0], [92.0, 10105.0], [92.1, 10180.0], [92.2, 10205.0], [92.3, 10220.0], [92.4, 10243.0], [92.5, 10322.0], [92.6, 10377.0], [92.7, 10396.0], [92.8, 10424.0], [92.9, 10448.0], [93.0, 10747.0], [93.1, 10903.0], [93.2, 10972.0], [93.3, 11051.0], [93.4, 11092.0], [93.5, 11094.0], [93.6, 11225.0], [93.7, 11549.0], [93.8, 11704.0], [93.9, 11735.0], [94.0, 12587.0], [94.1, 12748.0], [94.2, 12875.0], [94.3, 13022.0], [94.4, 13185.0], [94.5, 13396.0], [94.6, 13710.0], [94.7, 14121.0], [94.8, 14234.0], [94.9, 14288.0], [95.0, 14931.0], [95.1, 15120.0], [95.2, 15213.0], [95.3, 15921.0], [95.4, 16453.0], [95.5, 16489.0], [95.6, 17206.0], [95.7, 17707.0], [95.8, 18727.0], [95.9, 19461.0], [96.0, 20551.0], [96.1, 22556.0], [96.2, 23291.0], [96.3, 24909.0], [96.4, 27914.0], [96.5, 28394.0], [96.6, 30442.0], [96.7, 31753.0], [96.8, 34287.0], [96.9, 36158.0], [97.0, 36998.0], [97.1, 39203.0], [97.2, 41767.0], [97.3, 41941.0], [97.4, 44975.0], [97.5, 46697.0], [97.6, 49030.0], [97.7, 55499.0], [97.8, 57510.0], [97.9, 63392.0], [98.0, 65530.0], [98.1, 68354.0], [98.2, 69473.0], [98.3, 71059.0], [98.4, 75228.0], [98.5, 79038.0], [98.6, 89455.0], [98.7, 100140.0], [98.8, 100184.0], [98.9, 100235.0], [99.0, 100264.0], [99.1, 100293.0], [99.2, 101326.0], [99.3, 119237.0], [99.4, 129331.0], [99.5, 131023.0], [99.6, 136222.0], [99.7, 150199.0], [99.8, 163616.0], [99.9, 166423.0], [100.0, 229339.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 42249.0, "series": [{"data": [[0.0, 24014.0], [135200.0, 3.0], [167200.0, 1.0], [145700.0, 1.0], [73100.0, 2.0], [69900.0, 8.0], [76300.0, 14.0], [85900.0, 1.0], [82700.0, 2.0], [92300.0, 2.0], [98700.0, 2.0], [127500.0, 1.0], [162600.0, 1.0], [100.0, 29215.0], [34500.0, 2.0], [134700.0, 4.0], [32900.0, 4.0], [36100.0, 7.0], [141100.0, 3.0], [37700.0, 33.0], [40900.0, 6.0], [166700.0, 11.0], [42500.0, 5.0], [44100.0, 1.0], [45700.0, 1.0], [48900.0, 27.0], [200.0, 42249.0], [52100.0, 4.0], [56900.0, 20.0], [58500.0, 2.0], [60100.0, 3.0], [63300.0, 17.0], [69000.0, 16.0], [72200.0, 2.0], [300.0, 6804.0], [75400.0, 2.0], [88200.0, 2.0], [94600.0, 1.0], [97800.0, 2.0], [101000.0, 5.0], [400.0, 5950.0], [104200.0, 1.0], [120200.0, 3.0], [500.0, 2356.0], [138800.0, 1.0], [600.0, 4008.0], [164400.0, 9.0], [700.0, 1863.0], [800.0, 589.0], [900.0, 658.0], [1000.0, 131.0], [1100.0, 48.0], [1200.0, 90.0], [1300.0, 228.0], [1400.0, 160.0], [1500.0, 31.0], [1600.0, 85.0], [1700.0, 24.0], [1800.0, 23.0], [1900.0, 49.0], [2000.0, 81.0], [2100.0, 120.0], [136500.0, 2.0], [2200.0, 124.0], [2300.0, 45.0], [2400.0, 154.0], [2500.0, 301.0], [162100.0, 19.0], [2600.0, 54.0], [2800.0, 65.0], [2700.0, 63.0], [2900.0, 51.0], [3000.0, 136.0], [194100.0, 1.0], [3100.0, 226.0], [3200.0, 38.0], [3300.0, 88.0], [3400.0, 122.0], [3500.0, 35.0], [3600.0, 51.0], [3700.0, 51.0], [3800.0, 18.0], [3900.0, 81.0], [4000.0, 98.0], [4200.0, 123.0], [68100.0, 1.0], [4600.0, 18.0], [4400.0, 90.0], [71300.0, 1.0], [74500.0, 2.0], [4800.0, 16.0], [5000.0, 7.0], [80900.0, 18.0], [5200.0, 146.0], [84100.0, 1.0], [5400.0, 74.0], [5600.0, 46.0], [87300.0, 1.0], [96900.0, 2.0], [6000.0, 42.0], [6200.0, 407.0], [100100.0, 260.0], [6400.0, 83.0], [6600.0, 9.0], [6800.0, 1.0], [7000.0, 72.0], [7200.0, 95.0], [116100.0, 1.0], [7400.0, 6.0], [7600.0, 36.0], [7800.0, 15.0], [8000.0, 131.0], [128900.0, 13.0], [8400.0, 452.0], [134200.0, 2.0], [8800.0, 246.0], [9200.0, 378.0], [9600.0, 203.0], [10000.0, 325.0], [10400.0, 335.0], [166200.0, 1.0], [10800.0, 98.0], [11200.0, 45.0], [11600.0, 80.0], [12000.0, 3.0], [12400.0, 10.0], [12800.0, 65.0], [13200.0, 80.0], [13600.0, 32.0], [14000.0, 42.0], [14800.0, 7.0], [14400.0, 11.0], [15200.0, 29.0], [15600.0, 7.0], [16000.0, 11.0], [16800.0, 11.0], [17600.0, 36.0], [18400.0, 3.0], [19200.0, 10.0], [20000.0, 10.0], [20800.0, 5.0], [22400.0, 3.0], [21600.0, 2.0], [23200.0, 45.0], [24000.0, 6.0], [24800.0, 3.0], [26400.0, 1.0], [25600.0, 3.0], [27200.0, 3.0], [28000.0, 106.0], [29600.0, 4.0], [28800.0, 20.0], [30400.0, 29.0], [31200.0, 4.0], [32000.0, 4.0], [131900.0, 1.0], [33600.0, 1.0], [36800.0, 22.0], [144700.0, 3.0], [35200.0, 2.0], [38400.0, 3.0], [41600.0, 18.0], [44800.0, 2.0], [43200.0, 4.0], [46400.0, 3.0], [56000.0, 2.0], [59200.0, 1.0], [60800.0, 7.0], [64000.0, 2.0], [67200.0, 8.0], [70400.0, 3.0], [73600.0, 1.0], [80000.0, 1.0], [99200.0, 1.0], [102400.0, 1.0], [118400.0, 1.0], [115200.0, 1.0], [140800.0, 8.0], [153600.0, 6.0], [166400.0, 39.0], [172800.0, 36.0], [211200.0, 5.0], [132100.0, 6.0], [73500.0, 1.0], [95900.0, 2.0], [99100.0, 1.0], [105500.0, 1.0], [108700.0, 2.0], [127900.0, 9.0], [136200.0, 18.0], [149000.0, 9.0], [34700.0, 6.0], [33100.0, 10.0], [36300.0, 4.0], [41100.0, 2.0], [165900.0, 1.0], [42700.0, 5.0], [45900.0, 29.0], [47500.0, 20.0], [50700.0, 4.0], [52300.0, 33.0], [55500.0, 20.0], [63500.0, 13.0], [65100.0, 10.0], [69400.0, 18.0], [72600.0, 36.0], [79000.0, 4.0], [82200.0, 2.0], [101400.0, 27.0], [107800.0, 1.0], [130200.0, 1.0], [131600.0, 1.0], [150800.0, 1.0], [163600.0, 21.0], [135700.0, 1.0], [161300.0, 10.0], [68500.0, 2.0], [74900.0, 1.0], [81300.0, 2.0], [97300.0, 3.0], [100500.0, 1.0], [110100.0, 1.0], [113300.0, 2.0], [129300.0, 62.0], [16900.0, 21.0], [17700.0, 34.0], [18500.0, 16.0], [19300.0, 1.0], [20100.0, 5.0], [20900.0, 6.0], [21700.0, 2.0], [22500.0, 31.0], [23300.0, 26.0], [24100.0, 21.0], [24900.0, 24.0], [26500.0, 3.0], [27300.0, 8.0], [28100.0, 2.0], [28900.0, 4.0], [29700.0, 2.0], [31300.0, 20.0], [32100.0, 18.0], [33800.0, 7.0], [143900.0, 1.0], [35400.0, 1.0], [38600.0, 1.0], [156700.0, 1.0], [40200.0, 2.0], [41800.0, 63.0], [45000.0, 71.0], [46600.0, 6.0], [49800.0, 1.0], [54600.0, 54.0], [57800.0, 20.0], [61000.0, 1.0], [64200.0, 3.0], [67600.0, 3.0], [70800.0, 1.0], [74000.0, 3.0], [80400.0, 1.0], [83600.0, 7.0], [93200.0, 1.0], [96400.0, 1.0], [122000.0, 2.0], [128400.0, 6.0], [136800.0, 4.0], [160100.0, 1.0], [166500.0, 7.0], [172900.0, 15.0], [70700.0, 4.0], [73900.0, 5.0], [83500.0, 4.0], [86700.0, 1.0], [96300.0, 1.0], [99500.0, 1.0], [109100.0, 1.0], [128300.0, 14.0], [132200.0, 32.0], [145000.0, 5.0], [33300.0, 5.0], [34900.0, 16.0], [142700.0, 1.0], [36500.0, 33.0], [38100.0, 42.0], [149100.0, 1.0], [39700.0, 1.0], [42900.0, 3.0], [44500.0, 3.0], [46100.0, 2.0], [54100.0, 2.0], [55700.0, 1.0], [57300.0, 2.0], [58900.0, 1.0], [62100.0, 2.0], [65300.0, 10.0], [66600.0, 2.0], [69800.0, 6.0], [73000.0, 2.0], [76200.0, 8.0], [101800.0, 9.0], [127400.0, 9.0], [191600.0, 14.0], [163700.0, 6.0], [68900.0, 2.0], [65700.0, 2.0], [75300.0, 1.0], [81700.0, 1.0], [84900.0, 1.0], [88100.0, 2.0], [94500.0, 2.0], [97700.0, 2.0], [120100.0, 2.0], [8500.0, 6.0], [8900.0, 1000.0], [9700.0, 276.0], [9300.0, 50.0], [10100.0, 370.0], [161400.0, 6.0], [10500.0, 58.0], [10900.0, 288.0], [11700.0, 179.0], [11300.0, 87.0], [12500.0, 25.0], [13300.0, 48.0], [12900.0, 21.0], [13700.0, 62.0], [14100.0, 130.0], [14900.0, 68.0], [15300.0, 23.0], [15700.0, 12.0], [16100.0, 8.0], [17000.0, 17.0], [17800.0, 10.0], [19400.0, 22.0], [18600.0, 10.0], [20200.0, 12.0], [21000.0, 2.0], [21800.0, 34.0], [22600.0, 6.0], [24200.0, 3.0], [25000.0, 2.0], [25800.0, 4.0], [26600.0, 1.0], [27400.0, 7.0], [28200.0, 2.0], [29000.0, 3.0], [29800.0, 62.0], [30600.0, 1.0], [31400.0, 39.0], [32200.0, 11.0], [34000.0, 4.0], [38800.0, 4.0], [40400.0, 21.0], [165500.0, 15.0], [42000.0, 15.0], [43600.0, 1.0], [46800.0, 19.0], [48400.0, 3.0], [50000.0, 1.0], [53200.0, 3.0], [61200.0, 1.0], [64400.0, 1.0], [68000.0, 1.0], [74400.0, 1.0], [77600.0, 2.0], [80800.0, 1.0], [87200.0, 1.0], [96800.0, 1.0], [100000.0, 20.0], [119200.0, 2.0], [128800.0, 1.0], [142400.0, 7.0], [146500.0, 6.0], [159300.0, 1.0], [165700.0, 1.0], [71100.0, 4.0], [74300.0, 23.0], [77500.0, 8.0], [83900.0, 5.0], [87100.0, 2.0], [96700.0, 1.0], [99900.0, 2.0], [103100.0, 1.0], [135500.0, 1.0], [35100.0, 5.0], [36700.0, 6.0], [38300.0, 3.0], [41500.0, 3.0], [43100.0, 4.0], [46300.0, 2.0], [47900.0, 2.0], [51100.0, 2.0], [54300.0, 2.0], [55900.0, 1.0], [57500.0, 82.0], [65500.0, 31.0], [67000.0, 4.0], [73400.0, 2.0], [70200.0, 6.0], [79800.0, 5.0], [89400.0, 2.0], [86200.0, 18.0], [99000.0, 1.0], [105400.0, 6.0], [111800.0, 1.0], [131000.0, 118.0], [127800.0, 3.0], [165200.0, 1.0], [150100.0, 20.0], [69300.0, 32.0], [72500.0, 1.0], [75700.0, 25.0], [78900.0, 2.0], [85300.0, 1.0], [88500.0, 11.0], [101300.0, 38.0], [107700.0, 1.0], [135000.0, 1.0], [147800.0, 9.0], [160600.0, 19.0], [167000.0, 3.0], [17100.0, 16.0], [17900.0, 1.0], [18700.0, 13.0], [20300.0, 5.0], [19500.0, 3.0], [21100.0, 2.0], [21900.0, 8.0], [22700.0, 35.0], [23500.0, 10.0], [24300.0, 9.0], [25100.0, 3.0], [25900.0, 2.0], [28300.0, 2.0], [29100.0, 9.0], [29900.0, 3.0], [30700.0, 1.0], [34200.0, 36.0], [35800.0, 31.0], [145500.0, 3.0], [37400.0, 2.0], [39000.0, 2.0], [158300.0, 3.0], [40600.0, 2.0], [164700.0, 14.0], [42200.0, 1.0], [45400.0, 2.0], [48600.0, 4.0], [59800.0, 10.0], [61400.0, 7.0], [63000.0, 3.0], [68400.0, 2.0], [74800.0, 1.0], [78000.0, 2.0], [100400.0, 2.0], [122800.0, 23.0], [129200.0, 6.0], [144800.0, 1.0], [157600.0, 3.0], [202400.0, 1.0], [68300.0, 87.0], [71500.0, 4.0], [74700.0, 1.0], [97100.0, 1.0], [100300.0, 96.0], [129100.0, 3.0], [131500.0, 2.0], [33700.0, 6.0], [35300.0, 2.0], [144300.0, 2.0], [36900.0, 50.0], [38500.0, 1.0], [40100.0, 3.0], [163500.0, 5.0], [41700.0, 62.0], [44900.0, 41.0], [49700.0, 3.0], [52900.0, 2.0], [51300.0, 1.0], [57700.0, 4.0], [64100.0, 24.0], [67400.0, 3.0], [70600.0, 2.0], [73800.0, 4.0], [77000.0, 1.0], [89800.0, 1.0], [96200.0, 1.0], [125000.0, 1.0], [128200.0, 4.0], [154800.0, 1.0], [146100.0, 5.0], [158900.0, 2.0], [229300.0, 1.0], [4300.0, 40.0], [66500.0, 1.0], [4100.0, 23.0], [72900.0, 4.0], [4500.0, 83.0], [69700.0, 3.0], [76100.0, 2.0], [4700.0, 25.0], [4900.0, 29.0], [5100.0, 121.0], [82500.0, 5.0], [5300.0, 44.0], [5500.0, 11.0], [5700.0, 7.0], [6100.0, 41.0], [5900.0, 4.0], [6300.0, 282.0], [6500.0, 86.0], [104900.0, 1.0], [6900.0, 410.0], [6700.0, 2.0], [7100.0, 111.0], [7300.0, 385.0], [7500.0, 26.0], [7700.0, 24.0], [7900.0, 30.0], [8100.0, 755.0], [8200.0, 517.0], [8600.0, 14.0], [9000.0, 31.0], [143800.0, 7.0], [9400.0, 199.0], [150200.0, 1.0], [9800.0, 271.0], [10200.0, 433.0], [10600.0, 14.0], [11000.0, 346.0], [11400.0, 33.0], [11800.0, 60.0], [12200.0, 2.0], [12600.0, 105.0], [13000.0, 175.0], [13400.0, 49.0], [14200.0, 209.0], [14600.0, 21.0], [15000.0, 90.0], [15800.0, 48.0], [16200.0, 3.0], [16400.0, 200.0], [17200.0, 24.0], [18000.0, 6.0], [19600.0, 4.0], [20400.0, 3.0], [21200.0, 16.0], [22000.0, 2.0], [22800.0, 2.0], [24400.0, 5.0], [23600.0, 21.0], [25200.0, 6.0], [26000.0, 1.0], [26800.0, 9.0], [27600.0, 5.0], [28400.0, 3.0], [29200.0, 2.0], [30000.0, 8.0], [30800.0, 11.0], [31600.0, 2.0], [36000.0, 2.0], [141500.0, 2.0], [37600.0, 5.0], [40800.0, 4.0], [39200.0, 3.0], [167100.0, 6.0], [42400.0, 2.0], [44000.0, 5.0], [48800.0, 10.0], [56800.0, 16.0], [58400.0, 4.0], [63200.0, 1.0], [64800.0, 2.0], [65600.0, 16.0], [68800.0, 8.0], [72000.0, 3.0], [75200.0, 30.0], [91200.0, 2.0], [94400.0, 2.0], [123200.0, 3.0], [129600.0, 7.0], [156800.0, 2.0], [141700.0, 2.0], [154500.0, 1.0], [160900.0, 1.0], [212100.0, 3.0], [68700.0, 2.0], [71900.0, 1.0], [75100.0, 8.0], [78300.0, 3.0], [81500.0, 4.0], [145800.0, 1.0], [190600.0, 2.0], [33900.0, 6.0], [35500.0, 3.0], [37100.0, 9.0], [40300.0, 4.0], [41900.0, 64.0], [43500.0, 1.0], [45100.0, 2.0], [48300.0, 4.0], [49900.0, 1.0], [54700.0, 2.0], [56300.0, 1.0], [57900.0, 4.0], [61100.0, 1.0], [64300.0, 5.0], [71000.0, 8.0], [77400.0, 5.0], [80600.0, 3.0], [106200.0, 6.0], [112600.0, 2.0], [119000.0, 1.0], [128600.0, 1.0], [141200.0, 2.0], [160400.0, 2.0], [211600.0, 3.0], [164500.0, 24.0], [66900.0, 7.0], [70100.0, 3.0], [73300.0, 1.0], [76500.0, 3.0], [79700.0, 4.0], [82900.0, 1.0], [89300.0, 3.0], [95700.0, 3.0], [98900.0, 1.0], [118100.0, 1.0], [127700.0, 8.0], [136600.0, 3.0], [149400.0, 1.0], [155800.0, 2.0], [16500.0, 28.0], [17300.0, 17.0], [18100.0, 14.0], [18900.0, 30.0], [19700.0, 46.0], [20500.0, 19.0], [21300.0, 6.0], [22100.0, 3.0], [23700.0, 2.0], [24500.0, 4.0], [25300.0, 3.0], [26100.0, 4.0], [26900.0, 1.0], [27700.0, 7.0], [30900.0, 10.0], [31700.0, 15.0], [33000.0, 4.0], [34600.0, 4.0], [36200.0, 5.0], [37800.0, 4.0], [159900.0, 1.0], [42600.0, 1.0], [41000.0, 4.0], [44200.0, 4.0], [45800.0, 3.0], [47400.0, 14.0], [49000.0, 10.0], [50600.0, 2.0], [53800.0, 1.0], [57000.0, 1.0], [55400.0, 33.0], [58600.0, 2.0], [65000.0, 2.0], [69200.0, 7.0], [75600.0, 13.0], [85200.0, 1.0], [98000.0, 1.0], [146400.0, 7.0], [152800.0, 1.0], [165600.0, 4.0], [69100.0, 33.0], [72300.0, 4.0], [75500.0, 6.0], [78700.0, 8.0], [97900.0, 2.0], [117100.0, 1.0], [34100.0, 4.0], [35700.0, 3.0], [37300.0, 2.0], [38900.0, 4.0], [40500.0, 1.0], [42100.0, 6.0], [165100.0, 1.0], [46900.0, 11.0], [45300.0, 1.0], [48500.0, 5.0], [50100.0, 8.0], [61300.0, 2.0], [62900.0, 1.0], [64500.0, 9.0], [68200.0, 2.0], [71400.0, 3.0], [81000.0, 4.0], [84200.0, 1.0], [100200.0, 410.0], [129000.0, 8.0], [150000.0, 1.0], [162800.0, 1.0], [160500.0, 25.0], [166900.0, 2.0], [67300.0, 1.0], [70500.0, 2.0], [80100.0, 2.0], [83300.0, 1.0], [102500.0, 18.0], [112100.0, 8.0], [118500.0, 1.0], [8300.0, 362.0], [8700.0, 329.0], [9100.0, 20.0], [9500.0, 179.0], [151800.0, 1.0], [9900.0, 253.0], [10300.0, 305.0], [10700.0, 16.0], [164600.0, 39.0], [11100.0, 68.0], [11500.0, 60.0], [11900.0, 10.0], [12700.0, 116.0], [12300.0, 4.0], [13100.0, 97.0], [13500.0, 34.0], [14300.0, 2.0], [13900.0, 27.0], [14700.0, 19.0], [15100.0, 170.0], [15500.0, 16.0], [15900.0, 73.0], [16300.0, 7.0], [17400.0, 34.0], [16600.0, 10.0], [18200.0, 22.0], [19000.0, 55.0], [19800.0, 26.0], [21400.0, 2.0], [20600.0, 7.0], [22200.0, 9.0], [23000.0, 3.0], [23800.0, 17.0], [25400.0, 1.0], [24600.0, 3.0], [26200.0, 22.0], [28600.0, 4.0], [27800.0, 3.0], [29400.0, 1.0], [30200.0, 5.0], [31000.0, 7.0], [31800.0, 5.0], [33200.0, 5.0], [34800.0, 22.0], [36400.0, 6.0], [38000.0, 19.0], [39600.0, 3.0], [42800.0, 17.0], [47600.0, 2.0], [49200.0, 2.0], [55600.0, 2.0], [58800.0, 3.0], [65200.0, 33.0], [63600.0, 2.0], [66400.0, 2.0], [69600.0, 8.0], [76000.0, 1.0], [85600.0, 1.0], [82400.0, 3.0], [158400.0, 1.0], [162500.0, 2.0], [69500.0, 77.0], [66300.0, 1.0], [82300.0, 1.0], [85500.0, 1.0], [98300.0, 1.0], [114300.0, 1.0], [134600.0, 3.0], [34300.0, 19.0], [138700.0, 11.0], [35900.0, 14.0], [39100.0, 2.0], [40700.0, 2.0], [43900.0, 2.0], [47100.0, 2.0], [48700.0, 2.0], [58300.0, 2.0], [63100.0, 3.0], [61500.0, 5.0], [64700.0, 1.0], [68600.0, 5.0], [71800.0, 3.0], [75000.0, 1.0], [81400.0, 1.0], [110200.0, 1.0], [116600.0, 1.0], [123000.0, 2.0], [129400.0, 45.0], [155600.0, 5.0], [67700.0, 4.0], [77300.0, 2.0], [74100.0, 7.0], [90100.0, 1.0], [86900.0, 2.0], [93300.0, 2.0], [96500.0, 1.0], [99700.0, 1.0], [115700.0, 1.0], [128500.0, 1.0], [138200.0, 3.0], [16700.0, 34.0], [17500.0, 22.0], [18300.0, 32.0], [19100.0, 23.0], [19900.0, 12.0], [20700.0, 1.0], [21500.0, 1.0], [23100.0, 37.0], [23900.0, 1.0], [25500.0, 4.0], [24700.0, 7.0], [26300.0, 8.0], [27100.0, 2.0], [27900.0, 34.0], [29500.0, 1.0], [28700.0, 1.0], [30300.0, 8.0], [31100.0, 14.0], [32700.0, 5.0], [31900.0, 1.0], [35000.0, 1.0], [36600.0, 11.0], [38200.0, 3.0], [155100.0, 10.0], [39800.0, 4.0], [161500.0, 1.0], [43000.0, 5.0], [41400.0, 44.0], [47800.0, 6.0], [55800.0, 1.0], [57400.0, 5.0], [59000.0, 3.0], [60600.0, 2.0], [65400.0, 4.0], [63800.0, 1.0], [66800.0, 5.0], [73200.0, 2.0], [76400.0, 7.0], [79600.0, 4.0], [86000.0, 2.0], [89200.0, 2.0], [105200.0, 2.0], [111600.0, 2.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 229300.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 826.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 108245.0, "series": [{"data": [[0.0, 108245.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 10118.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 21845.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 826.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 6.75, "minX": 1.68288972E12, "maxY": 3000.0, "series": [{"data": [[1.68288984E12, 3000.0], [1.68289002E12, 2314.8397708674297], [1.68288972E12, 3000.0], [1.6828899E12, 3000.0], [1.68289008E12, 6.75], [1.68288978E12, 3000.0], [1.68288996E12, 3000.0]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68289008E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 52.0, "minX": 1.0, "maxY": 211286.0, "series": [{"data": [[3.0, 211284.0], [4.0, 211280.0], [5.0, 211279.0], [6.0, 83938.0], [7.0, 83938.0], [9.0, 86996.0], [11.0, 82719.5], [12.0, 194134.0], [13.0, 64356.0], [14.0, 64589.0], [15.0, 68649.0], [16.0, 68648.0], [18.0, 64330.5], [20.0, 66460.0], [21.0, 68589.0], [22.0, 64327.0], [23.0, 64566.0], [24.0, 66903.0], [25.0, 66902.0], [27.0, 64563.5], [28.0, 66903.0], [29.0, 66901.0], [30.0, 66901.0], [33.0, 66894.0], [32.0, 65726.5], [35.0, 66890.0], [34.0, 66890.0], [37.0, 64550.0], [36.0, 66890.0], [39.0, 64183.0], [38.0, 64182.0], [41.0, 64181.5], [43.0, 64181.0], [42.0, 64182.0], [45.0, 64176.0], [44.0, 64176.0], [47.0, 64170.0], [46.0, 64172.0], [49.0, 64172.5], [51.0, 64173.0], [53.0, 64167.0], [52.0, 64167.0], [55.0, 64161.0], [54.0, 64164.0], [57.0, 37119.0], [56.0, 24128.0], [59.0, 24128.0], [61.0, 24127.0], [63.0, 24120.0], [62.0, 24122.0], [67.0, 23227.0], [66.0, 23713.0], [65.0, 24053.0], [64.0, 24115.0], [70.0, 23222.0], [74.0, 23220.0], [79.0, 23220.0], [78.0, 23220.0], [77.0, 23220.0], [83.0, 23220.0], [82.0, 23220.0], [81.0, 23220.0], [80.0, 23220.0], [87.0, 23209.0], [86.0, 23218.0], [85.0, 23218.0], [84.0, 23219.0], [90.0, 23206.0], [89.0, 23206.0], [88.0, 23207.0], [95.0, 23205.0], [94.0, 23205.0], [93.0, 23205.0], [99.0, 23187.0], [98.0, 23204.0], [96.0, 23205.0], [103.0, 23183.0], [101.0, 23184.0], [100.0, 23186.0], [105.0, 23182.5], [104.0, 23183.0], [111.0, 23179.0], [109.0, 23181.0], [108.0, 23182.0], [115.0, 23159.0], [113.0, 23166.0], [119.0, 23153.0], [117.0, 23154.0], [123.0, 23143.0], [122.0, 23148.0], [121.0, 23149.0], [120.0, 23149.0], [127.0, 23129.0], [126.0, 23133.0], [125.0, 23133.0], [124.0, 23139.0], [135.0, 24307.0], [133.0, 24307.0], [132.0, 34747.0], [130.0, 32102.0], [129.0, 32228.0], [128.0, 74955.0], [143.0, 18354.5], [141.0, 18355.0], [140.0, 41896.0], [139.0, 61021.0], [138.0, 24300.0], [137.0, 24305.0], [136.0, 24307.0], [150.0, 18340.0], [149.0, 18342.0], [147.0, 18346.0], [146.0, 18349.0], [145.0, 18352.0], [144.0, 18354.0], [159.0, 18191.0], [158.0, 18205.0], [157.0, 18211.0], [156.0, 18231.0], [155.0, 18232.0], [154.0, 18321.0], [153.0, 18337.0], [152.0, 23265.0], [167.0, 18112.0], [166.0, 18121.0], [165.0, 18131.0], [164.0, 18141.0], [163.0, 18149.0], [162.0, 18162.0], [161.0, 18167.0], [160.0, 18182.0], [175.0, 17427.0], [173.0, 17428.0], [172.0, 17428.0], [171.0, 18539.0], [170.0, 17428.5], [168.0, 18102.0], [183.0, 17424.5], [181.0, 17426.0], [180.0, 17426.0], [179.0, 17426.0], [177.0, 17427.0], [176.0, 17427.0], [190.0, 17417.0], [189.0, 17419.0], [188.0, 18530.0], [187.0, 17423.0], [186.0, 18534.0], [185.0, 17978.5], [199.0, 17411.0], [198.0, 17412.0], [197.0, 17412.0], [196.0, 17412.5], [194.0, 18524.0], [193.0, 18525.0], [192.0, 17417.0], [207.0, 17397.0], [205.0, 18507.0], [204.0, 17398.0], [203.0, 17403.0], [202.0, 17404.0], [201.0, 17405.0], [200.0, 17411.0], [214.0, 17371.0], [213.0, 18481.0], [212.0, 17376.0], [211.0, 17378.0], [210.0, 17934.0], [208.0, 48464.0], [223.0, 48408.0], [222.0, 17333.0], [221.0, 17334.0], [220.0, 17366.0], [219.0, 17367.0], [218.0, 17369.0], [217.0, 17369.666666666668], [231.0, 47551.0], [230.0, 47552.0], [229.0, 29204.0], [228.0, 47553.0], [227.0, 17136.5], [225.0, 48403.0], [224.0, 17329.0], [239.0, 32567.0], [237.0, 47550.5], [236.0, 17584.0], [234.0, 38377.5], [232.0, 26328.0], [244.0, 16472.0], [243.0, 16472.0], [242.0, 32010.5], [240.0, 47549.0], [254.0, 26319.0], [253.0, 23193.0], [252.0, 47543.0], [251.0, 29199.0], [250.0, 47545.0], [249.0, 19830.2], [259.0, 47538.0], [269.0, 26312.0], [268.0, 17013.0], [266.0, 24564.666666666668], [263.0, 26313.0], [262.0, 16461.0], [261.0, 17015.5], [258.0, 18311.0], [257.0, 32556.0], [256.0, 29191.0], [282.0, 16450.0], [286.0, 25305.333333333332], [283.0, 24555.666666666668], [279.0, 16451.0], [278.0, 29180.0], [277.0, 18301.0], [276.0, 47529.0], [275.0, 47532.0], [273.0, 26966.5], [291.0, 19803.5], [303.0, 25812.0], [301.0, 17526.0], [289.0, 26299.0], [288.0, 16448.5], [299.0, 16417.0], [298.0, 47493.0], [296.0, 26270.0], [295.0, 47495.0], [294.0, 47496.0], [293.0, 23153.0], [292.0, 47503.0], [318.0, 32869.5], [319.0, 17515.0], [316.0, 17517.0], [307.0, 23138.0], [306.0, 16413.0], [305.0, 145096.0], [304.0, 28330.0], [315.0, 47484.0], [314.0, 16409.0], [313.0, 20065.0], [312.0, 47487.0], [309.0, 145094.0], [308.0, 47488.0], [333.0, 18205.0], [332.0, 47437.0], [331.0, 17471.0], [330.0, 16363.0], [329.0, 17287.0], [328.0, 145046.0], [326.0, 27674.5], [324.0, 47479.0], [323.0, 47480.0], [322.0, 17514.0], [321.0, 31944.0], [349.0, 25176.0], [350.0, 17171.0], [348.0, 18190.0], [347.0, 20089.75], [343.0, 26207.0], [342.0, 64108.0], [340.0, 26208.0], [339.0, 31893.0], [336.0, 66776.33333333333], [355.0, 38847.5], [366.0, 15178.0], [365.0, 57199.0], [363.0, 15179.0], [361.0, 15179.0], [360.0, 15179.0], [359.0, 15180.0], [358.0, 15180.0], [357.0, 15180.5], [353.0, 46394.0], [352.0, 19239.5], [371.0, 15177.0], [382.0, 14801.5], [383.0, 15172.0], [380.0, 15173.0], [378.0, 15175.0], [377.0, 14805.5], [375.0, 15177.0], [374.0, 15176.0], [373.0, 15176.0], [370.0, 15178.0], [369.0, 15177.5], [398.0, 15157.0], [399.0, 15156.0], [397.0, 15159.0], [396.0, 15159.0], [395.0, 15160.0], [394.0, 15164.0], [393.0, 15165.0], [392.0, 15167.0], [391.0, 15168.0], [385.0, 15170.0], [384.0, 15173.0], [390.0, 14798.0], [388.0, 15169.666666666666], [414.0, 15149.0], [415.0, 15150.0], [413.0, 15151.0], [412.0, 15151.0], [411.0, 141214.0], [410.0, 15152.0], [409.0, 15154.0], [406.0, 15155.0], [403.0, 15155.0], [401.0, 15156.0], [405.0, 15154.0], [430.0, 15121.0], [431.0, 15121.0], [428.0, 15123.0], [418.0, 15134.0], [417.0, 15137.0], [416.0, 15137.0], [426.0, 15122.0], [425.0, 15123.0], [424.0, 15131.0], [423.0, 141194.0], [422.0, 15133.0], [421.0, 14393.0], [420.0, 78164.0], [446.0, 15112.666666666666], [443.0, 15113.333333333334], [440.0, 15113.5], [438.0, 57138.0], [435.0, 15119.0], [434.0, 15120.5], [432.0, 15121.0], [462.0, 15090.0], [463.0, 15087.0], [461.0, 15091.0], [460.0, 15090.0], [459.0, 15091.0], [458.0, 15092.0], [457.0, 15096.0], [456.0, 15099.0], [455.0, 15104.333333333334], [451.0, 15106.0], [450.0, 15107.0], [449.0, 15107.0], [448.0, 15108.0], [452.0, 15106.0], [476.0, 15051.0], [478.0, 15047.0], [479.0, 15043.0], [477.0, 15051.0], [475.0, 19154.333333333332], [472.0, 15070.0], [471.0, 15082.0], [470.0, 15084.333333333334], [467.0, 15085.0], [466.0, 15088.0], [465.0, 15087.0], [493.0, 27394.0], [495.0, 11222.0], [492.0, 19100.333333333332], [489.0, 11224.0], [488.0, 11224.5], [486.0, 11225.0], [485.0, 11226.0], [484.0, 13740.666666666666], [482.0, 11225.0], [480.0, 15038.0], [498.0, 11222.0], [510.0, 11212.0], [509.0, 14944.0], [507.0, 27386.0], [506.0, 11217.0], [505.0, 11217.5], [503.0, 11219.0], [502.0, 11220.5], [500.0, 14995.0], [497.0, 11221.5], [496.0, 11221.0], [541.0, 11189.0], [543.0, 14961.5], [529.0, 11203.0], [528.0, 11203.0], [531.0, 19204.0], [530.0, 11199.0], [540.0, 11190.0], [539.0, 18651.0], [538.0, 11191.0], [537.0, 18655.0], [536.0, 11194.0], [517.0, 14982.0], [515.0, 11209.0], [514.0, 11212.5], [512.0, 11212.0], [526.0, 11205.0], [525.0, 11206.0], [524.0, 14186.0], [523.0, 38473.0], [522.0, 11207.0], [520.0, 16598.0], [535.0, 14970.5], [533.0, 34291.5], [569.0, 18684.0], [562.0, 11155.0], [571.0, 9197.0], [572.0, 27302.0], [561.0, 18623.0], [560.0, 27335.0], [570.0, 68329.0], [568.0, 19228.5], [550.0, 18637.0], [549.0, 18724.0], [548.0, 11178.0], [547.0, 10213.0], [545.0, 18727.0], [544.0, 11183.0], [559.0, 11164.0], [558.0, 14941.0], [556.0, 11170.0], [555.0, 11173.5], [553.0, 11174.0], [552.0, 30536.0], [566.0, 18697.0], [565.0, 11154.0], [564.0, 11156.0], [601.0, 7176.0], [605.0, 7173.0], [606.0, 8363.0], [593.0, 26272.0], [592.0, 17646.0], [595.0, 8037.0], [594.0, 17515.0], [604.0, 66306.0], [603.0, 25279.0], [602.0, 25278.0], [600.0, 27064.666666666668], [583.0, 10115.0], [582.0, 17574.0], [581.0, 17661.0], [580.0, 18617.0], [578.0, 11117.0], [577.0, 27289.0], [576.0, 12506.0], [591.0, 11436.0], [590.0, 17564.0], [589.0, 8173.0], [588.0, 10105.0], [587.0, 10110.5], [585.0, 8180.0], [584.0, 26285.0], [597.0, 26137.0], [596.0, 11303.0], [632.0, 40815.0], [625.0, 34309.0], [639.0, 37981.0], [637.0, 47651.666666666664], [634.0, 24016.5], [622.0, 49028.0], [609.0, 25268.0], [608.0, 9396.0], [611.0, 25266.0], [610.0, 10432.0], [615.0, 8337.0], [614.0, 18552.666666666668], [621.0, 19105.0], [620.0, 37738.5], [618.0, 49030.0], [617.0, 7094.0], [616.0, 7144.0], [629.0, 35973.0], [628.0, 48011.0], [626.0, 7483.0], [624.0, 42521.5], [658.0, 46923.0], [670.0, 25624.0], [671.0, 134257.0], [657.0, 30340.333333333336], [669.0, 48088.5], [667.0, 41641.0], [666.0, 16530.333333333332], [646.0, 49020.0], [645.0, 33702.0], [644.0, 35984.0], [643.0, 38337.666666666664], [641.0, 34304.0], [654.0, 29849.25], [650.0, 20461.0], [649.0, 49275.0], [648.0, 49872.5], [663.0, 49004.0], [662.0, 32605.5], [660.0, 82072.5], [702.0, 33985.5], [703.0, 35892.0], [688.0, 48862.333333333336], [691.0, 48970.5], [689.0, 31554.5], [693.0, 16165.0], [692.0, 25368.0], [700.0, 19030.0], [699.0, 41594.0], [698.0, 33824.0], [697.0, 41597.0], [696.0, 48960.0], [679.0, 23167.333333333332], [676.0, 35446.0], [675.0, 36592.333333333336], [672.0, 8196.0], [687.0, 40388.0], [683.0, 24339.0], [681.0, 27093.5], [695.0, 46930.0], [694.0, 48965.0], [733.0, 40500.0], [734.0, 45831.0], [732.0, 41540.0], [730.0, 46868.0], [729.0, 48900.666666666664], [711.0, 41574.0], [710.0, 16139.0], [709.0, 48940.0], [708.0, 48944.0], [707.0, 48945.333333333336], [704.0, 48945.0], [719.0, 35861.0], [718.0, 35875.0], [717.0, 41570.0], [715.0, 35882.0], [714.0, 48936.0], [713.0, 33975.0], [726.0, 38319.0], [725.0, 45648.25], [723.0, 48911.0], [720.0, 46883.0], [753.0, 44513.0], [756.0, 44208.0], [755.0, 44211.0], [754.0, 1498.0], [752.0, 44537.0], [743.0, 46862.0], [742.0, 46867.0], [741.0, 46867.0], [740.0, 46867.0], [738.0, 46867.5], [736.0, 47863.0], [751.0, 32132.0], [750.0, 46858.0], [749.0, 46860.5], [747.0, 46862.0], [746.0, 46861.0], [745.0, 46862.0], [1208.0, 502.0], [1214.0, 1678.5367231638427], [1210.0, 535.4], [1206.0, 502.0], [1200.0, 502.0], [1218.0, 458.0], [1224.0, 457.2857142857143], [1248.0, 402.0], [1216.0, 468.375], [1222.0, 457.0], [1228.0, 456.2], [1226.0, 456.0], [1242.0, 375.0], [1240.0, 536.6666666666666], [1236.0, 455.0], [1586.0, 303.0], [1588.0, 300.0], [1568.0, 301.6363636363636], [1570.0, 301.4666666666667], [1572.0, 300.0], [1584.0, 41868.0], [1550.0, 305.0], [1548.0, 304.0], [1546.0, 304.8], [1544.0, 306.0], [1540.0, 307.0], [1566.0, 301.99999999999994], [1564.0, 302.8823529411764], [1562.0, 303.0], [1556.0, 303.8181818181817], [1554.0, 304.0], [1552.0, 305.0], [1582.0, 293.0], [1580.0, 299.0], [1654.0, 284.5], [1658.0, 283.6666666666667], [1662.0, 283.14285714285717], [1660.0, 284.0], [1650.0, 283.0], [1630.0, 286.0], [1608.0, 298.0], [1626.0, 288.0], [1622.0, 288.5], [1618.0, 297.0], [1616.0, 298.0], [1638.0, 285.0], [1664.0, 282.6666666666667], [1764.0, 273.5], [1768.0, 272.25], [1772.0, 271.8181818181818], [1766.0, 271.99999999999994], [1762.0, 273.62500000000006], [1760.0, 273.6315789473684], [1738.0, 278.0], [1740.0, 275.0], [1754.0, 274.5], [1750.0, 274.2], [1888.0, 204.375], [1916.0, 195.0], [1892.0, 202.75], [1890.0, 202.66666666666666], [1896.0, 201.55555555555554], [1894.0, 202.0], [1902.0, 201.0], [1918.0, 195.0], [1912.0, 199.5], [1910.0, 200.83333333333334], [1942.0, 182.46153846153848], [1940.0, 183.5], [1926.0, 189.7142857142857], [2112.0, 320.5], [2124.0, 319.0], [2120.0, 320.2777777777777], [2116.0, 320.0], [2092.0, 321.3333333333333], [2096.0, 321.0], [2104.0, 321.6666666666667], [2108.0, 321.0], [2216.0, 1050.0], [2208.0, 226.0], [2196.0, 226.0], [2192.0, 225.8181818181818], [2188.0, 226.75], [2184.0, 227.0], [2176.0, 227.85714285714286], [2328.0, 323.0], [2364.0, 37708.0], [2360.0, 323.0], [2548.0, 7724.0], [2544.0, 37693.0], [2672.0, 276.0], [2668.0, 282.0], [2676.0, 92.0], [2564.0, 37740.0], [2568.0, 303.5], [2572.0, 37689.0], [2576.0, 302.0], [2620.0, 293.0], [2792.0, 5208.0], [2756.0, 1013.0], [2812.0, 11916.75], [2800.0, 4194.333333333333], [2788.0, 4251.0], [2716.0, 82.85], [2712.0, 84.0], [2740.0, 47452.0], [2732.0, 31077.0], [2728.0, 39695.0], [2840.0, 34923.0], [2844.0, 34923.0], [2832.0, 3920.5], [2828.0, 4207.0], [2824.0, 46109.0], [2956.0, 250.14285714285714], [3000.0, 4144.979930349842], [2960.0, 250.625], [2996.0, 249.0], [2984.0, 250.0], [2980.0, 250.0], [2121.0, 320.0], [2125.0, 319.5], [2117.0, 320.6], [2113.0, 320.5], [2089.0, 322.6666666666667], [2105.0, 321.5], [2109.0, 321.0], [2209.0, 224.625], [2197.0, 225.0], [2189.0, 227.0], [2377.0, 37757.0], [2361.0, 15159.0], [2549.0, 306.0], [2545.0, 37693.0], [2529.0, 37694.0], [2673.0, 277.0], [2621.0, 292.0], [2569.0, 37739.0], [2573.0, 25259.333333333336], [2577.0, 37738.0], [2809.0, 4193.0], [2793.0, 5687.5], [2757.0, 4254.0], [2753.0, 15901.0], [2769.0, 4252.0], [2765.0, 7128.0], [2773.0, 7126.0], [2797.0, 4609.1875], [2789.0, 4251.0], [2713.0, 83.83333333333333], [2697.0, 86.16666666666667], [2749.0, 15912.0], [2745.0, 15922.0], [2741.0, 100060.0], [2737.0, 31076.0], [2733.0, 31077.0], [2725.0, 52.0], [2853.0, 4087.5], [2849.0, 19530.0], [2821.0, 4106.0], [2989.0, 249.0], [2945.0, 252.0], [2949.0, 251.5], [2969.0, 251.0], [2965.0, 251.0], [2977.0, 250.0], [1213.0, 501.0], [1199.0, 506.58709677419364], [1211.0, 501.3333333333333], [1207.0, 502.0], [1205.0, 502.0], [1203.0, 501.75], [1201.0, 502.0], [1221.0, 458.5], [1243.0, 375.0], [1249.0, 458.0], [1245.0, 375.0], [1217.0, 458.0], [1225.0, 456.78260869565213], [1231.0, 456.0], [1229.0, 456.0], [1237.0, 482.1666666666667], [1233.0, 467.84782608695656], [1587.0, 301.0], [1571.0, 300.6341463414634], [1579.0, 300.0], [1569.0, 302.0], [1577.0, 299.6666666666667], [1575.0, 300.0], [1585.0, 41868.0], [1551.0, 304.8292682926829], [1549.0, 304.0], [1547.0, 305.3333333333333], [1545.0, 305.6666666666667], [1539.0, 305.68421052631584], [1567.0, 302.5], [1563.0, 302.6923076923077], [1555.0, 304.0], [1553.0, 303.76], [1583.0, 1090.0], [1649.0, 284.0], [1663.0, 281.0], [1637.0, 285.0], [1633.0, 285.2], [1657.0, 284.0], [1607.0, 298.22222222222223], [1611.0, 298.0], [1615.0, 299.0], [1613.0, 298.0], [1627.0, 285.0], [1623.0, 287.5], [1619.0, 295.0], [1617.0, 297.6363636363636], [1643.0, 285.0], [1671.0, 282.0], [1669.0, 282.5], [1667.0, 282.6666666666667], [1769.0, 272.0], [1771.0, 272.25], [1765.0, 271.0], [1763.0, 273.0], [1755.0, 273.7083333333333], [1739.0, 276.0], [1749.0, 274.14285714285717], [1889.0, 203.18032786885243], [1919.0, 193.0], [1893.0, 202.63636363636363], [1891.0, 202.5], [1899.0, 201.0], [1897.0, 201.375], [1901.0, 201.0], [1917.0, 194.0], [1913.0, 200.0], [1911.0, 200.0], [1909.0, 201.0], [1907.0, 201.0], [1905.0, 200.0], [1945.0, 103.66666666666667], [1927.0, 183.0], [2118.0, 320.41666666666663], [2126.0, 319.29999999999995], [2094.0, 321.36170212765967], [2090.0, 321.5], [2098.0, 321.0], [2102.0, 321.5], [2106.0, 320.0], [2178.0, 226.0], [2294.0, 37711.0], [2218.0, 40746.0], [2210.0, 224.0], [2198.0, 226.0], [2190.0, 226.42857142857142], [2186.0, 226.0], [2182.0, 227.0], [2378.0, 37757.0], [2382.0, 20805.0], [2330.0, 37710.0], [2362.0, 25263.666666666668], [2558.0, 37740.0], [2542.0, 26443.5], [2670.0, 277.7805642633229], [2674.0, 275.8571428571429], [2666.0, 282.6666666666667], [2790.0, 1124.0], [2814.0, 4175.0], [2754.0, 15901.0], [2770.0, 1126.0], [2774.0, 4251.0], [2794.0, 4250.0], [2718.0, 63.0], [2710.0, 85.0], [2750.0, 15912.0], [2746.0, 15921.0], [2742.0, 42455.0], [2738.0, 31074.0], [2726.0, 42443.0], [2906.0, 254.0], [2910.0, 254.0], [2854.0, 4097.0], [2846.0, 11800.124999999998], [2842.0, 34973.0], [2830.0, 11899.5], [2826.0, 4095.0], [2954.0, 251.0], [2946.0, 250.0], [2958.0, 249.66666666666666], [2970.0, 252.0], [2986.0, 250.0], [2982.0, 250.0], [2978.0, 250.0], [2111.0, 320.5], [2119.0, 320.4285714285714], [2123.0, 319.8], [2115.0, 320.5714285714286], [2091.0, 322.3333333333333], [2095.0, 322.0], [2099.0, 322.0], [2103.0, 321.5], [2107.0, 320.3333333333333], [2215.0, 213.25], [2191.0, 226.66666666666666], [2211.0, 225.0], [2203.0, 225.0], [2195.0, 225.52631578947364], [2187.0, 226.6], [2183.0, 227.0], [2331.0, 323.0], [2383.0, 29261.25], [2379.0, 28063.0], [2315.0, 15160.0], [2367.0, 37758.0], [2359.0, 20808.75], [2559.0, 304.0], [2667.0, 282.0], [2675.0, 275.9642857142856], [2671.0, 275.99999999999994], [2567.0, 37739.0], [2619.0, 37679.0], [2603.0, 12775.0], [2811.0, 46133.0], [2755.0, 1014.0], [2763.0, 8691.25], [2779.0, 7126.0], [2791.0, 5687.75], [2719.0, 63.0], [2711.0, 84.0], [2747.0, 15914.0], [2743.0, 44160.0], [2739.0, 38693.0], [2735.0, 31076.0], [2731.0, 3018.6666666666665], [2727.0, 39697.0], [2723.0, 62.0], [2823.0, 4216.333333333333], [2855.0, 254.0], [2943.0, 253.0], [2851.0, 4090.0], [2847.0, 34919.0], [2835.0, 24700.333333333332], [2819.0, 10351.2], [2955.0, 249.5], [2951.0, 252.0], [2959.0, 250.14285714285714], [2975.0, 251.0], [2995.0, 249.0], [2987.0, 249.0], [2983.0, 250.0], [2979.0, 250.0], [1.0, 211286.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[2970.0620914105784, 4251.881503750803]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 3000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 100.8, "minX": 1.68288972E12, "maxY": 365838.11666666664, "series": [{"data": [[1.68288984E12, 322787.95], [1.68289002E12, 72057.7], [1.68288972E12, 282545.4666666667], [1.6828899E12, 365838.11666666664], [1.68289008E12, 126.3], [1.68288978E12, 335240.26666666666], [1.68288996E12, 327900.31666666665]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.68288984E12, 213990.0], [1.68289002E12, 51324.0], [1.68288972E12, 198895.2], [1.6828899E12, 246447.6], [1.68289008E12, 100.8], [1.68288978E12, 236409.6], [1.68288996E12, 230580.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68289008E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 1983.1669904552696, "minX": 1.68288972E12, "maxY": 146487.83333333334, "series": [{"data": [[1.68288984E12, 5826.790114889378], [1.68289002E12, 4563.907855973812], [1.68288972E12, 1983.1669904552696], [1.6828899E12, 5415.107770520534], [1.68289008E12, 146487.83333333334], [1.68288978E12, 4361.249395963632], [1.68288996E12, 3218.261602914396]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68289008E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 1983.149590337013, "minX": 1.68288972E12, "maxY": 146487.83333333334, "series": [{"data": [[1.68288984E12, 5239.3218443981505], [1.68289002E12, 4563.737479541731], [1.68288972E12, 1983.149590337013], [1.6828899E12, 4904.462325769307], [1.68289008E12, 146487.83333333334], [1.68288978E12, 4361.242787094922], [1.68288996E12, 3218.2560291438867]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68289008E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 20.511825323084665, "minX": 1.68288972E12, "maxY": 63815.58333333333, "series": [{"data": [[1.68288984E12, 2941.8930141105775], [1.68289002E12, 1169.7531914893605], [1.68288972E12, 20.511825323084665], [1.6828899E12, 2513.2948622988547], [1.68289008E12, 63815.58333333333], [1.68288978E12, 191.54395252984708], [1.68288996E12, 996.6843351548159]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68289008E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 4.0, "minX": 1.68288972E12, "maxY": 229339.0, "series": [{"data": [[1.68288984E12, 162823.0], [1.68289002E12, 145096.0], [1.68288972E12, 45100.0], [1.6828899E12, 212158.0], [1.68289008E12, 211286.0], [1.68288978E12, 100326.0], [1.68288996E12, 229339.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.68288984E12, 8329.0], [1.68289002E12, 16179.900000000005], [1.68288972E12, 9852.0], [1.6828899E12, 3512.0], [1.68289008E12, 211285.4], [1.68288978E12, 10183.0], [1.68288996E12, 2603.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.68288984E12, 143841.0], [1.68289002E12, 63496.98000000091], [1.68288972E12, 37864.990000000005], [1.6828899E12, 100240.0], [1.68289008E12, 211286.0], [1.68288978E12, 100269.0], [1.68288996E12, 68349.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.68288984E12, 15167.400000000009], [1.68289002E12, 29189.35], [1.68288972E12, 11093.0], [1.6828899E12, 18336.60000000002], [1.68289008E12, 211286.0], [1.68288978E12, 14233.0], [1.68288996E12, 7603.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.68288984E12, 11.0], [1.68289002E12, 34.0], [1.68288972E12, 15.0], [1.6828899E12, 11.0], [1.68289008E12, 82719.0], [1.68288978E12, 4.0], [1.68288996E12, 13.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.68288984E12, 256.0], [1.68289002E12, 503.0], [1.68288972E12, 165.0], [1.6828899E12, 280.0], [1.68289008E12, 140565.0], [1.68288978E12, 76.0], [1.68288996E12, 291.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68289008E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 16.0, "minX": 1.0, "maxY": 164470.0, "series": [{"data": [[2.0, 64472.5], [3.0, 32102.0], [4.0, 39824.0], [5.0, 44208.0], [6.0, 36369.5], [7.0, 30093.0], [8.0, 15013.0], [9.0, 71103.0], [10.0, 2030.0], [11.0, 24127.0], [13.0, 31076.0], [15.0, 46861.0], [17.0, 11436.0], [19.0, 33309.0], [20.0, 13545.0], [25.0, 16880.0], [28.0, 14291.0], [29.0, 3509.0], [33.0, 64182.0], [37.0, 44.0], [36.0, 18341.0], [45.0, 8927.0], [51.0, 4102.0], [52.0, 2057.0], [54.0, 72.0], [59.0, 17417.0], [61.0, 88.0], [62.0, 23204.5], [70.0, 42824.0], [73.0, 252.0], [72.0, 88111.0], [74.0, 85.5], [99.0, 110.0], [100.0, 18739.5], [109.0, 1322.5], [110.0, 242.0], [114.0, 6585.0], [112.0, 138.0], [115.0, 41641.0], [121.0, 26208.0], [124.0, 93.5], [125.0, 15137.0], [140.0, 202.0], [142.0, 140.0], [145.0, 171.0], [151.0, 2590.0], [153.0, 116.0], [156.0, 17707.5], [169.0, 167.0], [171.0, 255.0], [180.0, 16.0], [205.0, 214.0], [201.0, 131.0], [214.0, 110.0], [234.0, 160.0], [254.0, 8777.0], [262.0, 207.5], [263.0, 257.0], [280.0, 9767.0], [285.0, 83.0], [277.0, 100.0], [273.0, 320.0], [291.0, 169.0], [295.0, 15931.0], [323.0, 9249.0], [335.0, 13388.0], [333.0, 254.0], [362.0, 272.0], [363.0, 272.0], [381.0, 218.0], [369.0, 215.0], [374.0, 502.0], [398.0, 111.0], [407.0, 8939.0], [414.0, 276.0], [404.0, 217.0], [411.0, 207.0], [428.0, 208.0], [418.0, 241.0], [419.0, 223.0], [421.0, 270.0], [440.0, 178.0], [438.0, 146.5], [432.0, 234.0], [446.0, 244.0], [433.0, 228.0], [450.0, 283.0], [449.0, 116.0], [459.0, 287.0], [458.0, 225.0], [452.0, 300.0], [456.0, 270.0], [451.0, 256.0], [448.0, 235.0], [454.0, 199.0], [461.0, 257.0], [476.0, 70.0], [465.0, 37.0], [471.0, 170.0], [464.0, 300.0], [475.0, 151.0], [472.0, 134.5], [467.0, 277.0], [466.0, 243.0], [470.0, 273.0], [469.0, 250.0], [473.0, 291.0], [477.0, 268.0], [479.0, 256.0], [491.0, 283.0], [493.0, 252.0], [487.0, 89.0], [495.0, 278.0], [485.0, 253.0], [497.0, 1034.0], [510.0, 277.0], [537.0, 10218.0], [514.0, 8086.0], [523.0, 246.0], [535.0, 71.0], [521.0, 48.0], [534.0, 112.5], [536.0, 10447.0], [517.0, 273.0], [528.0, 8905.0], [574.0, 242.0], [546.0, 11092.0], [562.0, 70.0], [545.0, 9844.0], [563.0, 124.0], [571.0, 227.0], [552.0, 238.0], [594.0, 143.0], [589.0, 46.0], [593.0, 256.0], [582.0, 253.0], [662.0, 141.5], [642.0, 145.0], [651.0, 153.0], [658.0, 189.0], [687.0, 268.0], [693.0, 92.0], [688.0, 220.0], [709.0, 248.0], [721.0, 412.0], [744.0, 130.0], [767.0, 138.0], [786.0, 206.0], [780.0, 201.5], [799.0, 403.0], [820.0, 92.0], [818.0, 146.0], [807.0, 90.0], [828.0, 277.0], [837.0, 110.0], [859.0, 142.0], [843.0, 8195.0], [852.0, 257.0], [860.0, 290.0], [878.0, 186.0], [879.0, 46.0], [882.0, 46.0], [892.0, 8965.0], [885.0, 265.0], [864.0, 255.0], [890.0, 2200.0], [898.0, 6984.0], [918.0, 250.0], [905.0, 297.0], [921.0, 297.0], [925.0, 350.0], [907.0, 262.0], [924.0, 387.0], [920.0, 268.5], [932.0, 65.0], [958.0, 25.0], [931.0, 453.0], [938.0, 262.0], [934.0, 414.0], [944.0, 221.0], [930.0, 262.0], [936.0, 579.0], [928.0, 334.0], [974.0, 168.0], [975.0, 95.0], [990.0, 103.0], [971.0, 348.0], [966.0, 356.0], [969.0, 483.0], [982.0, 277.0], [1002.0, 206.0], [997.0, 8386.0], [1005.0, 59.0], [1014.0, 242.0], [1024.0, 9734.0], [1047.0, 265.0], [1101.0, 271.0], [1098.0, 7246.0], [1210.0, 129.0], [1158.0, 160.0], [1175.0, 123.0], [1269.0, 60.0], [1369.0, 572.0], [1388.0, 425.0], [1632.0, 137.0], [1655.0, 77.0], [1668.0, 86.0], [1712.0, 380.0], [1831.0, 832.0], [1875.0, 344.0], [1906.0, 647.0], [1954.0, 687.0], [2117.0, 677.0], [1.0, 113181.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[517.0, 10381.0], [571.0, 27771.0], [807.0, 41768.0], [51.0, 69523.0], [864.0, 122882.0], [925.0, 23604.0], [907.0, 41911.0], [934.0, 17153.0], [971.0, 10074.0], [966.0, 74343.0], [61.0, 72372.0], [1098.0, 41941.0], [72.0, 21840.0], [5.0, 67009.0], [1369.0, 13900.0], [114.0, 136221.0], [8.0, 106272.0], [2117.0, 78339.0], [145.0, 120206.0], [9.0, 24368.5], [11.0, 17825.0], [201.0, 48564.0], [414.0, 11359.0], [25.0, 24732.0], [432.0, 9420.0], [438.0, 55834.5], [459.0, 8804.0], [456.0, 29811.0], [28.0, 13351.0], [448.0, 164470.0], [477.0, 19062.0], [473.0, 19112.0], [470.0, 23594.0], [479.0, 14205.0], [469.0, 19812.0], [29.0, 23605.0], [466.0, 36502.0], [495.0, 45917.0], [491.0, 24564.0], [497.0, 4297.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 2117.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 113181.0, "series": [{"data": [[2.0, 64472.5], [3.0, 32102.0], [4.0, 39824.0], [5.0, 44208.0], [6.0, 36369.5], [7.0, 30093.0], [8.0, 15013.0], [9.0, 71103.0], [10.0, 2030.0], [11.0, 24127.0], [13.0, 31076.0], [15.0, 46861.0], [17.0, 11436.0], [19.0, 33309.0], [20.0, 13545.0], [25.0, 16880.0], [28.0, 14291.0], [29.0, 3509.0], [33.0, 64182.0], [37.0, 44.0], [36.0, 18341.0], [45.0, 8927.0], [51.0, 4102.0], [52.0, 2057.0], [54.0, 72.0], [59.0, 17417.0], [61.0, 88.0], [62.0, 23204.5], [70.0, 42824.0], [73.0, 252.0], [72.0, 88111.0], [74.0, 85.5], [99.0, 110.0], [100.0, 18739.5], [109.0, 1322.5], [110.0, 242.0], [114.0, 6585.0], [112.0, 138.0], [115.0, 41641.0], [121.0, 26208.0], [124.0, 93.5], [125.0, 15137.0], [140.0, 202.0], [142.0, 140.0], [145.0, 171.0], [151.0, 2590.0], [153.0, 116.0], [156.0, 17707.5], [169.0, 167.0], [171.0, 255.0], [180.0, 16.0], [205.0, 214.0], [201.0, 131.0], [214.0, 110.0], [234.0, 160.0], [254.0, 8777.0], [262.0, 207.5], [263.0, 257.0], [280.0, 9767.0], [285.0, 83.0], [277.0, 100.0], [273.0, 320.0], [291.0, 169.0], [295.0, 15931.0], [323.0, 9249.0], [335.0, 13388.0], [333.0, 254.0], [362.0, 272.0], [363.0, 272.0], [381.0, 218.0], [369.0, 215.0], [374.0, 501.0], [398.0, 111.0], [407.0, 8939.0], [414.0, 276.0], [404.0, 217.0], [411.0, 207.0], [428.0, 208.0], [418.0, 241.0], [419.0, 223.0], [421.0, 270.0], [440.0, 178.0], [438.0, 146.5], [432.0, 234.0], [446.0, 244.0], [433.0, 228.0], [450.0, 283.0], [449.0, 116.0], [459.0, 287.0], [458.0, 225.0], [452.0, 300.0], [456.0, 270.0], [451.0, 256.0], [448.0, 235.0], [454.0, 199.0], [461.0, 257.0], [476.0, 70.0], [465.0, 37.0], [471.0, 170.0], [464.0, 300.0], [475.0, 151.0], [472.0, 134.5], [467.0, 277.0], [466.0, 243.0], [470.0, 273.0], [469.0, 250.0], [473.0, 291.0], [477.0, 268.0], [479.0, 256.0], [491.0, 283.0], [493.0, 252.0], [487.0, 89.0], [495.0, 278.0], [485.0, 253.0], [497.0, 1034.0], [510.0, 277.0], [537.0, 10218.0], [514.0, 8086.0], [523.0, 246.0], [535.0, 71.0], [521.0, 48.0], [534.0, 112.5], [536.0, 10447.0], [517.0, 273.0], [528.0, 8905.0], [574.0, 242.0], [546.0, 11092.0], [562.0, 70.0], [545.0, 9844.0], [563.0, 124.0], [571.0, 227.0], [552.0, 238.0], [594.0, 143.0], [589.0, 46.0], [593.0, 256.0], [582.0, 253.0], [662.0, 141.5], [642.0, 145.0], [651.0, 153.0], [658.0, 189.0], [687.0, 268.0], [693.0, 92.0], [688.0, 220.0], [709.0, 248.0], [721.0, 412.0], [744.0, 130.0], [767.0, 138.0], [786.0, 206.0], [780.0, 201.5], [799.0, 403.0], [820.0, 92.0], [818.0, 146.0], [807.0, 90.0], [828.0, 277.0], [837.0, 110.0], [859.0, 142.0], [843.0, 8195.0], [852.0, 257.0], [860.0, 290.0], [878.0, 186.0], [879.0, 46.0], [882.0, 46.0], [892.0, 8965.0], [885.0, 265.0], [864.0, 255.0], [890.0, 2200.0], [898.0, 6984.0], [918.0, 250.0], [905.0, 297.0], [921.0, 297.0], [925.0, 350.0], [907.0, 262.0], [924.0, 387.0], [920.0, 268.5], [932.0, 65.0], [958.0, 25.0], [931.0, 453.0], [938.0, 262.0], [934.0, 414.0], [944.0, 221.0], [930.0, 262.0], [936.0, 579.0], [928.0, 334.0], [974.0, 168.0], [975.0, 95.0], [990.0, 103.0], [971.0, 348.0], [966.0, 356.0], [969.0, 483.0], [982.0, 277.0], [1002.0, 206.0], [997.0, 8386.0], [1005.0, 59.0], [1014.0, 242.0], [1024.0, 9734.0], [1047.0, 265.0], [1101.0, 271.0], [1098.0, 7246.0], [1210.0, 129.0], [1158.0, 160.0], [1175.0, 123.0], [1269.0, 60.0], [1369.0, 572.0], [1388.0, 425.0], [1632.0, 137.0], [1655.0, 77.0], [1668.0, 86.0], [1712.0, 380.0], [1831.0, 832.0], [1875.0, 344.0], [1906.0, 647.0], [1954.0, 687.0], [2117.0, 677.0], [1.0, 113181.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[517.0, 0.0], [571.0, 0.0], [807.0, 0.0], [51.0, 0.0], [864.0, 0.0], [925.0, 0.0], [907.0, 0.0], [934.0, 0.0], [971.0, 0.0], [966.0, 0.0], [61.0, 0.0], [1098.0, 0.0], [72.0, 0.0], [5.0, 0.0], [1369.0, 0.0], [114.0, 0.0], [8.0, 0.0], [2117.0, 0.0], [145.0, 0.0], [9.0, 0.0], [11.0, 0.0], [201.0, 0.0], [414.0, 0.0], [25.0, 0.0], [432.0, 0.0], [438.0, 0.0], [459.0, 0.0], [456.0, 0.0], [28.0, 0.0], [448.0, 0.0], [477.0, 0.0], [473.0, 0.0], [470.0, 0.0], [479.0, 0.0], [469.0, 0.0], [29.0, 0.0], [466.0, 0.0], [495.0, 0.0], [491.0, 0.0], [497.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 2117.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 93.4, "minX": 1.68288972E12, "maxY": 490.35, "series": [{"data": [[1.68288984E12, 412.51666666666665], [1.68289002E12, 93.4], [1.68288972E12, 428.0833333333333], [1.6828899E12, 490.35], [1.68288978E12, 482.56666666666666], [1.68288996E12, 443.65]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68289002E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.2, "minX": 1.68288972E12, "maxY": 488.98333333333335, "series": [{"data": [[1.68288984E12, 424.5833333333333], [1.68289002E12, 101.83333333333333], [1.68288972E12, 394.6333333333333], [1.6828899E12, 488.98333333333335], [1.68289008E12, 0.2], [1.68288978E12, 469.06666666666666], [1.68288996E12, 457.5]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.68288984E12, 7.716666666666667], [1.6828899E12, 6.05]], "isOverall": false, "label": "Non HTTP response code: java.net.SocketException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68289008E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.2, "minX": 1.68288972E12, "maxY": 488.98333333333335, "series": [{"data": [[1.68288984E12, 424.5833333333333], [1.68289002E12, 101.83333333333333], [1.68288972E12, 394.6333333333333], [1.6828899E12, 488.98333333333335], [1.68289008E12, 0.2], [1.68288978E12, 469.06666666666666], [1.68288996E12, 457.5]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.68288984E12, 7.716666666666667], [1.6828899E12, 6.05]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68289008E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.2, "minX": 1.68288972E12, "maxY": 488.98333333333335, "series": [{"data": [[1.68288984E12, 424.5833333333333], [1.68289002E12, 101.83333333333333], [1.68288972E12, 394.6333333333333], [1.6828899E12, 488.98333333333335], [1.68289008E12, 0.2], [1.68288978E12, 469.06666666666666], [1.68288996E12, 457.5]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.68288984E12, 7.716666666666667], [1.6828899E12, 6.05]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68289008E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

