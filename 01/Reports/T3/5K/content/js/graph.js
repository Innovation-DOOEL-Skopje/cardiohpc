/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 9.0, "minX": 0.0, "maxY": 220107.0, "series": [{"data": [[0.0, 9.0], [0.1, 20.0], [0.2, 21.0], [0.3, 23.0], [0.4, 25.0], [0.5, 29.0], [0.6, 31.0], [0.7, 34.0], [0.8, 36.0], [0.9, 39.0], [1.0, 40.0], [1.1, 40.0], [1.2, 41.0], [1.3, 42.0], [1.4, 42.0], [1.5, 43.0], [1.6, 44.0], [1.7, 46.0], [1.8, 47.0], [1.9, 48.0], [2.0, 48.0], [2.1, 49.0], [2.2, 50.0], [2.3, 52.0], [2.4, 53.0], [2.5, 53.0], [2.6, 54.0], [2.7, 54.0], [2.8, 54.0], [2.9, 55.0], [3.0, 56.0], [3.1, 57.0], [3.2, 59.0], [3.3, 59.0], [3.4, 60.0], [3.5, 60.0], [3.6, 61.0], [3.7, 62.0], [3.8, 63.0], [3.9, 63.0], [4.0, 64.0], [4.1, 65.0], [4.2, 65.0], [4.3, 66.0], [4.4, 66.0], [4.5, 67.0], [4.6, 67.0], [4.7, 68.0], [4.8, 68.0], [4.9, 68.0], [5.0, 69.0], [5.1, 69.0], [5.2, 70.0], [5.3, 70.0], [5.4, 70.0], [5.5, 71.0], [5.6, 71.0], [5.7, 71.0], [5.8, 71.0], [5.9, 72.0], [6.0, 72.0], [6.1, 72.0], [6.2, 73.0], [6.3, 74.0], [6.4, 74.0], [6.5, 74.0], [6.6, 75.0], [6.7, 75.0], [6.8, 75.0], [6.9, 75.0], [7.0, 76.0], [7.1, 76.0], [7.2, 77.0], [7.3, 77.0], [7.4, 78.0], [7.5, 78.0], [7.6, 78.0], [7.7, 79.0], [7.8, 79.0], [7.9, 79.0], [8.0, 80.0], [8.1, 80.0], [8.2, 80.0], [8.3, 80.0], [8.4, 81.0], [8.5, 81.0], [8.6, 81.0], [8.7, 81.0], [8.8, 81.0], [8.9, 81.0], [9.0, 82.0], [9.1, 82.0], [9.2, 82.0], [9.3, 82.0], [9.4, 83.0], [9.5, 83.0], [9.6, 83.0], [9.7, 83.0], [9.8, 83.0], [9.9, 84.0], [10.0, 84.0], [10.1, 84.0], [10.2, 84.0], [10.3, 84.0], [10.4, 85.0], [10.5, 85.0], [10.6, 85.0], [10.7, 86.0], [10.8, 86.0], [10.9, 86.0], [11.0, 87.0], [11.1, 87.0], [11.2, 87.0], [11.3, 88.0], [11.4, 88.0], [11.5, 88.0], [11.6, 89.0], [11.7, 89.0], [11.8, 89.0], [11.9, 89.0], [12.0, 89.0], [12.1, 90.0], [12.2, 90.0], [12.3, 90.0], [12.4, 90.0], [12.5, 90.0], [12.6, 90.0], [12.7, 91.0], [12.8, 91.0], [12.9, 91.0], [13.0, 91.0], [13.1, 91.0], [13.2, 91.0], [13.3, 92.0], [13.4, 92.0], [13.5, 92.0], [13.6, 92.0], [13.7, 92.0], [13.8, 92.0], [13.9, 93.0], [14.0, 93.0], [14.1, 93.0], [14.2, 93.0], [14.3, 93.0], [14.4, 93.0], [14.5, 94.0], [14.6, 94.0], [14.7, 94.0], [14.8, 94.0], [14.9, 94.0], [15.0, 94.0], [15.1, 95.0], [15.2, 95.0], [15.3, 95.0], [15.4, 95.0], [15.5, 95.0], [15.6, 95.0], [15.7, 95.0], [15.8, 96.0], [15.9, 96.0], [16.0, 96.0], [16.1, 96.0], [16.2, 96.0], [16.3, 96.0], [16.4, 96.0], [16.5, 97.0], [16.6, 97.0], [16.7, 97.0], [16.8, 97.0], [16.9, 97.0], [17.0, 97.0], [17.1, 97.0], [17.2, 97.0], [17.3, 97.0], [17.4, 97.0], [17.5, 97.0], [17.6, 97.0], [17.7, 98.0], [17.8, 98.0], [17.9, 98.0], [18.0, 98.0], [18.1, 98.0], [18.2, 98.0], [18.3, 98.0], [18.4, 98.0], [18.5, 98.0], [18.6, 98.0], [18.7, 99.0], [18.8, 99.0], [18.9, 99.0], [19.0, 99.0], [19.1, 99.0], [19.2, 99.0], [19.3, 99.0], [19.4, 99.0], [19.5, 99.0], [19.6, 100.0], [19.7, 100.0], [19.8, 100.0], [19.9, 100.0], [20.0, 100.0], [20.1, 100.0], [20.2, 100.0], [20.3, 100.0], [20.4, 100.0], [20.5, 100.0], [20.6, 101.0], [20.7, 101.0], [20.8, 101.0], [20.9, 101.0], [21.0, 101.0], [21.1, 101.0], [21.2, 101.0], [21.3, 101.0], [21.4, 101.0], [21.5, 101.0], [21.6, 102.0], [21.7, 102.0], [21.8, 102.0], [21.9, 102.0], [22.0, 102.0], [22.1, 102.0], [22.2, 102.0], [22.3, 102.0], [22.4, 102.0], [22.5, 102.0], [22.6, 102.0], [22.7, 102.0], [22.8, 103.0], [22.9, 103.0], [23.0, 103.0], [23.1, 103.0], [23.2, 103.0], [23.3, 103.0], [23.4, 103.0], [23.5, 103.0], [23.6, 103.0], [23.7, 103.0], [23.8, 104.0], [23.9, 104.0], [24.0, 104.0], [24.1, 104.0], [24.2, 104.0], [24.3, 104.0], [24.4, 104.0], [24.5, 104.0], [24.6, 104.0], [24.7, 104.0], [24.8, 104.0], [24.9, 104.0], [25.0, 105.0], [25.1, 105.0], [25.2, 105.0], [25.3, 105.0], [25.4, 105.0], [25.5, 105.0], [25.6, 105.0], [25.7, 105.0], [25.8, 105.0], [25.9, 105.0], [26.0, 105.0], [26.1, 105.0], [26.2, 105.0], [26.3, 105.0], [26.4, 106.0], [26.5, 106.0], [26.6, 106.0], [26.7, 106.0], [26.8, 106.0], [26.9, 106.0], [27.0, 106.0], [27.1, 106.0], [27.2, 106.0], [27.3, 106.0], [27.4, 106.0], [27.5, 106.0], [27.6, 106.0], [27.7, 106.0], [27.8, 107.0], [27.9, 107.0], [28.0, 107.0], [28.1, 107.0], [28.2, 107.0], [28.3, 107.0], [28.4, 107.0], [28.5, 107.0], [28.6, 107.0], [28.7, 107.0], [28.8, 107.0], [28.9, 107.0], [29.0, 107.0], [29.1, 107.0], [29.2, 108.0], [29.3, 108.0], [29.4, 108.0], [29.5, 108.0], [29.6, 108.0], [29.7, 108.0], [29.8, 108.0], [29.9, 108.0], [30.0, 108.0], [30.1, 108.0], [30.2, 109.0], [30.3, 109.0], [30.4, 109.0], [30.5, 109.0], [30.6, 109.0], [30.7, 109.0], [30.8, 109.0], [30.9, 109.0], [31.0, 109.0], [31.1, 110.0], [31.2, 110.0], [31.3, 110.0], [31.4, 110.0], [31.5, 110.0], [31.6, 110.0], [31.7, 110.0], [31.8, 110.0], [31.9, 110.0], [32.0, 111.0], [32.1, 111.0], [32.2, 111.0], [32.3, 111.0], [32.4, 111.0], [32.5, 111.0], [32.6, 111.0], [32.7, 112.0], [32.8, 112.0], [32.9, 112.0], [33.0, 112.0], [33.1, 112.0], [33.2, 112.0], [33.3, 112.0], [33.4, 112.0], [33.5, 113.0], [33.6, 113.0], [33.7, 113.0], [33.8, 113.0], [33.9, 113.0], [34.0, 113.0], [34.1, 113.0], [34.2, 113.0], [34.3, 113.0], [34.4, 113.0], [34.5, 114.0], [34.6, 114.0], [34.7, 114.0], [34.8, 114.0], [34.9, 114.0], [35.0, 114.0], [35.1, 114.0], [35.2, 114.0], [35.3, 114.0], [35.4, 115.0], [35.5, 115.0], [35.6, 115.0], [35.7, 115.0], [35.8, 115.0], [35.9, 115.0], [36.0, 115.0], [36.1, 116.0], [36.2, 116.0], [36.3, 116.0], [36.4, 116.0], [36.5, 116.0], [36.6, 116.0], [36.7, 117.0], [36.8, 117.0], [36.9, 117.0], [37.0, 117.0], [37.1, 117.0], [37.2, 118.0], [37.3, 118.0], [37.4, 118.0], [37.5, 118.0], [37.6, 118.0], [37.7, 118.0], [37.8, 119.0], [37.9, 119.0], [38.0, 119.0], [38.1, 119.0], [38.2, 119.0], [38.3, 119.0], [38.4, 119.0], [38.5, 119.0], [38.6, 119.0], [38.7, 119.0], [38.8, 120.0], [38.9, 120.0], [39.0, 120.0], [39.1, 120.0], [39.2, 120.0], [39.3, 120.0], [39.4, 120.0], [39.5, 120.0], [39.6, 120.0], [39.7, 121.0], [39.8, 121.0], [39.9, 121.0], [40.0, 121.0], [40.1, 121.0], [40.2, 121.0], [40.3, 121.0], [40.4, 122.0], [40.5, 122.0], [40.6, 122.0], [40.7, 122.0], [40.8, 122.0], [40.9, 123.0], [41.0, 123.0], [41.1, 123.0], [41.2, 123.0], [41.3, 123.0], [41.4, 123.0], [41.5, 124.0], [41.6, 124.0], [41.7, 124.0], [41.8, 124.0], [41.9, 124.0], [42.0, 125.0], [42.1, 125.0], [42.2, 125.0], [42.3, 125.0], [42.4, 126.0], [42.5, 126.0], [42.6, 126.0], [42.7, 126.0], [42.8, 126.0], [42.9, 126.0], [43.0, 127.0], [43.1, 127.0], [43.2, 127.0], [43.3, 127.0], [43.4, 127.0], [43.5, 127.0], [43.6, 128.0], [43.7, 128.0], [43.8, 128.0], [43.9, 128.0], [44.0, 128.0], [44.1, 129.0], [44.2, 129.0], [44.3, 129.0], [44.4, 129.0], [44.5, 129.0], [44.6, 130.0], [44.7, 130.0], [44.8, 130.0], [44.9, 130.0], [45.0, 130.0], [45.1, 131.0], [45.2, 131.0], [45.3, 131.0], [45.4, 131.0], [45.5, 132.0], [45.6, 132.0], [45.7, 133.0], [45.8, 133.0], [45.9, 133.0], [46.0, 134.0], [46.1, 134.0], [46.2, 134.0], [46.3, 135.0], [46.4, 135.0], [46.5, 135.0], [46.6, 136.0], [46.7, 136.0], [46.8, 136.0], [46.9, 137.0], [47.0, 137.0], [47.1, 137.0], [47.2, 138.0], [47.3, 138.0], [47.4, 138.0], [47.5, 138.0], [47.6, 138.0], [47.7, 138.0], [47.8, 139.0], [47.9, 139.0], [48.0, 139.0], [48.1, 140.0], [48.2, 140.0], [48.3, 140.0], [48.4, 141.0], [48.5, 141.0], [48.6, 141.0], [48.7, 142.0], [48.8, 142.0], [48.9, 142.0], [49.0, 143.0], [49.1, 144.0], [49.2, 144.0], [49.3, 145.0], [49.4, 145.0], [49.5, 146.0], [49.6, 146.0], [49.7, 147.0], [49.8, 147.0], [49.9, 148.0], [50.0, 148.0], [50.1, 149.0], [50.2, 150.0], [50.3, 151.0], [50.4, 151.0], [50.5, 152.0], [50.6, 153.0], [50.7, 154.0], [50.8, 156.0], [50.9, 159.0], [51.0, 159.0], [51.1, 160.0], [51.2, 160.0], [51.3, 160.0], [51.4, 161.0], [51.5, 161.0], [51.6, 162.0], [51.7, 163.0], [51.8, 164.0], [51.9, 165.0], [52.0, 166.0], [52.1, 167.0], [52.2, 169.0], [52.3, 170.0], [52.4, 172.0], [52.5, 173.0], [52.6, 175.0], [52.7, 177.0], [52.8, 178.0], [52.9, 179.0], [53.0, 179.0], [53.1, 180.0], [53.2, 181.0], [53.3, 182.0], [53.4, 182.0], [53.5, 183.0], [53.6, 184.0], [53.7, 185.0], [53.8, 187.0], [53.9, 188.0], [54.0, 188.0], [54.1, 190.0], [54.2, 192.0], [54.3, 193.0], [54.4, 194.0], [54.5, 194.0], [54.6, 194.0], [54.7, 194.0], [54.8, 195.0], [54.9, 195.0], [55.0, 196.0], [55.1, 197.0], [55.2, 197.0], [55.3, 198.0], [55.4, 199.0], [55.5, 200.0], [55.6, 201.0], [55.7, 203.0], [55.8, 206.0], [55.9, 209.0], [56.0, 210.0], [56.1, 212.0], [56.2, 222.0], [56.3, 227.0], [56.4, 228.0], [56.5, 228.0], [56.6, 230.0], [56.7, 237.0], [56.8, 259.0], [56.9, 272.0], [57.0, 280.0], [57.1, 298.0], [57.2, 314.0], [57.3, 362.0], [57.4, 503.0], [57.5, 549.0], [57.6, 603.0], [57.7, 650.0], [57.8, 721.0], [57.9, 743.0], [58.0, 798.0], [58.1, 838.0], [58.2, 868.0], [58.3, 917.0], [58.4, 1054.0], [58.5, 1119.0], [58.6, 1123.0], [58.7, 1132.0], [58.8, 1164.0], [58.9, 1189.0], [59.0, 1212.0], [59.1, 1238.0], [59.2, 1241.0], [59.3, 1244.0], [59.4, 1272.0], [59.5, 1286.0], [59.6, 1309.0], [59.7, 1350.0], [59.8, 1362.0], [59.9, 1465.0], [60.0, 1479.0], [60.1, 1501.0], [60.2, 1520.0], [60.3, 1541.0], [60.4, 1552.0], [60.5, 1572.0], [60.6, 1591.0], [60.7, 1619.0], [60.8, 1658.0], [60.9, 1740.0], [61.0, 1794.0], [61.1, 1930.0], [61.2, 1979.0], [61.3, 2048.0], [61.4, 2130.0], [61.5, 2165.0], [61.6, 2274.0], [61.7, 2319.0], [61.8, 2325.0], [61.9, 2339.0], [62.0, 2344.0], [62.1, 2376.0], [62.2, 2397.0], [62.3, 2462.0], [62.4, 2479.0], [62.5, 2539.0], [62.6, 2583.0], [62.7, 2618.0], [62.8, 2844.0], [62.9, 2879.0], [63.0, 3033.0], [63.1, 3123.0], [63.2, 3311.0], [63.3, 3359.0], [63.4, 3428.0], [63.5, 3532.0], [63.6, 3555.0], [63.7, 3638.0], [63.8, 3788.0], [63.9, 3847.0], [64.0, 3961.0], [64.1, 3999.0], [64.2, 4063.0], [64.3, 4162.0], [64.4, 4213.0], [64.5, 4245.0], [64.6, 4285.0], [64.7, 4300.0], [64.8, 4443.0], [64.9, 4509.0], [65.0, 4550.0], [65.1, 4566.0], [65.2, 4596.0], [65.3, 4640.0], [65.4, 4737.0], [65.5, 4860.0], [65.6, 4887.0], [65.7, 4895.0], [65.8, 4966.0], [65.9, 5020.0], [66.0, 5064.0], [66.1, 5077.0], [66.2, 5078.0], [66.3, 5089.0], [66.4, 5091.0], [66.5, 5096.0], [66.6, 5113.0], [66.7, 5121.0], [66.8, 5226.0], [66.9, 5231.0], [67.0, 5236.0], [67.1, 5270.0], [67.2, 5305.0], [67.3, 5357.0], [67.4, 5540.0], [67.5, 5580.0], [67.6, 5598.0], [67.7, 5607.0], [67.8, 5631.0], [67.9, 5644.0], [68.0, 5663.0], [68.1, 5690.0], [68.2, 5692.0], [68.3, 5697.0], [68.4, 5738.0], [68.5, 5751.0], [68.6, 5754.0], [68.7, 5757.0], [68.8, 5865.0], [68.9, 5953.0], [69.0, 6037.0], [69.1, 6129.0], [69.2, 6169.0], [69.3, 6227.0], [69.4, 6322.0], [69.5, 6385.0], [69.6, 6386.0], [69.7, 6386.0], [69.8, 6387.0], [69.9, 6408.0], [70.0, 6416.0], [70.1, 6417.0], [70.2, 6419.0], [70.3, 6451.0], [70.4, 6498.0], [70.5, 6512.0], [70.6, 6529.0], [70.7, 6542.0], [70.8, 6548.0], [70.9, 6559.0], [71.0, 6560.0], [71.1, 6566.0], [71.2, 6572.0], [71.3, 6594.0], [71.4, 6658.0], [71.5, 6659.0], [71.6, 6659.0], [71.7, 6696.0], [71.8, 6706.0], [71.9, 6741.0], [72.0, 6753.0], [72.1, 6771.0], [72.2, 6819.0], [72.3, 6835.0], [72.4, 6836.0], [72.5, 6858.0], [72.6, 6866.0], [72.7, 6907.0], [72.8, 6915.0], [72.9, 6927.0], [73.0, 6928.0], [73.1, 6970.0], [73.2, 6993.0], [73.3, 7003.0], [73.4, 7045.0], [73.5, 7110.0], [73.6, 7136.0], [73.7, 7137.0], [73.8, 7196.0], [73.9, 7363.0], [74.0, 7380.0], [74.1, 7381.0], [74.2, 7383.0], [74.3, 7408.0], [74.4, 7409.0], [74.5, 7421.0], [74.6, 7441.0], [74.7, 7455.0], [74.8, 7458.0], [74.9, 7524.0], [75.0, 7607.0], [75.1, 7616.0], [75.2, 7621.0], [75.3, 7690.0], [75.4, 7722.0], [75.5, 7737.0], [75.6, 7751.0], [75.7, 7760.0], [75.8, 7765.0], [75.9, 7774.0], [76.0, 7777.0], [76.1, 7782.0], [76.2, 7787.0], [76.3, 7788.0], [76.4, 7793.0], [76.5, 7795.0], [76.6, 7815.0], [76.7, 7827.0], [76.8, 7831.0], [76.9, 7837.0], [77.0, 7863.0], [77.1, 7886.0], [77.2, 7918.0], [77.3, 7936.0], [77.4, 7938.0], [77.5, 7940.0], [77.6, 7945.0], [77.7, 7953.0], [77.8, 7963.0], [77.9, 7984.0], [78.0, 8024.0], [78.1, 8064.0], [78.2, 8072.0], [78.3, 8080.0], [78.4, 8114.0], [78.5, 8121.0], [78.6, 8162.0], [78.7, 8163.0], [78.8, 8170.0], [78.9, 8250.0], [79.0, 8251.0], [79.1, 8253.0], [79.2, 8263.0], [79.3, 8304.0], [79.4, 8343.0], [79.5, 8405.0], [79.6, 8493.0], [79.7, 8606.0], [79.8, 8607.0], [79.9, 8608.0], [80.0, 8631.0], [80.1, 8642.0], [80.2, 8643.0], [80.3, 8670.0], [80.4, 8700.0], [80.5, 8706.0], [80.6, 8714.0], [80.7, 8722.0], [80.8, 8843.0], [80.9, 8888.0], [81.0, 8943.0], [81.1, 8965.0], [81.2, 8979.0], [81.3, 8983.0], [81.4, 9032.0], [81.5, 9034.0], [81.6, 9038.0], [81.7, 9101.0], [81.8, 9122.0], [81.9, 9124.0], [82.0, 9125.0], [82.1, 9161.0], [82.2, 9171.0], [82.3, 9217.0], [82.4, 9220.0], [82.5, 9222.0], [82.6, 9223.0], [82.7, 9232.0], [82.8, 9241.0], [82.9, 9266.0], [83.0, 9281.0], [83.1, 9283.0], [83.2, 9327.0], [83.3, 9360.0], [83.4, 9446.0], [83.5, 9499.0], [83.6, 9535.0], [83.7, 9601.0], [83.8, 9619.0], [83.9, 9665.0], [84.0, 9708.0], [84.1, 9752.0], [84.2, 9776.0], [84.3, 9817.0], [84.4, 9828.0], [84.5, 9855.0], [84.6, 9928.0], [84.7, 9942.0], [84.8, 10036.0], [84.9, 10179.0], [85.0, 10227.0], [85.1, 10291.0], [85.2, 10326.0], [85.3, 10499.0], [85.4, 10653.0], [85.5, 10697.0], [85.6, 10746.0], [85.7, 10836.0], [85.8, 10898.0], [85.9, 10914.0], [86.0, 10978.0], [86.1, 11009.0], [86.2, 11050.0], [86.3, 11112.0], [86.4, 11246.0], [86.5, 11301.0], [86.6, 11317.0], [86.7, 11354.0], [86.8, 11369.0], [86.9, 11402.0], [87.0, 11453.0], [87.1, 11486.0], [87.2, 11518.0], [87.3, 11534.0], [87.4, 11622.0], [87.5, 11682.0], [87.6, 11999.0], [87.7, 12085.0], [87.8, 12139.0], [87.9, 12154.0], [88.0, 12208.0], [88.1, 12250.0], [88.2, 12467.0], [88.3, 12541.0], [88.4, 12542.0], [88.5, 12628.0], [88.6, 12853.0], [88.7, 12930.0], [88.8, 12980.0], [88.9, 12982.0], [89.0, 12995.0], [89.1, 13005.0], [89.2, 13323.0], [89.3, 13419.0], [89.4, 13885.0], [89.5, 13958.0], [89.6, 14030.0], [89.7, 14044.0], [89.8, 14252.0], [89.9, 14276.0], [90.0, 14288.0], [90.1, 14332.0], [90.2, 14512.0], [90.3, 14695.0], [90.4, 15137.0], [90.5, 15630.0], [90.6, 15741.0], [90.7, 15804.0], [90.8, 15869.0], [90.9, 16000.0], [91.0, 16072.0], [91.1, 16378.0], [91.2, 16577.0], [91.3, 16723.0], [91.4, 16803.0], [91.5, 16834.0], [91.6, 16904.0], [91.7, 16961.0], [91.8, 17006.0], [91.9, 17202.0], [92.0, 17419.0], [92.1, 17535.0], [92.2, 17698.0], [92.3, 17929.0], [92.4, 17971.0], [92.5, 18490.0], [92.6, 18577.0], [92.7, 18763.0], [92.8, 19348.0], [92.9, 19894.0], [93.0, 20494.0], [93.1, 20551.0], [93.2, 20569.0], [93.3, 21733.0], [93.4, 21928.0], [93.5, 22082.0], [93.6, 22790.0], [93.7, 23631.0], [93.8, 24517.0], [93.9, 25751.0], [94.0, 26015.0], [94.1, 28594.0], [94.2, 28780.0], [94.3, 29013.0], [94.4, 29016.0], [94.5, 29492.0], [94.6, 30652.0], [94.7, 31708.0], [94.8, 32233.0], [94.9, 34280.0], [95.0, 36165.0], [95.1, 39329.0], [95.2, 42613.0], [95.3, 43749.0], [95.4, 44828.0], [95.5, 46912.0], [95.6, 46926.0], [95.7, 46955.0], [95.8, 47311.0], [95.9, 54460.0], [96.0, 58362.0], [96.1, 59330.0], [96.2, 60479.0], [96.3, 63554.0], [96.4, 65719.0], [96.5, 66950.0], [96.6, 66993.0], [96.7, 70613.0], [96.8, 72969.0], [96.9, 74829.0], [97.0, 77808.0], [97.1, 77916.0], [97.2, 78935.0], [97.3, 82052.0], [97.4, 84853.0], [97.5, 97128.0], [97.6, 100015.0], [97.7, 100029.0], [97.8, 100039.0], [97.9, 100067.0], [98.0, 100081.0], [98.1, 100093.0], [98.2, 100103.0], [98.3, 100111.0], [98.4, 100119.0], [98.5, 100123.0], [98.6, 100131.0], [98.7, 100135.0], [98.8, 100145.0], [98.9, 101028.0], [99.0, 110860.0], [99.1, 129433.0], [99.2, 129588.0], [99.3, 130783.0], [99.4, 130819.0], [99.5, 131208.0], [99.6, 132177.0], [99.7, 132235.0], [99.8, 132291.0], [99.9, 141335.0], [100.0, 220107.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 18014.0, "series": [{"data": [[0.0, 9771.0], [132000.0, 24.0], [205600.0, 3.0], [66700.0, 1.0], [71500.0, 2.0], [73100.0, 20.0], [76300.0, 1.0], [77900.0, 42.0], [79500.0, 2.0], [87500.0, 2.0], [97100.0, 3.0], [130700.0, 37.0], [100.0, 18014.0], [34500.0, 2.0], [33700.0, 2.0], [36100.0, 9.0], [35300.0, 4.0], [40900.0, 2.0], [40100.0, 1.0], [39300.0, 2.0], [43300.0, 2.0], [45700.0, 11.0], [47300.0, 7.0], [189100.0, 1.0], [50500.0, 3.0], [200.0, 828.0], [208300.0, 2.0], [56900.0, 4.0], [59300.0, 20.0], [58500.0, 3.0], [57700.0, 1.0], [60100.0, 1.0], [63300.0, 2.0], [62500.0, 2.0], [64100.0, 3.0], [64900.0, 5.0], [65800.0, 3.0], [69000.0, 1.0], [67400.0, 1.0], [70600.0, 2.0], [300.0, 118.0], [73800.0, 3.0], [81800.0, 2.0], [78600.0, 7.0], [83400.0, 3.0], [93000.0, 3.0], [97800.0, 1.0], [99400.0, 2.0], [101000.0, 32.0], [400.0, 19.0], [500.0, 102.0], [600.0, 98.0], [700.0, 113.0], [800.0, 113.0], [900.0, 60.0], [1000.0, 59.0], [1100.0, 247.0], [1200.0, 309.0], [1300.0, 130.0], [1400.0, 124.0], [1500.0, 280.0], [1600.0, 91.0], [1700.0, 99.0], [1800.0, 10.0], [1900.0, 86.0], [2000.0, 66.0], [2100.0, 94.0], [2200.0, 52.0], [2300.0, 285.0], [2400.0, 96.0], [2500.0, 131.0], [2600.0, 37.0], [2800.0, 83.0], [2700.0, 7.0], [2900.0, 30.0], [3000.0, 36.0], [3100.0, 55.0], [3200.0, 17.0], [3300.0, 96.0], [3400.0, 33.0], [3500.0, 87.0], [3700.0, 23.0], [3600.0, 70.0], [3800.0, 63.0], [3900.0, 96.0], [4000.0, 62.0], [4300.0, 25.0], [4100.0, 58.0], [4200.0, 163.0], [68100.0, 4.0], [66500.0, 2.0], [4400.0, 69.0], [4500.0, 181.0], [71300.0, 2.0], [72900.0, 2.0], [4600.0, 65.0], [4700.0, 42.0], [4800.0, 130.0], [76100.0, 16.0], [77700.0, 1.0], [4900.0, 79.0], [5000.0, 321.0], [5100.0, 114.0], [80900.0, 1.0], [5300.0, 82.0], [5200.0, 224.0], [85700.0, 1.0], [5600.0, 342.0], [5500.0, 116.0], [5400.0, 21.0], [5700.0, 234.0], [5800.0, 42.0], [6100.0, 99.0], [5900.0, 50.0], [6000.0, 66.0], [6300.0, 258.0], [6200.0, 23.0], [100100.0, 354.0], [6400.0, 280.0], [6600.0, 186.0], [6500.0, 468.0], [6700.0, 225.0], [6800.0, 243.0], [6900.0, 304.0], [7100.0, 158.0], [7000.0, 117.0], [7300.0, 204.0], [7400.0, 312.0], [7200.0, 23.0], [7500.0, 54.0], [7600.0, 172.0], [7700.0, 601.0], [7800.0, 320.0], [7900.0, 391.0], [8100.0, 250.0], [8000.0, 207.0], [8600.0, 394.0], [8200.0, 219.0], [8400.0, 62.0], [9200.0, 455.0], [9000.0, 178.0], [8800.0, 72.0], [9400.0, 59.0], [9600.0, 142.0], [10200.0, 136.0], [9800.0, 123.0], [10000.0, 66.0], [10400.0, 39.0], [10600.0, 76.0], [11200.0, 61.0], [10800.0, 118.0], [11000.0, 127.0], [11600.0, 68.0], [11400.0, 117.0], [12200.0, 69.0], [12000.0, 53.0], [11800.0, 7.0], [188600.0, 1.0], [12400.0, 65.0], [12600.0, 31.0], [13200.0, 4.0], [13000.0, 38.0], [12800.0, 64.0], [13800.0, 58.0], [13600.0, 7.0], [13400.0, 8.0], [14200.0, 133.0], [14000.0, 75.0], [14600.0, 48.0], [14400.0, 3.0], [15000.0, 6.0], [15400.0, 5.0], [15600.0, 41.0], [15800.0, 86.0], [16000.0, 91.0], [16200.0, 1.0], [16400.0, 11.0], [16800.0, 101.0], [17200.0, 13.0], [18400.0, 12.0], [17600.0, 5.0], [18000.0, 4.0], [19200.0, 11.0], [20000.0, 2.0], [20400.0, 27.0], [19600.0, 7.0], [20800.0, 3.0], [21200.0, 2.0], [22400.0, 1.0], [21600.0, 7.0], [22000.0, 38.0], [22800.0, 8.0], [23200.0, 2.0], [24400.0, 1.0], [23600.0, 19.0], [24000.0, 7.0], [25200.0, 4.0], [26000.0, 21.0], [26400.0, 6.0], [26800.0, 4.0], [27600.0, 6.0], [27200.0, 2.0], [28000.0, 3.0], [29200.0, 2.0], [29600.0, 1.0], [30400.0, 1.0], [30000.0, 1.0], [31600.0, 25.0], [32000.0, 1.0], [32800.0, 2.0], [36800.0, 7.0], [36000.0, 4.0], [37600.0, 1.0], [41600.0, 1.0], [42400.0, 8.0], [44000.0, 21.0], [44800.0, 5.0], [48000.0, 2.0], [47200.0, 3.0], [50400.0, 2.0], [205500.0, 2.0], [53600.0, 1.0], [54400.0, 4.0], [56800.0, 1.0], [56000.0, 1.0], [59200.0, 5.0], [57600.0, 1.0], [58400.0, 2.0], [60800.0, 1.0], [65600.0, 1.0], [68800.0, 3.0], [72000.0, 2.0], [75200.0, 1.0], [78400.0, 2.0], [81600.0, 1.0], [80000.0, 1.0], [84800.0, 2.0], [92800.0, 1.0], [96000.0, 1.0], [99200.0, 2.0], [123200.0, 1.0], [131200.0, 36.0], [195200.0, 1.0], [132100.0, 21.0], [67100.0, 1.0], [68700.0, 1.0], [70300.0, 4.0], [71900.0, 1.0], [75100.0, 4.0], [79900.0, 3.0], [81500.0, 2.0], [83100.0, 2.0], [86300.0, 7.0], [97500.0, 2.0], [99100.0, 1.0], [129500.0, 45.0], [206600.0, 15.0], [33100.0, 1.0], [36300.0, 3.0], [35500.0, 16.0], [40300.0, 1.0], [42700.0, 26.0], [41900.0, 9.0], [41100.0, 2.0], [44300.0, 2.0], [45100.0, 2.0], [45900.0, 1.0], [185100.0, 2.0], [49900.0, 6.0], [52300.0, 2.0], [53900.0, 1.0], [54700.0, 1.0], [55500.0, 1.0], [57900.0, 3.0], [59500.0, 2.0], [65100.0, 5.0], [63500.0, 2.0], [66200.0, 7.0], [67800.0, 2.0], [71000.0, 1.0], [72600.0, 2.0], [77400.0, 2.0], [74200.0, 1.0], [75800.0, 2.0], [79000.0, 2.0], [80600.0, 1.0], [96600.0, 1.0], [99800.0, 2.0], [144400.0, 1.0], [190100.0, 1.0], [209300.0, 2.0], [66900.0, 62.0], [68500.0, 1.0], [70100.0, 1.0], [74900.0, 2.0], [76500.0, 1.0], [79700.0, 1.0], [82900.0, 22.0], [84500.0, 1.0], [97300.0, 1.0], [129300.0, 11.0], [130900.0, 9.0], [194200.0, 2.0], [16500.0, 44.0], [16900.0, 90.0], [17300.0, 32.0], [17700.0, 9.0], [18100.0, 13.0], [19300.0, 30.0], [18500.0, 63.0], [19700.0, 9.0], [20100.0, 2.0], [21300.0, 9.0], [20900.0, 12.0], [20500.0, 94.0], [22500.0, 1.0], [21700.0, 27.0], [22100.0, 5.0], [24500.0, 7.0], [23700.0, 3.0], [24100.0, 7.0], [24900.0, 6.0], [25300.0, 7.0], [25700.0, 4.0], [26500.0, 6.0], [26900.0, 2.0], [28500.0, 8.0], [27700.0, 1.0], [28900.0, 11.0], [29300.0, 2.0], [30500.0, 11.0], [31700.0, 48.0], [31300.0, 2.0], [32100.0, 12.0], [131100.0, 1.0], [140700.0, 2.0], [37000.0, 5.0], [37800.0, 2.0], [39400.0, 2.0], [41800.0, 2.0], [42600.0, 3.0], [45800.0, 3.0], [49000.0, 2.0], [47400.0, 2.0], [49800.0, 3.0], [50600.0, 3.0], [51400.0, 2.0], [53800.0, 1.0], [54600.0, 6.0], [55400.0, 4.0], [57000.0, 1.0], [57800.0, 1.0], [61000.0, 5.0], [59400.0, 27.0], [61800.0, 2.0], [63400.0, 19.0], [64200.0, 1.0], [69200.0, 1.0], [66000.0, 2.0], [72400.0, 3.0], [74000.0, 1.0], [77200.0, 1.0], [78800.0, 1.0], [82000.0, 20.0], [83600.0, 2.0], [86800.0, 1.0], [96400.0, 2.0], [94800.0, 1.0], [110800.0, 25.0], [134500.0, 2.0], [192100.0, 1.0], [211300.0, 1.0], [69100.0, 2.0], [67500.0, 2.0], [77100.0, 1.0], [73900.0, 6.0], [81900.0, 7.0], [97900.0, 2.0], [110700.0, 13.0], [132200.0, 86.0], [196200.0, 1.0], [34100.0, 1.0], [33300.0, 2.0], [35700.0, 4.0], [37300.0, 3.0], [42900.0, 2.0], [41300.0, 2.0], [43700.0, 8.0], [46900.0, 158.0], [46100.0, 3.0], [45300.0, 2.0], [50900.0, 2.0], [54900.0, 2.0], [56500.0, 2.0], [58900.0, 6.0], [59700.0, 1.0], [60500.0, 2.0], [62900.0, 9.0], [64500.0, 5.0], [69800.0, 3.0], [73000.0, 1.0], [77800.0, 34.0], [74600.0, 1.0], [76200.0, 1.0], [81000.0, 1.0], [93800.0, 1.0], [95400.0, 2.0], [97000.0, 2.0], [98600.0, 2.0], [124200.0, 1.0], [130600.0, 1.0], [201200.0, 1.0], [141300.0, 5.0], [65700.0, 27.0], [68900.0, 2.0], [72100.0, 8.0], [76900.0, 1.0], [81700.0, 1.0], [88100.0, 1.0], [86500.0, 1.0], [94500.0, 1.0], [96100.0, 2.0], [128100.0, 14.0], [8300.0, 91.0], [8700.0, 186.0], [8500.0, 4.0], [132600.0, 14.0], [9100.0, 271.0], [8900.0, 215.0], [9300.0, 123.0], [9700.0, 150.0], [9500.0, 90.0], [9900.0, 123.0], [10100.0, 3.0], [10500.0, 25.0], [10300.0, 26.0], [10700.0, 55.0], [10900.0, 89.0], [11100.0, 40.0], [11300.0, 207.0], [11500.0, 119.0], [11900.0, 43.0], [12100.0, 141.0], [12300.0, 6.0], [12500.0, 104.0], [13300.0, 82.0], [12900.0, 191.0], [13100.0, 3.0], [13500.0, 2.0], [13700.0, 5.0], [14300.0, 71.0], [13900.0, 54.0], [14100.0, 26.0], [14500.0, 30.0], [14700.0, 14.0], [15300.0, 17.0], [15100.0, 23.0], [15700.0, 66.0], [15500.0, 7.0], [16300.0, 13.0], [15900.0, 16.0], [16100.0, 6.0], [17400.0, 32.0], [16600.0, 28.0], [17000.0, 46.0], [17800.0, 2.0], [18200.0, 11.0], [19000.0, 5.0], [19400.0, 7.0], [19800.0, 19.0], [20200.0, 11.0], [21400.0, 2.0], [21800.0, 20.0], [23400.0, 20.0], [22600.0, 1.0], [23800.0, 5.0], [24200.0, 2.0], [25000.0, 17.0], [24600.0, 2.0], [25800.0, 9.0], [26200.0, 2.0], [27400.0, 2.0], [28600.0, 36.0], [28200.0, 3.0], [29400.0, 26.0], [29000.0, 107.0], [30600.0, 19.0], [29800.0, 3.0], [30200.0, 3.0], [32200.0, 31.0], [34800.0, 2.0], [38000.0, 2.0], [38800.0, 1.0], [40400.0, 2.0], [42800.0, 14.0], [42000.0, 2.0], [46800.0, 4.0], [46000.0, 3.0], [191100.0, 1.0], [48400.0, 2.0], [53200.0, 2.0], [52400.0, 2.0], [56400.0, 4.0], [61200.0, 2.0], [60400.0, 2.0], [62000.0, 1.0], [64400.0, 2.0], [65200.0, 1.0], [68000.0, 7.0], [71200.0, 1.0], [72800.0, 1.0], [76000.0, 11.0], [80800.0, 3.0], [88800.0, 1.0], [87200.0, 1.0], [93600.0, 1.0], [96800.0, 2.0], [100000.0, 313.0], [127200.0, 4.0], [136900.0, 3.0], [188100.0, 1.0], [207300.0, 1.0], [220100.0, 2.0], [66300.0, 3.0], [69500.0, 1.0], [71100.0, 12.0], [72700.0, 4.0], [74300.0, 16.0], [79100.0, 1.0], [80700.0, 2.0], [85500.0, 1.0], [87100.0, 1.0], [95100.0, 1.0], [98300.0, 1.0], [134600.0, 4.0], [211400.0, 2.0], [33500.0, 2.0], [135500.0, 1.0], [34300.0, 2.0], [35900.0, 2.0], [37500.0, 13.0], [38300.0, 2.0], [39900.0, 2.0], [40700.0, 6.0], [42300.0, 2.0], [44700.0, 8.0], [46300.0, 2.0], [50300.0, 3.0], [55900.0, 5.0], [56700.0, 1.0], [59100.0, 20.0], [58300.0, 1.0], [57500.0, 3.0], [59900.0, 4.0], [62300.0, 1.0], [63100.0, 1.0], [61500.0, 2.0], [64700.0, 9.0], [65500.0, 5.0], [67000.0, 2.0], [68600.0, 1.0], [71800.0, 3.0], [70200.0, 1.0], [79800.0, 2.0], [84600.0, 2.0], [86200.0, 3.0], [92600.0, 1.0], [95800.0, 2.0], [129400.0, 47.0], [131000.0, 1.0], [197200.0, 1.0], [156500.0, 1.0], [66100.0, 4.0], [69300.0, 2.0], [67700.0, 1.0], [70900.0, 2.0], [72500.0, 1.0], [78900.0, 14.0], [80500.0, 2.0], [110900.0, 10.0], [131800.0, 1.0], [202200.0, 1.0], [16700.0, 52.0], [17100.0, 16.0], [17900.0, 96.0], [18300.0, 7.0], [17500.0, 72.0], [18700.0, 42.0], [19100.0, 2.0], [19500.0, 6.0], [20300.0, 11.0], [19900.0, 3.0], [21500.0, 2.0], [21900.0, 38.0], [22300.0, 2.0], [22700.0, 30.0], [23500.0, 8.0], [23900.0, 10.0], [24300.0, 3.0], [25100.0, 5.0], [25500.0, 1.0], [25900.0, 26.0], [28700.0, 19.0], [29500.0, 5.0], [29100.0, 2.0], [30300.0, 4.0], [31500.0, 2.0], [31100.0, 1.0], [32700.0, 6.0], [32300.0, 2.0], [34200.0, 12.0], [132700.0, 21.0], [36600.0, 3.0], [35800.0, 1.0], [37400.0, 2.0], [39000.0, 3.0], [41400.0, 2.0], [42200.0, 1.0], [43800.0, 14.0], [46200.0, 2.0], [187100.0, 1.0], [49400.0, 2.0], [55000.0, 1.0], [53400.0, 2.0], [56600.0, 1.0], [59000.0, 6.0], [57400.0, 2.0], [59800.0, 2.0], [63800.0, 2.0], [65400.0, 3.0], [66800.0, 1.0], [71600.0, 2.0], [74800.0, 3.0], [78000.0, 9.0], [81200.0, 1.0], [79600.0, 1.0], [82800.0, 2.0], [84400.0, 2.0], [94000.0, 3.0], [95600.0, 2.0], [98800.0, 1.0], [129200.0, 1.0], [130800.0, 45.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 220100.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 69.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 28755.0, "series": [{"data": [[0.0, 28755.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 1350.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 19926.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 69.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 215.30210772833706, "minX": 1.68288204E12, "maxY": 3000.0, "series": [{"data": [[1.6828824E12, 700.0753676470588], [1.6828821E12, 3000.0], [1.68288228E12, 3000.0], [1.68288246E12, 215.30210772833706], [1.68288216E12, 3000.0], [1.68288234E12, 2662.9094076655037], [1.68288204E12, 3000.0], [1.68288222E12, 3000.0]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68288246E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 79.58333333333333, "minX": 8.0, "maxY": 100149.0, "series": [{"data": [[8.0, 100148.0], [9.0, 100149.0], [10.0, 100148.0], [11.0, 100148.0], [12.0, 100148.0], [13.0, 100148.0], [14.0, 100147.0], [18.0, 100147.0], [20.0, 100146.2], [22.0, 100146.0], [24.0, 100145.0], [26.0, 100144.66666666667], [28.0, 100137.0], [29.0, 100136.0], [30.0, 100135.0], [33.0, 100126.0], [32.0, 100128.0], [37.0, 100105.0], [36.0, 100116.0], [41.0, 100012.75], [42.0, 100121.0], [44.0, 100119.0], [47.0, 100118.66666666667], [51.0, 100111.0], [50.0, 100116.66666666667], [53.0, 100109.5], [55.0, 100103.0], [57.0, 100103.0], [61.0, 100101.33333333333], [60.0, 100102.0], [62.0, 100099.0], [65.0, 100098.0], [64.0, 100096.5], [68.0, 100097.0], [75.0, 100095.0], [74.0, 100095.0], [73.0, 100096.0], [72.0, 100095.33333333333], [79.0, 100062.0], [78.0, 100062.33333333333], [82.0, 100049.0], [81.0, 100056.0], [80.0, 100059.0], [86.0, 100047.0], [84.0, 100048.0], [90.0, 100039.0], [89.0, 100044.0], [88.0, 100045.5], [95.0, 100038.0], [94.0, 100037.0], [92.0, 100038.5], [99.0, 100036.0], [102.0, 100032.0], [100.0, 100034.0], [107.0, 100030.5], [105.0, 100031.0], [111.0, 100029.0], [110.0, 100029.0], [115.0, 100028.4], [112.0, 100029.0], [119.0, 100021.0], [118.0, 100025.0], [116.0, 100026.0], [123.0, 100019.5], [121.0, 100021.0], [134.0, 100014.0], [132.0, 100014.0], [129.0, 100015.4], [128.0, 100016.0], [143.0, 100014.0], [142.0, 100014.0], [140.0, 100134.0], [139.0, 100137.66666666667], [136.0, 100013.66666666667], [145.0, 100013.33333333333], [159.0, 100134.0], [157.0, 100133.66666666667], [156.0, 100134.0], [155.0, 100133.66666666667], [154.0, 100134.33333333333], [164.0, 100129.0], [163.0, 100133.0], [162.0, 100133.5], [161.0, 100133.0], [160.0, 100134.0], [175.0, 100126.0], [173.0, 100126.75], [172.0, 100127.0], [171.0, 100127.0], [170.0, 100128.0], [169.0, 100128.0], [183.0, 100114.0], [181.0, 100125.0], [180.0, 100126.25], [179.0, 100126.0], [191.0, 100113.0], [188.0, 100114.0], [187.0, 100115.33333333333], [185.0, 100114.0], [184.0, 100115.0], [198.0, 100103.5], [192.0, 100106.0], [207.0, 100094.66666666667], [204.0, 100094.0], [203.0, 100095.0], [202.0, 100095.0], [215.0, 100091.0], [213.0, 100092.66666666667], [210.0, 100094.0], [209.0, 100093.0], [208.0, 100094.5], [223.0, 100088.0], [221.0, 100088.5], [218.0, 100089.33333333333], [231.0, 100082.0], [230.0, 100083.0], [228.0, 100084.0], [227.0, 100084.0], [226.0, 100087.0], [225.0, 100087.0], [224.0, 100087.0], [239.0, 100076.0], [238.0, 100080.25], [236.0, 100080.0], [233.0, 100081.0], [232.0, 100081.0], [245.0, 100073.4], [244.0, 100074.0], [255.0, 100067.0], [253.0, 100068.0], [251.0, 100069.0], [250.0, 100071.0], [249.0, 100072.0], [248.0, 100072.33333333333], [271.0, 100033.0], [269.0, 100034.0], [267.0, 100036.0], [266.0, 100039.0], [265.0, 100053.0], [263.0, 100054.0], [262.0, 100056.0], [260.0, 100065.33333333333], [257.0, 100067.0], [284.0, 100025.0], [283.0, 100025.0], [282.0, 100029.0], [281.0, 100029.0], [280.0, 100030.0], [277.0, 100032.33333333333], [275.0, 100032.0], [274.0, 100032.0], [298.0, 100133.0], [297.0, 100134.0], [296.0, 97037.0], [295.0, 97040.0], [294.0, 100015.25], [292.0, 100015.75], [291.0, 100015.0], [307.0, 96029.0], [319.0, 100135.0], [318.0, 100135.0], [312.0, 96684.0], [311.0, 97347.0], [310.0, 98354.0], [309.0, 96122.0], [308.0, 97128.0], [306.0, 100115.0], [305.0, 100127.0], [304.0, 100129.5], [333.0, 100125.0], [334.0, 100121.0], [332.0, 100129.0], [331.0, 100130.0], [330.0, 100130.0], [329.0, 100131.0], [325.0, 100134.0], [324.0, 100134.0], [323.0, 100134.0], [321.0, 100135.0], [320.0, 100135.0], [339.0, 100073.0], [350.0, 100027.5], [346.0, 100030.0], [345.0, 100033.0], [341.0, 100059.0], [340.0, 100060.0], [338.0, 95673.0], [337.0, 95675.0], [336.0, 100119.5], [360.0, 100019.0], [365.0, 100122.0], [363.0, 100123.0], [362.0, 100123.0], [361.0, 100019.0], [359.0, 100020.0], [357.0, 100021.0], [356.0, 100023.5], [354.0, 100026.0], [353.0, 100026.33333333333], [371.0, 100121.0], [381.0, 100074.0], [382.0, 100073.0], [380.0, 100075.0], [378.0, 100076.0], [375.0, 100079.0], [374.0, 100116.0], [373.0, 100120.5], [372.0, 100121.33333333333], [369.0, 100121.0], [368.0, 100121.0], [398.0, 93047.0], [399.0, 93840.0], [397.0, 94055.0], [396.0, 94851.0], [395.0, 95859.0], [394.0, 95861.0], [393.0, 96869.0], [392.0, 96870.0], [391.0, 97878.0], [385.0, 100070.0], [387.0, 99897.0], [386.0, 99104.0], [390.0, 92647.0], [389.0, 93654.0], [388.0, 98889.0], [414.0, 80532.0], [415.0, 80532.0], [413.0, 81540.0], [412.0, 79970.0], [411.0, 80978.0], [410.0, 79679.0], [409.0, 80687.0], [408.0, 80887.0], [407.0, 81896.0], [401.0, 87597.0], [400.0, 92832.0], [403.0, 87249.0], [402.0, 86590.0], [406.0, 84571.0], [405.0, 85578.0], [404.0, 86243.0], [430.0, 72456.0], [431.0, 72454.0], [429.0, 71892.0], [428.0, 71893.0], [427.0, 72901.0], [426.0, 79708.0], [425.0, 80716.0], [424.0, 80719.0], [423.0, 81726.0], [417.0, 79523.5], [419.0, 75838.0], [418.0, 82951.0], [422.0, 74921.0], [421.0, 74829.0], [420.0, 74830.0], [446.0, 68819.0], [447.0, 68817.0], [445.0, 69826.0], [444.0, 66050.0], [443.0, 67058.0], [442.0, 66399.0], [441.0, 67406.0], [440.0, 65837.0], [439.0, 72854.0], [433.0, 75884.0], [432.0, 72109.0], [435.0, 68863.0], [434.0, 74876.0], [438.0, 65744.0], [437.0, 66753.0], [436.0, 67857.0], [462.0, 61537.0], [463.0, 61535.0], [461.0, 62544.0], [460.0, 62546.0], [459.0, 63554.0], [458.0, 63556.0], [457.0, 64564.0], [456.0, 64566.0], [455.0, 65573.0], [449.0, 68603.0], [448.0, 67808.0], [451.0, 67592.0], [450.0, 67593.0], [454.0, 65575.0], [453.0, 66583.0], [452.0, 66585.0], [478.0, 53462.0], [479.0, 53459.0], [477.0, 54468.0], [476.0, 54470.0], [475.0, 55477.0], [474.0, 55479.0], [473.0, 56487.0], [472.0, 56490.0], [471.0, 57499.0], [465.0, 60526.0], [464.0, 60528.0], [467.0, 59516.0], [466.0, 59518.0], [469.0, 58506.0], [468.0, 58508.0], [494.0, 45385.0], [495.0, 45383.0], [493.0, 46392.0], [492.0, 46395.0], [491.0, 47402.0], [490.0, 47404.0], [489.0, 48411.0], [488.0, 48413.0], [487.0, 49421.0], [481.0, 52449.0], [480.0, 52451.0], [483.0, 51440.0], [482.0, 51442.0], [486.0, 49423.0], [485.0, 50431.0], [484.0, 50432.0], [510.0, 38393.0], [511.0, 38391.0], [509.0, 39401.0], [508.0, 39403.0], [507.0, 40410.0], [506.0, 40411.0], [505.0, 41419.0], [504.0, 40339.0], [503.0, 41346.0], [497.0, 44374.0], [496.0, 44376.0], [499.0, 43365.0], [498.0, 43367.0], [502.0, 41348.0], [501.0, 42355.0], [500.0, 42358.0], [540.0, 23254.0], [528.0, 29309.0], [530.0, 28298.0], [532.0, 27290.0], [542.0, 16606.0], [538.0, 24263.0], [536.0, 25270.0], [512.0, 37384.0], [514.0, 36374.0], [516.0, 35365.0], [518.0, 34359.0], [526.0, 30319.0], [524.0, 31328.0], [522.0, 32336.0], [520.0, 33347.0], [534.0, 26280.0], [548.0, 16596.0], [562.0, 16097.0], [574.0, 16092.5], [568.0, 16850.5], [546.0, 16599.0], [544.0, 16605.0], [558.0, 16602.333333333332], [554.0, 16099.0], [552.0, 22106.0], [566.0, 16094.0], [602.0, 19087.0], [606.0, 16081.0], [592.0, 16086.0], [604.0, 16083.0], [578.0, 17604.0], [576.0, 22099.0], [582.0, 22096.0], [586.0, 16087.0], [584.0, 16088.0], [596.0, 17587.0], [634.0, 16065.0], [628.0, 16069.0], [626.0, 17274.0], [636.0, 20070.666666666668], [632.0, 22075.0], [614.0, 22084.0], [612.0, 20589.666666666668], [622.0, 16072.0], [620.0, 16073.0], [618.0, 22082.0], [616.0, 16076.0], [630.0, 16067.0], [668.0, 22054.0], [658.0, 17564.0], [664.0, 16048.0], [640.0, 22070.0], [642.0, 22068.0], [646.0, 19061.0], [644.0, 22067.0], [652.0, 17566.0], [648.0, 16057.0], [662.0, 17562.0], [660.0, 17562.0], [676.0, 17556.0], [698.0, 17549.6], [702.0, 16033.0], [700.0, 17548.0], [672.0, 18551.333333333332], [674.0, 17556.0], [678.0, 16042.0], [686.0, 22045.0], [684.0, 16038.0], [682.0, 16041.0], [694.0, 17550.0], [692.0, 17550.0], [730.0, 17532.0], [728.0, 16020.0], [722.0, 16024.0], [720.0, 17539.0], [732.0, 16775.0], [704.0, 16030.0], [706.0, 16029.0], [718.0, 17539.0], [714.0, 16783.5], [724.0, 17535.0], [740.0, 22022.0], [760.0, 17517.0], [766.0, 17512.0], [764.0, 15999.0], [738.0, 17528.0], [742.0, 16014.0], [750.0, 17523.0], [746.0, 23974.0], [744.0, 17526.0], [758.0, 16764.0], [756.0, 17016.666666666668], [794.0, 17437.0], [792.0, 17439.0], [786.0, 17457.5], [782.0, 17458.0], [768.0, 15998.0], [772.0, 15991.0], [780.0, 17482.0], [778.0, 21978.0], [790.0, 17442.0], [784.0, 15944.0], [828.0, 17398.0], [830.0, 16641.5], [816.0, 17407.0], [818.0, 23856.0], [800.0, 16926.666666666668], [802.0, 17421.0], [804.0, 16664.5], [806.0, 17419.0], [812.0, 16905.0], [808.0, 17410.0], [822.0, 16642.5], [820.0, 15887.0], [834.0, 15878.5], [860.0, 18358.0], [856.0, 17339.0], [836.0, 17391.0], [854.0, 18844.0], [852.0, 17862.0], [846.0, 16631.5], [844.0, 17389.0], [842.0, 17389.333333333332], [840.0, 17390.0], [870.0, 15816.0], [894.0, 23715.0], [892.0, 19513.5], [888.0, 21808.0], [866.0, 20333.166666666668], [876.0, 21817.0], [874.0, 17326.0], [872.0, 21822.0], [886.0, 21811.333333333332], [884.0, 19809.333333333332], [882.0, 19564.5], [898.0, 21758.0], [924.0, 17238.0], [910.0, 19745.666666666668], [902.0, 17259.0], [906.0, 17255.0], [918.0, 21740.0], [914.0, 18018.0], [944.0, 15689.0], [956.0, 15660.0], [946.0, 18672.0], [958.0, 17166.0], [954.0, 17174.0], [952.0, 20404.0], [936.0, 18740.0], [950.0, 21674.0], [988.0, 15151.0], [990.0, 18927.0], [976.0, 16176.666666666666], [978.0, 19650.0], [986.0, 21603.0], [984.0, 18213.0], [966.0, 17160.0], [964.0, 21657.0], [962.0, 17164.0], [960.0, 23615.0], [972.0, 20249.0], [970.0, 21272.0], [982.0, 18214.0], [1018.0, 18539.5], [1022.0, 16578.0], [1008.0, 18202.0], [1010.0, 17192.0], [1020.0, 18538.0], [1016.0, 16586.0], [998.0, 19627.0], [996.0, 15139.0], [994.0, 15145.0], [992.0, 18208.0], [1006.0, 19210.0], [1004.0, 21562.0], [1002.0, 18179.0], [1000.0, 18180.0], [1014.0, 17239.333333333332], [1036.0, 16561.0], [1084.0, 16837.0], [1064.0, 16843.0], [1056.0, 16845.0], [1060.0, 19358.0], [1032.0, 18519.0], [1028.0, 16576.5], [1052.0, 16846.0], [1048.0, 16177.0], [1044.0, 16555.5], [1068.0, 18099.0], [1148.0, 16816.0], [1144.0, 17024.0], [1132.0, 17006.0], [1128.0, 17012.25], [1100.0, 16833.0], [1112.0, 16958.333333333332], [1108.0, 17011.0], [1104.0, 16833.0], [1208.0, 19304.0], [1212.0, 16966.5], [1184.0, 17010.0], [1188.0, 16980.0], [1192.0, 17002.0], [1204.0, 19305.0], [1200.0, 19308.0], [1164.0, 19326.0], [1152.0, 17495.0], [1180.0, 16987.5], [1168.0, 16870.666666666668], [1196.0, 18054.0], [1228.0, 16962.0], [1256.0, 16924.5], [1248.0, 16877.333333333332], [1268.0, 16919.0], [1220.0, 16952.5], [1216.0, 16981.0], [1244.0, 16958.0], [1232.0, 16942.75], [1260.0, 16858.0], [1252.0, 16915.5], [1332.0, 16787.0], [1336.0, 16659.0], [1320.0, 16813.0], [1340.0, 16657.75], [1328.0, 16799.5], [1280.0, 16725.0], [1292.0, 16872.0], [1300.0, 16711.0], [1400.0, 15873.0], [1404.0, 15873.0], [1376.0, 16692.5], [1380.0, 14181.5], [1384.0, 15869.333333333334], [1372.0, 16576.666666666668], [1368.0, 16725.0], [1364.0, 16726.0], [1360.0, 16727.0], [1464.0, 15604.5], [1440.0, 15854.0], [1444.0, 18150.0], [1448.0, 15835.0], [1452.0, 15814.666666666666], [1468.0, 18117.0], [1460.0, 15790.0], [1420.0, 15854.5], [1408.0, 15846.0], [1432.0, 25948.0], [1428.0, 15863.0], [1424.0, 15866.0], [1520.0, 15663.0], [1504.0, 15778.0], [1508.0, 15773.0], [1528.0, 23255.0], [1512.0, 15759.5], [1472.0, 35983.0], [1476.0, 18116.0], [1496.0, 15575.0], [1492.0, 18080.5], [1488.0, 20379.0], [1548.0, 14707.0], [1596.0, 114.0], [1568.0, 14690.0], [1572.0, 14650.0], [1576.0, 11833.0], [1580.0, 9815.0], [1544.0, 15702.0], [1540.0, 15723.5], [1536.0, 15685.5], [1564.0, 17007.0], [1560.0, 14674.0], [1556.0, 14703.0], [1552.0, 34880.0], [1656.0, 100.0], [1660.0, 99.0], [1624.0, 102.33333333333333], [1612.0, 103.0], [1620.0, 104.0], [1672.0, 98.0], [1708.0, 94.0], [1704.0, 92.0], [1696.0, 96.5], [1664.0, 98.0], [1692.0, 96.0], [1680.0, 98.0], [1684.0, 97.16666666666667], [1760.0, 80.0], [1764.0, 79.58333333333333], [1768.0, 8803.0], [1756.0, 81.0], [1752.0, 82.0], [1772.0, 134.5], [1888.0, 109.0], [1896.0, 109.0], [1916.0, 7793.0], [1892.0, 109.0], [1900.0, 108.5625], [1912.0, 82.0], [1908.0, 107.0], [1904.0, 108.85714285714285], [1928.0, 11063.5], [1960.0, 11055.0], [1972.0, 11294.5], [1932.0, 11306.0], [1924.0, 4034.0], [1948.0, 11059.0], [1944.0, 11140.333333333334], [1940.0, 18617.5], [1936.0, 16099.333333333334], [2036.0, 25897.0], [2032.0, 11028.0], [2024.0, 11034.0], [2028.0, 11276.0], [2040.0, 11269.0], [1996.0, 11045.0], [1988.0, 11047.0], [2012.0, 18476.0], [2008.0, 11040.0], [2004.0, 13993.0], [2152.0, 15127.5], [2168.0, 10726.0], [2128.0, 2686.0], [2160.0, 10729.0], [2072.0, 11119.0], [2056.0, 25875.0], [2048.0, 11251.0], [2096.0, 15483.5], [2088.0, 11188.0], [2080.0, 10987.0], [2296.0, 116.0909090909091], [2240.0, 10627.0], [2184.0, 15584.333333333332], [2192.0, 19307.0], [2200.0, 10693.0], [2424.0, 17698.0], [2376.0, 120.0], [2416.0, 8982.0], [2408.0, 11875.666666666666], [2400.0, 116.66666666666667], [2336.0, 98.0], [2512.0, 106.0], [2520.0, 105.33333333333333], [2552.0, 111.4], [2584.0, 13816.0], [2656.0, 12043.0], [2624.0, 11099.0], [2632.0, 13972.0], [2648.0, 12223.0], [2576.0, 13418.0], [2568.0, 11624.0], [2560.0, 108.71428571428571], [2616.0, 11860.666666666666], [2608.0, 11677.0], [2600.0, 12246.0], [2592.0, 11114.0], [2712.0, 11588.0], [2704.0, 13371.0], [2696.0, 11071.0], [2688.0, 12210.0], [2744.0, 12152.0], [2888.0, 11937.571428571428], [2880.0, 12531.5], [2896.0, 12957.5], [2904.0, 11934.0], [2912.0, 11678.5], [2824.0, 12964.8], [2872.0, 12578.333333333332], [2848.0, 12143.0], [3000.0, 6676.663510931873], [2944.0, 127.2], [2960.0, 124.0], [2169.0, 10722.0], [2161.0, 10729.0], [2121.0, 11112.0], [2137.0, 17932.5], [2153.0, 10732.0], [2057.0, 15550.5], [2097.0, 11176.0], [2081.0, 11225.0], [2177.0, 10598.5], [2193.0, 10697.0], [2201.0, 10691.0], [2233.0, 10643.0], [2225.0, 13606.5], [2209.0, 10681.5], [2393.0, 118.27272727272728], [2425.0, 17878.0], [2409.0, 8863.0], [2345.0, 96.0], [2513.0, 106.00000000000001], [2521.0, 122.0], [2553.0, 111.57142857142857], [2545.0, 113.0], [2681.0, 14232.0], [2625.0, 13245.0], [2633.0, 12227.0], [2641.0, 12225.0], [2649.0, 12219.0], [2673.0, 13468.0], [2665.0, 12213.0], [2657.0, 11082.0], [2577.0, 12254.0], [2561.0, 6056.0], [2609.0, 12243.0], [2601.0, 11679.0], [2705.0, 13951.0], [2689.0, 13083.0], [2737.0, 11017.0], [2729.0, 11397.0], [2721.0, 13900.0], [2921.0, 12546.5], [2889.0, 12025.071428571428], [2929.0, 11663.0], [2881.0, 12139.0], [2905.0, 11931.0], [2913.0, 13700.0], [2817.0, 12147.0], [2825.0, 13210.833333333334], [2833.0, 13890.0], [2945.0, 127.0], [2985.0, 121.75], [2969.0, 124.0], [1029.0, 18525.0], [1081.0, 16838.0], [1077.0, 16838.0], [1073.0, 16839.5], [1025.0, 16578.0], [1033.0, 18517.0], [1037.0, 18513.0], [1053.0, 16846.0], [1049.0, 15194.0], [1041.0, 16556.0], [1061.0, 16843.0], [1057.0, 16844.0], [1141.0, 16909.5], [1137.0, 17004.333333333332], [1089.0, 16835.5], [1121.0, 16829.0], [1109.0, 17009.666666666668], [1105.0, 17011.0], [1201.0, 16793.0], [1209.0, 19303.0], [1213.0, 16965.0], [1189.0, 16981.0], [1161.0, 16915.0], [1153.0, 16813.0], [1181.0, 16808.0], [1169.0, 16989.0], [1197.0, 19310.0], [1193.0, 16797.0], [1221.0, 16938.0], [1253.0, 16734.0], [1277.0, 16931.0], [1217.0, 16989.0], [1225.0, 16886.0], [1241.0, 16949.0], [1237.0, 16933.0], [1233.0, 16962.0], [1261.0, 16731.0], [1249.0, 16940.0], [1313.0, 16802.666666666668], [1333.0, 17952.0], [1325.0, 16814.0], [1285.0, 16725.0], [1293.0, 16893.0], [1309.0, 19130.0], [1297.0, 19110.5], [1401.0, 15873.0], [1397.0, 15877.0], [1381.0, 15879.0], [1385.0, 15877.0], [1405.0, 15871.0], [1393.0, 15876.0], [1353.0, 17501.0], [1345.0, 16729.0], [1373.0, 16696.0], [1369.0, 16696.0], [1361.0, 16702.0], [1457.0, 15816.0], [1461.0, 15609.0], [1445.0, 15634.0], [1441.0, 15847.0], [1449.0, 15807.0], [1453.0, 15623.0], [1417.0, 16440.0], [1413.0, 22526.333333333332], [1409.0, 18181.0], [1437.0, 15855.5], [1529.0, 15735.0], [1533.0, 20345.0], [1505.0, 15776.0], [1509.0, 15773.0], [1525.0, 15764.0], [1521.0, 15765.0], [1485.0, 15796.0], [1501.0, 15778.5], [1489.0, 15579.0], [1517.0, 16911.0], [1589.0, 115.0], [1573.0, 14678.0], [1577.0, 10826.0], [1593.0, 115.0], [1549.0, 14680.0], [1545.0, 13135.0], [1565.0, 14670.0], [1561.0, 14674.0], [1581.0, 116.0], [1653.0, 100.0], [1617.0, 103.0], [1709.0, 89.0], [1669.0, 98.0], [1673.0, 97.0], [1693.0, 96.0], [1689.0, 97.0], [1685.0, 97.25], [1789.0, 132.5], [1761.0, 80.0], [1765.0, 80.0], [1757.0, 81.0], [1753.0, 81.5], [1801.0, 132.0], [1793.0, 134.0], [1893.0, 109.75], [1897.0, 109.25], [1901.0, 109.0], [1917.0, 7792.0], [1909.0, 107.86666666666666], [1905.0, 109.25000000000001], [1977.0, 11049.0], [1957.0, 25929.0], [1961.0, 11056.0], [1965.0, 11136.0], [1981.0, 11048.5], [1973.0, 19902.0], [1969.0, 11054.5], [1933.0, 11304.0], [1925.0, 4032.0], [1921.0, 5770.5], [1941.0, 11302.0], [1937.0, 11062.0], [2041.0, 11019.0], [2017.0, 11036.5], [2021.0, 17017.333333333332], [2025.0, 11035.0], [2045.0, 15564.0], [1997.0, 11043.0], [1993.0, 11288.0], [1989.0, 11288.0], [1985.0, 11048.0], [2013.0, 11041.0], [2009.0, 11041.0], [2001.0, 11042.666666666666], [2146.0, 12768.5], [2154.0, 10734.0], [2170.0, 10723.0], [2114.0, 16940.5], [2138.0, 10498.0], [2074.0, 11239.0], [2058.0, 18560.0], [2050.0, 11253.0], [2106.0, 11157.25], [2098.0, 11172.0], [2186.0, 10705.5], [2290.0, 117.33333333333333], [2178.0, 10476.0], [2234.0, 13597.0], [2218.0, 15012.75], [2210.0, 25304.0], [2242.0, 10624.0], [2378.0, 120.0], [2426.0, 9087.0], [2394.0, 118.2], [2418.0, 15009.0], [2402.0, 104.0], [2346.0, 96.0], [2338.0, 97.2608695652174], [2514.0, 106.4], [2554.0, 110.0], [2522.0, 120.0], [2586.0, 11115.0], [2674.0, 14096.0], [2682.0, 13958.0], [2658.0, 13961.0], [2578.0, 12255.0], [2570.0, 11615.0], [2618.0, 12237.0], [2610.0, 13988.0], [2706.0, 14227.0], [2690.0, 11074.0], [2722.0, 11586.0], [2890.0, 13882.0], [2882.0, 13121.769230769232], [2898.0, 13691.0], [2906.0, 11927.0], [2922.0, 11672.0], [2914.0, 13423.0], [2874.0, 13885.5], [2850.0, 11763.333333333334], [2954.0, 125.66666666666667], [2962.0, 124.0], [2946.0, 125.0], [2970.0, 123.25], [2163.0, 10486.0], [2115.0, 19736.0], [2123.0, 15417.0], [2131.0, 10740.666666666666], [2139.0, 15042.0], [2155.0, 10491.0], [2147.0, 10738.0], [2075.0, 11118.5], [2067.0, 11243.0], [2059.0, 25874.0], [2051.0, 11009.0], [2107.0, 11151.0], [2099.0, 11172.0], [2091.0, 11189.0], [2083.0, 11224.0], [2291.0, 116.71428571428572], [2179.0, 10715.0], [2203.0, 19298.0], [2211.0, 10671.0], [2379.0, 119.0], [2427.0, 9084.0], [2395.0, 118.16666666666667], [2419.0, 9100.5], [2411.0, 13287.0], [2355.0, 88.28571428571429], [2339.0, 97.0], [2515.0, 106.5263157894737], [2523.0, 116.0], [2555.0, 110.0], [2547.0, 112.0], [2667.0, 12519.0], [2675.0, 12211.333333333334], [2683.0, 12681.6], [2627.0, 13106.0], [2635.0, 12225.5], [2643.0, 12224.0], [2587.0, 12252.0], [2571.0, 11614.0], [2563.0, 13311.0], [2619.0, 12235.0], [2603.0, 11110.0], [2595.0, 11868.666666666666], [2691.0, 11642.0], [2739.0, 12152.0], [2883.0, 11003.0], [2899.0, 12955.0], [2923.0, 11672.0], [2875.0, 12576.5], [2867.0, 12140.0], [2955.0, 125.0], [2987.0, 121.66666666666667], [541.0, 23250.0], [543.0, 16606.0], [529.0, 29307.0], [531.0, 28297.0], [533.0, 27289.0], [539.0, 24259.0], [537.0, 25270.0], [527.0, 30317.0], [513.0, 37382.0], [515.0, 36376.0], [517.0, 35363.0], [519.0, 34353.0], [525.0, 31327.0], [523.0, 32334.0], [521.0, 33345.0], [535.0, 26278.0], [569.0, 16094.0], [573.0, 22100.0], [561.0, 19101.0], [571.0, 19096.5], [551.0, 16100.5], [549.0, 16101.0], [547.0, 16596.0], [545.0, 16598.0], [559.0, 16098.0], [555.0, 16099.0], [553.0, 16100.0], [565.0, 19098.0], [563.0, 16097.0], [603.0, 16083.0], [607.0, 22090.0], [601.0, 17597.0], [587.0, 16086.0], [581.0, 17595.0], [585.0, 16088.0], [599.0, 16841.5], [597.0, 21741.0], [593.0, 22494.75], [615.0, 16076.0], [637.0, 22073.0], [639.0, 19068.5], [627.0, 16070.0], [613.0, 22086.0], [609.0, 22739.333333333332], [619.0, 16074.0], [617.0, 16075.0], [631.0, 16067.0], [629.0, 22076.0], [667.0, 18555.333333333332], [669.0, 16047.0], [655.0, 17565.0], [641.0, 22071.0], [643.0, 17573.0], [651.0, 16813.5], [649.0, 22064.5], [663.0, 16804.5], [657.0, 16050.5], [673.0, 16044.0], [703.0, 17544.0], [701.0, 16031.0], [699.0, 17549.0], [687.0, 22047.0], [679.0, 17051.0], [685.0, 22045.0], [683.0, 17553.0], [681.0, 17554.0], [695.0, 17549.0], [689.0, 16037.0], [711.0, 17541.0], [733.0, 17531.0], [735.0, 16772.5], [729.0, 16021.0], [719.0, 17538.0], [705.0, 16029.0], [707.0, 16029.0], [709.0, 16785.5], [717.0, 16782.5], [715.0, 17540.0], [713.0, 16026.0], [727.0, 16778.0], [725.0, 17535.0], [723.0, 17535.0], [763.0, 16000.0], [767.0, 17007.0], [761.0, 22007.0], [751.0, 16008.0], [737.0, 19776.5], [739.0, 17528.0], [741.0, 16014.0], [749.0, 19673.0], [745.0, 16013.0], [759.0, 17520.0], [753.0, 16765.0], [771.0, 16749.0], [797.0, 16927.666666666668], [793.0, 17439.0], [769.0, 17506.0], [775.0, 15991.0], [781.0, 17482.0], [779.0, 23933.0], [777.0, 16742.0], [789.0, 16688.0], [787.0, 17446.0], [827.0, 17398.5], [825.0, 15886.0], [831.0, 17398.0], [817.0, 17407.0], [829.0, 17398.0], [815.0, 18401.666666666668], [801.0, 17431.0], [805.0, 17420.0], [807.0, 17419.0], [809.0, 17409.0], [823.0, 20459.0], [819.0, 15889.0], [839.0, 15876.0], [859.0, 17338.0], [837.0, 17391.0], [835.0, 17392.0], [833.0, 17392.0], [855.0, 17343.0], [849.0, 17347.0], [847.0, 17388.0], [889.0, 17286.0], [895.0, 19512.0], [881.0, 15804.0], [893.0, 21760.0], [877.0, 21813.0], [867.0, 21831.0], [869.0, 21823.5], [875.0, 23775.0], [873.0, 21820.0], [887.0, 15800.0], [923.0, 21374.0], [915.0, 21738.0], [927.0, 21731.0], [925.0, 21734.0], [897.0, 18038.5], [901.0, 21757.0], [899.0, 21757.0], [903.0, 21753.0], [907.0, 15741.0], [905.0, 16502.0], [919.0, 15727.0], [917.0, 20240.666666666668], [913.0, 21740.0], [955.0, 15661.0], [959.0, 23616.0], [947.0, 17181.0], [957.0, 15654.0], [953.0, 17178.0], [941.0, 17202.0], [935.0, 21730.666666666668], [929.0, 15724.0], [939.0, 16446.0], [949.0, 18710.0], [985.0, 18212.0], [991.0, 15150.0], [977.0, 19651.0], [981.0, 17402.5], [987.0, 19645.0], [967.0, 18651.0], [963.0, 23614.0], [961.0, 23615.0], [973.0, 20247.0], [971.0, 21270.0], [969.0, 21656.0], [983.0, 18213.0], [1019.0, 18539.0], [1023.0, 16579.0], [1009.0, 18198.0], [1021.0, 16580.0], [999.0, 18192.0], [997.0, 18195.0], [995.0, 18203.0], [993.0, 18207.0], [1007.0, 19210.0], [1005.0, 15112.0], [1003.0, 19610.0], [1001.0, 18179.0], [1011.0, 17188.0], [1078.0, 16942.0], [1086.0, 16837.0], [1062.0, 16842.0], [1082.0, 19352.0], [1074.0, 16840.0], [1038.0, 18513.0], [1034.0, 18516.0], [1030.0, 18523.0], [1026.0, 16577.0], [1050.0, 15191.0], [1046.0, 17531.5], [1042.0, 18511.0], [1070.0, 16840.0], [1066.0, 17680.0], [1142.0, 16819.0], [1138.0, 17004.0], [1134.0, 17004.0], [1118.0, 16829.0], [1098.0, 18091.5], [1094.0, 17514.5], [1102.0, 18090.5], [1206.0, 16880.0], [1210.0, 16969.0], [1186.0, 16803.0], [1190.0, 17005.0], [1202.0, 16973.0], [1154.0, 16813.0], [1178.0, 16936.0], [1174.0, 16987.333333333332], [1170.0, 16989.0], [1194.0, 16977.0], [1274.0, 16903.0], [1278.0, 16917.0], [1230.0, 16949.5], [1222.0, 16965.0], [1218.0, 16961.0], [1238.0, 16873.666666666668], [1262.0, 16910.0], [1258.0, 16909.0], [1250.0, 16917.0], [1334.0, 16764.0], [1318.0, 16814.0], [1282.0, 16912.333333333332], [1294.0, 16672.0], [1310.0, 16794.0], [1306.0, 16746.666666666668], [1302.0, 16808.333333333332], [1326.0, 16744.666666666668], [1394.0, 36052.0], [1378.0, 16705.0], [1390.0, 17339.333333333332], [1398.0, 15805.666666666666], [1358.0, 16581.0], [1354.0, 16536.0], [1350.0, 17451.333333333332], [1374.0, 16694.0], [1366.0, 16706.0], [1462.0, 15609.0], [1442.0, 15820.0], [1446.0, 15634.0], [1470.0, 15808.0], [1458.0, 15815.0], [1410.0, 15664.0], [1434.0, 15773.666666666666], [1430.0, 15859.0], [1426.0, 15866.0], [1522.0, 15738.0], [1506.0, 15775.0], [1510.0, 15773.0], [1514.0, 15668.5], [1502.0, 15765.0], [1482.0, 15798.333333333334], [1486.0, 15797.333333333334], [1498.0, 16934.5], [1494.0, 15782.0], [1490.0, 15786.0], [1518.0, 15744.0], [1546.0, 13133.0], [1550.0, 14705.0], [1598.0, 113.0], [1570.0, 14674.0], [1574.0, 14645.0], [1578.0, 10824.0], [1538.0, 15737.0], [1566.0, 14667.0], [1558.0, 14675.0], [1554.0, 14678.0], [1662.0, 99.0], [1658.0, 100.0], [1654.0, 101.0], [1702.0, 94.0], [1706.0, 117.5], [1698.0, 96.4], [1694.0, 96.0], [1690.0, 96.5], [1686.0, 97.0], [1790.0, 132.14285714285714], [1762.0, 79.83333333333333], [1738.0, 82.0], [1758.0, 80.25], [1754.0, 81.0], [1750.0, 81.0], [1770.0, 136.0], [1766.0, 79.6], [1802.0, 131.25], [1894.0, 108.85714285714285], [1898.0, 108.0], [1902.0, 110.0], [1918.0, 6786.0], [1914.0, 81.0], [1906.0, 107.0], [1978.0, 18485.5], [1970.0, 11055.0], [1982.0, 11048.0], [1954.0, 25929.0], [1958.0, 11057.0], [1962.0, 11055.0], [1974.0, 11292.0], [1930.0, 11184.0], [1926.0, 11065.0], [1922.0, 4832.0], [1950.0, 11181.0], [1946.0, 18495.5], [2034.0, 25897.0], [2018.0, 11278.0], [2026.0, 15581.5], [2038.0, 11025.0], [1998.0, 11044.0], [1994.0, 11044.5], [1986.0, 11210.333333333334], [2014.0, 11038.0], [2006.0, 11042.0], [2164.0, 25357.0], [2116.0, 11127.0], [2124.0, 11112.0], [2132.0, 10499.0], [2148.0, 10736.0], [2052.0, 11009.0], [2108.0, 19745.0], [2092.0, 25816.0], [2196.0, 15573.666666666666], [2188.0, 15097.5], [2228.0, 10649.0], [2220.0, 10660.0], [2244.0, 14925.0], [2388.0, 119.0], [2396.0, 118.57142857142857], [2428.0, 9081.0], [2412.0, 17714.0], [2332.0, 99.0], [2348.0, 95.0], [2340.0, 97.0], [2516.0, 107.0], [2524.0, 115.0], [2556.0, 111.0], [2636.0, 13971.0], [2628.0, 12233.0], [2644.0, 13097.0], [2652.0, 13965.0], [2684.0, 12211.0], [2676.0, 12516.5], [2580.0, 11686.5], [2572.0, 11606.0], [2716.0, 11019.0], [2708.0, 11054.0], [2756.0, 12151.0], [2940.0, 141.0], [2884.0, 12138.0], [2892.0, 12821.5], [2900.0, 13686.0], [2924.0, 13690.0], [2916.0, 13424.0], [2828.0, 12928.666666666666], [2868.0, 12344.333333333334], [2852.0, 11763.0], [2956.0, 125.0], [2964.0, 123.5], [2077.0, 11236.0], [2165.0, 10728.0], [2173.0, 10640.666666666666], [2149.0, 19340.0], [2069.0, 11181.25], [2061.0, 18558.5], [2109.0, 11133.0], [2101.0, 18482.5], [2093.0, 11185.0], [2189.0, 10458.0], [2181.0, 15016.5], [2293.0, 116.87499999999999], [2205.0, 14990.5], [2237.0, 10642.75], [2229.0, 10648.0], [2213.0, 10670.0], [2245.0, 2475.0], [2429.0, 1032.0], [2381.0, 119.0], [2397.0, 118.0], [2421.0, 8978.0], [2405.0, 92.66666666666667], [2509.0, 106.58333333333333], [2557.0, 110.0], [2517.0, 105.80000000000001], [2629.0, 11096.0], [2653.0, 12218.0], [2589.0, 12251.0], [2621.0, 13245.0], [2709.0, 12191.0], [2701.0, 12646.333333333334], [2805.0, 13892.0], [2693.0, 13464.666666666666], [2773.0, 12149.0], [2757.0, 12151.0], [2741.0, 12153.0], [2733.0, 12154.0], [2941.0, 140.0], [2885.0, 12139.0], [2893.0, 11948.0], [2901.0, 11938.0], [2909.0, 13426.0], [2925.0, 11668.0], [2829.0, 13307.0], [2877.0, 12666.4], [2853.0, 11857.25], [2989.0, 121.75], [2957.0, 125.66666666666667], [1083.0, 16836.0], [1087.0, 16837.0], [1075.0, 16839.0], [1055.0, 16844.0], [1031.0, 16564.0], [1039.0, 18513.0], [1047.0, 16181.0], [1071.0, 16840.0], [1059.0, 16844.5], [1143.0, 16816.0], [1147.0, 16815.333333333332], [1139.0, 17003.0], [1103.0, 17012.5], [1095.0, 16835.0], [1091.0, 17015.0], [1135.0, 16954.333333333332], [1123.0, 17005.5], [1115.0, 16830.0], [1203.0, 19306.0], [1191.0, 16977.0], [1187.0, 17009.0], [1207.0, 19306.0], [1167.0, 16988.0], [1163.0, 17017.0], [1159.0, 16884.6], [1183.0, 16909.5], [1179.0, 16985.0], [1171.0, 19323.0], [1199.0, 18142.0], [1271.0, 16908.0], [1279.0, 16874.4], [1267.0, 16933.0], [1247.0, 16928.0], [1243.0, 16843.0], [1239.0, 16754.0], [1263.0, 16932.0], [1255.0, 16910.0], [1331.0, 16726.0], [1343.0, 16745.0], [1315.0, 16803.0], [1319.0, 16711.0], [1311.0, 16616.0], [1291.0, 16851.75], [1287.0, 16865.25], [1295.0, 16802.0], [1307.0, 16798.0], [1303.0, 16797.0], [1327.0, 16786.0], [1407.0, 17014.5], [1403.0, 15872.5], [1387.0, 15876.5], [1391.0, 15875.0], [1395.0, 15876.0], [1359.0, 16701.0], [1347.0, 17178.75], [1367.0, 16726.0], [1459.0, 15714.0], [1467.0, 15740.0], [1471.0, 15783.0], [1443.0, 15841.0], [1447.0, 15631.0], [1455.0, 15811.5], [1423.0, 15751.0], [1419.0, 15867.0], [1439.0, 15854.0], [1435.0, 15857.0], [1427.0, 15852.5], [1531.0, 15752.5], [1515.0, 15771.0], [1475.0, 16947.0], [1479.0, 15703.0], [1495.0, 15576.0], [1595.0, 114.0], [1575.0, 11836.0], [1571.0, 14661.0], [1579.0, 9816.0], [1591.0, 115.0], [1587.0, 115.0], [1551.0, 14704.0], [1543.0, 16314.0], [1567.0, 17000.0], [1563.0, 14685.5], [1559.0, 24775.5], [1555.0, 14676.0], [1583.0, 115.0], [1659.0, 99.2], [1663.0, 98.0], [1619.0, 104.0], [1671.0, 98.25], [1699.0, 95.0], [1707.0, 95.0], [1703.0, 94.0], [1695.0, 96.0], [1691.0, 96.36363636363637], [1687.0, 97.0], [1683.0, 97.33333333333333], [1791.0, 134.0], [1779.0, 134.25], [1759.0, 80.0], [1751.0, 81.0], [1775.0, 134.0], [1767.0, 8806.0], [1799.0, 131.5], [1795.0, 132.0], [1891.0, 109.25], [1895.0, 108.8], [1919.0, 6783.0], [1899.0, 109.25], [1903.0, 109.0], [1915.0, 80.0], [1907.0, 108.0], [1979.0, 11050.0], [1955.0, 16095.0], [1959.0, 11057.5], [1967.0, 18610.0], [1975.0, 25922.0], [1931.0, 25934.0], [1923.0, 4830.0], [1951.0, 11058.0], [1947.0, 11301.0], [1939.0, 10352.0], [2039.0, 11146.5], [2047.0, 15438.0], [2027.0, 11278.0], [2031.0, 16067.333333333334], [2043.0, 11140.5], [2035.0, 18461.0], [1995.0, 11045.0], [1991.0, 19895.0], [1987.0, 19898.0], [2015.0, 11036.0], [2011.0, 11283.0], [2007.0, 11282.5], [2166.0, 10727.0], [2118.0, 15420.5], [2126.0, 13263.5], [2134.0, 10740.0], [2142.0, 10657.333333333334], [2158.0, 13599.0], [2078.0, 10992.5], [2070.0, 11242.0], [2062.0, 11243.0], [2054.0, 19854.0], [2110.0, 11132.0], [2102.0, 11168.0], [2094.0, 10937.0], [2086.0, 11222.666666666666], [2198.0, 15085.5], [2190.0, 10700.0], [2294.0, 117.0], [2206.0, 10684.0], [2238.0, 19239.0], [2214.0, 10668.0], [2246.0, 2472.0], [2430.0, 1031.0], [2398.0, 116.66666666666667], [2422.0, 17700.0], [2414.0, 12057.5], [2334.0, 98.25], [2342.0, 97.33333333333333], [2510.0, 106.16666666666664], [2550.0, 111.33333333333333], [2590.0, 12250.0], [2686.0, 13957.5], [2630.0, 13976.0], [2670.0, 13957.0], [2574.0, 14001.0], [2566.0, 12859.0], [2614.0, 13112.0], [2606.0, 11676.25], [2598.0, 12921.666666666666], [2710.0, 13935.5], [2806.0, 13892.5], [2766.0, 12149.5], [2734.0, 11017.0], [2894.0, 13693.0], [2942.0, 138.5], [2902.0, 11937.0], [2910.0, 11680.666666666666], [2918.0, 11675.5], [2830.0, 13310.0], [2878.0, 12342.833333333334], [2870.0, 11571.5], [2990.0, 118.0], [2159.0, 10488.0], [2175.0, 10719.0], [2127.0, 2689.0], [2135.0, 10740.0], [2167.0, 19332.0], [2151.0, 10734.0], [2079.0, 10992.0], [2063.0, 10999.0], [2087.0, 10962.0], [2295.0, 117.0], [2239.0, 19235.0], [2191.0, 10700.0], [2207.0, 10682.0], [2223.0, 10657.333333333334], [2423.0, 15000.0], [2383.0, 119.0], [2391.0, 120.0], [2335.0, 98.0], [2343.0, 96.0], [2511.0, 106.75], [2551.0, 111.25], [2535.0, 114.0], [2639.0, 12520.333333333334], [2631.0, 13973.0], [2647.0, 13318.0], [2655.0, 13964.0], [2583.0, 11874.0], [2567.0, 11624.0], [2623.0, 12233.0], [2615.0, 11103.0], [2695.0, 12209.0], [2743.0, 12152.0], [2727.0, 11020.0], [2927.0, 11666.0], [2887.0, 12336.896551724138], [2903.0, 13680.0], [2919.0, 11674.0], [2879.0, 11571.0], [2823.0, 11970.666666666666], [2951.0, 125.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[2910.74081836327, 7779.3833932136]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 3000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 3586.8, "minX": 1.68288204E12, "maxY": 138287.5, "series": [{"data": [[1.6828824E12, 5928.566666666667], [1.6828821E12, 134997.63333333333], [1.68288228E12, 120303.2], [1.68288246E12, 5139.583333333333], [1.68288216E12, 138287.5], [1.68288234E12, 69189.88333333333], [1.68288204E12, 6450.983333333334], [1.68288222E12, 112772.88333333333]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.6828824E12, 4569.6], [1.6828821E12, 95180.4], [1.68288228E12, 84747.6], [1.68288246E12, 3586.8], [1.68288216E12, 97910.4], [1.68288234E12, 50626.8], [1.68288204E12, 4527.6], [1.68288222E12, 79111.2]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68288246E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 1808.7551020408177, "minX": 1.68288204E12, "maxY": 98635.9274004684, "series": [{"data": [[1.6828824E12, 24883.099264705892], [1.6828821E12, 5287.456123348029], [1.68288228E12, 4075.305321573688], [1.68288246E12, 98635.9274004684], [1.68288216E12, 10196.87542720438], [1.68288234E12, 5984.841380454631], [1.68288204E12, 1808.7551020408177], [1.68288222E12, 8129.840730516033]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68288246E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 1806.6808905380333, "minX": 1.68288204E12, "maxY": 98635.91334894612, "series": [{"data": [[1.6828824E12, 24883.08823529414], [1.6828821E12, 5213.721057268713], [1.68288228E12, 4061.6306609850385], [1.68288246E12, 98635.91334894612], [1.68288216E12, 9742.254186602842], [1.68288234E12, 5984.831093412977], [1.68288204E12, 1806.6808905380333], [1.68288222E12, 8129.831492885922]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68288246E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.24121779859484765, "minX": 1.68288204E12, "maxY": 6291.304310894055, "series": [{"data": [[1.6828824E12, 0.4393382352941175], [1.6828821E12, 301.6543612334804], [1.68288228E12, 1119.7620652066246], [1.68288246E12, 0.24121779859484765], [1.68288216E12, 709.2247949418984], [1.68288234E12, 296.2314584370327], [1.68288204E12, 1240.2430426716146], [1.68288222E12, 6291.304310894055]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68288246E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 9.0, "minX": 1.68288204E12, "maxY": 220107.0, "series": [{"data": [[1.6828824E12, 75884.0], [1.6828821E12, 65875.0], [1.68288228E12, 220107.0], [1.68288246E12, 100149.0], [1.68288216E12, 101048.0], [1.68288234E12, 128130.0], [1.68288204E12, 4840.0], [1.68288222E12, 156546.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.6828824E12, 51945.5], [1.6828821E12, 11344.800000000001], [1.68288228E12, 9619.0], [1.68288246E12, 100134.2], [1.68288216E12, 12467.0], [1.68288234E12, 16812.2], [1.68288204E12, 4443.0], [1.68288222E12, 8492.1]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.6828824E12, 72298.74999999999], [1.6828821E12, 46957.68], [1.68288228E12, 74306.0], [1.68288246E12, 100148.0], [1.68288216E12, 100123.0], [1.68288234E12, 32153.72], [1.68288204E12, 4837.8], [1.68288222E12, 132248.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.6828824E12, 65574.5], [1.6828821E12, 26015.0], [1.68288228E12, 14332.0], [1.68288246E12, 100146.0], [1.68288216E12, 66992.15], [1.68288234E12, 19356.0], [1.68288204E12, 4579.0], [1.68288222E12, 68078.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.6828824E12, 15647.0], [1.6828821E12, 9.0], [1.68288228E12, 18.0], [1.68288246E12, 72901.0], [1.68288216E12, 18.0], [1.68288234E12, 19.0], [1.68288204E12, 189.0], [1.68288222E12, 10.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.6828824E12, 17549.0], [1.6828821E12, 167.0], [1.68288228E12, 118.0], [1.68288246E12, 100080.0], [1.68288216E12, 6744.5], [1.68288234E12, 130.0], [1.68288204E12, 1242.0], [1.68288222E12, 131.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68288246E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 75.0, "minX": 1.0, "maxY": 110860.0, "series": [{"data": [[2.0, 58002.5], [3.0, 2690.0], [4.0, 56037.0], [5.0, 4889.5], [6.0, 17123.5], [7.0, 29001.5], [9.0, 6129.0], [10.0, 44736.0], [11.0, 37415.5], [12.0, 9390.5], [13.0, 72117.0], [14.0, 5908.0], [16.0, 7630.5], [17.0, 3077.0], [20.0, 101.0], [22.0, 4946.0], [26.0, 100097.5], [30.0, 14677.0], [34.0, 15142.0], [35.0, 127.0], [37.0, 16586.0], [40.0, 9708.0], [44.0, 8708.0], [47.0, 7747.0], [49.0, 100073.0], [50.0, 105.0], [51.0, 69161.0], [56.0, 100034.0], [59.0, 20239.0], [61.0, 3963.0], [65.0, 140.5], [70.0, 103.5], [75.0, 119.0], [81.0, 102.0], [80.0, 113.5], [90.0, 75.0], [89.0, 16732.0], [99.0, 100131.0], [97.0, 5785.0], [96.0, 3539.0], [103.0, 164.0], [105.0, 65918.0], [111.0, 98.0], [113.0, 12372.0], [120.0, 4439.0], [122.0, 101.0], [124.0, 197.0], [131.0, 4253.0], [130.0, 107.0], [136.0, 100095.0], [144.0, 92.0], [148.0, 121.0], [149.0, 109.0], [152.0, 106.0], [153.0, 109.0], [157.0, 107.0], [167.0, 110.0], [163.0, 121.0], [166.0, 15617.5], [165.0, 106.0], [171.0, 114.0], [168.0, 109.0], [170.0, 126.0], [173.0, 1246.0], [172.0, 121.0], [169.0, 130.0], [174.0, 114.0], [181.0, 107.0], [176.0, 122.0], [179.0, 120.0], [188.0, 115.0], [187.0, 99.0], [198.0, 107.0], [192.0, 100103.0], [199.0, 119.0], [194.0, 101.0], [204.0, 121.0], [203.0, 139.0], [214.0, 1238.5], [210.0, 115.0], [212.0, 9826.0], [219.0, 7940.0], [218.0, 94.0], [226.0, 195.0], [234.0, 163.0], [246.0, 130.0], [244.0, 102.0], [245.0, 120.0], [243.0, 16930.0], [250.0, 4209.0], [252.0, 7006.0], [260.0, 84.0], [268.0, 138.0], [272.0, 6659.0], [276.0, 119.0], [286.0, 141.0], [283.0, 206.0], [284.0, 14031.0], [297.0, 104.0], [294.0, 5607.0], [292.0, 90.0], [289.0, 111.0], [312.0, 175.0], [317.0, 91.0], [319.0, 11058.0], [334.0, 108.0], [328.0, 141.0], [332.0, 91.0], [329.0, 115.0], [331.0, 6587.0], [338.0, 124.0], [340.0, 42795.0], [336.0, 108.0], [346.0, 119.0], [345.0, 105.0], [339.0, 124.0], [344.0, 108.0], [357.0, 114.0], [358.0, 10283.0], [353.0, 127.0], [374.0, 9240.0], [371.0, 17421.0], [415.0, 101.0], [414.0, 196.0], [408.0, 6928.0], [418.0, 8607.0], [431.0, 7956.0], [420.0, 6706.0], [432.0, 7831.0], [437.0, 592.0], [436.0, 146.0], [438.0, 193.0], [439.0, 111.0], [469.0, 7939.0], [490.0, 6509.0], [495.0, 86.0], [502.0, 7137.0], [497.0, 152.0], [501.0, 123.0], [524.0, 180.0], [519.0, 5102.0], [520.0, 134.0], [550.0, 100.0], [562.0, 5268.0], [568.0, 8641.0], [627.0, 159.0], [619.0, 9124.0], [615.0, 7957.0], [706.0, 7410.0], [818.0, 163.0], [852.0, 7568.0], [892.0, 182.0], [915.0, 196.0], [1.0, 48826.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[292.0, 44034.0], [199.0, 110860.0], [13.0, 110745.0], [234.0, 68950.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 915.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 100131.0, "series": [{"data": [[2.0, 58002.5], [3.0, 2690.0], [4.0, 56037.0], [5.0, 4889.5], [6.0, 17123.5], [7.0, 29001.5], [9.0, 6129.0], [10.0, 44736.0], [11.0, 37415.5], [12.0, 9390.5], [13.0, 72117.0], [14.0, 5907.5], [16.0, 7630.5], [17.0, 3077.0], [20.0, 101.0], [22.0, 4946.0], [26.0, 100097.5], [30.0, 14677.0], [34.0, 15142.0], [35.0, 127.0], [37.0, 16586.0], [40.0, 9708.0], [44.0, 8708.0], [47.0, 7747.0], [49.0, 100073.0], [50.0, 105.0], [51.0, 69161.0], [56.0, 100033.5], [59.0, 20239.0], [61.0, 3962.0], [65.0, 140.5], [70.0, 103.5], [75.0, 119.0], [81.0, 102.0], [80.0, 113.5], [90.0, 75.0], [89.0, 16732.0], [99.0, 100131.0], [97.0, 5785.0], [96.0, 3539.0], [103.0, 164.0], [105.0, 65918.0], [111.0, 98.0], [113.0, 12371.0], [120.0, 4439.0], [122.0, 101.0], [124.0, 197.0], [131.0, 4253.0], [130.0, 107.0], [136.0, 100095.0], [144.0, 92.0], [148.0, 121.0], [149.0, 109.0], [152.0, 106.0], [153.0, 109.0], [157.0, 107.0], [167.0, 110.0], [163.0, 121.0], [166.0, 15617.5], [165.0, 106.0], [171.0, 114.0], [168.0, 109.0], [170.0, 126.0], [173.0, 1246.0], [172.0, 121.0], [169.0, 130.0], [174.0, 114.0], [181.0, 107.0], [176.0, 122.0], [179.0, 120.0], [188.0, 115.0], [187.0, 99.0], [198.0, 107.0], [192.0, 100103.0], [199.0, 119.0], [194.0, 101.0], [204.0, 121.0], [203.0, 139.0], [214.0, 1232.0], [210.0, 115.0], [212.0, 9826.0], [219.0, 7940.0], [218.0, 94.0], [226.0, 195.0], [234.0, 163.0], [246.0, 130.0], [244.0, 102.0], [245.0, 120.0], [243.0, 16930.0], [250.0, 4209.0], [252.0, 7006.0], [260.0, 84.0], [268.0, 138.0], [272.0, 6659.0], [276.0, 119.0], [286.0, 141.0], [283.0, 206.0], [284.0, 14031.0], [297.0, 104.0], [294.0, 5607.0], [292.0, 90.0], [289.0, 111.0], [312.0, 175.0], [317.0, 91.0], [319.0, 11058.0], [334.0, 108.0], [328.0, 141.0], [332.0, 91.0], [329.0, 115.0], [331.0, 6587.0], [338.0, 124.0], [340.0, 42795.0], [336.0, 108.0], [346.0, 119.0], [345.0, 105.0], [339.0, 124.0], [344.0, 108.0], [357.0, 114.0], [358.0, 10283.0], [353.0, 127.0], [374.0, 9240.0], [371.0, 17421.0], [415.0, 101.0], [414.0, 196.0], [408.0, 6928.0], [418.0, 8607.0], [431.0, 7956.0], [420.0, 6706.0], [432.0, 7831.0], [437.0, 592.0], [436.0, 146.0], [438.0, 193.0], [439.0, 111.0], [469.0, 7939.0], [490.0, 6509.0], [495.0, 86.0], [502.0, 7137.0], [497.0, 152.0], [501.0, 123.0], [524.0, 180.0], [519.0, 5102.0], [520.0, 134.0], [550.0, 100.0], [562.0, 5268.0], [568.0, 8641.0], [627.0, 159.0], [619.0, 9124.0], [615.0, 7957.0], [706.0, 7410.0], [818.0, 163.0], [852.0, 7568.0], [892.0, 182.0], [915.0, 196.0], [1.0, 48826.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[292.0, 0.0], [199.0, 0.0], [13.0, 0.0], [234.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 915.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 41.75, "minX": 1.68288204E12, "maxY": 192.05, "series": [{"data": [[1.6828821E12, 192.05], [1.68288228E12, 169.78333333333333], [1.68288216E12, 172.56666666666666], [1.68288234E12, 108.55], [1.68288204E12, 41.75], [1.68288222E12, 150.3]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68288234E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.68288204E12, "maxY": 194.26666666666668, "series": [{"data": [[1.6828824E12, 9.066666666666666], [1.6828821E12, 188.85], [1.68288228E12, 168.15], [1.68288246E12, 7.116666666666666], [1.68288216E12, 194.26666666666668], [1.68288234E12, 100.45], [1.68288204E12, 8.983333333333333], [1.68288222E12, 156.96666666666667]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.6828821E12, 0.31666666666666665], [1.68288228E12, 0.03333333333333333], [1.68288216E12, 0.8]], "isOverall": false, "label": "Non HTTP response code: java.net.SocketException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68288246E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.68288204E12, "maxY": 194.26666666666668, "series": [{"data": [[1.6828824E12, 9.066666666666666], [1.6828821E12, 188.85], [1.68288228E12, 168.15], [1.68288246E12, 7.116666666666666], [1.68288216E12, 194.26666666666668], [1.68288234E12, 100.45], [1.68288204E12, 8.983333333333333], [1.68288222E12, 156.96666666666667]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.6828821E12, 0.31666666666666665], [1.68288228E12, 0.03333333333333333], [1.68288216E12, 0.8]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68288246E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.68288204E12, "maxY": 194.26666666666668, "series": [{"data": [[1.6828824E12, 9.066666666666666], [1.6828821E12, 188.85], [1.68288228E12, 168.15], [1.68288246E12, 7.116666666666666], [1.68288216E12, 194.26666666666668], [1.68288234E12, 100.45], [1.68288204E12, 8.983333333333333], [1.68288222E12, 156.96666666666667]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.6828821E12, 0.31666666666666665], [1.68288228E12, 0.03333333333333333], [1.68288216E12, 0.8]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68288246E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

