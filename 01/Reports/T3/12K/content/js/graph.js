/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 8.0, "minX": 0.0, "maxY": 229131.0, "series": [{"data": [[0.0, 8.0], [0.1, 28.0], [0.2, 34.0], [0.3, 38.0], [0.4, 44.0], [0.5, 46.0], [0.6, 48.0], [0.7, 50.0], [0.8, 51.0], [0.9, 53.0], [1.0, 54.0], [1.1, 55.0], [1.2, 56.0], [1.3, 58.0], [1.4, 59.0], [1.5, 60.0], [1.6, 62.0], [1.7, 63.0], [1.8, 65.0], [1.9, 66.0], [2.0, 68.0], [2.1, 69.0], [2.2, 69.0], [2.3, 70.0], [2.4, 70.0], [2.5, 71.0], [2.6, 72.0], [2.7, 73.0], [2.8, 74.0], [2.9, 75.0], [3.0, 76.0], [3.1, 77.0], [3.2, 78.0], [3.3, 79.0], [3.4, 80.0], [3.5, 81.0], [3.6, 82.0], [3.7, 82.0], [3.8, 83.0], [3.9, 84.0], [4.0, 85.0], [4.1, 86.0], [4.2, 87.0], [4.3, 87.0], [4.4, 88.0], [4.5, 89.0], [4.6, 90.0], [4.7, 91.0], [4.8, 91.0], [4.9, 93.0], [5.0, 93.0], [5.1, 94.0], [5.2, 94.0], [5.3, 95.0], [5.4, 96.0], [5.5, 96.0], [5.6, 97.0], [5.7, 97.0], [5.8, 98.0], [5.9, 99.0], [6.0, 99.0], [6.1, 100.0], [6.2, 100.0], [6.3, 101.0], [6.4, 101.0], [6.5, 102.0], [6.6, 103.0], [6.7, 103.0], [6.8, 104.0], [6.9, 105.0], [7.0, 105.0], [7.1, 106.0], [7.2, 106.0], [7.3, 107.0], [7.4, 108.0], [7.5, 108.0], [7.6, 109.0], [7.7, 109.0], [7.8, 110.0], [7.9, 110.0], [8.0, 110.0], [8.1, 111.0], [8.2, 111.0], [8.3, 112.0], [8.4, 113.0], [8.5, 113.0], [8.6, 114.0], [8.7, 114.0], [8.8, 115.0], [8.9, 115.0], [9.0, 116.0], [9.1, 116.0], [9.2, 117.0], [9.3, 117.0], [9.4, 118.0], [9.5, 118.0], [9.6, 119.0], [9.7, 120.0], [9.8, 120.0], [9.9, 121.0], [10.0, 121.0], [10.1, 122.0], [10.2, 122.0], [10.3, 122.0], [10.4, 123.0], [10.5, 123.0], [10.6, 123.0], [10.7, 124.0], [10.8, 124.0], [10.9, 125.0], [11.0, 125.0], [11.1, 126.0], [11.2, 126.0], [11.3, 127.0], [11.4, 127.0], [11.5, 128.0], [11.6, 128.0], [11.7, 129.0], [11.8, 130.0], [11.9, 131.0], [12.0, 132.0], [12.1, 132.0], [12.2, 133.0], [12.3, 133.0], [12.4, 134.0], [12.5, 134.0], [12.6, 135.0], [12.7, 135.0], [12.8, 136.0], [12.9, 136.0], [13.0, 137.0], [13.1, 137.0], [13.2, 138.0], [13.3, 138.0], [13.4, 139.0], [13.5, 139.0], [13.6, 140.0], [13.7, 141.0], [13.8, 141.0], [13.9, 142.0], [14.0, 142.0], [14.1, 143.0], [14.2, 144.0], [14.3, 145.0], [14.4, 145.0], [14.5, 146.0], [14.6, 146.0], [14.7, 146.0], [14.8, 147.0], [14.9, 147.0], [15.0, 148.0], [15.1, 149.0], [15.2, 150.0], [15.3, 150.0], [15.4, 151.0], [15.5, 152.0], [15.6, 152.0], [15.7, 153.0], [15.8, 153.0], [15.9, 154.0], [16.0, 154.0], [16.1, 155.0], [16.2, 155.0], [16.3, 156.0], [16.4, 156.0], [16.5, 156.0], [16.6, 156.0], [16.7, 157.0], [16.8, 157.0], [16.9, 158.0], [17.0, 158.0], [17.1, 159.0], [17.2, 159.0], [17.3, 160.0], [17.4, 160.0], [17.5, 161.0], [17.6, 162.0], [17.7, 162.0], [17.8, 163.0], [17.9, 163.0], [18.0, 164.0], [18.1, 164.0], [18.2, 165.0], [18.3, 165.0], [18.4, 165.0], [18.5, 166.0], [18.6, 166.0], [18.7, 167.0], [18.8, 167.0], [18.9, 167.0], [19.0, 168.0], [19.1, 168.0], [19.2, 168.0], [19.3, 169.0], [19.4, 169.0], [19.5, 169.0], [19.6, 169.0], [19.7, 170.0], [19.8, 170.0], [19.9, 170.0], [20.0, 170.0], [20.1, 170.0], [20.2, 171.0], [20.3, 171.0], [20.4, 171.0], [20.5, 171.0], [20.6, 172.0], [20.7, 172.0], [20.8, 172.0], [20.9, 172.0], [21.0, 173.0], [21.1, 173.0], [21.2, 173.0], [21.3, 174.0], [21.4, 175.0], [21.5, 175.0], [21.6, 176.0], [21.7, 176.0], [21.8, 176.0], [21.9, 177.0], [22.0, 177.0], [22.1, 178.0], [22.2, 179.0], [22.3, 179.0], [22.4, 180.0], [22.5, 180.0], [22.6, 181.0], [22.7, 181.0], [22.8, 181.0], [22.9, 182.0], [23.0, 182.0], [23.1, 182.0], [23.2, 183.0], [23.3, 183.0], [23.4, 183.0], [23.5, 183.0], [23.6, 184.0], [23.7, 184.0], [23.8, 184.0], [23.9, 184.0], [24.0, 185.0], [24.1, 185.0], [24.2, 185.0], [24.3, 185.0], [24.4, 185.0], [24.5, 186.0], [24.6, 186.0], [24.7, 186.0], [24.8, 186.0], [24.9, 186.0], [25.0, 187.0], [25.1, 187.0], [25.2, 187.0], [25.3, 187.0], [25.4, 187.0], [25.5, 188.0], [25.6, 188.0], [25.7, 188.0], [25.8, 188.0], [25.9, 188.0], [26.0, 189.0], [26.1, 189.0], [26.2, 189.0], [26.3, 190.0], [26.4, 190.0], [26.5, 191.0], [26.6, 191.0], [26.7, 191.0], [26.8, 192.0], [26.9, 192.0], [27.0, 193.0], [27.1, 193.0], [27.2, 193.0], [27.3, 194.0], [27.4, 194.0], [27.5, 194.0], [27.6, 195.0], [27.7, 195.0], [27.8, 195.0], [27.9, 195.0], [28.0, 196.0], [28.1, 196.0], [28.2, 196.0], [28.3, 196.0], [28.4, 197.0], [28.5, 197.0], [28.6, 197.0], [28.7, 197.0], [28.8, 197.0], [28.9, 198.0], [29.0, 198.0], [29.1, 198.0], [29.2, 198.0], [29.3, 199.0], [29.4, 199.0], [29.5, 199.0], [29.6, 200.0], [29.7, 200.0], [29.8, 200.0], [29.9, 200.0], [30.0, 201.0], [30.1, 201.0], [30.2, 201.0], [30.3, 201.0], [30.4, 201.0], [30.5, 202.0], [30.6, 202.0], [30.7, 202.0], [30.8, 202.0], [30.9, 202.0], [31.0, 202.0], [31.1, 203.0], [31.2, 203.0], [31.3, 203.0], [31.4, 203.0], [31.5, 203.0], [31.6, 204.0], [31.7, 204.0], [31.8, 204.0], [31.9, 204.0], [32.0, 205.0], [32.1, 205.0], [32.2, 205.0], [32.3, 205.0], [32.4, 206.0], [32.5, 206.0], [32.6, 206.0], [32.7, 206.0], [32.8, 207.0], [32.9, 207.0], [33.0, 207.0], [33.1, 207.0], [33.2, 208.0], [33.3, 208.0], [33.4, 208.0], [33.5, 208.0], [33.6, 208.0], [33.7, 208.0], [33.8, 208.0], [33.9, 209.0], [34.0, 209.0], [34.1, 209.0], [34.2, 209.0], [34.3, 209.0], [34.4, 209.0], [34.5, 209.0], [34.6, 210.0], [34.7, 210.0], [34.8, 210.0], [34.9, 210.0], [35.0, 210.0], [35.1, 211.0], [35.2, 211.0], [35.3, 211.0], [35.4, 211.0], [35.5, 211.0], [35.6, 211.0], [35.7, 212.0], [35.8, 212.0], [35.9, 212.0], [36.0, 212.0], [36.1, 212.0], [36.2, 213.0], [36.3, 213.0], [36.4, 213.0], [36.5, 213.0], [36.6, 213.0], [36.7, 214.0], [36.8, 214.0], [36.9, 214.0], [37.0, 214.0], [37.1, 214.0], [37.2, 214.0], [37.3, 214.0], [37.4, 215.0], [37.5, 215.0], [37.6, 215.0], [37.7, 215.0], [37.8, 215.0], [37.9, 215.0], [38.0, 216.0], [38.1, 216.0], [38.2, 216.0], [38.3, 216.0], [38.4, 216.0], [38.5, 217.0], [38.6, 217.0], [38.7, 217.0], [38.8, 217.0], [38.9, 217.0], [39.0, 217.0], [39.1, 218.0], [39.2, 218.0], [39.3, 218.0], [39.4, 218.0], [39.5, 218.0], [39.6, 218.0], [39.7, 219.0], [39.8, 219.0], [39.9, 219.0], [40.0, 219.0], [40.1, 219.0], [40.2, 219.0], [40.3, 220.0], [40.4, 220.0], [40.5, 220.0], [40.6, 220.0], [40.7, 220.0], [40.8, 220.0], [40.9, 221.0], [41.0, 221.0], [41.1, 221.0], [41.2, 221.0], [41.3, 221.0], [41.4, 221.0], [41.5, 221.0], [41.6, 222.0], [41.7, 222.0], [41.8, 222.0], [41.9, 222.0], [42.0, 222.0], [42.1, 222.0], [42.2, 223.0], [42.3, 223.0], [42.4, 223.0], [42.5, 223.0], [42.6, 223.0], [42.7, 223.0], [42.8, 224.0], [42.9, 224.0], [43.0, 224.0], [43.1, 224.0], [43.2, 224.0], [43.3, 224.0], [43.4, 224.0], [43.5, 224.0], [43.6, 224.0], [43.7, 225.0], [43.8, 225.0], [43.9, 225.0], [44.0, 225.0], [44.1, 225.0], [44.2, 225.0], [44.3, 225.0], [44.4, 225.0], [44.5, 226.0], [44.6, 226.0], [44.7, 226.0], [44.8, 226.0], [44.9, 226.0], [45.0, 226.0], [45.1, 226.0], [45.2, 226.0], [45.3, 227.0], [45.4, 227.0], [45.5, 227.0], [45.6, 227.0], [45.7, 227.0], [45.8, 227.0], [45.9, 227.0], [46.0, 227.0], [46.1, 227.0], [46.2, 228.0], [46.3, 228.0], [46.4, 228.0], [46.5, 228.0], [46.6, 228.0], [46.7, 228.0], [46.8, 228.0], [46.9, 228.0], [47.0, 229.0], [47.1, 229.0], [47.2, 229.0], [47.3, 229.0], [47.4, 229.0], [47.5, 229.0], [47.6, 229.0], [47.7, 229.0], [47.8, 230.0], [47.9, 230.0], [48.0, 230.0], [48.1, 230.0], [48.2, 230.0], [48.3, 230.0], [48.4, 230.0], [48.5, 230.0], [48.6, 231.0], [48.7, 231.0], [48.8, 231.0], [48.9, 231.0], [49.0, 231.0], [49.1, 231.0], [49.2, 231.0], [49.3, 231.0], [49.4, 231.0], [49.5, 231.0], [49.6, 232.0], [49.7, 232.0], [49.8, 232.0], [49.9, 232.0], [50.0, 232.0], [50.1, 232.0], [50.2, 232.0], [50.3, 233.0], [50.4, 233.0], [50.5, 233.0], [50.6, 233.0], [50.7, 233.0], [50.8, 233.0], [50.9, 233.0], [51.0, 234.0], [51.1, 234.0], [51.2, 234.0], [51.3, 234.0], [51.4, 234.0], [51.5, 234.0], [51.6, 234.0], [51.7, 235.0], [51.8, 235.0], [51.9, 235.0], [52.0, 235.0], [52.1, 235.0], [52.2, 235.0], [52.3, 235.0], [52.4, 236.0], [52.5, 236.0], [52.6, 236.0], [52.7, 236.0], [52.8, 236.0], [52.9, 236.0], [53.0, 236.0], [53.1, 236.0], [53.2, 237.0], [53.3, 237.0], [53.4, 237.0], [53.5, 237.0], [53.6, 237.0], [53.7, 237.0], [53.8, 237.0], [53.9, 238.0], [54.0, 238.0], [54.1, 238.0], [54.2, 238.0], [54.3, 238.0], [54.4, 238.0], [54.5, 238.0], [54.6, 238.0], [54.7, 239.0], [54.8, 239.0], [54.9, 239.0], [55.0, 239.0], [55.1, 239.0], [55.2, 239.0], [55.3, 239.0], [55.4, 239.0], [55.5, 240.0], [55.6, 240.0], [55.7, 240.0], [55.8, 240.0], [55.9, 240.0], [56.0, 240.0], [56.1, 240.0], [56.2, 240.0], [56.3, 240.0], [56.4, 240.0], [56.5, 241.0], [56.6, 241.0], [56.7, 241.0], [56.8, 241.0], [56.9, 241.0], [57.0, 241.0], [57.1, 241.0], [57.2, 241.0], [57.3, 242.0], [57.4, 242.0], [57.5, 242.0], [57.6, 242.0], [57.7, 242.0], [57.8, 242.0], [57.9, 243.0], [58.0, 243.0], [58.1, 243.0], [58.2, 243.0], [58.3, 243.0], [58.4, 244.0], [58.5, 244.0], [58.6, 244.0], [58.7, 244.0], [58.8, 245.0], [58.9, 245.0], [59.0, 245.0], [59.1, 246.0], [59.2, 247.0], [59.3, 247.0], [59.4, 248.0], [59.5, 248.0], [59.6, 249.0], [59.7, 249.0], [59.8, 250.0], [59.9, 250.0], [60.0, 250.0], [60.1, 250.0], [60.2, 251.0], [60.3, 251.0], [60.4, 251.0], [60.5, 251.0], [60.6, 252.0], [60.7, 252.0], [60.8, 252.0], [60.9, 252.0], [61.0, 252.0], [61.1, 252.0], [61.2, 252.0], [61.3, 253.0], [61.4, 253.0], [61.5, 253.0], [61.6, 253.0], [61.7, 253.0], [61.8, 254.0], [61.9, 254.0], [62.0, 254.0], [62.1, 254.0], [62.2, 254.0], [62.3, 254.0], [62.4, 255.0], [62.5, 255.0], [62.6, 255.0], [62.7, 255.0], [62.8, 255.0], [62.9, 256.0], [63.0, 256.0], [63.1, 256.0], [63.2, 256.0], [63.3, 257.0], [63.4, 257.0], [63.5, 257.0], [63.6, 258.0], [63.7, 258.0], [63.8, 258.0], [63.9, 259.0], [64.0, 259.0], [64.1, 260.0], [64.2, 260.0], [64.3, 261.0], [64.4, 261.0], [64.5, 262.0], [64.6, 262.0], [64.7, 263.0], [64.8, 263.0], [64.9, 263.0], [65.0, 264.0], [65.1, 264.0], [65.2, 264.0], [65.3, 265.0], [65.4, 265.0], [65.5, 266.0], [65.6, 267.0], [65.7, 268.0], [65.8, 268.0], [65.9, 269.0], [66.0, 270.0], [66.1, 271.0], [66.2, 272.0], [66.3, 273.0], [66.4, 274.0], [66.5, 275.0], [66.6, 275.0], [66.7, 276.0], [66.8, 278.0], [66.9, 281.0], [67.0, 281.0], [67.1, 282.0], [67.2, 283.0], [67.3, 287.0], [67.4, 288.0], [67.5, 290.0], [67.6, 291.0], [67.7, 292.0], [67.8, 296.0], [67.9, 302.0], [68.0, 308.0], [68.1, 314.0], [68.2, 316.0], [68.3, 317.0], [68.4, 317.0], [68.5, 317.0], [68.6, 318.0], [68.7, 318.0], [68.8, 319.0], [68.9, 319.0], [69.0, 319.0], [69.1, 320.0], [69.2, 320.0], [69.3, 321.0], [69.4, 321.0], [69.5, 322.0], [69.6, 322.0], [69.7, 323.0], [69.8, 323.0], [69.9, 324.0], [70.0, 326.0], [70.1, 330.0], [70.2, 333.0], [70.3, 336.0], [70.4, 337.0], [70.5, 338.0], [70.6, 339.0], [70.7, 339.0], [70.8, 340.0], [70.9, 341.0], [71.0, 341.0], [71.1, 342.0], [71.2, 342.0], [71.3, 342.0], [71.4, 343.0], [71.5, 345.0], [71.6, 346.0], [71.7, 348.0], [71.8, 352.0], [71.9, 353.0], [72.0, 354.0], [72.1, 355.0], [72.2, 356.0], [72.3, 357.0], [72.4, 358.0], [72.5, 359.0], [72.6, 360.0], [72.7, 363.0], [72.8, 364.0], [72.9, 365.0], [73.0, 366.0], [73.1, 367.0], [73.2, 368.0], [73.3, 371.0], [73.4, 371.0], [73.5, 372.0], [73.6, 373.0], [73.7, 375.0], [73.8, 377.0], [73.9, 378.0], [74.0, 378.0], [74.1, 379.0], [74.2, 379.0], [74.3, 379.0], [74.4, 380.0], [74.5, 381.0], [74.6, 382.0], [74.7, 383.0], [74.8, 386.0], [74.9, 388.0], [75.0, 389.0], [75.1, 389.0], [75.2, 390.0], [75.3, 390.0], [75.4, 394.0], [75.5, 398.0], [75.6, 400.0], [75.7, 401.0], [75.8, 402.0], [75.9, 406.0], [76.0, 408.0], [76.1, 414.0], [76.2, 414.0], [76.3, 415.0], [76.4, 417.0], [76.5, 420.0], [76.6, 424.0], [76.7, 426.0], [76.8, 429.0], [76.9, 436.0], [77.0, 442.0], [77.1, 444.0], [77.2, 445.0], [77.3, 446.0], [77.4, 447.0], [77.5, 448.0], [77.6, 449.0], [77.7, 452.0], [77.8, 460.0], [77.9, 463.0], [78.0, 464.0], [78.1, 464.0], [78.2, 466.0], [78.3, 468.0], [78.4, 470.0], [78.5, 476.0], [78.6, 478.0], [78.7, 480.0], [78.8, 484.0], [78.9, 486.0], [79.0, 492.0], [79.1, 497.0], [79.2, 503.0], [79.3, 507.0], [79.4, 508.0], [79.5, 509.0], [79.6, 514.0], [79.7, 516.0], [79.8, 518.0], [79.9, 521.0], [80.0, 526.0], [80.1, 527.0], [80.2, 529.0], [80.3, 532.0], [80.4, 533.0], [80.5, 534.0], [80.6, 552.0], [80.7, 553.0], [80.8, 554.0], [80.9, 560.0], [81.0, 586.0], [81.1, 612.0], [81.2, 615.0], [81.3, 626.0], [81.4, 629.0], [81.5, 642.0], [81.6, 644.0], [81.7, 661.0], [81.8, 713.0], [81.9, 756.0], [82.0, 843.0], [82.1, 980.0], [82.2, 1039.0], [82.3, 1047.0], [82.4, 1055.0], [82.5, 1067.0], [82.6, 1085.0], [82.7, 1097.0], [82.8, 1119.0], [82.9, 1160.0], [83.0, 1231.0], [83.1, 1258.0], [83.2, 1275.0], [83.3, 1341.0], [83.4, 1392.0], [83.5, 1476.0], [83.6, 1604.0], [83.7, 1684.0], [83.8, 1803.0], [83.9, 1824.0], [84.0, 1970.0], [84.1, 2086.0], [84.2, 2148.0], [84.3, 2213.0], [84.4, 2256.0], [84.5, 2418.0], [84.6, 2501.0], [84.7, 2667.0], [84.8, 2835.0], [84.9, 3075.0], [85.0, 3117.0], [85.1, 3203.0], [85.2, 3272.0], [85.3, 3390.0], [85.4, 3482.0], [85.5, 3580.0], [85.6, 3622.0], [85.7, 3759.0], [85.8, 3898.0], [85.9, 4094.0], [86.0, 4376.0], [86.1, 4485.0], [86.2, 4714.0], [86.3, 4935.0], [86.4, 5442.0], [86.5, 5672.0], [86.6, 5948.0], [86.7, 6599.0], [86.8, 7166.0], [86.9, 7426.0], [87.0, 7477.0], [87.1, 7481.0], [87.2, 7500.0], [87.3, 7749.0], [87.4, 7783.0], [87.5, 7805.0], [87.6, 7818.0], [87.7, 7827.0], [87.8, 7890.0], [87.9, 7980.0], [88.0, 8219.0], [88.1, 8282.0], [88.2, 8305.0], [88.3, 8430.0], [88.4, 8454.0], [88.5, 8462.0], [88.6, 8809.0], [88.7, 9152.0], [88.8, 9362.0], [88.9, 9645.0], [89.0, 9719.0], [89.1, 9782.0], [89.2, 9841.0], [89.3, 9851.0], [89.4, 9862.0], [89.5, 9887.0], [89.6, 9889.0], [89.7, 9890.0], [89.8, 10086.0], [89.9, 10134.0], [90.0, 10145.0], [90.1, 10211.0], [90.2, 10255.0], [90.3, 10271.0], [90.4, 10441.0], [90.5, 10507.0], [90.6, 10534.0], [90.7, 10548.0], [90.8, 10587.0], [90.9, 10602.0], [91.0, 10631.0], [91.1, 10640.0], [91.2, 10644.0], [91.3, 10647.0], [91.4, 10677.0], [91.5, 10691.0], [91.6, 10692.0], [91.7, 10709.0], [91.8, 10768.0], [91.9, 10814.0], [92.0, 10815.0], [92.1, 10838.0], [92.2, 10985.0], [92.3, 11053.0], [92.4, 11266.0], [92.5, 11299.0], [92.6, 11529.0], [92.7, 11837.0], [92.8, 11845.0], [92.9, 11857.0], [93.0, 11883.0], [93.1, 11924.0], [93.2, 11968.0], [93.3, 12091.0], [93.4, 12094.0], [93.5, 12129.0], [93.6, 12666.0], [93.7, 12997.0], [93.8, 13137.0], [93.9, 13535.0], [94.0, 13742.0], [94.1, 13917.0], [94.2, 13975.0], [94.3, 14134.0], [94.4, 14172.0], [94.5, 14175.0], [94.6, 14310.0], [94.7, 14620.0], [94.8, 15041.0], [94.9, 15049.0], [95.0, 15159.0], [95.1, 16097.0], [95.2, 16211.0], [95.3, 16697.0], [95.4, 17294.0], [95.5, 17783.0], [95.6, 18437.0], [95.7, 18996.0], [95.8, 20523.0], [95.9, 21485.0], [96.0, 24442.0], [96.1, 25890.0], [96.2, 26546.0], [96.3, 28808.0], [96.4, 30172.0], [96.5, 31871.0], [96.6, 33273.0], [96.7, 34757.0], [96.8, 39309.0], [96.9, 41634.0], [97.0, 44537.0], [97.1, 49363.0], [97.2, 54995.0], [97.3, 63420.0], [97.4, 64341.0], [97.5, 64933.0], [97.6, 66104.0], [97.7, 67186.0], [97.8, 69100.0], [97.9, 71235.0], [98.0, 74484.0], [98.1, 75335.0], [98.2, 80978.0], [98.3, 92005.0], [98.4, 96831.0], [98.5, 100025.0], [98.6, 100056.0], [98.7, 100082.0], [98.8, 100103.0], [98.9, 100124.0], [99.0, 100152.0], [99.1, 100193.0], [99.2, 100423.0], [99.3, 101252.0], [99.4, 127431.0], [99.5, 128858.0], [99.6, 129271.0], [99.7, 133220.0], [99.8, 136226.0], [99.9, 144024.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 46150.0, "series": [{"data": [[0.0, 7285.0], [144800.0, 1.0], [132900.0, 17.0], [136100.0, 23.0], [139300.0, 1.0], [164900.0, 2.0], [68300.0, 3.0], [71500.0, 1.0], [69900.0, 2.0], [76300.0, 2.0], [77900.0, 6.0], [79500.0, 2.0], [81100.0, 1.0], [87500.0, 1.0], [100300.0, 9.0], [98700.0, 42.0], [127500.0, 9.0], [129100.0, 16.0], [100.0, 28217.0], [34500.0, 29.0], [131500.0, 1.0], [144300.0, 1.0], [35300.0, 3.0], [38500.0, 1.0], [39300.0, 24.0], [41700.0, 6.0], [42500.0, 1.0], [43300.0, 2.0], [50500.0, 2.0], [200.0, 46150.0], [52900.0, 1.0], [53700.0, 5.0], [54500.0, 2.0], [58500.0, 2.0], [60100.0, 2.0], [60900.0, 2.0], [63300.0, 4.0], [64900.0, 78.0], [64100.0, 47.0], [65800.0, 2.0], [69000.0, 42.0], [70600.0, 2.0], [300.0, 9270.0], [73800.0, 8.0], [75400.0, 3.0], [78600.0, 28.0], [80200.0, 2.0], [85000.0, 2.0], [88200.0, 1.0], [101000.0, 2.0], [400.0, 4278.0], [102600.0, 1.0], [500.0, 2359.0], [128200.0, 2.0], [600.0, 866.0], [164400.0, 25.0], [700.0, 175.0], [800.0, 150.0], [900.0, 56.0], [1000.0, 729.0], [1100.0, 314.0], [1200.0, 327.0], [1300.0, 207.0], [1400.0, 127.0], [1500.0, 77.0], [1600.0, 136.0], [1700.0, 115.0], [1800.0, 182.0], [1900.0, 114.0], [2000.0, 89.0], [2100.0, 198.0], [136500.0, 8.0], [2200.0, 170.0], [2300.0, 71.0], [2400.0, 138.0], [2500.0, 81.0], [158900.0, 1.0], [2600.0, 84.0], [2700.0, 56.0], [2800.0, 69.0], [2900.0, 51.0], [3000.0, 113.0], [3100.0, 141.0], [3200.0, 180.0], [3300.0, 90.0], [3400.0, 104.0], [3500.0, 191.0], [3600.0, 147.0], [3700.0, 44.0], [3800.0, 114.0], [3900.0, 48.0], [4000.0, 74.0], [4200.0, 37.0], [4300.0, 45.0], [4100.0, 38.0], [68100.0, 2.0], [66500.0, 3.0], [4400.0, 103.0], [4500.0, 7.0], [4600.0, 103.0], [72900.0, 5.0], [69700.0, 2.0], [74500.0, 8.0], [4700.0, 72.0], [4800.0, 51.0], [76100.0, 12.0], [4900.0, 11.0], [5000.0, 13.0], [5100.0, 17.0], [80900.0, 2.0], [82500.0, 1.0], [5300.0, 34.0], [5200.0, 26.0], [5500.0, 27.0], [5600.0, 42.0], [5400.0, 92.0], [5700.0, 64.0], [5800.0, 19.0], [90500.0, 1.0], [6000.0, 44.0], [6100.0, 2.0], [5900.0, 23.0], [98500.0, 2.0], [100100.0, 418.0], [6200.0, 49.0], [6300.0, 8.0], [6600.0, 24.0], [6400.0, 11.0], [6500.0, 5.0], [103300.0, 1.0], [6700.0, 39.0], [6800.0, 17.0], [6900.0, 20.0], [7000.0, 7.0], [7100.0, 26.0], [7400.0, 359.0], [7300.0, 11.0], [7200.0, 91.0], [7600.0, 27.0], [7500.0, 74.0], [7800.0, 471.0], [7900.0, 150.0], [7700.0, 163.0], [8100.0, 36.0], [8000.0, 41.0], [130500.0, 1.0], [128900.0, 36.0], [8200.0, 227.0], [8600.0, 61.0], [8400.0, 311.0], [9200.0, 64.0], [9000.0, 42.0], [8800.0, 34.0], [143800.0, 3.0], [147000.0, 1.0], [9600.0, 131.0], [9400.0, 27.0], [10200.0, 369.0], [9800.0, 739.0], [10000.0, 43.0], [10600.0, 934.0], [10400.0, 138.0], [11200.0, 211.0], [11000.0, 107.0], [10800.0, 268.0], [11600.0, 2.0], [11400.0, 18.0], [11800.0, 491.0], [12000.0, 204.0], [12600.0, 41.0], [12400.0, 11.0], [13200.0, 10.0], [13000.0, 83.0], [12800.0, 5.0], [13400.0, 84.0], [13800.0, 19.0], [13600.0, 87.0], [14000.0, 5.0], [14200.0, 45.0], [14600.0, 69.0], [14400.0, 4.0], [14800.0, 4.0], [15200.0, 19.0], [15000.0, 266.0], [15400.0, 9.0], [15600.0, 14.0], [15800.0, 11.0], [16000.0, 17.0], [16200.0, 71.0], [16400.0, 36.0], [17200.0, 20.0], [16800.0, 32.0], [18400.0, 73.0], [18000.0, 10.0], [17600.0, 8.0], [18800.0, 53.0], [19200.0, 1.0], [20400.0, 23.0], [19600.0, 6.0], [20000.0, 2.0], [21200.0, 41.0], [22400.0, 2.0], [23200.0, 4.0], [22800.0, 7.0], [24400.0, 28.0], [23600.0, 4.0], [24800.0, 10.0], [25200.0, 10.0], [26400.0, 41.0], [25600.0, 2.0], [26800.0, 4.0], [27600.0, 1.0], [27200.0, 2.0], [28800.0, 62.0], [29200.0, 2.0], [30400.0, 10.0], [30000.0, 9.0], [31200.0, 10.0], [31600.0, 4.0], [32000.0, 24.0], [32800.0, 35.0], [35200.0, 2.0], [37600.0, 5.0], [40000.0, 4.0], [39200.0, 1.0], [41600.0, 20.0], [42400.0, 2.0], [44800.0, 1.0], [45600.0, 2.0], [46400.0, 4.0], [48800.0, 2.0], [49600.0, 1.0], [50400.0, 2.0], [52000.0, 2.0], [62400.0, 2.0], [63200.0, 53.0], [64800.0, 18.0], [68800.0, 5.0], [67200.0, 19.0], [70400.0, 5.0], [73600.0, 56.0], [72000.0, 1.0], [75200.0, 16.0], [76800.0, 2.0], [81600.0, 13.0], [89600.0, 8.0], [88000.0, 2.0], [97600.0, 1.0], [100800.0, 1.0], [105600.0, 1.0], [108800.0, 2.0], [112000.0, 2.0], [128000.0, 28.0], [131200.0, 14.0], [144000.0, 7.0], [132100.0, 1.0], [151300.0, 2.0], [67100.0, 58.0], [73500.0, 7.0], [71900.0, 3.0], [75100.0, 84.0], [81500.0, 3.0], [79900.0, 2.0], [89500.0, 19.0], [91100.0, 1.0], [95900.0, 2.0], [97500.0, 3.0], [100700.0, 3.0], [105500.0, 1.0], [108700.0, 1.0], [127900.0, 12.0], [133000.0, 24.0], [136200.0, 82.0], [200200.0, 1.0], [133900.0, 1.0], [33100.0, 5.0], [34700.0, 40.0], [35500.0, 3.0], [140300.0, 1.0], [36300.0, 4.0], [149900.0, 4.0], [39500.0, 3.0], [40300.0, 2.0], [42700.0, 2.0], [41900.0, 1.0], [43500.0, 15.0], [44300.0, 2.0], [50700.0, 2.0], [53100.0, 3.0], [51500.0, 2.0], [53900.0, 1.0], [55500.0, 2.0], [60300.0, 3.0], [61900.0, 2.0], [64300.0, 37.0], [63500.0, 6.0], [67800.0, 3.0], [72600.0, 1.0], [74200.0, 1.0], [79000.0, 1.0], [88600.0, 1.0], [87000.0, 2.0], [103000.0, 20.0], [128600.0, 1.0], [138000.0, 29.0], [160400.0, 1.0], [132500.0, 8.0], [145300.0, 1.0], [158100.0, 2.0], [164500.0, 6.0], [68500.0, 1.0], [66900.0, 9.0], [73300.0, 2.0], [70100.0, 4.0], [71700.0, 1.0], [74900.0, 3.0], [82900.0, 2.0], [86100.0, 1.0], [89300.0, 1.0], [92500.0, 1.0], [97300.0, 1.0], [100500.0, 5.0], [105300.0, 7.0], [118100.0, 1.0], [127700.0, 16.0], [129300.0, 1.0], [133400.0, 8.0], [136600.0, 1.0], [17300.0, 19.0], [16500.0, 2.0], [16900.0, 38.0], [17700.0, 73.0], [18100.0, 2.0], [18500.0, 2.0], [18900.0, 68.0], [19300.0, 3.0], [20100.0, 3.0], [19700.0, 2.0], [20500.0, 2.0], [21300.0, 9.0], [20900.0, 8.0], [21700.0, 2.0], [22500.0, 4.0], [22100.0, 2.0], [23300.0, 14.0], [22900.0, 4.0], [24500.0, 50.0], [23700.0, 1.0], [25300.0, 3.0], [24900.0, 2.0], [26500.0, 102.0], [27300.0, 2.0], [26900.0, 1.0], [28500.0, 2.0], [27700.0, 3.0], [30100.0, 46.0], [30500.0, 2.0], [30900.0, 2.0], [31300.0, 12.0], [32100.0, 8.0], [32500.0, 2.0], [34600.0, 18.0], [33800.0, 2.0], [33000.0, 1.0], [36200.0, 1.0], [38600.0, 4.0], [150300.0, 1.0], [37800.0, 25.0], [39400.0, 5.0], [41800.0, 2.0], [46600.0, 4.0], [47400.0, 6.0], [51400.0, 4.0], [53000.0, 1.0], [55400.0, 5.0], [57000.0, 2.0], [63400.0, 18.0], [64200.0, 20.0], [65000.0, 15.0], [66000.0, 5.0], [69200.0, 2.0], [67600.0, 1.0], [70800.0, 2.0], [72400.0, 3.0], [74000.0, 1.0], [77200.0, 2.0], [78800.0, 6.0], [90000.0, 2.0], [99600.0, 2.0], [101200.0, 48.0], [102800.0, 1.0], [110800.0, 1.0], [115600.0, 1.0], [162400.0, 1.0], [131300.0, 21.0], [137700.0, 1.0], [147300.0, 1.0], [163300.0, 2.0], [192100.0, 40.0], [69100.0, 33.0], [65900.0, 5.0], [70700.0, 31.0], [73900.0, 4.0], [75500.0, 1.0], [78700.0, 18.0], [81900.0, 2.0], [85100.0, 1.0], [88300.0, 3.0], [91500.0, 1.0], [101100.0, 75.0], [129900.0, 5.0], [128300.0, 3.0], [161000.0, 1.0], [133100.0, 1.0], [136300.0, 2.0], [36500.0, 2.0], [34900.0, 15.0], [38900.0, 1.0], [149100.0, 1.0], [152300.0, 1.0], [37300.0, 2.0], [39700.0, 25.0], [40500.0, 2.0], [41300.0, 4.0], [42900.0, 7.0], [42100.0, 3.0], [44500.0, 2.0], [43700.0, 2.0], [45300.0, 2.0], [49300.0, 3.0], [50900.0, 2.0], [52500.0, 12.0], [51700.0, 2.0], [54100.0, 3.0], [54900.0, 2.0], [229100.0, 1.0], [56500.0, 2.0], [58900.0, 2.0], [61300.0, 2.0], [59700.0, 1.0], [62900.0, 2.0], [65300.0, 4.0], [63700.0, 4.0], [64500.0, 19.0], [66600.0, 15.0], [69800.0, 1.0], [73000.0, 2.0], [74600.0, 1.0], [76200.0, 1.0], [79400.0, 1.0], [87400.0, 1.0], [89000.0, 2.0], [90600.0, 2.0], [100200.0, 78.0], [113000.0, 1.0], [119400.0, 7.0], [127400.0, 13.0], [129000.0, 46.0], [137200.0, 1.0], [150000.0, 2.0], [138100.0, 6.0], [144500.0, 2.0], [150900.0, 1.0], [198900.0, 1.0], [68900.0, 2.0], [67300.0, 1.0], [65700.0, 17.0], [70500.0, 4.0], [73700.0, 3.0], [75300.0, 14.0], [76900.0, 2.0], [83300.0, 2.0], [92900.0, 26.0], [128100.0, 4.0], [129700.0, 3.0], [8300.0, 112.0], [8500.0, 12.0], [8700.0, 5.0], [8900.0, 20.0], [9100.0, 47.0], [9300.0, 69.0], [9700.0, 164.0], [9500.0, 34.0], [10100.0, 260.0], [9900.0, 40.0], [161400.0, 1.0], [10300.0, 49.0], [10500.0, 481.0], [10700.0, 273.0], [10900.0, 168.0], [11100.0, 1.0], [11300.0, 80.0], [11700.0, 37.0], [11500.0, 13.0], [12100.0, 183.0], [11900.0, 232.0], [12500.0, 11.0], [12300.0, 15.0], [12700.0, 61.0], [13100.0, 20.0], [12900.0, 49.0], [13300.0, 2.0], [13700.0, 70.0], [13500.0, 30.0], [14300.0, 46.0], [14100.0, 315.0], [13900.0, 281.0], [14700.0, 32.0], [14500.0, 33.0], [14900.0, 21.0], [15100.0, 20.0], [15300.0, 12.0], [15700.0, 5.0], [15500.0, 19.0], [16300.0, 36.0], [16100.0, 86.0], [15900.0, 6.0], [17000.0, 18.0], [16600.0, 10.0], [17400.0, 2.0], [17800.0, 35.0], [18200.0, 6.0], [18600.0, 3.0], [19000.0, 16.0], [19400.0, 2.0], [19800.0, 2.0], [20200.0, 9.0], [20600.0, 2.0], [21400.0, 55.0], [21000.0, 3.0], [22200.0, 1.0], [22600.0, 2.0], [23800.0, 20.0], [24200.0, 2.0], [24600.0, 2.0], [26200.0, 5.0], [26600.0, 2.0], [25800.0, 7.0], [27400.0, 2.0], [27000.0, 7.0], [28200.0, 2.0], [29400.0, 3.0], [29000.0, 1.0], [30600.0, 1.0], [30200.0, 2.0], [31800.0, 51.0], [32200.0, 7.0], [133500.0, 2.0], [136700.0, 16.0], [33200.0, 3.0], [36400.0, 1.0], [139900.0, 7.0], [38800.0, 1.0], [37200.0, 1.0], [39600.0, 11.0], [40400.0, 4.0], [42800.0, 20.0], [43600.0, 9.0], [44400.0, 2.0], [46800.0, 4.0], [48400.0, 6.0], [51600.0, 1.0], [58000.0, 2.0], [60400.0, 1.0], [64400.0, 4.0], [65200.0, 4.0], [63600.0, 1.0], [69600.0, 1.0], [68000.0, 3.0], [66400.0, 4.0], [71200.0, 3.0], [72800.0, 1.0], [74400.0, 1.0], [77600.0, 3.0], [76000.0, 3.0], [85600.0, 2.0], [82400.0, 1.0], [84000.0, 2.0], [92000.0, 18.0], [96800.0, 77.0], [100000.0, 391.0], [103200.0, 2.0], [112800.0, 1.0], [128800.0, 28.0], [127200.0, 4.0], [152000.0, 1.0], [133700.0, 29.0], [162500.0, 3.0], [66300.0, 2.0], [71100.0, 1.0], [75900.0, 2.0], [80700.0, 2.0], [90300.0, 1.0], [91900.0, 12.0], [95100.0, 2.0], [101500.0, 1.0], [103100.0, 2.0], [104700.0, 3.0], [112700.0, 1.0], [128700.0, 1.0], [163400.0, 1.0], [33500.0, 1.0], [36700.0, 2.0], [35100.0, 1.0], [37500.0, 6.0], [38300.0, 3.0], [39900.0, 14.0], [41500.0, 2.0], [42300.0, 3.0], [44700.0, 43.0], [43100.0, 20.0], [46300.0, 2.0], [48700.0, 3.0], [51900.0, 1.0], [55100.0, 2.0], [54300.0, 4.0], [53500.0, 2.0], [57500.0, 2.0], [59900.0, 2.0], [63100.0, 2.0], [64700.0, 59.0], [63900.0, 2.0], [67000.0, 21.0], [71800.0, 10.0], [70200.0, 24.0], [76600.0, 1.0], [75000.0, 2.0], [79800.0, 2.0], [81400.0, 1.0], [84600.0, 2.0], [83000.0, 3.0], [86200.0, 3.0], [92600.0, 2.0], [95800.0, 1.0], [102200.0, 6.0], [100600.0, 6.0], [108600.0, 1.0], [115000.0, 2.0], [131000.0, 4.0], [127800.0, 4.0], [133200.0, 1.0], [134100.0, 15.0], [191700.0, 6.0], [66100.0, 19.0], [67700.0, 5.0], [72500.0, 4.0], [70900.0, 4.0], [74100.0, 1.0], [77300.0, 1.0], [80500.0, 1.0], [78900.0, 2.0], [82100.0, 1.0], [96500.0, 3.0], [101300.0, 3.0], [102900.0, 1.0], [115700.0, 1.0], [130100.0, 3.0], [128500.0, 8.0], [138200.0, 1.0], [144600.0, 1.0], [16700.0, 10.0], [17100.0, 3.0], [17500.0, 28.0], [17900.0, 14.0], [18300.0, 2.0], [18700.0, 2.0], [19100.0, 2.0], [19500.0, 3.0], [19900.0, 5.0], [21500.0, 18.0], [21100.0, 4.0], [22300.0, 2.0], [21900.0, 2.0], [23500.0, 3.0], [22700.0, 4.0], [23100.0, 2.0], [24300.0, 9.0], [23900.0, 3.0], [25100.0, 13.0], [25500.0, 2.0], [26300.0, 1.0], [25900.0, 4.0], [27500.0, 6.0], [26700.0, 14.0], [27100.0, 8.0], [27900.0, 19.0], [28700.0, 4.0], [29500.0, 2.0], [29100.0, 1.0], [30700.0, 2.0], [31100.0, 7.0], [31500.0, 42.0], [32700.0, 4.0], [31900.0, 8.0], [33400.0, 2.0], [135900.0, 1.0], [132700.0, 3.0], [34200.0, 32.0], [35800.0, 2.0], [35000.0, 29.0], [39800.0, 14.0], [40600.0, 2.0], [41400.0, 4.0], [44600.0, 37.0], [45400.0, 3.0], [49400.0, 7.0], [51000.0, 2.0], [50200.0, 1.0], [52600.0, 33.0], [51800.0, 1.0], [53400.0, 18.0], [55000.0, 9.0], [59000.0, 2.0], [65400.0, 3.0], [66800.0, 10.0], [68400.0, 15.0], [71600.0, 4.0], [70000.0, 1.0], [81200.0, 3.0], [79600.0, 2.0], [84400.0, 1.0], [86000.0, 2.0], [94000.0, 2.0], [97200.0, 1.0], [100400.0, 21.0], [103600.0, 1.0], [114800.0, 1.0], [121200.0, 12.0], [127600.0, 14.0], [129200.0, 13.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 229100.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 386.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 95202.0, "series": [{"data": [[0.0, 95202.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 5310.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 19436.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 386.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 410.3990208078336, "minX": 1.68288612E12, "maxY": 3000.0, "series": [{"data": [[1.68288612E12, 3000.0], [1.6828863E12, 3000.0], [1.68288624E12, 3000.0], [1.68288642E12, 1300.7497062279683], [1.68288636E12, 2976.2120835598366], [1.68288648E12, 410.3990208078336], [1.68288618E12, 3000.0]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68288648E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 167.3, "minX": 1.0, "maxY": 229131.0, "series": [{"data": [[2.0, 100079.0], [3.0, 100077.0], [5.0, 100076.0], [6.0, 100073.0], [12.0, 100074.0], [13.0, 100073.0], [14.0, 100072.0], [15.0, 100073.5], [16.0, 100073.0], [20.0, 100071.5], [22.0, 100071.0], [23.0, 100069.0], [24.0, 100069.0], [26.0, 100068.5], [27.0, 100064.0], [31.0, 100064.5], [33.0, 100061.0], [32.0, 100061.0], [35.0, 100055.0], [34.0, 100057.0], [37.0, 100052.0], [36.0, 100054.0], [39.0, 100050.5], [41.0, 100048.0], [40.0, 100048.0], [47.0, 100039.0], [46.0, 100039.0], [49.0, 100040.0], [51.0, 100039.0], [53.0, 100038.0], [52.0, 100038.33333333333], [59.0, 100037.16666666666], [58.0, 100039.0], [61.0, 100037.0], [63.0, 100033.0], [62.0, 100034.0], [66.0, 100032.0], [65.0, 100032.5], [87.0, 100025.0], [86.0, 100025.0], [85.0, 100024.33333333333], [84.0, 100024.2], [91.0, 100024.0], [89.0, 100023.25], [95.0, 100267.0], [94.0, 100022.0], [93.0, 100023.0], [92.0, 100023.4], [102.0, 100262.0], [107.0, 100261.0], [106.0, 100261.0], [105.0, 100261.0], [104.0, 100262.0], [111.0, 100258.0], [110.0, 100261.0], [109.0, 100260.0], [108.0, 100261.0], [114.0, 100254.0], [113.0, 100258.0], [112.0, 100260.0], [117.0, 100254.33333333333], [127.0, 100114.0], [126.0, 100113.16666666667], [135.0, 100111.5], [133.0, 100111.8], [129.0, 100112.0], [128.0, 100112.66666666667], [143.0, 100108.0], [142.0, 100108.66666666667], [139.0, 100110.0], [138.0, 100110.0], [137.0, 100110.5], [150.0, 100104.0], [149.0, 100103.0], [148.0, 100103.0], [147.0, 100104.66666666667], [146.0, 100105.0], [159.0, 100087.0], [156.0, 100098.0], [155.0, 100098.0], [153.0, 100099.0], [152.0, 100099.0], [167.0, 100082.0], [166.0, 100081.0], [165.0, 100082.0], [164.0, 100083.0], [163.0, 100085.5], [175.0, 100078.5], [173.0, 100079.33333333333], [172.0, 100081.0], [170.0, 100081.0], [183.0, 100073.5], [181.0, 100074.0], [180.0, 100073.0], [179.0, 100073.0], [191.0, 100072.33333333333], [190.0, 100073.0], [188.0, 100072.25], [185.0, 100073.0], [184.0, 100073.0], [198.0, 100071.0], [197.0, 100071.0], [196.0, 100071.0], [195.0, 100071.75], [207.0, 100059.5], [205.0, 100068.0], [204.0, 100067.5], [203.0, 100067.5], [200.0, 100067.5], [214.0, 100058.0], [209.0, 100058.0], [223.0, 100056.0], [222.0, 100057.0], [221.0, 100057.0], [231.0, 100054.5], [229.0, 100055.0], [227.0, 100056.0], [226.0, 100056.0], [225.0, 100056.0], [224.0, 100056.0], [239.0, 100045.0], [238.0, 100046.0], [236.0, 100046.0], [235.0, 100053.0], [234.0, 100053.5], [232.0, 100053.0], [246.0, 100037.0], [245.0, 100038.66666666667], [242.0, 100039.0], [241.0, 100040.0], [240.0, 100043.0], [254.0, 100023.5], [251.0, 100034.0], [250.0, 100034.0], [264.0, 100020.6], [259.0, 100022.8], [256.0, 100023.0], [284.0, 100212.0], [286.0, 100207.0], [287.0, 100208.0], [285.0, 100210.0], [281.0, 100213.0], [280.0, 100212.0], [278.0, 100212.77777777778], [274.0, 100213.0], [277.0, 100212.0], [276.0, 100213.0], [303.0, 100200.33333333333], [299.0, 100202.5], [298.0, 100201.0], [297.0, 100202.0], [295.0, 100203.0], [294.0, 100204.0], [293.0, 100206.0], [291.0, 100207.0], [290.0, 100209.33333333333], [316.0, 100197.0], [318.0, 100196.0], [319.0, 100196.0], [317.0, 100196.0], [314.0, 100199.0], [313.0, 100197.0], [311.0, 100199.0], [309.0, 100199.66666666667], [306.0, 100199.5], [304.0, 100201.0], [326.0, 100195.0], [325.0, 100195.0], [323.0, 100194.0], [320.0, 100196.0], [339.0, 100192.55555555556], [349.0, 100185.0], [348.0, 100185.0], [347.0, 100185.0], [344.0, 100187.0], [342.0, 100186.0], [340.0, 100191.0], [338.0, 100192.33333333333], [337.0, 100193.0], [355.0, 100184.0], [367.0, 100179.0], [364.0, 100180.0], [363.0, 100181.0], [361.0, 100183.0], [360.0, 100183.25], [357.0, 100183.0], [356.0, 100185.0], [353.0, 100184.0], [352.0, 100184.5], [382.0, 100160.0], [383.0, 100159.0], [381.0, 100162.0], [380.0, 100162.0], [378.0, 100166.0], [377.0, 100167.0], [376.0, 100167.0], [375.0, 100167.0], [370.0, 100179.0], [369.0, 100179.75], [373.0, 100179.0], [372.0, 100179.0], [399.0, 100132.0], [398.0, 100133.0], [397.0, 100134.5], [393.0, 100137.0], [391.0, 100138.0], [390.0, 100137.5], [388.0, 100139.6], [414.0, 100121.0], [415.0, 100121.66666666667], [413.0, 100122.0], [411.0, 100121.0], [410.0, 100122.0], [407.0, 100122.5], [404.0, 100123.0], [403.0, 100129.5], [401.0, 100129.0], [431.0, 100119.0], [430.0, 100117.6], [429.0, 100119.0], [426.0, 100118.0], [421.0, 100121.0], [420.0, 100120.0], [419.0, 100121.0], [418.0, 100122.0], [445.0, 92969.0], [447.0, 92967.5], [444.0, 95872.0], [435.0, 100106.0], [433.0, 100108.0], [432.0, 100116.0], [443.0, 100085.0], [441.0, 100088.0], [440.0, 100098.0], [439.0, 100098.0], [437.0, 100104.0], [436.0, 100104.0], [462.0, 92952.0], [463.0, 92951.0], [461.0, 92953.0], [460.0, 92953.0], [459.0, 92954.0], [458.0, 92954.0], [457.0, 92956.0], [456.0, 92956.0], [454.0, 92957.0], [449.0, 92965.0], [448.0, 92967.0], [451.0, 92963.0], [450.0, 92964.0], [453.0, 92958.0], [452.0, 92959.0], [478.0, 92004.5], [479.0, 92003.0], [476.0, 92005.0], [467.0, 92947.0], [466.0, 92949.0], [465.0, 92948.0], [464.0, 92949.0], [475.0, 92006.0], [474.0, 92007.0], [473.0, 92007.0], [472.0, 92006.0], [471.0, 92009.0], [470.0, 92943.0], [469.0, 92944.0], [468.0, 92946.0], [494.0, 91991.0], [495.0, 91989.0], [493.0, 91993.0], [492.0, 91995.0], [491.0, 91998.0], [490.0, 91999.0], [488.0, 91998.0], [487.0, 91997.0], [481.0, 92001.5], [483.0, 92001.0], [482.0, 92002.0], [486.0, 92000.0], [484.0, 92000.0], [510.0, 85012.0], [511.0, 84006.0], [509.0, 85014.0], [508.0, 86021.0], [507.0, 86026.0], [506.0, 87029.0], [505.0, 87035.0], [504.0, 88041.0], [503.0, 88043.0], [497.0, 91986.0], [496.0, 91986.0], [499.0, 90060.0], [498.0, 91981.0], [502.0, 89049.0], [501.0, 89052.0], [500.0, 90059.0], [540.0, 69913.0], [543.0, 68877.0], [529.0, 74923.0], [528.0, 75929.0], [531.0, 73913.0], [530.0, 74920.0], [533.0, 72932.0], [532.0, 73911.0], [542.0, 68895.0], [541.0, 68894.0], [539.0, 69915.0], [538.0, 70912.0], [537.0, 70914.0], [536.0, 71921.0], [527.0, 75933.0], [513.0, 82996.0], [512.0, 84002.0], [515.0, 81988.0], [514.0, 82994.0], [517.0, 80978.0], [516.0, 81985.0], [519.0, 79970.0], [518.0, 80975.0], [526.0, 76938.0], [525.0, 76940.0], [524.0, 77949.0], [523.0, 77950.0], [522.0, 78957.0], [521.0, 78960.0], [520.0, 79967.0], [535.0, 71925.0], [534.0, 72930.0], [570.0, 66975.0], [574.0, 66917.0], [575.0, 66917.0], [560.0, 67030.0], [562.0, 67026.0], [561.0, 67029.0], [564.0, 67017.0], [563.0, 67022.0], [573.0, 66944.0], [572.0, 66953.0], [571.0, 66964.0], [569.0, 67010.0], [551.0, 67041.0], [550.0, 67041.0], [549.0, 69718.0], [548.0, 67044.0], [547.0, 69718.0], [546.0, 67861.0], [545.0, 67863.0], [544.0, 68876.0], [559.0, 67031.0], [558.0, 67032.0], [557.0, 67033.0], [556.0, 67033.0], [555.0, 67033.0], [554.0, 67041.0], [553.0, 67042.0], [567.0, 67013.0], [566.0, 67014.5], [600.0, 69120.0], [605.0, 69118.0], [607.0, 69116.0], [595.0, 66126.0], [593.0, 68441.0], [604.0, 67276.0], [602.0, 69118.0], [601.0, 69119.0], [591.0, 68443.0], [578.0, 66133.0], [577.0, 67634.0], [581.0, 66134.0], [580.0, 67289.0], [583.0, 66130.0], [582.0, 68446.0], [590.0, 66128.0], [588.0, 66129.0], [587.0, 69130.0], [586.0, 68443.0], [585.0, 68445.0], [584.0, 66132.0], [599.0, 69124.0], [598.0, 66124.0], [597.0, 68438.0], [596.0, 69126.0], [638.0, 68410.0], [639.0, 69096.0], [627.0, 69103.0], [626.0, 69104.33333333333], [629.0, 66104.0], [628.0, 66103.0], [637.0, 69095.0], [636.0, 69099.0], [635.0, 69099.0], [634.0, 69100.0], [633.0, 67601.5], [615.0, 69114.0], [614.0, 67616.5], [611.0, 69113.0], [610.0, 69116.66666666667], [623.0, 66107.0], [622.0, 69107.0], [621.0, 69111.5], [619.0, 68428.0], [618.0, 66113.0], [617.0, 69112.0], [631.0, 69100.0], [630.0, 69104.0], [668.0, 66011.0], [671.0, 65003.0], [658.0, 69058.0], [656.0, 69064.0], [660.0, 69058.0], [659.0, 69060.0], [670.0, 65004.0], [669.0, 66009.0], [667.0, 69045.0], [666.0, 69047.0], [665.0, 69046.0], [664.0, 69049.5], [654.0, 69066.66666666667], [641.0, 67250.5], [644.0, 68402.0], [643.0, 67247.0], [646.0, 69087.0], [645.0, 69086.0], [651.0, 69075.0], [650.0, 69075.0], [649.0, 68397.0], [648.0, 68741.5], [662.0, 69051.0], [661.0, 69054.0], [702.0, 67198.0], [691.0, 67203.0], [703.0, 67197.33333333333], [688.0, 67204.0], [690.0, 64203.0], [689.0, 64203.0], [700.0, 67199.0], [698.0, 67199.5], [696.0, 67202.0], [679.0, 64206.5], [677.0, 67206.0], [676.0, 67207.0], [675.0, 67208.0], [674.0, 67210.0], [672.0, 67208.0], [687.0, 67203.0], [686.0, 67204.5], [685.0, 64206.0], [683.0, 67205.5], [682.0, 64206.0], [681.0, 67205.0], [695.0, 67199.0], [693.0, 64202.0], [692.0, 67201.0], [723.0, 64187.0], [734.0, 64185.0], [735.0, 65684.0], [720.0, 66501.0], [722.0, 67188.0], [721.0, 64187.0], [733.0, 67176.0], [732.0, 64185.0], [731.0, 65957.33333333333], [711.0, 66595.0], [706.0, 64197.0], [705.0, 64198.0], [704.0, 67196.0], [718.0, 67187.0], [717.0, 65526.0], [715.0, 67189.0], [714.0, 65194.0], [727.0, 67185.5], [726.0, 67184.0], [725.0, 64186.0], [761.0, 67175.0], [754.0, 64178.0], [766.0, 65667.5], [767.0, 67165.0], [753.0, 67178.0], [762.0, 64169.0], [760.0, 64176.0], [741.0, 65680.5], [739.0, 67180.0], [738.0, 64181.0], [737.0, 64184.0], [736.0, 67181.0], [751.0, 67177.0], [750.0, 65679.0], [748.0, 64178.0], [747.0, 66837.5], [746.0, 65179.333333333336], [744.0, 64180.0], [759.0, 67176.0], [757.0, 65675.5], [755.0, 64177.0], [796.0, 64150.0], [799.0, 67145.0], [787.0, 67160.0], [786.0, 64162.0], [789.0, 67161.0], [788.0, 67160.66666666667], [798.0, 64148.0], [797.0, 64148.0], [795.0, 64155.0], [794.0, 67159.0], [793.0, 67159.0], [792.0, 66475.0], [782.0, 66475.0], [770.0, 64163.0], [769.0, 65667.5], [774.0, 64163.0], [773.0, 65164.0], [781.0, 66161.33333333333], [780.0, 67161.0], [779.0, 67162.0], [776.0, 67163.0], [791.0, 64161.0], [790.0, 66475.0], [828.0, 55557.0], [831.0, 54547.0], [817.0, 60914.0], [816.0, 60915.0], [819.0, 59913.0], [818.0, 59914.0], [821.0, 58918.0], [820.0, 58919.0], [830.0, 54549.0], [829.0, 55556.0], [827.0, 56567.0], [826.0, 56567.0], [825.0, 57575.0], [824.0, 57577.0], [815.0, 61911.0], [800.0, 64146.0], [805.0, 67143.0], [804.0, 67063.5], [807.0, 64121.0], [806.0, 64131.0], [814.0, 61915.0], [813.0, 62914.0], [812.0, 62915.0], [811.0, 63286.0], [810.0, 63289.0], [809.0, 63992.0], [808.0, 63992.0], [823.0, 58585.0], [822.0, 58586.0], [860.0, 40342.0], [863.0, 39330.0], [849.0, 46398.0], [848.0, 46399.0], [851.0, 45388.0], [850.0, 45389.0], [853.0, 44378.0], [852.0, 44380.0], [862.0, 39332.0], [861.0, 40339.0], [859.0, 41350.0], [858.0, 41351.0], [857.0, 42359.0], [856.0, 42362.0], [847.0, 47406.0], [833.0, 53536.0], [832.0, 53538.0], [835.0, 52528.0], [834.0, 52531.0], [837.0, 51518.0], [836.0, 51519.0], [839.0, 51443.0], [838.0, 51446.0], [846.0, 47407.0], [845.0, 48415.0], [844.0, 48417.0], [843.0, 49425.0], [842.0, 49427.0], [841.0, 50434.0], [840.0, 50436.0], [855.0, 43369.0], [854.0, 43371.0], [892.0, 24207.0], [895.0, 23180.0], [881.0, 30244.0], [880.0, 30263.0], [883.0, 29235.0], [882.0, 29237.0], [885.0, 28226.0], [884.0, 28228.0], [894.0, 23197.0], [893.0, 24205.0], [891.0, 25198.0], [890.0, 25200.0], [889.0, 26207.0], [888.0, 26209.0], [879.0, 31254.0], [865.0, 38320.0], [864.0, 38322.0], [867.0, 37312.0], [866.0, 37313.0], [869.0, 36302.0], [868.0, 36304.0], [871.0, 35291.0], [870.0, 35294.0], [878.0, 31256.0], [877.0, 32264.0], [876.0, 32266.0], [875.0, 33273.0], [874.0, 33276.0], [873.0, 34282.0], [872.0, 34284.0], [887.0, 27216.0], [886.0, 27219.0], [924.0, 8212.0], [927.0, 7202.0], [913.0, 14111.0], [912.0, 14093.0], [915.0, 13101.0], [914.0, 13103.0], [917.0, 12074.0], [916.0, 12094.0], [926.0, 7203.0], [925.0, 8210.0], [923.0, 9219.0], [922.0, 9221.0], [921.0, 10228.0], [920.0, 10230.0], [911.0, 15119.0], [897.0, 22187.0], [896.0, 22171.0], [899.0, 21176.0], [898.0, 21162.0], [901.0, 20151.0], [900.0, 20170.0], [903.0, 19158.0], [902.0, 19160.0], [910.0, 15121.0], [909.0, 16130.0], [908.0, 16130.0], [907.0, 17138.0], [906.0, 17140.0], [905.0, 18148.0], [904.0, 18150.0], [919.0, 11238.0], [918.0, 11085.0], [953.0, 2068.0], [958.0, 6041.0], [959.0, 1179.0], [946.0, 2078.0], [945.0, 2081.5], [948.0, 2076.0], [947.0, 2077.0], [957.0, 6045.0], [956.0, 1945.0], [955.0, 2066.0], [952.0, 2068.5], [934.0, 2093.0], [933.0, 2093.5], [931.0, 2094.0], [930.0, 6204.0], [928.0, 6211.0], [943.0, 2085.0], [942.0, 2086.0], [941.0, 2085.0], [940.0, 2087.0], [939.0, 2089.0], [938.0, 2091.0], [936.0, 2091.0], [950.0, 2074.0], [949.0, 2074.0], [987.0, 1164.6666666666667], [980.0, 1170.0], [991.0, 1160.0], [990.0, 1163.0], [989.0, 1164.0], [975.0, 1173.5], [960.0, 1179.0], [963.0, 1178.0], [961.0, 1178.0], [965.0, 1177.0], [964.0, 1177.0], [967.0, 1176.0], [966.0, 1176.0], [973.0, 1174.0], [972.0, 1174.0], [971.0, 1175.0], [970.0, 1174.0], [969.0, 1175.0], [968.0, 1176.0], [983.0, 1166.0], [982.0, 1166.0], [981.0, 1168.0], [979.0, 1170.5], [977.0, 1172.5], [1020.0, 1097.0], [1012.0, 1135.0], [1022.0, 1091.0], [1008.0, 1143.0], [1011.0, 1135.0], [1010.0, 1141.0], [1018.0, 1099.0], [1017.0, 1109.0], [1016.0, 1110.0], [998.0, 1157.0], [996.0, 1156.0], [995.0, 1158.0], [994.0, 1158.5], [992.0, 1160.0], [1006.0, 1144.0], [1005.0, 1145.0], [1004.0, 1149.0], [1003.0, 1150.5], [1001.0, 1153.0], [1000.0, 1156.0], [1015.0, 1110.0], [1014.0, 1134.0], [1013.0, 1134.0], [1058.0, 207.0], [1084.0, 1978.0], [1060.0, 207.0555555555556], [1062.0, 4095.0], [1068.0, 1997.0], [1070.0, 1996.0], [1086.0, 1972.0], [1080.0, 1987.0], [1078.0, 1990.0], [1076.0, 1994.0], [1074.0, 1996.0], [1054.0, 207.0], [1024.0, 1090.5], [1026.0, 5179.0], [1028.0, 5171.0], [1032.0, 229131.0], [1144.0, 2117.0], [1126.0, 1051.0], [1148.0, 2107.0], [1120.0, 1076.0], [1122.0, 1073.0], [1124.0, 1070.0], [1128.0, 1049.0], [1130.0, 1046.0], [1132.0, 2119.0], [1150.0, 2105.0], [1146.0, 2111.0], [1138.0, 2118.3333333333335], [1136.0, 2119.0], [1088.0, 1963.0], [1090.0, 1946.0], [1092.0, 3042.0], [1094.0, 1100.0], [1098.0, 1099.0], [1096.0, 1099.0], [1100.0, 1097.0], [1102.0, 1096.0], [1118.0, 1077.0], [1116.0, 1080.0], [1114.0, 1082.0], [1112.0, 1093.0], [1110.0, 1093.5], [1106.0, 1095.0], [1104.0, 1095.0], [1160.0, 2069.0], [1158.0, 2082.0], [1156.0, 2091.0], [1154.0, 2095.0], [1152.0, 2097.0], [1406.0, 242.16666666666666], [1386.0, 243.0], [1404.0, 243.0], [1402.0, 242.4], [1392.0, 243.4], [1394.0, 243.5], [1400.0, 242.85714285714286], [1390.0, 243.4], [1388.0, 243.0], [1412.0, 241.0], [1430.0, 239.0], [1424.0, 240.85714285714286], [1420.0, 240.6], [1418.0, 240.33333333333331], [1416.0, 240.75], [1410.0, 242.25], [1408.0, 242.0], [1632.0, 254.50000000000003], [1658.0, 249.5], [1634.0, 253.66400000000004], [1636.0, 253.5], [1640.0, 253.5], [1644.0, 252.5], [1660.0, 249.0], [1652.0, 251.0], [1630.0, 254.14285714285714], [1628.0, 254.0], [1616.0, 254.0], [1720.0, 1235.3333333333333], [1698.0, 1320.0], [1702.0, 1314.0], [1726.0, 1109.0], [1716.0, 1310.3333333333333], [1714.0, 1311.3333333333333], [1664.0, 250.0], [1668.0, 244.66666666666666], [1672.0, 1329.0], [1674.0, 1330.25], [1678.0, 1327.5], [1676.0, 1328.0], [1694.0, 1321.0], [1690.0, 1324.0], [1686.0, 1326.0], [1684.0, 1327.0], [1680.0, 1327.0], [1736.0, 1063.0], [1734.0, 1082.0], [1732.0, 1083.0], [1730.0, 1088.0], [1728.0, 1104.0], [2428.0, 520.3548387096774], [2436.0, 517.5], [2440.0, 517.0], [2448.0, 517.0], [2504.0, 321.0], [2456.0, 522.4285714285714], [2452.0, 519.8181818181819], [2492.0, 532.0181818181819], [2480.0, 518.5], [2484.0, 518.25], [2476.0, 521.1666666666666], [2472.0, 536.6], [2464.0, 533.2900000000002], [2468.0, 517.3333333333334], [2676.0, 231.0], [2684.0, 230.6], [2656.0, 232.0], [2588.0, 241.0], [2608.0, 239.0], [2604.0, 238.5], [2596.0, 241.0], [2756.0, 1365.0], [2812.0, 11481.0], [2760.0, 1097.5], [2764.0, 1096.0], [2768.0, 1094.0], [2776.0, 1077.0], [2780.0, 1071.0], [2808.0, 4559.333333333333], [2800.0, 100195.0], [2796.0, 10615.0], [2792.0, 9084.0], [2700.0, 230.0], [2696.0, 230.1818181818182], [2692.0, 232.0], [2688.0, 231.4], [2744.0, 1384.0], [2740.0, 2089.0], [2736.0, 179.71428571428572], [2724.0, 180.16666666666666], [2928.0, 7802.0], [2936.0, 253.25], [2884.0, 6232.0], [2892.0, 8359.0], [2900.0, 6920.666666666667], [2904.0, 6745.5], [2924.0, 7984.666666666667], [2844.0, 314.0], [2840.0, 549.0], [2836.0, 317.0], [2828.0, 11448.5], [2820.0, 11475.0], [2848.0, 1010.0], [2952.0, 241.0], [2956.0, 196.66666666666666], [3000.0, 3974.1460302537675], [2944.0, 251.21428571428572], [2948.0, 250.5217391304348], [2960.0, 192.0], [2964.0, 192.43999999999997], [2968.0, 180.33333333333331], [2972.0, 180.99999999999997], [2996.0, 1165.4], [2992.0, 1268.3333333333333], [2988.0, 167.3], [2984.0, 167.73333333333335], [2980.0, 178.0], [2976.0, 584.55], [2445.0, 518.3333333333333], [2461.0, 522.2857142857143], [2453.0, 521.5833333333333], [2449.0, 516.5], [2441.0, 517.0], [2437.0, 516.0], [2493.0, 577.3333333333334], [2489.0, 524.9473684210526], [2485.0, 517.3], [2477.0, 527.25], [2481.0, 512.4], [2473.0, 536.6666666666666], [2469.0, 516.68], [2465.0, 511.0], [2685.0, 232.0], [2681.0, 231.6], [2677.0, 231.0], [2609.0, 238.0], [2601.0, 238.0], [2801.0, 100191.0], [2765.0, 1095.0], [2753.0, 1374.5], [2757.0, 1363.0], [2769.0, 1093.0], [2773.0, 5121.0], [2777.0, 9152.0], [2781.0, 1068.0], [2813.0, 1092.0], [2805.0, 1097.0], [2793.0, 9081.0], [2789.0, 1064.0], [2701.0, 230.375], [2697.0, 230.44444444444446], [2693.0, 231.26666666666665], [2689.0, 231.0], [2749.0, 2084.0], [2745.0, 1385.0], [2741.0, 2087.0], [2737.0, 178.5], [2729.0, 179.0], [2725.0, 179.0], [2721.0, 180.2], [2941.0, 250.0], [2897.0, 2182.0], [2885.0, 985.0], [2889.0, 2732.3333333333335], [2929.0, 8347.0], [2925.0, 8347.0], [2913.0, 6221.0], [2845.0, 315.0], [2829.0, 318.0], [2821.0, 1084.0], [2817.0, 6285.0], [2853.0, 658.5], [2849.0, 1009.0], [2997.0, 4014.5833333333335], [2945.0, 252.0], [2953.0, 241.0], [2957.0, 2216.0], [2969.0, 180.0], [2993.0, 1218.666666666667], [2989.0, 437.25], [2981.0, 178.00000000000003], [2977.0, 180.0], [1085.0, 1974.0], [1087.0, 1967.0], [1057.0, 207.0], [1059.0, 207.0], [1061.0, 4097.0], [1065.0, 1999.5], [1063.0, 1999.0], [1067.0, 2554.5], [1071.0, 1996.0], [1083.0, 1983.0], [1081.0, 1983.0], [1079.0, 1989.0], [1077.0, 1990.0], [1075.0, 1994.0], [1073.0, 1994.5], [1025.0, 1090.0], [1027.0, 5176.0], [1029.0, 103223.0], [1031.0, 220.5], [1145.0, 2111.0], [1151.0, 2107.0], [1121.0, 1075.0], [1125.0, 1053.0], [1127.0, 1049.0], [1129.0, 1048.0], [1131.0, 2121.0], [1133.0, 2118.0], [1149.0, 2105.0], [1147.0, 2108.0], [1143.0, 2116.0], [1139.0, 2118.0], [1119.0, 1076.0], [1089.0, 1955.0], [1091.0, 3043.0], [1095.0, 1100.0], [1099.0, 1099.0], [1101.0, 1097.0], [1117.0, 1077.0], [1115.0, 1080.0], [1113.0, 1084.0], [1111.0, 1094.0], [1109.0, 1095.0], [1107.0, 1095.0], [1157.0, 2084.0], [1159.0, 2069.0], [1155.0, 2092.0], [1153.0, 2097.0], [1405.0, 242.72727272727272], [1407.0, 242.16666666666666], [1381.0, 244.33333333333334], [1385.0, 243.0], [1403.0, 242.0], [1393.0, 243.125], [1395.0, 243.12500000000003], [1397.0, 243.28571428571428], [1399.0, 243.0], [1401.0, 242.0], [1389.0, 242.0], [1387.0, 243.0], [1419.0, 241.0], [1439.0, 239.25], [1443.0, 238.66666666666669], [1433.0, 240.0], [1427.0, 240.0], [1423.0, 240.0], [1421.0, 240.5], [1413.0, 240.0], [1411.0, 241.603305785124], [1409.0, 243.0], [1633.0, 254.5], [1663.0, 251.0], [1635.0, 253.2], [1639.0, 253.33333333333331], [1643.0, 252.5], [1641.0, 254.0], [1647.0, 252.25], [1659.0, 250.0], [1657.0, 251.33333333333334], [1655.0, 251.0], [1653.0, 251.33333333333334], [1649.0, 251.66666666666666], [1631.0, 254.5], [1629.0, 254.0], [1627.0, 253.66666666666666], [1727.0, 1106.0], [1721.0, 1234.0], [1697.0, 1319.0], [1699.0, 1318.0], [1703.0, 1315.0], [1707.0, 1313.0], [1705.0, 1313.5], [1725.0, 1232.0], [1719.0, 1234.0], [1695.0, 1320.0], [1665.0, 250.0], [1669.0, 105668.0], [1675.0, 1329.0], [1693.0, 1321.6666666666667], [1689.0, 1323.5], [1687.0, 1326.0], [1683.0, 1327.3333333333333], [1711.0, 1313.0], [1709.0, 1312.5], [1733.0, 1084.0], [1735.0, 1066.0], [1731.0, 1085.0], [1729.0, 1093.0], [2442.0, 516.8], [2490.0, 544.2903225806452], [2462.0, 521.7777777777778], [2458.0, 525.1428571428572], [2454.0, 533.0], [2438.0, 517.0], [2486.0, 518.2], [2478.0, 566.6666666666666], [2482.0, 515.0], [2474.0, 518.0], [2470.0, 519.7647058823528], [2466.0, 515.75], [2686.0, 231.53333333333336], [2678.0, 231.0], [2654.0, 233.5], [2674.0, 232.1818181818182], [2590.0, 240.0], [2598.0, 239.0], [2594.0, 240.0], [2758.0, 1362.0], [2754.0, 2070.0], [2762.0, 1096.5], [2774.0, 1082.0], [2778.0, 9149.0], [2782.0, 1067.0], [2814.0, 11481.0], [2798.0, 10614.5], [2794.0, 9080.0], [2790.0, 5102.0], [2786.0, 1065.0], [2702.0, 229.48275862068965], [2698.0, 230.20000000000002], [2694.0, 232.0], [2750.0, 2083.0], [2746.0, 1385.0], [2742.0, 2086.0], [2726.0, 179.75], [2942.0, 251.3571428571428], [2934.0, 4823.263157894737], [2886.0, 6228.0], [2890.0, 2186.0], [2898.0, 3483.0], [2902.0, 6746.0], [2910.0, 7266.666666666667], [2918.0, 7575.142857142857], [2846.0, 314.0], [2834.0, 316.5], [2826.0, 7986.666666666667], [2822.0, 1074.0], [2818.0, 1088.0], [2878.0, 767.3333333333334], [2874.0, 1001.0], [2862.0, 396.125], [2850.0, 310.0], [2958.0, 196.8], [2954.0, 1036.8], [2962.0, 192.74999999999997], [2966.0, 191.0], [2970.0, 180.0], [2994.0, 1132.2], [2990.0, 1276.3333333333333], [2978.0, 177.74999999999997], [2451.0, 519.1818181818182], [2495.0, 619.25], [2507.0, 276.0], [2503.0, 186.5], [2463.0, 528.9310344827586], [2459.0, 522.0], [2455.0, 515.3333333333334], [2447.0, 516.4285714285714], [2443.0, 523.4], [2435.0, 521.5], [2491.0, 520.6], [2487.0, 526.0], [2479.0, 563.8571428571429], [2483.0, 520.3488372093026], [2475.0, 507.6666666666667], [2471.0, 529.0927835051546], [2467.0, 512.0], [2687.0, 233.0], [2683.0, 231.25], [2655.0, 234.0], [2679.0, 230.83333333333334], [2591.0, 241.0], [2587.0, 240.0], [2675.0, 230.66666666666666], [2755.0, 7314.0], [2799.0, 102624.0], [2803.0, 101774.5], [2815.0, 11480.0], [2763.0, 1096.0], [2767.0, 1092.5], [2771.0, 9160.5], [2775.0, 1082.0], [2779.0, 1072.0], [2783.0, 1065.0], [2811.0, 3693.25], [2795.0, 8906.0], [2791.0, 9087.0], [2699.0, 230.66666666666666], [2695.0, 229.7], [2691.0, 232.0], [2751.0, 1372.0], [2747.0, 2084.5], [2739.0, 2090.0], [2723.0, 181.0], [2935.0, 636.6190476190476], [2883.0, 1454.7], [2891.0, 1790.0], [2899.0, 6224.0], [2907.0, 6919.0], [2939.0, 250.0], [2923.0, 7622.333333333333], [2843.0, 782.0], [2839.0, 314.0], [2835.0, 317.0], [2831.0, 319.0], [2823.0, 1061.0], [2819.0, 11476.0], [2879.0, 1565.5], [2867.0, 535.6666666666666], [2863.0, 305.0], [2859.0, 309.0], [2851.0, 309.0], [2951.0, 249.79999999999998], [2947.0, 249.0], [2991.0, 1271.0], [2995.0, 1187.8333333333335], [2955.0, 198.0], [2959.0, 196.90476190476187], [2963.0, 193.0], [2967.0, 180.5], [2971.0, 180.5], [2975.0, 180.5], [2983.0, 178.0], [2979.0, 178.33333333333334], [1.0, 100080.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[2965.3097129655744, 4512.422789901395]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 3000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 6862.8, "minX": 1.68288612E12, "maxY": 323656.1666666667, "series": [{"data": [[1.68288612E12, 253450.61666666667], [1.6828863E12, 300356.18333333335], [1.68288624E12, 323656.1666666667], [1.68288642E12, 9934.983333333334], [1.68288636E12, 307493.86666666664], [1.68288648E12, 9362.9], [1.68288618E12, 240963.55]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.68288612E12, 176828.4], [1.6828863E12, 210050.4], [1.68288624E12, 226119.6], [1.68288642E12, 7148.4], [1.68288636E12, 216325.2], [1.68288648E12, 6862.8], [1.68288618E12, 164228.4]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68288648E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 2060.2298672050874, "minX": 1.68288612E12, "maxY": 87276.84944920437, "series": [{"data": [[1.68288612E12, 2627.2065129928637], [1.6828863E12, 3462.5038326413296], [1.68288624E12, 4345.054191394642], [1.68288642E12, 5363.434782608694], [1.68288636E12, 2060.2298672050874], [1.68288648E12, 87276.84944920437], [1.68288618E12, 7821.853971785383]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68288648E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 2055.733711268157, "minX": 1.68288612E12, "maxY": 87276.83108935127, "series": [{"data": [[1.68288612E12, 2539.046906801724], [1.6828863E12, 3298.3780740977354], [1.68288624E12, 4317.26012611278], [1.68288642E12, 5363.430082256166], [1.68288636E12, 2055.733711268157], [1.68288648E12, 87276.83108935127], [1.68288618E12, 7361.38807705918]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68288648E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.19706242350061187, "minX": 1.68288612E12, "maxY": 2625.413983679529, "series": [{"data": [[1.68288612E12, 95.38093434941092], [1.6828863E12, 1235.1492334717473], [1.68288624E12, 2625.413983679529], [1.68288642E12, 150.93889541715623], [1.68288636E12, 634.2786363283402], [1.68288648E12, 0.19706242350061187], [1.68288618E12, 1458.8070991555803]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68288648E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 8.0, "minX": 1.68288612E12, "maxY": 229131.0, "series": [{"data": [[1.68288612E12, 51426.0], [1.6828863E12, 200262.0], [1.68288624E12, 164912.0], [1.68288642E12, 229131.0], [1.68288636E12, 192163.0], [1.68288648E12, 100267.0], [1.68288618E12, 103109.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.68288612E12, 11887.0], [1.6828863E12, 3431.100000000013], [1.68288624E12, 2117.600000000006], [1.68288642E12, 20166.2], [1.68288636E12, 1123.9000000000015], [1.68288648E12, 100195.0], [1.68288618E12, 13669.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.68288612E12, 37616.74000000004], [1.6828863E12, 100662.99], [1.68288624E12, 136220.0], [1.68288642E12, 58060.84000000002], [1.68288636E12, 9343.0], [1.68288648E12, 100261.0], [1.68288618E12, 100123.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.68288612E12, 14186.0], [1.6828863E12, 10280.0], [1.68288624E12, 16300.55000000056], [1.68288642E12, 41754.199999999975], [1.68288636E12, 2238.0], [1.68288648E12, 100212.0], [1.68288618E12, 52621.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.68288612E12, 18.0], [1.6828863E12, 12.0], [1.68288624E12, 22.0], [1.68288642E12, 207.0], [1.68288636E12, 21.0], [1.68288648E12, 60914.0], [1.68288618E12, 8.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.68288612E12, 209.0], [1.6828863E12, 241.0], [1.68288624E12, 230.0], [1.68288642E12, 254.0], [1.68288636E12, 236.0], [1.68288648E12, 100024.0], [1.68288618E12, 225.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68288648E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 49.5, "minX": 1.0, "maxY": 127431.0, "series": [{"data": [[2.0, 48921.0], [3.0, 44584.5], [4.0, 47445.5], [5.0, 5489.0], [6.0, 29308.5], [7.0, 7863.0], [8.0, 11267.5], [9.0, 49491.0], [11.0, 6315.0], [14.0, 1284.5], [17.0, 11320.0], [18.0, 8944.5], [19.0, 2252.0], [20.0, 49.5], [27.0, 54916.5], [28.0, 92000.0], [29.0, 67029.0], [30.0, 1994.0], [31.0, 2086.0], [33.0, 263.0], [35.0, 42990.0], [34.0, 207.0], [38.0, 1392.5], [40.0, 4238.0], [41.0, 4445.0], [45.0, 98775.0], [49.0, 3335.0], [57.0, 1424.0], [61.0, 70.0], [60.0, 1274.0], [63.0, 13490.0], [62.0, 1068.5], [66.0, 1384.5], [70.0, 1138.0], [81.0, 75.0], [95.0, 7926.0], [94.0, 69058.0], [96.0, 193.0], [102.0, 114.0], [110.0, 319.0], [116.0, 97.0], [117.0, 100054.0], [122.0, 7273.0], [126.0, 110.0], [128.0, 165.0], [133.0, 130.0], [138.0, 67158.5], [145.0, 8004.0], [160.0, 122.0], [165.0, 200.0], [163.0, 1078.0], [178.0, 131.0], [191.0, 104.0], [199.0, 31573.0], [196.0, 141.0], [204.0, 208.0], [246.0, 252.0], [241.0, 238.0], [242.0, 230.5], [249.0, 100029.0], [264.0, 185.5], [275.0, 81.0], [273.0, 205.0], [272.0, 209.0], [280.0, 254.0], [279.0, 189.0], [278.0, 201.0], [299.0, 10134.0], [316.0, 8277.0], [307.0, 196.0], [335.0, 216.0], [326.0, 100117.5], [338.0, 7807.0], [342.0, 228.0], [365.0, 11921.0], [357.0, 228.0], [374.0, 218.0], [369.0, 236.0], [381.0, 210.0], [376.0, 217.0], [386.0, 219.0], [392.0, 181.0], [384.0, 206.0], [393.0, 3825.5], [388.0, 203.0], [385.0, 206.0], [390.0, 216.0], [399.0, 209.0], [387.0, 234.0], [396.0, 237.0], [406.0, 218.0], [404.0, 228.0], [403.0, 232.0], [401.0, 215.0], [410.0, 10233.0], [407.0, 139.0], [408.0, 193.0], [400.0, 212.0], [414.0, 185.0], [418.0, 116.0], [416.0, 224.0], [429.0, 162.0], [419.0, 252.0], [422.0, 231.0], [423.0, 220.0], [446.0, 188.0], [445.0, 117.0], [437.0, 10767.0], [438.0, 253.0], [451.0, 8455.0], [460.0, 200.0], [466.0, 11824.0], [478.0, 186.0], [464.0, 10631.0], [465.0, 116.0], [472.0, 172.0], [471.0, 231.0], [467.0, 275.0], [474.0, 201.0], [469.0, 236.0], [489.0, 170.0], [482.0, 13977.0], [484.0, 231.0], [496.0, 251.5], [543.0, 10644.0], [537.0, 214.0], [539.0, 9850.0], [570.0, 126.0], [562.0, 7830.0], [567.0, 363.0], [559.0, 252.0], [576.0, 249.5], [618.0, 229.0], [630.0, 388.0], [651.0, 231.0], [663.0, 319.0], [678.0, 9888.0], [680.0, 353.0], [700.0, 213.0], [719.0, 194.0], [724.0, 319.0], [711.0, 171.0], [745.0, 208.0], [766.0, 220.0], [739.0, 241.0], [756.0, 182.0], [737.0, 237.0], [796.0, 225.0], [783.0, 145.0], [790.0, 188.0], [784.0, 239.0], [798.0, 223.0], [794.0, 202.0], [776.0, 210.5], [775.0, 229.0], [774.0, 336.0], [828.0, 171.0], [800.0, 222.0], [808.0, 182.0], [804.0, 253.5], [807.0, 343.0], [814.0, 195.0], [803.0, 226.0], [827.0, 526.0], [837.0, 210.0], [863.0, 220.0], [843.0, 192.0], [884.0, 251.0], [924.0, 10597.0], [903.0, 239.0], [950.0, 112.0], [985.0, 263.0], [1030.0, 110.0], [1067.0, 251.0], [1091.0, 189.0], [1129.0, 232.0], [1126.0, 256.0], [1143.0, 223.0], [1138.0, 231.0], [1150.0, 224.0], [1199.0, 166.0], [1192.0, 142.0], [1204.0, 317.0], [1178.0, 238.0], [1162.0, 468.0], [1232.0, 225.0], [1270.0, 241.0], [1245.0, 253.0], [1318.0, 240.0], [1529.0, 468.0], [1526.0, 374.0], [1717.0, 176.0], [1683.0, 481.0], [1835.0, 380.0], [1949.0, 424.0], [1.0, 64170.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[145.0, 73860.5], [630.0, 115652.0], [651.0, 11347.0], [739.0, 15513.0], [1318.0, 89575.0], [6.0, 24666.0], [384.0, 10985.0], [96.0, 96824.0], [408.0, 20487.0], [414.0, 127431.0], [418.0, 10657.0], [1683.0, 119485.0], [478.0, 24520.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1949.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 100117.5, "series": [{"data": [[2.0, 48921.0], [3.0, 44584.5], [4.0, 47445.5], [5.0, 5489.0], [6.0, 29308.5], [7.0, 7863.0], [8.0, 11267.5], [9.0, 49491.0], [11.0, 6315.0], [14.0, 1276.5], [17.0, 11320.0], [18.0, 8944.5], [19.0, 2252.0], [20.0, 49.5], [27.0, 54916.5], [28.0, 92000.0], [29.0, 67029.0], [30.0, 1994.0], [31.0, 2086.0], [33.0, 263.0], [35.0, 42990.0], [34.0, 207.0], [38.0, 1392.5], [40.0, 4238.0], [41.0, 4445.0], [45.0, 98775.0], [49.0, 3334.0], [57.0, 1424.0], [61.0, 70.0], [60.0, 1274.0], [63.0, 13490.0], [62.0, 1068.5], [66.0, 1384.5], [70.0, 1138.0], [81.0, 75.0], [95.0, 7926.0], [94.0, 69058.0], [96.0, 193.0], [102.0, 114.0], [110.0, 319.0], [116.0, 97.0], [117.0, 100053.0], [122.0, 7273.0], [126.0, 110.0], [128.0, 165.0], [133.0, 130.0], [138.0, 67158.5], [145.0, 8004.0], [160.0, 122.0], [165.0, 200.0], [163.0, 1078.0], [178.0, 131.0], [191.0, 104.0], [199.0, 31573.0], [196.0, 141.0], [204.0, 208.0], [246.0, 252.0], [241.0, 238.0], [242.0, 230.5], [249.0, 100029.0], [264.0, 185.5], [275.0, 81.0], [273.0, 205.0], [272.0, 209.0], [280.0, 254.0], [279.0, 189.0], [278.0, 201.0], [299.0, 10134.0], [316.0, 8277.0], [307.0, 196.0], [335.0, 216.0], [326.0, 100117.5], [338.0, 7807.0], [342.0, 228.0], [365.0, 11921.0], [357.0, 228.0], [374.0, 218.0], [369.0, 236.0], [381.0, 210.0], [376.0, 217.0], [386.0, 219.0], [392.0, 181.0], [384.0, 206.0], [393.0, 3825.5], [388.0, 203.0], [385.0, 206.0], [390.0, 216.0], [399.0, 209.0], [387.0, 234.0], [396.0, 237.0], [406.0, 218.0], [404.0, 228.0], [403.0, 232.0], [401.0, 215.0], [410.0, 10233.0], [407.0, 139.0], [408.0, 193.0], [400.0, 212.0], [414.0, 185.0], [418.0, 116.0], [416.0, 224.0], [429.0, 162.0], [419.0, 252.0], [422.0, 231.0], [423.0, 220.0], [446.0, 188.0], [445.0, 117.0], [437.0, 10767.0], [438.0, 253.0], [451.0, 8455.0], [460.0, 200.0], [466.0, 11824.0], [478.0, 186.0], [464.0, 10631.0], [465.0, 116.0], [472.0, 172.0], [471.0, 231.0], [467.0, 275.0], [474.0, 201.0], [469.0, 236.0], [489.0, 170.0], [482.0, 13977.0], [484.0, 231.0], [496.0, 251.5], [543.0, 10644.0], [537.0, 214.0], [539.0, 9850.0], [570.0, 126.0], [562.0, 7830.0], [567.0, 363.0], [559.0, 252.0], [576.0, 249.5], [618.0, 229.0], [630.0, 388.0], [651.0, 231.0], [663.0, 319.0], [678.0, 9888.0], [680.0, 353.0], [700.0, 213.0], [719.0, 194.0], [724.0, 319.0], [711.0, 171.0], [745.0, 208.0], [766.0, 220.0], [739.0, 241.0], [756.0, 182.0], [737.0, 237.0], [796.0, 225.0], [783.0, 145.0], [790.0, 188.0], [784.0, 239.0], [798.0, 223.0], [794.0, 202.0], [776.0, 210.5], [775.0, 229.0], [774.0, 336.0], [828.0, 171.0], [800.0, 222.0], [808.0, 182.0], [804.0, 253.5], [807.0, 343.0], [814.0, 195.0], [803.0, 226.0], [827.0, 526.0], [837.0, 210.0], [863.0, 220.0], [843.0, 192.0], [884.0, 251.0], [924.0, 10597.0], [903.0, 239.0], [950.0, 112.0], [985.0, 263.0], [1030.0, 110.0], [1067.0, 251.0], [1091.0, 189.0], [1129.0, 232.0], [1126.0, 256.0], [1143.0, 223.0], [1138.0, 231.0], [1150.0, 224.0], [1199.0, 166.0], [1192.0, 142.0], [1204.0, 317.0], [1178.0, 238.0], [1162.0, 468.0], [1232.0, 225.0], [1270.0, 241.0], [1245.0, 253.0], [1318.0, 240.0], [1529.0, 468.0], [1526.0, 374.0], [1717.0, 176.0], [1683.0, 481.0], [1835.0, 380.0], [1949.0, 424.0], [1.0, 64170.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[145.0, 0.0], [630.0, 0.0], [651.0, 0.0], [739.0, 0.0], [1318.0, 0.0], [6.0, 0.0], [384.0, 0.0], [96.0, 0.0], [408.0, 0.0], [414.0, 0.0], [418.0, 0.0], [1683.0, 0.0], [478.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1949.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 12.233333333333333, "minX": 1.68288612E12, "maxY": 426.6666666666667, "series": [{"data": [[1.68288612E12, 393.3333333333333], [1.6828863E12, 420.0], [1.68288624E12, 420.0], [1.68288642E12, 12.233333333333333], [1.68288636E12, 426.6666666666667], [1.68288618E12, 333.3333333333333]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68288642E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.68288612E12, "maxY": 448.65, "series": [{"data": [[1.68288612E12, 350.85], [1.6828863E12, 416.76666666666665], [1.68288624E12, 448.65], [1.68288642E12, 14.183333333333334], [1.68288636E12, 429.21666666666664], [1.68288648E12, 13.616666666666667], [1.68288618E12, 325.85]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.68288612E12, 1.2666666666666666], [1.6828863E12, 0.7], [1.68288624E12, 0.6833333333333333], [1.68288636E12, 0.016666666666666666], [1.68288618E12, 3.7666666666666666]], "isOverall": false, "label": "Non HTTP response code: java.net.SocketException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68288648E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.68288612E12, "maxY": 448.65, "series": [{"data": [[1.68288612E12, 350.85], [1.6828863E12, 416.76666666666665], [1.68288624E12, 448.65], [1.68288642E12, 14.183333333333334], [1.68288636E12, 429.21666666666664], [1.68288648E12, 13.616666666666667], [1.68288618E12, 325.85]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.68288612E12, 1.2666666666666666], [1.6828863E12, 0.7], [1.68288624E12, 0.6833333333333333], [1.68288636E12, 0.016666666666666666], [1.68288618E12, 3.7666666666666666]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68288648E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.68288612E12, "maxY": 448.65, "series": [{"data": [[1.68288612E12, 350.85], [1.6828863E12, 416.76666666666665], [1.68288624E12, 448.65], [1.68288642E12, 14.183333333333334], [1.68288636E12, 429.21666666666664], [1.68288648E12, 13.616666666666667], [1.68288618E12, 325.85]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.68288612E12, 1.2666666666666666], [1.6828863E12, 0.7], [1.68288624E12, 0.6833333333333333], [1.68288636E12, 0.016666666666666666], [1.68288618E12, 3.7666666666666666]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68288648E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

