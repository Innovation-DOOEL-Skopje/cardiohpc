/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 11.0, "minX": 0.0, "maxY": 199224.0, "series": [{"data": [[0.0, 11.0], [0.1, 23.0], [0.2, 31.0], [0.3, 34.0], [0.4, 38.0], [0.5, 39.0], [0.6, 42.0], [0.7, 46.0], [0.8, 47.0], [0.9, 49.0], [1.0, 51.0], [1.1, 53.0], [1.2, 55.0], [1.3, 56.0], [1.4, 57.0], [1.5, 58.0], [1.6, 59.0], [1.7, 60.0], [1.8, 61.0], [1.9, 62.0], [2.0, 63.0], [2.1, 63.0], [2.2, 64.0], [2.3, 65.0], [2.4, 66.0], [2.5, 67.0], [2.6, 68.0], [2.7, 69.0], [2.8, 70.0], [2.9, 71.0], [3.0, 72.0], [3.1, 73.0], [3.2, 74.0], [3.3, 74.0], [3.4, 75.0], [3.5, 75.0], [3.6, 76.0], [3.7, 76.0], [3.8, 77.0], [3.9, 78.0], [4.0, 78.0], [4.1, 79.0], [4.2, 80.0], [4.3, 81.0], [4.4, 82.0], [4.5, 82.0], [4.6, 83.0], [4.7, 84.0], [4.8, 84.0], [4.9, 85.0], [5.0, 85.0], [5.1, 85.0], [5.2, 86.0], [5.3, 86.0], [5.4, 87.0], [5.5, 87.0], [5.6, 87.0], [5.7, 88.0], [5.8, 88.0], [5.9, 88.0], [6.0, 89.0], [6.1, 89.0], [6.2, 89.0], [6.3, 90.0], [6.4, 90.0], [6.5, 90.0], [6.6, 91.0], [6.7, 91.0], [6.8, 92.0], [6.9, 92.0], [7.0, 93.0], [7.1, 93.0], [7.2, 94.0], [7.3, 94.0], [7.4, 94.0], [7.5, 95.0], [7.6, 95.0], [7.7, 96.0], [7.8, 96.0], [7.9, 97.0], [8.0, 97.0], [8.1, 97.0], [8.2, 97.0], [8.3, 98.0], [8.4, 98.0], [8.5, 98.0], [8.6, 99.0], [8.7, 99.0], [8.8, 99.0], [8.9, 100.0], [9.0, 100.0], [9.1, 100.0], [9.2, 101.0], [9.3, 101.0], [9.4, 102.0], [9.5, 102.0], [9.6, 103.0], [9.7, 103.0], [9.8, 104.0], [9.9, 104.0], [10.0, 105.0], [10.1, 105.0], [10.2, 105.0], [10.3, 106.0], [10.4, 106.0], [10.5, 106.0], [10.6, 107.0], [10.7, 107.0], [10.8, 107.0], [10.9, 107.0], [11.0, 108.0], [11.1, 108.0], [11.2, 109.0], [11.3, 109.0], [11.4, 109.0], [11.5, 109.0], [11.6, 110.0], [11.7, 110.0], [11.8, 111.0], [11.9, 111.0], [12.0, 112.0], [12.1, 112.0], [12.2, 113.0], [12.3, 113.0], [12.4, 114.0], [12.5, 114.0], [12.6, 115.0], [12.7, 115.0], [12.8, 115.0], [12.9, 116.0], [13.0, 116.0], [13.1, 116.0], [13.2, 117.0], [13.3, 117.0], [13.4, 117.0], [13.5, 118.0], [13.6, 118.0], [13.7, 118.0], [13.8, 119.0], [13.9, 119.0], [14.0, 119.0], [14.1, 119.0], [14.2, 120.0], [14.3, 120.0], [14.4, 120.0], [14.5, 121.0], [14.6, 121.0], [14.7, 121.0], [14.8, 122.0], [14.9, 122.0], [15.0, 123.0], [15.1, 123.0], [15.2, 123.0], [15.3, 123.0], [15.4, 124.0], [15.5, 124.0], [15.6, 124.0], [15.7, 125.0], [15.8, 125.0], [15.9, 125.0], [16.0, 126.0], [16.1, 126.0], [16.2, 127.0], [16.3, 127.0], [16.4, 127.0], [16.5, 127.0], [16.6, 128.0], [16.7, 128.0], [16.8, 128.0], [16.9, 129.0], [17.0, 129.0], [17.1, 129.0], [17.2, 129.0], [17.3, 130.0], [17.4, 130.0], [17.5, 131.0], [17.6, 131.0], [17.7, 131.0], [17.8, 131.0], [17.9, 131.0], [18.0, 132.0], [18.1, 132.0], [18.2, 132.0], [18.3, 132.0], [18.4, 133.0], [18.5, 133.0], [18.6, 133.0], [18.7, 134.0], [18.8, 134.0], [18.9, 134.0], [19.0, 135.0], [19.1, 135.0], [19.2, 135.0], [19.3, 136.0], [19.4, 136.0], [19.5, 136.0], [19.6, 136.0], [19.7, 136.0], [19.8, 137.0], [19.9, 137.0], [20.0, 137.0], [20.1, 137.0], [20.2, 137.0], [20.3, 138.0], [20.4, 138.0], [20.5, 138.0], [20.6, 139.0], [20.7, 139.0], [20.8, 139.0], [20.9, 139.0], [21.0, 140.0], [21.1, 140.0], [21.2, 141.0], [21.3, 141.0], [21.4, 141.0], [21.5, 142.0], [21.6, 142.0], [21.7, 142.0], [21.8, 142.0], [21.9, 143.0], [22.0, 143.0], [22.1, 143.0], [22.2, 143.0], [22.3, 143.0], [22.4, 144.0], [22.5, 144.0], [22.6, 144.0], [22.7, 144.0], [22.8, 144.0], [22.9, 144.0], [23.0, 144.0], [23.1, 145.0], [23.2, 145.0], [23.3, 145.0], [23.4, 145.0], [23.5, 145.0], [23.6, 145.0], [23.7, 146.0], [23.8, 146.0], [23.9, 146.0], [24.0, 146.0], [24.1, 146.0], [24.2, 146.0], [24.3, 147.0], [24.4, 147.0], [24.5, 147.0], [24.6, 148.0], [24.7, 148.0], [24.8, 148.0], [24.9, 148.0], [25.0, 148.0], [25.1, 149.0], [25.2, 149.0], [25.3, 149.0], [25.4, 149.0], [25.5, 149.0], [25.6, 149.0], [25.7, 150.0], [25.8, 150.0], [25.9, 150.0], [26.0, 150.0], [26.1, 150.0], [26.2, 150.0], [26.3, 150.0], [26.4, 151.0], [26.5, 151.0], [26.6, 151.0], [26.7, 151.0], [26.8, 151.0], [26.9, 151.0], [27.0, 151.0], [27.1, 152.0], [27.2, 152.0], [27.3, 152.0], [27.4, 152.0], [27.5, 152.0], [27.6, 153.0], [27.7, 153.0], [27.8, 153.0], [27.9, 153.0], [28.0, 153.0], [28.1, 154.0], [28.2, 154.0], [28.3, 154.0], [28.4, 154.0], [28.5, 154.0], [28.6, 155.0], [28.7, 155.0], [28.8, 155.0], [28.9, 155.0], [29.0, 155.0], [29.1, 156.0], [29.2, 156.0], [29.3, 156.0], [29.4, 156.0], [29.5, 156.0], [29.6, 156.0], [29.7, 157.0], [29.8, 157.0], [29.9, 157.0], [30.0, 157.0], [30.1, 158.0], [30.2, 158.0], [30.3, 158.0], [30.4, 158.0], [30.5, 159.0], [30.6, 159.0], [30.7, 159.0], [30.8, 159.0], [30.9, 159.0], [31.0, 159.0], [31.1, 160.0], [31.2, 160.0], [31.3, 160.0], [31.4, 160.0], [31.5, 160.0], [31.6, 160.0], [31.7, 161.0], [31.8, 161.0], [31.9, 161.0], [32.0, 161.0], [32.1, 161.0], [32.2, 161.0], [32.3, 161.0], [32.4, 161.0], [32.5, 162.0], [32.6, 162.0], [32.7, 162.0], [32.8, 162.0], [32.9, 162.0], [33.0, 162.0], [33.1, 162.0], [33.2, 162.0], [33.3, 162.0], [33.4, 163.0], [33.5, 163.0], [33.6, 163.0], [33.7, 163.0], [33.8, 163.0], [33.9, 163.0], [34.0, 163.0], [34.1, 163.0], [34.2, 163.0], [34.3, 164.0], [34.4, 164.0], [34.5, 164.0], [34.6, 164.0], [34.7, 164.0], [34.8, 164.0], [34.9, 164.0], [35.0, 164.0], [35.1, 164.0], [35.2, 164.0], [35.3, 164.0], [35.4, 165.0], [35.5, 165.0], [35.6, 165.0], [35.7, 165.0], [35.8, 165.0], [35.9, 165.0], [36.0, 165.0], [36.1, 165.0], [36.2, 165.0], [36.3, 166.0], [36.4, 166.0], [36.5, 166.0], [36.6, 166.0], [36.7, 166.0], [36.8, 166.0], [36.9, 166.0], [37.0, 166.0], [37.1, 167.0], [37.2, 167.0], [37.3, 167.0], [37.4, 167.0], [37.5, 167.0], [37.6, 167.0], [37.7, 168.0], [37.8, 168.0], [37.9, 168.0], [38.0, 168.0], [38.1, 168.0], [38.2, 168.0], [38.3, 169.0], [38.4, 169.0], [38.5, 169.0], [38.6, 169.0], [38.7, 169.0], [38.8, 169.0], [38.9, 169.0], [39.0, 169.0], [39.1, 170.0], [39.2, 170.0], [39.3, 170.0], [39.4, 170.0], [39.5, 170.0], [39.6, 170.0], [39.7, 170.0], [39.8, 170.0], [39.9, 170.0], [40.0, 170.0], [40.1, 170.0], [40.2, 171.0], [40.3, 171.0], [40.4, 171.0], [40.5, 171.0], [40.6, 171.0], [40.7, 171.0], [40.8, 171.0], [40.9, 171.0], [41.0, 171.0], [41.1, 171.0], [41.2, 171.0], [41.3, 172.0], [41.4, 172.0], [41.5, 172.0], [41.6, 172.0], [41.7, 172.0], [41.8, 172.0], [41.9, 172.0], [42.0, 172.0], [42.1, 172.0], [42.2, 173.0], [42.3, 173.0], [42.4, 173.0], [42.5, 173.0], [42.6, 173.0], [42.7, 173.0], [42.8, 173.0], [42.9, 174.0], [43.0, 174.0], [43.1, 174.0], [43.2, 174.0], [43.3, 174.0], [43.4, 174.0], [43.5, 174.0], [43.6, 174.0], [43.7, 174.0], [43.8, 175.0], [43.9, 175.0], [44.0, 175.0], [44.1, 175.0], [44.2, 175.0], [44.3, 175.0], [44.4, 175.0], [44.5, 175.0], [44.6, 175.0], [44.7, 175.0], [44.8, 175.0], [44.9, 176.0], [45.0, 176.0], [45.1, 176.0], [45.2, 176.0], [45.3, 176.0], [45.4, 176.0], [45.5, 176.0], [45.6, 176.0], [45.7, 176.0], [45.8, 176.0], [45.9, 177.0], [46.0, 177.0], [46.1, 177.0], [46.2, 177.0], [46.3, 177.0], [46.4, 177.0], [46.5, 177.0], [46.6, 177.0], [46.7, 177.0], [46.8, 177.0], [46.9, 178.0], [47.0, 178.0], [47.1, 178.0], [47.2, 178.0], [47.3, 178.0], [47.4, 178.0], [47.5, 178.0], [47.6, 178.0], [47.7, 178.0], [47.8, 179.0], [47.9, 179.0], [48.0, 179.0], [48.1, 179.0], [48.2, 179.0], [48.3, 179.0], [48.4, 179.0], [48.5, 179.0], [48.6, 179.0], [48.7, 179.0], [48.8, 179.0], [48.9, 179.0], [49.0, 180.0], [49.1, 180.0], [49.2, 180.0], [49.3, 180.0], [49.4, 180.0], [49.5, 180.0], [49.6, 180.0], [49.7, 180.0], [49.8, 180.0], [49.9, 181.0], [50.0, 181.0], [50.1, 181.0], [50.2, 181.0], [50.3, 181.0], [50.4, 181.0], [50.5, 181.0], [50.6, 182.0], [50.7, 182.0], [50.8, 182.0], [50.9, 182.0], [51.0, 182.0], [51.1, 182.0], [51.2, 182.0], [51.3, 183.0], [51.4, 183.0], [51.5, 183.0], [51.6, 183.0], [51.7, 183.0], [51.8, 183.0], [51.9, 183.0], [52.0, 184.0], [52.1, 184.0], [52.2, 184.0], [52.3, 184.0], [52.4, 184.0], [52.5, 184.0], [52.6, 185.0], [52.7, 185.0], [52.8, 185.0], [52.9, 185.0], [53.0, 185.0], [53.1, 185.0], [53.2, 185.0], [53.3, 186.0], [53.4, 186.0], [53.5, 186.0], [53.6, 186.0], [53.7, 186.0], [53.8, 186.0], [53.9, 187.0], [54.0, 187.0], [54.1, 187.0], [54.2, 187.0], [54.3, 188.0], [54.4, 188.0], [54.5, 188.0], [54.6, 188.0], [54.7, 189.0], [54.8, 189.0], [54.9, 189.0], [55.0, 190.0], [55.1, 190.0], [55.2, 190.0], [55.3, 191.0], [55.4, 191.0], [55.5, 192.0], [55.6, 192.0], [55.7, 193.0], [55.8, 193.0], [55.9, 193.0], [56.0, 194.0], [56.1, 194.0], [56.2, 194.0], [56.3, 195.0], [56.4, 195.0], [56.5, 196.0], [56.6, 196.0], [56.7, 196.0], [56.8, 196.0], [56.9, 196.0], [57.0, 197.0], [57.1, 197.0], [57.2, 197.0], [57.3, 198.0], [57.4, 198.0], [57.5, 198.0], [57.6, 199.0], [57.7, 199.0], [57.8, 199.0], [57.9, 200.0], [58.0, 200.0], [58.1, 200.0], [58.2, 201.0], [58.3, 201.0], [58.4, 201.0], [58.5, 201.0], [58.6, 201.0], [58.7, 202.0], [58.8, 202.0], [58.9, 202.0], [59.0, 202.0], [59.1, 203.0], [59.2, 203.0], [59.3, 204.0], [59.4, 204.0], [59.5, 204.0], [59.6, 205.0], [59.7, 206.0], [59.8, 206.0], [59.9, 207.0], [60.0, 208.0], [60.1, 208.0], [60.2, 209.0], [60.3, 209.0], [60.4, 210.0], [60.5, 211.0], [60.6, 212.0], [60.7, 212.0], [60.8, 213.0], [60.9, 215.0], [61.0, 216.0], [61.1, 217.0], [61.2, 217.0], [61.3, 220.0], [61.4, 223.0], [61.5, 228.0], [61.6, 229.0], [61.7, 230.0], [61.8, 232.0], [61.9, 232.0], [62.0, 235.0], [62.1, 237.0], [62.2, 237.0], [62.3, 238.0], [62.4, 240.0], [62.5, 246.0], [62.6, 247.0], [62.7, 248.0], [62.8, 248.0], [62.9, 248.0], [63.0, 249.0], [63.1, 253.0], [63.2, 254.0], [63.3, 257.0], [63.4, 258.0], [63.5, 264.0], [63.6, 267.0], [63.7, 267.0], [63.8, 268.0], [63.9, 269.0], [64.0, 271.0], [64.1, 271.0], [64.2, 273.0], [64.3, 275.0], [64.4, 277.0], [64.5, 283.0], [64.6, 285.0], [64.7, 288.0], [64.8, 291.0], [64.9, 295.0], [65.0, 296.0], [65.1, 298.0], [65.2, 299.0], [65.3, 300.0], [65.4, 301.0], [65.5, 302.0], [65.6, 311.0], [65.7, 312.0], [65.8, 313.0], [65.9, 313.0], [66.0, 313.0], [66.1, 314.0], [66.2, 314.0], [66.3, 315.0], [66.4, 315.0], [66.5, 316.0], [66.6, 321.0], [66.7, 322.0], [66.8, 324.0], [66.9, 328.0], [67.0, 331.0], [67.1, 333.0], [67.2, 335.0], [67.3, 336.0], [67.4, 337.0], [67.5, 344.0], [67.6, 350.0], [67.7, 352.0], [67.8, 363.0], [67.9, 367.0], [68.0, 368.0], [68.1, 369.0], [68.2, 375.0], [68.3, 376.0], [68.4, 379.0], [68.5, 381.0], [68.6, 381.0], [68.7, 382.0], [68.8, 425.0], [68.9, 440.0], [69.0, 453.0], [69.1, 454.0], [69.2, 461.0], [69.3, 466.0], [69.4, 467.0], [69.5, 468.0], [69.6, 473.0], [69.7, 503.0], [69.8, 516.0], [69.9, 645.0], [70.0, 678.0], [70.1, 757.0], [70.2, 785.0], [70.3, 827.0], [70.4, 888.0], [70.5, 922.0], [70.6, 1012.0], [70.7, 1028.0], [70.8, 1047.0], [70.9, 1096.0], [71.0, 1150.0], [71.1, 1158.0], [71.2, 1175.0], [71.3, 1189.0], [71.4, 1213.0], [71.5, 1315.0], [71.6, 1351.0], [71.7, 1412.0], [71.8, 1490.0], [71.9, 1621.0], [72.0, 1683.0], [72.1, 1712.0], [72.2, 1748.0], [72.3, 1780.0], [72.4, 1816.0], [72.5, 1823.0], [72.6, 1890.0], [72.7, 1927.0], [72.8, 1960.0], [72.9, 1971.0], [73.0, 1996.0], [73.1, 2024.0], [73.2, 2089.0], [73.3, 2255.0], [73.4, 2301.0], [73.5, 2360.0], [73.6, 2404.0], [73.7, 2455.0], [73.8, 2502.0], [73.9, 2544.0], [74.0, 2568.0], [74.1, 2616.0], [74.2, 2709.0], [74.3, 2758.0], [74.4, 2838.0], [74.5, 2942.0], [74.6, 3046.0], [74.7, 3290.0], [74.8, 3437.0], [74.9, 3466.0], [75.0, 3471.0], [75.1, 3505.0], [75.2, 3609.0], [75.3, 3705.0], [75.4, 3738.0], [75.5, 3879.0], [75.6, 3910.0], [75.7, 3987.0], [75.8, 4136.0], [75.9, 4294.0], [76.0, 4655.0], [76.1, 4963.0], [76.2, 5163.0], [76.3, 5179.0], [76.4, 5293.0], [76.5, 5459.0], [76.6, 5520.0], [76.7, 5523.0], [76.8, 5576.0], [76.9, 5578.0], [77.0, 5689.0], [77.1, 5782.0], [77.2, 5850.0], [77.3, 5990.0], [77.4, 5991.0], [77.5, 5993.0], [77.6, 6022.0], [77.7, 6346.0], [77.8, 6594.0], [77.9, 6729.0], [78.0, 6812.0], [78.1, 6827.0], [78.2, 6874.0], [78.3, 6880.0], [78.4, 6902.0], [78.5, 6940.0], [78.6, 6940.0], [78.7, 7032.0], [78.8, 7036.0], [78.9, 7199.0], [79.0, 7281.0], [79.1, 7315.0], [79.2, 7317.0], [79.3, 7381.0], [79.4, 7456.0], [79.5, 7509.0], [79.6, 7576.0], [79.7, 7578.0], [79.8, 7674.0], [79.9, 7692.0], [80.0, 7749.0], [80.1, 7850.0], [80.2, 7982.0], [80.3, 8073.0], [80.4, 8142.0], [80.5, 8197.0], [80.6, 8213.0], [80.7, 8223.0], [80.8, 8243.0], [80.9, 8290.0], [81.0, 8294.0], [81.1, 8338.0], [81.2, 8364.0], [81.3, 8376.0], [81.4, 8416.0], [81.5, 8451.0], [81.6, 8475.0], [81.7, 8517.0], [81.8, 8559.0], [81.9, 8615.0], [82.0, 8644.0], [82.1, 8647.0], [82.2, 8672.0], [82.3, 8686.0], [82.4, 8696.0], [82.5, 8737.0], [82.6, 8749.0], [82.7, 8850.0], [82.8, 8907.0], [82.9, 8913.0], [83.0, 8923.0], [83.1, 8925.0], [83.2, 9002.0], [83.3, 9035.0], [83.4, 9070.0], [83.5, 9087.0], [83.6, 9103.0], [83.7, 9132.0], [83.8, 9148.0], [83.9, 9270.0], [84.0, 9350.0], [84.1, 9381.0], [84.2, 9383.0], [84.3, 9411.0], [84.4, 9520.0], [84.5, 9556.0], [84.6, 9568.0], [84.7, 9569.0], [84.8, 9592.0], [84.9, 9622.0], [85.0, 9625.0], [85.1, 9628.0], [85.2, 9637.0], [85.3, 9640.0], [85.4, 9775.0], [85.5, 9859.0], [85.6, 9883.0], [85.7, 9895.0], [85.8, 9913.0], [85.9, 9944.0], [86.0, 9947.0], [86.1, 9954.0], [86.2, 9966.0], [86.3, 9983.0], [86.4, 9984.0], [86.5, 9986.0], [86.6, 9987.0], [86.7, 10027.0], [86.8, 10080.0], [86.9, 10127.0], [87.0, 10184.0], [87.1, 10188.0], [87.2, 10215.0], [87.3, 10221.0], [87.4, 10240.0], [87.5, 10281.0], [87.6, 10371.0], [87.7, 10448.0], [87.8, 10587.0], [87.9, 10605.0], [88.0, 10636.0], [88.1, 10657.0], [88.2, 10690.0], [88.3, 10717.0], [88.4, 10748.0], [88.5, 10790.0], [88.6, 10812.0], [88.7, 10846.0], [88.8, 10848.0], [88.9, 10909.0], [89.0, 10910.0], [89.1, 10948.0], [89.2, 11013.0], [89.3, 11023.0], [89.4, 11050.0], [89.5, 11159.0], [89.6, 11225.0], [89.7, 11243.0], [89.8, 11247.0], [89.9, 11270.0], [90.0, 11311.0], [90.1, 11335.0], [90.2, 11376.0], [90.3, 11441.0], [90.4, 11462.0], [90.5, 11497.0], [90.6, 11527.0], [90.7, 11565.0], [90.8, 11577.0], [90.9, 11631.0], [91.0, 11731.0], [91.1, 11980.0], [91.2, 12207.0], [91.3, 12231.0], [91.4, 12323.0], [91.5, 12350.0], [91.6, 12459.0], [91.7, 12743.0], [91.8, 13183.0], [91.9, 13378.0], [92.0, 13723.0], [92.1, 13858.0], [92.2, 13996.0], [92.3, 14169.0], [92.4, 14522.0], [92.5, 14700.0], [92.6, 14892.0], [92.7, 15630.0], [92.8, 16377.0], [92.9, 16791.0], [93.0, 17598.0], [93.1, 19199.0], [93.2, 19557.0], [93.3, 22817.0], [93.4, 23071.0], [93.5, 23160.0], [93.6, 24753.0], [93.7, 26258.0], [93.8, 29607.0], [93.9, 30131.0], [94.0, 31683.0], [94.1, 33028.0], [94.2, 35132.0], [94.3, 37131.0], [94.4, 39385.0], [94.5, 41755.0], [94.6, 44156.0], [94.7, 44876.0], [94.8, 45332.0], [94.9, 49755.0], [95.0, 52858.0], [95.1, 58025.0], [95.2, 63162.0], [95.3, 63604.0], [95.4, 63746.0], [95.5, 64266.0], [95.6, 64732.0], [95.7, 65936.0], [95.8, 67523.0], [95.9, 67670.0], [96.0, 68042.0], [96.1, 69064.0], [96.2, 70191.0], [96.3, 71169.0], [96.4, 71829.0], [96.5, 73649.0], [96.6, 74669.0], [96.7, 75050.0], [96.8, 76095.0], [96.9, 79396.0], [97.0, 84442.0], [97.1, 92023.0], [97.2, 94070.0], [97.3, 100013.0], [97.4, 100024.0], [97.5, 100040.0], [97.6, 100058.0], [97.7, 100067.0], [97.8, 100077.0], [97.9, 100083.0], [98.0, 100097.0], [98.1, 100124.0], [98.2, 100137.0], [98.3, 100185.0], [98.4, 100204.0], [98.5, 100212.0], [98.6, 100222.0], [98.7, 100234.0], [98.8, 101119.0], [98.9, 127765.0], [99.0, 128443.0], [99.1, 129090.0], [99.2, 131141.0], [99.3, 131213.0], [99.4, 132682.0], [99.5, 133635.0], [99.6, 134796.0], [99.7, 141029.0], [99.8, 144849.0], [99.9, 147853.0], [100.0, 199224.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 36733.0, "series": [{"data": [[0.0, 6672.0], [141600.0, 1.0], [148000.0, 4.0], [199200.0, 1.0], [145700.0, 5.0], [66700.0, 1.0], [69900.0, 8.0], [73100.0, 7.0], [76300.0, 15.0], [79500.0, 2.0], [85900.0, 2.0], [82700.0, 1.0], [89100.0, 2.0], [127500.0, 18.0], [130700.0, 28.0], [137000.0, 2.0], [100.0, 36733.0], [134700.0, 14.0], [37700.0, 8.0], [39300.0, 7.0], [40900.0, 2.0], [44100.0, 29.0], [45700.0, 4.0], [47300.0, 5.0], [48900.0, 1.0], [50500.0, 2.0], [200.0, 5525.0], [52100.0, 4.0], [56900.0, 17.0], [64900.0, 4.0], [65800.0, 21.0], [69000.0, 9.0], [300.0, 2633.0], [78600.0, 2.0], [85000.0, 1.0], [94600.0, 1.0], [101000.0, 29.0], [400.0, 693.0], [500.0, 147.0], [132400.0, 23.0], [145200.0, 4.0], [600.0, 110.0], [700.0, 166.0], [800.0, 142.0], [900.0, 111.0], [1000.0, 254.0], [1100.0, 338.0], [1200.0, 82.0], [1300.0, 160.0], [1400.0, 87.0], [1500.0, 47.0], [1600.0, 131.0], [1700.0, 226.0], [1800.0, 223.0], [1900.0, 275.0], [2000.0, 193.0], [136500.0, 1.0], [2100.0, 19.0], [2300.0, 144.0], [2200.0, 70.0], [2400.0, 167.0], [2500.0, 197.0], [2600.0, 99.0], [2700.0, 110.0], [2800.0, 109.0], [2900.0, 56.0], [3000.0, 38.0], [3100.0, 29.0], [3300.0, 48.0], [3200.0, 47.0], [3400.0, 239.0], [3500.0, 67.0], [3600.0, 71.0], [3700.0, 100.0], [3800.0, 132.0], [3900.0, 117.0], [4000.0, 30.0], [4200.0, 49.0], [68100.0, 2.0], [4400.0, 40.0], [71300.0, 5.0], [4600.0, 19.0], [4800.0, 18.0], [77700.0, 1.0], [74500.0, 4.0], [5000.0, 23.0], [80900.0, 1.0], [5200.0, 39.0], [5600.0, 70.0], [5400.0, 88.0], [5800.0, 22.0], [6000.0, 47.0], [100100.0, 278.0], [6200.0, 5.0], [6400.0, 18.0], [103300.0, 1.0], [6600.0, 28.0], [6800.0, 309.0], [7000.0, 156.0], [7200.0, 101.0], [7400.0, 92.0], [7600.0, 165.0], [7800.0, 69.0], [8000.0, 106.0], [8400.0, 252.0], [134200.0, 1.0], [8800.0, 92.0], [9200.0, 86.0], [9600.0, 391.0], [153400.0, 2.0], [10000.0, 173.0], [10400.0, 58.0], [11200.0, 322.0], [10800.0, 212.0], [11600.0, 108.0], [12000.0, 54.0], [12400.0, 51.0], [12800.0, 3.0], [13200.0, 9.0], [13600.0, 7.0], [14000.0, 52.0], [14800.0, 11.0], [14400.0, 28.0], [15200.0, 4.0], [15600.0, 35.0], [16000.0, 4.0], [16800.0, 34.0], [18400.0, 4.0], [17600.0, 3.0], [19200.0, 15.0], [20000.0, 5.0], [20800.0, 2.0], [22400.0, 1.0], [23200.0, 2.0], [24000.0, 1.0], [26400.0, 4.0], [25600.0, 1.0], [27200.0, 3.0], [28000.0, 1.0], [29600.0, 14.0], [28800.0, 1.0], [31200.0, 1.0], [32000.0, 17.0], [33600.0, 12.0], [131900.0, 1.0], [35200.0, 4.0], [144700.0, 1.0], [38400.0, 2.0], [41600.0, 11.0], [44800.0, 12.0], [43200.0, 2.0], [46400.0, 2.0], [49600.0, 3.0], [51200.0, 7.0], [52800.0, 2.0], [54400.0, 2.0], [56000.0, 2.0], [67200.0, 1.0], [70400.0, 1.0], [73600.0, 12.0], [83200.0, 2.0], [86400.0, 4.0], [140800.0, 7.0], [147200.0, 5.0], [153600.0, 1.0], [132100.0, 2.0], [157700.0, 1.0], [67100.0, 1.0], [70300.0, 5.0], [73500.0, 5.0], [76700.0, 3.0], [92700.0, 1.0], [95900.0, 4.0], [99100.0, 2.0], [127900.0, 1.0], [136200.0, 1.0], [133900.0, 22.0], [33100.0, 2.0], [153100.0, 5.0], [42700.0, 3.0], [44300.0, 20.0], [45900.0, 2.0], [47500.0, 11.0], [50700.0, 4.0], [53900.0, 2.0], [55500.0, 1.0], [58700.0, 2.0], [60300.0, 2.0], [61900.0, 2.0], [63500.0, 10.0], [65100.0, 1.0], [66200.0, 1.0], [72600.0, 10.0], [75800.0, 2.0], [85400.0, 2.0], [88600.0, 2.0], [95000.0, 19.0], [98200.0, 2.0], [68500.0, 24.0], [71700.0, 12.0], [74900.0, 15.0], [81300.0, 1.0], [84500.0, 7.0], [87700.0, 1.0], [90900.0, 2.0], [94100.0, 2.0], [97300.0, 1.0], [133400.0, 1.0], [146200.0, 16.0], [16900.0, 6.0], [17700.0, 3.0], [19300.0, 4.0], [18500.0, 11.0], [20900.0, 3.0], [22500.0, 1.0], [21700.0, 6.0], [23300.0, 25.0], [24100.0, 2.0], [26500.0, 1.0], [27300.0, 3.0], [28100.0, 7.0], [29700.0, 31.0], [31300.0, 8.0], [32100.0, 2.0], [131100.0, 56.0], [35400.0, 2.0], [37000.0, 2.0], [38600.0, 3.0], [150300.0, 4.0], [40200.0, 2.0], [45000.0, 13.0], [43400.0, 21.0], [48200.0, 2.0], [49800.0, 29.0], [53000.0, 2.0], [62600.0, 1.0], [64200.0, 40.0], [67600.0, 20.0], [70800.0, 13.0], [74000.0, 1.0], [77200.0, 2.0], [80400.0, 5.0], [83600.0, 2.0], [90000.0, 2.0], [93200.0, 2.0], [112400.0, 2.0], [118800.0, 2.0], [128400.0, 17.0], [136800.0, 1.0], [143200.0, 1.0], [140900.0, 1.0], [147300.0, 2.0], [153700.0, 3.0], [67500.0, 79.0], [70700.0, 5.0], [73900.0, 5.0], [80300.0, 1.0], [86700.0, 1.0], [93100.0, 2.0], [96300.0, 2.0], [128300.0, 13.0], [132200.0, 3.0], [33300.0, 3.0], [136300.0, 1.0], [36500.0, 3.0], [41300.0, 2.0], [46100.0, 2.0], [47700.0, 2.0], [50900.0, 2.0], [57300.0, 2.0], [58900.0, 2.0], [62100.0, 1.0], [63700.0, 49.0], [65300.0, 2.0], [69800.0, 6.0], [76200.0, 6.0], [82600.0, 2.0], [85800.0, 1.0], [92200.0, 2.0], [127400.0, 13.0], [130600.0, 2.0], [134000.0, 6.0], [153200.0, 8.0], [150900.0, 3.0], [65700.0, 19.0], [68900.0, 4.0], [72100.0, 4.0], [75300.0, 2.0], [78500.0, 4.0], [81700.0, 1.0], [8500.0, 167.0], [8900.0, 327.0], [142200.0, 4.0], [9300.0, 235.0], [9700.0, 77.0], [10100.0, 199.0], [10500.0, 62.0], [10900.0, 189.0], [11300.0, 215.0], [11700.0, 32.0], [12500.0, 11.0], [13300.0, 13.0], [12900.0, 4.0], [13700.0, 57.0], [14100.0, 33.0], [14500.0, 47.0], [14900.0, 17.0], [15300.0, 3.0], [15700.0, 16.0], [16100.0, 1.0], [17000.0, 5.0], [17800.0, 4.0], [19400.0, 40.0], [20200.0, 2.0], [21000.0, 7.0], [22600.0, 1.0], [23400.0, 26.0], [26600.0, 5.0], [27400.0, 1.0], [28200.0, 1.0], [29800.0, 3.0], [31400.0, 2.0], [32200.0, 19.0], [133500.0, 1.0], [34000.0, 3.0], [146300.0, 11.0], [38800.0, 3.0], [37200.0, 4.0], [45200.0, 1.0], [46800.0, 2.0], [48400.0, 3.0], [50000.0, 1.0], [54800.0, 2.0], [56400.0, 1.0], [58000.0, 1.0], [61200.0, 2.0], [64400.0, 44.0], [68000.0, 46.0], [71200.0, 2.0], [77600.0, 1.0], [87200.0, 2.0], [96800.0, 1.0], [100000.0, 536.0], [142400.0, 26.0], [133700.0, 12.0], [152900.0, 1.0], [67900.0, 28.0], [71100.0, 18.0], [74300.0, 20.0], [80700.0, 2.0], [83900.0, 1.0], [106300.0, 1.0], [131400.0, 1.0], [33500.0, 6.0], [135500.0, 2.0], [36700.0, 4.0], [35100.0, 19.0], [148300.0, 5.0], [39900.0, 1.0], [43100.0, 1.0], [44700.0, 2.0], [57500.0, 1.0], [62300.0, 1.0], [63900.0, 10.0], [70200.0, 6.0], [76600.0, 1.0], [79800.0, 12.0], [83000.0, 3.0], [89400.0, 1.0], [127800.0, 19.0], [131000.0, 13.0], [146000.0, 4.0], [152400.0, 1.0], [158800.0, 1.0], [66100.0, 1.0], [72500.0, 2.0], [75700.0, 1.0], [78900.0, 3.0], [85300.0, 4.0], [91700.0, 2.0], [94900.0, 3.0], [98100.0, 1.0], [147800.0, 3.0], [17900.0, 1.0], [18700.0, 8.0], [19500.0, 16.0], [22700.0, 7.0], [23500.0, 1.0], [24300.0, 2.0], [25100.0, 5.0], [25900.0, 3.0], [27500.0, 1.0], [28300.0, 4.0], [29100.0, 2.0], [29900.0, 2.0], [30700.0, 1.0], [34200.0, 4.0], [132700.0, 6.0], [145500.0, 3.0], [43800.0, 2.0], [48600.0, 2.0], [50200.0, 2.0], [51800.0, 2.0], [53400.0, 3.0], [61400.0, 1.0], [64600.0, 3.0], [68400.0, 1.0], [71600.0, 20.0], [74800.0, 3.0], [78000.0, 4.0], [81200.0, 1.0], [84400.0, 3.0], [87600.0, 3.0], [94000.0, 48.0], [132000.0, 2.0], [144800.0, 10.0], [71500.0, 5.0], [74700.0, 5.0], [77900.0, 3.0], [81100.0, 4.0], [84300.0, 1.0], [93900.0, 2.0], [90700.0, 2.0], [100300.0, 9.0], [129100.0, 3.0], [140200.0, 1.0], [131500.0, 5.0], [137900.0, 10.0], [41700.0, 53.0], [43300.0, 4.0], [44900.0, 4.0], [49700.0, 3.0], [52900.0, 1.0], [56100.0, 9.0], [60900.0, 3.0], [62500.0, 2.0], [64100.0, 9.0], [67400.0, 4.0], [70600.0, 3.0], [77000.0, 14.0], [73800.0, 3.0], [83400.0, 2.0], [89800.0, 1.0], [96200.0, 1.0], [128200.0, 20.0], [4300.0, 16.0], [4100.0, 52.0], [66500.0, 3.0], [69700.0, 31.0], [4500.0, 2.0], [72900.0, 4.0], [4700.0, 9.0], [5100.0, 155.0], [79300.0, 4.0], [4900.0, 44.0], [5300.0, 33.0], [5500.0, 282.0], [5700.0, 116.0], [6100.0, 32.0], [5900.0, 272.0], [6300.0, 24.0], [98500.0, 2.0], [6500.0, 48.0], [6700.0, 102.0], [6900.0, 190.0], [7100.0, 35.0], [114500.0, 1.0], [7300.0, 228.0], [7500.0, 177.0], [7700.0, 86.0], [7900.0, 57.0], [8100.0, 130.0], [8200.0, 376.0], [8600.0, 392.0], [9000.0, 264.0], [9400.0, 23.0], [9800.0, 242.0], [10200.0, 294.0], [10600.0, 353.0], [11000.0, 267.0], [11400.0, 184.0], [11800.0, 44.0], [12200.0, 134.0], [12600.0, 13.0], [13000.0, 2.0], [13800.0, 46.0], [13400.0, 3.0], [14200.0, 5.0], [14600.0, 46.0], [15000.0, 18.0], [15400.0, 6.0], [15800.0, 7.0], [16400.0, 7.0], [17200.0, 1.0], [18000.0, 6.0], [18800.0, 4.0], [21200.0, 2.0], [22000.0, 2.0], [22800.0, 8.0], [23600.0, 1.0], [24400.0, 1.0], [25200.0, 4.0], [26000.0, 2.0], [26800.0, 4.0], [28400.0, 2.0], [30000.0, 15.0], [30800.0, 5.0], [31600.0, 17.0], [32400.0, 4.0], [147900.0, 15.0], [37600.0, 1.0], [39200.0, 2.0], [48800.0, 7.0], [52000.0, 2.0], [56800.0, 4.0], [58400.0, 1.0], [63200.0, 9.0], [61600.0, 8.0], [64800.0, 4.0], [65600.0, 1.0], [68800.0, 7.0], [72000.0, 1.0], [75200.0, 1.0], [78400.0, 1.0], [81600.0, 3.0], [88000.0, 1.0], [131200.0, 42.0], [150400.0, 12.0], [141700.0, 4.0], [68700.0, 1.0], [71900.0, 4.0], [75100.0, 34.0], [81500.0, 2.0], [78300.0, 2.0], [84700.0, 2.0], [87900.0, 1.0], [91100.0, 1.0], [94300.0, 1.0], [145800.0, 5.0], [33900.0, 7.0], [35500.0, 7.0], [38700.0, 5.0], [37100.0, 54.0], [41900.0, 2.0], [43500.0, 1.0], [46700.0, 4.0], [48300.0, 9.0], [49900.0, 6.0], [57900.0, 2.0], [59500.0, 2.0], [61100.0, 1.0], [64300.0, 3.0], [67800.0, 9.0], [71000.0, 3.0], [77400.0, 2.0], [74200.0, 3.0], [80600.0, 1.0], [83800.0, 1.0], [96600.0, 1.0], [134800.0, 11.0], [141200.0, 1.0], [132500.0, 5.0], [66900.0, 13.0], [70100.0, 16.0], [73300.0, 4.0], [79700.0, 3.0], [89300.0, 1.0], [105300.0, 1.0], [127700.0, 17.0], [17300.0, 7.0], [16500.0, 7.0], [18100.0, 8.0], [20500.0, 9.0], [22100.0, 4.0], [23700.0, 1.0], [25300.0, 2.0], [26100.0, 4.0], [28500.0, 1.0], [30100.0, 36.0], [31700.0, 3.0], [32500.0, 2.0], [33000.0, 6.0], [34600.0, 4.0], [36200.0, 4.0], [37800.0, 1.0], [39400.0, 22.0], [42600.0, 8.0], [44200.0, 12.0], [45800.0, 3.0], [50600.0, 1.0], [53800.0, 7.0], [57000.0, 2.0], [55400.0, 2.0], [58600.0, 1.0], [63400.0, 1.0], [65000.0, 1.0], [66000.0, 1.0], [72400.0, 4.0], [75600.0, 1.0], [78800.0, 1.0], [82000.0, 2.0], [85200.0, 6.0], [91600.0, 2.0], [104400.0, 1.0], [133600.0, 46.0], [146400.0, 14.0], [152800.0, 4.0], [150500.0, 1.0], [65900.0, 34.0], [69100.0, 4.0], [72300.0, 5.0], [75500.0, 3.0], [101100.0, 14.0], [129900.0, 1.0], [148200.0, 1.0], [34100.0, 2.0], [145900.0, 1.0], [152300.0, 1.0], [43700.0, 2.0], [45300.0, 54.0], [51700.0, 2.0], [53300.0, 4.0], [54900.0, 2.0], [61300.0, 3.0], [62900.0, 2.0], [64500.0, 7.0], [68200.0, 5.0], [71400.0, 13.0], [74600.0, 59.0], [77800.0, 2.0], [81000.0, 1.0], [84200.0, 2.0], [87400.0, 4.0], [93800.0, 2.0], [97000.0, 2.0], [100200.0, 276.0], [129000.0, 44.0], [134900.0, 6.0], [67300.0, 8.0], [70500.0, 3.0], [76900.0, 1.0], [92900.0, 3.0], [96100.0, 1.0], [99300.0, 2.0], [8700.0, 175.0], [8300.0, 225.0], [132600.0, 40.0], [9100.0, 235.0], [9500.0, 379.0], [9900.0, 649.0], [10300.0, 96.0], [10700.0, 222.0], [11100.0, 59.0], [11500.0, 248.0], [11900.0, 15.0], [12300.0, 139.0], [12700.0, 60.0], [13100.0, 106.0], [13500.0, 47.0], [13900.0, 62.0], [14300.0, 10.0], [14700.0, 71.0], [15100.0, 15.0], [15500.0, 1.0], [16300.0, 10.0], [15900.0, 9.0], [16600.0, 2.0], [17400.0, 1.0], [18200.0, 2.0], [19000.0, 9.0], [19800.0, 1.0], [20600.0, 2.0], [22200.0, 5.0], [23000.0, 135.0], [25400.0, 1.0], [24600.0, 1.0], [26200.0, 35.0], [27000.0, 1.0], [27800.0, 8.0], [29400.0, 7.0], [31000.0, 2.0], [32600.0, 12.0], [38000.0, 25.0], [41200.0, 2.0], [44400.0, 3.0], [47600.0, 3.0], [50800.0, 3.0], [52400.0, 2.0], [63600.0, 67.0], [65200.0, 5.0], [66400.0, 3.0], [69600.0, 1.0], [72800.0, 1.0], [76000.0, 2.0], [82400.0, 2.0], [92000.0, 28.0], [132800.0, 20.0], [139200.0, 1.0], [136900.0, 5.0], [143300.0, 1.0], [66300.0, 3.0], [69500.0, 2.0], [75900.0, 2.0], [88700.0, 1.0], [91900.0, 2.0], [95100.0, 2.0], [98300.0, 3.0], [134600.0, 2.0], [141000.0, 28.0], [34300.0, 2.0], [132300.0, 2.0], [40700.0, 2.0], [48700.0, 1.0], [50300.0, 1.0], [53500.0, 1.0], [56700.0, 1.0], [58300.0, 2.0], [59900.0, 6.0], [61500.0, 1.0], [63100.0, 63.0], [64700.0, 3.0], [71800.0, 34.0], [75000.0, 52.0], [81400.0, 3.0], [84600.0, 2.0], [129400.0, 2.0], [67700.0, 6.0], [70900.0, 12.0], [77300.0, 2.0], [80500.0, 2.0], [83700.0, 1.0], [90100.0, 6.0], [128500.0, 28.0], [131800.0, 7.0], [144600.0, 20.0], [16700.0, 60.0], [18300.0, 1.0], [17500.0, 20.0], [19100.0, 11.0], [19900.0, 2.0], [21500.0, 3.0], [20700.0, 5.0], [22300.0, 4.0], [23100.0, 8.0], [25500.0, 1.0], [24700.0, 36.0], [27100.0, 6.0], [29500.0, 4.0], [30300.0, 17.0], [31100.0, 2.0], [31900.0, 2.0], [32700.0, 6.0], [33400.0, 1.0], [35000.0, 16.0], [36600.0, 1.0], [142300.0, 5.0], [38200.0, 2.0], [39800.0, 2.0], [41400.0, 1.0], [44600.0, 2.0], [47800.0, 4.0], [51000.0, 2.0], [49400.0, 1.0], [55800.0, 2.0], [59000.0, 6.0], [57400.0, 1.0], [62200.0, 4.0], [63800.0, 3.0], [65400.0, 3.0], [66800.0, 2.0], [73200.0, 3.0], [70000.0, 9.0], [76400.0, 3.0], [79600.0, 2.0], [86000.0, 1.0], [82800.0, 2.0], [95600.0, 1.0], [127600.0, 23.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 199200.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 120.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 52258.0, "series": [{"data": [[0.0, 52258.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 1595.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 21027.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 120.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 331.8499999999996, "minX": 1.68301758E12, "maxY": 3000.0, "series": [{"data": [[1.68301794E12, 797.2930402930406], [1.68301776E12, 3000.0], [1.68301782E12, 3000.0], [1.68301764E12, 3000.0], [1.6830177E12, 3000.0], [1.683018E12, 331.8499999999996], [1.68301758E12, 3000.0], [1.68301788E12, 2735.725387942005]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.683018E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 54.0, "minX": 3.0, "maxY": 105324.0, "series": [{"data": [[3.0, 100212.33333333333], [4.0, 100211.0], [5.0, 100207.0], [6.0, 100208.0], [7.0, 100013.0], [8.0, 100195.0], [10.0, 100189.0], [12.0, 100189.0], [14.0, 100189.0], [15.0, 100187.0], [16.0, 100184.0], [17.0, 100183.0], [18.0, 100116.0], [19.0, 100113.0], [20.0, 100111.0], [21.0, 100089.0], [22.0, 100084.0], [23.0, 100083.0], [24.0, 100081.0], [26.0, 100080.0], [28.0, 100079.0], [29.0, 100074.0], [30.0, 100072.0], [33.0, 100063.0], [32.0, 100071.0], [35.0, 100054.0], [34.0, 100061.0], [37.0, 100051.0], [36.0, 100052.0], [39.0, 100050.0], [40.0, 100037.0], [44.0, 100036.0], [47.0, 100036.33333333333], [48.0, 100031.0], [55.0, 100020.75], [57.0, 100021.0], [59.0, 100020.0], [58.0, 100020.5], [63.0, 100019.0], [62.0, 100020.25], [67.0, 100225.0], [65.0, 100019.0], [64.0, 100019.0], [71.0, 100224.0], [68.0, 100224.5], [75.0, 100221.0], [74.0, 100223.0], [79.0, 100093.0], [78.0, 100217.0], [77.0, 100218.0], [76.0, 100220.0], [81.0, 100075.0], [87.0, 100073.0], [84.0, 100074.0], [91.0, 100071.0], [90.0, 100071.66666666667], [95.0, 100069.0], [94.0, 100069.0], [98.0, 100067.0], [100.0, 100067.0], [107.0, 100063.0], [105.0, 100065.0], [104.0, 100066.0], [109.0, 100062.5], [114.0, 100060.5], [112.0, 100061.0], [123.0, 100058.0], [127.0, 100057.5], [126.0, 100058.5], [125.0, 100058.625], [133.0, 100052.0], [132.0, 100055.0], [131.0, 100054.5], [129.0, 100056.0], [128.0, 100056.0], [143.0, 100209.0], [142.0, 100210.0], [141.0, 100050.0], [140.0, 100050.66666666667], [139.0, 100050.66666666667], [137.0, 100050.0], [149.0, 100115.0], [148.0, 100120.0], [146.0, 100152.0], [145.0, 100159.0], [144.0, 100193.0], [157.0, 100113.0], [152.0, 100114.0], [166.0, 100096.33333333333], [163.0, 100103.0], [162.0, 100105.0], [161.0, 100106.75], [175.0, 100084.0], [173.0, 100084.0], [172.0, 100085.0], [169.0, 100094.0], [183.0, 100083.0], [182.0, 100083.5], [181.0, 100083.5], [177.0, 100084.0], [191.0, 100078.0], [189.0, 100079.0], [188.0, 100079.0], [187.0, 100080.0], [186.0, 100082.2], [199.0, 100064.0], [195.0, 100065.0], [193.0, 100074.0], [192.0, 100078.5], [207.0, 100060.0], [206.0, 100061.0], [204.0, 100063.0], [203.0, 100063.33333333333], [200.0, 100064.0], [213.0, 100058.0], [211.0, 100060.0], [210.0, 100059.0], [223.0, 98218.0], [222.0, 96626.5], [220.0, 100037.0], [219.0, 100053.0], [218.0, 100056.0], [217.0, 100057.5], [216.0, 100057.0], [230.0, 95028.0], [229.0, 95027.5], [227.0, 95029.0], [226.0, 95028.0], [224.0, 95032.0], [239.0, 95019.0], [238.0, 95020.66666666667], [235.0, 95022.0], [234.0, 95022.0], [233.0, 95025.0], [232.0, 95026.0], [245.0, 100112.0], [244.0, 100135.0], [243.0, 100188.0], [242.0, 94954.0], [241.0, 95015.0], [240.0, 95017.0], [254.0, 100066.0], [253.0, 100070.0], [252.0, 100072.6], [251.0, 100073.0], [248.0, 100073.0], [259.0, 100053.0], [271.0, 100038.0], [268.0, 100039.5], [266.0, 100040.0], [263.0, 100041.5], [261.0, 100042.0], [260.0, 100043.0], [258.0, 100055.0], [257.0, 100065.0], [287.0, 100027.0], [282.0, 100027.0], [279.0, 100033.0], [276.0, 100035.0], [275.0, 100036.0], [274.0, 100036.0], [273.0, 100038.0], [302.0, 100026.0], [301.0, 100026.0], [299.0, 100026.0], [296.0, 100026.0], [295.0, 100026.33333333333], [290.0, 100026.0], [288.0, 100027.0], [307.0, 100024.66666666667], [318.0, 100234.0], [317.0, 100234.0], [315.0, 100235.33333333333], [312.0, 100237.0], [311.0, 100024.0], [310.0, 100024.0], [309.0, 100024.0], [306.0, 100024.28571428571], [305.0, 100025.0], [304.0, 100026.0], [334.0, 100078.0], [335.0, 100077.0], [332.0, 100084.0], [330.0, 100086.0], [329.0, 100101.0], [328.0, 100216.0], [326.0, 100217.0], [324.0, 100217.0], [323.0, 100228.0], [322.0, 100229.0], [320.0, 100232.0], [350.0, 94076.0], [348.0, 94077.0], [347.0, 100057.0], [346.0, 100061.0], [345.0, 100063.0], [344.0, 100069.0], [343.0, 100069.0], [342.0, 100071.0], [339.0, 100073.0], [338.0, 100075.66666666667], [365.0, 94067.0], [367.0, 94067.5], [364.0, 94069.0], [355.0, 94074.0], [354.0, 94075.5], [352.0, 94075.66666666667], [363.0, 94070.0], [362.0, 97057.5], [360.0, 94071.0], [359.0, 94072.0], [358.0, 94074.0], [357.0, 94073.0], [356.0, 94074.0], [381.0, 100035.0], [383.0, 97046.5], [380.0, 100038.0], [378.0, 94065.0], [377.0, 100040.5], [375.0, 94066.0], [373.0, 100041.0], [372.0, 94066.0], [371.0, 94067.0], [369.0, 94067.0], [397.0, 94048.0], [398.0, 100019.0], [396.0, 94049.0], [387.0, 100032.0], [385.0, 94058.0], [394.0, 94051.0], [393.0, 100027.0], [392.0, 94053.0], [391.0, 97042.5], [390.0, 94056.0], [388.0, 94056.0], [415.0, 94040.0], [414.0, 100016.5], [413.0, 100016.5], [410.0, 100017.0], [409.0, 98025.33333333333], [406.0, 99164.42857142858], [400.0, 100018.0], [419.0, 94036.0], [431.0, 100123.0], [430.0, 100193.0], [425.0, 100206.0], [424.0, 100207.0], [423.0, 100209.0], [422.0, 100211.0], [421.0, 94032.0], [420.0, 94035.0], [418.0, 94038.0], [417.0, 94038.0], [416.0, 94039.0], [447.0, 100092.0], [446.0, 100092.0], [443.0, 100093.33333333333], [440.0, 100096.0], [439.0, 100098.75], [435.0, 100108.0], [434.0, 100121.0], [432.0, 100121.0], [461.0, 100087.0], [463.0, 100085.0], [460.0, 100087.0], [458.0, 100087.0], [457.0, 100089.0], [456.0, 100089.5], [455.0, 100090.0], [452.0, 100090.0], [450.0, 100090.0], [449.0, 100091.0], [448.0, 100092.0], [474.0, 100081.0], [471.0, 100081.0], [469.0, 100083.0], [465.0, 100084.0], [495.0, 100077.0], [494.0, 100077.0], [491.0, 100078.0], [489.0, 100078.0], [486.0, 100078.09090909091], [499.0, 100072.0], [510.0, 100065.0], [509.0, 100066.66666666667], [504.0, 100067.0], [503.0, 100067.0], [501.0, 100068.0], [500.0, 100070.0], [498.0, 100073.0], [497.0, 100076.0], [496.0, 100077.33333333333], [542.0, 100183.0], [543.0, 100183.0], [539.0, 100184.0], [538.0, 100185.5], [537.0, 100185.0], [536.0, 100185.0], [527.0, 100025.0], [515.0, 100065.0], [514.0, 100065.0], [517.0, 100053.0], [516.0, 100064.0], [519.0, 100037.0], [518.0, 100052.0], [526.0, 100024.0], [525.0, 100026.0], [524.0, 100028.0], [523.0, 100036.25], [534.0, 92927.0], [533.0, 100021.0], [531.0, 100021.0], [530.0, 100023.66666666667], [574.0, 100199.0], [575.0, 100199.0], [573.0, 100206.33333333333], [571.0, 100207.0], [570.0, 100207.5], [551.0, 100210.0], [550.0, 100210.0], [549.0, 100210.0], [544.0, 100172.0], [559.0, 100209.0], [558.0, 100209.0], [557.0, 100209.16666666666], [554.0, 100209.0], [552.0, 100210.0], [567.0, 100207.0], [566.0, 100207.33333333333], [565.0, 100209.0], [562.0, 100208.5], [606.0, 100104.0], [607.0, 100096.0], [605.0, 100106.0], [601.0, 100107.0], [600.0, 100107.5], [583.0, 100192.0], [577.0, 100198.0], [598.0, 100117.5], [594.0, 100118.5], [592.0, 100119.0], [590.0, 100130.0], [588.0, 100142.5], [584.0, 100192.33333333333], [638.0, 100070.0], [639.0, 100070.0], [624.0, 100079.0], [636.0, 100072.0], [635.0, 100072.5], [633.0, 100074.0], [632.0, 100075.0], [623.0, 100079.0], [610.0, 100084.0], [609.0, 100095.0], [613.0, 100082.0], [612.0, 100083.0], [619.0, 100080.5], [617.0, 100081.0], [631.0, 100076.0], [629.0, 100077.5], [627.0, 100078.0], [626.0, 100077.5], [668.0, 79396.0], [671.0, 77380.0], [657.0, 84443.0], [656.0, 85450.0], [659.0, 83433.0], [658.0, 84442.0], [661.0, 82425.0], [660.0, 83432.0], [670.0, 78387.0], [669.0, 78389.0], [667.0, 79398.0], [666.0, 80405.0], [665.0, 80407.0], [664.0, 81414.0], [655.0, 85451.0], [641.0, 100068.0], [640.0, 100069.0], [643.0, 90182.0], [642.0, 91191.0], [645.0, 89173.0], [644.0, 90180.0], [647.0, 91604.0], [646.0, 89170.0], [654.0, 86459.0], [653.0, 86461.0], [652.0, 87468.0], [651.0, 87470.0], [650.0, 87475.0], [649.0, 87477.0], [648.0, 91602.0], [663.0, 81416.0], [662.0, 82423.0], [697.0, 74320.0], [701.0, 68046.0], [702.0, 70911.0], [688.0, 68875.5], [690.0, 71795.0], [689.0, 71801.0], [700.0, 70912.0], [699.0, 75181.0], [698.0, 72226.5], [686.0, 70344.0], [673.0, 76371.0], [672.0, 77378.0], [675.0, 75362.0], [674.0, 76370.0], [677.0, 74353.0], [676.0, 75360.0], [679.0, 73344.0], [678.0, 74351.0], [685.0, 70347.0], [684.0, 71344.0], [683.0, 71346.0], [682.0, 72342.0], [681.0, 72344.0], [680.0, 73341.0], [695.0, 68047.5], [693.0, 68870.0], [692.0, 68872.0], [691.0, 71759.0], [731.0, 71016.5], [722.0, 68033.0], [734.0, 68024.0], [735.0, 67702.0], [721.0, 70901.0], [720.0, 70901.0], [732.0, 76384.0], [729.0, 70300.33333333333], [711.0, 68044.0], [709.0, 68044.0], [707.0, 72224.0], [705.0, 68044.0], [704.0, 68044.5], [719.0, 70901.0], [718.0, 69472.5], [716.0, 68042.0], [715.0, 72221.5], [713.0, 68042.0], [712.0, 68042.0], [727.0, 70893.0], [726.0, 70894.0], [724.0, 68030.5], [766.0, 73659.0], [756.0, 73664.0], [767.0, 73658.0], [753.0, 72034.0], [752.0, 71134.0], [755.0, 76372.0], [754.0, 71132.0], [765.0, 72393.0], [763.0, 69405.5], [761.0, 72266.0], [742.0, 70077.0], [741.0, 68019.0], [740.0, 68020.5], [738.0, 74294.0], [737.0, 71140.0], [736.0, 68022.0], [750.0, 76376.33333333333], [748.0, 71135.0], [746.0, 67695.0], [745.0, 67695.0], [744.0, 72588.0], [759.0, 76368.0], [758.0, 71127.0], [757.0, 68010.0], [796.0, 73321.0], [799.0, 67987.0], [785.0, 76355.0], [784.0, 71115.0], [787.0, 67994.0], [786.0, 72592.0], [798.0, 70852.0], [797.0, 67990.0], [795.0, 71108.0], [794.0, 76349.0], [793.0, 71110.0], [792.0, 71111.0], [783.0, 67996.0], [769.0, 67682.0], [768.0, 68005.0], [772.0, 69274.0], [770.0, 67681.0], [775.0, 70504.0], [773.0, 73652.0], [782.0, 73649.0], [781.0, 70823.5], [779.0, 71116.0], [777.0, 70664.0], [791.0, 72011.0], [789.0, 72172.5], [828.0, 71090.0], [831.0, 70806.0], [816.0, 70436.0], [830.0, 67637.0], [829.0, 67649.0], [827.0, 69000.5], [826.0, 67971.0], [825.0, 70030.0], [824.0, 70964.0], [812.0, 67976.0], [802.0, 70812.0], [801.0, 71105.0], [806.0, 67980.33333333333], [803.0, 67663.0], [811.0, 76336.0], [810.0, 75113.0], [809.0, 67979.0], [808.0, 73941.5], [821.0, 69628.33333333333], [818.0, 70032.0], [860.0, 67481.0], [863.0, 65768.0], [849.0, 65889.0], [848.0, 65892.0], [851.0, 65405.0], [850.0, 65408.0], [853.0, 64396.0], [852.0, 64398.0], [862.0, 66996.0], [861.0, 68704.0], [859.0, 68479.0], [858.0, 64465.0], [857.0, 67165.0], [856.0, 66006.0], [847.0, 66901.0], [833.0, 70797.0], [832.0, 69999.0], [835.0, 76290.0], [834.0, 70796.0], [837.0, 73565.0], [836.0, 67924.0], [839.0, 70777.0], [838.0, 75047.0], [846.0, 66902.0], [845.0, 67876.0], [844.0, 67876.0], [843.0, 74303.0], [841.0, 70775.0], [840.0, 73564.0], [855.0, 63177.0], [854.0, 63179.0], [892.0, 51850.0], [895.0, 50840.0], [881.0, 57906.0], [880.0, 57908.0], [883.0, 56896.0], [882.0, 56901.0], [885.0, 55889.0], [884.0, 55892.0], [894.0, 50841.0], [893.0, 51849.0], [891.0, 52858.0], [890.0, 52860.0], [889.0, 53868.0], [888.0, 53869.0], [879.0, 58915.0], [865.0, 67961.0], [864.0, 67963.0], [867.0, 66950.0], [866.0, 66952.0], [869.0, 63965.0], [868.0, 63966.0], [871.0, 62954.0], [870.0, 62956.0], [878.0, 58918.0], [877.0, 59925.0], [876.0, 59927.0], [875.0, 60935.0], [874.0, 60937.0], [873.0, 61944.0], [872.0, 61946.0], [887.0, 54877.0], [886.0, 54880.0], [924.0, 36226.0], [927.0, 35215.0], [913.0, 41753.0], [912.0, 41755.0], [915.0, 41271.0], [914.0, 41275.0], [917.0, 40261.0], [916.0, 40264.0], [926.0, 35217.0], [925.0, 36224.0], [923.0, 37234.0], [922.0, 37236.0], [921.0, 38243.0], [920.0, 38245.0], [911.0, 42763.0], [897.0, 49830.0], [896.0, 49831.0], [899.0, 48819.0], [898.0, 48821.0], [901.0, 47810.0], [900.0, 47813.0], [903.0, 46802.0], [902.0, 46803.0], [910.0, 42766.0], [909.0, 43772.0], [908.0, 43775.0], [907.0, 44782.0], [906.0, 44784.0], [905.0, 45791.0], [904.0, 45793.0], [919.0, 39253.0], [918.0, 39254.0], [954.0, 22075.0], [958.0, 20046.0], [959.0, 20042.0], [945.0, 26129.0], [944.0, 26130.0], [947.0, 25119.0], [946.0, 25120.0], [949.0, 24110.0], [948.0, 24110.0], [957.0, 21060.0], [956.0, 21062.0], [955.0, 22073.0], [953.0, 22127.0], [935.0, 31176.0], [934.0, 31178.0], [933.0, 32186.0], [932.0, 32188.0], [931.0, 33195.0], [930.0, 33198.0], [929.0, 34205.0], [928.0, 34207.0], [943.0, 27137.0], [942.0, 27140.0], [941.0, 28148.0], [940.0, 28150.0], [939.0, 29158.0], [938.0, 29160.0], [937.0, 30167.0], [936.0, 30169.0], [951.0, 23100.0], [950.0, 23102.0], [966.0, 17066.0], [978.0, 11211.0], [981.0, 10200.0], [980.0, 11446.0], [979.0, 11209.0], [977.0, 12219.0], [976.0, 12221.0], [975.0, 13228.0], [961.0, 100105.0], [960.0, 105324.0], [963.0, 19083.0], [962.0, 19085.0], [965.0, 18074.0], [964.0, 18076.0], [967.0, 17064.0], [974.0, 13230.0], [973.0, 14238.0], [972.0, 14240.0], [971.0, 15247.0], [970.0, 15047.0], [969.0, 16054.0], [968.0, 16056.0], [1020.0, 192.0], [1015.0, 191.0], [1013.0, 193.0], [1036.0, 189.5], [1082.0, 159.0], [1086.0, 158.13333333333335], [1038.0, 190.33333333333334], [1032.0, 190.0], [1034.0, 189.5], [1056.0, 166.0], [1054.0, 168.0], [1052.0, 167.0], [1050.0, 172.0], [1048.0, 171.0], [1042.0, 189.5], [1040.0, 189.73333333333332], [1120.0, 136.0], [1138.0, 80.0], [1132.0, 121.0], [1126.0, 135.0], [1122.0, 135.0], [1088.0, 157.66666666666669], [1092.0, 157.0], [1090.0, 157.28571428571428], [1094.0, 155.5], [1102.0, 154.5], [1100.0, 156.33333333333334], [1114.0, 143.0], [1106.0, 145.0], [1248.0, 196.0], [1278.0, 194.8], [1252.0, 195.66666666666666], [1250.0, 195.8], [1254.0, 195.4], [1256.0, 196.0], [1258.0, 196.0], [1276.0, 194.0], [1270.0, 194.0], [1268.0, 194.0], [1266.0, 194.6153846153846], [1264.0, 195.9333333333333], [1246.0, 196.0], [1224.0, 197.0], [1226.0, 198.0], [1244.0, 197.0], [1240.0, 197.0], [1288.0, 8000.0], [1286.0, 9010.0], [1284.0, 193.66666666666666], [1386.0, 183.0], [1382.0, 183.0], [1388.0, 182.0], [1402.0, 181.0], [1400.0, 181.66666666666666], [1392.0, 182.5], [1416.0, 179.25], [1444.0, 134.0], [1422.0, 174.25], [1418.0, 178.5], [1412.0, 178.0], [1410.0, 180.0], [1408.0, 180.25], [1438.0, 135.0], [1424.0, 139.0], [1454.0, 133.4], [1442.0, 134.75], [1440.0, 135.0], [1484.0, 206.0], [1482.0, 206.0], [1474.0, 6989.0], [1472.0, 76.0], [1574.0, 194.0], [1598.0, 192.88888888888889], [1576.0, 193.5], [1570.0, 195.0], [1572.0, 194.75], [1578.0, 194.0], [1580.0, 194.0], [1582.0, 194.0], [1596.0, 194.0], [1594.0, 194.0], [1590.0, 193.66666666666666], [1588.0, 194.0], [1586.0, 194.0], [1584.0, 194.0], [1566.0, 196.0], [1564.0, 196.0], [1622.0, 188.0], [1600.0, 193.0], [1620.0, 190.0], [1616.0, 189.75], [1612.0, 192.33333333333334], [1610.0, 192.74999999999997], [1604.0, 193.0], [1696.0, 207.0], [1698.0, 209.0], [1722.0, 208.0], [1720.0, 209.0], [1704.0, 208.0], [1700.0, 209.0], [1714.0, 208.0], [1776.0, 6213.0], [1770.0, 163.0], [1780.0, 5201.0], [1760.0, 204.58333333333331], [1764.0, 206.0], [1740.0, 204.83333333333331], [1738.0, 206.5], [1736.0, 206.0], [1734.0, 206.0], [1742.0, 205.0], [1756.0, 204.6], [1754.0, 205.0], [1748.0, 205.55555555555554], [1746.0, 206.0], [1744.0, 207.0], [1774.0, 131.5], [1772.0, 163.0], [1804.0, 192.5], [1850.0, 185.5], [1842.0, 187.0], [1840.0, 188.0], [1836.0, 188.0], [1796.0, 193.8], [1798.0, 192.66666666666666], [1800.0, 193.0], [1806.0, 191.25], [1814.0, 191.0], [1812.0, 191.33333333333334], [1810.0, 192.0], [1870.0, 185.0], [1890.0, 162.66666666666666], [1902.0, 161.5], [1896.0, 162.66666666666666], [1868.0, 185.0], [1866.0, 185.66666666666666], [1862.0, 185.75], [1884.0, 183.0], [1882.0, 183.66666666666669], [1878.0, 184.0], [1874.0, 184.625], [1872.0, 184.66666666666666], [1958.0, 88.0], [1950.0, 134.75], [1946.0, 150.34615384615387], [1944.0, 151.0], [1942.0, 150.5], [1938.0, 151.0], [2046.0, 211.14285714285714], [2018.0, 212.5], [2024.0, 212.0], [2026.0, 212.0], [2040.0, 211.5], [2038.0, 212.0], [2036.0, 212.0], [2034.0, 212.0], [2032.0, 212.0], [2014.0, 213.0], [1990.0, 215.0], [1994.0, 214.0], [2012.0, 213.0], [2152.0, 1562.0], [2148.0, 207.25], [2112.0, 146.0], [2140.0, 208.0], [2156.0, 206.0], [2144.0, 208.0], [2048.0, 211.0], [2108.0, 146.0], [2104.0, 147.0], [2100.0, 147.0], [2096.0, 147.0], [2092.0, 148.0], [2292.0, 185.0], [2240.0, 188.0], [2244.0, 187.33333333333334], [2248.0, 187.2], [2252.0, 187.125], [2260.0, 186.0], [2288.0, 186.0], [2236.0, 188.0], [2228.0, 189.0], [2224.0, 189.0], [2408.0, 173.0], [2388.0, 176.0], [2396.0, 176.0], [2416.0, 172.14285714285714], [2404.0, 175.0], [2400.0, 176.0], [2364.0, 178.0], [2356.0, 179.16666666666666], [2348.0, 179.0], [2488.0, 97.0], [2520.0, 186.0], [2516.0, 3030.0], [2504.0, 3046.0], [2480.0, 97.0], [2476.0, 97.0], [2472.0, 98.0], [2468.0, 98.0], [2628.0, 152.0], [2612.0, 156.0], [2608.0, 177.07500000000002], [2604.0, 177.0], [2812.0, 1440.0], [2752.0, 127.5], [2756.0, 168.33333333333334], [2776.0, 110.0], [2772.0, 110.0], [2804.0, 109.0], [2796.0, 108.0], [2788.0, 176.66666666666666], [2784.0, 109.5], [2716.0, 129.8], [2748.0, 128.0], [2744.0, 128.75], [2740.0, 129.0], [2724.0, 128.0], [2720.0, 129.0], [2840.0, 1436.0], [2836.0, 1122.3333333333333], [2832.0, 1436.0], [2876.0, 924.5], [2872.0, 458.3333333333333], [2856.0, 488.0], [3000.0, 6406.299675531768], [2948.0, 199.8], [2153.0, 206.5], [2117.0, 146.0], [2113.0, 146.25], [2133.0, 210.33333333333334], [2157.0, 206.0], [2149.0, 207.0], [2145.0, 208.0], [2109.0, 146.0], [2105.0, 147.0], [2293.0, 185.0], [2245.0, 187.0], [2249.0, 187.0], [2257.0, 187.0], [2265.0, 185.875], [2297.0, 184.0], [2289.0, 186.0], [2285.0, 186.0], [2233.0, 188.0], [2229.0, 188.33333333333334], [2217.0, 190.0], [2213.0, 192.0], [2401.0, 175.5], [2405.0, 174.0], [2369.0, 177.0], [2377.0, 177.0], [2389.0, 176.0], [2397.0, 176.0], [2365.0, 178.0], [2317.0, 183.0], [2321.0, 181.7], [2361.0, 178.0], [2357.0, 179.0], [2345.0, 179.0], [2501.0, 3048.0], [2493.0, 95.5], [2513.0, 3031.0], [2521.0, 182.0], [2517.0, 3029.0], [2509.0, 3034.0], [2489.0, 95.0], [2485.0, 97.5], [2477.0, 97.0], [2473.0, 97.0], [2469.0, 98.0], [2633.0, 151.5], [2637.0, 138.5], [2625.0, 153.0], [2609.0, 158.0], [2601.0, 178.0], [2805.0, 107.75], [2793.0, 108.0], [2813.0, 1440.0], [2769.0, 315.0], [2777.0, 111.0], [2809.0, 107.25], [2801.0, 175.66666666666666], [2797.0, 109.0], [2717.0, 130.0], [2745.0, 128.00000000000003], [2741.0, 129.0], [2737.0, 129.2], [2725.0, 129.0], [2721.0, 129.0], [2821.0, 1438.0], [2873.0, 1399.0], [2841.0, 1436.0], [2869.0, 459.0], [2865.0, 486.0], [2857.0, 1428.0], [2849.0, 1430.0], [1031.0, 192.0], [1053.0, 168.0], [1079.0, 159.0], [1039.0, 190.0], [1035.0, 190.33333333333334], [1059.0, 166.0], [1057.0, 166.0], [1055.0, 167.0], [1051.0, 169.0], [1047.0, 189.28571428571428], [1045.0, 190.0], [1043.0, 189.88888888888889], [1041.0, 190.0], [1133.0, 119.0], [1131.0, 132.4], [1135.0, 118.5], [1117.0, 135.5], [1097.0, 155.66666666666666], [1113.0, 143.875], [1105.0, 143.5], [1249.0, 195.33333333333334], [1253.0, 196.0], [1273.0, 195.0], [1255.0, 196.0], [1257.0, 196.0], [1261.0, 195.625], [1259.0, 196.25], [1277.0, 194.8], [1271.0, 194.8125], [1269.0, 194.0], [1267.0, 194.57142857142858], [1265.0, 196.0], [1219.0, 198.5], [1223.0, 197.75], [1227.0, 197.0], [1245.0, 196.0], [1237.0, 196.0], [1287.0, 9246.0], [1285.0, 10256.0], [1401.0, 182.0], [1407.0, 180.5454545454545], [1383.0, 183.0], [1389.0, 182.0], [1405.0, 182.0], [1399.0, 182.0], [1397.0, 182.0], [1395.0, 182.0], [1393.0, 182.33333333333334], [1373.0, 184.0], [1469.0, 114.93333333333334], [1471.0, 86.0], [1415.0, 179.0], [1437.0, 134.0], [1449.0, 134.2], [1445.0, 134.14285714285714], [1441.0, 134.0], [1485.0, 205.0], [1483.0, 206.0], [1487.0, 204.66666666666666], [1481.0, 206.0], [1477.0, 206.0], [1475.0, 207.0], [1473.0, 8236.0], [1595.0, 194.0], [1569.0, 194.75], [1579.0, 194.16666666666666], [1581.0, 194.0], [1583.0, 194.125], [1597.0, 193.5], [1593.0, 194.0], [1591.0, 194.0], [1589.0, 194.0], [1585.0, 193.83333333333334], [1565.0, 196.0], [1567.0, 194.69230769230768], [1605.0, 192.5], [1621.0, 189.0], [1607.0, 193.0], [1603.0, 193.0], [1721.0, 208.0], [1717.0, 208.0], [1703.0, 209.0], [1777.0, 6211.0], [1763.0, 205.0], [1761.0, 205.0], [1779.0, 5202.0], [1757.0, 204.0], [1741.0, 205.25000000000003], [1739.0, 205.0], [1735.0, 206.5], [1733.0, 207.0], [1731.0, 206.45454545454544], [1743.0, 205.5], [1753.0, 205.0], [1751.0, 205.75], [1749.0, 206.0], [1747.0, 205.25], [1745.0, 205.55555555555554], [1775.0, 6086.0], [1769.0, 1399.4], [1765.0, 204.75], [1799.0, 192.0], [1853.0, 185.0], [1855.0, 186.0], [1851.0, 185.0], [1825.0, 189.0], [1815.0, 191.0], [1795.0, 194.0], [1797.0, 192.0], [1803.0, 193.0], [1811.0, 192.0], [1869.0, 184.0], [1895.0, 163.0], [1889.0, 163.0], [1871.0, 184.0], [1867.0, 186.0], [1865.0, 185.0], [1863.0, 186.0], [1861.0, 185.0], [1885.0, 183.0], [1877.0, 184.0], [1875.0, 184.72222222222223], [1953.0, 134.33333333333334], [1983.0, 216.0], [1957.0, 89.5], [1955.0, 134.0], [1945.0, 150.6], [1943.0, 151.0], [1941.0, 150.5], [2019.0, 212.0], [2043.0, 211.0], [2047.0, 211.0], [2017.0, 213.0], [2021.0, 212.0], [2027.0, 212.0], [2031.0, 212.0], [2029.0, 212.0], [2045.0, 210.8], [2039.0, 212.0], [2037.0, 212.0], [2035.0, 212.0], [1989.0, 215.0], [1993.0, 214.0], [2013.0, 213.0], [2122.0, 129.0], [2118.0, 146.0], [2130.0, 118.125], [2138.0, 209.0], [2142.0, 208.0], [2110.0, 146.0], [2106.0, 147.0], [2098.0, 147.0], [2094.0, 147.0], [2250.0, 187.0], [2294.0, 185.0], [2254.0, 187.0], [2242.0, 188.0], [2246.0, 187.0], [2258.0, 186.0], [2262.0, 186.0], [2266.0, 2223.0], [2290.0, 185.5], [2286.0, 186.0], [2238.0, 188.14285714285714], [2234.0, 188.0], [2226.0, 190.0], [2222.0, 190.0], [2218.0, 190.0], [2406.0, 174.0], [2378.0, 177.0], [2430.0, 101.0], [2374.0, 177.0], [2410.0, 173.0], [2402.0, 175.0], [2310.0, 183.0], [2318.0, 183.0], [2322.0, 181.0], [2358.0, 179.0], [2354.0, 179.0], [2350.0, 179.2857142857143], [2342.0, 179.0], [2502.0, 3047.0], [2498.0, 54.0], [2518.0, 2456.0], [2514.0, 3030.0], [2510.0, 3035.0], [2486.0, 97.0], [2482.0, 97.0], [2478.0, 97.23076923076923], [2474.0, 97.16666666666667], [2466.0, 98.25], [2630.0, 152.0], [2622.0, 153.0], [2638.0, 138.0], [2618.0, 153.0], [2614.0, 155.0], [2606.0, 177.0], [2602.0, 178.0], [2802.0, 108.0], [2810.0, 1445.0], [2754.0, 127.33333333333333], [2778.0, 110.0], [2782.0, 109.0], [2794.0, 108.0], [2786.0, 109.0], [2714.0, 130.0], [2718.0, 130.0], [2750.0, 129.0], [2746.0, 128.8], [2734.0, 130.0], [2722.0, 129.0], [2834.0, 1436.0], [2842.0, 1436.0], [2826.0, 1437.0], [2874.0, 456.0], [2862.0, 1051.6], [2850.0, 1116.3333333333333], [2107.0, 146.5], [2159.0, 206.0], [2119.0, 145.58333333333334], [2111.0, 146.0], [2103.0, 147.0], [2099.0, 147.0], [2095.0, 146.75], [2091.0, 147.0], [2291.0, 185.0], [2303.0, 184.0], [2243.0, 188.0], [2267.0, 3464.0], [2287.0, 186.0], [2239.0, 188.0], [2235.0, 188.0], [2231.0, 188.0], [2227.0, 189.0], [2223.0, 189.53846153846152], [2315.0, 183.0], [2375.0, 177.0], [2383.0, 177.0], [2387.0, 177.0], [2399.0, 176.0], [2363.0, 178.0], [2359.0, 178.0], [2355.0, 179.0], [2351.0, 179.125], [2503.0, 3046.0], [2519.0, 2455.0], [2511.0, 3034.0], [2507.0, 3035.6666666666665], [2491.0, 96.0], [2487.0, 96.16666666666667], [2483.0, 97.0], [2479.0, 97.0], [2475.0, 97.5], [2471.0, 98.0], [2467.0, 98.0], [2619.0, 153.0], [2627.0, 153.0], [2635.0, 151.33333333333334], [2631.0, 152.0], [2615.0, 154.0], [2611.0, 156.0], [2607.0, 177.1], [2603.0, 178.5], [2803.0, 107.75], [2755.0, 128.0], [2771.0, 110.5], [2783.0, 109.0], [2811.0, 1445.0], [2799.0, 108.0], [2795.0, 108.0], [2791.0, 108.5], [2751.0, 128.20000000000002], [2715.0, 130.0], [2719.0, 128.85714285714286], [2739.0, 129.66666666666666], [2731.0, 129.0], [2727.0, 129.0], [2723.0, 129.0], [2835.0, 1436.0], [2839.0, 494.5], [2915.0, 143.0], [2843.0, 1435.0], [2827.0, 1437.0], [2867.0, 479.0], [2863.0, 1427.0], [2855.0, 1193.75], [2851.0, 1429.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[2940.799119999994, 7293.162053333328]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 3000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 2293.2, "minX": 1.68301758E12, "maxY": 203051.81666666668, "series": [{"data": [[1.68301794E12, 3075.616666666667], [1.68301776E12, 172792.03333333333], [1.68301782E12, 187000.1], [1.68301764E12, 188936.13333333333], [1.6830177E12, 203051.81666666668], [1.683018E12, 7823.05], [1.68301758E12, 39070.933333333334], [1.68301788E12, 94072.45]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.68301794E12, 2293.2], [1.68301776E12, 121212.0], [1.68301782E12, 131409.6], [1.68301764E12, 132384.0], [1.6830177E12, 142287.6], [1.683018E12, 5544.0], [1.68301758E12, 27820.8], [1.68301788E12, 66040.8]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.683018E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 2275.8645382854334, "minX": 1.68301758E12, "maxY": 99121.64393939392, "series": [{"data": [[1.68301794E12, 65396.3076923077], [1.68301776E12, 5742.097574497591], [1.68301782E12, 6381.295898811833], [1.68301764E12, 6312.310702320019], [1.6830177E12, 8997.05291347854], [1.683018E12, 99121.64393939392], [1.68301758E12, 3126.5652173913027], [1.68301788E12, 2275.8645382854334]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.683018E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 2275.8519460697, "minX": 1.68301758E12, "maxY": 99121.63181818184, "series": [{"data": [[1.68301794E12, 65396.30402930398], [1.68301776E12, 5742.025848925843], [1.68301782E12, 6335.936501852599], [1.68301764E12, 6045.8692079145685], [1.6830177E12, 8598.34761624484], [1.683018E12, 99121.63181818184], [1.68301758E12, 3126.533816425118], [1.68301788E12, 2275.8519460697]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.683018E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.09848484848484854, "minX": 1.68301758E12, "maxY": 4026.2117117116914, "series": [{"data": [[1.68301794E12, 44.183150183150175], [1.68301776E12, 4026.2117117116914], [1.68301782E12, 1937.6388143605616], [1.68301764E12, 1199.0314811302862], [1.6830177E12, 2731.68811065332], [1.683018E12, 0.09848484848484854], [1.68301758E12, 51.25966183574891], [1.68301788E12, 200.51653523276534]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.683018E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 11.0, "minX": 1.68301758E12, "maxY": 199224.0, "series": [{"data": [[1.68301794E12, 82425.0], [1.68301776E12, 158833.0], [1.68301782E12, 199224.0], [1.68301764E12, 79866.0], [1.6830177E12, 134926.0], [1.683018E12, 100237.0], [1.68301758E12, 19557.0], [1.68301788E12, 127919.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.68301794E12, 76350.8], [1.68301776E12, 4964.0], [1.68301782E12, 11024.0], [1.68301764E12, 11504.0], [1.6830177E12, 11555.0], [1.683018E12, 100207.0], [1.68301758E12, 9945.0], [1.68301788E12, 2562.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.68301794E12, 81677.81999999999], [1.68301776E12, 145245.38], [1.68301782E12, 100148.75], [1.68301764E12, 71302.39], [1.6830177E12, 129077.79999999999], [1.683018E12, 100234.0], [1.68301758E12, 19409.739999999998], [1.68301788E12, 67527.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.68301794E12, 76403.9], [1.68301776E12, 17571.699999999928], [1.68301782E12, 38034.0], [1.68301764E12, 30375.0], [1.6830177E12, 54470.0], [1.683018E12, 100211.95], [1.68301758E12, 11350.7], [1.68301788E12, 4074.8499999999995]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.68301794E12, 32186.0], [1.68301776E12, 16.0], [1.68301782E12, 19.0], [1.68301764E12, 11.0], [1.6830177E12, 16.0], [1.683018E12, 83432.0], [1.68301758E12, 15.0], [1.68301788E12, 12.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.68301794E12, 68042.0], [1.68301776E12, 176.0], [1.68301782E12, 209.0], [1.68301764E12, 175.0], [1.6830177E12, 183.0], [1.683018E12, 100070.5], [1.68301758E12, 132.0], [1.68301788E12, 181.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.683018E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 88.0, "minX": 1.0, "maxY": 133634.0, "series": [{"data": [[2.0, 50335.5], [3.0, 63179.0], [4.0, 53651.0], [5.0, 7162.0], [6.0, 4731.0], [7.0, 47265.0], [8.0, 13996.0], [10.0, 9964.5], [11.0, 9372.0], [12.0, 11483.0], [13.0, 164.0], [14.0, 11022.0], [15.0, 29756.0], [16.0, 7310.5], [19.0, 185.0], [22.0, 63011.5], [27.0, 68524.0], [28.0, 1158.0], [33.0, 8960.0], [42.0, 63177.5], [48.0, 101022.0], [59.0, 101.0], [66.0, 199.0], [68.0, 3932.5], [71.0, 100072.0], [75.0, 24753.0], [80.0, 175.5], [81.0, 9794.0], [90.0, 131.0], [98.0, 86372.0], [104.0, 143.0], [109.0, 154.0], [115.0, 152.0], [113.0, 100078.0], [123.0, 8219.0], [121.0, 177.0], [125.0, 119.0], [135.0, 188.0], [142.0, 100067.0], [148.0, 10856.5], [158.0, 9173.0], [153.0, 206.0], [156.0, 8152.0], [154.0, 177.0], [159.0, 166.0], [152.0, 70801.5], [163.0, 5176.0], [161.0, 8375.0], [168.0, 11910.0], [177.0, 155.0], [182.0, 182.0], [179.0, 100027.0], [188.0, 172.0], [187.0, 171.0], [193.0, 183.0], [206.0, 161.0], [211.0, 149.0], [234.0, 162.0], [232.0, 155.0], [239.0, 132.0], [235.0, 167.0], [236.0, 176.0], [244.0, 159.0], [245.0, 178.0], [240.0, 178.0], [247.0, 196.0], [243.0, 167.0], [246.0, 170.0], [254.0, 170.0], [252.0, 175.0], [253.0, 163.0], [251.0, 178.0], [249.0, 154.0], [255.0, 165.0], [250.0, 177.0], [248.0, 165.0], [259.0, 175.0], [256.0, 159.0], [257.0, 8824.0], [260.0, 201.0], [264.0, 166.0], [265.0, 177.0], [266.0, 185.0], [262.0, 196.0], [258.0, 164.0], [269.0, 156.0], [277.0, 139.0], [276.0, 143.0], [272.0, 172.0], [283.0, 162.0], [275.0, 204.0], [286.0, 198.0], [314.0, 11244.0], [320.0, 349.0], [333.0, 176.0], [334.0, 182.0], [336.0, 9637.0], [343.0, 176.0], [339.0, 158.0], [344.0, 136.0], [346.0, 1923.5], [361.0, 185.0], [367.0, 10631.0], [356.0, 3877.0], [365.0, 249.0], [353.0, 184.0], [381.0, 202.0], [373.0, 100085.0], [378.0, 3474.0], [371.0, 11024.0], [394.0, 9900.0], [398.0, 177.5], [410.0, 9557.0], [421.0, 173.0], [424.0, 145.0], [426.0, 184.0], [440.0, 175.5], [457.0, 10691.0], [448.0, 9984.0], [471.0, 273.0], [474.0, 178.0], [494.0, 162.0], [482.0, 5991.0], [489.0, 268.0], [485.0, 169.0], [487.0, 180.0], [481.0, 194.0], [504.0, 161.0], [503.0, 1740.0], [498.0, 185.0], [500.0, 5541.0], [505.0, 153.0], [501.0, 301.0], [510.0, 178.0], [539.0, 9080.0], [526.0, 9561.0], [521.0, 6940.0], [534.0, 199.0], [517.0, 169.0], [520.0, 165.0], [574.0, 465.0], [565.0, 312.0], [552.0, 8634.0], [581.0, 229.0], [597.0, 8908.0], [626.0, 175.0], [625.0, 165.0], [644.0, 88.0], [667.0, 10026.0], [702.0, 7740.5], [680.0, 7510.0], [688.0, 170.0], [719.0, 168.0], [718.0, 154.0], [723.0, 176.0], [752.0, 136.0], [756.0, 158.0], [754.0, 159.0], [757.0, 246.0], [742.0, 272.0], [780.0, 199.0], [783.0, 324.0], [844.0, 9384.0], [905.0, 153.0], [925.0, 387.0], [945.0, 8074.0], [988.0, 188.0], [1022.0, 144.0], [1289.0, 245.0], [1.0, 26129.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[517.0, 127637.0], [597.0, 68808.0], [42.0, 69442.0], [3.0, 72569.0], [48.0, 133634.0], [421.0, 66334.0], [28.0, 71698.0], [494.0, 71829.5]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1289.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 101022.0, "series": [{"data": [[2.0, 50335.5], [3.0, 63179.0], [4.0, 53651.0], [5.0, 7162.0], [6.0, 4731.0], [7.0, 47265.0], [8.0, 13996.0], [10.0, 9964.5], [11.0, 9372.0], [12.0, 11483.0], [13.0, 164.0], [14.0, 11022.0], [15.0, 29756.0], [16.0, 7310.5], [19.0, 185.0], [22.0, 63011.5], [27.0, 68524.0], [28.0, 1158.0], [33.0, 8960.0], [42.0, 63177.5], [48.0, 101022.0], [59.0, 101.0], [66.0, 199.0], [68.0, 3932.5], [71.0, 100072.0], [75.0, 24753.0], [80.0, 175.5], [81.0, 9794.0], [90.0, 131.0], [98.0, 86372.0], [104.0, 143.0], [109.0, 154.0], [115.0, 152.0], [113.0, 100078.0], [123.0, 8219.0], [121.0, 177.0], [125.0, 119.0], [135.0, 188.0], [142.0, 100067.0], [148.0, 10856.5], [158.0, 9173.0], [153.0, 206.0], [156.0, 8152.0], [154.0, 177.0], [159.0, 166.0], [152.0, 70801.5], [163.0, 5176.0], [161.0, 8375.0], [168.0, 11910.0], [177.0, 155.0], [182.0, 182.0], [179.0, 100027.0], [188.0, 172.0], [187.0, 171.0], [193.0, 183.0], [206.0, 161.0], [211.0, 149.0], [234.0, 162.0], [232.0, 155.0], [239.0, 132.0], [235.0, 167.0], [236.0, 176.0], [244.0, 159.0], [245.0, 178.0], [240.0, 178.0], [247.0, 196.0], [243.0, 167.0], [246.0, 170.0], [254.0, 170.0], [252.0, 175.0], [253.0, 163.0], [251.0, 178.0], [249.0, 154.0], [255.0, 165.0], [250.0, 177.0], [248.0, 165.0], [259.0, 175.0], [256.0, 159.0], [257.0, 8824.0], [260.0, 201.0], [264.0, 166.0], [265.0, 177.0], [266.0, 185.0], [262.0, 196.0], [258.0, 164.0], [269.0, 156.0], [277.0, 139.0], [276.0, 142.5], [272.0, 172.0], [283.0, 162.0], [275.0, 204.0], [286.0, 198.0], [314.0, 11244.0], [320.0, 235.5], [333.0, 175.0], [334.0, 182.0], [336.0, 9637.0], [343.0, 176.0], [339.0, 158.0], [344.0, 136.0], [346.0, 1923.5], [361.0, 185.0], [367.0, 10631.0], [356.0, 3877.0], [365.0, 249.0], [353.0, 184.0], [381.0, 202.0], [373.0, 100085.0], [378.0, 3474.0], [371.0, 11024.0], [394.0, 9900.0], [398.0, 177.5], [410.0, 9557.0], [421.0, 173.0], [424.0, 145.0], [426.0, 184.0], [440.0, 175.5], [457.0, 10691.0], [448.0, 9984.0], [471.0, 273.0], [474.0, 178.0], [494.0, 162.0], [482.0, 5991.0], [489.0, 268.0], [485.0, 169.0], [487.0, 180.0], [481.0, 194.0], [504.0, 161.0], [503.0, 1740.0], [498.0, 185.0], [500.0, 5541.0], [505.0, 153.0], [501.0, 301.0], [510.0, 178.0], [539.0, 9080.0], [526.0, 9561.0], [521.0, 6940.0], [534.0, 199.0], [517.0, 169.0], [520.0, 165.0], [574.0, 465.0], [565.0, 312.0], [552.0, 8634.0], [581.0, 229.0], [597.0, 8908.0], [626.0, 175.0], [625.0, 165.0], [644.0, 88.0], [667.0, 10026.0], [702.0, 7740.5], [680.0, 7509.5], [688.0, 170.0], [719.0, 168.0], [718.0, 154.0], [723.0, 176.0], [752.0, 136.0], [756.0, 158.0], [754.0, 159.0], [757.0, 246.0], [742.0, 272.0], [780.0, 199.0], [783.0, 324.0], [844.0, 9384.0], [905.0, 153.0], [925.0, 387.0], [945.0, 8074.0], [988.0, 188.0], [1022.0, 144.0], [1289.0, 245.0], [1.0, 26129.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[517.0, 0.0], [597.0, 0.0], [42.0, 0.0], [3.0, 0.0], [48.0, 0.0], [421.0, 0.0], [28.0, 0.0], [494.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1289.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 95.83333333333333, "minX": 1.68301758E12, "maxY": 262.5, "series": [{"data": [[1.68301776E12, 237.5], [1.68301782E12, 250.0], [1.68301764E12, 262.5], [1.6830177E12, 262.5], [1.68301758E12, 95.83333333333333], [1.68301788E12, 141.66666666666666]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68301788E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.16666666666666666, "minX": 1.68301758E12, "maxY": 282.31666666666666, "series": [{"data": [[1.68301794E12, 4.55], [1.68301776E12, 240.5], [1.68301782E12, 260.73333333333335], [1.68301764E12, 262.6666666666667], [1.6830177E12, 282.31666666666666], [1.683018E12, 11.0], [1.68301758E12, 55.2], [1.68301788E12, 131.03333333333333]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.68301782E12, 0.16666666666666666], [1.68301764E12, 0.9833333333333333], [1.6830177E12, 0.85]], "isOverall": false, "label": "Non HTTP response code: java.net.SocketException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.683018E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.16666666666666666, "minX": 1.68301758E12, "maxY": 282.31666666666666, "series": [{"data": [[1.68301794E12, 4.55], [1.68301776E12, 240.5], [1.68301782E12, 260.73333333333335], [1.68301764E12, 262.6666666666667], [1.6830177E12, 282.31666666666666], [1.683018E12, 11.0], [1.68301758E12, 55.2], [1.68301788E12, 131.03333333333333]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.68301782E12, 0.16666666666666666], [1.68301764E12, 0.9833333333333333], [1.6830177E12, 0.85]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.683018E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.16666666666666666, "minX": 1.68301758E12, "maxY": 282.31666666666666, "series": [{"data": [[1.68301794E12, 4.55], [1.68301776E12, 240.5], [1.68301782E12, 260.73333333333335], [1.68301764E12, 262.6666666666667], [1.6830177E12, 282.31666666666666], [1.683018E12, 11.0], [1.68301758E12, 55.2], [1.68301788E12, 131.03333333333333]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.68301782E12, 0.16666666666666666], [1.68301764E12, 0.9833333333333333], [1.6830177E12, 0.85]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.683018E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

