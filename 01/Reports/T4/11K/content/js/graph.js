/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 12.0, "minX": 0.0, "maxY": 193201.0, "series": [{"data": [[0.0, 12.0], [0.1, 23.0], [0.2, 27.0], [0.3, 29.0], [0.4, 31.0], [0.5, 35.0], [0.6, 36.0], [0.7, 37.0], [0.8, 39.0], [0.9, 40.0], [1.0, 40.0], [1.1, 41.0], [1.2, 43.0], [1.3, 44.0], [1.4, 45.0], [1.5, 46.0], [1.6, 46.0], [1.7, 47.0], [1.8, 48.0], [1.9, 49.0], [2.0, 50.0], [2.1, 51.0], [2.2, 52.0], [2.3, 54.0], [2.4, 55.0], [2.5, 55.0], [2.6, 56.0], [2.7, 57.0], [2.8, 57.0], [2.9, 58.0], [3.0, 58.0], [3.1, 59.0], [3.2, 59.0], [3.3, 59.0], [3.4, 60.0], [3.5, 61.0], [3.6, 61.0], [3.7, 62.0], [3.8, 63.0], [3.9, 64.0], [4.0, 64.0], [4.1, 65.0], [4.2, 65.0], [4.3, 66.0], [4.4, 66.0], [4.5, 66.0], [4.6, 67.0], [4.7, 67.0], [4.8, 67.0], [4.9, 68.0], [5.0, 69.0], [5.1, 70.0], [5.2, 70.0], [5.3, 71.0], [5.4, 71.0], [5.5, 71.0], [5.6, 72.0], [5.7, 73.0], [5.8, 73.0], [5.9, 74.0], [6.0, 74.0], [6.1, 75.0], [6.2, 76.0], [6.3, 76.0], [6.4, 77.0], [6.5, 77.0], [6.6, 78.0], [6.7, 78.0], [6.8, 78.0], [6.9, 79.0], [7.0, 79.0], [7.1, 79.0], [7.2, 80.0], [7.3, 80.0], [7.4, 81.0], [7.5, 82.0], [7.6, 82.0], [7.7, 82.0], [7.8, 83.0], [7.9, 83.0], [8.0, 83.0], [8.1, 83.0], [8.2, 84.0], [8.3, 84.0], [8.4, 85.0], [8.5, 85.0], [8.6, 86.0], [8.7, 86.0], [8.8, 87.0], [8.9, 87.0], [9.0, 88.0], [9.1, 88.0], [9.2, 89.0], [9.3, 90.0], [9.4, 90.0], [9.5, 90.0], [9.6, 91.0], [9.7, 91.0], [9.8, 92.0], [9.9, 92.0], [10.0, 92.0], [10.1, 93.0], [10.2, 93.0], [10.3, 93.0], [10.4, 94.0], [10.5, 94.0], [10.6, 95.0], [10.7, 95.0], [10.8, 96.0], [10.9, 96.0], [11.0, 96.0], [11.1, 96.0], [11.2, 97.0], [11.3, 97.0], [11.4, 97.0], [11.5, 97.0], [11.6, 97.0], [11.7, 98.0], [11.8, 98.0], [11.9, 98.0], [12.0, 98.0], [12.1, 98.0], [12.2, 99.0], [12.3, 99.0], [12.4, 99.0], [12.5, 99.0], [12.6, 99.0], [12.7, 100.0], [12.8, 100.0], [12.9, 100.0], [13.0, 100.0], [13.1, 100.0], [13.2, 100.0], [13.3, 101.0], [13.4, 101.0], [13.5, 101.0], [13.6, 101.0], [13.7, 101.0], [13.8, 102.0], [13.9, 102.0], [14.0, 102.0], [14.1, 102.0], [14.2, 102.0], [14.3, 102.0], [14.4, 102.0], [14.5, 103.0], [14.6, 103.0], [14.7, 103.0], [14.8, 103.0], [14.9, 103.0], [15.0, 103.0], [15.1, 103.0], [15.2, 103.0], [15.3, 104.0], [15.4, 104.0], [15.5, 104.0], [15.6, 104.0], [15.7, 104.0], [15.8, 104.0], [15.9, 104.0], [16.0, 104.0], [16.1, 104.0], [16.2, 105.0], [16.3, 105.0], [16.4, 105.0], [16.5, 105.0], [16.6, 105.0], [16.7, 105.0], [16.8, 105.0], [16.9, 105.0], [17.0, 105.0], [17.1, 105.0], [17.2, 105.0], [17.3, 105.0], [17.4, 106.0], [17.5, 106.0], [17.6, 106.0], [17.7, 106.0], [17.8, 106.0], [17.9, 106.0], [18.0, 106.0], [18.1, 106.0], [18.2, 106.0], [18.3, 106.0], [18.4, 106.0], [18.5, 106.0], [18.6, 106.0], [18.7, 107.0], [18.8, 107.0], [18.9, 107.0], [19.0, 107.0], [19.1, 107.0], [19.2, 107.0], [19.3, 107.0], [19.4, 107.0], [19.5, 107.0], [19.6, 107.0], [19.7, 107.0], [19.8, 107.0], [19.9, 108.0], [20.0, 108.0], [20.1, 108.0], [20.2, 108.0], [20.3, 108.0], [20.4, 108.0], [20.5, 108.0], [20.6, 108.0], [20.7, 108.0], [20.8, 108.0], [20.9, 108.0], [21.0, 109.0], [21.1, 109.0], [21.2, 109.0], [21.3, 109.0], [21.4, 109.0], [21.5, 109.0], [21.6, 110.0], [21.7, 110.0], [21.8, 110.0], [21.9, 110.0], [22.0, 110.0], [22.1, 110.0], [22.2, 110.0], [22.3, 111.0], [22.4, 111.0], [22.5, 111.0], [22.6, 111.0], [22.7, 111.0], [22.8, 112.0], [22.9, 112.0], [23.0, 112.0], [23.1, 112.0], [23.2, 113.0], [23.3, 113.0], [23.4, 113.0], [23.5, 113.0], [23.6, 114.0], [23.7, 114.0], [23.8, 114.0], [23.9, 114.0], [24.0, 114.0], [24.1, 114.0], [24.2, 114.0], [24.3, 114.0], [24.4, 114.0], [24.5, 115.0], [24.6, 115.0], [24.7, 115.0], [24.8, 115.0], [24.9, 115.0], [25.0, 115.0], [25.1, 115.0], [25.2, 115.0], [25.3, 115.0], [25.4, 115.0], [25.5, 116.0], [25.6, 116.0], [25.7, 116.0], [25.8, 116.0], [25.9, 116.0], [26.0, 116.0], [26.1, 116.0], [26.2, 117.0], [26.3, 117.0], [26.4, 117.0], [26.5, 117.0], [26.6, 117.0], [26.7, 117.0], [26.8, 117.0], [26.9, 118.0], [27.0, 118.0], [27.1, 118.0], [27.2, 118.0], [27.3, 118.0], [27.4, 118.0], [27.5, 118.0], [27.6, 119.0], [27.7, 119.0], [27.8, 119.0], [27.9, 119.0], [28.0, 119.0], [28.1, 119.0], [28.2, 119.0], [28.3, 119.0], [28.4, 120.0], [28.5, 120.0], [28.6, 120.0], [28.7, 120.0], [28.8, 120.0], [28.9, 120.0], [29.0, 121.0], [29.1, 121.0], [29.2, 121.0], [29.3, 121.0], [29.4, 121.0], [29.5, 121.0], [29.6, 122.0], [29.7, 122.0], [29.8, 122.0], [29.9, 122.0], [30.0, 122.0], [30.1, 122.0], [30.2, 122.0], [30.3, 122.0], [30.4, 123.0], [30.5, 123.0], [30.6, 123.0], [30.7, 123.0], [30.8, 123.0], [30.9, 123.0], [31.0, 123.0], [31.1, 123.0], [31.2, 124.0], [31.3, 124.0], [31.4, 124.0], [31.5, 124.0], [31.6, 124.0], [31.7, 124.0], [31.8, 124.0], [31.9, 124.0], [32.0, 124.0], [32.1, 125.0], [32.2, 125.0], [32.3, 125.0], [32.4, 125.0], [32.5, 125.0], [32.6, 125.0], [32.7, 125.0], [32.8, 125.0], [32.9, 125.0], [33.0, 125.0], [33.1, 125.0], [33.2, 125.0], [33.3, 125.0], [33.4, 126.0], [33.5, 126.0], [33.6, 126.0], [33.7, 126.0], [33.8, 126.0], [33.9, 126.0], [34.0, 126.0], [34.1, 126.0], [34.2, 126.0], [34.3, 126.0], [34.4, 126.0], [34.5, 126.0], [34.6, 126.0], [34.7, 126.0], [34.8, 127.0], [34.9, 127.0], [35.0, 127.0], [35.1, 127.0], [35.2, 127.0], [35.3, 127.0], [35.4, 127.0], [35.5, 127.0], [35.6, 127.0], [35.7, 127.0], [35.8, 128.0], [35.9, 128.0], [36.0, 128.0], [36.1, 128.0], [36.2, 128.0], [36.3, 128.0], [36.4, 128.0], [36.5, 128.0], [36.6, 128.0], [36.7, 128.0], [36.8, 129.0], [36.9, 129.0], [37.0, 129.0], [37.1, 129.0], [37.2, 129.0], [37.3, 129.0], [37.4, 129.0], [37.5, 129.0], [37.6, 130.0], [37.7, 130.0], [37.8, 130.0], [37.9, 130.0], [38.0, 130.0], [38.1, 130.0], [38.2, 130.0], [38.3, 130.0], [38.4, 130.0], [38.5, 130.0], [38.6, 131.0], [38.7, 131.0], [38.8, 131.0], [38.9, 131.0], [39.0, 131.0], [39.1, 131.0], [39.2, 131.0], [39.3, 131.0], [39.4, 132.0], [39.5, 132.0], [39.6, 132.0], [39.7, 132.0], [39.8, 132.0], [39.9, 132.0], [40.0, 132.0], [40.1, 132.0], [40.2, 132.0], [40.3, 133.0], [40.4, 133.0], [40.5, 133.0], [40.6, 133.0], [40.7, 133.0], [40.8, 133.0], [40.9, 133.0], [41.0, 133.0], [41.1, 133.0], [41.2, 133.0], [41.3, 133.0], [41.4, 134.0], [41.5, 134.0], [41.6, 134.0], [41.7, 134.0], [41.8, 134.0], [41.9, 134.0], [42.0, 134.0], [42.1, 134.0], [42.2, 134.0], [42.3, 134.0], [42.4, 135.0], [42.5, 135.0], [42.6, 135.0], [42.7, 135.0], [42.8, 135.0], [42.9, 135.0], [43.0, 135.0], [43.1, 135.0], [43.2, 135.0], [43.3, 135.0], [43.4, 135.0], [43.5, 136.0], [43.6, 136.0], [43.7, 136.0], [43.8, 136.0], [43.9, 136.0], [44.0, 136.0], [44.1, 136.0], [44.2, 136.0], [44.3, 136.0], [44.4, 137.0], [44.5, 137.0], [44.6, 137.0], [44.7, 137.0], [44.8, 137.0], [44.9, 137.0], [45.0, 137.0], [45.1, 138.0], [45.2, 138.0], [45.3, 138.0], [45.4, 138.0], [45.5, 138.0], [45.6, 138.0], [45.7, 138.0], [45.8, 138.0], [45.9, 139.0], [46.0, 139.0], [46.1, 139.0], [46.2, 139.0], [46.3, 139.0], [46.4, 139.0], [46.5, 140.0], [46.6, 140.0], [46.7, 140.0], [46.8, 140.0], [46.9, 140.0], [47.0, 140.0], [47.1, 140.0], [47.2, 140.0], [47.3, 140.0], [47.4, 140.0], [47.5, 140.0], [47.6, 140.0], [47.7, 140.0], [47.8, 140.0], [47.9, 140.0], [48.0, 141.0], [48.1, 141.0], [48.2, 141.0], [48.3, 141.0], [48.4, 141.0], [48.5, 141.0], [48.6, 141.0], [48.7, 141.0], [48.8, 141.0], [48.9, 142.0], [49.0, 142.0], [49.1, 142.0], [49.2, 142.0], [49.3, 142.0], [49.4, 142.0], [49.5, 142.0], [49.6, 142.0], [49.7, 143.0], [49.8, 143.0], [49.9, 143.0], [50.0, 143.0], [50.1, 143.0], [50.2, 144.0], [50.3, 144.0], [50.4, 144.0], [50.5, 144.0], [50.6, 145.0], [50.7, 145.0], [50.8, 145.0], [50.9, 146.0], [51.0, 146.0], [51.1, 146.0], [51.2, 146.0], [51.3, 147.0], [51.4, 147.0], [51.5, 147.0], [51.6, 148.0], [51.7, 148.0], [51.8, 148.0], [51.9, 148.0], [52.0, 149.0], [52.1, 149.0], [52.2, 149.0], [52.3, 150.0], [52.4, 150.0], [52.5, 150.0], [52.6, 151.0], [52.7, 152.0], [52.8, 152.0], [52.9, 153.0], [53.0, 153.0], [53.1, 153.0], [53.2, 154.0], [53.3, 155.0], [53.4, 156.0], [53.5, 157.0], [53.6, 158.0], [53.7, 158.0], [53.8, 159.0], [53.9, 159.0], [54.0, 160.0], [54.1, 161.0], [54.2, 162.0], [54.3, 163.0], [54.4, 163.0], [54.5, 163.0], [54.6, 165.0], [54.7, 166.0], [54.8, 167.0], [54.9, 169.0], [55.0, 172.0], [55.1, 173.0], [55.2, 175.0], [55.3, 175.0], [55.4, 176.0], [55.5, 177.0], [55.6, 178.0], [55.7, 178.0], [55.8, 179.0], [55.9, 179.0], [56.0, 183.0], [56.1, 184.0], [56.2, 184.0], [56.3, 184.0], [56.4, 185.0], [56.5, 187.0], [56.6, 187.0], [56.7, 188.0], [56.8, 189.0], [56.9, 190.0], [57.0, 191.0], [57.1, 193.0], [57.2, 195.0], [57.3, 197.0], [57.4, 198.0], [57.5, 202.0], [57.6, 204.0], [57.7, 205.0], [57.8, 205.0], [57.9, 206.0], [58.0, 206.0], [58.1, 207.0], [58.2, 208.0], [58.3, 208.0], [58.4, 209.0], [58.5, 209.0], [58.6, 209.0], [58.7, 209.0], [58.8, 210.0], [58.9, 211.0], [59.0, 212.0], [59.1, 214.0], [59.2, 216.0], [59.3, 216.0], [59.4, 217.0], [59.5, 218.0], [59.6, 219.0], [59.7, 219.0], [59.8, 220.0], [59.9, 221.0], [60.0, 224.0], [60.1, 229.0], [60.2, 234.0], [60.3, 236.0], [60.4, 237.0], [60.5, 238.0], [60.6, 239.0], [60.7, 241.0], [60.8, 243.0], [60.9, 246.0], [61.0, 249.0], [61.1, 253.0], [61.2, 254.0], [61.3, 254.0], [61.4, 256.0], [61.5, 261.0], [61.6, 292.0], [61.7, 308.0], [61.8, 331.0], [61.9, 356.0], [62.0, 405.0], [62.1, 470.0], [62.2, 484.0], [62.3, 522.0], [62.4, 558.0], [62.5, 568.0], [62.6, 591.0], [62.7, 602.0], [62.8, 616.0], [62.9, 647.0], [63.0, 702.0], [63.1, 798.0], [63.2, 833.0], [63.3, 842.0], [63.4, 884.0], [63.5, 929.0], [63.6, 1013.0], [63.7, 1089.0], [63.8, 1113.0], [63.9, 1160.0], [64.0, 1187.0], [64.1, 1236.0], [64.2, 1283.0], [64.3, 1310.0], [64.4, 1346.0], [64.5, 1358.0], [64.6, 1442.0], [64.7, 1486.0], [64.8, 1492.0], [64.9, 1528.0], [65.0, 1578.0], [65.1, 1641.0], [65.2, 1712.0], [65.3, 1747.0], [65.4, 1839.0], [65.5, 1929.0], [65.6, 1964.0], [65.7, 1985.0], [65.8, 2071.0], [65.9, 2104.0], [66.0, 2215.0], [66.1, 2244.0], [66.2, 2340.0], [66.3, 2394.0], [66.4, 2437.0], [66.5, 2483.0], [66.6, 2572.0], [66.7, 2631.0], [66.8, 2693.0], [66.9, 2716.0], [67.0, 2788.0], [67.1, 2936.0], [67.2, 3001.0], [67.3, 3110.0], [67.4, 3194.0], [67.5, 3237.0], [67.6, 3427.0], [67.7, 3547.0], [67.8, 3598.0], [67.9, 3682.0], [68.0, 3893.0], [68.1, 3941.0], [68.2, 4000.0], [68.3, 4082.0], [68.4, 4098.0], [68.5, 4161.0], [68.6, 4238.0], [68.7, 4472.0], [68.8, 4502.0], [68.9, 4576.0], [69.0, 4742.0], [69.1, 4786.0], [69.2, 4911.0], [69.3, 4988.0], [69.4, 5036.0], [69.5, 5051.0], [69.6, 5194.0], [69.7, 5353.0], [69.8, 5428.0], [69.9, 5456.0], [70.0, 5517.0], [70.1, 5574.0], [70.2, 5772.0], [70.3, 6005.0], [70.4, 6173.0], [70.5, 6333.0], [70.6, 6478.0], [70.7, 6833.0], [70.8, 6905.0], [70.9, 7110.0], [71.0, 7180.0], [71.1, 7321.0], [71.2, 7357.0], [71.3, 7433.0], [71.4, 7542.0], [71.5, 7647.0], [71.6, 7779.0], [71.7, 8109.0], [71.8, 8168.0], [71.9, 8295.0], [72.0, 8385.0], [72.1, 8552.0], [72.2, 8675.0], [72.3, 8775.0], [72.4, 8889.0], [72.5, 8957.0], [72.6, 9071.0], [72.7, 9227.0], [72.8, 9287.0], [72.9, 9340.0], [73.0, 9353.0], [73.1, 9355.0], [73.2, 9358.0], [73.3, 9366.0], [73.4, 9373.0], [73.5, 9418.0], [73.6, 9476.0], [73.7, 9495.0], [73.8, 9499.0], [73.9, 9528.0], [74.0, 9589.0], [74.1, 9642.0], [74.2, 9676.0], [74.3, 9890.0], [74.4, 9994.0], [74.5, 10017.0], [74.6, 10108.0], [74.7, 10153.0], [74.8, 10223.0], [74.9, 10248.0], [75.0, 10266.0], [75.1, 10270.0], [75.2, 10302.0], [75.3, 10304.0], [75.4, 10308.0], [75.5, 10315.0], [75.6, 10319.0], [75.7, 10362.0], [75.8, 10377.0], [75.9, 10435.0], [76.0, 10474.0], [76.1, 10506.0], [76.2, 10517.0], [76.3, 10527.0], [76.4, 10550.0], [76.5, 10612.0], [76.6, 10672.0], [76.7, 10729.0], [76.8, 10782.0], [76.9, 10992.0], [77.0, 11043.0], [77.1, 11062.0], [77.2, 11078.0], [77.3, 11100.0], [77.4, 11121.0], [77.5, 11122.0], [77.6, 11123.0], [77.7, 11144.0], [77.8, 11199.0], [77.9, 11274.0], [78.0, 11303.0], [78.1, 11319.0], [78.2, 11345.0], [78.3, 11360.0], [78.4, 11418.0], [78.5, 11508.0], [78.6, 11546.0], [78.7, 11593.0], [78.8, 11626.0], [78.9, 11663.0], [79.0, 11664.0], [79.1, 11664.0], [79.2, 11665.0], [79.3, 11666.0], [79.4, 11700.0], [79.5, 11755.0], [79.6, 11756.0], [79.7, 11773.0], [79.8, 11810.0], [79.9, 11822.0], [80.0, 11824.0], [80.1, 11862.0], [80.2, 11873.0], [80.3, 11874.0], [80.4, 11875.0], [80.5, 11900.0], [80.6, 11938.0], [80.7, 11961.0], [80.8, 11999.0], [80.9, 12033.0], [81.0, 12072.0], [81.1, 12104.0], [81.2, 12126.0], [81.3, 12179.0], [81.4, 12210.0], [81.5, 12260.0], [81.6, 12347.0], [81.7, 12387.0], [81.8, 12406.0], [81.9, 12420.0], [82.0, 12424.0], [82.1, 12459.0], [82.2, 12465.0], [82.3, 12497.0], [82.4, 12547.0], [82.5, 12571.0], [82.6, 12643.0], [82.7, 12742.0], [82.8, 12848.0], [82.9, 12904.0], [83.0, 12916.0], [83.1, 12917.0], [83.2, 12963.0], [83.3, 13021.0], [83.4, 13044.0], [83.5, 13079.0], [83.6, 13168.0], [83.7, 13178.0], [83.8, 13184.0], [83.9, 13229.0], [84.0, 13306.0], [84.1, 13324.0], [84.2, 13345.0], [84.3, 13451.0], [84.4, 13503.0], [84.5, 13596.0], [84.6, 13666.0], [84.7, 13669.0], [84.8, 13799.0], [84.9, 13822.0], [85.0, 13833.0], [85.1, 13854.0], [85.2, 13878.0], [85.3, 13913.0], [85.4, 13968.0], [85.5, 13972.0], [85.6, 13979.0], [85.7, 13999.0], [85.8, 14006.0], [85.9, 14027.0], [86.0, 14040.0], [86.1, 14059.0], [86.2, 14067.0], [86.3, 14069.0], [86.4, 14092.0], [86.5, 14117.0], [86.6, 14120.0], [86.7, 14142.0], [86.8, 14166.0], [86.9, 14205.0], [87.0, 14231.0], [87.1, 14253.0], [87.2, 14299.0], [87.3, 14301.0], [87.4, 14365.0], [87.5, 14495.0], [87.6, 14599.0], [87.7, 14647.0], [87.8, 14684.0], [87.9, 14722.0], [88.0, 14809.0], [88.1, 14862.0], [88.2, 15016.0], [88.3, 15119.0], [88.4, 15192.0], [88.5, 15243.0], [88.6, 15518.0], [88.7, 15561.0], [88.8, 15613.0], [88.9, 15666.0], [89.0, 15811.0], [89.1, 16132.0], [89.2, 16308.0], [89.3, 16405.0], [89.4, 16590.0], [89.5, 16792.0], [89.6, 16969.0], [89.7, 17087.0], [89.8, 17225.0], [89.9, 17294.0], [90.0, 17364.0], [90.1, 17569.0], [90.2, 17575.0], [90.3, 17578.0], [90.4, 17670.0], [90.5, 18232.0], [90.6, 18838.0], [90.7, 19010.0], [90.8, 19137.0], [90.9, 19255.0], [91.0, 19494.0], [91.1, 19734.0], [91.2, 20004.0], [91.3, 20179.0], [91.4, 20534.0], [91.5, 21037.0], [91.6, 21182.0], [91.7, 21669.0], [91.8, 21741.0], [91.9, 21828.0], [92.0, 21936.0], [92.1, 22852.0], [92.2, 23424.0], [92.3, 24723.0], [92.4, 24929.0], [92.5, 25516.0], [92.6, 26533.0], [92.7, 27543.0], [92.8, 27632.0], [92.9, 28929.0], [93.0, 29926.0], [93.1, 30262.0], [93.2, 32325.0], [93.3, 33064.0], [93.4, 33899.0], [93.5, 34557.0], [93.6, 34882.0], [93.7, 36499.0], [93.8, 37509.0], [93.9, 38566.0], [94.0, 41964.0], [94.1, 42078.0], [94.2, 42215.0], [94.3, 43188.0], [94.4, 43190.0], [94.5, 43487.0], [94.6, 44788.0], [94.7, 45493.0], [94.8, 46469.0], [94.9, 47696.0], [95.0, 49129.0], [95.1, 51152.0], [95.2, 53694.0], [95.3, 55690.0], [95.4, 55984.0], [95.5, 59337.0], [95.6, 59777.0], [95.7, 62620.0], [95.8, 63494.0], [95.9, 63586.0], [96.0, 63661.0], [96.1, 64377.0], [96.2, 65009.0], [96.3, 65167.0], [96.4, 66416.0], [96.5, 68116.0], [96.6, 72202.0], [96.7, 74333.0], [96.8, 74486.0], [96.9, 76003.0], [97.0, 76991.0], [97.1, 77136.0], [97.2, 77484.0], [97.3, 79388.0], [97.4, 79891.0], [97.5, 84519.0], [97.6, 89062.0], [97.7, 97642.0], [97.8, 100020.0], [97.9, 100036.0], [98.0, 100049.0], [98.1, 100071.0], [98.2, 100083.0], [98.3, 100092.0], [98.4, 100098.0], [98.5, 100106.0], [98.6, 100121.0], [98.7, 100135.0], [98.8, 100144.0], [98.9, 100179.0], [99.0, 100294.0], [99.1, 119771.0], [99.2, 128187.0], [99.3, 129010.0], [99.4, 129620.0], [99.5, 129986.0], [99.6, 130611.0], [99.7, 130721.0], [99.8, 131741.0], [99.9, 137238.0], [100.0, 193201.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 24736.0, "series": [{"data": [[0.0, 6966.0], [66700.0, 3.0], [68300.0, 1.0], [71500.0, 2.0], [77900.0, 1.0], [85900.0, 2.0], [89100.0, 1.0], [93900.0, 1.0], [97100.0, 2.0], [100300.0, 3.0], [129100.0, 1.0], [130700.0, 33.0], [127500.0, 3.0], [100.0, 24736.0], [32900.0, 13.0], [33700.0, 3.0], [34500.0, 22.0], [35300.0, 5.0], [36900.0, 1.0], [37700.0, 3.0], [38500.0, 1.0], [40100.0, 2.0], [41700.0, 3.0], [42500.0, 7.0], [44900.0, 4.0], [44100.0, 5.0], [43300.0, 1.0], [46500.0, 1.0], [50500.0, 2.0], [200.0, 2340.0], [51300.0, 2.0], [52100.0, 2.0], [54500.0, 2.0], [55300.0, 1.0], [58500.0, 3.0], [59300.0, 3.0], [60900.0, 2.0], [60100.0, 5.0], [63300.0, 39.0], [64900.0, 15.0], [64100.0, 2.0], [67400.0, 3.0], [72200.0, 3.0], [300.0, 177.0], [77000.0, 14.0], [73800.0, 4.0], [80200.0, 2.0], [81800.0, 1.0], [85000.0, 3.0], [86600.0, 2.0], [400.0, 119.0], [500.0, 265.0], [129800.0, 43.0], [128200.0, 3.0], [600.0, 172.0], [151600.0, 1.0], [700.0, 64.0], [193200.0, 1.0], [800.0, 198.0], [900.0, 40.0], [1000.0, 97.0], [1100.0, 163.0], [1200.0, 141.0], [1300.0, 162.0], [1400.0, 138.0], [1500.0, 121.0], [1600.0, 67.0], [1700.0, 122.0], [1800.0, 44.0], [1900.0, 137.0], [2000.0, 106.0], [2100.0, 30.0], [2200.0, 103.0], [2300.0, 102.0], [2400.0, 109.0], [2500.0, 84.0], [2600.0, 90.0], [2800.0, 39.0], [2700.0, 92.0], [2900.0, 69.0], [3000.0, 44.0], [3100.0, 69.0], [3300.0, 24.0], [3200.0, 69.0], [3400.0, 48.0], [3500.0, 88.0], [3600.0, 59.0], [3700.0, 22.0], [3800.0, 25.0], [3900.0, 104.0], [4000.0, 116.0], [68100.0, 3.0], [4100.0, 68.0], [4200.0, 66.0], [4300.0, 8.0], [66500.0, 3.0], [69700.0, 1.0], [4500.0, 60.0], [4400.0, 72.0], [4600.0, 14.0], [74500.0, 6.0], [77700.0, 2.0], [76100.0, 21.0], [4700.0, 102.0], [4800.0, 39.0], [4900.0, 76.0], [5000.0, 111.0], [79300.0, 19.0], [5100.0, 43.0], [80900.0, 2.0], [5300.0, 64.0], [5200.0, 23.0], [84100.0, 2.0], [5400.0, 123.0], [5500.0, 91.0], [88900.0, 14.0], [5600.0, 12.0], [87300.0, 5.0], [5800.0, 16.0], [5700.0, 34.0], [6100.0, 33.0], [6000.0, 51.0], [5900.0, 16.0], [96900.0, 5.0], [6300.0, 64.0], [100100.0, 262.0], [6200.0, 21.0], [6400.0, 6.0], [6600.0, 9.0], [6500.0, 6.0], [6800.0, 77.0], [6700.0, 10.0], [6900.0, 20.0], [7000.0, 31.0], [7100.0, 91.0], [7300.0, 93.0], [7400.0, 82.0], [7200.0, 14.0], [7600.0, 33.0], [7500.0, 45.0], [7700.0, 49.0], [7800.0, 20.0], [7900.0, 12.0], [8100.0, 79.0], [8000.0, 6.0], [127300.0, 36.0], [130500.0, 4.0], [8400.0, 28.0], [8200.0, 39.0], [8600.0, 46.0], [8800.0, 55.0], [9000.0, 25.0], [9200.0, 78.0], [9400.0, 196.0], [9600.0, 124.0], [10200.0, 217.0], [10000.0, 90.0], [9800.0, 5.0], [10400.0, 129.0], [10600.0, 86.0], [11000.0, 197.0], [11200.0, 95.0], [10800.0, 4.0], [11400.0, 68.0], [11600.0, 354.0], [12000.0, 158.0], [11800.0, 400.0], [12200.0, 108.0], [12400.0, 308.0], [12600.0, 41.0], [13000.0, 148.0], [13200.0, 78.0], [12800.0, 81.0], [13600.0, 141.0], [13400.0, 62.0], [13800.0, 265.0], [14200.0, 175.0], [14000.0, 383.0], [14400.0, 77.0], [14600.0, 125.0], [14800.0, 77.0], [15200.0, 80.0], [15000.0, 34.0], [15400.0, 5.0], [15600.0, 90.0], [15800.0, 51.0], [16200.0, 24.0], [16000.0, 7.0], [17200.0, 97.0], [16400.0, 54.0], [16800.0, 20.0], [18000.0, 13.0], [17600.0, 45.0], [18400.0, 18.0], [18800.0, 39.0], [19200.0, 48.0], [20000.0, 48.0], [19600.0, 4.0], [20400.0, 17.0], [20800.0, 27.0], [21200.0, 1.0], [22400.0, 2.0], [22000.0, 1.0], [21600.0, 36.0], [23200.0, 3.0], [22800.0, 33.0], [24400.0, 6.0], [24000.0, 2.0], [23600.0, 12.0], [24800.0, 35.0], [25200.0, 6.0], [26000.0, 3.0], [26400.0, 3.0], [27600.0, 36.0], [27200.0, 8.0], [28000.0, 4.0], [28400.0, 3.0], [28800.0, 27.0], [30000.0, 4.0], [30400.0, 5.0], [31200.0, 1.0], [32000.0, 1.0], [32800.0, 2.0], [33600.0, 1.0], [34400.0, 1.0], [36800.0, 1.0], [38400.0, 3.0], [37600.0, 1.0], [39200.0, 1.0], [40000.0, 3.0], [41600.0, 2.0], [42400.0, 11.0], [44800.0, 8.0], [44000.0, 4.0], [45600.0, 2.0], [46400.0, 2.0], [47200.0, 10.0], [51200.0, 8.0], [53600.0, 4.0], [56800.0, 4.0], [56000.0, 1.0], [58400.0, 1.0], [59200.0, 3.0], [57600.0, 1.0], [60000.0, 3.0], [62400.0, 2.0], [63200.0, 7.0], [61600.0, 2.0], [67200.0, 7.0], [65600.0, 5.0], [72000.0, 2.0], [78400.0, 2.0], [81600.0, 4.0], [84800.0, 1.0], [89600.0, 1.0], [91200.0, 2.0], [97600.0, 15.0], [96000.0, 2.0], [102400.0, 8.0], [129600.0, 7.0], [131200.0, 12.0], [67100.0, 26.0], [68700.0, 2.0], [71900.0, 1.0], [70300.0, 23.0], [75100.0, 2.0], [79900.0, 13.0], [83100.0, 6.0], [84700.0, 10.0], [95900.0, 1.0], [99100.0, 1.0], [129500.0, 27.0], [33900.0, 18.0], [34700.0, 4.0], [33100.0, 2.0], [137100.0, 1.0], [35500.0, 17.0], [36300.0, 8.0], [38700.0, 1.0], [37100.0, 3.0], [41900.0, 63.0], [42700.0, 2.0], [43500.0, 1.0], [45900.0, 9.0], [48300.0, 17.0], [49100.0, 2.0], [47500.0, 1.0], [53100.0, 1.0], [51500.0, 1.0], [53900.0, 25.0], [56300.0, 2.0], [61100.0, 5.0], [60300.0, 3.0], [59500.0, 23.0], [62700.0, 2.0], [64300.0, 43.0], [65100.0, 55.0], [63500.0, 85.0], [66200.0, 7.0], [71000.0, 2.0], [77400.0, 35.0], [74200.0, 1.0], [79000.0, 4.0], [83800.0, 2.0], [85400.0, 5.0], [90200.0, 2.0], [91800.0, 1.0], [96600.0, 2.0], [95000.0, 2.0], [130200.0, 33.0], [131600.0, 3.0], [70100.0, 1.0], [73300.0, 2.0], [71700.0, 1.0], [79700.0, 6.0], [78100.0, 2.0], [82900.0, 3.0], [84500.0, 4.0], [86100.0, 2.0], [94100.0, 2.0], [95700.0, 1.0], [100500.0, 9.0], [98900.0, 1.0], [119700.0, 7.0], [133400.0, 10.0], [16900.0, 35.0], [17300.0, 79.0], [16500.0, 11.0], [17700.0, 13.0], [18100.0, 16.0], [18900.0, 23.0], [18500.0, 4.0], [19300.0, 7.0], [19700.0, 37.0], [20100.0, 21.0], [21300.0, 3.0], [20500.0, 18.0], [20900.0, 4.0], [21700.0, 67.0], [22100.0, 1.0], [22500.0, 3.0], [23300.0, 2.0], [22900.0, 21.0], [23700.0, 4.0], [24100.0, 6.0], [25300.0, 21.0], [24900.0, 25.0], [25700.0, 6.0], [26500.0, 20.0], [26100.0, 1.0], [26900.0, 3.0], [28500.0, 1.0], [28900.0, 37.0], [29300.0, 4.0], [29700.0, 2.0], [30100.0, 3.0], [30500.0, 6.0], [30900.0, 2.0], [31300.0, 3.0], [32500.0, 4.0], [33800.0, 24.0], [33000.0, 26.0], [131100.0, 5.0], [34600.0, 16.0], [36200.0, 2.0], [35400.0, 3.0], [37000.0, 1.0], [37800.0, 6.0], [38600.0, 3.0], [40200.0, 1.0], [39400.0, 5.0], [42600.0, 1.0], [45000.0, 1.0], [43400.0, 28.0], [45800.0, 22.0], [46600.0, 2.0], [48200.0, 3.0], [47400.0, 1.0], [53000.0, 2.0], [51400.0, 1.0], [54600.0, 8.0], [55400.0, 4.0], [57800.0, 3.0], [58600.0, 1.0], [60200.0, 1.0], [63400.0, 5.0], [62600.0, 5.0], [64200.0, 5.0], [65000.0, 15.0], [66000.0, 9.0], [69200.0, 3.0], [67600.0, 1.0], [72400.0, 2.0], [70800.0, 1.0], [74000.0, 11.0], [77200.0, 8.0], [78800.0, 3.0], [83600.0, 2.0], [98000.0, 1.0], [101200.0, 17.0], [128400.0, 5.0], [147300.0, 27.0], [69100.0, 3.0], [65900.0, 2.0], [67500.0, 2.0], [72300.0, 1.0], [77100.0, 55.0], [73900.0, 7.0], [81900.0, 2.0], [93100.0, 2.0], [97900.0, 3.0], [117100.0, 2.0], [129900.0, 9.0], [128300.0, 1.0], [33300.0, 6.0], [136300.0, 8.0], [34900.0, 6.0], [36500.0, 5.0], [37300.0, 1.0], [39700.0, 3.0], [42100.0, 38.0], [43700.0, 1.0], [44500.0, 2.0], [46100.0, 1.0], [46900.0, 1.0], [47700.0, 15.0], [48500.0, 2.0], [50900.0, 11.0], [52500.0, 9.0], [54100.0, 1.0], [56500.0, 3.0], [55700.0, 6.0], [57300.0, 1.0], [58100.0, 2.0], [58900.0, 2.0], [60500.0, 9.0], [61300.0, 2.0], [59700.0, 7.0], [62100.0, 3.0], [65300.0, 4.0], [63700.0, 2.0], [64500.0, 2.0], [68200.0, 1.0], [66600.0, 1.0], [73000.0, 2.0], [74600.0, 13.0], [79400.0, 1.0], [89000.0, 10.0], [97000.0, 2.0], [100200.0, 59.0], [130600.0, 47.0], [127400.0, 2.0], [129000.0, 25.0], [137200.0, 4.0], [169200.0, 4.0], [131700.0, 23.0], [67300.0, 1.0], [65700.0, 3.0], [75300.0, 2.0], [76900.0, 30.0], [80100.0, 2.0], [83300.0, 1.0], [84900.0, 1.0], [88100.0, 2.0], [92900.0, 2.0], [94500.0, 1.0], [96100.0, 1.0], [105700.0, 1.0], [129700.0, 3.0], [128100.0, 33.0], [8300.0, 66.0], [8500.0, 31.0], [8700.0, 56.0], [135800.0, 3.0], [8900.0, 86.0], [9100.0, 42.0], [9500.0, 109.0], [9700.0, 29.0], [9300.0, 349.0], [9900.0, 69.0], [10100.0, 100.0], [10500.0, 212.0], [10300.0, 376.0], [10700.0, 104.0], [10900.0, 66.0], [11100.0, 281.0], [11300.0, 215.0], [11500.0, 149.0], [11700.0, 206.0], [12100.0, 152.0], [11900.0, 169.0], [12700.0, 45.0], [12300.0, 111.0], [12500.0, 149.0], [13100.0, 155.0], [12900.0, 209.0], [13300.0, 175.0], [13500.0, 62.0], [13700.0, 25.0], [13900.0, 239.0], [14100.0, 270.0], [14300.0, 107.0], [14500.0, 30.0], [14700.0, 88.0], [15100.0, 85.0], [15300.0, 11.0], [14900.0, 37.0], [15700.0, 21.0], [15500.0, 107.0], [16100.0, 33.0], [16300.0, 52.0], [15900.0, 3.0], [17000.0, 49.0], [17400.0, 26.0], [16600.0, 14.0], [18200.0, 13.0], [19000.0, 27.0], [19400.0, 43.0], [18600.0, 5.0], [19800.0, 8.0], [20200.0, 12.0], [21400.0, 3.0], [21000.0, 11.0], [20600.0, 16.0], [21800.0, 36.0], [22200.0, 2.0], [23400.0, 5.0], [22600.0, 9.0], [24200.0, 7.0], [23800.0, 2.0], [25400.0, 13.0], [25800.0, 12.0], [26200.0, 8.0], [26600.0, 5.0], [27400.0, 8.0], [27000.0, 4.0], [27800.0, 2.0], [28200.0, 1.0], [29000.0, 8.0], [29400.0, 1.0], [30200.0, 13.0], [30600.0, 4.0], [31400.0, 2.0], [32600.0, 3.0], [32200.0, 2.0], [34000.0, 20.0], [34800.0, 29.0], [133500.0, 10.0], [33200.0, 7.0], [36400.0, 13.0], [38000.0, 1.0], [38800.0, 2.0], [37200.0, 2.0], [40400.0, 6.0], [39600.0, 2.0], [42800.0, 1.0], [42000.0, 3.0], [46000.0, 2.0], [48400.0, 1.0], [47600.0, 33.0], [52400.0, 1.0], [53200.0, 1.0], [51600.0, 1.0], [57200.0, 3.0], [55600.0, 15.0], [56400.0, 3.0], [59600.0, 30.0], [63600.0, 52.0], [64400.0, 2.0], [65200.0, 6.0], [66400.0, 2.0], [72800.0, 2.0], [74400.0, 32.0], [76000.0, 22.0], [77600.0, 9.0], [79200.0, 2.0], [80800.0, 2.0], [87200.0, 2.0], [88800.0, 1.0], [96800.0, 1.0], [95200.0, 1.0], [100000.0, 383.0], [130400.0, 8.0], [128800.0, 1.0], [139200.0, 17.0], [66300.0, 2.0], [67900.0, 1.0], [72700.0, 3.0], [71100.0, 2.0], [75900.0, 5.0], [74300.0, 57.0], [77500.0, 2.0], [80700.0, 2.0], [79100.0, 2.0], [91900.0, 2.0], [130300.0, 6.0], [128700.0, 23.0], [131400.0, 4.0], [33500.0, 5.0], [34300.0, 1.0], [36700.0, 12.0], [37500.0, 42.0], [38300.0, 1.0], [40700.0, 2.0], [41500.0, 7.0], [42300.0, 5.0], [43900.0, 3.0], [44700.0, 71.0], [43100.0, 104.0], [47100.0, 20.0], [45500.0, 14.0], [193100.0, 2.0], [51100.0, 29.0], [50300.0, 8.0], [49500.0, 1.0], [51900.0, 1.0], [53500.0, 1.0], [55900.0, 51.0], [56700.0, 2.0], [59100.0, 1.0], [57500.0, 1.0], [59900.0, 8.0], [63100.0, 2.0], [62300.0, 2.0], [64700.0, 3.0], [65500.0, 2.0], [67000.0, 3.0], [70200.0, 2.0], [71800.0, 2.0], [79800.0, 34.0], [78200.0, 2.0], [83000.0, 1.0], [169300.0, 1.0], [69300.0, 1.0], [67700.0, 1.0], [72500.0, 1.0], [74100.0, 6.0], [77300.0, 2.0], [82100.0, 2.0], [86900.0, 1.0], [96500.0, 1.0], [98100.0, 1.0], [99700.0, 2.0], [101300.0, 2.0], [107700.0, 1.0], [131800.0, 2.0], [17100.0, 10.0], [16700.0, 52.0], [17500.0, 127.0], [18300.0, 1.0], [19100.0, 60.0], [18700.0, 16.0], [19500.0, 4.0], [20300.0, 6.0], [19900.0, 31.0], [20700.0, 3.0], [21100.0, 85.0], [21500.0, 1.0], [21900.0, 47.0], [23500.0, 1.0], [23100.0, 1.0], [22700.0, 16.0], [23900.0, 10.0], [24700.0, 4.0], [25100.0, 6.0], [25500.0, 17.0], [25900.0, 5.0], [26300.0, 2.0], [27500.0, 39.0], [27900.0, 2.0], [28300.0, 1.0], [29100.0, 2.0], [29900.0, 46.0], [30300.0, 1.0], [31100.0, 2.0], [32300.0, 33.0], [32700.0, 2.0], [135900.0, 4.0], [139100.0, 1.0], [35000.0, 1.0], [36600.0, 2.0], [37400.0, 21.0], [38200.0, 3.0], [39800.0, 2.0], [40600.0, 2.0], [42200.0, 28.0], [44600.0, 2.0], [46200.0, 3.0], [45400.0, 1.0], [48600.0, 1.0], [51000.0, 12.0], [49400.0, 5.0], [51800.0, 4.0], [52600.0, 1.0], [55000.0, 2.0], [53400.0, 3.0], [54200.0, 2.0], [55800.0, 2.0], [56600.0, 2.0], [58200.0, 3.0], [59000.0, 1.0], [60600.0, 2.0], [65400.0, 2.0], [64600.0, 2.0], [63800.0, 1.0], [66800.0, 1.0], [68400.0, 2.0], [73200.0, 1.0], [74800.0, 3.0], [76400.0, 1.0], [78000.0, 2.0], [81200.0, 1.0], [86000.0, 1.0], [89200.0, 1.0], [95600.0, 2.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 193200.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 122.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 34339.0, "series": [{"data": [[0.0, 34339.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 1442.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 19297.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 122.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 215.67289719626172, "minX": 1.68290244E12, "maxY": 3000.0, "series": [{"data": [[1.68290244E12, 3000.0], [1.68290262E12, 3000.0], [1.68290256E12, 3000.0], [1.68290274E12, 2828.8262315270945], [1.68290268E12, 3000.0], [1.68290286E12, 215.67289719626172], [1.6829028E12, 874.289562289562], [1.6829025E12, 3000.0]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68290286E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 21.0, "minX": 1.0, "maxY": 193199.0, "series": [{"data": [[2.0, 100175.0], [3.0, 100166.0], [5.0, 100165.0], [8.0, 100163.0], [9.0, 100132.0], [11.0, 100129.5], [12.0, 100128.0], [18.0, 100016.0], [20.0, 100016.33333333333], [23.0, 100151.0], [24.0, 100149.0], [26.0, 100141.0], [28.0, 100140.0], [29.0, 100139.0], [33.0, 100138.5], [32.0, 100139.0], [34.0, 100138.0], [39.0, 100107.0], [38.0, 100136.25], [40.0, 100099.0], [45.0, 100097.8], [47.0, 100098.0], [49.0, 100096.0], [48.0, 100097.0], [51.0, 100095.0], [50.0, 100097.0], [52.0, 100095.0], [55.0, 100094.0], [54.0, 100092.0], [57.0, 100093.0], [56.0, 100094.0], [59.0, 100080.0], [58.0, 100090.0], [60.0, 100080.0], [63.0, 100078.0], [62.0, 100079.0], [66.0, 100073.5], [64.0, 100076.0], [70.0, 100069.0], [69.0, 100071.66666666667], [74.0, 100055.0], [73.0, 100056.0], [72.0, 100056.0], [78.0, 100053.0], [77.0, 100054.0], [83.0, 100047.0], [81.0, 100049.0], [80.0, 100052.0], [86.0, 100043.0], [85.0, 100045.0], [84.0, 100047.0], [91.0, 100036.33333333333], [95.0, 100034.0], [94.0, 100035.0], [93.0, 100034.0], [92.0, 100036.0], [99.0, 100021.0], [98.0, 100025.66666666667], [101.0, 100015.0], [111.0, 100144.0], [115.0, 100144.15384615386], [119.0, 100141.0], [118.0, 100143.0], [117.0, 100144.0], [123.0, 100141.0], [122.0, 100143.0], [121.0, 100142.0], [127.0, 100135.0], [126.0, 100140.0], [125.0, 100141.0], [134.0, 100123.0], [129.0, 100132.5], [143.0, 100099.0], [141.0, 100100.0], [139.0, 100110.0], [137.0, 100111.0], [136.0, 100117.0], [151.0, 100096.0], [148.0, 100098.0], [147.0, 100098.5], [159.0, 100094.0], [157.0, 100094.0], [154.0, 100095.0], [153.0, 100096.0], [167.0, 100093.0], [163.0, 100094.33333333333], [174.0, 100092.0], [173.0, 100092.0], [172.0, 100092.0], [182.0, 100090.0], [181.0, 100089.0], [180.0, 100090.0], [179.0, 100091.0], [178.0, 100091.0], [177.0, 100090.0], [176.0, 100091.66666666667], [191.0, 100086.0], [190.0, 100087.75], [186.0, 100088.5], [184.0, 100089.0], [199.0, 100071.5], [197.0, 100073.0], [196.0, 100078.66666666667], [193.0, 100085.0], [192.0, 100086.0], [207.0, 100052.0], [202.0, 100060.0], [201.0, 100061.0], [200.0, 100063.0], [215.0, 100050.0], [214.0, 100050.0], [213.0, 100052.0], [212.0, 100052.83333333334], [211.0, 100053.0], [223.0, 100048.0], [222.0, 100049.0], [221.0, 100049.0], [218.0, 100049.5], [216.0, 100050.0], [230.0, 100047.0], [227.0, 100047.75], [238.0, 100044.0], [237.0, 100044.0], [236.0, 100045.0], [233.0, 100045.0], [232.0, 100046.0], [247.0, 100042.0], [245.0, 100042.5], [243.0, 100043.0], [242.0, 100043.0], [253.0, 100040.0], [252.0, 100041.0], [250.0, 100041.0], [249.0, 100041.0], [271.0, 100028.5], [270.0, 100030.0], [269.0, 100029.0], [264.0, 100030.0], [263.0, 100031.33333333333], [262.0, 100032.0], [258.0, 100032.0], [256.0, 100040.33333333333], [287.0, 100150.0], [282.0, 100027.25], [281.0, 100027.0], [280.0, 100027.0], [275.0, 100028.0], [273.0, 100028.0], [300.0, 100146.5], [299.0, 100148.0], [297.0, 100146.5], [295.0, 100149.0], [292.0, 100149.33333333333], [291.0, 100148.0], [289.0, 100149.25], [307.0, 100136.0], [317.0, 100293.0], [318.0, 100293.0], [316.0, 100294.0], [315.0, 100278.0], [311.0, 100300.0], [310.0, 97064.0], [309.0, 98071.0], [308.0, 100132.0], [306.0, 100144.0], [305.0, 100145.0], [304.0, 100147.25], [334.0, 100271.0], [335.0, 95755.0], [333.0, 100247.5], [331.0, 100279.0], [328.0, 100196.0], [327.0, 100280.0], [326.0, 100265.4], [321.0, 100284.0], [320.0, 100292.0], [350.0, 92927.0], [351.0, 91897.0], [349.0, 92906.0], [348.0, 89696.0], [347.0, 93915.0], [346.0, 95007.0], [345.0, 95009.0], [344.0, 95955.0], [343.0, 96018.0], [337.0, 98962.0], [336.0, 100054.0], [339.0, 96091.0], [338.0, 97099.0], [342.0, 96932.0], [341.0, 96944.0], [340.0, 97951.0], [366.0, 100292.0], [367.0, 100290.0], [364.0, 100293.0], [363.0, 100294.0], [362.0, 100294.0], [361.0, 100293.0], [358.0, 100294.0], [356.0, 100301.0], [354.0, 85959.0], [353.0, 85962.0], [352.0, 86967.0], [381.0, 100259.0], [383.0, 100259.5], [380.0, 100260.0], [377.0, 100260.0], [375.0, 100266.0], [374.0, 100267.0], [373.0, 100268.0], [372.0, 100272.0], [371.0, 100272.66666666667], [368.0, 100273.0], [398.0, 99190.0], [399.0, 98183.0], [397.0, 85081.0], [396.0, 100128.0], [395.0, 100136.0], [394.0, 86089.0], [393.0, 84950.0], [392.0, 100244.0], [391.0, 100252.0], [385.0, 100258.0], [384.0, 100258.0], [387.0, 100255.0], [386.0, 100257.0], [389.0, 100253.0], [388.0, 100255.0], [414.0, 79781.0], [415.0, 78857.0], [413.0, 79783.0], [412.0, 80813.0], [411.0, 80876.0], [410.0, 81883.0], [409.0, 79938.0], [408.0, 80946.0], [407.0, 78894.0], [401.0, 81923.0], [400.0, 82929.0], [403.0, 80913.0], [402.0, 81921.0], [406.0, 79903.0], [405.0, 95224.0], [404.0, 96162.0], [430.0, 67487.0], [431.0, 67920.0], [429.0, 71729.0], [428.0, 72798.0], [427.0, 72708.0], [426.0, 73808.0], [425.0, 73810.0], [424.0, 74817.0], [423.0, 70818.0], [417.0, 73846.0], [416.0, 78855.0], [419.0, 72837.0], [418.0, 73844.0], [422.0, 71825.0], [421.0, 71827.0], [420.0, 72835.0], [446.0, 63652.0], [447.0, 62643.0], [445.0, 63653.0], [444.0, 64638.0], [443.0, 64723.0], [442.0, 65649.0], [441.0, 65672.0], [440.0, 66656.0], [439.0, 66742.0], [433.0, 65770.0], [432.0, 66777.0], [435.0, 68761.0], [434.0, 65468.0], [438.0, 67750.0], [437.0, 67669.0], [436.0, 68759.0], [462.0, 55637.0], [463.0, 54545.0], [461.0, 55638.0], [460.0, 56646.0], [459.0, 56565.0], [458.0, 57655.0], [457.0, 57575.0], [456.0, 58664.0], [455.0, 58583.0], [449.0, 61634.0], [448.0, 62642.0], [451.0, 60686.0], [450.0, 61693.0], [454.0, 59636.0], [452.0, 60683.0], [478.0, 47561.0], [479.0, 46553.0], [477.0, 47480.0], [476.0, 48509.0], [475.0, 48573.0], [474.0, 49519.0], [473.0, 49499.0], [472.0, 50506.0], [471.0, 50509.0], [465.0, 53619.0], [464.0, 54543.0], [467.0, 52610.0], [466.0, 53533.0], [470.0, 51515.0], [469.0, 51602.0], [468.0, 52547.0], [494.0, 39485.0], [495.0, 38477.0], [493.0, 39405.0], [492.0, 40495.0], [491.0, 40496.0], [490.0, 41503.0], [489.0, 41506.0], [488.0, 42514.0], [487.0, 42515.0], [481.0, 45545.0], [480.0, 46469.0], [483.0, 44534.0], [482.0, 45542.0], [486.0, 43524.0], [485.0, 43441.0], [484.0, 44532.0], [504.0, 35427.0], [511.0, 37050.5], [499.0, 36458.0], [498.0, 37466.0], [497.0, 37387.0], [496.0, 38391.0], [507.0, 35381.0], [506.0, 35383.0], [505.0, 35406.0], [503.0, 35364.0], [502.0, 35385.0], [501.0, 35396.0], [500.0, 36456.0], [536.0, 34597.5], [540.0, 42225.0], [528.0, 34642.0], [530.0, 42226.0], [518.0, 70239.0], [514.0, 35617.5], [512.0, 42608.0], [526.0, 34560.0], [522.0, 34723.0], [520.0, 34645.0], [534.0, 36499.0], [532.0, 42225.0], [568.0, 38525.5], [574.0, 39490.5], [562.0, 42215.0], [572.0, 42210.0], [550.0, 34550.0], [548.0, 34554.0], [546.0, 34554.0], [558.0, 34630.0], [556.0, 42363.5], [552.0, 101904.5], [566.0, 42505.0], [564.0, 42216.0], [604.0, 42175.0], [606.0, 42176.0], [594.0, 42194.5], [592.0, 42194.0], [576.0, 42206.0], [578.0, 34538.0], [580.0, 36474.0], [582.0, 36474.0], [590.0, 42196.0], [588.0, 42200.0], [598.0, 42187.0], [596.0, 42193.0], [632.0, 42133.0], [634.0, 42132.0], [628.0, 42430.0], [636.0, 39261.0], [624.0, 42144.0], [608.0, 36436.0], [610.0, 42156.0], [612.0, 42154.5], [614.0, 42155.0], [622.0, 42145.0], [620.0, 42439.0], [618.0, 42146.0], [630.0, 42135.0], [626.0, 36412.0], [668.0, 32333.0], [670.0, 32332.0], [656.0, 32300.0], [660.0, 33259.0], [666.0, 32334.0], [664.0, 31167.0], [646.0, 42085.5], [644.0, 38283.0], [640.0, 37803.5], [654.0, 33313.0], [652.0, 34321.0], [650.0, 40265.666666666664], [662.0, 33257.0], [700.0, 29310.0], [688.0, 32314.0], [690.0, 32313.0], [692.0, 32307.0], [702.0, 29032.0], [698.0, 30261.0], [696.0, 32230.0], [672.0, 32331.0], [674.0, 32330.0], [676.0, 32330.0], [686.0, 32315.0], [684.0, 32316.0], [682.0, 32318.0], [694.0, 32303.0], [732.0, 20840.0], [720.0, 20903.0], [724.0, 20850.0], [734.0, 20835.0], [730.0, 20842.0], [728.0, 20844.0], [704.0, 28023.0], [706.0, 27014.0], [708.0, 25924.0], [710.0, 24995.0], [718.0, 20916.0], [716.0, 21970.0], [714.0, 22898.0], [712.0, 23906.0], [726.0, 20848.0], [764.0, 21943.0], [766.0, 20011.0], [752.0, 20015.0], [754.0, 20017.0], [756.0, 20015.0], [762.0, 20007.0], [760.0, 20010.0], [742.0, 20022.0], [740.0, 20020.0], [738.0, 20283.0], [736.0, 20320.0], [750.0, 20017.0], [748.0, 20015.0], [758.0, 21946.0], [794.0, 20962.0], [798.0, 19997.0], [786.0, 20965.5], [784.0, 21931.0], [788.0, 20962.5], [796.0, 19996.0], [774.0, 20006.0], [768.0, 20005.0], [782.0, 19998.0], [780.0, 20004.0], [778.0, 21936.0], [776.0, 21936.0], [790.0, 21930.0], [826.0, 21902.0], [830.0, 21899.0], [816.0, 21908.0], [828.0, 21901.0], [802.0, 20636.333333333332], [804.0, 21921.0], [806.0, 19984.0], [814.0, 21912.0], [812.0, 21914.0], [810.0, 20950.0], [808.0, 21919.0], [822.0, 21904.0], [820.0, 19974.0], [818.0, 19969.0], [834.0, 21895.0], [838.0, 21883.0], [862.0, 21826.0], [854.0, 20862.5], [852.0, 21828.0], [832.0, 19962.0], [836.0, 20928.5], [844.0, 19913.0], [842.0, 21878.0], [840.0, 19947.0], [892.0, 18830.0], [880.0, 21794.0], [882.0, 21791.0], [894.0, 19796.0], [890.0, 19902.0], [888.0, 21786.0], [864.0, 21824.0], [868.0, 21820.0], [870.0, 19886.0], [878.0, 21795.5], [876.0, 21796.0], [874.0, 21799.0], [872.0, 21819.0], [886.0, 21789.0], [920.0, 18905.0], [926.0, 18903.0], [912.0, 24928.0], [924.0, 24927.0], [896.0, 19786.0], [898.0, 19780.0], [900.0, 19705.0], [910.0, 18908.0], [908.0, 20539.0], [906.0, 17282.0], [904.0, 19173.0], [914.0, 21917.5], [930.0, 18903.0], [952.0, 24909.0], [946.0, 24912.0], [956.0, 24902.0], [928.0, 18901.0], [934.0, 21911.0], [932.0, 21912.0], [942.0, 19709.5], [940.0, 24917.0], [938.0, 88292.0], [936.0, 22725.0], [950.0, 20126.0], [948.0, 20518.0], [984.0, 18863.0], [988.0, 20490.0], [980.0, 20498.0], [978.0, 19713.0], [966.0, 18876.0], [964.0, 20507.0], [962.0, 24899.0], [960.0, 20506.0], [974.0, 19686.0], [972.0, 18872.0], [970.0, 20501.0], [982.0, 18866.0], [1018.0, 18820.0], [1016.0, 24842.0], [1022.0, 22644.5], [1008.0, 19691.0], [1020.0, 19663.0], [996.0, 18854.0], [998.0, 24872.0], [1006.0, 24869.0], [1004.0, 24869.0], [1000.0, 20477.0], [1014.0, 18821.0], [1012.0, 19658.0], [1010.0, 24866.0], [1080.0, 15404.5], [1064.0, 13084.5], [1060.0, 22910.0], [1056.0, 13089.0], [1076.0, 13078.0], [1036.0, 23685.0], [1032.0, 21823.5], [1024.0, 18818.0], [1052.0, 22916.0], [1044.0, 18007.5], [1040.0, 15093.0], [1068.0, 13081.0], [1136.0, 20284.0], [1144.0, 22858.0], [1124.0, 13057.0], [1148.0, 22852.0], [1140.0, 22858.0], [1092.0, 15398.5], [1088.0, 13075.0], [1096.0, 17985.0], [1100.0, 22898.0], [1116.0, 22886.0], [1112.0, 13064.0], [1108.0, 22893.0], [1132.0, 13045.0], [1204.0, 10906.0], [1192.0, 22790.0], [1212.0, 17594.0], [1184.0, 12996.5], [1164.0, 17664.0], [1160.0, 22841.0], [1156.0, 22846.0], [1176.0, 13001.0], [1172.0, 13006.0], [1196.0, 15289.0], [1188.0, 12994.0], [1276.0, 11924.0], [1248.0, 22743.0], [1268.0, 17801.0], [1216.0, 15268.0], [1244.0, 12918.0], [1240.0, 12921.5], [1236.0, 15257.5], [1256.0, 12897.0], [1332.0, 10170.5], [1340.0, 11558.0], [1312.0, 19055.0], [1316.0, 13123.0], [1320.0, 11724.0], [1328.0, 11562.5], [1292.0, 11842.5], [1288.0, 11905.0], [1280.0, 11919.0], [1308.0, 11820.0], [1304.0, 21648.0], [1296.0, 13391.0], [1324.0, 9624.0], [1392.0, 11528.0], [1404.0, 10132.5], [1400.0, 11525.5], [1396.0, 11527.0], [1356.0, 11550.0], [1352.0, 11549.0], [1348.0, 11552.0], [1344.0, 11556.0], [1372.0, 11543.0], [1368.0, 11541.0], [1364.0, 11546.0], [1384.0, 11537.0], [1416.0, 8687.0], [1460.0, 10390.0], [1464.0, 10383.0], [1456.0, 11171.0], [1428.0, 8597.0], [1408.0, 11510.0], [1412.0, 11469.666666666666], [1420.0, 8717.5], [1424.0, 16625.0], [1520.0, 7502.0], [1532.0, 9154.0], [1504.0, 11121.5], [1512.0, 10332.0], [1516.0, 7563.0], [1484.0, 7657.0], [1480.0, 11150.0], [1476.0, 10368.0], [1472.0, 10379.0], [1500.0, 7573.0], [1496.0, 7573.0], [1492.0, 10356.5], [1488.0, 10360.0], [1592.0, 8287.0], [1588.0, 8289.0], [1568.0, 9118.0], [1576.0, 9099.0], [1580.0, 8703.0], [1596.0, 8284.0], [1584.0, 8695.0], [1540.0, 8367.0], [1548.0, 9145.5], [1564.0, 8350.0], [1556.0, 5653.0], [1552.0, 8752.5], [1640.0, 162.16666666666666], [1636.0, 163.0], [1644.0, 161.0], [1656.0, 153.66666666666666], [1648.0, 154.5], [1600.0, 8804.0], [1616.0, 165.0], [1672.0, 145.25], [1676.0, 145.25], [1692.0, 140.0], [1688.0, 139.0], [1684.0, 140.0], [1708.0, 134.0], [1700.0, 138.0], [1764.0, 149.0], [1776.0, 139.5], [1732.0, 120.0], [1772.0, 140.16666666666666], [1832.0, 134.4], [1852.0, 5051.0], [1836.0, 7036.0], [1848.0, 2127.0], [1844.0, 6237.0], [1840.0, 7033.0], [1820.0, 134.5], [1912.0, 5021.0], [1888.0, 5034.0], [1892.0, 5034.0], [1896.0, 5031.0], [1900.0, 9420.0], [1908.0, 5026.0], [1904.0, 5027.0], [1856.0, 5050.5], [1860.0, 5051.0], [1868.0, 5046.0], [1884.0, 5041.0], [1880.0, 5043.0], [1876.0, 5044.0], [1872.0, 5047.0], [1976.0, 15615.0], [1952.0, 12794.0], [1960.0, 12789.0], [1964.0, 12786.0], [1980.0, 15613.0], [1920.0, 5018.0], [1924.0, 5016.0], [1932.0, 5017.0], [1948.0, 4970.0], [1936.0, 12840.0], [2040.0, 13631.0], [2016.0, 11249.0], [2024.0, 12209.0], [2028.0, 7335.0], [2044.0, 10757.0], [2032.0, 10771.0], [1984.0, 12742.0], [1992.0, 11780.0], [1996.0, 11774.0], [2012.0, 3423.0], [2008.0, 265.3333333333333], [2004.0, 3942.0], [2064.0, 14618.0], [2056.0, 10719.0], [2112.0, 1106.0], [2168.0, 138.0], [2144.0, 140.0], [2048.0, 12182.5], [2104.0, 1117.0], [2096.0, 1126.0], [2088.0, 11355.0], [2080.0, 11646.0], [2128.0, 143.0], [2280.0, 300.0], [2240.0, 2074.0], [2256.0, 1119.0], [2264.0, 1108.0], [2272.0, 300.0], [2184.0, 137.0], [2200.0, 138.0], [2232.0, 9397.0], [2224.0, 72.0], [2312.0, 291.0], [2520.0, 236.0], [2488.0, 235.2], [2464.0, 245.0], [2672.0, 102.0], [2664.0, 1612.5], [2680.0, 1115.0], [2560.0, 245.25], [2568.0, 247.0], [2576.0, 238.0], [2584.0, 240.0], [2592.0, 240.0], [2752.0, 125.8], [2776.0, 92.33333333333333], [2800.0, 90.0], [2792.0, 90.5], [2736.0, 130.5], [2688.0, 1109.0], [2696.0, 1101.0], [2912.0, 3202.0], [2880.0, 727.75], [2904.0, 2360.0], [2920.0, 3885.0], [2824.0, 64302.0], [2816.0, 66.5], [2856.0, 1072.0], [2848.0, 2988.0], [3000.0, 7526.053838198209], [2968.0, 118.0], [2049.0, 2919.0], [2065.0, 11665.0], [2105.0, 1114.0], [2097.0, 1122.0], [2089.0, 11353.0], [2081.0, 11643.0], [2241.0, 2073.0], [2281.0, 300.0], [2249.0, 1126.0], [2265.0, 1107.0], [2177.0, 137.0], [2185.0, 136.0], [2217.0, 135.125], [2209.0, 136.33333333333334], [2321.0, 292.8], [2313.0, 295.5], [2545.0, 243.0], [2537.0, 233.0], [2553.0, 238.0], [2449.0, 252.0], [2489.0, 235.66666666666666], [2473.0, 237.0], [2665.0, 136.0], [2673.0, 100.0], [2657.0, 137.66666666666666], [2577.0, 237.5], [2585.0, 237.625], [2801.0, 91.0], [2809.0, 79.0], [2753.0, 125.0], [2777.0, 92.0], [2785.0, 92.42857142857143], [2745.0, 127.0], [2737.0, 873.1666666666667], [2729.0, 133.0], [2689.0, 1107.0], [2697.0, 1096.0], [2705.0, 136.0], [2921.0, 4574.0], [2929.0, 3458.2], [2881.0, 182.0], [2897.0, 2362.0], [2905.0, 2358.0], [2841.0, 1096.0], [2825.0, 64301.0], [2817.0, 66.0], [2873.0, 189.5], [2865.0, 5154.5], [2857.0, 2337.0], [2849.0, 4883.0], [2985.0, 116.0], [1073.0, 17993.5], [1065.0, 22911.0], [1057.0, 13088.0], [1081.0, 13079.0], [1037.0, 23685.0], [1033.0, 20413.0], [1053.0, 22916.0], [1049.0, 13090.5], [1045.0, 13092.0], [1041.0, 13096.0], [1069.0, 14954.0], [1145.0, 22857.0], [1149.0, 13022.0], [1125.0, 18921.666666666668], [1121.0, 13059.5], [1129.0, 13056.0], [1141.0, 17682.0], [1137.0, 13045.0], [1101.0, 11014.0], [1097.0, 22898.0], [1089.0, 13073.0], [1113.0, 22891.0], [1105.0, 16952.5], [1133.0, 17960.5], [1205.0, 12948.0], [1213.0, 16747.0], [1189.0, 12995.0], [1209.0, 16831.5], [1201.0, 12962.666666666666], [1165.0, 13015.0], [1157.0, 13020.0], [1181.0, 15322.0], [1173.0, 17656.0], [1169.0, 17925.5], [1197.0, 12964.0], [1229.0, 17846.0], [1265.0, 17808.0], [1217.0, 12942.5], [1221.0, 12940.0], [1225.0, 14485.0], [1241.0, 12920.0], [1261.0, 12897.0], [1257.0, 12897.0], [1253.0, 15240.5], [1333.0, 11559.0], [1329.0, 11564.0], [1341.0, 11556.0], [1317.0, 13199.0], [1337.0, 11558.0], [1309.0, 11819.0], [1281.0, 16570.0], [1285.0, 14239.5], [1293.0, 21669.0], [1289.0, 11905.0], [1305.0, 11821.0], [1301.0, 16748.5], [1297.0, 11840.0], [1325.0, 9704.0], [1321.0, 11722.0], [1393.0, 11528.0], [1405.0, 11521.0], [1377.0, 10150.5], [1397.0, 11526.0], [1349.0, 11550.0], [1353.0, 11548.0], [1357.0, 11547.0], [1373.0, 10150.75], [1365.0, 11540.0], [1361.0, 11545.333333333334], [1389.0, 10148.0], [1381.0, 8760.5], [1461.0, 7607.0], [1453.0, 147354.0], [1469.0, 10382.5], [1465.0, 10383.0], [1457.0, 10387.0], [1409.0, 11510.0], [1413.0, 8692.0], [1421.0, 9601.0], [1425.0, 11445.0], [1521.0, 7499.0], [1505.0, 10340.0], [1509.0, 10860.333333333334], [1517.0, 11112.0], [1525.0, 8763.5], [1481.0, 10365.0], [1473.0, 7601.0], [1501.0, 7568.0], [1493.0, 7576.0], [1489.0, 10361.0], [1589.0, 8289.0], [1597.0, 8281.0], [1569.0, 8332.0], [1581.0, 8312.0], [1593.0, 9069.0], [1585.0, 8293.0], [1537.0, 8368.333333333334], [1541.0, 8363.0], [1545.0, 9145.0], [1549.0, 9146.0], [1565.0, 9130.0], [1561.0, 9134.0], [1557.0, 8355.0], [1553.0, 8358.0], [1661.0, 152.5], [1637.0, 162.0], [1641.0, 162.0], [1613.0, 1219.25], [1601.0, 5102.0], [1629.0, 163.0], [1713.0, 133.0], [1673.0, 146.0], [1697.0, 139.0], [1669.0, 146.66666666666666], [1693.0, 139.0], [1689.0, 139.0], [1709.0, 134.0], [1781.0, 138.66666666666666], [1765.0, 148.0], [1733.0, 119.77777777777777], [1753.0, 120.0], [1773.0, 139.0], [1853.0, 5053.0], [1829.0, 134.0], [1825.0, 135.1818181818182], [1833.0, 7036.0], [1837.0, 7035.0], [1849.0, 2124.0], [1845.0, 6236.0], [1793.0, 136.0], [1821.0, 135.0], [1817.0, 136.0], [1905.0, 12858.0], [1917.0, 10239.0], [1889.0, 5036.0], [1901.0, 5027.0], [1857.0, 5050.0], [1861.0, 5050.666666666667], [1865.0, 5050.5], [1869.0, 5046.0], [1881.0, 5044.0], [1981.0, 4913.0], [1957.0, 11071.5], [1961.0, 4956.0], [1965.0, 12780.0], [1973.0, 12766.5], [1969.0, 10168.333333333334], [1933.0, 5016.0], [1941.0, 4982.0], [1937.0, 5007.0], [2045.0, 10756.0], [2017.0, 11247.0], [2021.0, 10779.0], [2025.0, 10776.0], [2037.0, 8285.5], [2033.0, 10770.0], [1985.0, 1243.0], [1989.0, 10063.5], [2005.0, 14611.0], [2001.0, 3944.0], [2170.0, 140.0], [2114.0, 1100.0], [2074.0, 11659.333333333334], [2066.0, 11666.0], [2058.0, 12151.0], [2050.0, 10749.0], [2098.0, 1121.0], [2186.0, 136.75], [2242.0, 2072.0], [2250.0, 1126.0], [2258.0, 1113.0], [2178.0, 138.0], [2194.0, 137.66666666666666], [2202.0, 136.0], [2234.0, 128286.0], [2226.0, 72.0], [2210.0, 136.16666666666666], [2410.0, 246.0], [2378.0, 249.0], [2306.0, 291.7142857142857], [2538.0, 242.0], [2506.0, 237.0], [2442.0, 253.0], [2490.0, 261.3333333333333], [2482.0, 237.0], [2466.0, 253.0], [2578.0, 240.25], [2674.0, 5042.0], [2682.0, 1112.0], [2658.0, 137.0], [2610.0, 161.7142857142857], [2562.0, 236.5], [2570.0, 247.33333333333334], [2586.0, 239.2], [2602.0, 306.3333333333333], [2594.0, 307.0], [2698.0, 1096.0], [2802.0, 90.0], [2754.0, 125.8], [2794.0, 90.0], [2730.0, 131.5], [2722.0, 133.0], [2690.0, 1107.0], [2706.0, 136.0], [2922.0, 2330.0], [2914.0, 4066.5], [2842.0, 1096.0], [2866.0, 1044.0], [2978.0, 117.0], [2075.0, 11657.0], [2107.0, 1110.0], [2115.0, 10330.0], [2067.0, 11665.0], [2051.0, 10741.0], [2059.0, 11666.0], [2099.0, 1121.0], [2083.0, 14593.5], [2283.0, 299.5], [2251.0, 1126.0], [2243.0, 9764.0], [2259.0, 1112.0], [2267.0, 1106.5], [2179.0, 138.0], [2187.0, 136.0], [2195.0, 137.5], [2235.0, 128286.0], [2227.0, 73.0], [2323.0, 293.0], [2379.0, 255.0], [2315.0, 290.0], [2307.0, 291.0], [2547.0, 242.0], [2507.0, 235.0], [2475.0, 258.5], [2467.0, 252.0], [2667.0, 405.3333333333333], [2675.0, 8079.0], [2571.0, 237.25], [2579.0, 236.66666666666666], [2603.0, 237.0], [2595.0, 252.6], [2755.0, 125.0], [2771.0, 94.0], [2803.0, 92.0], [2731.0, 131.66666666666666], [2899.0, 178.5], [2915.0, 2342.0], [2907.0, 2356.0], [2843.0, 1096.0], [2827.0, 128749.5], [2875.0, 1278.5], [2851.0, 2981.5], [2947.0, 3818.714285714286], [2955.0, 2859.0], [2979.0, 117.375], [539.0, 38430.5], [531.0, 169266.0], [543.0, 34556.0], [529.0, 34559.0], [537.0, 42225.0], [527.0, 34561.0], [525.0, 38394.5], [523.0, 34643.0], [521.0, 38477.0], [533.0, 34559.0], [549.0, 42221.0], [571.0, 42210.333333333336], [563.0, 42215.0], [575.0, 34538.0], [561.0, 38380.5], [547.0, 42220.0], [545.0, 101910.5], [559.0, 42218.0], [557.0, 42216.0], [555.0, 34551.0], [553.0, 42217.0], [565.0, 42212.0], [601.0, 39320.5], [607.0, 42463.0], [605.0, 36446.0], [603.0, 42178.0], [591.0, 36465.0], [577.0, 34541.0], [579.0, 42205.0], [581.0, 36478.0], [589.0, 42198.0], [587.0, 42348.0], [585.0, 37763.666666666664], [599.0, 42186.0], [595.0, 169230.0], [633.0, 42132.0], [625.0, 42142.0], [623.0, 42147.0], [609.0, 42165.0], [613.0, 42152.0], [615.0, 42153.0], [621.0, 42144.5], [617.0, 42300.0], [631.0, 42134.0], [629.0, 42135.0], [627.0, 42430.0], [665.0, 31152.0], [669.0, 32335.0], [659.0, 33259.5], [657.0, 33263.0], [661.0, 33258.0], [667.0, 32337.0], [647.0, 42372.0], [643.0, 36371.0], [655.0, 32302.0], [653.0, 33396.0], [651.0, 34406.0], [663.0, 33259.0], [701.0, 29034.0], [703.0, 28025.0], [689.0, 32313.0], [691.0, 32311.0], [693.0, 32307.0], [699.0, 29316.0], [697.0, 30262.0], [687.0, 32314.0], [673.0, 32334.0], [675.0, 32328.0], [679.0, 32319.5], [677.0, 32325.0], [685.0, 32316.0], [683.0, 32318.0], [681.0, 32320.5], [695.0, 32300.0], [733.0, 20834.0], [735.0, 20835.0], [723.0, 20852.5], [721.0, 20896.0], [725.0, 20851.0], [731.0, 20837.0], [729.0, 20846.0], [719.0, 20903.0], [705.0, 26932.0], [707.0, 25925.0], [709.0, 24997.0], [711.0, 23989.0], [717.0, 20916.0], [715.0, 21891.0], [713.0, 22981.0], [727.0, 20850.0], [761.0, 20007.0], [765.0, 20009.0], [753.0, 21948.0], [755.0, 20015.0], [763.0, 21945.0], [743.0, 20016.0], [741.0, 20015.0], [739.0, 20281.0], [737.0, 20314.0], [751.0, 20018.0], [749.0, 20013.0], [745.0, 20020.5], [757.0, 20015.0], [795.0, 19995.0], [799.0, 21924.0], [789.0, 21931.0], [797.0, 19994.0], [793.0, 19996.0], [775.0, 20003.0], [773.0, 20007.0], [771.0, 20006.0], [769.0, 20010.0], [783.0, 20002.0], [781.0, 20004.0], [779.0, 20003.0], [777.0, 20005.0], [791.0, 21929.0], [825.0, 21256.333333333332], [831.0, 21896.0], [817.0, 21910.0], [829.0, 21901.0], [815.0, 21911.0], [803.0, 31383.0], [805.0, 21921.0], [807.0, 31381.0], [813.0, 19982.0], [811.0, 19977.0], [821.0, 21906.0], [833.0, 19963.0], [863.0, 21825.0], [861.0, 21827.0], [859.0, 21442.0], [851.0, 21832.5], [847.0, 21833.0], [837.0, 21884.0], [839.0, 21881.0], [845.0, 19899.0], [843.0, 21879.0], [841.0, 19947.0], [893.0, 19796.0], [895.0, 19795.0], [881.0, 21791.0], [885.0, 21789.5], [883.0, 21791.0], [891.0, 18832.0], [889.0, 19821.0], [879.0, 21793.0], [865.0, 21822.0], [867.0, 21820.0], [871.0, 19889.0], [875.0, 21800.0], [873.0, 21801.0], [887.0, 21788.0], [903.0, 19173.5], [927.0, 20534.0], [925.0, 22918.0], [921.0, 24927.0], [911.0, 20539.0], [897.0, 19788.0], [899.0, 19779.0], [901.0, 19704.0], [909.0, 19754.0], [907.0, 24933.0], [905.0, 17201.0], [919.0, 22733.0], [917.0, 21918.5], [915.0, 20537.0], [955.0, 24903.5], [957.0, 18882.0], [959.0, 19722.0], [945.0, 21903.0], [953.0, 20511.0], [943.0, 24915.0], [929.0, 24925.0], [939.0, 18897.0], [951.0, 20517.0], [947.0, 18889.0], [987.0, 22686.0], [989.0, 18859.0], [977.0, 21880.0], [979.0, 24890.0], [985.0, 19707.0], [967.0, 24898.0], [965.0, 18875.0], [963.0, 18875.0], [961.0, 18877.0], [975.0, 20500.0], [971.0, 20502.0], [969.0, 21885.0], [983.0, 24885.0], [981.0, 20496.0], [995.0, 20485.0], [1023.0, 24840.0], [1009.0, 24867.0], [1017.0, 24842.0], [1007.0, 24868.0], [993.0, 21192.0], [997.0, 20485.0], [999.0, 24871.0], [1005.0, 20477.0], [1003.0, 19663.0], [1001.0, 20478.0], [1013.0, 24844.0], [1038.0, 23682.0], [1078.0, 17994.0], [1082.0, 13076.0], [1086.0, 16352.333333333334], [1034.0, 16780.0], [1030.0, 23374.666666666668], [1026.0, 24839.0], [1054.0, 13087.0], [1050.0, 17740.0], [1042.0, 22920.0], [1070.0, 22907.0], [1066.0, 13081.0], [1142.0, 13031.0], [1150.0, 22846.0], [1126.0, 13055.0], [1146.0, 13027.0], [1138.0, 13046.0], [1118.0, 13058.0], [1098.0, 13072.0], [1102.0, 22895.0], [1110.0, 17978.5], [1106.0, 22892.0], [1130.0, 13056.0], [1166.0, 13015.0], [1206.0, 12948.0], [1162.0, 13016.0], [1158.0, 13018.0], [1154.0, 16296.0], [1178.0, 10945.5], [1174.0, 22829.0], [1198.0, 12963.0], [1194.0, 12965.0], [1186.0, 15321.5], [1270.0, 14738.5], [1278.0, 11921.5], [1250.0, 22743.5], [1274.0, 15201.0], [1266.0, 22718.0], [1246.0, 17569.0], [1218.0, 12941.0], [1226.0, 22760.0], [1222.0, 12935.0], [1242.0, 22745.0], [1238.0, 12922.5], [1234.0, 12931.666666666666], [1262.0, 12893.0], [1258.0, 12894.0], [1254.0, 22742.0], [1334.0, 11560.0], [1330.0, 11561.0], [1342.0, 11557.0], [1314.0, 14141.0], [1318.0, 12495.0], [1322.0, 10715.0], [1338.0, 8779.0], [1290.0, 11900.0], [1286.0, 16563.0], [1282.0, 11918.0], [1310.0, 11818.0], [1306.0, 11821.0], [1302.0, 21660.0], [1298.0, 21663.0], [1326.0, 8783.0], [1394.0, 11526.0], [1402.0, 11524.5], [1382.0, 11538.0], [1398.0, 11524.0], [1358.0, 11545.0], [1354.0, 11547.0], [1350.0, 8774.0], [1346.0, 11554.0], [1374.0, 11540.0], [1390.0, 11535.0], [1466.0, 10383.0], [1454.0, 147355.1666666667], [1414.0, 11457.0], [1422.0, 8675.0], [1426.0, 11439.0], [1522.0, 6229.0], [1510.0, 10334.0], [1534.0, 8760.5], [1506.0, 11120.0], [1514.0, 10334.0], [1518.0, 10330.0], [1486.0, 8973.5], [1482.0, 7658.0], [1478.0, 7590.0], [1474.0, 10377.0], [1502.0, 7561.0], [1498.0, 12939.5], [1494.0, 15528.0], [1490.0, 10357.0], [1586.0, 8290.0], [1574.0, 8258.75], [1594.0, 8285.0], [1570.0, 9119.0], [1578.0, 9100.0], [1546.0, 8362.0], [1550.0, 5655.0], [1566.0, 9130.0], [1562.0, 9131.0], [1558.0, 8350.0], [1654.0, 153.5], [1658.0, 152.5], [1638.0, 162.0], [1642.0, 162.4], [1646.0, 155.0], [1614.0, 164.6], [1610.0, 165.5], [1602.0, 5100.0], [1626.0, 164.0], [1694.0, 139.0], [1702.0, 138.0], [1698.0, 139.0], [1782.0, 138.0], [1778.0, 139.0], [1766.0, 148.0], [1762.0, 24.0], [1730.0, 120.75], [1758.0, 88.33333333333333], [1754.0, 119.0], [1774.0, 139.0], [1854.0, 5052.0], [1826.0, 134.93749999999997], [1838.0, 6249.0], [1846.0, 3307.0], [1842.0, 6638.0], [1910.0, 8939.5], [1894.0, 5033.5], [1898.0, 5028.0], [1914.0, 8935.0], [1906.0, 5025.0], [1862.0, 5049.0], [1866.0, 5048.0], [1870.0, 5045.0], [1886.0, 5040.5], [1878.0, 5043.5], [1874.0, 5045.0], [1974.0, 4932.0], [1958.0, 4960.0], [1954.0, 8876.5], [1966.0, 12778.0], [1978.0, 15615.0], [1970.0, 12779.0], [1922.0, 12561.5], [1926.0, 5017.0], [1930.0, 8932.5], [1934.0, 5010.0], [1950.0, 12800.5], [1946.0, 8115.2], [1938.0, 5006.0], [2042.0, 12196.0], [2046.0, 10754.0], [2022.0, 10778.75], [2030.0, 9053.0], [2034.0, 10769.0], [2014.0, 8770.5], [1986.0, 1240.0], [1990.0, 14646.0], [1994.0, 7864.5], [2010.0, 9535.0], [2002.0, 3942.0], [2052.0, 2908.0], [2076.0, 14604.0], [2068.0, 11663.0], [2060.0, 11669.0], [2108.0, 1109.5], [2100.0, 1121.0], [2092.0, 1129.5], [2084.0, 11640.0], [2116.0, 10328.0], [2276.0, 301.0], [2244.0, 10616.0], [2252.0, 1122.0], [2260.0, 1110.0], [2284.0, 299.5], [2180.0, 139.0], [2188.0, 137.0], [2196.0, 137.5], [2204.0, 136.0], [2236.0, 8606.0], [2220.0, 135.0], [2212.0, 136.0], [2404.0, 254.0], [2316.0, 291.0], [2540.0, 241.0], [2508.0, 242.0], [2556.0, 241.0], [2460.0, 249.75], [2476.0, 241.71428571428575], [2468.0, 249.0], [2684.0, 1113.0], [2564.0, 238.0], [2572.0, 231.5], [2588.0, 239.0], [2804.0, 90.33333333333333], [2756.0, 125.0], [2780.0, 92.0], [2812.0, 78.66666666666667], [2796.0, 90.0], [2740.0, 131.33333333333334], [2732.0, 132.5], [2748.0, 126.0], [2692.0, 1104.5], [2700.0, 1092.5], [2940.0, 3523.625], [2916.0, 3194.0], [2884.0, 181.0], [2892.0, 179.5], [2900.0, 178.5], [2908.0, 3203.0], [2924.0, 3874.0], [2844.0, 1094.0], [2828.0, 193199.0], [2876.0, 2369.0], [2860.0, 2331.333333333333], [2852.0, 1082.0], [2988.0, 116.4], [2964.0, 856.1666666666667], [2053.0, 10737.0], [2109.0, 1107.0], [2069.0, 11664.0], [2061.0, 11669.0], [2101.0, 1121.0], [2093.0, 1130.0], [2085.0, 11639.0], [2117.0, 150.0], [2277.0, 301.0], [2269.0, 1100.0], [2181.0, 138.0], [2189.0, 137.42857142857142], [2237.0, 8607.0], [2221.0, 98.0], [2213.0, 135.66666666666666], [2309.0, 295.0], [2557.0, 236.5], [2549.0, 238.0], [2533.0, 241.0], [2461.0, 248.0], [2485.0, 237.0], [2469.0, 244.32432432432432], [2661.0, 138.0], [2669.0, 111.5], [2565.0, 236.33333333333334], [2573.0, 238.25], [2589.0, 239.0], [2773.0, 93.0], [2813.0, 79.0], [2805.0, 89.0], [2797.0, 90.0], [2693.0, 1104.0], [2701.0, 8438.0], [2845.0, 4891.0], [2885.0, 181.0], [2901.0, 179.0], [2909.0, 2349.0], [2933.0, 4563.0], [2829.0, 193198.0], [2869.0, 191.0], [2861.0, 4861.0], [2853.0, 4872.0], [1075.0, 16965.5], [1083.0, 13077.0], [1087.0, 22902.0], [1063.0, 13083.5], [1059.0, 16972.5], [1039.0, 15112.0], [1035.0, 16693.0], [1027.0, 24837.5], [1055.0, 22915.0], [1047.0, 22920.0], [1071.0, 22906.0], [1067.0, 13083.0], [1139.0, 22870.0], [1151.0, 22846.0], [1127.0, 22880.0], [1147.0, 13027.0], [1103.0, 22894.0], [1099.0, 13072.0], [1095.0, 12045.0], [1091.0, 22902.0], [1119.0, 18909.5], [1115.0, 17977.5], [1111.0, 13064.0], [1107.0, 13067.0], [1135.0, 13044.0], [1203.0, 12963.0], [1211.0, 12945.0], [1187.0, 12996.0], [1207.0, 12945.0], [1167.0, 13013.0], [1163.0, 10959.0], [1159.0, 22844.0], [1155.0, 13019.0], [1183.0, 10941.0], [1179.0, 12998.0], [1175.0, 13001.0], [1171.0, 15336.5], [1191.0, 11965.5], [1271.0, 21753.0], [1255.0, 12915.0], [1279.0, 21749.0], [1275.0, 21751.0], [1247.0, 12917.0], [1219.0, 22764.0], [1227.0, 12934.0], [1231.0, 17846.5], [1243.0, 12918.0], [1263.0, 19445.666666666668], [1251.0, 12916.0], [1287.0, 11909.0], [1339.0, 8779.0], [1315.0, 21640.0], [1335.0, 11560.0], [1283.0, 11916.0], [1307.0, 11821.0], [1303.0, 21648.0], [1299.0, 16489.0], [1323.0, 10713.0], [1319.0, 12492.0], [1407.0, 10160.5], [1383.0, 11538.0], [1375.0, 8761.0], [1347.0, 8775.0], [1351.0, 11550.0], [1355.0, 11548.0], [1371.0, 11541.0], [1363.0, 11545.5], [1391.0, 8752.0], [1387.0, 9685.333333333334], [1379.0, 11541.0], [1463.0, 12973.0], [1467.0, 7605.0], [1471.0, 10381.0], [1455.0, 147354.40000000002], [1459.0, 10387.5], [1415.0, 8677.0], [1423.0, 11449.0], [1427.0, 8515.0], [1487.0, 10361.0], [1527.0, 8762.0], [1515.0, 10592.666666666666], [1519.0, 11109.0], [1531.0, 8568.0], [1523.0, 6229.0], [1483.0, 11147.0], [1479.0, 8977.5], [1475.0, 10369.0], [1499.0, 11133.0], [1495.0, 10352.0], [1595.0, 9068.0], [1575.0, 9102.0], [1579.0, 9099.0], [1583.0, 8306.0], [1591.0, 8287.5], [1567.0, 8339.0], [1539.0, 8759.0], [1543.0, 5627.5], [1563.0, 5612.5], [1559.0, 5644.0], [1555.0, 9142.0], [1655.0, 152.0], [1663.0, 148.0], [1639.0, 162.25], [1659.0, 153.0], [1651.0, 154.0], [1615.0, 164.0], [1603.0, 166.0], [1627.0, 165.0], [1703.0, 138.0], [1691.0, 140.0], [1687.0, 141.0], [1707.0, 134.0], [1783.0, 138.0], [1763.0, 21.0], [1731.0, 119.66666666666667], [1759.0, 63.0], [1755.0, 119.05000000000001], [1827.0, 134.66666666666669], [1851.0, 5052.5], [1835.0, 6644.5], [1839.0, 6249.0], [1847.0, 3226.0], [1843.0, 7031.0], [1811.0, 136.0], [1911.0, 5021.0], [1907.0, 5026.0], [1891.0, 5032.5], [1895.0, 5033.0], [1899.0, 5029.5], [1903.0, 5027.5], [1887.0, 5037.0], [1863.0, 5050.0], [1867.0, 5048.0], [1871.0, 5046.0], [1883.0, 5040.5], [1875.0, 5046.0], [1975.0, 4925.0], [1979.0, 15613.0], [1983.0, 8826.0], [1955.0, 12790.0], [1959.0, 9349.0], [1963.0, 8869.5], [1971.0, 12774.0], [1951.0, 12793.0], [1923.0, 10239.333333333334], [1931.0, 12846.0], [1935.0, 5006.0], [1947.0, 4980.0], [1939.0, 15702.0], [2039.0, 10768.0], [2043.0, 10760.0], [2027.0, 10776.0], [2031.0, 10775.0], [2035.0, 10770.0], [1987.0, 3952.0], [1991.0, 8343.0], [1995.0, 11778.0], [2011.0, 11256.0], [2003.0, 12346.2], [2054.0, 10737.0], [2078.0, 11651.5], [2118.0, 146.0], [2062.0, 11667.0], [2110.0, 1106.0], [2102.0, 1120.0], [2094.0, 1129.0], [2086.0, 12364.0], [2142.0, 140.0], [2302.0, 295.0], [2278.0, 308.0], [2262.0, 1109.0], [2246.0, 1127.5], [2254.0, 1121.0], [2270.0, 11311.0], [2190.0, 136.5], [2198.0, 135.5], [2230.0, 67.33333333333333], [2222.0, 98.0], [2318.0, 291.0], [2310.0, 291.5], [2542.0, 239.25], [2526.0, 243.0], [2550.0, 276.0], [2534.0, 233.0], [2462.0, 244.0], [2470.0, 260.25], [2662.0, 138.0], [2670.0, 110.0], [2686.0, 1111.0], [2678.0, 1117.3333333333333], [2566.0, 236.0], [2574.0, 239.66666666666669], [2582.0, 239.0], [2590.0, 239.4], [2814.0, 77.0], [2806.0, 85.0], [2782.0, 93.5], [2798.0, 91.0], [2790.0, 91.66666666666667], [2694.0, 1104.0], [2702.0, 4017.0], [2918.0, 2768.0], [2934.0, 3180.5], [2902.0, 1270.5], [2886.0, 2364.5], [2894.0, 181.0], [2910.0, 3201.0], [2846.0, 1093.0], [2830.0, 2078.0], [2822.0, 65.4], [2870.0, 919.0], [2862.0, 1064.0], [2958.0, 3301.333333333333], [2982.0, 118.0], [2966.0, 120.0], [2055.0, 13601.0], [2071.0, 11662.5], [2079.0, 14601.0], [2111.0, 1107.0], [2063.0, 11666.0], [2103.0, 1119.0], [2095.0, 1128.0], [2087.0, 12361.0], [2143.0, 140.46153846153845], [2279.0, 300.0], [2255.0, 1121.0], [2247.0, 1127.0], [2263.0, 1107.0], [2271.0, 9071.0], [2239.0, 2075.0], [2183.0, 138.0], [2199.0, 136.0], [2223.0, 95.0], [2319.0, 294.3333333333333], [2311.0, 293.0], [2551.0, 242.0], [2503.0, 239.0], [2519.0, 242.0], [2535.0, 237.5], [2439.0, 256.0], [2487.0, 236.4], [2679.0, 1114.0], [2663.0, 137.25], [2687.0, 1111.0], [2671.0, 111.0], [2567.0, 236.0], [2583.0, 239.0], [2599.0, 238.75], [2767.0, 93.5], [2759.0, 101.66666666666667], [2775.0, 92.5], [2783.0, 92.5], [2807.0, 79.0], [2791.0, 92.5], [2735.0, 131.0], [2695.0, 1102.0], [2839.0, 136367.25], [2887.0, 180.0], [2895.0, 725.0], [2903.0, 178.0], [2831.0, 6498.0], [2823.0, 63.0], [2871.0, 190.0], [2863.0, 5468.0], [2951.0, 4331.333333333333], [2983.0, 117.0], [2975.0, 118.0], [1.0, 100179.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[2918.9195652173853, 8524.274764492837]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 3000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 2864.4, "minX": 1.68290244E12, "maxY": 143932.26666666666, "series": [{"data": [[1.68290244E12, 3778.2833333333333], [1.68290262E12, 127306.95], [1.68290256E12, 132740.53333333333], [1.68290274E12, 96995.6], [1.68290268E12, 143932.26666666666], [1.68290286E12, 5151.7], [1.6829028E12, 9583.633333333333], [1.6829025E12, 133604.96666666667]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.68290244E12, 2864.4], [1.68290262E12, 88754.4], [1.68290256E12, 94340.4], [1.68290274E12, 67914.0], [1.68290268E12, 101354.4], [1.68290286E12, 3595.2], [1.6829028E12, 7484.4], [1.6829025E12, 96348.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68290286E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 3367.8328445747816, "minX": 1.68290244E12, "maxY": 98246.98130841118, "series": [{"data": [[1.68290244E12, 3367.8328445747816], [1.68290262E12, 8638.423796033954], [1.68290256E12, 11835.097934946389], [1.68290274E12, 4937.963300492584], [1.68290268E12, 5550.079821147631], [1.68290286E12, 98246.98130841118], [1.6829028E12, 26813.9349046016], [1.6829025E12, 6217.063469921542]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68290286E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 3367.7243401759542, "minX": 1.68290244E12, "maxY": 98246.96728971964, "series": [{"data": [[1.68290244E12, 3367.7243401759542], [1.68290262E12, 8439.43484419267], [1.68290256E12, 11464.763272179345], [1.68290274E12, 4313.624876847304], [1.68290268E12, 5480.507079572761], [1.68290286E12, 98246.96728971964], [1.6829028E12, 26813.92817059484], [1.6829025E12, 6217.05370531822]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68290286E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 6.778037383177567, "minX": 1.68290244E12, "maxY": 5859.714825306891, "series": [{"data": [[1.68290244E12, 25.909090909090928], [1.68290262E12, 5859.714825306891], [1.68290256E12, 3347.3332447044413], [1.68290274E12, 245.33288177339946], [1.68290268E12, 1613.5475697607064], [1.68290286E12, 6.778037383177567], [1.6829028E12, 859.2906846240172], [1.6829025E12, 231.24463818657384]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68290286E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 12.0, "minX": 1.68290244E12, "maxY": 193201.0, "series": [{"data": [[1.68290244E12, 5586.0], [1.68290262E12, 139264.0], [1.68290256E12, 100214.0], [1.68290274E12, 193201.0], [1.68290268E12, 133545.0], [1.68290286E12, 100301.0], [1.6829028E12, 169351.0], [1.6829025E12, 61158.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.68290244E12, 5571.0], [1.68290262E12, 15227.0], [1.68290256E12, 19708.00000000006], [1.68290274E12, 12917.0], [1.68290268E12, 12007.900000000003], [1.68290286E12, 100260.0], [1.6829028E12, 42220.8], [1.6829025E12, 14337.599999999999]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.68290244E12, 5583.0], [1.68290262E12, 130718.0], [1.68290256E12, 100096.0], [1.68290274E12, 43489.0], [1.68290268E12, 100131.0], [1.68290286E12, 100299.0], [1.6829028E12, 68759.16], [1.6829025E12, 53977.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.68290244E12, 5575.0], [1.68290262E12, 60106.25], [1.68290256E12, 74368.99999999997], [1.68290274E12, 16253.7], [1.68290268E12, 26587.34999999999], [1.68290286E12, 100291.1], [1.6829028E12, 52979.19999999998], [1.6829025E12, 28816.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.68290244E12, 120.0], [1.68290262E12, 20.0], [1.68290256E12, 22.0], [1.68290274E12, 20.0], [1.68290268E12, 12.0], [1.68290286E12, 70818.0], [1.6829028E12, 10891.0], [1.6829025E12, 21.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.68290244E12, 5377.0], [1.68290262E12, 135.0], [1.68290256E12, 217.0], [1.68290274E12, 152.0], [1.68290268E12, 137.0], [1.68290286E12, 100091.0], [1.6829028E12, 21894.0], [1.6829025E12, 141.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68290286E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 86.0, "minX": 1.0, "maxY": 147355.0, "series": [{"data": [[2.0, 55637.5], [3.0, 16780.0], [4.0, 37911.0], [5.0, 64278.0], [6.0, 36587.5], [7.0, 14723.0], [8.0, 10270.0], [9.0, 15228.5], [10.0, 3463.0], [11.0, 14463.5], [12.0, 29247.5], [13.0, 2679.0], [14.0, 10175.0], [15.0, 6253.0], [19.0, 17227.0], [22.0, 28933.0], [24.0, 2382.0], [25.0, 1073.0], [26.0, 73220.0], [27.0, 10984.5], [28.0, 16928.5], [30.0, 11251.0], [31.0, 1096.0], [33.0, 32334.0], [35.0, 118.0], [34.0, 4940.0], [41.0, 101.0], [40.0, 21694.0], [43.0, 137.0], [42.0, 10770.0], [44.0, 10608.5], [47.0, 11924.0], [50.0, 4132.0], [63.0, 27608.0], [65.0, 13843.0], [66.0, 10356.0], [70.0, 137.0], [73.0, 2074.0], [75.0, 92.0], [72.0, 131.0], [76.0, 65149.0], [79.0, 10898.5], [85.0, 13343.0], [95.0, 97.0], [96.0, 11956.5], [98.0, 100096.0], [102.0, 122.0], [101.0, 100080.0], [107.0, 12568.0], [109.0, 105.0], [110.0, 100047.0], [117.0, 128.0], [116.0, 137.0], [131.0, 132.0], [135.0, 18832.5], [130.0, 11528.0], [137.0, 5045.0], [147.0, 7454.0], [145.0, 42145.0], [152.0, 117.0], [158.0, 6852.0], [154.0, 7180.0], [156.0, 13084.0], [160.0, 114.0], [167.0, 115.0], [161.0, 21786.0], [170.0, 137.5], [179.0, 119.0], [181.0, 123.0], [176.0, 130.0], [182.0, 9467.0], [178.0, 124.0], [188.0, 121.0], [189.0, 10009.0], [184.0, 127.0], [190.0, 133.0], [187.0, 131.0], [186.0, 135.0], [197.0, 128.0], [192.0, 126.0], [207.0, 152.0], [205.0, 115.0], [206.0, 4717.5], [201.0, 8171.0], [208.0, 5454.5], [209.0, 16250.0], [210.0, 135.0], [222.0, 1463.5], [220.0, 133.0], [219.0, 120.0], [228.0, 13956.5], [230.0, 129.0], [225.0, 100078.0], [231.0, 134.0], [233.0, 134.0], [251.0, 13178.0], [248.0, 151.5], [259.0, 9355.0], [271.0, 206.0], [280.0, 17204.5], [275.0, 116.0], [294.0, 2074.5], [316.0, 149.0], [310.0, 14071.5], [335.0, 108.0], [326.0, 125.0], [336.0, 157.0], [348.0, 108.0], [347.0, 105.0], [350.0, 103.0], [349.0, 11776.0], [344.0, 142.0], [367.0, 13668.0], [352.0, 9358.0], [363.0, 111.0], [357.0, 120.0], [365.0, 1846.0], [359.0, 237.0], [369.0, 9519.0], [372.0, 116.0], [373.0, 152.0], [375.0, 92.0], [368.0, 129.0], [383.0, 128.0], [371.0, 117.0], [370.0, 127.0], [376.0, 134.0], [379.0, 101.0], [382.0, 102.0], [394.0, 174.0], [387.0, 12423.0], [401.0, 213.0], [414.0, 208.0], [400.0, 185.5], [404.0, 116.0], [460.0, 10473.0], [464.0, 14773.0], [481.0, 14230.0], [496.0, 10364.0], [498.0, 14120.0], [541.0, 8553.0], [539.0, 86.0], [526.0, 151.0], [534.0, 833.0], [518.0, 140.0], [527.0, 109.0], [515.0, 128.0], [540.0, 136.0], [556.0, 116.0], [568.0, 11664.0], [563.0, 141.0], [582.0, 204.0], [625.0, 14700.0], [633.0, 219.0], [634.0, 156.5], [624.0, 137.0], [677.0, 11799.0], [681.0, 110.0], [734.0, 184.0], [753.0, 11122.0], [806.0, 158.0], [924.0, 211.0], [1.0, 91897.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[130.0, 147355.0], [154.0, 77274.0], [40.0, 119762.0], [383.0, 76049.0], [370.0, 119769.0], [190.0, 73976.0], [26.0, 79388.0], [14.0, 88811.0], [460.0, 88951.5], [31.0, 136367.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 924.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 100096.0, "series": [{"data": [[2.0, 55637.5], [3.0, 16780.0], [4.0, 37911.0], [5.0, 64278.0], [6.0, 36587.5], [7.0, 14723.0], [8.0, 10270.0], [9.0, 15228.5], [10.0, 3462.5], [11.0, 14463.5], [12.0, 29247.5], [13.0, 2679.0], [14.0, 10175.0], [15.0, 6253.0], [19.0, 17227.0], [22.0, 28933.0], [24.0, 2382.0], [25.0, 1072.0], [26.0, 73220.0], [27.0, 10984.5], [28.0, 16928.5], [30.0, 11251.0], [31.0, 1096.0], [33.0, 32334.0], [35.0, 118.0], [34.0, 4940.0], [41.0, 101.0], [40.0, 21694.0], [43.0, 137.0], [42.0, 10770.0], [44.0, 10608.5], [47.0, 11924.0], [50.0, 4132.0], [63.0, 27608.0], [65.0, 13843.0], [66.0, 10356.0], [70.0, 137.0], [73.0, 2074.0], [75.0, 92.0], [72.0, 131.0], [76.0, 65148.5], [79.0, 10898.5], [85.0, 13343.0], [95.0, 97.0], [96.0, 11956.5], [98.0, 100096.0], [102.0, 122.0], [101.0, 100080.0], [107.0, 12568.0], [109.0, 105.0], [110.0, 100047.0], [117.0, 128.0], [116.0, 137.0], [131.0, 131.0], [135.0, 18832.5], [130.0, 11528.0], [137.0, 5045.0], [147.0, 7454.0], [145.0, 42145.0], [152.0, 117.0], [158.0, 6852.0], [154.0, 7180.0], [156.0, 13084.0], [160.0, 114.0], [167.0, 115.0], [161.0, 21786.0], [170.0, 137.5], [179.0, 119.0], [181.0, 123.0], [176.0, 130.0], [182.0, 9467.0], [178.0, 124.0], [188.0, 121.0], [189.0, 10009.0], [184.0, 127.0], [190.0, 133.0], [187.0, 131.0], [186.0, 135.0], [197.0, 128.0], [192.0, 126.0], [207.0, 152.0], [205.0, 115.0], [206.0, 4717.5], [201.0, 8171.0], [208.0, 5454.5], [209.0, 16250.0], [210.0, 135.0], [222.0, 1463.5], [220.0, 133.0], [219.0, 120.0], [228.0, 13956.5], [230.0, 129.0], [225.0, 100078.0], [231.0, 134.0], [233.0, 134.0], [251.0, 13178.0], [248.0, 151.5], [259.0, 9355.0], [271.0, 206.0], [280.0, 17204.5], [275.0, 116.0], [294.0, 2074.5], [316.0, 149.0], [310.0, 14071.5], [335.0, 108.0], [326.0, 125.0], [336.0, 157.0], [348.0, 108.0], [347.0, 105.0], [350.0, 103.0], [349.0, 11776.0], [344.0, 142.0], [367.0, 13668.0], [352.0, 9358.0], [363.0, 111.0], [357.0, 120.0], [365.0, 1846.0], [359.0, 237.0], [369.0, 9519.0], [372.0, 116.0], [373.0, 152.0], [375.0, 92.0], [368.0, 129.0], [383.0, 128.0], [371.0, 117.0], [370.0, 127.0], [376.0, 134.0], [379.0, 101.0], [382.0, 102.0], [394.0, 174.0], [387.0, 12423.0], [401.0, 213.0], [414.0, 208.0], [400.0, 185.5], [404.0, 116.0], [460.0, 10473.0], [464.0, 14773.0], [481.0, 14230.0], [496.0, 10364.0], [498.0, 14120.0], [541.0, 8553.0], [539.0, 86.0], [526.0, 151.0], [534.0, 833.0], [518.0, 140.0], [527.0, 109.0], [515.0, 128.0], [540.0, 136.0], [556.0, 116.0], [568.0, 11664.0], [563.0, 141.0], [582.0, 204.0], [625.0, 14700.0], [633.0, 219.0], [634.0, 156.5], [624.0, 137.0], [677.0, 11799.0], [681.0, 110.0], [734.0, 184.0], [753.0, 11122.0], [806.0, 158.0], [924.0, 211.0], [1.0, 91897.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[130.0, 0.0], [154.0, 0.0], [40.0, 0.0], [383.0, 0.0], [370.0, 0.0], [190.0, 0.0], [26.0, 0.0], [14.0, 0.0], [460.0, 0.0], [31.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 924.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 33.733333333333334, "minX": 1.68290244E12, "maxY": 208.53333333333333, "series": [{"data": [[1.68290244E12, 33.733333333333334], [1.68290262E12, 162.53333333333333], [1.68290256E12, 180.93333333333334], [1.68290274E12, 138.0], [1.68290268E12, 208.53333333333333], [1.6829025E12, 196.26666666666668]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68290274E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.18333333333333332, "minX": 1.68290244E12, "maxY": 201.1, "series": [{"data": [[1.68290244E12, 5.683333333333334], [1.68290262E12, 176.1], [1.68290256E12, 187.18333333333334], [1.68290274E12, 134.75], [1.68290268E12, 201.1], [1.68290286E12, 7.133333333333334], [1.6829028E12, 14.85], [1.6829025E12, 191.16666666666666]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.68290262E12, 0.4], [1.68290256E12, 0.8666666666666667], [1.68290274E12, 0.5833333333333334], [1.68290268E12, 0.18333333333333332]], "isOverall": false, "label": "Non HTTP response code: java.net.SocketException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68290286E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.18333333333333332, "minX": 1.68290244E12, "maxY": 201.1, "series": [{"data": [[1.68290244E12, 5.683333333333334], [1.68290262E12, 176.1], [1.68290256E12, 187.18333333333334], [1.68290274E12, 134.75], [1.68290268E12, 201.1], [1.68290286E12, 7.133333333333334], [1.6829028E12, 14.85], [1.6829025E12, 191.16666666666666]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.68290262E12, 0.4], [1.68290256E12, 0.8666666666666667], [1.68290274E12, 0.5833333333333334], [1.68290268E12, 0.18333333333333332]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68290286E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.18333333333333332, "minX": 1.68290244E12, "maxY": 201.1, "series": [{"data": [[1.68290244E12, 5.683333333333334], [1.68290262E12, 176.1], [1.68290256E12, 187.18333333333334], [1.68290274E12, 134.75], [1.68290268E12, 201.1], [1.68290286E12, 7.133333333333334], [1.6829028E12, 14.85], [1.6829025E12, 191.16666666666666]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.68290262E12, 0.4], [1.68290256E12, 0.8666666666666667], [1.68290274E12, 0.5833333333333334], [1.68290268E12, 0.18333333333333332]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68290286E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

