/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 11.0, "minX": 0.0, "maxY": 190934.0, "series": [{"data": [[0.0, 11.0], [0.1, 23.0], [0.2, 30.0], [0.3, 33.0], [0.4, 37.0], [0.5, 40.0], [0.6, 41.0], [0.7, 44.0], [0.8, 46.0], [0.9, 48.0], [1.0, 50.0], [1.1, 51.0], [1.2, 53.0], [1.3, 54.0], [1.4, 55.0], [1.5, 57.0], [1.6, 58.0], [1.7, 59.0], [1.8, 60.0], [1.9, 61.0], [2.0, 63.0], [2.1, 64.0], [2.2, 65.0], [2.3, 66.0], [2.4, 67.0], [2.5, 68.0], [2.6, 69.0], [2.7, 70.0], [2.8, 72.0], [2.9, 73.0], [3.0, 74.0], [3.1, 74.0], [3.2, 76.0], [3.3, 78.0], [3.4, 79.0], [3.5, 80.0], [3.6, 81.0], [3.7, 82.0], [3.8, 83.0], [3.9, 84.0], [4.0, 84.0], [4.1, 85.0], [4.2, 85.0], [4.3, 85.0], [4.4, 86.0], [4.5, 87.0], [4.6, 88.0], [4.7, 89.0], [4.8, 89.0], [4.9, 90.0], [5.0, 90.0], [5.1, 91.0], [5.2, 91.0], [5.3, 92.0], [5.4, 92.0], [5.5, 93.0], [5.6, 94.0], [5.7, 94.0], [5.8, 96.0], [5.9, 96.0], [6.0, 97.0], [6.1, 98.0], [6.2, 99.0], [6.3, 99.0], [6.4, 100.0], [6.5, 100.0], [6.6, 101.0], [6.7, 101.0], [6.8, 101.0], [6.9, 102.0], [7.0, 102.0], [7.1, 103.0], [7.2, 103.0], [7.3, 104.0], [7.4, 105.0], [7.5, 105.0], [7.6, 106.0], [7.7, 106.0], [7.8, 108.0], [7.9, 108.0], [8.0, 108.0], [8.1, 109.0], [8.2, 109.0], [8.3, 110.0], [8.4, 110.0], [8.5, 110.0], [8.6, 111.0], [8.7, 111.0], [8.8, 111.0], [8.9, 112.0], [9.0, 112.0], [9.1, 113.0], [9.2, 113.0], [9.3, 113.0], [9.4, 114.0], [9.5, 114.0], [9.6, 115.0], [9.7, 115.0], [9.8, 116.0], [9.9, 116.0], [10.0, 117.0], [10.1, 118.0], [10.2, 118.0], [10.3, 119.0], [10.4, 119.0], [10.5, 120.0], [10.6, 120.0], [10.7, 121.0], [10.8, 121.0], [10.9, 121.0], [11.0, 121.0], [11.1, 121.0], [11.2, 122.0], [11.3, 122.0], [11.4, 122.0], [11.5, 122.0], [11.6, 122.0], [11.7, 122.0], [11.8, 123.0], [11.9, 123.0], [12.0, 123.0], [12.1, 123.0], [12.2, 124.0], [12.3, 124.0], [12.4, 125.0], [12.5, 125.0], [12.6, 125.0], [12.7, 126.0], [12.8, 126.0], [12.9, 126.0], [13.0, 127.0], [13.1, 127.0], [13.2, 128.0], [13.3, 128.0], [13.4, 128.0], [13.5, 129.0], [13.6, 129.0], [13.7, 129.0], [13.8, 129.0], [13.9, 129.0], [14.0, 129.0], [14.1, 130.0], [14.2, 130.0], [14.3, 130.0], [14.4, 130.0], [14.5, 130.0], [14.6, 131.0], [14.7, 131.0], [14.8, 131.0], [14.9, 131.0], [15.0, 131.0], [15.1, 132.0], [15.2, 132.0], [15.3, 132.0], [15.4, 132.0], [15.5, 133.0], [15.6, 133.0], [15.7, 133.0], [15.8, 133.0], [15.9, 133.0], [16.0, 133.0], [16.1, 134.0], [16.2, 134.0], [16.3, 134.0], [16.4, 134.0], [16.5, 134.0], [16.6, 135.0], [16.7, 135.0], [16.8, 135.0], [16.9, 135.0], [17.0, 135.0], [17.1, 136.0], [17.2, 136.0], [17.3, 136.0], [17.4, 136.0], [17.5, 136.0], [17.6, 137.0], [17.7, 137.0], [17.8, 138.0], [17.9, 138.0], [18.0, 138.0], [18.1, 138.0], [18.2, 138.0], [18.3, 138.0], [18.4, 139.0], [18.5, 139.0], [18.6, 139.0], [18.7, 139.0], [18.8, 139.0], [18.9, 140.0], [19.0, 140.0], [19.1, 140.0], [19.2, 140.0], [19.3, 141.0], [19.4, 141.0], [19.5, 141.0], [19.6, 141.0], [19.7, 142.0], [19.8, 142.0], [19.9, 142.0], [20.0, 143.0], [20.1, 143.0], [20.2, 143.0], [20.3, 144.0], [20.4, 144.0], [20.5, 144.0], [20.6, 144.0], [20.7, 145.0], [20.8, 145.0], [20.9, 145.0], [21.0, 145.0], [21.1, 146.0], [21.2, 146.0], [21.3, 146.0], [21.4, 146.0], [21.5, 146.0], [21.6, 146.0], [21.7, 147.0], [21.8, 147.0], [21.9, 147.0], [22.0, 147.0], [22.1, 147.0], [22.2, 147.0], [22.3, 148.0], [22.4, 148.0], [22.5, 148.0], [22.6, 148.0], [22.7, 148.0], [22.8, 148.0], [22.9, 149.0], [23.0, 149.0], [23.1, 149.0], [23.2, 149.0], [23.3, 149.0], [23.4, 149.0], [23.5, 150.0], [23.6, 150.0], [23.7, 150.0], [23.8, 150.0], [23.9, 150.0], [24.0, 150.0], [24.1, 150.0], [24.2, 150.0], [24.3, 151.0], [24.4, 151.0], [24.5, 151.0], [24.6, 151.0], [24.7, 151.0], [24.8, 151.0], [24.9, 151.0], [25.0, 151.0], [25.1, 152.0], [25.2, 152.0], [25.3, 152.0], [25.4, 152.0], [25.5, 152.0], [25.6, 152.0], [25.7, 152.0], [25.8, 152.0], [25.9, 152.0], [26.0, 152.0], [26.1, 153.0], [26.2, 153.0], [26.3, 153.0], [26.4, 153.0], [26.5, 153.0], [26.6, 153.0], [26.7, 153.0], [26.8, 153.0], [26.9, 153.0], [27.0, 154.0], [27.1, 154.0], [27.2, 154.0], [27.3, 154.0], [27.4, 154.0], [27.5, 154.0], [27.6, 154.0], [27.7, 155.0], [27.8, 155.0], [27.9, 155.0], [28.0, 155.0], [28.1, 155.0], [28.2, 155.0], [28.3, 155.0], [28.4, 155.0], [28.5, 156.0], [28.6, 156.0], [28.7, 156.0], [28.8, 156.0], [28.9, 156.0], [29.0, 156.0], [29.1, 156.0], [29.2, 156.0], [29.3, 156.0], [29.4, 157.0], [29.5, 157.0], [29.6, 157.0], [29.7, 157.0], [29.8, 157.0], [29.9, 157.0], [30.0, 157.0], [30.1, 157.0], [30.2, 157.0], [30.3, 157.0], [30.4, 158.0], [30.5, 158.0], [30.6, 158.0], [30.7, 158.0], [30.8, 158.0], [30.9, 158.0], [31.0, 158.0], [31.1, 158.0], [31.2, 158.0], [31.3, 159.0], [31.4, 159.0], [31.5, 159.0], [31.6, 159.0], [31.7, 159.0], [31.8, 159.0], [31.9, 159.0], [32.0, 159.0], [32.1, 159.0], [32.2, 159.0], [32.3, 159.0], [32.4, 160.0], [32.5, 160.0], [32.6, 160.0], [32.7, 160.0], [32.8, 160.0], [32.9, 160.0], [33.0, 160.0], [33.1, 161.0], [33.2, 161.0], [33.3, 161.0], [33.4, 161.0], [33.5, 161.0], [33.6, 161.0], [33.7, 162.0], [33.8, 162.0], [33.9, 162.0], [34.0, 162.0], [34.1, 162.0], [34.2, 162.0], [34.3, 162.0], [34.4, 162.0], [34.5, 162.0], [34.6, 162.0], [34.7, 163.0], [34.8, 163.0], [34.9, 163.0], [35.0, 163.0], [35.1, 163.0], [35.2, 163.0], [35.3, 163.0], [35.4, 163.0], [35.5, 163.0], [35.6, 164.0], [35.7, 164.0], [35.8, 164.0], [35.9, 164.0], [36.0, 164.0], [36.1, 164.0], [36.2, 164.0], [36.3, 164.0], [36.4, 164.0], [36.5, 165.0], [36.6, 165.0], [36.7, 165.0], [36.8, 165.0], [36.9, 165.0], [37.0, 165.0], [37.1, 165.0], [37.2, 165.0], [37.3, 165.0], [37.4, 166.0], [37.5, 166.0], [37.6, 166.0], [37.7, 166.0], [37.8, 166.0], [37.9, 166.0], [38.0, 166.0], [38.1, 166.0], [38.2, 166.0], [38.3, 166.0], [38.4, 167.0], [38.5, 167.0], [38.6, 167.0], [38.7, 167.0], [38.8, 167.0], [38.9, 167.0], [39.0, 167.0], [39.1, 168.0], [39.2, 168.0], [39.3, 168.0], [39.4, 168.0], [39.5, 168.0], [39.6, 169.0], [39.7, 169.0], [39.8, 169.0], [39.9, 169.0], [40.0, 169.0], [40.1, 169.0], [40.2, 169.0], [40.3, 169.0], [40.4, 169.0], [40.5, 169.0], [40.6, 170.0], [40.7, 170.0], [40.8, 170.0], [40.9, 170.0], [41.0, 170.0], [41.1, 170.0], [41.2, 170.0], [41.3, 170.0], [41.4, 170.0], [41.5, 170.0], [41.6, 170.0], [41.7, 170.0], [41.8, 170.0], [41.9, 170.0], [42.0, 171.0], [42.1, 171.0], [42.2, 171.0], [42.3, 171.0], [42.4, 171.0], [42.5, 171.0], [42.6, 171.0], [42.7, 171.0], [42.8, 171.0], [42.9, 171.0], [43.0, 172.0], [43.1, 172.0], [43.2, 172.0], [43.3, 172.0], [43.4, 172.0], [43.5, 172.0], [43.6, 172.0], [43.7, 172.0], [43.8, 172.0], [43.9, 172.0], [44.0, 173.0], [44.1, 173.0], [44.2, 173.0], [44.3, 173.0], [44.4, 173.0], [44.5, 173.0], [44.6, 173.0], [44.7, 174.0], [44.8, 174.0], [44.9, 174.0], [45.0, 174.0], [45.1, 174.0], [45.2, 174.0], [45.3, 175.0], [45.4, 175.0], [45.5, 175.0], [45.6, 175.0], [45.7, 175.0], [45.8, 176.0], [45.9, 176.0], [46.0, 176.0], [46.1, 176.0], [46.2, 176.0], [46.3, 177.0], [46.4, 177.0], [46.5, 177.0], [46.6, 177.0], [46.7, 178.0], [46.8, 178.0], [46.9, 178.0], [47.0, 178.0], [47.1, 178.0], [47.2, 178.0], [47.3, 178.0], [47.4, 179.0], [47.5, 179.0], [47.6, 179.0], [47.7, 179.0], [47.8, 179.0], [47.9, 179.0], [48.0, 179.0], [48.1, 179.0], [48.2, 180.0], [48.3, 180.0], [48.4, 180.0], [48.5, 180.0], [48.6, 180.0], [48.7, 180.0], [48.8, 181.0], [48.9, 181.0], [49.0, 181.0], [49.1, 181.0], [49.2, 181.0], [49.3, 181.0], [49.4, 182.0], [49.5, 182.0], [49.6, 182.0], [49.7, 182.0], [49.8, 182.0], [49.9, 182.0], [50.0, 183.0], [50.1, 183.0], [50.2, 183.0], [50.3, 183.0], [50.4, 183.0], [50.5, 183.0], [50.6, 184.0], [50.7, 184.0], [50.8, 184.0], [50.9, 184.0], [51.0, 184.0], [51.1, 184.0], [51.2, 185.0], [51.3, 185.0], [51.4, 185.0], [51.5, 185.0], [51.6, 186.0], [51.7, 186.0], [51.8, 186.0], [51.9, 186.0], [52.0, 187.0], [52.1, 187.0], [52.2, 187.0], [52.3, 187.0], [52.4, 187.0], [52.5, 187.0], [52.6, 188.0], [52.7, 188.0], [52.8, 188.0], [52.9, 188.0], [53.0, 189.0], [53.1, 189.0], [53.2, 189.0], [53.3, 190.0], [53.4, 190.0], [53.5, 190.0], [53.6, 191.0], [53.7, 191.0], [53.8, 191.0], [53.9, 191.0], [54.0, 192.0], [54.1, 192.0], [54.2, 193.0], [54.3, 193.0], [54.4, 193.0], [54.5, 193.0], [54.6, 193.0], [54.7, 193.0], [54.8, 194.0], [54.9, 194.0], [55.0, 194.0], [55.1, 194.0], [55.2, 195.0], [55.3, 195.0], [55.4, 195.0], [55.5, 195.0], [55.6, 195.0], [55.7, 196.0], [55.8, 196.0], [55.9, 196.0], [56.0, 196.0], [56.1, 196.0], [56.2, 197.0], [56.3, 197.0], [56.4, 198.0], [56.5, 198.0], [56.6, 199.0], [56.7, 199.0], [56.8, 199.0], [56.9, 200.0], [57.0, 201.0], [57.1, 202.0], [57.2, 204.0], [57.3, 205.0], [57.4, 207.0], [57.5, 208.0], [57.6, 208.0], [57.7, 209.0], [57.8, 209.0], [57.9, 210.0], [58.0, 211.0], [58.1, 212.0], [58.2, 213.0], [58.3, 214.0], [58.4, 215.0], [58.5, 216.0], [58.6, 216.0], [58.7, 217.0], [58.8, 218.0], [58.9, 221.0], [59.0, 227.0], [59.1, 228.0], [59.2, 229.0], [59.3, 230.0], [59.4, 231.0], [59.5, 231.0], [59.6, 234.0], [59.7, 237.0], [59.8, 238.0], [59.9, 244.0], [60.0, 249.0], [60.1, 251.0], [60.2, 252.0], [60.3, 254.0], [60.4, 257.0], [60.5, 258.0], [60.6, 259.0], [60.7, 259.0], [60.8, 260.0], [60.9, 260.0], [61.0, 260.0], [61.1, 261.0], [61.2, 262.0], [61.3, 263.0], [61.4, 265.0], [61.5, 267.0], [61.6, 268.0], [61.7, 269.0], [61.8, 269.0], [61.9, 270.0], [62.0, 271.0], [62.1, 272.0], [62.2, 277.0], [62.3, 278.0], [62.4, 279.0], [62.5, 280.0], [62.6, 280.0], [62.7, 281.0], [62.8, 282.0], [62.9, 283.0], [63.0, 284.0], [63.1, 285.0], [63.2, 286.0], [63.3, 287.0], [63.4, 287.0], [63.5, 288.0], [63.6, 289.0], [63.7, 291.0], [63.8, 293.0], [63.9, 294.0], [64.0, 296.0], [64.1, 297.0], [64.2, 298.0], [64.3, 298.0], [64.4, 300.0], [64.5, 303.0], [64.6, 306.0], [64.7, 310.0], [64.8, 314.0], [64.9, 316.0], [65.0, 317.0], [65.1, 318.0], [65.2, 319.0], [65.3, 322.0], [65.4, 323.0], [65.5, 323.0], [65.6, 326.0], [65.7, 328.0], [65.8, 329.0], [65.9, 333.0], [66.0, 336.0], [66.1, 339.0], [66.2, 341.0], [66.3, 342.0], [66.4, 343.0], [66.5, 345.0], [66.6, 354.0], [66.7, 359.0], [66.8, 361.0], [66.9, 362.0], [67.0, 363.0], [67.1, 366.0], [67.2, 372.0], [67.3, 376.0], [67.4, 385.0], [67.5, 386.0], [67.6, 396.0], [67.7, 403.0], [67.8, 404.0], [67.9, 405.0], [68.0, 406.0], [68.1, 412.0], [68.2, 416.0], [68.3, 423.0], [68.4, 433.0], [68.5, 438.0], [68.6, 445.0], [68.7, 458.0], [68.8, 466.0], [68.9, 507.0], [69.0, 570.0], [69.1, 595.0], [69.2, 618.0], [69.3, 651.0], [69.4, 751.0], [69.5, 819.0], [69.6, 977.0], [69.7, 1064.0], [69.8, 1103.0], [69.9, 1157.0], [70.0, 1193.0], [70.1, 1213.0], [70.2, 1218.0], [70.3, 1302.0], [70.4, 1501.0], [70.5, 1565.0], [70.6, 1620.0], [70.7, 1691.0], [70.8, 1725.0], [70.9, 1784.0], [71.0, 1788.0], [71.1, 1816.0], [71.2, 1883.0], [71.3, 1953.0], [71.4, 1987.0], [71.5, 2042.0], [71.6, 2137.0], [71.7, 2207.0], [71.8, 2632.0], [71.9, 2825.0], [72.0, 2940.0], [72.1, 3117.0], [72.2, 3225.0], [72.3, 3277.0], [72.4, 3431.0], [72.5, 3497.0], [72.6, 3716.0], [72.7, 3856.0], [72.8, 4135.0], [72.9, 4225.0], [73.0, 4424.0], [73.1, 4461.0], [73.2, 4544.0], [73.3, 4636.0], [73.4, 4761.0], [73.5, 4838.0], [73.6, 4913.0], [73.7, 4927.0], [73.8, 4954.0], [73.9, 5133.0], [74.0, 5191.0], [74.1, 5228.0], [74.2, 5233.0], [74.3, 5593.0], [74.4, 5840.0], [74.5, 5846.0], [74.6, 5910.0], [74.7, 5976.0], [74.8, 6076.0], [74.9, 6186.0], [75.0, 6226.0], [75.1, 6573.0], [75.2, 6580.0], [75.3, 6752.0], [75.4, 6930.0], [75.5, 6931.0], [75.6, 6932.0], [75.7, 7197.0], [75.8, 7525.0], [75.9, 7711.0], [76.0, 7795.0], [76.1, 7874.0], [76.2, 7970.0], [76.3, 8087.0], [76.4, 8239.0], [76.5, 8251.0], [76.6, 8259.0], [76.7, 8473.0], [76.8, 8505.0], [76.9, 8560.0], [77.0, 8598.0], [77.1, 8671.0], [77.2, 8694.0], [77.3, 8698.0], [77.4, 8699.0], [77.5, 8802.0], [77.6, 8823.0], [77.7, 8846.0], [77.8, 8923.0], [77.9, 8934.0], [78.0, 8963.0], [78.1, 8992.0], [78.2, 9025.0], [78.3, 9034.0], [78.4, 9060.0], [78.5, 9083.0], [78.6, 9090.0], [78.7, 9090.0], [78.8, 9111.0], [78.9, 9146.0], [79.0, 9220.0], [79.1, 9340.0], [79.2, 9639.0], [79.3, 9689.0], [79.4, 9728.0], [79.5, 9829.0], [79.6, 9867.0], [79.7, 9927.0], [79.8, 9934.0], [79.9, 9947.0], [80.0, 9975.0], [80.1, 9992.0], [80.2, 10018.0], [80.3, 10025.0], [80.4, 10044.0], [80.5, 10072.0], [80.6, 10089.0], [80.7, 10091.0], [80.8, 10118.0], [80.9, 10304.0], [81.0, 10722.0], [81.1, 10749.0], [81.2, 10786.0], [81.3, 10788.0], [81.4, 10861.0], [81.5, 10967.0], [81.6, 11048.0], [81.7, 11065.0], [81.8, 11084.0], [81.9, 11099.0], [82.0, 11171.0], [82.1, 11186.0], [82.2, 11188.0], [82.3, 11268.0], [82.4, 11285.0], [82.5, 11318.0], [82.6, 11324.0], [82.7, 11367.0], [82.8, 11448.0], [82.9, 11586.0], [83.0, 11636.0], [83.1, 11642.0], [83.2, 11644.0], [83.3, 11646.0], [83.4, 11668.0], [83.5, 11720.0], [83.6, 11762.0], [83.7, 11916.0], [83.8, 11981.0], [83.9, 12042.0], [84.0, 12108.0], [84.1, 12276.0], [84.2, 12390.0], [84.3, 12419.0], [84.4, 12453.0], [84.5, 12474.0], [84.6, 12476.0], [84.7, 12480.0], [84.8, 12487.0], [84.9, 12499.0], [85.0, 12513.0], [85.1, 12546.0], [85.2, 12552.0], [85.3, 12563.0], [85.4, 12585.0], [85.5, 12607.0], [85.6, 12612.0], [85.7, 12622.0], [85.8, 12629.0], [85.9, 12635.0], [86.0, 12636.0], [86.1, 12643.0], [86.2, 12678.0], [86.3, 12728.0], [86.4, 12782.0], [86.5, 12806.0], [86.6, 12830.0], [86.7, 12848.0], [86.8, 12857.0], [86.9, 12941.0], [87.0, 13035.0], [87.1, 13120.0], [87.2, 13204.0], [87.3, 13238.0], [87.4, 13246.0], [87.5, 13255.0], [87.6, 13264.0], [87.7, 13295.0], [87.8, 13301.0], [87.9, 13326.0], [88.0, 13342.0], [88.1, 13346.0], [88.2, 13420.0], [88.3, 13436.0], [88.4, 13441.0], [88.5, 13459.0], [88.6, 13504.0], [88.7, 13565.0], [88.8, 13643.0], [88.9, 13645.0], [89.0, 13715.0], [89.1, 13747.0], [89.2, 13844.0], [89.3, 13932.0], [89.4, 13935.0], [89.5, 13942.0], [89.6, 13992.0], [89.7, 14024.0], [89.8, 14053.0], [89.9, 14061.0], [90.0, 14080.0], [90.1, 14110.0], [90.2, 14176.0], [90.3, 14207.0], [90.4, 14212.0], [90.5, 14216.0], [90.6, 14317.0], [90.7, 14371.0], [90.8, 14447.0], [90.9, 14586.0], [91.0, 14887.0], [91.1, 15004.0], [91.2, 15194.0], [91.3, 15227.0], [91.4, 15258.0], [91.5, 15352.0], [91.6, 15464.0], [91.7, 15696.0], [91.8, 15783.0], [91.9, 16068.0], [92.0, 16158.0], [92.1, 16170.0], [92.2, 16226.0], [92.3, 16470.0], [92.4, 16674.0], [92.5, 16990.0], [92.6, 17217.0], [92.7, 17297.0], [92.8, 17972.0], [92.9, 18180.0], [93.0, 18600.0], [93.1, 19063.0], [93.2, 19398.0], [93.3, 19774.0], [93.4, 19867.0], [93.5, 20021.0], [93.6, 20691.0], [93.7, 21087.0], [93.8, 22301.0], [93.9, 23780.0], [94.0, 25431.0], [94.1, 26403.0], [94.2, 26492.0], [94.3, 26835.0], [94.4, 28871.0], [94.5, 28952.0], [94.6, 29434.0], [94.7, 29469.0], [94.8, 30143.0], [94.9, 31421.0], [95.0, 32872.0], [95.1, 32925.0], [95.2, 33195.0], [95.3, 34974.0], [95.4, 36193.0], [95.5, 37221.0], [95.6, 37645.0], [95.7, 39856.0], [95.8, 43693.0], [95.9, 45936.0], [96.0, 46669.0], [96.1, 50291.0], [96.2, 54079.0], [96.3, 54273.0], [96.4, 60670.0], [96.5, 63213.0], [96.6, 63304.0], [96.7, 63341.0], [96.8, 63356.0], [96.9, 63842.0], [97.0, 64328.0], [97.1, 64824.0], [97.2, 64878.0], [97.3, 67261.0], [97.4, 68403.0], [97.5, 73355.0], [97.6, 79810.0], [97.7, 86617.0], [97.8, 91649.0], [97.9, 100015.0], [98.0, 100032.0], [98.1, 100085.0], [98.2, 100126.0], [98.3, 100139.0], [98.4, 100173.0], [98.5, 100319.0], [98.6, 101074.0], [98.7, 101172.0], [98.8, 101714.0], [98.9, 110705.0], [99.0, 127589.0], [99.1, 127715.0], [99.2, 127814.0], [99.3, 129588.0], [99.4, 130279.0], [99.5, 130636.0], [99.6, 130864.0], [99.7, 133258.0], [99.8, 139620.0], [99.9, 190903.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 35455.0, "series": [{"data": [[0.0, 4424.0], [132900.0, 12.0], [66700.0, 3.0], [68300.0, 34.0], [69900.0, 2.0], [73100.0, 1.0], [71500.0, 1.0], [74700.0, 6.0], [81100.0, 4.0], [82700.0, 5.0], [85900.0, 3.0], [90700.0, 2.0], [93900.0, 2.0], [97100.0, 2.0], [100300.0, 32.0], [98700.0, 1.0], [111500.0, 3.0], [121100.0, 2.0], [119500.0, 17.0], [127500.0, 17.0], [130700.0, 19.0], [140200.0, 1.0], [100.0, 35455.0], [131500.0, 1.0], [32900.0, 102.0], [33700.0, 1.0], [35300.0, 7.0], [36100.0, 2.0], [36900.0, 6.0], [37700.0, 20.0], [40900.0, 1.0], [42500.0, 7.0], [46500.0, 10.0], [47300.0, 4.0], [48100.0, 1.0], [50500.0, 11.0], [200.0, 5323.0], [51300.0, 2.0], [52100.0, 1.0], [52900.0, 3.0], [53700.0, 2.0], [56900.0, 1.0], [57700.0, 1.0], [60100.0, 1.0], [63300.0, 159.0], [64900.0, 1.0], [67400.0, 14.0], [69000.0, 2.0], [65800.0, 5.0], [70600.0, 2.0], [72200.0, 1.0], [300.0, 2276.0], [75400.0, 6.0], [73800.0, 2.0], [80200.0, 2.0], [81800.0, 2.0], [88200.0, 1.0], [86600.0, 12.0], [94600.0, 1.0], [101000.0, 49.0], [99400.0, 2.0], [400.0, 887.0], [115400.0, 2.0], [500.0, 174.0], [129800.0, 13.0], [600.0, 148.0], [700.0, 69.0], [800.0, 53.0], [900.0, 71.0], [1000.0, 117.0], [1100.0, 165.0], [1200.0, 177.0], [1300.0, 53.0], [1400.0, 27.0], [1500.0, 116.0], [1600.0, 111.0], [1700.0, 246.0], [1800.0, 105.0], [1900.0, 142.0], [2000.0, 113.0], [2100.0, 57.0], [133300.0, 6.0], [2200.0, 59.0], [2400.0, 3.0], [2500.0, 28.0], [2600.0, 15.0], [2700.0, 41.0], [2800.0, 82.0], [2900.0, 41.0], [3000.0, 22.0], [190900.0, 82.0], [3100.0, 79.0], [3300.0, 14.0], [3200.0, 119.0], [3400.0, 85.0], [3500.0, 35.0], [3700.0, 36.0], [3600.0, 20.0], [3800.0, 78.0], [3900.0, 12.0], [4000.0, 22.0], [4300.0, 8.0], [4100.0, 38.0], [66500.0, 2.0], [4200.0, 79.0], [4600.0, 101.0], [4500.0, 100.0], [4400.0, 94.0], [71300.0, 12.0], [4700.0, 32.0], [4800.0, 84.0], [74500.0, 3.0], [76100.0, 1.0], [4900.0, 224.0], [5100.0, 84.0], [5000.0, 13.0], [80900.0, 1.0], [5200.0, 136.0], [5300.0, 1.0], [5400.0, 55.0], [5500.0, 11.0], [5600.0, 21.0], [87300.0, 2.0], [88900.0, 3.0], [5800.0, 165.0], [5700.0, 18.0], [90500.0, 1.0], [5900.0, 106.0], [6000.0, 65.0], [6100.0, 62.0], [96900.0, 1.0], [6200.0, 90.0], [100100.0, 241.0], [101700.0, 3.0], [6400.0, 22.0], [6500.0, 104.0], [6600.0, 17.0], [104900.0, 5.0], [6900.0, 194.0], [6700.0, 41.0], [6800.0, 24.0], [109700.0, 10.0], [7100.0, 30.0], [7000.0, 26.0], [7200.0, 17.0], [7400.0, 36.0], [116100.0, 1.0], [7600.0, 25.0], [7500.0, 52.0], [7700.0, 88.0], [7800.0, 88.0], [7900.0, 56.0], [8000.0, 72.0], [8100.0, 27.0], [128900.0, 3.0], [130500.0, 35.0], [8200.0, 180.0], [8400.0, 104.0], [8600.0, 284.0], [134200.0, 12.0], [9000.0, 446.0], [9200.0, 78.0], [8800.0, 191.0], [9600.0, 86.0], [9400.0, 17.0], [10000.0, 419.0], [9800.0, 135.0], [10200.0, 57.0], [10600.0, 16.0], [10400.0, 20.0], [10800.0, 53.0], [11000.0, 245.0], [11200.0, 112.0], [11600.0, 368.0], [11400.0, 66.0], [11800.0, 28.0], [12000.0, 113.0], [12200.0, 18.0], [12400.0, 477.0], [12600.0, 592.0], [12800.0, 274.0], [13200.0, 417.0], [13000.0, 100.0], [13400.0, 296.0], [13800.0, 34.0], [13600.0, 181.0], [14000.0, 324.0], [14200.0, 216.0], [14600.0, 19.0], [14800.0, 20.0], [14400.0, 55.0], [15200.0, 154.0], [15000.0, 29.0], [15400.0, 81.0], [15600.0, 22.0], [15800.0, 6.0], [16200.0, 53.0], [16000.0, 14.0], [17200.0, 81.0], [16400.0, 35.0], [16800.0, 19.0], [18400.0, 6.0], [17600.0, 3.0], [18000.0, 22.0], [18800.0, 4.0], [19200.0, 39.0], [19600.0, 6.0], [20000.0, 24.0], [20400.0, 4.0], [20800.0, 31.0], [21200.0, 11.0], [22400.0, 1.0], [21600.0, 14.0], [22000.0, 2.0], [23200.0, 2.0], [23600.0, 3.0], [24000.0, 3.0], [24400.0, 2.0], [24800.0, 1.0], [25600.0, 12.0], [26400.0, 114.0], [26000.0, 1.0], [26800.0, 59.0], [28800.0, 53.0], [29600.0, 5.0], [29200.0, 4.0], [30400.0, 5.0], [31600.0, 16.0], [32000.0, 1.0], [32800.0, 40.0], [131900.0, 16.0], [33600.0, 1.0], [34400.0, 2.0], [36000.0, 12.0], [36800.0, 9.0], [35200.0, 6.0], [37600.0, 24.0], [38400.0, 2.0], [40000.0, 2.0], [39200.0, 1.0], [42400.0, 2.0], [44000.0, 3.0], [44800.0, 1.0], [47200.0, 13.0], [53600.0, 2.0], [56800.0, 1.0], [56000.0, 11.0], [58400.0, 3.0], [57600.0, 2.0], [60000.0, 2.0], [63200.0, 64.0], [62400.0, 41.0], [61600.0, 2.0], [64800.0, 84.0], [67200.0, 6.0], [65600.0, 1.0], [68800.0, 6.0], [72000.0, 1.0], [76800.0, 2.0], [83200.0, 2.0], [84800.0, 1.0], [89600.0, 4.0], [92800.0, 1.0], [91200.0, 4.0], [105600.0, 1.0], [104000.0, 2.0], [129600.0, 6.0], [134400.0, 8.0], [137600.0, 1.0], [163200.0, 7.0], [132100.0, 1.0], [67100.0, 7.0], [73500.0, 5.0], [70300.0, 1.0], [78300.0, 4.0], [86300.0, 2.0], [89500.0, 4.0], [92700.0, 1.0], [91100.0, 2.0], [95900.0, 1.0], [99100.0, 2.0], [129500.0, 70.0], [133000.0, 9.0], [33900.0, 19.0], [34700.0, 3.0], [33100.0, 5.0], [133900.0, 2.0], [35500.0, 1.0], [37100.0, 5.0], [37900.0, 4.0], [41100.0, 2.0], [41900.0, 2.0], [44300.0, 2.0], [43500.0, 2.0], [45900.0, 23.0], [45100.0, 15.0], [46700.0, 6.0], [48300.0, 2.0], [49100.0, 1.0], [47500.0, 2.0], [50700.0, 2.0], [52300.0, 3.0], [51500.0, 2.0], [54700.0, 2.0], [61900.0, 2.0], [63500.0, 1.0], [64300.0, 56.0], [66200.0, 2.0], [69400.0, 1.0], [67800.0, 4.0], [72600.0, 1.0], [74200.0, 1.0], [77400.0, 2.0], [83800.0, 2.0], [85400.0, 1.0], [91800.0, 1.0], [98200.0, 1.0], [103000.0, 2.0], [104600.0, 13.0], [109400.0, 2.0], [111000.0, 1.0], [130200.0, 37.0], [131600.0, 1.0], [138000.0, 2.0], [142100.0, 1.0], [73300.0, 8.0], [71700.0, 1.0], [82900.0, 3.0], [97300.0, 2.0], [95700.0, 2.0], [106900.0, 3.0], [113300.0, 1.0], [127700.0, 31.0], [129300.0, 1.0], [16500.0, 36.0], [17300.0, 3.0], [16900.0, 8.0], [17700.0, 23.0], [18100.0, 55.0], [19300.0, 14.0], [18500.0, 42.0], [18900.0, 2.0], [20100.0, 21.0], [19700.0, 60.0], [20900.0, 7.0], [20500.0, 4.0], [21300.0, 1.0], [22500.0, 2.0], [23300.0, 6.0], [22900.0, 1.0], [24500.0, 2.0], [23700.0, 26.0], [25300.0, 13.0], [24900.0, 2.0], [25700.0, 2.0], [26500.0, 1.0], [26100.0, 8.0], [27300.0, 4.0], [28500.0, 3.0], [28100.0, 1.0], [28900.0, 68.0], [29300.0, 2.0], [30100.0, 21.0], [31300.0, 11.0], [31700.0, 2.0], [32100.0, 9.0], [33000.0, 2.0], [34600.0, 3.0], [33800.0, 3.0], [131100.0, 2.0], [134300.0, 4.0], [137500.0, 10.0], [35400.0, 2.0], [37000.0, 10.0], [37800.0, 5.0], [39400.0, 2.0], [45000.0, 1.0], [43400.0, 1.0], [44200.0, 1.0], [46600.0, 17.0], [47400.0, 3.0], [49000.0, 1.0], [52200.0, 2.0], [53800.0, 7.0], [54600.0, 2.0], [57800.0, 1.0], [58600.0, 3.0], [60200.0, 2.0], [61000.0, 1.0], [62600.0, 2.0], [65000.0, 17.0], [64200.0, 5.0], [66000.0, 1.0], [75600.0, 2.0], [74000.0, 8.0], [78800.0, 3.0], [82000.0, 3.0], [90000.0, 3.0], [86800.0, 1.0], [91600.0, 7.0], [96400.0, 1.0], [104400.0, 1.0], [134500.0, 1.0], [163300.0, 27.0], [67500.0, 2.0], [65900.0, 5.0], [72300.0, 1.0], [70700.0, 3.0], [77100.0, 1.0], [85100.0, 1.0], [88300.0, 2.0], [86700.0, 1.0], [89900.0, 5.0], [91500.0, 3.0], [96300.0, 2.0], [94700.0, 1.0], [101100.0, 103.0], [104300.0, 2.0], [112300.0, 1.0], [110700.0, 18.0], [128300.0, 1.0], [189800.0, 3.0], [33300.0, 1.0], [34100.0, 19.0], [34900.0, 2.0], [36500.0, 19.0], [139500.0, 2.0], [38100.0, 3.0], [40500.0, 3.0], [42100.0, 18.0], [42900.0, 2.0], [41300.0, 2.0], [44500.0, 2.0], [46100.0, 24.0], [48500.0, 2.0], [49300.0, 2.0], [50900.0, 1.0], [51700.0, 2.0], [52500.0, 2.0], [53300.0, 3.0], [54100.0, 60.0], [55700.0, 2.0], [59700.0, 2.0], [63700.0, 15.0], [64500.0, 2.0], [65300.0, 3.0], [66600.0, 1.0], [68200.0, 5.0], [71400.0, 2.0], [73000.0, 1.0], [69800.0, 1.0], [77800.0, 1.0], [81000.0, 1.0], [84200.0, 2.0], [82600.0, 3.0], [85800.0, 1.0], [90600.0, 4.0], [95400.0, 1.0], [100200.0, 23.0], [106600.0, 1.0], [119400.0, 2.0], [130600.0, 75.0], [127400.0, 4.0], [65700.0, 2.0], [70500.0, 2.0], [73700.0, 2.0], [76900.0, 2.0], [80100.0, 4.0], [81700.0, 2.0], [84900.0, 2.0], [86500.0, 3.0], [92900.0, 4.0], [94500.0, 1.0], [96100.0, 2.0], [97700.0, 1.0], [113700.0, 1.0], [129700.0, 1.0], [8500.0, 172.0], [8700.0, 52.0], [139000.0, 1.0], [8900.0, 253.0], [9100.0, 160.0], [9300.0, 30.0], [9700.0, 121.0], [9500.0, 14.0], [9900.0, 319.0], [10100.0, 62.0], [10700.0, 261.0], [10300.0, 19.0], [10500.0, 4.0], [10900.0, 93.0], [11100.0, 253.0], [11300.0, 235.0], [11700.0, 153.0], [11500.0, 36.0], [11900.0, 104.0], [12100.0, 63.0], [12500.0, 361.0], [12700.0, 148.0], [12300.0, 83.0], [13300.0, 273.0], [13100.0, 64.0], [12900.0, 58.0], [13500.0, 91.0], [13700.0, 140.0], [13900.0, 276.0], [14100.0, 138.0], [14300.0, 124.0], [14700.0, 22.0], [14500.0, 54.0], [15100.0, 87.0], [15300.0, 33.0], [14900.0, 67.0], [15700.0, 114.0], [15500.0, 20.0], [16100.0, 183.0], [16300.0, 13.0], [15900.0, 10.0], [17000.0, 30.0], [16600.0, 33.0], [17400.0, 16.0], [17800.0, 4.0], [18200.0, 2.0], [19000.0, 40.0], [18600.0, 47.0], [19400.0, 6.0], [20200.0, 10.0], [19800.0, 67.0], [20600.0, 19.0], [21000.0, 17.0], [21400.0, 1.0], [22200.0, 17.0], [22600.0, 3.0], [23800.0, 2.0], [24600.0, 1.0], [25400.0, 26.0], [25000.0, 2.0], [26600.0, 4.0], [25800.0, 19.0], [26200.0, 1.0], [27400.0, 2.0], [27000.0, 2.0], [28600.0, 2.0], [29400.0, 96.0], [29000.0, 10.0], [30600.0, 2.0], [29800.0, 2.0], [31400.0, 10.0], [31000.0, 15.0], [32600.0, 8.0], [34000.0, 3.0], [34800.0, 2.0], [36400.0, 9.0], [38800.0, 2.0], [38000.0, 1.0], [37200.0, 21.0], [39600.0, 1.0], [40400.0, 2.0], [42000.0, 7.0], [43600.0, 4.0], [45200.0, 16.0], [46800.0, 8.0], [46000.0, 2.0], [48400.0, 2.0], [51600.0, 1.0], [52400.0, 2.0], [54000.0, 18.0], [55600.0, 2.0], [61200.0, 1.0], [59600.0, 2.0], [65200.0, 3.0], [63600.0, 38.0], [66400.0, 2.0], [68000.0, 2.0], [69600.0, 2.0], [71200.0, 2.0], [72800.0, 1.0], [80800.0, 2.0], [82400.0, 1.0], [100000.0, 164.0], [101600.0, 24.0], [104800.0, 1.0], [109600.0, 2.0], [130400.0, 2.0], [127200.0, 5.0], [145600.0, 1.0], [140100.0, 2.0], [66300.0, 1.0], [67900.0, 1.0], [71100.0, 1.0], [72700.0, 2.0], [77500.0, 1.0], [80700.0, 2.0], [79100.0, 1.0], [87100.0, 2.0], [91900.0, 1.0], [95100.0, 2.0], [98300.0, 1.0], [96700.0, 2.0], [101500.0, 2.0], [130300.0, 2.0], [131400.0, 11.0], [34300.0, 10.0], [135500.0, 1.0], [35900.0, 18.0], [36700.0, 9.0], [35100.0, 3.0], [145100.0, 1.0], [37500.0, 15.0], [39100.0, 6.0], [46300.0, 2.0], [47100.0, 7.0], [45500.0, 2.0], [49500.0, 5.0], [50300.0, 10.0], [52700.0, 2.0], [54300.0, 12.0], [53500.0, 1.0], [59900.0, 4.0], [60700.0, 1.0], [62300.0, 16.0], [63100.0, 3.0], [64700.0, 7.0], [65500.0, 2.0], [63900.0, 26.0], [67000.0, 1.0], [68600.0, 3.0], [73400.0, 1.0], [71800.0, 1.0], [79800.0, 4.0], [89400.0, 2.0], [94200.0, 1.0], [92600.0, 1.0], [99000.0, 1.0], [103800.0, 1.0], [107000.0, 1.0], [127800.0, 66.0], [129400.0, 3.0], [131000.0, 1.0], [133200.0, 12.0], [139600.0, 25.0], [134100.0, 3.0], [69300.0, 2.0], [66100.0, 1.0], [67700.0, 1.0], [72500.0, 2.0], [70900.0, 1.0], [75700.0, 2.0], [74100.0, 2.0], [82100.0, 3.0], [85300.0, 2.0], [90100.0, 4.0], [86900.0, 1.0], [93300.0, 3.0], [91700.0, 1.0], [94900.0, 10.0], [99700.0, 5.0], [104500.0, 9.0], [109300.0, 1.0], [115700.0, 1.0], [130100.0, 2.0], [135000.0, 1.0], [16700.0, 36.0], [17100.0, 29.0], [17900.0, 12.0], [18300.0, 2.0], [17500.0, 9.0], [19100.0, 3.0], [18700.0, 7.0], [20300.0, 10.0], [19500.0, 17.0], [19900.0, 37.0], [20700.0, 14.0], [21500.0, 3.0], [21100.0, 7.0], [22300.0, 30.0], [21900.0, 1.0], [23100.0, 1.0], [22700.0, 4.0], [24300.0, 7.0], [23900.0, 11.0], [25500.0, 2.0], [25100.0, 2.0], [26300.0, 5.0], [25900.0, 13.0], [27500.0, 2.0], [26700.0, 2.0], [27900.0, 1.0], [28300.0, 4.0], [29500.0, 34.0], [29100.0, 1.0], [30700.0, 1.0], [30300.0, 2.0], [31500.0, 3.0], [31100.0, 26.0], [31900.0, 3.0], [32700.0, 9.0], [32300.0, 4.0], [132700.0, 4.0], [33400.0, 2.0], [35800.0, 16.0], [35000.0, 2.0], [37400.0, 20.0], [40600.0, 1.0], [39800.0, 26.0], [41400.0, 3.0], [43800.0, 2.0], [44600.0, 3.0], [46200.0, 18.0], [50200.0, 8.0], [54200.0, 1.0], [56600.0, 2.0], [59000.0, 2.0], [60600.0, 4.0], [59800.0, 6.0], [64600.0, 1.0], [63800.0, 41.0], [68400.0, 11.0], [66800.0, 2.0], [70000.0, 1.0], [71600.0, 1.0], [74800.0, 3.0], [78000.0, 2.0], [81200.0, 2.0], [84400.0, 2.0], [82800.0, 1.0], [89200.0, 1.0], [90800.0, 3.0], [106800.0, 2.0], [111600.0, 4.0], [121200.0, 3.0], [127600.0, 47.0], [130800.0, 10.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 190900.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 106.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 48365.0, "series": [{"data": [[0.0, 48365.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 1054.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 20675.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 106.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 160.95597484276723, "minX": 1.68301692E12, "maxY": 3000.0, "series": [{"data": [[1.68301698E12, 3000.0], [1.68301728E12, 391.0206896551725], [1.68301734E12, 160.95597484276723], [1.68301716E12, 3000.0], [1.68301722E12, 2747.7687992846095], [1.68301704E12, 3000.0], [1.6830171E12, 3000.0], [1.68301692E12, 3000.0]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68301734E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 78.0, "minX": 2.0, "maxY": 100342.44444444444, "series": [{"data": [[2.0, 100230.0], [3.0, 100228.0], [7.0, 100226.0], [8.0, 100226.0], [12.0, 100225.0], [13.0, 100225.0], [14.0, 100194.0], [15.0, 100192.0], [19.0, 100184.5], [23.0, 100184.0], [24.0, 100184.0], [25.0, 100185.0], [26.0, 100184.0], [27.0, 100183.0], [28.0, 100182.0], [29.0, 100183.0], [33.0, 100181.33333333333], [32.0, 100182.0], [35.0, 100166.0], [34.0, 100171.0], [40.0, 100164.5], [43.0, 100164.66666666667], [45.0, 100164.0], [44.0, 100164.5], [47.0, 100163.0], [46.0, 100163.66666666667], [49.0, 100142.0], [48.0, 100153.0], [50.0, 100142.0], [53.0, 100141.0], [54.0, 100141.0], [57.0, 100139.0], [56.0, 100139.5], [61.0, 100139.0], [62.0, 100139.0], [67.0, 100137.66666666667], [66.0, 100137.0], [65.0, 100138.0], [64.0, 100138.0], [69.0, 100137.0], [75.0, 100136.5], [73.0, 100136.5], [72.0, 100137.0], [79.0, 100131.0], [78.0, 100132.5], [76.0, 100135.66666666667], [82.0, 100131.0], [81.0, 100133.0], [80.0, 100132.0], [84.0, 100129.0], [91.0, 100126.5], [88.0, 100128.0], [94.0, 100126.0], [99.0, 100125.0], [98.0, 100126.8], [97.0, 100125.0], [102.0, 100125.33333333333], [100.0, 100125.5], [107.0, 100123.0], [106.0, 100124.0], [104.0, 100125.0], [111.0, 100122.0], [109.0, 100123.0], [108.0, 100123.0], [115.0, 100114.0], [113.0, 100116.0], [112.0, 100122.25], [118.0, 100112.0], [117.0, 100113.0], [116.0, 100114.0], [121.0, 100112.0], [127.0, 100102.0], [126.0, 100109.0], [125.0, 100111.16666666667], [133.0, 100089.5], [131.0, 100099.0], [128.0, 100100.0], [141.0, 100086.0], [139.0, 100087.0], [138.0, 100087.0], [137.0, 100089.0], [151.0, 100083.0], [150.0, 100084.0], [149.0, 100083.0], [146.0, 100084.0], [145.0, 100085.0], [159.0, 100077.0], [152.0, 100081.0], [163.0, 100073.0], [161.0, 100074.0], [160.0, 100076.8], [173.0, 100071.0], [172.0, 100071.0], [171.0, 100072.0], [170.0, 100072.4], [182.0, 100032.0], [178.0, 100032.0], [177.0, 100066.0], [187.0, 100031.0], [185.0, 100031.66666666667], [196.0, 100026.33333333333], [193.0, 100028.16666666666], [201.0, 100024.6], [215.0, 100341.5], [213.0, 100342.44444444444], [212.0, 100342.33333333333], [223.0, 100339.5], [222.0, 100340.0], [220.0, 100340.0], [219.0, 100341.0], [217.0, 100342.0], [230.0, 100321.0], [229.0, 100332.0], [228.0, 100333.0], [227.0, 100336.0], [226.0, 100336.0], [225.0, 100338.0], [224.0, 100338.0], [239.0, 100028.5], [235.0, 100031.0], [234.0, 100033.5], [232.0, 100319.0], [246.0, 100026.0], [242.0, 100027.0], [255.0, 100022.0], [251.0, 100023.0], [249.0, 100025.0], [270.0, 96976.0], [271.0, 95968.0], [269.0, 98749.0], [268.0, 99757.0], [267.0, 99759.0], [266.0, 100015.0], [265.0, 100016.5], [263.0, 100018.5], [258.0, 100022.0], [257.0, 100022.0], [261.0, 100020.0], [260.0, 100020.0], [286.0, 89976.0], [287.0, 88968.0], [285.0, 89977.0], [284.0, 89907.0], [283.0, 89910.0], [282.0, 92978.0], [281.0, 92980.0], [280.0, 93987.0], [279.0, 93991.0], [273.0, 96730.0], [272.0, 97738.0], [275.0, 95721.0], [274.0, 96728.0], [278.0, 94997.0], [277.0, 94710.0], [276.0, 95719.0], [302.0, 80819.0], [303.0, 79812.0], [301.0, 80821.0], [300.0, 81829.0], [299.0, 81831.0], [298.0, 82839.0], [297.0, 84901.0], [296.0, 85909.0], [295.0, 84929.0], [289.0, 88941.0], [288.0, 88965.0], [291.0, 85871.0], [290.0, 86879.0], [294.0, 85936.0], [293.0, 85939.0], [292.0, 86946.0], [318.0, 74803.0], [319.0, 73795.0], [317.0, 73822.0], [316.0, 74829.0], [315.0, 73886.0], [314.0, 74894.0], [313.0, 76824.0], [312.0, 76850.0], [311.0, 77544.0], [305.0, 78803.0], [304.0, 79810.0], [307.0, 78869.0], [306.0, 79875.0], [310.0, 77858.0], [309.0, 78844.0], [308.0, 79851.0], [334.0, 65743.0], [335.0, 64735.0], [333.0, 64799.0], [332.0, 65807.0], [331.0, 67448.0], [330.0, 68456.0], [329.0, 66819.0], [328.0, 67827.0], [327.0, 67830.0], [321.0, 70725.0], [320.0, 72810.0], [323.0, 70794.0], [322.0, 71801.0], [326.0, 68836.0], [325.0, 70766.0], [324.0, 71773.0], [350.0, 58650.0], [351.0, 57641.0], [349.0, 58651.0], [348.0, 59659.0], [347.0, 59661.0], [346.0, 60668.0], [345.0, 60670.0], [344.0, 61678.0], [343.0, 61680.0], [337.0, 63725.0], [336.0, 64733.0], [339.0, 63698.0], [338.0, 64706.0], [342.0, 62689.0], [341.0, 62690.0], [340.0, 63696.0], [366.0, 50572.0], [367.0, 49565.0], [365.0, 50574.0], [364.0, 51582.0], [363.0, 51584.0], [362.0, 52591.0], [361.0, 52594.0], [360.0, 53601.0], [359.0, 53603.0], [353.0, 56632.0], [352.0, 57639.0], [355.0, 55623.0], [354.0, 56630.0], [358.0, 54611.0], [357.0, 54613.0], [356.0, 55620.0], [382.0, 42493.0], [383.0, 41487.0], [381.0, 42495.0], [380.0, 43505.0], [379.0, 43505.0], [378.0, 44513.0], [377.0, 44516.0], [376.0, 45523.0], [375.0, 45525.0], [369.0, 48554.0], [368.0, 49562.0], [371.0, 47545.0], [370.0, 48552.0], [374.0, 46532.0], [373.0, 46534.0], [372.0, 47542.0], [398.0, 34415.0], [399.0, 33406.0], [397.0, 34417.0], [396.0, 35424.0], [395.0, 35426.0], [394.0, 36434.0], [393.0, 36437.0], [392.0, 37444.0], [391.0, 37446.0], [385.0, 40478.0], [384.0, 41483.0], [387.0, 39466.0], [386.0, 40474.0], [390.0, 38454.0], [389.0, 38458.0], [388.0, 39465.0], [414.0, 27340.0], [415.0, 26332.0], [413.0, 27341.0], [412.0, 28348.0], [411.0, 28350.0], [410.0, 28356.0], [409.0, 28358.0], [408.0, 29366.0], [407.0, 29368.0], [401.0, 32397.0], [400.0, 33404.0], [403.0, 31387.0], [402.0, 32395.0], [406.0, 30375.0], [405.0, 30378.0], [404.0, 31385.0], [430.0, 19260.0], [431.0, 20262.0], [429.0, 19263.0], [428.0, 20270.0], [427.0, 20272.0], [426.0, 21280.0], [425.0, 21282.0], [424.0, 22290.0], [423.0, 22292.0], [417.0, 25321.0], [416.0, 26329.0], [419.0, 24311.0], [418.0, 25320.0], [422.0, 23299.0], [421.0, 23301.0], [420.0, 24310.0], [446.0, 10863.0], [447.0, 10861.0], [445.0, 10863.0], [444.0, 10864.0], [443.0, 10866.0], [442.0, 10866.0], [441.0, 10867.0], [440.0, 10867.5], [438.0, 17230.0], [433.0, 19252.0], [432.0, 20260.0], [435.0, 18242.0], [434.0, 19249.0], [437.0, 17232.0], [436.0, 18242.0], [462.0, 10842.0], [463.0, 10822.0], [461.0, 10843.0], [460.0, 10845.0], [459.0, 10848.0], [458.0, 10850.0], [457.0, 10851.0], [456.0, 10853.0], [455.0, 10854.0], [450.0, 10861.0], [448.0, 10861.0], [454.0, 10856.0], [453.0, 10857.0], [452.0, 10858.5], [477.0, 10468.0], [478.0, 10456.0], [476.0, 10468.0], [467.0, 10478.0], [466.0, 10480.0], [465.0, 10481.0], [464.0, 10481.0], [475.0, 10471.0], [473.0, 10473.0], [472.0, 10473.0], [471.0, 10475.0], [469.0, 10476.0], [468.0, 10478.0], [494.0, 15662.0], [495.0, 15660.0], [493.0, 10295.0], [492.0, 10297.0], [491.0, 10297.0], [490.0, 10299.0], [489.0, 10301.0], [488.0, 10301.0], [487.0, 10301.0], [481.0, 10308.0], [480.0, 10307.5], [483.0, 10304.0], [482.0, 10306.0], [486.0, 10303.0], [485.0, 10303.5], [499.0, 10118.0], [510.0, 13353.0], [509.0, 15511.0], [507.0, 12813.5], [504.0, 15512.0], [500.0, 10117.0], [498.0, 15513.0], [497.0, 15513.0], [496.0, 10119.0], [537.0, 10098.0], [541.0, 10095.0], [543.0, 12793.0], [529.0, 10102.0], [540.0, 10096.0], [539.0, 10096.0], [538.0, 10097.0], [527.0, 10102.666666666666], [512.0, 12810.0], [515.0, 10111.0], [514.0, 15505.5], [517.0, 10110.0], [516.0, 10110.0], [519.0, 15503.0], [518.0, 10108.0], [524.0, 10104.0], [522.0, 10105.0], [521.0, 10105.0], [535.0, 10098.0], [534.0, 10099.0], [533.0, 12797.5], [531.0, 10102.0], [574.0, 15475.0], [563.0, 10084.0], [575.0, 10079.5], [560.0, 10086.0], [573.0, 10080.0], [569.0, 11880.0], [559.0, 15481.0], [545.0, 10093.0], [544.0, 15489.0], [549.0, 15486.0], [548.0, 10093.666666666666], [551.0, 15485.0], [550.0, 10091.0], [558.0, 10087.0], [557.0, 10088.0], [556.0, 15483.0], [555.0, 10089.0], [554.0, 10089.0], [553.0, 15484.0], [552.0, 10090.0], [566.0, 10082.0], [565.0, 10083.0], [564.0, 10083.0], [562.0, 15479.0], [561.0, 10086.0], [602.0, 10064.0], [596.0, 10069.0], [604.0, 10063.0], [607.0, 11859.333333333334], [594.0, 12767.0], [592.0, 10070.0], [603.0, 10063.0], [600.0, 15459.0], [582.0, 10074.0], [581.0, 10074.0], [580.0, 10074.0], [579.0, 10076.0], [578.0, 10078.5], [576.0, 15475.0], [590.0, 15466.0], [588.0, 15466.0], [587.0, 10072.0], [586.0, 10073.0], [585.0, 13669.666666666666], [599.0, 13452.0], [598.0, 10066.0], [597.0, 10069.0], [632.0, 10045.0], [638.0, 12741.5], [639.0, 10042.0], [626.0, 10051.0], [625.0, 10050.5], [636.0, 15439.0], [635.0, 10045.0], [634.0, 12742.5], [623.0, 12749.5], [611.0, 10058.0], [609.0, 12758.0], [613.0, 15452.0], [612.0, 10057.0], [615.0, 10056.0], [614.0, 10057.0], [621.0, 10053.5], [619.0, 10054.0], [618.0, 10054.0], [617.0, 10055.0], [616.0, 10056.0], [631.0, 10047.0], [629.0, 10048.0], [628.0, 10049.0], [627.0, 10050.0], [669.0, 10013.0], [659.0, 10030.0], [671.0, 10012.0], [656.0, 10032.5], [658.0, 10030.0], [657.0, 15426.0], [667.0, 10016.0], [666.0, 10016.0], [664.0, 10022.0], [646.0, 15432.0], [645.0, 10038.0], [644.0, 10040.5], [642.0, 10041.0], [641.0, 10041.0], [640.0, 10043.0], [654.0, 10035.0], [653.0, 10034.5], [651.0, 10035.5], [649.0, 10037.0], [648.0, 12734.5], [662.0, 10023.0], [661.0, 10029.0], [660.0, 10028.0], [696.0, 9978.0], [701.0, 15366.0], [702.0, 9970.0], [700.0, 9977.0], [699.0, 9977.5], [697.0, 9978.0], [687.0, 11684.5], [673.0, 10007.0], [672.0, 10010.0], [677.0, 14396.5], [675.0, 12704.5], [679.0, 10005.0], [678.0, 10006.0], [685.0, 9992.0], [684.0, 9994.0], [683.0, 9996.0], [681.0, 9997.0], [680.0, 10002.0], [695.0, 9979.0], [693.0, 9979.0], [691.0, 9989.333333333334], [688.0, 9989.0], [733.0, 15295.0], [735.0, 12558.5], [720.0, 11649.0], [722.0, 9955.0], [721.0, 9956.0], [732.0, 15300.0], [730.0, 9927.0], [729.0, 15324.0], [728.0, 15328.0], [718.0, 15352.0], [708.0, 11318.0], [704.0, 9969.5], [711.0, 9967.5], [710.0, 13354.0], [716.0, 9957.0], [715.0, 9958.0], [714.0, 12656.0], [712.0, 9967.0], [727.0, 9951.0], [726.0, 9953.0], [725.0, 9952.5], [723.0, 9954.0], [760.0, 13225.0], [766.0, 13912.5], [767.0, 13223.0], [752.0, 13068.0], [765.0, 13588.5], [763.0, 13224.0], [761.0, 12576.0], [748.0, 13594.5], [737.0, 15255.0], [736.0, 15255.0], [739.0, 15198.0], [738.0, 15200.0], [741.0, 14188.0], [740.0, 14190.0], [743.0, 13174.0], [742.0, 13175.0], [747.0, 13594.5], [744.0, 14608.0], [758.0, 12577.0], [757.0, 13229.0], [756.0, 14606.0], [755.0, 15528.0], [798.0, 13899.0], [799.0, 14587.0], [786.0, 13580.0], [784.0, 12892.0], [797.0, 13899.5], [794.0, 13212.0], [793.0, 13211.0], [792.0, 12565.0], [782.0, 13217.0], [772.0, 13223.0], [775.0, 13911.5], [774.0, 13749.75], [781.0, 17814.0], [780.0, 13218.0], [778.0, 13218.0], [777.0, 13219.0], [776.0, 13222.0], [791.0, 13213.0], [790.0, 13901.5], [788.0, 13214.0], [787.0, 14592.0], [827.0, 13207.0], [829.0, 13206.0], [830.0, 13664.666666666666], [828.0, 14307.6], [826.0, 14584.0], [807.0, 13208.0], [806.0, 13209.0], [805.0, 14585.0], [804.0, 13208.0], [801.0, 13897.5], [822.0, 13895.5], [820.0, 13207.0], [814.0, 13207.5], [812.0, 13483.4], [860.0, 13200.0], [862.0, 12530.0], [863.0, 13173.0], [861.0, 13184.0], [858.0, 13889.5], [839.0, 13042.0], [837.0, 13204.0], [835.0, 13893.5], [834.0, 13205.0], [833.0, 14122.666666666666], [832.0, 13205.0], [855.0, 13477.4], [854.0, 13567.5], [847.0, 14121.0], [846.0, 14580.0], [842.0, 13204.0], [841.0, 13203.0], [840.0, 14581.0], [894.0, 12518.0], [884.0, 14547.0], [895.0, 13163.5], [880.0, 13170.0], [882.0, 13628.333333333334], [881.0, 17767.0], [892.0, 13165.0], [890.0, 13166.0], [889.0, 13167.5], [870.0, 13170.0], [869.0, 12955.666666666666], [866.0, 14549.0], [864.0, 13173.0], [879.0, 13170.0], [877.0, 13170.0], [876.0, 14548.0], [873.0, 13171.0], [872.0, 13859.0], [887.0, 13167.0], [886.0, 13169.5], [885.0, 13168.0], [921.0, 13084.0], [926.0, 13079.0], [927.0, 13078.0], [913.0, 13088.0], [912.0, 13089.0], [916.0, 13087.0], [914.0, 13086.0], [924.0, 13082.0], [923.0, 13082.0], [922.0, 14460.0], [920.0, 13085.0], [903.0, 13833.5], [901.0, 14524.0], [900.0, 13148.0], [899.0, 12500.0], [898.0, 12509.0], [897.0, 13163.0], [896.0, 14542.0], [911.0, 13089.0], [910.0, 13089.0], [909.0, 13090.0], [908.0, 13455.5], [906.0, 13091.0], [905.0, 12444.0], [904.0, 13093.0], [919.0, 13774.5], [917.0, 13086.0], [958.0, 13057.0], [959.0, 13057.0], [944.0, 13069.0], [947.0, 14443.0], [946.0, 13756.0], [949.0, 12417.0], [948.0, 13066.0], [957.0, 13057.0], [956.0, 13059.0], [955.0, 13061.0], [954.0, 13061.0], [953.0, 14437.5], [935.0, 13073.0], [934.0, 13765.0], [932.0, 13076.0], [930.0, 13441.0], [928.0, 14456.0], [943.0, 13251.5], [939.0, 13072.0], [937.0, 13072.0], [936.0, 13073.0], [951.0, 12413.0], [950.0, 13064.0], [988.0, 13036.0], [990.0, 15543.5], [976.0, 14421.0], [979.0, 12717.5], [977.0, 13043.0], [987.0, 13036.0], [986.0, 13037.0], [985.0, 13038.0], [984.0, 13038.0], [975.0, 13043.0], [960.0, 13053.0], [964.0, 13052.0], [963.0, 13510.0], [974.0, 13732.5], [972.0, 13046.0], [971.0, 14425.0], [970.0, 13050.0], [968.0, 13577.75], [983.0, 13040.0], [982.0, 14417.0], [981.0, 13041.0], [980.0, 13042.0], [1017.0, 13022.0], [1021.0, 13015.0], [1022.0, 14391.0], [1008.0, 13026.0], [1010.0, 13025.0], [1009.0, 13026.0], [1012.0, 13024.0], [1011.0, 14402.0], [1020.0, 14391.0], [1019.0, 13017.0], [1018.0, 13022.0], [1016.0, 13022.0], [999.0, 13719.5], [997.0, 13031.0], [996.0, 13032.0], [995.0, 13034.0], [994.0, 13036.0], [993.0, 13036.0], [992.0, 13037.0], [1007.0, 14403.0], [1005.0, 12379.0], [1004.0, 14404.0], [1003.0, 13027.0], [1002.0, 13716.5], [1000.0, 14406.0], [1015.0, 13711.5], [1013.0, 13023.0], [1080.0, 14319.0], [1078.0, 12945.0], [1086.0, 12934.0], [1058.0, 12325.5], [1056.0, 12973.0], [1060.0, 12967.0], [1062.0, 12965.0], [1064.0, 12964.0], [1066.0, 12962.0], [1070.0, 12954.0], [1084.0, 12939.0], [1076.0, 12946.0], [1074.0, 12951.666666666666], [1026.0, 13012.0], [1030.0, 13013.0], [1028.0, 12689.0], [1032.0, 13010.0], [1036.0, 13693.5], [1034.0, 13009.0], [1038.0, 12996.0], [1054.0, 12976.0], [1052.0, 12335.0], [1050.0, 12984.0], [1046.0, 13450.666666666666], [1042.0, 12994.0], [1040.0, 12995.0], [1140.0, 9097.0], [1146.0, 12724.0], [1150.0, 9080.5], [1120.0, 9116.0], [1126.0, 9112.0], [1124.0, 9113.0], [1128.0, 9110.0], [1130.0, 12749.0], [1134.0, 9108.0], [1148.0, 9084.0], [1144.0, 9093.0], [1138.0, 12738.0], [1136.0, 12739.0], [1088.0, 13622.5], [1092.0, 12923.0], [1094.0, 13610.0], [1098.0, 12908.0], [1100.0, 12067.0], [1102.0, 11056.0], [1118.0, 9117.0], [1114.0, 9120.0], [1110.0, 9122.0], [1108.0, 8024.0], [1106.0, 9034.0], [1104.0, 10045.0], [1206.0, 11485.0], [1210.0, 11484.0], [1184.0, 11502.0], [1186.0, 15943.0], [1188.0, 11499.0], [1192.0, 12074.5], [1196.0, 29979.0], [1194.0, 12646.0], [1198.0, 10248.5], [1208.0, 11484.0], [1204.0, 12637.0], [1182.0, 11503.0], [1152.0, 9075.0], [1154.0, 6688.0], [1156.0, 12667.0], [1158.0, 7875.0], [1162.0, 11513.0], [1160.0, 12358.5], [1164.0, 11512.0], [1180.0, 11504.0], [1178.0, 10260.5], [1176.0, 12658.0], [1174.0, 12661.0], [1172.0, 7870.0], [1168.0, 11511.0], [1266.0, 11463.333333333334], [1250.0, 12619.0], [1248.0, 12620.0], [1254.0, 29376.5], [1252.0, 11467.0], [1258.0, 27011.0], [1276.0, 12600.0], [1272.0, 12607.0], [1270.0, 10217.5], [1268.0, 15904.0], [1216.0, 11480.0], [1218.0, 16807.0], [1222.0, 13699.5], [1220.0, 29389.0], [1228.0, 15919.0], [1230.0, 7836.0], [1246.0, 12621.0], [1244.0, 7831.0], [1242.0, 29380.5], [1240.0, 11471.0], [1238.0, 47293.0], [1236.0, 12624.0], [1234.0, 47293.0], [1232.0, 14138.0], [1336.0, 7751.0], [1340.0, 90649.0], [1312.0, 90697.0], [1314.0, 29328.0], [1322.0, 11878.0], [1318.0, 14161.0], [1324.0, 12546.0], [1326.0, 11391.0], [1342.0, 11374.5], [1338.0, 47195.0], [1330.0, 7752.0], [1280.0, 11439.0], [1284.0, 51648.5], [1282.0, 7797.0], [1286.0, 7795.0], [1288.0, 7794.0], [1290.0, 11432.0], [1292.0, 12583.0], [1294.0, 51642.0], [1310.0, 11425.0], [1308.0, 11713.0], [1306.0, 14666.0], [1302.0, 32000.0], [1296.0, 12580.0], [1396.0, 90612.0], [1380.0, 12496.0], [1376.0, 12499.0], [1378.0, 16674.0], [1382.0, 7704.0], [1386.0, 15783.0], [1384.0, 16669.0], [1400.0, 16823.0], [1398.0, 12489.5], [1394.0, 11915.0], [1392.0, 11915.5], [1358.0, 47177.0], [1356.0, 16846.0], [1354.0, 12511.0], [1352.0, 47181.0], [1350.0, 14106.0], [1348.0, 16851.0], [1372.0, 11349.0], [1370.0, 15337.666666666666], [1366.0, 9530.5], [1364.0, 12504.0], [1360.0, 11357.0], [1470.0, 29374.0], [1446.0, 16606.0], [1450.0, 5596.0], [1452.0, 12047.0], [1468.0, 12041.0], [1464.0, 12043.0], [1462.0, 23601.0], [1456.0, 20713.0], [1418.0, 13972.5], [1416.0, 12464.0], [1414.0, 27417.5], [1410.0, 12483.0], [1408.0, 14990.0], [1434.0, 11292.0], [1428.0, 14039.5], [1426.0, 12451.0], [1520.0, 46669.0], [1510.0, 68410.0], [1526.0, 10844.0], [1506.0, 29355.0], [1504.0, 10871.0], [1508.0, 12020.0], [1512.0, 12014.0], [1514.0, 46674.0], [1516.0, 12005.0], [1522.0, 23557.0], [1472.0, 46707.0], [1478.0, 49634.33333333333], [1480.0, 90159.0], [1482.0, 12035.0], [1484.0, 12035.0], [1486.0, 12034.0], [1500.0, 12025.0], [1498.0, 16361.0], [1496.0, 12026.0], [1494.0, 12027.0], [1492.0, 12028.0], [1490.0, 12033.0], [1594.0, 10813.0], [1568.0, 11973.0], [1574.0, 11971.0], [1578.0, 11969.0], [1596.0, 11388.0], [1588.0, 10369.666666666666], [1584.0, 11967.0], [1540.0, 11994.0], [1542.0, 11989.0], [1546.0, 11987.0], [1550.0, 11985.0], [1566.0, 11976.0], [1564.0, 11981.0], [1560.0, 13627.5], [1556.0, 11983.0], [1580.0, 11392.0], [1632.0, 11919.0], [1654.0, 10735.333333333334], [1636.0, 90042.0], [1638.0, 11912.0], [1640.0, 46577.0], [1642.0, 11904.0], [1644.0, 10739.0], [1662.0, 11883.0], [1658.0, 11885.0], [1650.0, 11888.0], [1648.0, 10737.0], [1630.0, 11925.0], [1602.0, 11962.0], [1606.0, 11962.0], [1614.0, 46623.0], [1626.0, 16124.0], [1624.0, 46617.0], [1622.0, 46618.0], [1616.0, 10800.0], [1696.0, 10700.0], [1706.0, 28607.0], [1702.0, 10698.0], [1698.0, 10699.0], [1678.0, 11105.333333333334], [1674.0, 10724.0], [1672.0, 10725.0], [1666.0, 11881.0], [1664.0, 10730.0], [1694.0, 10702.0], [1692.0, 10706.0], [1690.0, 10708.0], [1688.0, 10709.0], [1684.0, 10713.0], [1680.0, 10720.0], [1914.0, 211.5], [1916.0, 283.3333333333333], [1902.0, 195.0], [1900.0, 329.0], [1912.0, 219.72727272727272], [1910.0, 196.0], [1908.0, 240.33333333333334], [1906.0, 196.0], [1904.0, 196.0], [1928.0, 194.125], [1942.0, 271.4], [1930.0, 325.0], [1932.0, 192.0], [1934.0, 193.25], [1940.0, 192.125], [1936.0, 193.5], [2012.0, 315.27586206896547], [2008.0, 1167.25], [2004.0, 184.0], [2120.0, 94.0], [2132.0, 92.0], [2116.0, 97.0], [2124.0, 93.0], [2128.0, 93.0], [2136.0, 91.0], [2140.0, 84.0], [2168.0, 775.0], [2164.0, 176.0], [2072.0, 113.0], [2068.0, 172.62499999999997], [2064.0, 173.0], [2556.0, 320.01020408163265], [2552.0, 318.40000000000003], [2548.0, 320.9090909090909], [2684.0, 1504.0], [2652.0, 194.0], [2676.0, 189.85], [2656.0, 193.0], [2560.0, 322.20000000000005], [2796.0, 12914.0], [2752.0, 183.0], [2808.0, 11115.0], [2800.0, 26388.0], [2784.0, 153.0], [2712.0, 200.0], [2748.0, 192.1], [2728.0, 199.0], [2724.0, 199.0], [2884.0, 39862.0], [2868.0, 11094.0], [2856.0, 14106.0], [3000.0, 6551.764869570389], [2964.0, 13566.5], [2988.0, 12849.0], [2968.0, 12539.8], [2992.0, 12848.0], [2984.0, 12849.0], [2980.0, 12849.0], [2165.0, 177.375], [2113.0, 97.0], [2121.0, 94.0], [2129.0, 92.25], [2137.0, 90.0], [2141.0, 78.0], [2161.0, 178.0], [2077.0, 113.0], [2065.0, 173.0], [2061.0, 174.0], [2557.0, 321.04225352112684], [2553.0, 318.2105263157894], [2645.0, 196.0], [2653.0, 194.0], [2685.0, 42007.0], [2661.0, 193.0], [2657.0, 193.0], [2561.0, 322.07142857142856], [2705.0, 201.0], [2805.0, 11999.5], [2793.0, 117.0], [2689.0, 63732.0], [2709.0, 200.0], [2713.0, 200.0], [2749.0, 184.0], [2725.0, 199.25], [2721.0, 199.0], [2837.0, 11671.333333333334], [2921.0, 11087.0], [2833.0, 17458.25], [2865.0, 12862.0], [2861.0, 12848.0], [2961.0, 21263.333333333332], [2993.0, 12848.0], [2965.0, 17191.4], [2969.0, 14175.5], [2973.0, 12090.333333333334], [2989.0, 13951.4], [2985.0, 15852.0], [2981.0, 11082.0], [2977.0, 12849.5], [1083.0, 13629.0], [1063.0, 12964.0], [1059.0, 12971.0], [1061.0, 14342.0], [1065.0, 12314.0], [1069.0, 12955.0], [1067.0, 12955.0], [1071.0, 12952.0], [1085.0, 12938.0], [1081.0, 12941.0], [1079.0, 12296.0], [1077.0, 12945.0], [1075.0, 12951.0], [1055.0, 12975.0], [1025.0, 14391.0], [1027.0, 12688.5], [1031.0, 13011.0], [1037.0, 14381.0], [1053.0, 12980.0], [1051.0, 12984.0], [1049.0, 12990.666666666666], [1043.0, 12993.0], [1041.0, 12994.0], [1143.0, 9094.666666666666], [1127.0, 9111.0], [1123.0, 9114.5], [1121.0, 9115.0], [1129.0, 9110.0], [1133.0, 9108.0], [1131.0, 9109.0], [1135.0, 9108.5], [1147.0, 9083.0], [1145.0, 9092.0], [1139.0, 9098.0], [1137.0, 9100.0], [1119.0, 9117.0], [1093.0, 13380.333333333334], [1097.0, 12692.666666666666], [1099.0, 12069.0], [1101.0, 11058.0], [1103.0, 10047.0], [1115.0, 9120.0], [1113.0, 9121.5], [1111.0, 9121.0], [1109.0, 9123.0], [1107.0, 8026.0], [1105.0, 9037.0], [1209.0, 12635.0], [1189.0, 11499.0], [1215.0, 11481.5], [1185.0, 9682.5], [1187.0, 16828.0], [1191.0, 12650.0], [1193.0, 12649.0], [1199.0, 12643.0], [1213.0, 9663.0], [1211.0, 12634.0], [1207.0, 11484.0], [1205.0, 16971.0], [1203.0, 11892.5], [1201.0, 29400.5], [1153.0, 9074.0], [1155.0, 6684.0], [1157.0, 12667.0], [1163.0, 13734.5], [1167.0, 9693.0], [1165.0, 11512.0], [1181.0, 16990.0], [1175.0, 15948.0], [1173.0, 13669.333333333334], [1169.0, 7872.0], [1275.0, 10618.666666666666], [1279.0, 11438.0], [1255.0, 12042.5], [1263.0, 14782.5], [1261.0, 25271.0], [1277.0, 12592.0], [1271.0, 7821.0], [1267.0, 16790.0], [1247.0, 47288.0], [1217.0, 47300.0], [1225.0, 12401.0], [1223.0, 16964.0], [1227.0, 11477.0], [1229.0, 16962.0], [1245.0, 11469.0], [1243.0, 12623.0], [1239.0, 15914.0], [1237.0, 10228.5], [1233.0, 47293.0], [1341.0, 7735.0], [1343.0, 12519.0], [1315.0, 11418.0], [1323.0, 12551.0], [1325.0, 12543.0], [1337.0, 13487.0], [1335.0, 12542.0], [1333.0, 9858.5], [1311.0, 12577.0], [1281.0, 7799.0], [1285.0, 12587.0], [1287.0, 12586.0], [1289.0, 12585.0], [1291.0, 11431.0], [1295.0, 12580.0], [1307.0, 11425.0], [1305.0, 12578.0], [1297.0, 12579.0], [1359.0, 11357.0], [1399.0, 12489.0], [1405.0, 13570.75], [1377.0, 7707.0], [1381.0, 7704.0], [1383.0, 11342.0], [1391.0, 12492.0], [1387.0, 11340.0], [1401.0, 11336.0], [1395.0, 47158.0], [1357.0, 7720.0], [1355.0, 12511.0], [1353.0, 12512.0], [1351.0, 12513.0], [1347.0, 11942.0], [1345.0, 12518.0], [1375.0, 11924.0], [1373.0, 11348.0], [1371.0, 7710.0], [1367.0, 7712.0], [1363.0, 13132.333333333334], [1461.0, 12045.0], [1467.0, 12042.0], [1471.0, 12040.0], [1445.0, 13373.25], [1441.0, 12620.0], [1447.0, 12430.0], [1449.0, 11854.0], [1451.0, 5578.0], [1465.0, 12042.0], [1463.0, 16380.0], [1457.0, 12046.0], [1423.0, 47121.0], [1421.0, 13130.0], [1415.0, 47138.0], [1413.0, 51540.0], [1409.0, 12484.0], [1437.0, 15281.333333333334], [1435.0, 90566.0], [1433.0, 14950.666666666666], [1425.0, 13461.0], [1479.0, 12037.0], [1533.0, 11995.333333333334], [1507.0, 12019.0], [1513.0, 12014.0], [1515.0, 12005.0], [1531.0, 28754.5], [1529.0, 9600.5], [1525.0, 11997.0], [1523.0, 10845.0], [1503.0, 51083.5], [1473.0, 16374.0], [1475.0, 12038.5], [1481.0, 12037.0], [1483.0, 12035.0], [1485.0, 46703.0], [1501.0, 12024.0], [1499.0, 12025.0], [1497.0, 12026.0], [1495.0, 12027.0], [1493.0, 12027.0], [1491.0, 12029.0], [1489.0, 12033.666666666666], [1519.0, 12002.0], [1517.0, 12002.0], [1597.0, 11964.0], [1599.0, 11963.0], [1571.0, 11972.0], [1569.0, 11972.0], [1573.0, 11971.0], [1575.0, 11969.0], [1593.0, 11774.0], [1585.0, 11967.0], [1567.0, 11976.0], [1537.0, 13079.0], [1539.0, 14083.0], [1541.0, 7202.0], [1545.0, 7197.0], [1543.0, 11989.0], [1547.0, 11986.0], [1549.0, 13054.5], [1565.0, 11977.0], [1563.0, 11981.0], [1561.0, 11982.0], [1557.0, 11982.0], [1555.0, 9587.5], [1553.0, 21559.333333333332], [1581.0, 11968.0], [1659.0, 10732.0], [1639.0, 46578.0], [1663.0, 11883.0], [1635.0, 90041.0], [1637.0, 40116.5], [1641.0, 46577.0], [1643.0, 11892.0], [1647.0, 11314.5], [1645.0, 11891.0], [1661.0, 12953.5], [1657.0, 11310.0], [1655.0, 10734.0], [1651.0, 11888.0], [1649.0, 11889.0], [1601.0, 11963.0], [1603.0, 10810.0], [1605.0, 23518.0], [1609.0, 9561.0], [1607.0, 10806.0], [1613.0, 11955.5], [1611.0, 29290.0], [1615.0, 7162.0], [1629.0, 10774.0], [1627.0, 11927.0], [1625.0, 11948.0], [1623.0, 46618.0], [1621.0, 29284.75], [1617.0, 11951.0], [1677.0, 10722.0], [1695.0, 10700.0], [1703.0, 39471.5], [1709.0, 5010.5], [1707.0, 46517.0], [1679.0, 11873.0], [1673.0, 10725.0], [1671.0, 12948.0], [1669.0, 11303.0], [1667.0, 10728.0], [1665.0, 10730.0], [1693.0, 11855.0], [1691.0, 11860.0], [1685.0, 10712.0], [1683.0, 10713.5], [1681.0, 11871.0], [1913.0, 201.09090909090915], [1915.0, 195.0], [1911.0, 196.0], [1909.0, 239.93333333333337], [1907.0, 329.0], [1905.0, 196.0], [1927.0, 194.0], [1949.0, 322.0], [1929.0, 210.85106382978722], [1931.0, 325.0], [1933.0, 196.41025641025644], [1935.0, 226.24999999999997], [1947.0, 244.0], [1943.0, 324.0], [1941.0, 193.0], [1939.0, 221.33333333333334], [1937.0, 193.5], [2013.0, 178.04000000000005], [2011.0, 183.0], [2170.0, 604.1428571428571], [2166.0, 178.0], [2122.0, 94.0], [2126.0, 93.0], [2134.0, 91.6], [2162.0, 178.0], [2062.0, 173.0], [2558.0, 323.5], [2554.0, 319.1764705882353], [2550.0, 319.18750000000006], [2546.0, 318.5483870967742], [2682.0, 119.0], [2674.0, 191.1379310344828], [2786.0, 153.04000000000002], [2754.0, 181.5], [2806.0, 17304.0], [2798.0, 11169.0], [2750.0, 183.0], [2690.0, 496.0], [2714.0, 200.0], [2718.0, 199.0], [2746.0, 193.0], [2742.0, 193.0], [2734.0, 197.88888888888889], [2842.0, 21165.0], [2834.0, 12723.142857142857], [2874.0, 12861.0], [2862.0, 39868.0], [2966.0, 14394.333333333334], [2962.0, 12850.0], [2970.0, 15436.0], [2974.0, 11965.5], [2994.0, 14025.0], [2986.0, 12848.5], [2982.0, 11082.0], [2978.0, 12849.0], [2123.0, 93.66666666666667], [2167.0, 177.0], [2127.0, 93.0], [2131.0, 92.0], [2135.0, 91.14285714285715], [2139.0, 84.0], [2163.0, 177.0], [2067.0, 173.0], [2063.0, 173.0], [2111.0, 97.0], [2107.0, 100.375], [2559.0, 323.0], [2555.0, 319.0869565217391], [2547.0, 318.5], [2687.0, 42006.0], [2683.0, 1506.0], [2651.0, 194.0], [2647.0, 196.0], [2679.0, 189.875], [2675.0, 190.23999999999998], [2659.0, 193.0], [2795.0, 10370.5], [2803.0, 12883.0], [2811.0, 16793.0], [2783.0, 153.0], [2755.0, 181.0], [2691.0, 494.0], [2707.0, 201.0], [2711.0, 200.0], [2715.0, 199.5], [2727.0, 199.0], [2879.0, 14100.117647058825], [2883.0, 11973.5], [2859.0, 14452.846153846154], [2963.0, 14616.666666666666], [2959.0, 11967.25], [2967.0, 14947.285714285717], [2971.0, 14210.7], [2975.0, 18149.0], [2999.0, 12493.6], [2991.0, 12848.0], [2987.0, 11080.5], [2979.0, 18149.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[2937.5523504273424, 7102.733433048435]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 3000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 1218.0, "minX": 1.68301692E12, "maxY": 182782.93333333332, "series": [{"data": [[1.68301698E12, 143828.28333333333], [1.68301728E12, 1733.9333333333334], [1.68301734E12, 3830.65], [1.68301716E12, 182782.93333333332], [1.68301722E12, 144484.56666666668], [1.68301704E12, 168973.73333333334], [1.6830171E12, 181251.01666666666], [1.68301692E12, 5970.733333333334]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.68301698E12, 103664.4], [1.68301728E12, 1218.0], [1.68301734E12, 2671.2], [1.68301716E12, 128360.4], [1.68301722E12, 103328.4], [1.68301704E12, 119716.8], [1.6830171E12, 125302.8], [1.68301692E12, 4527.6]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68301734E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 3376.3191094619674, "minX": 1.68301692E12, "maxY": 97899.19496855345, "series": [{"data": [[1.68301698E12, 5894.6497852686125], [1.68301728E12, 38451.43448275861], [1.68301734E12, 97899.19496855345], [1.68301716E12, 6482.642539558004], [1.68301722E12, 4969.282741240545], [1.68301704E12, 7429.631442577049], [1.6830171E12, 8074.419770391142], [1.68301692E12, 3376.3191094619674]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68301734E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 3376.1948051948084, "minX": 1.68301692E12, "maxY": 97899.1823899371, "series": [{"data": [[1.68301698E12, 5894.639008184091], [1.68301728E12, 38451.41379310344], [1.68301734E12, 97899.1823899371], [1.68301716E12, 6412.30116385516], [1.68301722E12, 4969.275912527424], [1.68301704E12, 7409.583053221331], [1.6830171E12, 7986.872713923368], [1.68301692E12, 3376.1948051948084]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68301734E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.06206896551724139, "minX": 1.68301692E12, "maxY": 5885.205112802037, "series": [{"data": [[1.68301698E12, 261.5718337249812], [1.68301728E12, 0.06206896551724139], [1.68301734E12, 0.31446540880503154], [1.68301716E12, 1912.2778213678482], [1.68301722E12, 651.4248435086585], [1.68301704E12, 1080.5425770308163], [1.6830171E12, 5885.205112802037], [1.68301692E12, 82.35621521335808]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68301734E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 11.0, "minX": 1.68301692E12, "maxY": 190934.0, "series": [{"data": [[1.68301698E12, 63311.0], [1.68301728E12, 73795.0], [1.68301734E12, 100343.0], [1.68301716E12, 190934.0], [1.68301722E12, 145626.0], [1.68301704E12, 112371.0], [1.6830171E12, 163371.0], [1.68301692E12, 7838.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.68301698E12, 14091.0], [1.68301728E12, 65768.6], [1.68301734E12, 100238.90000000001], [1.68301716E12, 11325.0], [1.68301722E12, 12945.0], [1.68301704E12, 14317.7], [1.6830171E12, 7577.0], [1.68301692E12, 5976.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.68301698E12, 52406.78], [1.68301728E12, 73341.9], [1.68301734E12, 100343.0], [1.68301716E12, 109705.88], [1.68301722E12, 46651.55999999999], [1.68301704E12, 101021.0], [1.6830171E12, 131400.8999999999], [1.68301692E12, 7814.6]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.68301698E12, 28874.9], [1.68301728E12, 70158.29999999997], [1.68301734E12, 100341.0], [1.68301716E12, 32903.0], [1.68301722E12, 15781.0], [1.68301704E12, 20031.399999999994], [1.6830171E12, 63676.0], [1.68301692E12, 7699.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.68301698E12, 22.0], [1.68301728E12, 10822.0], [1.68301734E12, 73822.0], [1.68301716E12, 11.0], [1.68301722E12, 16.0], [1.68301704E12, 16.0], [1.6830171E12, 12.0], [1.68301692E12, 176.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.68301698E12, 177.0], [1.68301728E12, 37446.0], [1.68301734E12, 100099.5], [1.68301716E12, 179.0], [1.68301722E12, 283.0], [1.68301704E12, 181.0], [1.6830171E12, 171.0], [1.68301692E12, 4900.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68301734E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 50.0, "minX": 1.0, "maxY": 190922.0, "series": [{"data": [[2.0, 55621.5], [4.0, 49824.5], [5.0, 7163.5], [6.0, 7425.0], [7.0, 3557.0], [9.0, 4629.0], [14.0, 35468.5], [15.0, 17941.0], [17.0, 18496.0], [19.0, 5454.0], [20.0, 28962.0], [21.0, 158.0], [22.0, 4135.0], [25.0, 10859.0], [27.0, 12561.0], [28.0, 6443.5], [30.0, 75787.0], [31.0, 197.0], [33.0, 1893.0], [34.0, 14081.0], [36.0, 14030.0], [41.0, 100165.0], [42.0, 50.0], [45.0, 190922.0], [46.0, 97562.0], [47.0, 9110.0], [50.0, 148.0], [53.0, 190904.0], [52.0, 248.5], [57.0, 62445.0], [60.0, 67.0], [88.0, 110.5], [95.0, 138.0], [102.0, 193.0], [107.0, 5973.0], [109.0, 8229.0], [112.0, 7792.0], [114.0, 183.0], [122.0, 9031.5], [125.0, 237.0], [137.0, 12645.0], [142.0, 5577.5], [141.0, 14343.0], [136.0, 164.0], [148.0, 149.0], [145.0, 150.0], [147.0, 13016.0], [159.0, 135.0], [152.0, 257.0], [171.0, 8087.0], [174.0, 170.0], [175.0, 147.0], [191.0, 4924.0], [185.0, 1066.0], [189.0, 165.0], [194.0, 4219.5], [214.0, 186.0], [209.0, 170.0], [215.0, 14024.0], [210.0, 84227.5], [211.0, 152.0], [222.0, 194.0], [221.0, 173.0], [225.0, 8616.0], [231.0, 167.0], [228.0, 149.0], [238.0, 164.0], [236.0, 154.0], [239.0, 165.0], [234.0, 164.0], [233.0, 133.0], [232.0, 178.0], [235.0, 149.0], [237.0, 187.0], [247.0, 159.0], [241.0, 174.0], [243.0, 166.0], [244.0, 167.0], [240.0, 158.0], [248.0, 156.0], [257.0, 12454.0], [270.0, 161.0], [261.0, 148.0], [275.0, 139.0], [277.0, 187.0], [273.0, 260.0], [282.0, 164.0], [276.0, 10088.5], [302.0, 11720.0], [298.0, 147.0], [288.0, 10089.0], [289.0, 165.0], [309.0, 8536.0], [315.0, 517.0], [306.0, 179.0], [311.0, 280.0], [335.0, 283.0], [326.0, 177.0], [325.0, 182.0], [329.0, 6733.5], [323.0, 195.0], [339.0, 156.0], [350.0, 193.0], [343.0, 151.0], [363.0, 156.0], [362.0, 141.0], [365.0, 187.0], [355.0, 13163.0], [383.0, 154.0], [371.0, 178.0], [374.0, 6930.0], [376.0, 10967.0], [370.0, 10787.0], [388.0, 160.0], [386.0, 165.0], [395.0, 15259.5], [391.0, 11645.0], [406.0, 122.0], [403.0, 163.0], [426.0, 156.0], [431.0, 128.0], [441.0, 152.0], [439.0, 152.0], [443.0, 11187.0], [437.0, 165.0], [440.0, 162.0], [444.0, 160.0], [455.0, 154.0], [458.0, 21192.0], [472.0, 175.0], [470.0, 257.0], [476.0, 153.0], [468.0, 170.0], [471.0, 7858.0], [475.0, 146.0], [464.0, 268.5], [486.0, 163.0], [491.0, 10961.0], [481.0, 152.0], [509.0, 209.0], [497.0, 160.0], [534.0, 296.0], [530.0, 13334.0], [538.0, 9936.0], [566.0, 4543.0], [553.0, 10018.0], [546.0, 188.0], [593.0, 234.0], [601.0, 147.0], [635.0, 12551.0], [639.0, 136.0], [626.0, 12643.5], [634.0, 228.0], [613.0, 384.0], [615.0, 157.0], [660.0, 9072.5], [653.0, 186.0], [641.0, 151.0], [675.0, 132.0], [689.0, 156.0], [700.0, 168.0], [706.0, 170.0], [730.0, 170.0], [747.0, 12511.0], [742.0, 177.0], [788.0, 11643.0], [778.0, 9021.5], [796.0, 209.0], [802.0, 12478.0], [838.0, 405.0], [899.0, 180.0], [929.0, 12634.0], [930.0, 147.0], [1120.0, 292.5], [1.0, 21962.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[1.0, 99059.0], [9.0, 75475.0], [326.0, 31149.0], [371.0, 74784.0], [395.0, 99793.0], [209.0, 23936.0], [30.0, 9408.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1120.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 190922.0, "series": [{"data": [[2.0, 55621.5], [4.0, 49824.5], [5.0, 7159.5], [6.0, 7425.0], [7.0, 3557.0], [9.0, 4628.5], [14.0, 35468.5], [15.0, 17941.0], [17.0, 18496.0], [19.0, 5454.0], [20.0, 28962.0], [21.0, 158.0], [22.0, 4135.0], [25.0, 10859.0], [27.0, 12561.0], [28.0, 6443.5], [30.0, 75787.0], [31.0, 197.0], [33.0, 1893.0], [34.0, 14081.0], [36.0, 14030.0], [41.0, 100165.0], [42.0, 50.0], [45.0, 190922.0], [46.0, 97562.0], [47.0, 9110.0], [50.0, 148.0], [53.0, 190904.0], [52.0, 248.5], [57.0, 62445.0], [60.0, 67.0], [88.0, 110.5], [95.0, 138.0], [102.0, 193.0], [107.0, 5973.0], [109.0, 8229.0], [112.0, 7792.0], [114.0, 183.0], [122.0, 9031.5], [125.0, 237.0], [137.0, 12645.0], [142.0, 5577.5], [141.0, 14343.0], [136.0, 164.0], [148.0, 149.0], [145.0, 150.0], [147.0, 13016.0], [159.0, 135.0], [152.0, 257.0], [171.0, 8087.0], [174.0, 170.0], [175.0, 147.0], [191.0, 4924.0], [185.0, 1066.0], [189.0, 165.0], [194.0, 4219.5], [214.0, 186.0], [209.0, 170.0], [215.0, 14024.0], [210.0, 84227.5], [211.0, 152.0], [222.0, 194.0], [221.0, 173.0], [225.0, 8615.0], [231.0, 167.0], [228.0, 149.0], [238.0, 164.0], [236.0, 154.0], [239.0, 165.0], [234.0, 164.0], [233.0, 133.0], [232.0, 178.0], [235.0, 149.0], [237.0, 187.0], [247.0, 159.0], [241.0, 174.0], [243.0, 166.0], [244.0, 167.0], [240.0, 158.0], [248.0, 156.0], [257.0, 12454.0], [270.0, 161.0], [261.0, 148.0], [275.0, 139.0], [277.0, 187.0], [273.0, 260.0], [282.0, 164.0], [276.0, 10088.5], [302.0, 11720.0], [298.0, 147.0], [288.0, 10089.0], [289.0, 165.0], [309.0, 8536.0], [315.0, 517.0], [306.0, 179.0], [311.0, 280.0], [335.0, 283.0], [326.0, 177.0], [325.0, 182.0], [329.0, 6733.5], [323.0, 195.0], [339.0, 156.0], [350.0, 193.0], [343.0, 151.0], [363.0, 156.0], [362.0, 141.0], [365.0, 187.0], [355.0, 13163.0], [383.0, 154.0], [371.0, 178.0], [374.0, 6930.0], [376.0, 10967.0], [370.0, 10787.0], [388.0, 160.0], [386.0, 165.0], [395.0, 15259.0], [391.0, 11645.0], [406.0, 122.0], [403.0, 163.0], [426.0, 156.0], [431.0, 128.0], [441.0, 152.0], [439.0, 152.0], [443.0, 11187.0], [437.0, 165.0], [440.0, 162.0], [444.0, 160.0], [455.0, 154.0], [458.0, 21192.0], [472.0, 175.0], [470.0, 257.0], [476.0, 153.0], [468.0, 170.0], [471.0, 7858.0], [475.0, 146.0], [464.0, 268.5], [486.0, 163.0], [491.0, 10961.0], [481.0, 152.0], [509.0, 209.0], [497.0, 160.0], [534.0, 296.0], [530.0, 13334.0], [538.0, 9936.0], [566.0, 4543.0], [553.0, 10018.0], [546.0, 188.0], [593.0, 234.0], [601.0, 147.0], [635.0, 12551.0], [639.0, 136.0], [626.0, 12643.5], [634.0, 228.0], [613.0, 384.0], [615.0, 157.0], [660.0, 9072.5], [653.0, 186.0], [641.0, 151.0], [675.0, 132.0], [689.0, 156.0], [700.0, 168.0], [706.0, 170.0], [730.0, 170.0], [747.0, 12511.0], [742.0, 177.0], [788.0, 11643.0], [778.0, 9021.5], [796.0, 209.0], [802.0, 12478.0], [838.0, 405.0], [899.0, 180.0], [929.0, 12634.0], [930.0, 147.0], [1120.0, 292.5], [1.0, 21962.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[1.0, 0.0], [9.0, 0.0], [326.0, 0.0], [371.0, 0.0], [395.0, 0.0], [209.0, 0.0], [30.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1120.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 42.9, "minX": 1.68301692E12, "maxY": 245.7, "series": [{"data": [[1.68301698E12, 210.6], [1.68301716E12, 241.8], [1.68301722E12, 210.6], [1.68301704E12, 218.4], [1.6830171E12, 245.7], [1.68301692E12, 42.9]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68301722E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.21666666666666667, "minX": 1.68301692E12, "maxY": 254.68333333333334, "series": [{"data": [[1.68301698E12, 205.68333333333334], [1.68301728E12, 2.4166666666666665], [1.68301734E12, 5.3], [1.68301716E12, 254.68333333333334], [1.68301722E12, 205.01666666666668], [1.68301704E12, 237.53333333333333], [1.6830171E12, 248.61666666666667], [1.68301692E12, 8.983333333333333]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.68301716E12, 0.21666666666666667], [1.68301704E12, 0.4666666666666667], [1.6830171E12, 1.0833333333333333]], "isOverall": false, "label": "Non HTTP response code: java.net.SocketException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68301734E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.21666666666666667, "minX": 1.68301692E12, "maxY": 254.68333333333334, "series": [{"data": [[1.68301698E12, 205.68333333333334], [1.68301728E12, 2.4166666666666665], [1.68301734E12, 5.3], [1.68301716E12, 254.68333333333334], [1.68301722E12, 205.01666666666668], [1.68301704E12, 237.53333333333333], [1.6830171E12, 248.61666666666667], [1.68301692E12, 8.983333333333333]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.68301716E12, 0.21666666666666667], [1.68301704E12, 0.4666666666666667], [1.6830171E12, 1.0833333333333333]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68301734E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.21666666666666667, "minX": 1.68301692E12, "maxY": 254.68333333333334, "series": [{"data": [[1.68301698E12, 205.68333333333334], [1.68301728E12, 2.4166666666666665], [1.68301734E12, 5.3], [1.68301716E12, 254.68333333333334], [1.68301722E12, 205.01666666666668], [1.68301704E12, 237.53333333333333], [1.6830171E12, 248.61666666666667], [1.68301692E12, 8.983333333333333]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.68301716E12, 0.21666666666666667], [1.68301704E12, 0.4666666666666667], [1.6830171E12, 1.0833333333333333]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68301734E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

