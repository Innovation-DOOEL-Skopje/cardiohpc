/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 8.0, "minX": 0.0, "maxY": 161203.0, "series": [{"data": [[0.0, 8.0], [0.1, 21.0], [0.2, 24.0], [0.3, 25.0], [0.4, 29.0], [0.5, 31.0], [0.6, 34.0], [0.7, 37.0], [0.8, 39.0], [0.9, 41.0], [1.0, 43.0], [1.1, 45.0], [1.2, 46.0], [1.3, 47.0], [1.4, 49.0], [1.5, 52.0], [1.6, 52.0], [1.7, 53.0], [1.8, 53.0], [1.9, 53.0], [2.0, 54.0], [2.1, 55.0], [2.2, 55.0], [2.3, 56.0], [2.4, 56.0], [2.5, 57.0], [2.6, 57.0], [2.7, 57.0], [2.8, 58.0], [2.9, 58.0], [3.0, 59.0], [3.1, 60.0], [3.2, 61.0], [3.3, 61.0], [3.4, 62.0], [3.5, 63.0], [3.6, 64.0], [3.7, 64.0], [3.8, 64.0], [3.9, 65.0], [4.0, 65.0], [4.1, 65.0], [4.2, 66.0], [4.3, 66.0], [4.4, 67.0], [4.5, 69.0], [4.6, 70.0], [4.7, 70.0], [4.8, 71.0], [4.9, 71.0], [5.0, 72.0], [5.1, 73.0], [5.2, 73.0], [5.3, 74.0], [5.4, 74.0], [5.5, 75.0], [5.6, 75.0], [5.7, 76.0], [5.8, 76.0], [5.9, 77.0], [6.0, 77.0], [6.1, 77.0], [6.2, 78.0], [6.3, 78.0], [6.4, 78.0], [6.5, 79.0], [6.6, 79.0], [6.7, 79.0], [6.8, 80.0], [6.9, 80.0], [7.0, 80.0], [7.1, 81.0], [7.2, 81.0], [7.3, 81.0], [7.4, 81.0], [7.5, 82.0], [7.6, 82.0], [7.7, 83.0], [7.8, 83.0], [7.9, 83.0], [8.0, 83.0], [8.1, 84.0], [8.2, 84.0], [8.3, 84.0], [8.4, 84.0], [8.5, 84.0], [8.6, 85.0], [8.7, 85.0], [8.8, 85.0], [8.9, 86.0], [9.0, 86.0], [9.1, 86.0], [9.2, 87.0], [9.3, 87.0], [9.4, 88.0], [9.5, 88.0], [9.6, 88.0], [9.7, 88.0], [9.8, 89.0], [9.9, 89.0], [10.0, 89.0], [10.1, 89.0], [10.2, 89.0], [10.3, 89.0], [10.4, 90.0], [10.5, 90.0], [10.6, 90.0], [10.7, 90.0], [10.8, 90.0], [10.9, 91.0], [11.0, 91.0], [11.1, 91.0], [11.2, 92.0], [11.3, 92.0], [11.4, 92.0], [11.5, 92.0], [11.6, 92.0], [11.7, 93.0], [11.8, 93.0], [11.9, 93.0], [12.0, 94.0], [12.1, 94.0], [12.2, 94.0], [12.3, 94.0], [12.4, 95.0], [12.5, 95.0], [12.6, 95.0], [12.7, 95.0], [12.8, 95.0], [12.9, 96.0], [13.0, 96.0], [13.1, 96.0], [13.2, 96.0], [13.3, 96.0], [13.4, 97.0], [13.5, 97.0], [13.6, 97.0], [13.7, 97.0], [13.8, 98.0], [13.9, 98.0], [14.0, 98.0], [14.1, 98.0], [14.2, 98.0], [14.3, 98.0], [14.4, 99.0], [14.5, 99.0], [14.6, 99.0], [14.7, 99.0], [14.8, 99.0], [14.9, 99.0], [15.0, 99.0], [15.1, 100.0], [15.2, 100.0], [15.3, 100.0], [15.4, 100.0], [15.5, 100.0], [15.6, 100.0], [15.7, 100.0], [15.8, 100.0], [15.9, 100.0], [16.0, 101.0], [16.1, 101.0], [16.2, 101.0], [16.3, 101.0], [16.4, 101.0], [16.5, 101.0], [16.6, 101.0], [16.7, 101.0], [16.8, 102.0], [16.9, 102.0], [17.0, 102.0], [17.1, 102.0], [17.2, 102.0], [17.3, 102.0], [17.4, 103.0], [17.5, 103.0], [17.6, 103.0], [17.7, 103.0], [17.8, 103.0], [17.9, 103.0], [18.0, 103.0], [18.1, 103.0], [18.2, 103.0], [18.3, 103.0], [18.4, 104.0], [18.5, 104.0], [18.6, 104.0], [18.7, 104.0], [18.8, 104.0], [18.9, 104.0], [19.0, 104.0], [19.1, 104.0], [19.2, 104.0], [19.3, 104.0], [19.4, 104.0], [19.5, 104.0], [19.6, 105.0], [19.7, 105.0], [19.8, 105.0], [19.9, 105.0], [20.0, 105.0], [20.1, 105.0], [20.2, 105.0], [20.3, 105.0], [20.4, 105.0], [20.5, 105.0], [20.6, 105.0], [20.7, 106.0], [20.8, 106.0], [20.9, 106.0], [21.0, 106.0], [21.1, 106.0], [21.2, 106.0], [21.3, 106.0], [21.4, 106.0], [21.5, 106.0], [21.6, 107.0], [21.7, 107.0], [21.8, 107.0], [21.9, 107.0], [22.0, 107.0], [22.1, 107.0], [22.2, 107.0], [22.3, 108.0], [22.4, 108.0], [22.5, 108.0], [22.6, 108.0], [22.7, 108.0], [22.8, 108.0], [22.9, 108.0], [23.0, 109.0], [23.1, 109.0], [23.2, 109.0], [23.3, 109.0], [23.4, 109.0], [23.5, 109.0], [23.6, 109.0], [23.7, 109.0], [23.8, 109.0], [23.9, 109.0], [24.0, 110.0], [24.1, 110.0], [24.2, 110.0], [24.3, 110.0], [24.4, 110.0], [24.5, 110.0], [24.6, 110.0], [24.7, 110.0], [24.8, 111.0], [24.9, 111.0], [25.0, 111.0], [25.1, 111.0], [25.2, 111.0], [25.3, 111.0], [25.4, 111.0], [25.5, 111.0], [25.6, 111.0], [25.7, 112.0], [25.8, 112.0], [25.9, 112.0], [26.0, 112.0], [26.1, 112.0], [26.2, 112.0], [26.3, 113.0], [26.4, 113.0], [26.5, 113.0], [26.6, 113.0], [26.7, 113.0], [26.8, 113.0], [26.9, 113.0], [27.0, 113.0], [27.1, 113.0], [27.2, 114.0], [27.3, 114.0], [27.4, 114.0], [27.5, 114.0], [27.6, 114.0], [27.7, 114.0], [27.8, 114.0], [27.9, 115.0], [28.0, 115.0], [28.1, 115.0], [28.2, 115.0], [28.3, 115.0], [28.4, 115.0], [28.5, 116.0], [28.6, 116.0], [28.7, 116.0], [28.8, 116.0], [28.9, 116.0], [29.0, 116.0], [29.1, 116.0], [29.2, 116.0], [29.3, 117.0], [29.4, 117.0], [29.5, 117.0], [29.6, 117.0], [29.7, 117.0], [29.8, 117.0], [29.9, 117.0], [30.0, 117.0], [30.1, 117.0], [30.2, 117.0], [30.3, 118.0], [30.4, 118.0], [30.5, 118.0], [30.6, 118.0], [30.7, 118.0], [30.8, 118.0], [30.9, 118.0], [31.0, 118.0], [31.1, 118.0], [31.2, 118.0], [31.3, 119.0], [31.4, 119.0], [31.5, 119.0], [31.6, 119.0], [31.7, 119.0], [31.8, 119.0], [31.9, 119.0], [32.0, 119.0], [32.1, 120.0], [32.2, 120.0], [32.3, 120.0], [32.4, 120.0], [32.5, 120.0], [32.6, 120.0], [32.7, 120.0], [32.8, 120.0], [32.9, 120.0], [33.0, 120.0], [33.1, 120.0], [33.2, 121.0], [33.3, 121.0], [33.4, 121.0], [33.5, 121.0], [33.6, 121.0], [33.7, 121.0], [33.8, 121.0], [33.9, 121.0], [34.0, 121.0], [34.1, 121.0], [34.2, 122.0], [34.3, 122.0], [34.4, 122.0], [34.5, 122.0], [34.6, 122.0], [34.7, 122.0], [34.8, 123.0], [34.9, 123.0], [35.0, 123.0], [35.1, 123.0], [35.2, 123.0], [35.3, 124.0], [35.4, 124.0], [35.5, 124.0], [35.6, 124.0], [35.7, 124.0], [35.8, 125.0], [35.9, 125.0], [36.0, 125.0], [36.1, 125.0], [36.2, 125.0], [36.3, 125.0], [36.4, 126.0], [36.5, 126.0], [36.6, 126.0], [36.7, 126.0], [36.8, 126.0], [36.9, 126.0], [37.0, 126.0], [37.1, 127.0], [37.2, 127.0], [37.3, 127.0], [37.4, 127.0], [37.5, 127.0], [37.6, 127.0], [37.7, 128.0], [37.8, 128.0], [37.9, 128.0], [38.0, 128.0], [38.1, 128.0], [38.2, 128.0], [38.3, 129.0], [38.4, 129.0], [38.5, 129.0], [38.6, 129.0], [38.7, 129.0], [38.8, 130.0], [38.9, 130.0], [39.0, 130.0], [39.1, 131.0], [39.2, 131.0], [39.3, 131.0], [39.4, 131.0], [39.5, 132.0], [39.6, 132.0], [39.7, 132.0], [39.8, 132.0], [39.9, 133.0], [40.0, 133.0], [40.1, 133.0], [40.2, 134.0], [40.3, 134.0], [40.4, 134.0], [40.5, 134.0], [40.6, 135.0], [40.7, 135.0], [40.8, 136.0], [40.9, 136.0], [41.0, 137.0], [41.1, 137.0], [41.2, 138.0], [41.3, 138.0], [41.4, 139.0], [41.5, 139.0], [41.6, 139.0], [41.7, 140.0], [41.8, 140.0], [41.9, 141.0], [42.0, 142.0], [42.1, 143.0], [42.2, 143.0], [42.3, 144.0], [42.4, 144.0], [42.5, 145.0], [42.6, 145.0], [42.7, 146.0], [42.8, 146.0], [42.9, 147.0], [43.0, 147.0], [43.1, 148.0], [43.2, 149.0], [43.3, 151.0], [43.4, 155.0], [43.5, 156.0], [43.6, 157.0], [43.7, 157.0], [43.8, 158.0], [43.9, 159.0], [44.0, 160.0], [44.1, 160.0], [44.2, 161.0], [44.3, 162.0], [44.4, 163.0], [44.5, 164.0], [44.6, 165.0], [44.7, 166.0], [44.8, 169.0], [44.9, 170.0], [45.0, 171.0], [45.1, 172.0], [45.2, 172.0], [45.3, 173.0], [45.4, 173.0], [45.5, 174.0], [45.6, 175.0], [45.7, 177.0], [45.8, 178.0], [45.9, 178.0], [46.0, 179.0], [46.1, 179.0], [46.2, 180.0], [46.3, 181.0], [46.4, 181.0], [46.5, 182.0], [46.6, 182.0], [46.7, 183.0], [46.8, 184.0], [46.9, 185.0], [47.0, 186.0], [47.1, 187.0], [47.2, 187.0], [47.3, 188.0], [47.4, 189.0], [47.5, 189.0], [47.6, 190.0], [47.7, 191.0], [47.8, 192.0], [47.9, 195.0], [48.0, 196.0], [48.1, 196.0], [48.2, 197.0], [48.3, 197.0], [48.4, 198.0], [48.5, 198.0], [48.6, 199.0], [48.7, 199.0], [48.8, 199.0], [48.9, 200.0], [49.0, 200.0], [49.1, 201.0], [49.2, 202.0], [49.3, 207.0], [49.4, 210.0], [49.5, 212.0], [49.6, 216.0], [49.7, 217.0], [49.8, 218.0], [49.9, 220.0], [50.0, 222.0], [50.1, 231.0], [50.2, 232.0], [50.3, 236.0], [50.4, 238.0], [50.5, 242.0], [50.6, 257.0], [50.7, 263.0], [50.8, 278.0], [50.9, 355.0], [51.0, 416.0], [51.1, 521.0], [51.2, 623.0], [51.3, 671.0], [51.4, 805.0], [51.5, 822.0], [51.6, 847.0], [51.7, 876.0], [51.8, 913.0], [51.9, 965.0], [52.0, 981.0], [52.1, 1034.0], [52.2, 1116.0], [52.3, 1177.0], [52.4, 1225.0], [52.5, 1267.0], [52.6, 1292.0], [52.7, 1366.0], [52.8, 1475.0], [52.9, 1515.0], [53.0, 1527.0], [53.1, 1630.0], [53.2, 1675.0], [53.3, 1703.0], [53.4, 1732.0], [53.5, 1780.0], [53.6, 1815.0], [53.7, 1852.0], [53.8, 1871.0], [53.9, 1946.0], [54.0, 2029.0], [54.1, 2099.0], [54.2, 2153.0], [54.3, 2162.0], [54.4, 2169.0], [54.5, 2176.0], [54.6, 2223.0], [54.7, 2252.0], [54.8, 2306.0], [54.9, 2395.0], [55.0, 2503.0], [55.1, 2602.0], [55.2, 2701.0], [55.3, 2731.0], [55.4, 2751.0], [55.5, 2778.0], [55.6, 2789.0], [55.7, 2823.0], [55.8, 2846.0], [55.9, 2897.0], [56.0, 2921.0], [56.1, 3006.0], [56.2, 3038.0], [56.3, 3105.0], [56.4, 3140.0], [56.5, 3241.0], [56.6, 3291.0], [56.7, 3506.0], [56.8, 3592.0], [56.9, 3686.0], [57.0, 3718.0], [57.1, 3868.0], [57.2, 4028.0], [57.3, 4083.0], [57.4, 4142.0], [57.5, 4202.0], [57.6, 4242.0], [57.7, 4292.0], [57.8, 4311.0], [57.9, 4481.0], [58.0, 4700.0], [58.1, 4787.0], [58.2, 4799.0], [58.3, 4805.0], [58.4, 4855.0], [58.5, 5036.0], [58.6, 5103.0], [58.7, 5133.0], [58.8, 5249.0], [58.9, 5526.0], [59.0, 5627.0], [59.1, 5706.0], [59.2, 5715.0], [59.3, 5717.0], [59.4, 5905.0], [59.5, 5930.0], [59.6, 5934.0], [59.7, 5938.0], [59.8, 5941.0], [59.9, 5952.0], [60.0, 5955.0], [60.1, 6024.0], [60.2, 6085.0], [60.3, 6199.0], [60.4, 6202.0], [60.5, 6233.0], [60.6, 6296.0], [60.7, 6466.0], [60.8, 6520.0], [60.9, 6579.0], [61.0, 6588.0], [61.1, 6609.0], [61.2, 6647.0], [61.3, 6687.0], [61.4, 6706.0], [61.5, 6725.0], [61.6, 6742.0], [61.7, 6764.0], [61.8, 6771.0], [61.9, 6773.0], [62.0, 6806.0], [62.1, 6858.0], [62.2, 6922.0], [62.3, 6936.0], [62.4, 6937.0], [62.5, 6939.0], [62.6, 6949.0], [62.7, 6951.0], [62.8, 6968.0], [62.9, 6975.0], [63.0, 7031.0], [63.1, 7067.0], [63.2, 7111.0], [63.3, 7126.0], [63.4, 7128.0], [63.5, 7146.0], [63.6, 7167.0], [63.7, 7180.0], [63.8, 7241.0], [63.9, 7247.0], [64.0, 7366.0], [64.1, 7490.0], [64.2, 7491.0], [64.3, 7499.0], [64.4, 7512.0], [64.5, 7538.0], [64.6, 7539.0], [64.7, 7542.0], [64.8, 7590.0], [64.9, 7613.0], [65.0, 7702.0], [65.1, 7744.0], [65.2, 7803.0], [65.3, 7878.0], [65.4, 7968.0], [65.5, 8008.0], [65.6, 8038.0], [65.7, 8092.0], [65.8, 8125.0], [65.9, 8196.0], [66.0, 8281.0], [66.1, 8361.0], [66.2, 8375.0], [66.3, 8379.0], [66.4, 8411.0], [66.5, 8412.0], [66.6, 8419.0], [66.7, 8433.0], [66.8, 8439.0], [66.9, 8512.0], [67.0, 8539.0], [67.1, 8549.0], [67.2, 8565.0], [67.3, 8596.0], [67.4, 8613.0], [67.5, 8645.0], [67.6, 8662.0], [67.7, 8741.0], [67.8, 8791.0], [67.9, 8803.0], [68.0, 8840.0], [68.1, 8842.0], [68.2, 8892.0], [68.3, 8973.0], [68.4, 9002.0], [68.5, 9038.0], [68.6, 9039.0], [68.7, 9055.0], [68.8, 9067.0], [68.9, 9095.0], [69.0, 9126.0], [69.1, 9180.0], [69.2, 9195.0], [69.3, 9209.0], [69.4, 9226.0], [69.5, 9230.0], [69.6, 9232.0], [69.7, 9245.0], [69.8, 9249.0], [69.9, 9264.0], [70.0, 9280.0], [70.1, 9292.0], [70.2, 9344.0], [70.3, 9345.0], [70.4, 9346.0], [70.5, 9438.0], [70.6, 9465.0], [70.7, 9515.0], [70.8, 9530.0], [70.9, 9543.0], [71.0, 9573.0], [71.1, 9618.0], [71.2, 9679.0], [71.3, 9686.0], [71.4, 9703.0], [71.5, 9717.0], [71.6, 9723.0], [71.7, 9727.0], [71.8, 9740.0], [71.9, 9750.0], [72.0, 9766.0], [72.1, 9784.0], [72.2, 9792.0], [72.3, 9803.0], [72.4, 9809.0], [72.5, 9825.0], [72.6, 9871.0], [72.7, 9874.0], [72.8, 9894.0], [72.9, 9924.0], [73.0, 9946.0], [73.1, 9963.0], [73.2, 9979.0], [73.3, 10002.0], [73.4, 10021.0], [73.5, 10030.0], [73.6, 10052.0], [73.7, 10083.0], [73.8, 10087.0], [73.9, 10095.0], [74.0, 10123.0], [74.1, 10158.0], [74.2, 10201.0], [74.3, 10248.0], [74.4, 10265.0], [74.5, 10268.0], [74.6, 10292.0], [74.7, 10304.0], [74.8, 10372.0], [74.9, 10417.0], [75.0, 10430.0], [75.1, 10433.0], [75.2, 10465.0], [75.3, 10488.0], [75.4, 10491.0], [75.5, 10503.0], [75.6, 10505.0], [75.7, 10511.0], [75.8, 10529.0], [75.9, 10554.0], [76.0, 10599.0], [76.1, 10661.0], [76.2, 10685.0], [76.3, 10706.0], [76.4, 10711.0], [76.5, 10713.0], [76.6, 10724.0], [76.7, 10738.0], [76.8, 10795.0], [76.9, 10815.0], [77.0, 10822.0], [77.1, 10864.0], [77.2, 10912.0], [77.3, 10931.0], [77.4, 10964.0], [77.5, 10987.0], [77.6, 11014.0], [77.7, 11039.0], [77.8, 11055.0], [77.9, 11098.0], [78.0, 11132.0], [78.1, 11134.0], [78.2, 11158.0], [78.3, 11195.0], [78.4, 11212.0], [78.5, 11240.0], [78.6, 11244.0], [78.7, 11279.0], [78.8, 11318.0], [78.9, 11319.0], [79.0, 11320.0], [79.1, 11338.0], [79.2, 11353.0], [79.3, 11361.0], [79.4, 11409.0], [79.5, 11511.0], [79.6, 11516.0], [79.7, 11691.0], [79.8, 11733.0], [79.9, 11741.0], [80.0, 11790.0], [80.1, 11809.0], [80.2, 11845.0], [80.3, 11870.0], [80.4, 11904.0], [80.5, 11905.0], [80.6, 11930.0], [80.7, 11978.0], [80.8, 11981.0], [80.9, 11999.0], [81.0, 12064.0], [81.1, 12096.0], [81.2, 12159.0], [81.3, 12195.0], [81.4, 12197.0], [81.5, 12210.0], [81.6, 12227.0], [81.7, 12240.0], [81.8, 12283.0], [81.9, 12320.0], [82.0, 12352.0], [82.1, 12358.0], [82.2, 12375.0], [82.3, 12377.0], [82.4, 12384.0], [82.5, 12388.0], [82.6, 12416.0], [82.7, 12478.0], [82.8, 12575.0], [82.9, 12588.0], [83.0, 12605.0], [83.1, 12633.0], [83.2, 12657.0], [83.3, 12664.0], [83.4, 12665.0], [83.5, 12674.0], [83.6, 12701.0], [83.7, 12717.0], [83.8, 12754.0], [83.9, 12788.0], [84.0, 12855.0], [84.1, 12891.0], [84.2, 12956.0], [84.3, 13026.0], [84.4, 13044.0], [84.5, 13110.0], [84.6, 13122.0], [84.7, 13125.0], [84.8, 13126.0], [84.9, 13128.0], [85.0, 13148.0], [85.1, 13179.0], [85.2, 13181.0], [85.3, 13249.0], [85.4, 13258.0], [85.5, 13312.0], [85.6, 13394.0], [85.7, 13423.0], [85.8, 13507.0], [85.9, 13514.0], [86.0, 13568.0], [86.1, 13633.0], [86.2, 13703.0], [86.3, 13736.0], [86.4, 13822.0], [86.5, 13849.0], [86.6, 13877.0], [86.7, 13925.0], [86.8, 14046.0], [86.9, 14128.0], [87.0, 14135.0], [87.1, 14195.0], [87.2, 14240.0], [87.3, 14308.0], [87.4, 14331.0], [87.5, 14390.0], [87.6, 14453.0], [87.7, 14521.0], [87.8, 14609.0], [87.9, 14632.0], [88.0, 14702.0], [88.1, 14740.0], [88.2, 14917.0], [88.3, 14922.0], [88.4, 14968.0], [88.5, 14987.0], [88.6, 14993.0], [88.7, 15016.0], [88.8, 15052.0], [88.9, 15089.0], [89.0, 15147.0], [89.1, 15208.0], [89.2, 15243.0], [89.3, 15309.0], [89.4, 15315.0], [89.5, 15369.0], [89.6, 15414.0], [89.7, 15484.0], [89.8, 15703.0], [89.9, 15718.0], [90.0, 15768.0], [90.1, 15835.0], [90.2, 16023.0], [90.3, 16215.0], [90.4, 16250.0], [90.5, 16393.0], [90.6, 16441.0], [90.7, 16475.0], [90.8, 16533.0], [90.9, 16641.0], [91.0, 16738.0], [91.1, 16858.0], [91.2, 16927.0], [91.3, 17124.0], [91.4, 17487.0], [91.5, 17830.0], [91.6, 18060.0], [91.7, 18426.0], [91.8, 18431.0], [91.9, 18478.0], [92.0, 18622.0], [92.1, 18812.0], [92.2, 18945.0], [92.3, 19081.0], [92.4, 20069.0], [92.5, 20593.0], [92.6, 21179.0], [92.7, 22772.0], [92.8, 23103.0], [92.9, 23533.0], [93.0, 23638.0], [93.1, 24018.0], [93.2, 24783.0], [93.3, 24913.0], [93.4, 25001.0], [93.5, 25717.0], [93.6, 25832.0], [93.7, 26010.0], [93.8, 28239.0], [93.9, 28899.0], [94.0, 30183.0], [94.1, 30224.0], [94.2, 30383.0], [94.3, 30549.0], [94.4, 32185.0], [94.5, 33409.0], [94.6, 35515.0], [94.7, 36338.0], [94.8, 37850.0], [94.9, 39427.0], [95.0, 39650.0], [95.1, 39836.0], [95.2, 39964.0], [95.3, 42176.0], [95.4, 45108.0], [95.5, 46088.0], [95.6, 46717.0], [95.7, 48578.0], [95.8, 50477.0], [95.9, 50903.0], [96.0, 52298.0], [96.1, 56830.0], [96.2, 61628.0], [96.3, 63763.0], [96.4, 63860.0], [96.5, 64911.0], [96.6, 65230.0], [96.7, 65831.0], [96.8, 66159.0], [96.9, 67391.0], [97.0, 71112.0], [97.1, 72037.0], [97.2, 75740.0], [97.3, 77080.0], [97.4, 77087.0], [97.5, 77913.0], [97.6, 79506.0], [97.7, 79858.0], [97.8, 83787.0], [97.9, 94947.0], [98.0, 100015.0], [98.1, 100035.0], [98.2, 100058.0], [98.3, 100080.0], [98.4, 100087.0], [98.5, 100105.0], [98.6, 100110.0], [98.7, 100115.0], [98.8, 100136.0], [98.9, 100152.0], [99.0, 100189.0], [99.1, 100219.0], [99.2, 115244.0], [99.3, 127455.0], [99.4, 128044.0], [99.5, 128688.0], [99.6, 129770.0], [99.7, 129876.0], [99.8, 131574.0], [99.9, 132113.0], [100.0, 161203.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 16919.0, "series": [{"data": [[0.0, 7542.0], [132000.0, 33.0], [68300.0, 1.0], [73100.0, 2.0], [77900.0, 2.0], [79500.0, 26.0], [82700.0, 2.0], [84300.0, 1.0], [93900.0, 2.0], [98700.0, 1.0], [129100.0, 1.0], [100.0, 16919.0], [131500.0, 15.0], [32900.0, 2.0], [141100.0, 1.0], [36100.0, 7.0], [36900.0, 5.0], [37700.0, 2.0], [40100.0, 3.0], [42500.0, 3.0], [41700.0, 1.0], [44900.0, 2.0], [44100.0, 3.0], [45700.0, 8.0], [46500.0, 9.0], [47300.0, 9.0], [48900.0, 13.0], [48100.0, 1.0], [49700.0, 2.0], [50500.0, 2.0], [200.0, 1026.0], [51300.0, 5.0], [53700.0, 2.0], [54500.0, 2.0], [56100.0, 2.0], [58500.0, 3.0], [60900.0, 3.0], [61700.0, 2.0], [63300.0, 3.0], [64900.0, 45.0], [65800.0, 12.0], [67400.0, 2.0], [69000.0, 1.0], [72200.0, 5.0], [70600.0, 1.0], [300.0, 61.0], [77000.0, 86.0], [75400.0, 1.0], [78600.0, 7.0], [88200.0, 2.0], [96200.0, 2.0], [99400.0, 1.0], [400.0, 25.0], [500.0, 59.0], [129800.0, 39.0], [142000.0, 1.0], [600.0, 89.0], [161200.0, 1.0], [700.0, 25.0], [800.0, 195.0], [900.0, 157.0], [1000.0, 33.0], [1100.0, 107.0], [1200.0, 149.0], [1300.0, 41.0], [1400.0, 56.0], [1500.0, 103.0], [1600.0, 117.0], [1700.0, 144.0], [1800.0, 111.0], [1900.0, 80.0], [2000.0, 67.0], [2100.0, 210.0], [2200.0, 134.0], [2300.0, 56.0], [2400.0, 45.0], [2500.0, 54.0], [2600.0, 49.0], [2700.0, 215.0], [2800.0, 146.0], [2900.0, 90.0], [3000.0, 89.0], [3100.0, 85.0], [3200.0, 83.0], [3300.0, 13.0], [3400.0, 30.0], [3500.0, 67.0], [3600.0, 60.0], [3700.0, 61.0], [3800.0, 43.0], [3900.0, 12.0], [4000.0, 66.0], [4200.0, 119.0], [66500.0, 4.0], [4300.0, 76.0], [4100.0, 89.0], [4400.0, 18.0], [71300.0, 19.0], [4500.0, 13.0], [4600.0, 30.0], [4800.0, 125.0], [77700.0, 4.0], [4700.0, 115.0], [5000.0, 35.0], [5100.0, 110.0], [4900.0, 4.0], [80900.0, 1.0], [5200.0, 22.0], [5300.0, 11.0], [85700.0, 1.0], [5400.0, 18.0], [5600.0, 59.0], [5500.0, 45.0], [87300.0, 1.0], [5700.0, 132.0], [5800.0, 22.0], [5900.0, 348.0], [6000.0, 78.0], [6100.0, 33.0], [96900.0, 2.0], [95300.0, 1.0], [100100.0, 306.0], [6200.0, 149.0], [6300.0, 39.0], [6500.0, 176.0], [6600.0, 141.0], [6400.0, 16.0], [6700.0, 319.0], [6900.0, 394.0], [6800.0, 79.0], [7000.0, 114.0], [7100.0, 298.0], [7300.0, 35.0], [7400.0, 142.0], [7200.0, 108.0], [7500.0, 263.0], [7600.0, 76.0], [7700.0, 98.0], [7800.0, 71.0], [7900.0, 59.0], [8100.0, 100.0], [8000.0, 131.0], [8400.0, 267.0], [8600.0, 193.0], [8200.0, 66.0], [9200.0, 431.0], [8800.0, 189.0], [9000.0, 279.0], [143800.0, 1.0], [9600.0, 148.0], [9400.0, 113.0], [9800.0, 287.0], [10000.0, 317.0], [10200.0, 247.0], [10400.0, 293.0], [10600.0, 125.0], [11200.0, 187.0], [11000.0, 190.0], [10800.0, 186.0], [11400.0, 53.0], [11600.0, 49.0], [12000.0, 113.0], [12200.0, 221.0], [11800.0, 157.0], [12400.0, 72.0], [12600.0, 313.0], [13000.0, 111.0], [13200.0, 126.0], [12800.0, 88.0], [13600.0, 65.0], [13800.0, 139.0], [13400.0, 58.0], [14000.0, 40.0], [14200.0, 86.0], [14800.0, 28.0], [14600.0, 103.0], [14400.0, 86.0], [15000.0, 125.0], [15200.0, 70.0], [15800.0, 47.0], [15600.0, 18.0], [15400.0, 76.0], [16000.0, 28.0], [16200.0, 68.0], [16400.0, 124.0], [16800.0, 59.0], [17200.0, 25.0], [18400.0, 133.0], [17600.0, 8.0], [18000.0, 14.0], [18800.0, 30.0], [19200.0, 25.0], [20000.0, 2.0], [20400.0, 5.0], [21200.0, 11.0], [20800.0, 2.0], [22400.0, 2.0], [22800.0, 16.0], [24000.0, 10.0], [23600.0, 44.0], [24400.0, 1.0], [24800.0, 37.0], [25200.0, 5.0], [26400.0, 1.0], [26000.0, 2.0], [26800.0, 2.0], [28400.0, 4.0], [28000.0, 4.0], [29600.0, 2.0], [28800.0, 1.0], [30400.0, 9.0], [32000.0, 10.0], [32400.0, 5.0], [32800.0, 1.0], [34400.0, 2.0], [33600.0, 1.0], [131900.0, 1.0], [35200.0, 2.0], [36000.0, 9.0], [40000.0, 7.0], [39200.0, 9.0], [41600.0, 2.0], [42400.0, 1.0], [44800.0, 1.0], [44000.0, 1.0], [45600.0, 6.0], [46400.0, 8.0], [50400.0, 14.0], [51200.0, 9.0], [52800.0, 1.0], [54400.0, 1.0], [56800.0, 8.0], [57600.0, 2.0], [61600.0, 4.0], [64800.0, 5.0], [64000.0, 1.0], [67200.0, 2.0], [65600.0, 2.0], [72000.0, 2.0], [73600.0, 1.0], [75200.0, 1.0], [80000.0, 7.0], [84800.0, 1.0], [92800.0, 2.0], [97600.0, 1.0], [115200.0, 17.0], [128000.0, 38.0], [134400.0, 1.0], [131200.0, 1.0], [132100.0, 11.0], [70300.0, 1.0], [73500.0, 11.0], [75100.0, 2.0], [84700.0, 1.0], [83100.0, 2.0], [86300.0, 1.0], [92700.0, 2.0], [95900.0, 2.0], [127900.0, 2.0], [33100.0, 15.0], [33900.0, 2.0], [36300.0, 27.0], [35500.0, 4.0], [37900.0, 2.0], [39500.0, 10.0], [42700.0, 3.0], [41100.0, 1.0], [43500.0, 4.0], [44300.0, 1.0], [46700.0, 2.0], [45100.0, 5.0], [45900.0, 5.0], [47500.0, 1.0], [48300.0, 1.0], [50700.0, 5.0], [52300.0, 2.0], [51500.0, 4.0], [53900.0, 2.0], [55500.0, 2.0], [60300.0, 2.0], [59500.0, 2.0], [61900.0, 3.0], [65100.0, 3.0], [64300.0, 14.0], [67800.0, 3.0], [69400.0, 1.0], [83800.0, 2.0], [85400.0, 3.0], [96600.0, 1.0], [115800.0, 3.0], [128600.0, 28.0], [130200.0, 8.0], [131600.0, 8.0], [68500.0, 1.0], [74900.0, 6.0], [79700.0, 23.0], [78100.0, 2.0], [86100.0, 2.0], [87700.0, 1.0], [98900.0, 2.0], [127700.0, 1.0], [136600.0, 1.0], [16500.0, 50.0], [17300.0, 5.0], [16900.0, 16.0], [17700.0, 29.0], [18500.0, 24.0], [18900.0, 56.0], [19300.0, 14.0], [19700.0, 1.0], [21300.0, 11.0], [20500.0, 26.0], [20900.0, 6.0], [21700.0, 2.0], [22900.0, 21.0], [23300.0, 3.0], [23700.0, 7.0], [24500.0, 2.0], [24100.0, 1.0], [24900.0, 48.0], [25300.0, 2.0], [25700.0, 55.0], [26500.0, 2.0], [26100.0, 7.0], [27300.0, 3.0], [28500.0, 3.0], [28900.0, 2.0], [30500.0, 35.0], [30100.0, 46.0], [31300.0, 2.0], [30900.0, 2.0], [32100.0, 6.0], [33000.0, 8.0], [33800.0, 2.0], [34600.0, 2.0], [131100.0, 8.0], [134300.0, 8.0], [35400.0, 11.0], [36200.0, 1.0], [37800.0, 4.0], [37000.0, 1.0], [39400.0, 30.0], [41800.0, 2.0], [41000.0, 2.0], [43400.0, 3.0], [44200.0, 1.0], [45800.0, 4.0], [47400.0, 9.0], [49000.0, 1.0], [50600.0, 2.0], [52200.0, 8.0], [53000.0, 2.0], [51400.0, 12.0], [54600.0, 2.0], [58600.0, 1.0], [59400.0, 2.0], [62600.0, 2.0], [64200.0, 1.0], [65000.0, 2.0], [69200.0, 2.0], [67600.0, 2.0], [66000.0, 2.0], [72400.0, 1.0], [77200.0, 14.0], [78800.0, 5.0], [85200.0, 2.0], [91600.0, 2.0], [96400.0, 1.0], [128400.0, 1.0], [130000.0, 2.0], [133600.0, 1.0], [134500.0, 2.0], [65900.0, 1.0], [67500.0, 1.0], [70700.0, 5.0], [77100.0, 4.0], [75500.0, 1.0], [78700.0, 12.0], [86700.0, 2.0], [97900.0, 2.0], [128300.0, 5.0], [129900.0, 1.0], [132200.0, 22.0], [33300.0, 3.0], [35700.0, 19.0], [36500.0, 2.0], [34900.0, 2.0], [38900.0, 5.0], [37300.0, 4.0], [39700.0, 20.0], [40500.0, 8.0], [42100.0, 15.0], [44500.0, 3.0], [43700.0, 1.0], [45300.0, 4.0], [46900.0, 2.0], [47700.0, 5.0], [48500.0, 15.0], [50100.0, 1.0], [50900.0, 18.0], [52500.0, 2.0], [54100.0, 2.0], [54900.0, 2.0], [53300.0, 1.0], [56500.0, 2.0], [63700.0, 25.0], [65300.0, 1.0], [66600.0, 3.0], [74600.0, 2.0], [76200.0, 2.0], [81000.0, 1.0], [79400.0, 4.0], [84200.0, 2.0], [89000.0, 2.0], [93800.0, 2.0], [95400.0, 1.0], [98600.0, 2.0], [100200.0, 44.0], [127400.0, 38.0], [130600.0, 1.0], [65700.0, 36.0], [67300.0, 32.0], [76900.0, 11.0], [81700.0, 3.0], [80100.0, 24.0], [89700.0, 2.0], [92900.0, 1.0], [97700.0, 1.0], [105700.0, 9.0], [128100.0, 6.0], [129700.0, 20.0], [8500.0, 217.0], [8300.0, 148.0], [8700.0, 67.0], [9100.0, 153.0], [8900.0, 94.0], [9500.0, 199.0], [9700.0, 443.0], [9300.0, 175.0], [9900.0, 227.0], [10100.0, 135.0], [10500.0, 294.0], [10300.0, 72.0], [10700.0, 285.0], [10900.0, 167.0], [11100.0, 234.0], [11500.0, 69.0], [11300.0, 314.0], [11700.0, 182.0], [12100.0, 159.0], [11900.0, 257.0], [12300.0, 344.0], [12500.0, 127.0], [12700.0, 172.0], [12900.0, 68.0], [13300.0, 71.0], [13100.0, 384.0], [13500.0, 161.0], [13700.0, 85.0], [13900.0, 67.0], [14100.0, 124.0], [14300.0, 119.0], [14700.0, 67.0], [14500.0, 48.0], [15100.0, 83.0], [14900.0, 250.0], [15300.0, 160.0], [15700.0, 143.0], [15500.0, 18.0], [16300.0, 51.0], [15900.0, 18.0], [16100.0, 20.0], [16600.0, 58.0], [17000.0, 39.0], [17400.0, 7.0], [17800.0, 40.0], [18200.0, 3.0], [19000.0, 27.0], [18600.0, 51.0], [20200.0, 4.0], [19800.0, 3.0], [21000.0, 2.0], [20600.0, 14.0], [22200.0, 5.0], [21800.0, 2.0], [22600.0, 2.0], [23400.0, 5.0], [23000.0, 4.0], [23800.0, 15.0], [24200.0, 11.0], [24600.0, 4.0], [25400.0, 3.0], [25000.0, 23.0], [25800.0, 38.0], [27400.0, 2.0], [28200.0, 44.0], [27800.0, 4.0], [30200.0, 82.0], [30600.0, 1.0], [31800.0, 8.0], [32200.0, 3.0], [33200.0, 1.0], [34800.0, 2.0], [34000.0, 1.0], [36400.0, 5.0], [35600.0, 2.0], [37200.0, 3.0], [38000.0, 1.0], [38800.0, 3.0], [39600.0, 36.0], [42000.0, 2.0], [44400.0, 2.0], [46000.0, 12.0], [47600.0, 2.0], [48400.0, 1.0], [50000.0, 9.0], [50800.0, 12.0], [53200.0, 2.0], [51600.0, 2.0], [54000.0, 1.0], [57200.0, 2.0], [59600.0, 5.0], [64400.0, 4.0], [65200.0, 4.0], [63600.0, 3.0], [66400.0, 2.0], [71200.0, 22.0], [72800.0, 2.0], [77600.0, 1.0], [74400.0, 1.0], [79200.0, 2.0], [80800.0, 2.0], [100000.0, 253.0], [98400.0, 1.0], [66300.0, 1.0], [69500.0, 1.0], [67900.0, 1.0], [71100.0, 12.0], [72700.0, 1.0], [75900.0, 2.0], [80700.0, 4.0], [79100.0, 2.0], [83900.0, 1.0], [87100.0, 2.0], [99900.0, 2.0], [115900.0, 23.0], [128700.0, 19.0], [130300.0, 12.0], [131400.0, 1.0], [33500.0, 1.0], [35900.0, 5.0], [38300.0, 18.0], [40700.0, 2.0], [39100.0, 7.0], [39900.0, 45.0], [42300.0, 3.0], [41500.0, 1.0], [44700.0, 3.0], [46300.0, 2.0], [45500.0, 7.0], [47100.0, 1.0], [47900.0, 1.0], [51100.0, 3.0], [49500.0, 2.0], [51900.0, 8.0], [54300.0, 3.0], [55100.0, 2.0], [53500.0, 2.0], [57500.0, 2.0], [59900.0, 14.0], [63100.0, 5.0], [63900.0, 2.0], [64700.0, 8.0], [67000.0, 4.0], [68600.0, 1.0], [70200.0, 2.0], [73400.0, 1.0], [78200.0, 2.0], [79800.0, 12.0], [86200.0, 1.0], [95800.0, 1.0], [131000.0, 3.0], [129400.0, 1.0], [133200.0, 1.0], [142800.0, 1.0], [66100.0, 51.0], [72500.0, 3.0], [75700.0, 10.0], [77300.0, 22.0], [80500.0, 1.0], [83700.0, 2.0], [85300.0, 3.0], [94900.0, 4.0], [99700.0, 1.0], [115700.0, 7.0], [130100.0, 2.0], [16700.0, 43.0], [17100.0, 17.0], [18300.0, 15.0], [17900.0, 13.0], [18700.0, 6.0], [19100.0, 3.0], [19500.0, 3.0], [20300.0, 25.0], [20700.0, 13.0], [21500.0, 4.0], [21100.0, 5.0], [21900.0, 4.0], [22700.0, 12.0], [23100.0, 3.0], [23500.0, 70.0], [23900.0, 2.0], [24300.0, 19.0], [25500.0, 2.0], [24700.0, 8.0], [25100.0, 7.0], [25900.0, 26.0], [28300.0, 11.0], [27900.0, 9.0], [28700.0, 2.0], [29100.0, 4.0], [30300.0, 29.0], [30700.0, 2.0], [29900.0, 2.0], [31900.0, 13.0], [32700.0, 3.0], [32300.0, 3.0], [33400.0, 4.0], [34200.0, 17.0], [35800.0, 2.0], [37400.0, 2.0], [39800.0, 23.0], [41400.0, 1.0], [43000.0, 1.0], [43800.0, 4.0], [46200.0, 28.0], [45400.0, 5.0], [47000.0, 3.0], [47800.0, 2.0], [50200.0, 2.0], [49400.0, 13.0], [52600.0, 1.0], [54200.0, 2.0], [55800.0, 1.0], [56600.0, 8.0], [57400.0, 2.0], [60600.0, 2.0], [62200.0, 1.0], [63000.0, 16.0], [63800.0, 46.0], [65400.0, 2.0], [64600.0, 2.0], [66800.0, 12.0], [68400.0, 2.0], [71600.0, 2.0], [74800.0, 1.0], [78000.0, 1.0], [79600.0, 1.0], [82800.0, 2.0], [89200.0, 2.0], [97200.0, 2.0], [95600.0, 1.0], [129200.0, 14.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 161200.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 63.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 25573.0, "series": [{"data": [[0.0, 25573.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 917.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 23549.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 63.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 168.61561561561558, "minX": 1.6828986E12, "maxY": 3000.0, "series": [{"data": [[1.68289872E12, 3000.0], [1.6828989E12, 2417.575039184953], [1.6828986E12, 3000.0], [1.68289878E12, 3000.0], [1.68289896E12, 433.19696969696963], [1.68289866E12, 3000.0], [1.68289884E12, 3000.0], [1.68289902E12, 168.61561561561558]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68289902E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 29.0, "minX": 1.0, "maxY": 100222.0, "series": [{"data": [[2.0, 100163.0], [3.0, 100162.0], [5.0, 100160.0], [6.0, 100161.0], [10.0, 100152.75], [11.0, 100152.0], [15.0, 100150.5], [16.0, 100149.0], [19.0, 100149.66666666667], [20.0, 100150.0], [21.0, 100146.0], [22.0, 100132.0], [23.0, 100083.0], [27.0, 100079.0], [28.0, 100079.0], [29.0, 100079.0], [30.0, 100079.0], [31.0, 100075.0], [34.0, 100075.0], [38.0, 100075.0], [41.0, 100074.0], [40.0, 100074.0], [43.0, 100061.0], [45.0, 100060.0], [46.0, 100043.0], [48.0, 100039.5], [51.0, 100027.0], [50.0, 100033.0], [52.0, 99711.0], [55.0, 100116.66666666667], [56.0, 100116.0], [59.0, 100113.0], [58.0, 100114.0], [61.0, 100054.0], [60.0, 100081.0], [63.0, 100051.0], [62.0, 100052.0], [65.0, 100049.5], [71.0, 100047.0], [69.0, 100048.0], [68.0, 100049.0], [72.0, 100046.0], [79.0, 100040.0], [78.0, 100042.0], [76.0, 100045.25], [83.0, 100036.33333333333], [80.0, 100039.0], [86.0, 100035.0], [85.0, 100036.0], [91.0, 100034.0], [90.0, 100034.0], [89.0, 100035.0], [88.0, 100036.0], [95.0, 100031.0], [94.0, 100033.0], [98.0, 100028.0], [97.0, 100030.5], [107.0, 100023.0], [111.0, 100023.0], [110.0, 100023.0], [109.0, 100023.0], [108.0, 100023.0], [115.0, 100021.0], [114.0, 100021.0], [113.0, 100021.0], [119.0, 100019.0], [118.0, 100020.5], [117.0, 100020.0], [116.0, 100021.0], [121.0, 100019.0], [120.0, 100019.0], [127.0, 100112.0], [126.0, 100111.5], [131.0, 100111.0], [129.0, 100110.66666666667], [128.0, 100110.5], [143.0, 100107.0], [140.0, 100107.0], [139.0, 100109.0], [138.0, 100110.0], [136.0, 100110.0], [151.0, 100105.0], [150.0, 100105.0], [149.0, 100105.0], [147.0, 100106.0], [145.0, 100106.0], [144.0, 100106.0], [158.0, 100100.0], [157.0, 100100.0], [156.0, 100101.0], [155.0, 100102.0], [154.0, 100102.0], [153.0, 100105.0], [152.0, 100105.5], [166.0, 100096.0], [165.0, 100095.5], [163.0, 100096.0], [162.0, 100095.0], [161.0, 100097.0], [160.0, 100099.0], [174.0, 99438.0], [173.0, 98703.0], [172.0, 100083.0], [170.0, 100087.5], [168.0, 100094.0], [183.0, 100222.0], [182.0, 100221.5], [181.0, 100222.0], [177.0, 100221.5], [190.0, 100221.0], [189.0, 100220.0], [188.0, 100221.0], [187.0, 100222.0], [186.0, 100221.0], [195.0, 100220.0], [193.0, 100220.0], [192.0, 100220.66666666667], [207.0, 100212.0], [206.0, 100218.0], [205.0, 100219.2], [204.0, 100221.0], [203.0, 100219.5], [202.0, 100219.0], [200.0, 100221.0], [214.0, 100200.0], [213.0, 100205.0], [212.0, 100208.0], [210.0, 100208.0], [208.0, 100210.0], [223.0, 100198.0], [218.0, 100200.0], [217.0, 100201.33333333333], [231.0, 100197.0], [228.0, 100197.66666666667], [227.0, 100199.0], [225.0, 100199.0], [224.0, 100199.0], [239.0, 100196.66666666667], [236.0, 100196.33333333333], [235.0, 100198.0], [233.0, 100198.0], [247.0, 100190.0], [245.0, 100190.0], [243.0, 100192.0], [242.0, 100194.0], [241.0, 100194.5], [255.0, 100189.0], [254.0, 100189.5], [251.0, 100190.0], [249.0, 100190.0], [271.0, 100175.0], [270.0, 100187.0], [269.0, 100186.75], [262.0, 100187.0], [261.0, 100188.16666666667], [259.0, 100189.0], [287.0, 100154.0], [285.0, 100155.0], [283.0, 100157.0], [281.0, 100166.25], [277.0, 100172.0], [274.0, 100174.0], [296.0, 100160.0], [292.0, 100141.0], [290.0, 100142.0], [288.0, 100145.0], [318.0, 100129.0], [319.0, 100151.0], [316.0, 100151.0], [315.0, 100131.0], [314.0, 100131.0], [313.0, 100141.66666666667], [310.0, 100135.0], [309.0, 100136.0], [306.0, 100138.61538461539], [334.0, 95674.0], [335.0, 96409.0], [333.0, 96682.0], [332.0, 98431.0], [331.0, 100117.0], [330.0, 100119.0], [328.0, 100121.0], [326.0, 100122.0], [320.0, 100128.0], [322.0, 100148.0], [321.0, 100127.0], [325.0, 100123.0], [324.0, 100125.0], [351.0, 100133.0], [343.0, 100141.0], [338.0, 100142.0], [337.0, 95850.0], [336.0, 95401.0], [365.0, 100109.0], [367.0, 100108.0], [364.0, 100113.0], [362.0, 100113.0], [360.0, 100113.0], [359.0, 100115.0], [358.0, 100124.5], [357.0, 100124.0], [354.0, 100125.5], [352.0, 100132.0], [382.0, 100106.0], [381.0, 100107.0], [380.0, 100108.0], [376.0, 100107.5], [371.0, 100107.8], [397.0, 100100.0], [399.0, 100093.0], [396.0, 100103.0], [395.0, 100104.0], [394.0, 100104.0], [393.0, 100105.0], [392.0, 100105.5], [391.0, 100105.0], [385.0, 100106.0], [387.0, 100105.0], [413.0, 100085.0], [414.0, 100084.0], [412.0, 100086.0], [410.0, 100086.0], [409.0, 100087.0], [408.0, 100087.0], [406.0, 100087.0], [404.0, 100088.0], [402.0, 100090.5], [400.0, 100092.0], [430.0, 93939.0], [431.0, 93937.0], [429.0, 94947.0], [428.0, 94949.0], [427.0, 95956.0], [426.0, 95958.0], [425.0, 96967.0], [424.0, 96968.0], [423.0, 97976.0], [417.0, 100083.0], [416.0, 100084.0], [419.0, 99995.0], [418.0, 95313.0], [422.0, 97978.0], [421.0, 98986.0], [420.0, 98988.0], [446.0, 80706.0], [447.0, 80705.0], [445.0, 81716.0], [444.0, 80530.0], [443.0, 83196.0], [442.0, 83198.0], [441.0, 84226.0], [440.0, 84206.0], [439.0, 85215.0], [433.0, 87773.0], [432.0, 92930.0], [435.0, 86762.0], [434.0, 86764.0], [438.0, 85217.0], [437.0, 86224.0], [436.0, 85755.0], [462.0, 77785.0], [463.0, 73100.0], [461.0, 78792.0], [460.0, 73639.0], [459.0, 73461.0], [458.0, 79804.0], [457.0, 80812.0], [456.0, 74472.0], [455.0, 75479.0], [449.0, 80167.0], [448.0, 79697.0], [451.0, 79157.0], [450.0, 79159.0], [454.0, 77140.0], [453.0, 78147.0], [452.0, 78150.0], [478.0, 65047.0], [479.0, 65043.0], [477.0, 66053.0], [476.0, 66033.0], [475.0, 67040.0], [474.0, 66683.0], [473.0, 72734.0], [472.0, 67581.0], [471.0, 68588.0], [465.0, 71617.0], [464.0, 71620.0], [467.0, 69421.0], [466.0, 70610.0], [470.0, 67404.0], [469.0, 68411.0], [468.0, 68413.0], [494.0, 61630.0], [495.0, 61628.0], [493.0, 62638.0], [492.0, 62640.0], [491.0, 63647.0], [490.0, 63649.0], [489.0, 64657.0], [488.0, 64659.0], [487.0, 65668.0], [481.0, 68695.0], [480.0, 64037.0], [483.0, 67686.0], [482.0, 67688.0], [486.0, 65668.0], [485.0, 66676.0], [484.0, 66678.0], [510.0, 53553.0], [511.0, 53551.0], [509.0, 54561.0], [508.0, 54562.0], [507.0, 55570.0], [506.0, 55572.0], [505.0, 56579.0], [504.0, 56581.0], [503.0, 57589.0], [497.0, 60618.0], [496.0, 60620.0], [499.0, 59609.0], [498.0, 59611.0], [502.0, 57591.0], [501.0, 58598.0], [500.0, 58601.0], [540.0, 38997.0], [543.0, 37986.0], [529.0, 44466.0], [528.0, 44467.0], [531.0, 43456.0], [530.0, 43458.0], [533.0, 43034.0], [532.0, 42449.0], [542.0, 37989.0], [541.0, 38996.0], [539.0, 40005.0], [538.0, 40006.0], [537.0, 41015.0], [536.0, 41017.0], [527.0, 45475.0], [513.0, 52541.0], [512.0, 52542.0], [515.0, 51531.0], [514.0, 51533.0], [517.0, 50521.0], [516.0, 50523.0], [519.0, 49513.0], [518.0, 49515.0], [526.0, 45477.0], [525.0, 46485.0], [524.0, 46486.0], [523.0, 47494.0], [522.0, 47495.0], [521.0, 48503.0], [520.0, 48505.0], [535.0, 42023.0], [534.0, 42025.0], [572.0, 22844.0], [575.0, 21833.0], [561.0, 28899.0], [560.0, 28901.0], [563.0, 27891.0], [562.0, 27892.0], [565.0, 26880.0], [564.0, 26882.0], [574.0, 21835.0], [573.0, 22842.0], [571.0, 23853.0], [570.0, 23854.0], [569.0, 24862.0], [568.0, 24867.0], [559.0, 29909.0], [545.0, 36977.0], [544.0, 36979.0], [547.0, 35968.0], [546.0, 35969.0], [549.0, 34958.0], [548.0, 34960.0], [551.0, 33948.0], [550.0, 33951.0], [558.0, 29912.0], [557.0, 30918.0], [556.0, 30921.0], [555.0, 31929.0], [554.0, 31930.0], [553.0, 32938.0], [552.0, 32940.0], [567.0, 25871.0], [566.0, 25873.0], [601.0, 7591.0], [605.0, 10539.0], [607.0, 10638.0], [593.0, 7596.0], [592.0, 13699.0], [595.0, 13699.0], [594.0, 10546.0], [597.0, 10544.0], [596.0, 7594.0], [604.0, 10540.0], [603.0, 10541.0], [602.0, 10541.0], [600.0, 10542.0], [583.0, 17795.0], [582.0, 17796.0], [581.0, 18804.0], [580.0, 18804.0], [579.0, 19813.0], [578.0, 19816.0], [577.0, 20823.0], [576.0, 20825.0], [591.0, 13755.0], [590.0, 13757.0], [589.0, 14765.0], [588.0, 14767.0], [587.0, 15775.0], [586.0, 15777.0], [585.0, 16784.0], [584.0, 16787.0], [599.0, 10543.0], [598.0, 13695.0], [633.0, 10520.0], [638.0, 7565.0], [639.0, 10515.0], [625.0, 10527.0], [624.0, 10527.0], [627.0, 10525.0], [626.0, 10526.0], [629.0, 10523.0], [628.0, 10525.0], [637.0, 10517.0], [635.0, 10517.0], [634.0, 10519.0], [632.0, 10520.0], [615.0, 13686.0], [614.0, 10533.0], [613.0, 10534.0], [612.0, 10534.0], [611.0, 10535.0], [610.0, 10536.0], [623.0, 10528.0], [622.0, 10529.0], [621.0, 10529.0], [620.0, 10530.0], [619.0, 10531.0], [618.0, 10531.0], [617.0, 10532.0], [616.0, 10532.0], [631.0, 10521.0], [630.0, 10523.0], [664.0, 3852.0], [670.0, 3846.0], [671.0, 7534.0], [657.0, 7546.0], [656.0, 7547.0], [659.0, 7545.0], [658.0, 7547.0], [669.0, 7536.5], [667.0, 7539.5], [665.0, 7540.0], [655.0, 10499.0], [640.0, 10513.0], [642.0, 7561.0], [641.0, 10512.0], [644.0, 10510.0], [643.0, 10510.0], [646.0, 10507.0], [645.0, 10508.0], [654.0, 7550.0], [653.0, 10502.0], [652.0, 10503.0], [651.0, 10503.0], [650.0, 10504.0], [649.0, 9521.333333333334], [663.0, 7542.0], [662.0, 7542.0], [661.0, 7543.0], [660.0, 7544.0], [698.0, 7446.5], [702.0, 7424.0], [703.0, 7413.0], [688.0, 7510.0], [691.0, 7506.5], [689.0, 7508.0], [693.0, 7501.0], [692.0, 7506.0], [701.0, 7441.0], [700.0, 7444.0], [699.0, 7445.0], [696.0, 7447.0], [679.0, 7520.0], [678.0, 7521.0], [677.0, 7524.0], [676.0, 7528.0], [675.0, 7530.0], [674.0, 7530.0], [673.0, 7532.0], [672.0, 7533.0], [687.0, 7512.0], [686.0, 7512.5], [684.0, 7515.0], [683.0, 7516.0], [682.0, 7518.0], [681.0, 7519.0], [680.0, 7521.0], [695.0, 7449.0], [694.0, 7499.0], [733.0, 9815.0], [724.0, 7100.0], [734.0, 8340.0], [721.0, 12394.0], [720.0, 7163.0], [723.0, 7122.0], [722.0, 12393.0], [732.0, 12113.0], [730.0, 12113.0], [728.0, 7058.0], [711.0, 7354.0], [710.0, 7358.0], [709.0, 7358.0], [708.0, 7359.0], [707.0, 7361.0], [706.0, 7364.0], [705.0, 7369.0], [704.0, 7371.0], [719.0, 7166.0], [718.0, 7172.0], [717.0, 7196.0], [716.0, 7269.0], [715.0, 7347.0], [714.0, 7348.0], [713.0, 7352.5], [727.0, 7072.0], [726.0, 7080.0], [725.0, 7086.0], [761.0, 9803.0], [755.0, 9806.0], [764.0, 12527.0], [766.0, 10949.5], [753.0, 12104.5], [762.0, 9801.0], [760.0, 12956.0], [742.0, 9810.0], [741.0, 6860.0], [740.0, 9811.0], [739.0, 9811.0], [738.0, 12967.0], [737.0, 12111.0], [736.0, 10964.0], [751.0, 12105.0], [750.0, 12106.0], [749.0, 6856.0], [748.0, 13089.5], [746.0, 9808.0], [745.0, 12963.0], [744.0, 10959.0], [759.0, 9803.0], [757.0, 6855.0], [756.0, 12531.5], [793.0, 12085.0], [798.0, 12083.0], [799.0, 9785.0], [785.0, 12945.0], [784.0, 12090.0], [789.0, 10841.666666666666], [786.0, 12947.0], [797.0, 12940.0], [796.0, 10935.0], [794.0, 6835.0], [792.0, 9788.0], [775.0, 12093.5], [774.0, 12951.0], [773.0, 6847.0], [770.0, 12096.0], [769.0, 9797.0], [768.0, 12525.5], [783.0, 10942.0], [781.0, 9792.0], [780.0, 8318.5], [779.0, 9794.0], [777.0, 12092.0], [776.0, 9795.0], [791.0, 12086.0], [790.0, 9788.0], [825.0, 12068.0], [829.0, 12921.0], [830.0, 12064.0], [817.0, 12074.0], [816.0, 12075.0], [819.0, 12074.0], [818.0, 12928.0], [821.0, 12928.0], [820.0, 12073.0], [828.0, 9766.0], [827.0, 9767.0], [826.0, 9767.0], [824.0, 12069.0], [807.0, 9782.5], [806.0, 9783.0], [804.0, 9785.0], [803.0, 9784.0], [802.0, 12082.0], [800.0, 9784.0], [815.0, 8862.333333333334], [814.0, 9778.0], [811.0, 9779.0], [810.0, 12077.0], [809.0, 9780.0], [823.0, 12073.0], [822.0, 9775.0], [857.0, 9742.0], [862.0, 9738.0], [863.0, 6784.0], [848.0, 10896.0], [851.0, 9746.0], [849.0, 12045.0], [861.0, 6789.0], [859.0, 9740.0], [858.0, 6792.0], [856.0, 11320.0], [839.0, 9751.0], [838.0, 6801.0], [837.0, 6801.0], [836.0, 12905.0], [835.0, 12920.0], [833.0, 12491.5], [832.0, 9766.0], [846.0, 9748.0], [845.0, 9748.0], [844.0, 9749.0], [843.0, 6799.0], [842.0, 10802.666666666666], [854.0, 9745.0], [853.0, 10895.5], [889.0, 9784.666666666666], [894.0, 11286.0], [895.0, 6758.0], [880.0, 6766.0], [883.0, 9717.0], [882.0, 11295.0], [892.0, 12867.0], [891.0, 6764.0], [890.0, 9715.0], [888.0, 6766.0], [871.0, 8256.5], [870.0, 9732.0], [868.0, 11310.0], [866.0, 12888.0], [865.0, 6783.0], [864.0, 12887.0], [879.0, 12878.0], [878.0, 9725.0], [877.0, 6774.0], [876.0, 8250.5], [874.0, 6776.0], [873.0, 6779.0], [872.0, 6782.0], [885.0, 6766.0], [884.0, 9718.0], [920.0, 6743.0], [925.0, 9689.0], [926.0, 11987.0], [913.0, 9697.0], [912.0, 8222.5], [923.0, 9689.0], [922.0, 11989.0], [921.0, 9695.0], [910.0, 9699.0], [898.0, 8725.333333333334], [901.0, 9706.0], [899.0, 6755.0], [903.0, 6750.0], [902.0, 6754.0], [909.0, 12854.0], [908.0, 6750.0], [907.0, 9700.0], [906.0, 8224.5], [904.0, 9701.0], [919.0, 6744.0], [918.0, 11994.0], [917.0, 11994.0], [914.0, 6745.0], [956.0, 6720.0], [959.0, 12819.0], [945.0, 9680.0], [944.0, 12835.0], [947.0, 11975.0], [946.0, 6728.0], [949.0, 9677.0], [948.0, 6726.0], [958.0, 6717.0], [957.0, 9670.0], [955.0, 9671.0], [954.0, 6721.0], [953.0, 9674.0], [952.0, 9674.0], [943.0, 9680.0], [929.0, 12840.0], [928.0, 10837.0], [932.0, 6735.0], [931.0, 8211.5], [935.0, 6735.0], [934.0, 6734.0], [942.0, 6729.5], [940.0, 9465.333333333334], [937.0, 9684.0], [936.0, 6733.0], [951.0, 9675.0], [950.0, 12829.0], [988.0, 6678.0], [991.0, 11924.0], [976.0, 12802.0], [979.0, 11945.5], [977.0, 11946.0], [990.0, 11925.0], [989.0, 6675.0], [987.0, 12782.0], [986.0, 6678.0], [985.0, 9630.0], [984.0, 6684.0], [975.0, 6699.0], [962.0, 13929.0], [961.0, 9766.0], [967.0, 6713.0], [965.0, 8462.666666666666], [974.0, 6700.0], [973.0, 12804.0], [972.0, 11230.0], [970.0, 11951.0], [969.0, 6704.0], [968.0, 12808.0], [983.0, 9645.0], [982.0, 6694.0], [1017.0, 11873.5], [1022.0, 12711.0], [1023.0, 9555.0], [1008.0, 6668.0], [1010.0, 9618.0], [1009.0, 12771.0], [1012.0, 11876.0], [1011.0, 9616.0], [1021.0, 11867.0], [1020.0, 11869.0], [1019.0, 12300.0], [1016.0, 9575.0], [999.0, 11201.0], [997.0, 12778.0], [996.0, 9625.0], [995.0, 6675.0], [994.0, 6674.0], [993.0, 9626.0], [992.0, 9626.0], [1007.0, 11918.0], [1006.0, 10769.0], [1004.0, 11919.0], [1003.0, 12776.0], [1002.0, 9723.5], [1000.0, 12777.0], [1014.0, 9577.0], [1013.0, 6628.0], [1076.0, 11600.0], [1086.0, 10676.0], [1058.0, 13775.0], [1060.0, 12662.0], [1064.0, 11039.0], [1068.0, 12659.0], [1084.0, 9964.0], [1082.0, 10712.0], [1080.0, 10741.0], [1078.0, 11600.5], [1074.0, 11724.0], [1072.0, 13024.0], [1026.0, 11846.0], [1030.0, 11110.0], [1028.0, 11832.0], [1032.0, 12684.0], [1034.0, 12683.0], [1038.0, 9312.0], [1054.0, 12672.5], [1050.0, 13784.0], [1040.0, 6577.0], [1138.0, 9773.666666666666], [1144.0, 9780.0], [1120.0, 8686.0], [1122.0, 10323.0], [1126.0, 9585.5], [1124.0, 10322.0], [1132.0, 8684.0], [1142.0, 9785.0], [1140.0, 10317.0], [1100.0, 12250.0], [1098.0, 10335.0], [1096.0, 12247.0], [1094.0, 8657.0], [1092.0, 10668.0], [1090.0, 10674.0], [1088.0, 10675.0], [1114.0, 12240.0], [1110.0, 12245.0], [1108.0, 9806.0], [1106.0, 10333.0], [1104.0, 9807.0], [1134.0, 10319.0], [1278.0, 9826.285714285714], [1250.0, 8661.0], [1276.0, 10399.92857142857], [1264.0, 11548.875], [1244.0, 10465.0], [1242.0, 10465.0], [1256.0, 9846.333333333334], [1252.0, 11412.666666666666], [1332.0, 9757.0], [1342.0, 10391.0], [1336.0, 9299.4], [1334.0, 10364.5], [1330.0, 9757.0], [1304.0, 9764.0], [1280.0, 10007.857142857143], [1290.0, 10755.666666666666], [1288.0, 9766.0], [1292.0, 9619.0], [1294.0, 9473.0], [1302.0, 9764.0], [1300.0, 10110.5], [1298.0, 9995.666666666666], [1376.0, 10260.0], [1358.0, 10015.5], [1384.0, 9996.0], [1382.0, 9592.666666666666], [1378.0, 9734.5], [1346.0, 8644.0], [1348.0, 9754.0], [1350.0, 9754.0], [1354.0, 9928.333333333334], [1356.0, 9753.0], [1372.0, 9735.0], [1366.0, 10261.0], [1364.0, 10442.0], [1442.0, 8617.0], [1450.0, 9906.499999999998], [1466.0, 11209.0], [1444.0, 9948.0], [1464.0, 10334.5], [1456.0, 10252.0], [1452.0, 10418.0], [1482.0, 8613.0], [1520.0, 10187.538461538463], [1474.0, 10416.0], [1480.0, 10201.0], [1484.0, 9900.0], [1492.0, 9723.0], [1490.0, 10013.7], [1504.0, 10019.625], [1592.0, 8585.0], [1580.0, 9779.0], [1578.0, 9740.333333333334], [1594.0, 9403.0], [1546.0, 10059.5], [1544.0, 9568.0], [1540.0, 10405.0], [1538.0, 10060.0], [1612.0, 9802.5], [1618.0, 7452.0], [1600.0, 10221.0], [1604.0, 10913.333333333334], [1616.0, 10251.666666666666], [1718.0, 122.5], [1712.0, 138.66666666666666], [1724.0, 6440.0], [1698.0, 144.57142857142858], [1700.0, 144.77777777777777], [1722.0, 116.0], [1716.0, 133.0], [1664.0, 150.0], [1670.0, 148.71428571428572], [1672.0, 148.0], [1694.0, 145.66666666666666], [1692.0, 145.0], [1686.0, 147.0], [1682.0, 147.66666666666666], [1706.0, 144.0], [1802.0, 113.66666666666667], [1820.0, 98.0], [1830.0, 88.71428571428571], [1806.0, 109.4], [1804.0, 109.8], [1818.0, 92.0], [1812.0, 94.0], [1810.0, 109.08695652173913], [1968.0, 129.0], [1954.0, 186.5], [1982.0, 128.16666666666666], [1980.0, 129.33333333333334], [1934.0, 122.2], [1932.0, 99.6], [1930.0, 77.2], [1928.0, 78.0], [1948.0, 145.5], [1946.0, 97.7], [1944.0, 105.81818181818183], [1942.0, 76.5], [1938.0, 113.66666666666667], [1936.0, 113.33333333333334], [1962.0, 130.0], [1956.0, 74.0], [1996.0, 119.0], [2040.0, 96.0], [2018.0, 109.0], [2022.0, 108.0], [2024.0, 107.0], [2028.0, 106.0], [2038.0, 97.0], [2036.0, 97.0], [2034.0, 99.0], [2032.0, 100.33333333333333], [1994.0, 120.0], [1992.0, 127.5], [1990.0, 127.0], [1988.0, 127.5], [1986.0, 128.0], [1984.0, 128.0], [2014.0, 109.0], [2008.0, 114.0], [2006.0, 115.0], [2002.0, 119.0], [2000.0, 119.0], [2112.0, 7332.0], [2160.0, 6807.0], [2116.0, 9069.0], [2120.0, 9060.0], [2124.0, 4110.0], [2128.0, 5978.0], [2136.0, 6815.0], [2152.0, 10571.0], [2144.0, 7547.0], [2076.0, 61.33333333333333], [2068.0, 79.21428571428571], [2108.0, 8138.0], [2104.0, 8140.0], [2096.0, 6923.0], [2084.0, 30.333333333333332], [2244.0, 10554.0], [2428.0, 139.0], [2424.0, 140.25], [2376.0, 5939.0], [2384.0, 5935.0], [2388.0, 6774.0], [2396.0, 6885.09090909091], [2420.0, 1079.0], [2408.0, 6906.263157894737], [2404.0, 7220.894736842106], [2400.0, 6771.0], [2328.0, 6786.0], [2324.0, 9665.0], [2456.0, 6052.666666666667], [2552.0, 7064.0], [2512.0, 7075.0], [2500.0, 7499.0], [2504.0, 7496.0], [2508.0, 7473.0], [2516.0, 7073.0], [2520.0, 7070.0], [2548.0, 10312.78947368421], [2536.0, 12475.666666666666], [2440.0, 128.0], [2436.0, 135.0], [2444.0, 4805.5], [2460.0, 4791.0], [2492.0, 7506.0], [2488.0, 7508.5], [2480.0, 8526.0], [2476.0, 8537.0], [2472.0, 8540.0], [2468.0, 4783.0], [2464.0, 7033.0], [2572.0, 6695.0], [2568.0, 23642.0], [2564.0, 7060.0], [2812.0, 3592.7499999999995], [2756.0, 6959.0], [2764.0, 6958.0], [2772.0, 6953.0], [2776.0, 7616.0], [2808.0, 6858.25], [2800.0, 23532.0], [2796.0, 6946.0], [2792.0, 12577.333333333334], [2784.0, 6589.0], [2836.0, 10909.5], [2888.0, 131.4], [2940.0, 83.0], [2928.0, 92.0], [2816.0, 10995.0], [2820.0, 11003.0], [2828.0, 5530.6], [2844.0, 10908.5], [2860.0, 149.0], [2848.0, 6852.5], [3000.0, 7879.370917425244], [2952.0, 57.0], [2964.0, 9263.0], [2972.0, 9257.0], [2968.0, 9842.0], [2125.0, 4108.0], [2161.0, 7540.0], [2117.0, 9066.0], [2121.0, 9058.0], [2129.0, 5978.0], [2133.0, 8695.0], [2137.0, 6815.0], [2141.0, 8066.333333333333], [2153.0, 6810.0], [2149.0, 8065.333333333333], [2053.0, 80.0], [2109.0, 9092.0], [2105.0, 9097.0], [2101.0, 9099.0], [2093.0, 6371.0], [2085.0, 29.0], [2081.0, 44.2], [2245.0, 10554.0], [2285.0, 10551.0], [2261.0, 6794.0], [2237.0, 10555.0], [2425.0, 140.0], [2429.0, 139.0], [2377.0, 5204.166666666667], [2385.0, 5935.0], [2389.0, 6157.933333333333], [2397.0, 5933.0], [2413.0, 8456.42857142857], [2405.0, 6764.142857142857], [2401.0, 7015.666666666667], [2329.0, 8675.0], [2321.0, 7522.0], [2353.0, 5941.0], [2337.0, 5944.0], [2497.0, 7502.5], [2557.0, 6941.0], [2501.0, 7498.0], [2509.0, 7472.0], [2513.0, 7074.0], [2517.0, 7072.0], [2553.0, 22970.0], [2533.0, 6948.0], [2441.0, 4806.0], [2449.0, 6682.5], [2453.0, 6680.0], [2457.0, 4799.0], [2461.0, 8551.0], [2493.0, 7506.0], [2481.0, 8526.0], [2477.0, 8535.0], [2469.0, 4782.0], [2801.0, 9651.5], [2809.0, 6949.25], [2813.0, 12395.333333333334], [2765.0, 6807.6], [2773.0, 6953.0], [2781.0, 6952.0], [2797.0, 6768.5], [2793.0, 6587.0], [2789.0, 9603.0], [2785.0, 6952.0], [2745.0, 6963.0], [2829.0, 234.0], [2925.0, 92.5], [2937.0, 89.25], [2885.0, 131.0], [2893.0, 130.0], [2817.0, 20141.8], [2821.0, 11054.000000000002], [2825.0, 6947.0], [2837.0, 23528.0], [2845.0, 15235.5], [2861.0, 149.0], [2853.0, 6579.0], [2849.0, 15234.5], [2953.0, 9266.0], [2965.0, 9262.0], [2949.0, 82.5], [2957.0, 9403.333333333334], [2973.0, 9255.0], [1073.0, 6545.0], [1083.0, 10711.0], [1059.0, 9510.0], [1061.0, 12663.0], [1067.0, 11323.333333333334], [1069.0, 12655.0], [1085.0, 9963.0], [1081.0, 8441.0], [1079.0, 11598.0], [1075.0, 11720.0], [1055.0, 9510.0], [1025.0, 11130.5], [1027.0, 11832.0], [1033.0, 9204.0], [1037.0, 11827.0], [1039.0, 11827.0], [1053.0, 12672.0], [1051.0, 12672.0], [1049.0, 12244.5], [1047.0, 10353.333333333334], [1045.0, 12674.0], [1043.0, 9201.0], [1041.0, 12681.0], [1103.0, 10498.0], [1143.0, 9781.0], [1121.0, 10488.0], [1123.0, 8685.0], [1131.0, 10321.0], [1129.0, 10785.666666666666], [1133.0, 11016.0], [1141.0, 12229.0], [1139.0, 12234.0], [1101.0, 9808.0], [1099.0, 10334.0], [1097.0, 9809.0], [1095.0, 9812.0], [1093.0, 8658.0], [1089.0, 9564.0], [1117.0, 9797.5], [1115.0, 12240.0], [1113.0, 12240.5], [1111.0, 12243.0], [1109.0, 10495.0], [1107.0, 8695.0], [1105.0, 9807.0], [1135.0, 12235.0], [1177.0, 10304.0], [1275.0, 10035.260869565216], [1279.0, 10148.0], [1251.0, 11257.0], [1277.0, 10083.6], [1247.0, 11426.222222222223], [1243.0, 8663.0], [1241.0, 10465.0], [1239.0, 12216.0], [1255.0, 9262.333333333334], [1253.0, 8662.0], [1331.0, 9464.0], [1335.0, 10447.0], [1327.0, 10061.25], [1339.0, 10106.666666666666], [1333.0, 9675.625], [1329.0, 9783.374999999998], [1281.0, 9211.5], [1287.0, 10293.0], [1283.0, 9767.0], [1291.0, 10931.0], [1293.0, 10291.0], [1303.0, 8653.0], [1301.0, 8652.0], [1297.0, 10373.5], [1349.0, 10280.0], [1381.0, 9733.0], [1385.0, 12175.0], [1375.0, 9997.0], [1345.0, 9189.666666666666], [1347.0, 10281.0], [1351.0, 9754.0], [1355.0, 10279.0], [1359.0, 8641.0], [1373.0, 9756.0], [1367.0, 10343.5], [1363.0, 9196.0], [1361.0, 9752.0], [1467.0, 10416.0], [1449.0, 9868.857142857143], [1461.0, 9433.5], [1429.0, 10254.0], [1453.0, 9727.0], [1451.0, 10105.666666666666], [1527.0, 9422.5], [1535.0, 9714.0], [1533.0, 9890.0], [1531.0, 9715.0], [1525.0, 10065.666666666666], [1523.0, 10241.0], [1521.0, 10354.25], [1503.0, 9832.555555555555], [1479.0, 10415.0], [1483.0, 9806.0], [1487.0, 9723.5], [1485.0, 9564.57142857143], [1501.0, 9722.0], [1499.0, 10387.5], [1497.0, 10183.777777777777], [1493.0, 9723.0], [1489.0, 8612.0], [1587.0, 10792.5], [1595.0, 9695.666666666666], [1599.0, 9853.25], [1577.0, 9998.666666666666], [1589.0, 9959.0], [1585.0, 10232.0], [1551.0, 9956.6], [1543.0, 8603.0], [1541.0, 9977.0], [1539.0, 10240.0], [1537.0, 10405.0], [1583.0, 10233.0], [1581.0, 9705.5], [1611.0, 9673.0], [1657.0, 149.0], [1647.0, 148.0], [1601.0, 12136.0], [1607.0, 9935.0], [1617.0, 7453.0], [1613.0, 10362.0], [1609.0, 9672.0], [1723.0, 6440.0], [1699.0, 144.33333333333331], [1695.0, 145.04761904761904], [1667.0, 150.0], [1671.0, 148.0], [1677.0, 148.0], [1689.0, 145.0], [1683.0, 147.25], [1709.0, 142.5], [1707.0, 143.0], [1705.0, 144.2], [1805.0, 109.83333333333333], [1829.0, 89.0], [1827.0, 89.0], [1807.0, 109.82608695652173], [1803.0, 111.60000000000001], [1815.0, 92.66666666666667], [1811.0, 94.0], [1809.0, 109.83333333333333], [1935.0, 190.0], [1979.0, 128.0], [1983.0, 127.0], [1953.0, 188.0], [1933.0, 112.12500000000003], [1931.0, 93.14285714285714], [1925.0, 78.0], [1949.0, 187.0], [1945.0, 131.5], [1943.0, 86.60000000000001], [1939.0, 76.5], [1937.0, 94.66666666666667], [1957.0, 141.6], [2017.0, 109.0], [2037.0, 97.0], [2021.0, 108.0], [2023.0, 108.0], [2027.0, 106.0], [2025.0, 107.0], [2029.0, 107.0], [2039.0, 96.0], [2035.0, 98.0], [2033.0, 99.0], [1997.0, 119.0], [1995.0, 119.0], [1993.0, 126.0], [1987.0, 127.0], [1985.0, 127.5], [2013.0, 110.0], [2007.0, 115.0], [2005.0, 116.0], [2118.0, 9066.0], [2114.0, 9084.0], [2122.0, 4625.0], [2126.0, 2450.0], [2130.0, 10576.0], [2138.0, 6814.0], [2162.0, 10564.0], [2158.0, 6806.4], [2150.0, 6812.0], [2070.0, 78.5], [2066.0, 79.2], [2110.0, 7174.0], [2106.0, 5543.0], [2102.0, 9099.0], [2098.0, 9101.0], [2094.0, 9105.0], [2090.0, 7274.0], [2226.0, 8678.5], [2210.0, 6800.0], [2430.0, 138.0], [2374.0, 5389.0], [2386.0, 6354.25], [2390.0, 6353.5], [2394.0, 6758.0], [2398.0, 6487.41935483871], [2426.0, 139.0], [2418.0, 6766.0], [2414.0, 6768.0], [2410.0, 6768.5], [2334.0, 6968.5], [2330.0, 8435.8], [2406.0, 6769.0], [2542.0, 6705.0], [2498.0, 7502.0], [2502.0, 7498.0], [2506.0, 7495.0], [2510.0, 7076.0], [2518.0, 6708.0], [2442.0, 4806.0], [2446.0, 8564.5], [2450.0, 4801.0], [2458.0, 8555.0], [2462.0, 8547.0], [2490.0, 7508.5], [2482.0, 8524.0], [2478.0, 8535.0], [2474.0, 8539.0], [2470.0, 8542.0], [2466.0, 8546.0], [2566.0, 15350.5], [2562.0, 6940.0], [2758.0, 9127.142857142857], [2810.0, 6677.0], [2762.0, 6957.0], [2766.0, 6953.0], [2774.0, 6589.0], [2778.0, 6589.0], [2782.0, 6952.0], [2802.0, 11095.0], [2798.0, 6949.0], [2794.0, 11888.9], [2790.0, 6588.0], [2718.0, 6966.0], [2926.0, 92.0], [2922.0, 94.33333333333334], [2886.0, 131.0], [2890.0, 131.0], [2938.0, 89.0], [2934.0, 90.5], [2930.0, 91.0], [2918.0, 96.0], [2818.0, 13581.2], [2846.0, 23526.0], [2858.0, 2465.6666666666665], [2962.0, 9101.0], [2954.0, 9266.0], [2978.0, 12041.0], [2974.0, 9254.0], [2970.0, 9259.0], [2123.0, 4623.0], [2131.0, 6816.0], [2163.0, 6803.0], [2115.0, 9082.0], [2119.0, 9061.0], [2127.0, 2450.0], [2135.0, 5976.0], [2143.0, 6812.0], [2159.0, 6806.0], [2151.0, 6811.0], [2147.0, 6812.0], [2067.0, 79.33333333333333], [2055.0, 80.0], [2111.0, 7170.0], [2099.0, 5547.0], [2091.0, 9107.5], [2087.0, 5468.0], [2267.0, 6792.0], [2259.0, 6793.0], [2235.0, 7162.5], [2383.0, 5937.0], [2431.0, 137.0], [2387.0, 6774.0], [2391.0, 5934.0], [2395.0, 6073.0], [2399.0, 6882.965517241378], [2427.0, 139.0], [2419.0, 1081.0], [2415.0, 6766.0], [2403.0, 8767.0], [2335.0, 7518.4], [2331.0, 8665.0], [2311.0, 10549.0], [2407.0, 6770.0], [2451.0, 4801.0], [2551.0, 6704.0], [2503.0, 7497.0], [2507.0, 7474.0], [2511.0, 6713.0], [2515.0, 7074.0], [2519.0, 7071.0], [2547.0, 23651.0], [2531.0, 6706.0], [2495.0, 7505.0], [2435.0, 136.5], [2447.0, 4804.0], [2459.0, 4794.0], [2491.0, 7507.0], [2487.0, 7509.0], [2483.0, 8523.0], [2479.0, 8533.0], [2475.0, 8538.0], [2471.0, 4782.0], [2467.0, 4784.0], [2575.0, 12585.5], [2563.0, 6698.0], [2755.0, 6868.25], [2803.0, 6949.0], [2771.0, 14816.5], [2775.0, 14906.5], [2779.0, 6589.0], [2783.0, 6952.0], [2811.0, 14766.000000000002], [2807.0, 22857.0], [2799.0, 6937.0], [2795.0, 6587.0], [2791.0, 11445.316455696204], [2787.0, 6710.333333333333], [2751.0, 6780.5], [2935.0, 90.0], [2943.0, 83.0], [2883.0, 131.0], [2891.0, 131.0], [2895.0, 116.0], [2931.0, 91.0], [2919.0, 95.0], [2863.0, 146.0], [2831.0, 233.0], [2843.0, 22852.0], [2859.0, 149.0], [2855.0, 12469.666666666666], [2851.0, 23188.0], [2951.0, 81.0], [2971.0, 20423.0], [2947.0, 83.0], [2959.0, 9554.5], [2963.0, 9649.666666666666], [2987.0, 9247.0], [2967.0, 9180.0], [1.0, 100170.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[2911.704363099276, 8777.665821723589]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 3000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 1663.2, "minX": 1.6828986E12, "maxY": 151829.91666666666, "series": [{"data": [[1.68289872E12, 151829.91666666666], [1.6828989E12, 59092.98333333333], [1.6828986E12, 26151.733333333334], [1.68289878E12, 111551.25], [1.68289896E12, 2407.0833333333335], [1.68289866E12, 121705.36666666667], [1.68289884E12, 112273.4], [1.68289902E12, 3998.8]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.68289872E12, 106974.0], [1.6828989E12, 42873.6], [1.6828986E12, 19815.6], [1.68289878E12, 78775.2], [1.68289896E12, 1663.2], [1.68289866E12, 87586.8], [1.68289884E12, 79842.0], [1.68289902E12, 2797.2]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68289902E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 4853.721094160957, "minX": 1.6828986E12, "maxY": 100104.35435435429, "series": [{"data": [[1.68289872E12, 11403.66408813875], [1.6828989E12, 6029.999804075229], [1.6828986E12, 7966.936413734642], [1.68289878E12, 6277.995094902945], [1.68289896E12, 82538.29292929289], [1.68289866E12, 8590.81317732808], [1.68289884E12, 4853.721094160957], [1.68289902E12, 100104.35435435429]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68289902E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 4853.707311941095, "minX": 1.6828986E12, "maxY": 100104.34534534533, "series": [{"data": [[1.68289872E12, 11206.274808563861], [1.6828989E12, 6029.9919670846375], [1.6828986E12, 7966.910979228498], [1.68289878E12, 6277.979526551494], [1.68289896E12, 82538.26262626264], [1.68289866E12, 8590.795530833428], [1.68289884E12, 4853.707311941095], [1.68289902E12, 100104.34534534533]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68289902E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.1060606060606061, "minX": 1.6828986E12, "maxY": 5241.444991404915, "series": [{"data": [[1.68289872E12, 5241.444991404915], [1.6828989E12, 5.33503134796239], [1.6828986E12, 20.035184400169587], [1.68289878E12, 1148.4812326722156], [1.68289896E12, 0.1060606060606061], [1.68289866E12, 1615.648125059942], [1.68289884E12, 83.44702788006323], [1.68289902E12, 0.2822822822822822]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68289902E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 8.0, "minX": 1.6828986E12, "maxY": 161203.0, "series": [{"data": [[1.68289872E12, 134424.0], [1.6828989E12, 134351.0], [1.6828986E12, 26429.0], [1.68289878E12, 161203.0], [1.68289896E12, 100142.0], [1.68289866E12, 78250.0], [1.68289884E12, 75576.0], [1.68289902E12, 100222.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.68289872E12, 18651.999999999996], [1.6828989E12, 11805.0], [1.6828986E12, 16564.0], [1.68289878E12, 15562.1], [1.68289896E12, 100124.0], [1.68289866E12, 16583.000000000022], [1.68289884E12, 12875.0], [1.68289902E12, 100211.2]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.68289872E12, 129850.92], [1.6828989E12, 30920.85], [1.6828986E12, 25914.2], [1.68289878E12, 78788.0], [1.68289896E12, 100141.01], [1.68289866E12, 65825.88], [1.68289884E12, 18429.0], [1.68289902E12, 100222.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.68289872E12, 79791.59999999999], [1.6828989E12, 16214.0], [1.6828986E12, 23866.0], [1.68289878E12, 30224.0], [1.68289896E12, 100133.0], [1.68289866E12, 39550.20000000003], [1.68289884E12, 13881.399999999998], [1.68289902E12, 100221.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.68289872E12, 11.0], [1.6828989E12, 14.0], [1.6828986E12, 24.0], [1.68289878E12, 21.0], [1.68289896E12, 43456.0], [1.68289866E12, 8.0], [1.68289884E12, 17.0], [1.68289902E12, 96682.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.68289872E12, 171.0], [1.6828989E12, 5939.0], [1.6828986E12, 8139.0], [1.68289878E12, 181.0], [1.68289896E12, 90351.5], [1.68289866E12, 237.0], [1.68289884E12, 965.0], [1.68289902E12, 100129.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68289902E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 29.0, "minX": 1.0, "maxY": 115242.0, "series": [{"data": [[2.0, 50522.0], [3.0, 1922.0], [4.0, 27488.0], [5.0, 1374.0], [6.0, 7803.5], [7.0, 13242.0], [8.0, 2566.0], [9.0, 10668.0], [10.0, 11338.5], [13.0, 15187.0], [14.0, 8438.0], [16.0, 12351.0], [17.0, 11625.0], [18.0, 7248.0], [20.0, 114.0], [21.0, 115242.0], [23.0, 7744.0], [24.0, 7371.0], [26.0, 7502.5], [27.0, 13845.0], [28.0, 1647.5], [29.0, 6201.0], [30.0, 7592.5], [35.0, 3838.5], [34.0, 6546.0], [36.0, 9063.5], [41.0, 139.0], [45.0, 1852.0], [47.0, 8523.0], [49.0, 7103.0], [51.0, 14838.0], [55.0, 29.0], [60.0, 107.0], [66.0, 10150.0], [74.0, 4053.0], [75.0, 9723.0], [79.0, 8038.0], [82.0, 58325.5], [86.0, 188.0], [91.0, 118.0], [90.0, 4116.0], [95.0, 110.0], [93.0, 6295.0], [100.0, 131.0], [104.0, 85.0], [114.0, 8433.0], [116.0, 7031.0], [121.0, 100049.0], [132.0, 2171.0], [134.0, 8221.5], [136.0, 117.0], [137.0, 7093.0], [147.0, 65.0], [148.0, 984.0], [156.0, 109.0], [157.0, 9055.0], [159.0, 119.0], [153.0, 110.0], [155.0, 4142.0], [161.0, 113.0], [165.0, 12576.0], [162.0, 147.0], [164.0, 8349.0], [167.0, 116.0], [160.0, 119.0], [171.0, 117.0], [173.0, 107.0], [169.0, 126.5], [174.0, 145.0], [170.0, 22071.0], [172.0, 112.0], [179.0, 10118.0], [182.0, 172.0], [178.0, 116.0], [181.0, 110.0], [186.0, 129.0], [185.0, 131.0], [187.0, 9246.0], [188.0, 121.0], [192.0, 106.5], [199.0, 104.0], [200.0, 127.5], [215.0, 8540.0], [210.0, 100166.0], [216.0, 9445.5], [223.0, 83.0], [220.0, 3038.5], [221.0, 96.0], [226.0, 149.0], [245.0, 110.0], [251.0, 13353.5], [264.0, 6650.5], [271.0, 11881.0], [261.0, 116.0], [269.0, 88.0], [284.0, 111.0], [289.0, 143.0], [290.0, 112.0], [293.0, 111.0], [291.0, 6771.0], [312.0, 113.0], [307.0, 11791.0], [311.0, 100.0], [334.0, 117.0], [332.0, 180.0], [335.0, 126.0], [328.0, 184.0], [331.0, 116.0], [321.0, 125.0], [322.0, 175.0], [323.0, 122.0], [333.0, 5103.0], [338.0, 115.0], [340.0, 183.0], [337.0, 4802.0], [351.0, 13141.0], [347.0, 9790.0], [355.0, 9232.0], [377.0, 10541.0], [388.0, 199.0], [431.0, 14624.0], [425.0, 14921.0], [419.0, 128.0], [424.0, 130.0], [439.0, 11247.0], [445.0, 9345.0], [448.0, 143.0], [454.0, 10951.5], [461.0, 11480.0], [494.0, 12562.5], [482.0, 160.0], [492.0, 120.0], [505.0, 127.0], [503.0, 13571.0], [498.0, 131.0], [504.0, 113.0], [506.0, 12214.0], [499.0, 146.0], [502.0, 112.0], [538.0, 7540.0], [524.0, 10232.5], [567.0, 11293.0], [557.0, 105.0], [574.0, 210.0], [550.0, 11320.0], [587.0, 111.0], [577.0, 198.0], [605.0, 136.0], [602.0, 13033.0], [616.0, 10034.0], [631.0, 124.0], [663.0, 3085.0], [689.0, 11088.0], [686.0, 10021.0], [733.0, 8417.0], [743.0, 12196.0], [1.0, 9867.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[557.0, 28239.0], [340.0, 52298.0], [178.0, 105774.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 743.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 115242.0, "series": [{"data": [[2.0, 50522.0], [3.0, 1922.0], [4.0, 27488.0], [5.0, 1374.0], [6.0, 7803.5], [7.0, 13242.0], [8.0, 2566.0], [9.0, 10668.0], [10.0, 11338.5], [13.0, 15187.0], [14.0, 8438.0], [16.0, 12351.0], [17.0, 11625.0], [18.0, 7248.0], [20.0, 114.0], [21.0, 115242.0], [23.0, 7744.0], [24.0, 7371.0], [26.0, 7502.5], [27.0, 13845.0], [28.0, 1647.5], [29.0, 6201.0], [30.0, 7592.5], [35.0, 3838.5], [34.0, 6546.0], [36.0, 9063.5], [41.0, 139.0], [45.0, 1852.0], [47.0, 8523.0], [49.0, 7103.0], [51.0, 14838.0], [55.0, 29.0], [60.0, 107.0], [66.0, 10150.0], [74.0, 4053.0], [75.0, 9723.0], [79.0, 8038.0], [82.0, 58325.5], [86.0, 188.0], [91.0, 118.0], [90.0, 4116.0], [95.0, 110.0], [93.0, 6295.0], [100.0, 131.0], [104.0, 85.0], [114.0, 8433.0], [116.0, 7031.0], [121.0, 100049.0], [132.0, 2171.0], [134.0, 8221.5], [136.0, 117.0], [137.0, 7093.0], [147.0, 65.0], [148.0, 984.0], [156.0, 109.0], [157.0, 9055.0], [159.0, 119.0], [153.0, 110.0], [155.0, 4142.0], [161.0, 113.0], [165.0, 12576.0], [162.0, 147.0], [164.0, 8349.0], [167.0, 116.0], [160.0, 119.0], [171.0, 117.0], [173.0, 107.0], [169.0, 126.5], [174.0, 145.0], [170.0, 22071.0], [172.0, 112.0], [179.0, 10118.0], [182.0, 172.0], [178.0, 116.0], [181.0, 110.0], [186.0, 129.0], [185.0, 131.0], [187.0, 9246.0], [188.0, 121.0], [192.0, 106.5], [199.0, 104.0], [200.0, 127.5], [215.0, 8540.0], [210.0, 100166.0], [216.0, 9445.5], [223.0, 83.0], [220.0, 3038.5], [221.0, 96.0], [226.0, 149.0], [245.0, 110.0], [251.0, 13353.5], [264.0, 6650.5], [271.0, 11881.0], [261.0, 116.0], [269.0, 88.0], [284.0, 111.0], [289.0, 143.0], [290.0, 112.0], [293.0, 111.0], [291.0, 6771.0], [312.0, 113.0], [307.0, 11791.0], [311.0, 100.0], [334.0, 117.0], [332.0, 180.0], [335.0, 126.0], [328.0, 184.0], [331.0, 116.0], [321.0, 125.0], [322.0, 175.0], [323.0, 122.0], [333.0, 5103.0], [338.0, 115.0], [340.0, 183.0], [337.0, 4802.0], [351.0, 13141.0], [347.0, 9790.0], [355.0, 9232.0], [377.0, 10541.0], [388.0, 199.0], [431.0, 14624.0], [425.0, 14921.0], [419.0, 128.0], [424.0, 130.0], [439.0, 11247.0], [445.0, 9345.0], [448.0, 143.0], [454.0, 10951.5], [461.0, 11480.0], [494.0, 12562.5], [482.0, 160.0], [492.0, 120.0], [505.0, 127.0], [503.0, 13571.0], [498.0, 131.0], [504.0, 113.0], [506.0, 12214.0], [499.0, 146.0], [502.0, 111.5], [538.0, 7540.0], [524.0, 10232.5], [567.0, 11293.0], [557.0, 105.0], [574.0, 210.0], [550.0, 11320.0], [587.0, 111.0], [577.0, 198.0], [605.0, 136.0], [602.0, 13033.0], [616.0, 10034.0], [631.0, 124.0], [663.0, 3085.0], [689.0, 11088.0], [686.0, 10021.0], [733.0, 8417.0], [743.0, 12196.0], [1.0, 9867.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[557.0, 0.0], [340.0, 0.0], [178.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 743.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 75.15, "minX": 1.6828986E12, "maxY": 189.26666666666668, "series": [{"data": [[1.68289872E12, 189.26666666666668], [1.6828989E12, 83.53333333333333], [1.6828986E12, 75.15], [1.68289878E12, 164.21666666666667], [1.68289866E12, 175.35], [1.68289884E12, 147.51666666666668]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6828989E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 1.05, "minX": 1.6828986E12, "maxY": 212.25, "series": [{"data": [[1.68289872E12, 212.25], [1.6828989E12, 85.06666666666666], [1.6828986E12, 39.31666666666667], [1.68289878E12, 156.3], [1.68289896E12, 3.3], [1.68289866E12, 173.78333333333333], [1.68289884E12, 158.41666666666666], [1.68289902E12, 5.55]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.68289872E12, 1.05]], "isOverall": false, "label": "Non HTTP response code: java.net.SocketException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68289902E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 1.05, "minX": 1.6828986E12, "maxY": 212.25, "series": [{"data": [[1.68289872E12, 212.25], [1.6828989E12, 85.06666666666666], [1.6828986E12, 39.31666666666667], [1.68289878E12, 156.3], [1.68289896E12, 3.3], [1.68289866E12, 173.78333333333333], [1.68289884E12, 158.41666666666666], [1.68289902E12, 5.55]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.68289872E12, 1.05]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68289902E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 1.05, "minX": 1.6828986E12, "maxY": 212.25, "series": [{"data": [[1.68289872E12, 212.25], [1.6828989E12, 85.06666666666666], [1.6828986E12, 39.31666666666667], [1.68289878E12, 156.3], [1.68289896E12, 3.3], [1.68289866E12, 173.78333333333333], [1.68289884E12, 158.41666666666666], [1.68289902E12, 5.55]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.68289872E12, 1.05]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68289902E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

