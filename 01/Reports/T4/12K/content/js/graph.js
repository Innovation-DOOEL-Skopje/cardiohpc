/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 9.0, "minX": 0.0, "maxY": 151697.0, "series": [{"data": [[0.0, 9.0], [0.1, 24.0], [0.2, 27.0], [0.3, 31.0], [0.4, 34.0], [0.5, 37.0], [0.6, 39.0], [0.7, 42.0], [0.8, 43.0], [0.9, 45.0], [1.0, 47.0], [1.1, 49.0], [1.2, 50.0], [1.3, 51.0], [1.4, 53.0], [1.5, 53.0], [1.6, 54.0], [1.7, 56.0], [1.8, 58.0], [1.9, 60.0], [2.0, 61.0], [2.1, 62.0], [2.2, 63.0], [2.3, 64.0], [2.4, 65.0], [2.5, 66.0], [2.6, 67.0], [2.7, 67.0], [2.8, 68.0], [2.9, 69.0], [3.0, 70.0], [3.1, 71.0], [3.2, 71.0], [3.3, 72.0], [3.4, 73.0], [3.5, 73.0], [3.6, 74.0], [3.7, 75.0], [3.8, 75.0], [3.9, 77.0], [4.0, 78.0], [4.1, 79.0], [4.2, 80.0], [4.3, 80.0], [4.4, 81.0], [4.5, 81.0], [4.6, 82.0], [4.7, 83.0], [4.8, 83.0], [4.9, 84.0], [5.0, 84.0], [5.1, 85.0], [5.2, 85.0], [5.3, 86.0], [5.4, 86.0], [5.5, 86.0], [5.6, 86.0], [5.7, 87.0], [5.8, 87.0], [5.9, 88.0], [6.0, 88.0], [6.1, 89.0], [6.2, 89.0], [6.3, 89.0], [6.4, 90.0], [6.5, 90.0], [6.6, 90.0], [6.7, 91.0], [6.8, 91.0], [6.9, 91.0], [7.0, 92.0], [7.1, 92.0], [7.2, 92.0], [7.3, 92.0], [7.4, 92.0], [7.5, 93.0], [7.6, 93.0], [7.7, 93.0], [7.8, 94.0], [7.9, 94.0], [8.0, 94.0], [8.1, 95.0], [8.2, 95.0], [8.3, 95.0], [8.4, 96.0], [8.5, 96.0], [8.6, 96.0], [8.7, 97.0], [8.8, 97.0], [8.9, 97.0], [9.0, 97.0], [9.1, 98.0], [9.2, 98.0], [9.3, 98.0], [9.4, 98.0], [9.5, 98.0], [9.6, 98.0], [9.7, 99.0], [9.8, 99.0], [9.9, 99.0], [10.0, 99.0], [10.1, 99.0], [10.2, 99.0], [10.3, 100.0], [10.4, 100.0], [10.5, 100.0], [10.6, 100.0], [10.7, 101.0], [10.8, 101.0], [10.9, 101.0], [11.0, 101.0], [11.1, 102.0], [11.2, 102.0], [11.3, 102.0], [11.4, 102.0], [11.5, 103.0], [11.6, 103.0], [11.7, 104.0], [11.8, 104.0], [11.9, 105.0], [12.0, 105.0], [12.1, 105.0], [12.2, 106.0], [12.3, 106.0], [12.4, 106.0], [12.5, 106.0], [12.6, 107.0], [12.7, 107.0], [12.8, 107.0], [12.9, 107.0], [13.0, 108.0], [13.1, 108.0], [13.2, 108.0], [13.3, 109.0], [13.4, 109.0], [13.5, 109.0], [13.6, 109.0], [13.7, 110.0], [13.8, 110.0], [13.9, 110.0], [14.0, 110.0], [14.1, 111.0], [14.2, 111.0], [14.3, 111.0], [14.4, 112.0], [14.5, 112.0], [14.6, 112.0], [14.7, 113.0], [14.8, 113.0], [14.9, 113.0], [15.0, 113.0], [15.1, 113.0], [15.2, 114.0], [15.3, 114.0], [15.4, 114.0], [15.5, 114.0], [15.6, 115.0], [15.7, 115.0], [15.8, 115.0], [15.9, 115.0], [16.0, 116.0], [16.1, 116.0], [16.2, 116.0], [16.3, 116.0], [16.4, 117.0], [16.5, 117.0], [16.6, 118.0], [16.7, 118.0], [16.8, 118.0], [16.9, 119.0], [17.0, 119.0], [17.1, 119.0], [17.2, 119.0], [17.3, 120.0], [17.4, 120.0], [17.5, 120.0], [17.6, 120.0], [17.7, 120.0], [17.8, 120.0], [17.9, 120.0], [18.0, 121.0], [18.1, 121.0], [18.2, 121.0], [18.3, 121.0], [18.4, 122.0], [18.5, 122.0], [18.6, 122.0], [18.7, 122.0], [18.8, 122.0], [18.9, 122.0], [19.0, 123.0], [19.1, 123.0], [19.2, 123.0], [19.3, 123.0], [19.4, 123.0], [19.5, 124.0], [19.6, 124.0], [19.7, 124.0], [19.8, 124.0], [19.9, 124.0], [20.0, 124.0], [20.1, 124.0], [20.2, 124.0], [20.3, 125.0], [20.4, 125.0], [20.5, 125.0], [20.6, 125.0], [20.7, 125.0], [20.8, 125.0], [20.9, 126.0], [21.0, 126.0], [21.1, 126.0], [21.2, 126.0], [21.3, 127.0], [21.4, 127.0], [21.5, 127.0], [21.6, 127.0], [21.7, 128.0], [21.8, 128.0], [21.9, 128.0], [22.0, 128.0], [22.1, 128.0], [22.2, 128.0], [22.3, 129.0], [22.4, 129.0], [22.5, 129.0], [22.6, 129.0], [22.7, 129.0], [22.8, 129.0], [22.9, 129.0], [23.0, 130.0], [23.1, 130.0], [23.2, 130.0], [23.3, 130.0], [23.4, 130.0], [23.5, 130.0], [23.6, 130.0], [23.7, 130.0], [23.8, 130.0], [23.9, 130.0], [24.0, 131.0], [24.1, 131.0], [24.2, 131.0], [24.3, 131.0], [24.4, 131.0], [24.5, 131.0], [24.6, 131.0], [24.7, 132.0], [24.8, 132.0], [24.9, 132.0], [25.0, 132.0], [25.1, 132.0], [25.2, 132.0], [25.3, 132.0], [25.4, 132.0], [25.5, 132.0], [25.6, 133.0], [25.7, 133.0], [25.8, 133.0], [25.9, 133.0], [26.0, 133.0], [26.1, 133.0], [26.2, 133.0], [26.3, 133.0], [26.4, 133.0], [26.5, 133.0], [26.6, 133.0], [26.7, 134.0], [26.8, 134.0], [26.9, 134.0], [27.0, 134.0], [27.1, 134.0], [27.2, 134.0], [27.3, 134.0], [27.4, 134.0], [27.5, 134.0], [27.6, 134.0], [27.7, 135.0], [27.8, 135.0], [27.9, 135.0], [28.0, 135.0], [28.1, 135.0], [28.2, 135.0], [28.3, 135.0], [28.4, 135.0], [28.5, 135.0], [28.6, 135.0], [28.7, 135.0], [28.8, 135.0], [28.9, 135.0], [29.0, 135.0], [29.1, 136.0], [29.2, 136.0], [29.3, 136.0], [29.4, 136.0], [29.5, 136.0], [29.6, 136.0], [29.7, 136.0], [29.8, 136.0], [29.9, 136.0], [30.0, 136.0], [30.1, 136.0], [30.2, 136.0], [30.3, 136.0], [30.4, 136.0], [30.5, 137.0], [30.6, 137.0], [30.7, 137.0], [30.8, 137.0], [30.9, 137.0], [31.0, 137.0], [31.1, 137.0], [31.2, 137.0], [31.3, 137.0], [31.4, 137.0], [31.5, 137.0], [31.6, 138.0], [31.7, 138.0], [31.8, 138.0], [31.9, 138.0], [32.0, 138.0], [32.1, 138.0], [32.2, 138.0], [32.3, 138.0], [32.4, 138.0], [32.5, 138.0], [32.6, 138.0], [32.7, 138.0], [32.8, 138.0], [32.9, 138.0], [33.0, 139.0], [33.1, 139.0], [33.2, 139.0], [33.3, 139.0], [33.4, 139.0], [33.5, 139.0], [33.6, 139.0], [33.7, 139.0], [33.8, 139.0], [33.9, 139.0], [34.0, 139.0], [34.1, 139.0], [34.2, 139.0], [34.3, 139.0], [34.4, 139.0], [34.5, 139.0], [34.6, 140.0], [34.7, 140.0], [34.8, 140.0], [34.9, 140.0], [35.0, 140.0], [35.1, 140.0], [35.2, 140.0], [35.3, 140.0], [35.4, 141.0], [35.5, 141.0], [35.6, 141.0], [35.7, 141.0], [35.8, 141.0], [35.9, 141.0], [36.0, 141.0], [36.1, 141.0], [36.2, 142.0], [36.3, 142.0], [36.4, 142.0], [36.5, 142.0], [36.6, 142.0], [36.7, 142.0], [36.8, 142.0], [36.9, 142.0], [37.0, 142.0], [37.1, 142.0], [37.2, 142.0], [37.3, 143.0], [37.4, 143.0], [37.5, 143.0], [37.6, 143.0], [37.7, 143.0], [37.8, 143.0], [37.9, 143.0], [38.0, 143.0], [38.1, 143.0], [38.2, 143.0], [38.3, 143.0], [38.4, 143.0], [38.5, 143.0], [38.6, 144.0], [38.7, 144.0], [38.8, 144.0], [38.9, 144.0], [39.0, 144.0], [39.1, 144.0], [39.2, 144.0], [39.3, 144.0], [39.4, 144.0], [39.5, 144.0], [39.6, 144.0], [39.7, 145.0], [39.8, 145.0], [39.9, 145.0], [40.0, 145.0], [40.1, 145.0], [40.2, 145.0], [40.3, 145.0], [40.4, 145.0], [40.5, 145.0], [40.6, 145.0], [40.7, 145.0], [40.8, 145.0], [40.9, 145.0], [41.0, 145.0], [41.1, 145.0], [41.2, 145.0], [41.3, 146.0], [41.4, 146.0], [41.5, 146.0], [41.6, 146.0], [41.7, 146.0], [41.8, 146.0], [41.9, 146.0], [42.0, 146.0], [42.1, 146.0], [42.2, 147.0], [42.3, 147.0], [42.4, 147.0], [42.5, 147.0], [42.6, 147.0], [42.7, 147.0], [42.8, 147.0], [42.9, 148.0], [43.0, 148.0], [43.1, 148.0], [43.2, 148.0], [43.3, 148.0], [43.4, 148.0], [43.5, 148.0], [43.6, 149.0], [43.7, 149.0], [43.8, 149.0], [43.9, 149.0], [44.0, 149.0], [44.1, 149.0], [44.2, 149.0], [44.3, 150.0], [44.4, 150.0], [44.5, 150.0], [44.6, 150.0], [44.7, 150.0], [44.8, 150.0], [44.9, 150.0], [45.0, 151.0], [45.1, 151.0], [45.2, 151.0], [45.3, 151.0], [45.4, 151.0], [45.5, 151.0], [45.6, 151.0], [45.7, 151.0], [45.8, 151.0], [45.9, 151.0], [46.0, 151.0], [46.1, 152.0], [46.2, 152.0], [46.3, 152.0], [46.4, 152.0], [46.5, 152.0], [46.6, 152.0], [46.7, 152.0], [46.8, 152.0], [46.9, 153.0], [47.0, 153.0], [47.1, 153.0], [47.2, 153.0], [47.3, 153.0], [47.4, 153.0], [47.5, 153.0], [47.6, 153.0], [47.7, 154.0], [47.8, 154.0], [47.9, 154.0], [48.0, 154.0], [48.1, 154.0], [48.2, 154.0], [48.3, 154.0], [48.4, 155.0], [48.5, 155.0], [48.6, 155.0], [48.7, 155.0], [48.8, 155.0], [48.9, 155.0], [49.0, 156.0], [49.1, 156.0], [49.2, 156.0], [49.3, 156.0], [49.4, 156.0], [49.5, 156.0], [49.6, 156.0], [49.7, 157.0], [49.8, 157.0], [49.9, 157.0], [50.0, 157.0], [50.1, 157.0], [50.2, 157.0], [50.3, 157.0], [50.4, 157.0], [50.5, 158.0], [50.6, 158.0], [50.7, 158.0], [50.8, 158.0], [50.9, 158.0], [51.0, 158.0], [51.1, 158.0], [51.2, 159.0], [51.3, 159.0], [51.4, 159.0], [51.5, 159.0], [51.6, 159.0], [51.7, 160.0], [51.8, 160.0], [51.9, 160.0], [52.0, 161.0], [52.1, 161.0], [52.2, 161.0], [52.3, 162.0], [52.4, 162.0], [52.5, 162.0], [52.6, 162.0], [52.7, 163.0], [52.8, 163.0], [52.9, 163.0], [53.0, 164.0], [53.1, 164.0], [53.2, 164.0], [53.3, 165.0], [53.4, 165.0], [53.5, 166.0], [53.6, 166.0], [53.7, 166.0], [53.8, 166.0], [53.9, 167.0], [54.0, 167.0], [54.1, 167.0], [54.2, 167.0], [54.3, 168.0], [54.4, 168.0], [54.5, 168.0], [54.6, 169.0], [54.7, 169.0], [54.8, 170.0], [54.9, 170.0], [55.0, 170.0], [55.1, 171.0], [55.2, 171.0], [55.3, 171.0], [55.4, 172.0], [55.5, 172.0], [55.6, 173.0], [55.7, 173.0], [55.8, 173.0], [55.9, 174.0], [56.0, 174.0], [56.1, 175.0], [56.2, 175.0], [56.3, 176.0], [56.4, 177.0], [56.5, 177.0], [56.6, 179.0], [56.7, 179.0], [56.8, 180.0], [56.9, 181.0], [57.0, 182.0], [57.1, 184.0], [57.2, 187.0], [57.3, 188.0], [57.4, 188.0], [57.5, 189.0], [57.6, 190.0], [57.7, 190.0], [57.8, 190.0], [57.9, 191.0], [58.0, 191.0], [58.1, 191.0], [58.2, 192.0], [58.3, 192.0], [58.4, 193.0], [58.5, 195.0], [58.6, 195.0], [58.7, 196.0], [58.8, 198.0], [58.9, 199.0], [59.0, 200.0], [59.1, 202.0], [59.2, 202.0], [59.3, 203.0], [59.4, 203.0], [59.5, 205.0], [59.6, 208.0], [59.7, 209.0], [59.8, 211.0], [59.9, 211.0], [60.0, 212.0], [60.1, 213.0], [60.2, 214.0], [60.3, 215.0], [60.4, 217.0], [60.5, 217.0], [60.6, 218.0], [60.7, 218.0], [60.8, 218.0], [60.9, 219.0], [61.0, 220.0], [61.1, 221.0], [61.2, 222.0], [61.3, 223.0], [61.4, 224.0], [61.5, 224.0], [61.6, 224.0], [61.7, 225.0], [61.8, 225.0], [61.9, 225.0], [62.0, 226.0], [62.1, 226.0], [62.2, 228.0], [62.3, 229.0], [62.4, 230.0], [62.5, 230.0], [62.6, 233.0], [62.7, 235.0], [62.8, 237.0], [62.9, 238.0], [63.0, 239.0], [63.1, 241.0], [63.2, 242.0], [63.3, 244.0], [63.4, 245.0], [63.5, 246.0], [63.6, 248.0], [63.7, 249.0], [63.8, 250.0], [63.9, 251.0], [64.0, 252.0], [64.1, 253.0], [64.2, 254.0], [64.3, 254.0], [64.4, 255.0], [64.5, 256.0], [64.6, 257.0], [64.7, 260.0], [64.8, 262.0], [64.9, 264.0], [65.0, 264.0], [65.1, 265.0], [65.2, 265.0], [65.3, 266.0], [65.4, 267.0], [65.5, 268.0], [65.6, 274.0], [65.7, 276.0], [65.8, 280.0], [65.9, 281.0], [66.0, 282.0], [66.1, 282.0], [66.2, 282.0], [66.3, 283.0], [66.4, 283.0], [66.5, 285.0], [66.6, 285.0], [66.7, 286.0], [66.8, 286.0], [66.9, 287.0], [67.0, 288.0], [67.1, 289.0], [67.2, 290.0], [67.3, 291.0], [67.4, 295.0], [67.5, 302.0], [67.6, 314.0], [67.7, 336.0], [67.8, 356.0], [67.9, 371.0], [68.0, 382.0], [68.1, 389.0], [68.2, 418.0], [68.3, 427.0], [68.4, 457.0], [68.5, 499.0], [68.6, 600.0], [68.7, 604.0], [68.8, 605.0], [68.9, 606.0], [69.0, 622.0], [69.1, 623.0], [69.2, 624.0], [69.3, 687.0], [69.4, 719.0], [69.5, 750.0], [69.6, 785.0], [69.7, 847.0], [69.8, 884.0], [69.9, 933.0], [70.0, 1001.0], [70.1, 1040.0], [70.2, 1061.0], [70.3, 1072.0], [70.4, 1080.0], [70.5, 1094.0], [70.6, 1103.0], [70.7, 1110.0], [70.8, 1136.0], [70.9, 1180.0], [71.0, 1237.0], [71.1, 1270.0], [71.2, 1294.0], [71.3, 1312.0], [71.4, 1355.0], [71.5, 1383.0], [71.6, 1465.0], [71.7, 1555.0], [71.8, 1572.0], [71.9, 1714.0], [72.0, 1812.0], [72.1, 1829.0], [72.2, 1921.0], [72.3, 2001.0], [72.4, 2052.0], [72.5, 2114.0], [72.6, 2143.0], [72.7, 2162.0], [72.8, 2188.0], [72.9, 2214.0], [73.0, 2240.0], [73.1, 2264.0], [73.2, 2371.0], [73.3, 2415.0], [73.4, 2452.0], [73.5, 2486.0], [73.6, 2615.0], [73.7, 2714.0], [73.8, 2859.0], [73.9, 2921.0], [74.0, 2981.0], [74.1, 3048.0], [74.2, 3184.0], [74.3, 3262.0], [74.4, 3323.0], [74.5, 3382.0], [74.6, 3471.0], [74.7, 3565.0], [74.8, 3602.0], [74.9, 3784.0], [75.0, 3977.0], [75.1, 4011.0], [75.2, 4115.0], [75.3, 4179.0], [75.4, 4209.0], [75.5, 4300.0], [75.6, 4358.0], [75.7, 4413.0], [75.8, 4496.0], [75.9, 4683.0], [76.0, 4942.0], [76.1, 5051.0], [76.2, 5107.0], [76.3, 5197.0], [76.4, 5359.0], [76.5, 5449.0], [76.6, 5458.0], [76.7, 5528.0], [76.8, 5673.0], [76.9, 6005.0], [77.0, 6035.0], [77.1, 6115.0], [77.2, 6169.0], [77.3, 6299.0], [77.4, 6377.0], [77.5, 6453.0], [77.6, 6490.0], [77.7, 6499.0], [77.8, 6559.0], [77.9, 6630.0], [78.0, 6851.0], [78.1, 6913.0], [78.2, 6958.0], [78.3, 7010.0], [78.4, 7030.0], [78.5, 7037.0], [78.6, 7044.0], [78.7, 7151.0], [78.8, 7365.0], [78.9, 7523.0], [79.0, 7548.0], [79.1, 7745.0], [79.2, 7770.0], [79.3, 7795.0], [79.4, 7824.0], [79.5, 7848.0], [79.6, 7873.0], [79.7, 8043.0], [79.8, 8289.0], [79.9, 8371.0], [80.0, 8563.0], [80.1, 8678.0], [80.2, 8835.0], [80.3, 8885.0], [80.4, 9054.0], [80.5, 9116.0], [80.6, 9370.0], [80.7, 9397.0], [80.8, 9663.0], [80.9, 9796.0], [81.0, 9942.0], [81.1, 10078.0], [81.2, 10125.0], [81.3, 10286.0], [81.4, 10483.0], [81.5, 10666.0], [81.6, 10841.0], [81.7, 11105.0], [81.8, 11154.0], [81.9, 11300.0], [82.0, 11351.0], [82.1, 11558.0], [82.2, 11847.0], [82.3, 11899.0], [82.4, 11904.0], [82.5, 11937.0], [82.6, 11967.0], [82.7, 11994.0], [82.8, 12106.0], [82.9, 12149.0], [83.0, 12178.0], [83.1, 12199.0], [83.2, 12215.0], [83.3, 12221.0], [83.4, 12243.0], [83.5, 12280.0], [83.6, 12290.0], [83.7, 12392.0], [83.8, 12443.0], [83.9, 12502.0], [84.0, 12504.0], [84.1, 12506.0], [84.2, 12548.0], [84.3, 12561.0], [84.4, 12572.0], [84.5, 12591.0], [84.6, 12618.0], [84.7, 12635.0], [84.8, 12646.0], [84.9, 12648.0], [85.0, 12723.0], [85.1, 12879.0], [85.2, 12920.0], [85.3, 13103.0], [85.4, 13210.0], [85.5, 13219.0], [85.6, 13342.0], [85.7, 13344.0], [85.8, 13345.0], [85.9, 13439.0], [86.0, 13574.0], [86.1, 13654.0], [86.2, 13821.0], [86.3, 13922.0], [86.4, 13934.0], [86.5, 13943.0], [86.6, 13964.0], [86.7, 13970.0], [86.8, 14019.0], [86.9, 14029.0], [87.0, 14037.0], [87.1, 14047.0], [87.2, 14051.0], [87.3, 14063.0], [87.4, 14092.0], [87.5, 14099.0], [87.6, 14104.0], [87.7, 14113.0], [87.8, 14135.0], [87.9, 14188.0], [88.0, 14226.0], [88.1, 14236.0], [88.2, 14238.0], [88.3, 14297.0], [88.4, 14300.0], [88.5, 14303.0], [88.6, 14357.0], [88.7, 14445.0], [88.8, 14446.0], [88.9, 14448.0], [89.0, 14548.0], [89.1, 14740.0], [89.2, 14843.0], [89.3, 14858.0], [89.4, 14862.0], [89.5, 14863.0], [89.6, 14881.0], [89.7, 14895.0], [89.8, 14934.0], [89.9, 14937.0], [90.0, 14956.0], [90.1, 14988.0], [90.2, 15217.0], [90.3, 15478.0], [90.4, 15655.0], [90.5, 15658.0], [90.6, 15711.0], [90.7, 16083.0], [90.8, 16199.0], [90.9, 16231.0], [91.0, 16298.0], [91.1, 16301.0], [91.2, 16322.0], [91.3, 16542.0], [91.4, 16546.0], [91.5, 16547.0], [91.6, 16634.0], [91.7, 16789.0], [91.8, 16877.0], [91.9, 17112.0], [92.0, 17412.0], [92.1, 17727.0], [92.2, 17836.0], [92.3, 18987.0], [92.4, 19843.0], [92.5, 20069.0], [92.6, 20115.0], [92.7, 20123.0], [92.8, 20259.0], [92.9, 20675.0], [93.0, 20926.0], [93.1, 21201.0], [93.2, 21556.0], [93.3, 21784.0], [93.4, 22054.0], [93.5, 22231.0], [93.6, 22724.0], [93.7, 23322.0], [93.8, 23635.0], [93.9, 24300.0], [94.0, 24358.0], [94.1, 24377.0], [94.2, 25950.0], [94.3, 26741.0], [94.4, 27345.0], [94.5, 27776.0], [94.6, 28235.0], [94.7, 28676.0], [94.8, 29379.0], [94.9, 30925.0], [95.0, 31478.0], [95.1, 32209.0], [95.2, 33973.0], [95.3, 35281.0], [95.4, 35323.0], [95.5, 36392.0], [95.6, 37617.0], [95.7, 40188.0], [95.8, 40689.0], [95.9, 43329.0], [96.0, 45426.0], [96.1, 46715.0], [96.2, 46789.0], [96.3, 49970.0], [96.4, 52173.0], [96.5, 54422.0], [96.6, 60736.0], [96.7, 64186.0], [96.8, 64785.0], [96.9, 65230.0], [97.0, 65884.0], [97.1, 66287.0], [97.2, 67930.0], [97.3, 74103.0], [97.4, 75279.0], [97.5, 81169.0], [97.6, 82354.0], [97.7, 92095.0], [97.8, 100022.0], [97.9, 100076.0], [98.0, 100091.0], [98.1, 100123.0], [98.2, 100133.0], [98.3, 100149.0], [98.4, 100160.0], [98.5, 100186.0], [98.6, 100272.0], [98.7, 101022.0], [98.8, 117629.0], [98.9, 127395.0], [99.0, 127657.0], [99.1, 128415.0], [99.2, 129224.0], [99.3, 129366.0], [99.4, 131934.0], [99.5, 135304.0], [99.6, 136723.0], [99.7, 139037.0], [99.8, 144880.0], [99.9, 147298.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 29326.0, "series": [{"data": [[0.0, 6189.0], [135200.0, 13.0], [144800.0, 8.0], [136100.0, 2.0], [139300.0, 1.0], [66700.0, 11.0], [73100.0, 2.0], [74700.0, 1.0], [81100.0, 3.0], [85900.0, 4.0], [97100.0, 1.0], [98700.0, 1.0], [105100.0, 1.0], [129100.0, 30.0], [130700.0, 2.0], [127500.0, 1.0], [137000.0, 1.0], [149800.0, 13.0], [100.0, 29326.0], [33700.0, 17.0], [36100.0, 2.0], [35300.0, 61.0], [38500.0, 5.0], [40100.0, 12.0], [43300.0, 7.0], [44900.0, 1.0], [45700.0, 3.0], [49700.0, 2.0], [50500.0, 5.0], [200.0, 5116.0], [52100.0, 6.0], [53700.0, 3.0], [54500.0, 1.0], [55300.0, 4.0], [64900.0, 11.0], [64100.0, 25.0], [69000.0, 1.0], [65800.0, 1.0], [72200.0, 3.0], [300.0, 373.0], [77000.0, 2.0], [73800.0, 1.0], [81800.0, 2.0], [80200.0, 2.0], [101000.0, 46.0], [400.0, 235.0], [118600.0, 1.0], [500.0, 54.0], [600.0, 433.0], [151600.0, 2.0], [700.0, 178.0], [800.0, 135.0], [900.0, 101.0], [1000.0, 348.0], [1100.0, 223.0], [1200.0, 168.0], [1300.0, 167.0], [1400.0, 82.0], [1500.0, 106.0], [1600.0, 41.0], [1700.0, 59.0], [1800.0, 129.0], [1900.0, 55.0], [2000.0, 113.0], [2100.0, 216.0], [136500.0, 3.0], [2300.0, 93.0], [2200.0, 179.0], [2400.0, 134.0], [2500.0, 45.0], [2600.0, 67.0], [2800.0, 38.0], [2700.0, 47.0], [2900.0, 116.0], [3000.0, 53.0], [3100.0, 52.0], [3300.0, 124.0], [3200.0, 79.0], [3400.0, 50.0], [3500.0, 99.0], [3600.0, 25.0], [3700.0, 47.0], [3800.0, 51.0], [3900.0, 52.0], [4000.0, 53.0], [4200.0, 70.0], [4100.0, 128.0], [4300.0, 105.0], [68100.0, 2.0], [66500.0, 24.0], [4400.0, 78.0], [69700.0, 1.0], [4500.0, 36.0], [4600.0, 32.0], [4800.0, 23.0], [76100.0, 7.0], [4700.0, 21.0], [4900.0, 40.0], [79300.0, 2.0], [5100.0, 69.0], [5000.0, 81.0], [80900.0, 2.0], [5300.0, 24.0], [5200.0, 42.0], [5400.0, 159.0], [5500.0, 38.0], [5600.0, 44.0], [5700.0, 23.0], [5800.0, 24.0], [6000.0, 108.0], [6100.0, 89.0], [5900.0, 5.0], [95300.0, 3.0], [6300.0, 72.0], [100100.0, 305.0], [6200.0, 45.0], [6400.0, 173.0], [6500.0, 84.0], [6600.0, 50.0], [6900.0, 143.0], [6800.0, 38.0], [6700.0, 26.0], [7000.0, 223.0], [7100.0, 48.0], [7400.0, 34.0], [7200.0, 28.0], [7300.0, 26.0], [117700.0, 12.0], [7500.0, 90.0], [7600.0, 33.0], [7800.0, 205.0], [7700.0, 150.0], [7900.0, 11.0], [8000.0, 57.0], [8100.0, 3.0], [127300.0, 35.0], [8200.0, 17.0], [8600.0, 48.0], [8400.0, 26.0], [8800.0, 103.0], [9000.0, 67.0], [9200.0, 34.0], [9400.0, 25.0], [9600.0, 27.0], [10200.0, 45.0], [10000.0, 93.0], [9800.0, 35.0], [10600.0, 52.0], [10400.0, 62.0], [11200.0, 42.0], [11000.0, 11.0], [10800.0, 32.0], [11400.0, 5.0], [11600.0, 21.0], [12200.0, 318.0], [12000.0, 54.0], [11800.0, 78.0], [12400.0, 90.0], [12600.0, 245.0], [13200.0, 125.0], [12800.0, 77.0], [13000.0, 37.0], [13400.0, 46.0], [13600.0, 102.0], [13800.0, 52.0], [14200.0, 286.0], [14000.0, 474.0], [14400.0, 189.0], [14800.0, 335.0], [14600.0, 1.0], [15200.0, 13.0], [15000.0, 46.0], [15400.0, 59.0], [15600.0, 121.0], [15800.0, 5.0], [16000.0, 22.0], [16200.0, 131.0], [17200.0, 24.0], [16400.0, 9.0], [16800.0, 56.0], [18000.0, 8.0], [17600.0, 24.0], [18400.0, 7.0], [18800.0, 5.0], [19200.0, 4.0], [20000.0, 67.0], [19600.0, 3.0], [20800.0, 32.0], [21200.0, 2.0], [21600.0, 36.0], [22400.0, 3.0], [22000.0, 28.0], [22800.0, 15.0], [23200.0, 10.0], [24400.0, 2.0], [23600.0, 13.0], [25200.0, 6.0], [24800.0, 2.0], [26400.0, 2.0], [25600.0, 5.0], [27600.0, 17.0], [27200.0, 13.0], [26800.0, 2.0], [28000.0, 9.0], [28400.0, 2.0], [28800.0, 7.0], [29200.0, 23.0], [30800.0, 7.0], [31200.0, 22.0], [31600.0, 1.0], [32000.0, 26.0], [34400.0, 4.0], [33600.0, 1.0], [131900.0, 21.0], [135100.0, 16.0], [138300.0, 1.0], [32800.0, 8.0], [36000.0, 8.0], [36800.0, 4.0], [35200.0, 42.0], [37600.0, 3.0], [39200.0, 2.0], [40800.0, 4.0], [41600.0, 10.0], [44800.0, 4.0], [46400.0, 2.0], [48000.0, 1.0], [52800.0, 2.0], [52000.0, 2.0], [53600.0, 2.0], [54400.0, 25.0], [56800.0, 2.0], [60800.0, 23.0], [60000.0, 7.0], [63200.0, 1.0], [64000.0, 2.0], [64800.0, 3.0], [65600.0, 3.0], [68800.0, 1.0], [70400.0, 1.0], [72000.0, 1.0], [75200.0, 59.0], [78400.0, 3.0], [84800.0, 1.0], [89600.0, 2.0], [96000.0, 2.0], [94400.0, 1.0], [102400.0, 1.0], [147200.0, 11.0], [135300.0, 13.0], [144900.0, 8.0], [68700.0, 2.0], [67100.0, 5.0], [70300.0, 1.0], [75100.0, 5.0], [79900.0, 1.0], [86300.0, 2.0], [94300.0, 2.0], [95900.0, 1.0], [127900.0, 2.0], [136200.0, 1.0], [137100.0, 4.0], [33900.0, 6.0], [34700.0, 8.0], [35500.0, 2.0], [36300.0, 6.0], [37100.0, 5.0], [38700.0, 3.0], [39500.0, 1.0], [46700.0, 92.0], [47500.0, 3.0], [49900.0, 14.0], [52300.0, 6.0], [54700.0, 1.0], [58700.0, 8.0], [64300.0, 5.0], [65100.0, 14.0], [63500.0, 4.0], [66200.0, 45.0], [67800.0, 1.0], [74200.0, 3.0], [75800.0, 1.0], [82200.0, 11.0], [83800.0, 2.0], [90200.0, 5.0], [99800.0, 1.0], [128600.0, 2.0], [132500.0, 1.0], [66900.0, 1.0], [68500.0, 1.0], [71700.0, 1.0], [74900.0, 1.0], [78100.0, 2.0], [82900.0, 2.0], [97300.0, 2.0], [127700.0, 12.0], [129300.0, 42.0], [136600.0, 4.0], [16500.0, 216.0], [16900.0, 16.0], [17300.0, 13.0], [18100.0, 8.0], [17700.0, 51.0], [18500.0, 3.0], [18900.0, 5.0], [19300.0, 2.0], [20100.0, 119.0], [19700.0, 12.0], [20500.0, 13.0], [20900.0, 25.0], [21300.0, 28.0], [22100.0, 31.0], [22500.0, 1.0], [21700.0, 37.0], [22900.0, 2.0], [23300.0, 6.0], [24100.0, 16.0], [23700.0, 3.0], [25700.0, 2.0], [26900.0, 15.0], [27300.0, 44.0], [27700.0, 9.0], [28100.0, 28.0], [29300.0, 12.0], [30900.0, 40.0], [31300.0, 6.0], [31700.0, 14.0], [32500.0, 2.0], [32100.0, 4.0], [33800.0, 1.0], [33000.0, 1.0], [34600.0, 6.0], [36200.0, 11.0], [37800.0, 2.0], [40200.0, 35.0], [39400.0, 1.0], [45000.0, 1.0], [43400.0, 1.0], [44200.0, 1.0], [46600.0, 2.0], [50600.0, 1.0], [52200.0, 6.0], [53800.0, 2.0], [57800.0, 2.0], [61000.0, 2.0], [64200.0, 10.0], [65000.0, 7.0], [69200.0, 2.0], [67600.0, 1.0], [66000.0, 15.0], [70800.0, 1.0], [78800.0, 1.0], [80400.0, 1.0], [82000.0, 1.0], [86800.0, 1.0], [96400.0, 2.0], [128400.0, 7.0], [133600.0, 4.0], [136800.0, 23.0], [149600.0, 13.0], [147300.0, 17.0], [69100.0, 2.0], [65900.0, 1.0], [72300.0, 1.0], [77100.0, 1.0], [78700.0, 4.0], [80300.0, 2.0], [91500.0, 2.0], [97900.0, 2.0], [105900.0, 1.0], [128300.0, 21.0], [136300.0, 37.0], [133100.0, 1.0], [35700.0, 2.0], [36500.0, 2.0], [37300.0, 26.0], [38100.0, 8.0], [40500.0, 1.0], [39700.0, 1.0], [41300.0, 1.0], [42900.0, 2.0], [44500.0, 13.0], [46900.0, 19.0], [48500.0, 2.0], [47700.0, 3.0], [57300.0, 1.0], [58900.0, 1.0], [59700.0, 8.0], [64500.0, 5.0], [63700.0, 3.0], [65300.0, 1.0], [68200.0, 3.0], [66600.0, 1.0], [73000.0, 1.0], [77800.0, 1.0], [85800.0, 1.0], [84200.0, 1.0], [87400.0, 1.0], [95400.0, 2.0], [100200.0, 65.0], [127400.0, 27.0], [65700.0, 8.0], [73700.0, 1.0], [72100.0, 2.0], [80100.0, 1.0], [84900.0, 2.0], [83300.0, 2.0], [96100.0, 2.0], [8700.0, 19.0], [8300.0, 66.0], [132600.0, 5.0], [139000.0, 7.0], [8500.0, 43.0], [8900.0, 19.0], [145400.0, 4.0], [9100.0, 39.0], [9500.0, 19.0], [9700.0, 42.0], [9300.0, 81.0], [10100.0, 39.0], [9900.0, 28.0], [10500.0, 16.0], [10300.0, 3.0], [10700.0, 31.0], [11100.0, 94.0], [10900.0, 15.0], [11500.0, 42.0], [11300.0, 78.0], [11700.0, 20.0], [12100.0, 186.0], [11900.0, 242.0], [12300.0, 49.0], [12500.0, 435.0], [12700.0, 43.0], [13100.0, 34.0], [13300.0, 190.0], [12900.0, 25.0], [13700.0, 6.0], [13500.0, 31.0], [14300.0, 167.0], [13900.0, 290.0], [14100.0, 229.0], [14700.0, 45.0], [14500.0, 53.0], [14900.0, 246.0], [15300.0, 4.0], [15100.0, 1.0], [15500.0, 20.0], [15700.0, 56.0], [16300.0, 100.0], [16100.0, 69.0], [15900.0, 15.0], [16600.0, 54.0], [17000.0, 33.0], [17400.0, 26.0], [18200.0, 5.0], [17800.0, 24.0], [19000.0, 1.0], [19400.0, 15.0], [18600.0, 1.0], [19800.0, 25.0], [20200.0, 64.0], [20600.0, 9.0], [21400.0, 23.0], [21000.0, 11.0], [21800.0, 21.0], [22200.0, 29.0], [23400.0, 2.0], [22600.0, 16.0], [24200.0, 32.0], [23800.0, 4.0], [24600.0, 5.0], [25800.0, 17.0], [26600.0, 42.0], [26200.0, 6.0], [27000.0, 5.0], [27400.0, 1.0], [28200.0, 45.0], [27800.0, 9.0], [28600.0, 31.0], [29400.0, 8.0], [29000.0, 1.0], [29800.0, 8.0], [30600.0, 2.0], [31400.0, 17.0], [32200.0, 11.0], [34800.0, 1.0], [136700.0, 32.0], [34000.0, 3.0], [36400.0, 3.0], [37200.0, 11.0], [38800.0, 7.0], [41200.0, 2.0], [42800.0, 2.0], [46000.0, 2.0], [47600.0, 3.0], [50000.0, 12.0], [50800.0, 24.0], [54800.0, 2.0], [54000.0, 1.0], [58800.0, 1.0], [62000.0, 2.0], [62800.0, 1.0], [65200.0, 71.0], [64400.0, 10.0], [63600.0, 4.0], [68000.0, 1.0], [69600.0, 1.0], [71200.0, 3.0], [72800.0, 4.0], [76000.0, 1.0], [79200.0, 1.0], [80800.0, 1.0], [82400.0, 1.0], [92000.0, 1.0], [96800.0, 1.0], [100000.0, 167.0], [101600.0, 1.0], [98400.0, 1.0], [103200.0, 14.0], [117600.0, 34.0], [139200.0, 19.0], [145600.0, 29.0], [146500.0, 1.0], [149700.0, 14.0], [67900.0, 20.0], [72700.0, 3.0], [74300.0, 1.0], [79100.0, 7.0], [80700.0, 1.0], [82300.0, 64.0], [83900.0, 2.0], [135500.0, 2.0], [34300.0, 2.0], [35100.0, 13.0], [37500.0, 1.0], [38300.0, 7.0], [40700.0, 3.0], [42300.0, 25.0], [44700.0, 4.0], [48700.0, 1.0], [49500.0, 2.0], [51100.0, 2.0], [51900.0, 2.0], [52700.0, 7.0], [53500.0, 1.0], [54300.0, 10.0], [55900.0, 7.0], [60700.0, 5.0], [59900.0, 1.0], [63100.0, 1.0], [61500.0, 1.0], [65500.0, 1.0], [63900.0, 4.0], [64700.0, 11.0], [67000.0, 2.0], [71800.0, 3.0], [70200.0, 1.0], [75000.0, 2.0], [78200.0, 2.0], [87800.0, 1.0], [92600.0, 1.0], [97400.0, 1.0], [100600.0, 23.0], [127800.0, 1.0], [129400.0, 24.0], [131000.0, 6.0], [134100.0, 2.0], [137300.0, 1.0], [140500.0, 4.0], [66100.0, 2.0], [67700.0, 1.0], [74100.0, 1.0], [85300.0, 1.0], [86900.0, 3.0], [90100.0, 1.0], [93300.0, 2.0], [99700.0, 2.0], [128500.0, 16.0], [135000.0, 1.0], [144600.0, 3.0], [16700.0, 25.0], [17100.0, 17.0], [17500.0, 18.0], [18300.0, 2.0], [17900.0, 5.0], [19100.0, 11.0], [18700.0, 2.0], [20300.0, 4.0], [19500.0, 8.0], [19900.0, 5.0], [21500.0, 14.0], [20700.0, 17.0], [21100.0, 32.0], [22300.0, 24.0], [21900.0, 8.0], [23100.0, 9.0], [22700.0, 21.0], [23500.0, 47.0], [24300.0, 132.0], [25100.0, 8.0], [24700.0, 1.0], [26300.0, 2.0], [25900.0, 3.0], [26700.0, 8.0], [27100.0, 11.0], [27500.0, 4.0], [27900.0, 4.0], [28300.0, 8.0], [29100.0, 2.0], [29500.0, 12.0], [31100.0, 8.0], [32300.0, 1.0], [32700.0, 14.0], [31900.0, 1.0], [33400.0, 2.0], [132700.0, 6.0], [139100.0, 28.0], [36600.0, 2.0], [35800.0, 3.0], [35000.0, 7.0], [145500.0, 1.0], [38200.0, 7.0], [37400.0, 4.0], [40600.0, 29.0], [39800.0, 2.0], [42200.0, 2.0], [44600.0, 2.0], [43800.0, 30.0], [45400.0, 29.0], [47000.0, 1.0], [47800.0, 4.0], [48600.0, 2.0], [51000.0, 2.0], [52600.0, 1.0], [51800.0, 2.0], [53400.0, 2.0], [55800.0, 1.0], [63000.0, 2.0], [63800.0, 2.0], [73200.0, 1.0], [70000.0, 1.0], [74800.0, 1.0], [81200.0, 3.0], [94000.0, 1.0], [97200.0, 1.0], [98800.0, 2.0], [103600.0, 1.0], [108400.0, 1.0], [129200.0, 36.0], [127600.0, 36.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 151600.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 283.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 41244.0, "series": [{"data": [[0.0, 41244.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 1884.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 16789.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 283.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 349.94699140401144, "minX": 1.68301602E12, "maxY": 3000.0, "series": [{"data": [[1.68301632E12, 2703.603387518463], [1.68301602E12, 3000.0], [1.6830162E12, 3000.0], [1.68301638E12, 349.94699140401144], [1.68301608E12, 3000.0], [1.68301626E12, 3000.0], [1.68301614E12, 3000.0]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68301638E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 26.0, "minX": 1.0, "maxY": 90292.0, "series": [{"data": [[2.0, 28887.0], [3.0, 23323.0], [4.0, 23323.0], [5.0, 23322.0], [6.0, 23318.0], [7.0, 23319.0], [8.0, 23317.0], [9.0, 21995.0], [10.0, 21994.0], [12.0, 19280.0], [13.0, 19279.0], [14.0, 19278.0], [15.0, 24382.0], [16.0, 24376.0], [17.0, 24365.0], [18.0, 24361.0], [19.0, 24361.0], [21.0, 24357.0], [23.0, 24356.0], [24.0, 24354.5], [25.0, 24353.0], [26.0, 24202.0], [27.0, 24186.0], [28.0, 23561.0], [29.0, 23560.0], [31.0, 23560.0], [32.0, 23559.0], [35.0, 23558.5], [34.0, 23558.0], [36.0, 23558.0], [41.0, 23554.0], [40.0, 23766.5], [43.0, 23554.0], [42.0, 23554.0], [45.0, 23552.0], [44.0, 23553.0], [47.0, 23552.0], [46.0, 23552.0], [49.0, 23551.0], [48.0, 23551.0], [50.0, 23550.0], [53.0, 23548.0], [52.0, 23549.5], [55.0, 23548.0], [57.0, 23546.0], [56.0, 23548.0], [59.0, 23545.0], [58.0, 23546.0], [61.0, 23544.0], [60.0, 23544.0], [62.0, 24380.0], [67.0, 24378.0], [66.0, 24379.0], [65.0, 23542.5], [64.0, 23543.0], [70.0, 24378.0], [68.0, 24378.0], [75.0, 24375.0], [74.0, 23540.0], [72.0, 23958.5], [79.0, 24369.0], [78.0, 24369.5], [76.0, 24370.0], [83.0, 23530.0], [82.0, 24367.0], [81.0, 23531.0], [80.0, 24368.0], [85.0, 24365.0], [84.0, 23529.0], [91.0, 24364.0], [90.0, 24364.5], [88.0, 24365.0], [95.0, 24360.0], [94.0, 24361.0], [93.0, 24361.0], [99.0, 24358.0], [98.0, 24358.0], [96.0, 24360.0], [103.0, 24356.0], [102.0, 24356.0], [100.0, 23520.0], [105.0, 24354.0], [104.0, 24355.0], [111.0, 24351.0], [110.0, 24353.0], [109.0, 24353.0], [108.0, 24354.0], [114.0, 24349.0], [112.0, 24350.0], [119.0, 24345.0], [118.0, 24346.0], [117.0, 24348.0], [116.0, 24348.0], [122.0, 24342.0], [121.0, 24342.0], [120.0, 24344.0], [127.0, 24338.0], [126.0, 24340.0], [125.0, 24340.0], [124.0, 24341.0], [135.0, 24331.0], [134.0, 24332.0], [132.0, 24334.0], [131.0, 24335.0], [130.0, 24336.0], [128.0, 24337.0], [143.0, 24313.0], [140.0, 24315.0], [139.0, 24316.0], [138.0, 24323.0], [136.0, 24330.0], [150.0, 24299.0], [149.0, 24299.0], [148.0, 24308.0], [147.0, 24309.0], [146.0, 24311.0], [145.0, 24311.0], [144.0, 24312.0], [159.0, 24260.0], [158.0, 24261.0], [157.0, 24261.0], [156.0, 24264.0], [155.0, 24295.0], [154.0, 24296.25], [167.0, 23269.0], [166.0, 24252.0], [164.0, 24253.0], [163.0, 24253.0], [161.0, 24254.0], [160.0, 24259.0], [175.0, 23206.0], [174.0, 17809.0], [173.0, 19464.0], [172.0, 23207.0], [170.0, 23258.0], [169.0, 23260.0], [168.0, 23268.0], [183.0, 17803.0], [182.0, 17804.0], [181.0, 23201.0], [180.0, 23202.0], [179.0, 17805.0], [178.0, 17806.0], [177.0, 20506.5], [191.0, 17798.0], [190.0, 20498.0], [189.0, 23197.0], [187.0, 17801.0], [186.0, 23198.0], [185.0, 17802.0], [184.0, 24161.0], [199.0, 19447.0], [198.0, 17793.0], [197.0, 17794.0], [196.0, 21320.5], [194.0, 21322.5], [192.0, 17797.0], [207.0, 17779.0], [206.0, 17779.0], [204.0, 17782.0], [203.0, 17784.0], [202.0, 18337.0], [215.0, 18877.0], [214.0, 17775.0], [212.0, 18602.0], [209.0, 18604.0], [222.0, 19414.0], [221.0, 17761.0], [219.0, 18589.0], [218.0, 17763.0], [216.0, 17773.0], [230.0, 17943.0], [229.0, 17959.0], [228.0, 17972.0], [227.0, 18012.0], [226.0, 18495.0], [224.0, 17746.0], [239.0, 21806.0], [238.0, 21807.0], [237.0, 21808.0], [236.0, 17391.0], [234.0, 17117.0], [233.0, 21809.0], [246.0, 17112.0], [245.0, 21804.0], [244.0, 17112.0], [243.0, 21804.0], [242.0, 21804.0], [241.0, 21805.0], [240.0, 21806.0], [255.0, 20122.0], [254.0, 21117.5], [252.0, 17656.0], [251.0, 21802.0], [250.0, 21802.333333333332], [248.0, 21803.0], [259.0, 21797.0], [269.0, 21791.0], [271.0, 21108.0], [268.0, 20953.5], [266.0, 21792.0], [263.0, 21793.0], [262.0, 21793.0], [261.0, 21795.0], [260.0, 21797.0], [258.0, 17655.0], [256.0, 21798.0], [286.0, 21781.5], [287.0, 21781.0], [284.0, 21782.0], [283.0, 21783.5], [281.0, 21785.0], [280.0, 21888.666666666668], [277.0, 21785.0], [276.0, 21786.0], [275.0, 21788.0], [274.0, 21790.0], [273.0, 17647.0], [272.0, 21791.0], [302.0, 21085.0], [303.0, 22077.0], [300.0, 20094.0], [291.0, 21780.5], [290.0, 20942.5], [299.0, 20933.5], [297.0, 22090.0], [296.0, 21779.5], [295.0, 21779.0], [293.0, 22091.0], [292.0, 21780.0], [317.0, 22063.0], [319.0, 20073.0], [316.0, 22064.0], [306.0, 20527.0], [305.0, 22076.0], [304.0, 20089.0], [315.0, 22069.0], [314.0, 20081.0], [313.0, 17067.0], [312.0, 20084.0], [311.0, 22072.0], [310.0, 22073.0], [309.0, 20526.0], [308.0, 21763.0], [334.0, 17050.0], [335.0, 22049.0], [333.0, 22053.0], [332.0, 20064.0], [331.0, 20065.0], [330.0, 21060.0], [328.0, 21744.0], [327.0, 17054.0], [321.0, 22059.0], [320.0, 21066.0], [326.0, 17054.0], [325.0, 14455.0], [324.0, 20390.666666666668], [339.0, 17044.0], [351.0, 21376.333333333332], [348.0, 20053.0], [338.0, 22047.0], [336.0, 21737.0], [347.0, 18546.5], [345.0, 20055.0], [344.0, 17040.0], [343.0, 20056.0], [342.0, 17043.0], [341.0, 14442.0], [340.0, 17045.0], [367.0, 17015.5], [365.0, 20018.4], [361.0, 17017.5], [358.0, 17018.0], [357.0, 17019.0], [356.0, 18219.5], [354.0, 17243.5], [353.0, 14436.0], [380.0, 20004.0], [382.0, 19990.0], [383.0, 21977.0], [381.0, 20004.0], [378.0, 19338.0], [376.0, 21996.0], [375.0, 21997.0], [369.0, 21998.0], [371.0, 16995.0], [370.0, 16997.0], [374.0, 20330.0], [373.0, 14394.0], [387.0, 18892.0], [399.0, 20171.0], [396.0, 20295.0], [395.0, 12443.0], [393.0, 12444.0], [392.0, 16371.0], [390.0, 17853.5], [388.0, 18890.0], [386.0, 21030.5], [384.0, 19900.0], [403.0, 20292.0], [414.0, 14969.333333333334], [415.0, 15036.0], [413.0, 20287.0], [410.0, 17672.333333333332], [407.0, 20165.0], [405.0, 20291.0], [404.0, 12439.0], [402.0, 20293.0], [401.0, 20043.0], [400.0, 20296.0], [419.0, 20285.0], [430.0, 20279.0], [429.0, 20280.5], [426.0, 12428.0], [425.0, 20282.0], [423.0, 12430.0], [422.0, 12430.0], [421.0, 20284.0], [420.0, 20284.0], [418.0, 20286.0], [417.0, 20286.0], [416.0, 20287.0], [446.0, 16335.5], [447.0, 20261.0], [444.0, 20263.0], [434.0, 12422.0], [433.0, 20279.0], [432.0, 20279.0], [443.0, 20267.0], [442.0, 20268.0], [441.0, 20268.0], [440.0, 15018.0], [439.0, 12416.0], [438.0, 12417.0], [437.0, 12418.0], [436.0, 20146.5], [462.0, 16200.0], [463.0, 20249.0], [460.0, 20253.0], [459.0, 20005.0], [458.0, 20172.0], [455.0, 20256.0], [454.0, 20257.0], [453.0, 18294.75], [449.0, 20261.0], [448.0, 12410.0], [478.0, 20237.0], [479.0, 20233.0], [477.0, 12387.5], [467.0, 20246.0], [466.0, 20246.0], [465.0, 12396.0], [464.0, 19999.0], [475.0, 20240.5], [473.0, 18006.0], [472.0, 20244.0], [471.0, 16318.5], [470.0, 12392.0], [468.0, 19997.0], [483.0, 16303.5], [492.0, 16296.5], [490.0, 12371.0], [489.0, 12371.0], [486.0, 20224.0], [485.0, 20225.0], [484.0, 20229.0], [482.0, 12377.0], [481.0, 20230.0], [509.0, 11300.0], [510.0, 11299.0], [508.0, 11300.0], [499.0, 20218.0], [498.0, 16296.166666666666], [496.0, 12370.0], [507.0, 19159.0], [506.0, 11307.0], [505.0, 12802.0], [504.0, 11308.0], [502.0, 17901.0], [501.0, 17903.0], [500.0, 12357.0], [537.0, 10278.0], [542.0, 10275.0], [543.0, 10274.0], [529.0, 10283.0], [528.0, 10283.0], [532.0, 10281.0], [531.0, 10282.5], [541.0, 10277.0], [540.0, 10277.0], [539.0, 10278.5], [536.0, 10279.0], [519.0, 11286.0], [518.0, 14435.0], [516.0, 11292.0], [515.0, 11293.0], [514.0, 11295.0], [513.0, 11296.0], [512.0, 15224.5], [527.0, 10284.0], [526.0, 10285.0], [525.0, 10285.0], [524.0, 10286.0], [523.0, 10287.0], [522.0, 16795.0], [521.0, 16799.0], [520.0, 11283.0], [535.0, 10280.0], [534.0, 11854.5], [573.0, 11366.5], [563.0, 9798.0], [574.0, 9936.0], [560.0, 15832.0], [562.0, 9942.0], [561.0, 12947.0], [571.0, 9937.0], [570.0, 11369.5], [569.0, 9796.0], [551.0, 10265.0], [550.0, 10265.5], [548.0, 13417.0], [547.0, 10268.0], [546.0, 10269.0], [545.0, 10270.0], [544.0, 10272.0], [558.0, 10246.0], [557.0, 10253.0], [556.0, 10402.0], [555.0, 10258.0], [554.0, 10259.0], [553.0, 10262.0], [552.0, 10263.0], [567.0, 9796.0], [566.0, 9798.0], [565.0, 9940.5], [601.0, 9916.0], [606.0, 9911.5], [607.0, 9911.0], [592.0, 12932.0], [594.0, 9783.0], [593.0, 9926.0], [596.0, 12927.0], [595.0, 9779.0], [604.0, 9769.0], [603.0, 12919.0], [602.0, 9915.0], [600.0, 9846.0], [583.0, 9932.333333333334], [580.0, 9788.5], [578.0, 9934.0], [577.0, 12939.0], [576.0, 9863.0], [591.0, 12932.0], [590.0, 12931.0], [589.0, 11360.0], [587.0, 9930.0], [586.0, 9788.0], [584.0, 9931.0], [598.0, 9918.0], [597.0, 9921.0], [633.0, 9855.0], [637.0, 15202.0], [638.0, 12443.0], [625.0, 9876.0], [624.0, 12882.0], [627.0, 9717.0], [626.0, 9875.0], [629.0, 9859.0], [628.0, 9716.0], [636.0, 15204.0], [635.0, 9845.0], [634.0, 12851.0], [632.0, 9856.0], [615.0, 9819.5], [611.0, 9897.0], [610.0, 12902.0], [609.0, 12909.0], [608.0, 9904.0], [623.0, 9878.0], [622.0, 9889.0], [621.0, 11063.2], [618.0, 12896.0], [616.0, 9890.5], [631.0, 9858.0], [630.0, 12864.0], [658.0, 12432.0], [671.0, 11414.666666666666], [668.0, 10414.0], [667.0, 9412.0], [665.0, 9412.333333333334], [653.0, 9434.0], [641.0, 9342.666666666666], [646.0, 10940.0], [644.0, 9294.0], [652.0, 9434.0], [651.0, 12440.0], [650.0, 9436.0], [649.0, 9436.0], [648.0, 10152.5], [661.0, 9416.0], [660.0, 12425.0], [659.0, 9429.0], [657.0, 9433.0], [656.0, 9433.333333333334], [698.0, 8346.5], [690.0, 8819.0], [702.0, 8667.666666666666], [703.0, 15080.0], [689.0, 8819.0], [688.0, 8821.0], [699.0, 7371.0], [696.0, 9857.5], [679.0, 12388.0], [678.0, 12392.0], [677.0, 9248.0], [676.0, 9247.0], [675.0, 9392.0], [674.0, 9394.0], [673.0, 12399.0], [672.0, 9251.0], [687.0, 11829.0], [686.0, 10376.0], [684.0, 9374.0], [682.0, 9378.0], [681.0, 9379.0], [680.0, 12387.0], [694.0, 8355.0], [693.0, 10316.5], [691.0, 8819.0], [734.0, 15067.0], [735.0, 8547.0], [733.0, 12829.0], [732.0, 11888.5], [728.0, 7360.0], [711.0, 11896.5], [709.0, 12839.0], [708.0, 12839.0], [706.0, 8558.0], [705.0, 7368.0], [704.0, 8720.0], [727.0, 11219.2], [722.0, 15070.0], [721.0, 7956.5], [719.0, 11812.0], [717.0, 9268.5], [715.0, 8555.0], [714.0, 10696.0], [713.0, 8717.0], [766.0, 7298.0], [767.0, 8648.0], [765.0, 15007.0], [764.0, 11623.0], [762.0, 8650.5], [760.0, 14787.0], [751.0, 15051.0], [738.0, 10025.666666666666], [743.0, 7355.0], [742.0, 8625.0], [750.0, 8694.0], [749.0, 15052.0], [748.0, 8023.0], [747.0, 8538.0], [745.0, 12819.0], [744.0, 10321.0], [759.0, 8598.5], [757.0, 13420.0], [753.0, 11871.0], [793.0, 7279.0], [787.0, 14996.0], [795.0, 7274.0], [796.0, 10276.0], [785.0, 14997.0], [784.0, 12761.0], [794.0, 14984.0], [792.0, 8472.0], [774.0, 8646.0], [772.0, 15003.0], [771.0, 8646.0], [770.0, 13886.0], [768.0, 8648.0], [783.0, 8641.0], [782.0, 14520.0], [780.0, 8562.0], [778.0, 8482.0], [777.0, 15002.0], [776.0, 12375.5], [791.0, 8475.0], [790.0, 10703.666666666666], [788.0, 8638.0], [829.0, 12126.5], [820.0, 7577.0], [831.0, 12127.5], [816.0, 14960.0], [827.0, 12128.5], [825.0, 12813.0], [815.0, 11781.5], [801.0, 12739.0], [800.0, 10411.75], [803.0, 14012.0], [802.0, 14976.0], [805.0, 14967.0], [804.0, 8610.0], [807.0, 14965.0], [806.0, 8447.0], [813.0, 13842.0], [812.0, 14961.0], [810.0, 8443.0], [809.0, 8444.0], [808.0, 8604.0], [823.0, 7416.0], [822.0, 13374.0], [821.0, 13936.0], [819.0, 11414.5], [817.0, 7250.0], [856.0, 11974.5], [861.0, 12241.0], [862.0, 12241.0], [850.0, 8126.5], [848.0, 12251.0], [860.0, 12242.0], [859.0, 12242.0], [858.0, 12108.0], [847.0, 12252.0], [835.0, 12259.5], [833.0, 11990.5], [837.0, 11990.0], [836.0, 4280.0], [839.0, 4277.0], [838.0, 12258.0], [846.0, 4277.0], [845.0, 8130.5], [843.0, 12256.0], [842.0, 4277.0], [841.0, 12122.0], [855.0, 12245.0], [853.0, 12246.0], [852.0, 11977.0], [851.0, 4268.0], [889.0, 12201.0], [894.0, 12202.0], [895.0, 12194.0], [881.0, 12224.0], [880.0, 12089.0], [884.0, 12086.5], [882.0, 12224.0], [893.0, 12201.0], [892.0, 12202.0], [891.0, 12203.0], [888.0, 12210.0], [871.0, 11966.0], [870.0, 12237.0], [869.0, 12238.0], [868.0, 11968.0], [867.0, 11969.0], [866.0, 12238.0], [865.0, 12105.5], [864.0, 12239.0], [878.0, 11961.0], [877.0, 12097.5], [875.0, 12235.0], [874.0, 12235.0], [873.0, 12235.0], [872.0, 12237.0], [886.0, 12221.0], [885.0, 12221.0], [926.0, 3178.0], [927.0, 3177.0], [913.0, 4186.0], [912.0, 12165.0], [924.0, 3180.0], [923.0, 11161.0], [921.0, 3184.0], [920.0, 11167.0], [911.0, 12169.0], [901.0, 11919.0], [897.0, 12192.5], [903.0, 12185.0], [902.0, 8198.0], [909.0, 4198.0], [908.0, 4207.0], [907.0, 6866.666666666666], [904.0, 4208.0], [919.0, 11168.0], [918.0, 7179.5], [916.0, 7181.5], [914.0, 12151.0], [956.0, 2150.0], [959.0, 2148.0], [944.0, 3160.0], [947.0, 3156.0], [946.0, 3155.5], [949.0, 2172.0], [948.0, 3153.0], [958.0, 2149.0], [957.0, 2150.0], [955.0, 2151.0], [954.0, 2153.0], [953.0, 2153.0], [952.0, 2154.0], [943.0, 3161.0], [929.0, 3176.0], [928.0, 3177.0], [932.0, 3173.0], [931.0, 3174.0], [934.0, 3171.0], [933.0, 11314.0], [942.0, 3163.0], [941.0, 3164.0], [940.0, 3164.5], [938.0, 3165.0], [937.0, 11145.0], [936.0, 3171.0], [951.0, 2154.0], [950.0, 2168.0], [985.0, 1353.0], [990.0, 1346.0], [991.0, 1344.0], [976.0, 1686.0], [978.0, 1357.0], [977.0, 1686.0], [980.0, 1356.0], [979.0, 1357.0], [989.0, 1348.0], [987.0, 1349.0], [986.0, 1350.0], [984.0, 1355.5], [967.0, 2135.0], [966.0, 2143.0], [965.0, 2144.0], [964.0, 2145.0], [963.0, 2145.0], [962.0, 2146.0], [960.0, 2147.0], [975.0, 1687.0], [974.0, 1690.0], [973.0, 1690.0], [972.0, 1690.0], [971.0, 2132.0], [970.0, 2132.0], [969.0, 2133.0], [968.0, 2134.0], [982.0, 1355.0], [981.0, 1357.0], [1020.0, 1091.0], [1023.0, 3750.0], [1009.0, 1247.0], [1008.0, 1292.0], [1011.0, 1246.0], [1010.0, 1247.0], [1013.0, 1157.0], [1012.0, 1247.0], [1022.0, 3751.0], [1021.0, 4093.0], [1019.0, 1094.0], [1018.0, 1096.0], [1017.0, 1096.0], [1016.0, 4102.0], [1007.0, 1292.0], [992.0, 1308.0], [995.0, 1307.0], [994.0, 1308.5], [997.0, 1306.0], [996.0, 1307.0], [999.0, 1303.0], [998.0, 1305.0], [1006.0, 1292.0], [1005.0, 1295.0], [1004.0, 1300.0], [1003.0, 1300.0], [1002.0, 1300.0], [1001.0, 1301.0], [1000.0, 1302.0], [1015.0, 1101.0], [1014.0, 1156.0], [1038.0, 3331.0], [1058.0, 164.0], [1064.0, 164.0], [1062.0, 164.0], [1034.0, 3331.0], [1032.0, 3332.0], [1028.0, 3332.5], [1026.0, 8697.0], [1024.0, 3749.0], [1120.0, 152.33333333333334], [1146.0, 2213.0], [1126.0, 151.9], [1128.0, 2747.0], [1130.0, 7696.0], [1134.0, 2218.5], [1132.0, 2219.0], [1148.0, 2212.0], [1144.0, 2214.0], [1142.0, 2214.0], [1140.0, 2215.5], [1138.0, 2216.0], [1096.0, 154.0], [1100.0, 154.33333333333334], [1112.0, 153.5], [1106.0, 153.25], [1104.0, 154.0], [1208.0, 2165.0], [1186.0, 2184.0], [1184.0, 2185.0], [1188.0, 2181.0], [1190.0, 2181.0], [1194.0, 2179.0], [1198.0, 2177.0], [1212.0, 2160.0], [1210.0, 2161.0], [1206.0, 2166.0], [1204.0, 2167.0], [1202.0, 2170.0], [1200.0, 2170.0], [1166.0, 2200.0], [1160.0, 2204.0], [1158.0, 2205.5], [1156.0, 2206.0], [1152.0, 2211.0], [1182.0, 2191.0], [1180.0, 2192.0], [1178.0, 2196.0], [1176.0, 2196.0], [1172.0, 2198.0], [1224.0, 7243.0], [1220.0, 2144.0], [1218.0, 2154.0], [1380.0, 137.0], [1406.0, 168.0], [1386.0, 161.5], [1384.0, 136.0], [1382.0, 136.25], [1378.0, 136.4], [1376.0, 135.0], [1388.0, 135.625], [1390.0, 132.5], [1402.0, 168.0], [1400.0, 136.0], [1398.0, 216.5], [1396.0, 135.66666666666666], [1394.0, 135.0], [1392.0, 135.4], [1370.0, 136.23529411764707], [1372.0, 136.66666666666666], [1374.0, 136.0], [1510.0, 151.0], [1506.0, 151.0], [1516.0, 150.33333333333334], [1518.0, 151.0], [1514.0, 151.0], [1532.0, 150.0], [1524.0, 151.0], [1522.0, 150.5], [1520.0, 150.77777777777774], [1584.0, 175.0], [1580.0, 175.5], [1540.0, 6145.0], [1538.0, 71.0], [1536.0, 138.0], [1648.0, 130.5], [1656.0, 128.0], [1660.0, 125.0], [1634.0, 135.0], [1644.0, 131.0], [1646.0, 131.66666666666666], [1662.0, 125.0], [1658.0, 125.0], [1654.0, 129.66666666666666], [1612.0, 173.0], [1610.0, 173.03333333333333], [1606.0, 173.33333333333334], [1604.0, 174.0], [1602.0, 174.0], [1600.0, 174.0], [1630.0, 164.25], [1626.0, 171.0], [1624.0, 172.0], [1622.0, 172.0], [1620.0, 172.0], [1618.0, 173.0], [1616.0, 173.0], [1726.0, 2604.0], [1708.0, 155.0], [1700.0, 68.66666666666667], [1710.0, 154.0], [1724.0, 2604.0], [1720.0, 150.0], [1716.0, 152.0], [1676.0, 109.0], [1666.0, 115.0], [1688.0, 108.3], [1784.0, 1660.0], [1788.0, 2891.0], [1760.0, 1951.3333333333333], [1764.0, 2642.3333333333335], [1762.0, 2909.0], [1766.0, 1670.0], [1768.0, 1668.0], [1772.0, 1666.0], [1790.0, 1653.0], [1786.0, 1658.0], [1782.0, 2892.0], [1780.0, 2698.0], [1778.0, 1661.0], [1776.0, 2901.0], [1728.0, 4296.0], [1732.0, 2106.0], [1736.0, 2100.0], [1738.0, 2100.0], [1740.0, 1960.0], [1742.0, 1959.0], [1756.0, 2511.0], [1752.0, 1924.0], [1750.0, 1926.0], [1748.0, 1952.0], [1840.0, 2822.0], [1830.0, 2713.3333333333335], [1842.0, 3703.0], [1824.0, 1618.0], [1826.0, 2453.0], [1806.0, 1634.0], [1804.0, 2482.0], [1796.0, 2885.0], [1794.0, 2886.5], [1792.0, 2886.0], [1820.0, 1900.3333333333333], [1818.0, 2458.0], [1816.0, 2659.0], [1814.0, 2044.5], [1812.0, 2864.0], [1810.0, 1631.0], [1808.0, 2868.0], [1838.0, 2830.0], [1834.0, 2444.0], [1912.0, 130.0], [1916.0, 130.0], [1892.0, 131.0], [1914.0, 130.0], [1900.0, 130.5], [1902.0, 130.0], [1904.0, 130.0], [1882.0, 2641.0], [1908.0, 130.0], [1910.0, 130.0], [1972.0, 106.0], [1970.0, 106.75], [1978.0, 94.0], [1954.0, 126.0], [1952.0, 126.2], [1958.0, 125.0], [1974.0, 105.0], [1950.0, 126.33333333333334], [1948.0, 126.0], [1926.0, 128.0], [1928.0, 128.0], [1962.0, 125.11111111111113], [1960.0, 125.0], [1994.0, 155.0], [1992.0, 92.27272727272728], [1984.0, 93.0], [2112.0, 2141.0], [2136.0, 2115.0], [2132.0, 2062.3333333333335], [2116.0, 2137.0], [2056.0, 2046.0], [2064.0, 168.88888888888889], [2068.0, 146.0], [2104.0, 2146.5], [2100.0, 1230.0], [2092.0, 2228.0], [2080.0, 615.0999999999999], [2288.0, 1218.5], [2280.0, 2259.0], [2248.0, 1449.75], [2260.0, 2261.0], [2292.0, 178.0], [2276.0, 1989.3333333333333], [2196.0, 144.66666666666666], [2204.0, 6661.0], [2236.0, 1179.5], [2228.0, 1180.5], [2216.0, 1189.5], [2364.0, 137.0], [2428.0, 191.0], [2360.0, 138.0], [2344.0, 161.8], [2340.0, 162.0], [2336.0, 162.6], [2424.0, 191.0], [2504.0, 105.5], [2520.0, 64.0], [2432.0, 190.0], [2460.0, 156.0], [2488.0, 115.0], [2484.0, 116.22222222222223], [2468.0, 152.0], [2664.0, 134.0], [2644.0, 135.0], [2648.0, 135.0], [2652.0, 135.0], [2660.0, 155.12500000000003], [2656.0, 135.0], [2588.0, 160.0], [2584.0, 160.0], [2580.0, 161.0], [2688.0, 120.0], [2700.0, 113.25], [2696.0, 113.0], [2692.0, 119.0], [2736.0, 190.0], [2728.0, 100.83333333333334], [2724.0, 75.0], [2720.0, 75.0], [2924.0, 292.3333333333333], [2928.0, 199.0], [2880.0, 1097.0], [2888.0, 1094.0], [2892.0, 1092.0], [2816.0, 157.3], [2824.0, 138.0], [2832.0, 5240.0], [2836.0, 1138.0], [2840.0, 5236.0], [2844.0, 1131.0], [2876.0, 1098.0], [2868.0, 1685.0], [2860.0, 3151.5], [2856.0, 1107.0], [2852.0, 5225.0], [2848.0, 1128.0], [3000.0, 7056.994860678996], [2992.0, 3388.0], [2944.0, 457.0], [2948.0, 456.0], [2964.0, 455.0], [2968.0, 3399.0], [2988.0, 958.5000000000001], [2976.0, 1772.5], [2113.0, 2141.0], [2129.0, 2117.6], [2141.0, 173.0], [2125.0, 2117.0], [2065.0, 146.0], [2069.0, 146.0], [2073.0, 1382.0], [2077.0, 146.0], [2109.0, 2143.5], [2105.0, 2145.0], [2101.0, 1227.0], [2097.0, 2227.0], [2089.0, 46041.5], [2085.0, 1029.8], [2281.0, 1173.0], [2293.0, 178.0], [2241.0, 1178.0], [2253.0, 1177.0], [2197.0, 146.0], [2201.0, 145.0], [2205.0, 2283.0], [2237.0, 1179.0], [2229.0, 1451.125], [2217.0, 1187.0], [2209.0, 6657.5], [2421.0, 191.2], [2369.0, 120.0], [2429.0, 190.42857142857144], [2425.0, 191.4], [2365.0, 124.0], [2357.0, 138.0], [2341.0, 162.0], [2337.0, 163.33333333333334], [2509.0, 104.0], [2505.0, 105.0], [2517.0, 102.66666666666666], [2521.0, 63.0], [2437.0, 190.0], [2441.0, 190.0], [2461.0, 155.0], [2469.0, 152.0], [2465.0, 153.66666666666666], [2665.0, 134.0], [2669.0, 134.0], [2645.0, 135.0], [2653.0, 135.0], [2661.0, 136.0], [2589.0, 159.6], [2585.0, 159.33333333333334], [2581.0, 160.0], [2597.0, 116.5], [2809.0, 157.66666666666666], [2813.0, 158.36363636363637], [2805.0, 158.0], [2693.0, 118.0], [2737.0, 189.0], [2733.0, 138.5], [2921.0, 340.0], [2933.0, 1957.0], [2881.0, 1096.0], [2889.0, 1093.0], [2901.0, 217.0], [2897.0, 227.8], [2917.0, 202.0], [2913.0, 203.5], [2817.0, 157.4], [2821.0, 157.0], [2825.0, 106.0], [2829.0, 2629.5], [2833.0, 5239.0], [2841.0, 5234.0], [2845.0, 5232.0], [2877.0, 1097.5], [2861.0, 2467.333333333333], [2853.0, 1122.0], [2849.0, 5227.0], [2993.0, 138.0], [2953.0, 455.5], [2949.0, 456.0], [2965.0, 1264.142857142857], [2989.0, 140.0], [2985.0, 147.0], [2981.0, 1076.4285714285716], [2977.0, 147.0], [1061.0, 164.0], [1055.0, 165.0], [1043.0, 3328.25], [1039.0, 3330.3333333333335], [1035.0, 3331.5], [1025.0, 8699.0], [1149.0, 2211.5], [1151.0, 2211.5], [1123.0, 152.0], [1127.0, 2768.0], [1129.0, 7699.0], [1131.0, 2219.0], [1145.0, 2213.0], [1137.0, 2218.3333333333335], [1119.0, 152.0], [1095.0, 154.33333333333334], [1097.0, 154.25], [1099.0, 154.0], [1103.0, 154.5], [1101.0, 154.2], [1115.0, 152.0], [1113.0, 153.0], [1111.0, 153.0], [1105.0, 153.0], [1207.0, 2166.0], [1203.0, 2169.0], [1211.0, 2161.0], [1215.0, 2156.0], [1187.0, 2182.0], [1191.0, 2180.0], [1193.0, 2179.0], [1197.0, 2176.0], [1195.0, 2178.0], [1199.0, 2172.0], [1213.0, 2156.0], [1209.0, 2162.0], [1205.0, 2166.0], [1201.0, 2170.0], [1167.0, 2199.0], [1165.0, 2201.0], [1163.0, 2202.0], [1161.0, 2204.0], [1159.0, 2204.0], [1155.0, 2207.5], [1153.0, 2209.0], [1183.0, 2188.0], [1181.0, 2192.0], [1179.0, 2194.0], [1177.0, 2196.0], [1175.0, 2196.0], [1173.0, 2196.0], [1171.0, 2197.75], [1225.0, 7078.0], [1223.0, 2144.0], [1221.0, 2144.0], [1219.0, 2145.0], [1217.0, 2154.5], [1381.0, 136.0], [1401.0, 135.33333333333334], [1387.0, 135.66666666666666], [1385.0, 136.0], [1383.0, 145.75], [1379.0, 135.8], [1377.0, 135.33333333333334], [1389.0, 136.0], [1391.0, 135.75], [1405.0, 149.21739130434784], [1399.0, 135.8], [1395.0, 175.5], [1393.0, 135.5625], [1371.0, 136.75], [1373.0, 137.0], [1535.0, 139.0], [1531.0, 150.75], [1505.0, 152.0], [1509.0, 151.0], [1519.0, 151.33333333333334], [1515.0, 150.66666666666663], [1513.0, 151.43750000000003], [1533.0, 138.0], [1529.0, 150.83333333333334], [1525.0, 150.66666666666666], [1523.0, 150.77777777777774], [1521.0, 151.0], [1599.0, 174.0], [1597.0, 174.0], [1581.0, 175.0], [1579.0, 176.0], [1577.0, 176.0], [1539.0, 6147.0], [1537.0, 138.0], [1661.0, 124.0], [1663.0, 115.0], [1637.0, 134.0], [1643.0, 131.0], [1645.0, 131.0], [1659.0, 125.0], [1657.0, 126.0], [1655.0, 129.0], [1651.0, 130.0], [1649.0, 130.0], [1615.0, 173.0], [1613.0, 173.33333333333334], [1611.0, 172.0], [1607.0, 174.0], [1605.0, 173.75], [1603.0, 174.0], [1601.0, 174.0], [1619.0, 173.0], [1719.0, 151.0], [1717.0, 153.0], [1723.0, 2607.0], [1727.0, 2250.0], [1697.0, 69.0], [1711.0, 154.14285714285714], [1721.0, 150.0], [1715.0, 153.0], [1713.0, 154.0], [1675.0, 109.0], [1665.0, 115.0], [1695.0, 107.0], [1693.0, 108.44444444444444], [1691.0, 108.0], [1687.0, 108.0], [1685.0, 108.66666666666667], [1683.0, 109.0], [1785.0, 2277.0], [1791.0, 2889.0], [1765.0, 1671.0], [1767.0, 1670.0], [1769.0, 1668.0], [1775.0, 2084.0], [1773.0, 2078.6666666666665], [1789.0, 2890.0], [1787.0, 2895.0], [1781.0, 1661.0], [1777.0, 1664.0], [1757.0, 1673.0], [1731.0, 2129.0], [1729.0, 4455.0], [1733.0, 2103.0], [1735.0, 2102.0], [1739.0, 2096.0], [1741.0, 1959.0], [1743.0, 1958.0], [1755.0, 2093.0], [1753.0, 1675.0], [1751.0, 1925.0], [1749.0, 1926.0], [1747.0, 1954.0], [1745.0, 1955.5], [1841.0, 3706.0], [1835.0, 1599.0], [1825.0, 2853.0], [1827.0, 2453.0], [1831.0, 2445.0], [1807.0, 2470.0], [1805.0, 2471.0], [1803.0, 2473.75], [1799.0, 2265.0], [1797.0, 2884.0], [1795.0, 2885.0], [1823.0, 2237.5], [1821.0, 2456.0], [1811.0, 1627.0], [1809.0, 1631.0], [1839.0, 2829.0], [1837.0, 2831.0], [1833.0, 2443.5], [1915.0, 130.0], [1901.0, 130.0], [1905.0, 130.42857142857142], [1907.0, 130.0], [1909.0, 130.0], [1929.0, 128.0], [1979.0, 93.0], [1955.0, 126.0], [1973.0, 106.2], [1949.0, 126.0], [1947.0, 125.5], [1943.0, 126.0], [1951.0, 126.0], [1933.0, 127.2], [1931.0, 127.0], [1963.0, 124.0], [1961.0, 125.25], [1995.0, 152.0], [1993.0, 1438.0], [1989.0, 92.0], [2114.0, 2140.0], [2134.0, 2114.0], [2130.0, 2117.3333333333335], [2118.0, 2137.0], [2070.0, 146.0], [2110.0, 2143.0], [2106.0, 2145.0], [2102.0, 2148.0], [2094.0, 90143.0], [2090.0, 1841.0], [2286.0, 180.33333333333334], [2290.0, 179.0], [2242.0, 1395.4], [2250.0, 1177.0], [2282.0, 270.1818181818182], [2274.0, 1174.0], [2198.0, 145.0], [2206.0, 6660.0], [2234.0, 2265.0], [2218.0, 1187.0], [2214.0, 3011.0], [2318.0, 164.0], [2430.0, 190.0], [2426.0, 191.0], [2346.0, 162.0], [2342.0, 162.0], [2338.0, 162.75], [2518.0, 69.0], [2506.0, 105.0], [2442.0, 190.11111111111111], [2454.0, 168.14285714285714], [2462.0, 154.0], [2466.0, 153.0], [2666.0, 134.0], [2662.0, 215.0], [2650.0, 135.0], [2686.0, 132.0], [2674.0, 133.0], [2658.0, 135.0], [2590.0, 160.0], [2586.0, 159.71428571428572], [2582.0, 159.66666666666666], [2578.0, 161.0], [2570.0, 162.0], [2598.0, 5850.0], [2806.0, 158.4], [2706.0, 101.0], [2814.0, 158.0], [2810.0, 157.83333333333334], [2694.0, 118.0], [2738.0, 26.0], [2734.0, 29.0], [2726.0, 74.0], [2934.0, 469.0], [2918.0, 202.33333333333334], [2890.0, 1092.0], [2902.0, 217.0], [2906.0, 216.0], [2938.0, 1200.0], [2930.0, 269.0], [2926.0, 476.0], [2878.0, 1097.0], [2838.0, 5237.5], [2842.0, 5234.0], [2846.0, 1130.0], [2854.0, 1120.0], [2946.0, 457.25], [2994.0, 137.0], [2990.0, 139.0], [2115.0, 2140.0], [2139.0, 2114.25], [2131.0, 2115.0], [2119.0, 2117.0], [2111.0, 2141.0], [2059.0, 90292.0], [2063.0, 147.0], [2067.0, 146.0], [2079.0, 454.5], [2107.0, 2145.0], [2099.0, 2225.0], [2091.0, 2266.0], [2287.0, 676.0], [2283.0, 179.66666666666666], [2247.0, 1178.0], [2255.0, 1719.0], [2259.0, 1719.5], [2291.0, 179.0], [2275.0, 2260.0], [2239.0, 2264.0], [2199.0, 145.0], [2203.0, 171.68627450980398], [2207.0, 1195.0], [2235.0, 1179.3333333333333], [2211.0, 1192.5], [2427.0, 191.0], [2431.0, 190.0], [2419.0, 191.0], [2335.0, 163.0], [2359.0, 138.0], [2355.0, 141.375], [2347.0, 162.0], [2423.0, 191.0], [2435.0, 190.0], [2511.0, 103.5], [2499.0, 105.375], [2495.0, 106.0], [2447.0, 181.0], [2459.0, 162.0], [2487.0, 116.0], [2475.0, 139.33333333333331], [2467.0, 153.0], [2667.0, 133.9090909090909], [2671.0, 134.5], [2687.0, 131.9], [2647.0, 135.0], [2659.0, 135.25], [2591.0, 179.22727272727272], [2587.0, 159.66666666666666], [2583.0, 231.33333333333331], [2579.0, 160.33333333333334], [2595.0, 124.75], [2715.0, 134.33333333333334], [2811.0, 158.0], [2815.0, 157.66666666666666], [2807.0, 157.85714285714283], [2695.0, 118.0], [2691.0, 119.0], [2739.0, 179.0], [2735.0, 28.0], [2731.0, 59.0], [2727.0, 154.5], [2919.0, 478.0], [2931.0, 471.0], [2939.0, 457.0], [2887.0, 1094.0], [2903.0, 217.0], [2911.0, 215.33333333333331], [2827.0, 94.0], [2831.0, 5241.5], [2835.0, 5238.5], [2839.0, 1136.0], [2843.0, 5233.0], [2847.0, 5229.0], [2871.0, 1098.5], [2855.0, 1117.0], [2851.0, 3175.0], [2951.0, 456.0], [2947.0, 457.3333333333333], [2959.0, 3427.0], [2963.0, 455.0], [2967.0, 3399.0], [2975.0, 1773.0], [2991.0, 139.0], [2983.0, 1772.0], [2979.0, 148.0], [1.0, 28889.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[2925.9608305647716, 6986.634950166172]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 3000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 2041.2, "minX": 1.68301602E12, "maxY": 185478.91666666666, "series": [{"data": [[1.68301632E12, 103888.05], [1.68301602E12, 2705.633333333333], [1.6830162E12, 123819.05], [1.68301638E12, 7359.816666666667], [1.68301608E12, 117533.13333333333], [1.68301626E12, 185478.91666666666], [1.68301614E12, 181382.16666666666]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.68301632E12, 73886.4], [1.68301602E12, 2041.2], [1.6830162E12, 86410.8], [1.68301638E12, 5863.2], [1.68301608E12, 79800.0], [1.68301626E12, 129973.2], [1.68301614E12, 125328.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68301638E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 2629.8343753552317, "minX": 1.68301602E12, "maxY": 17994.60888252149, "series": [{"data": [[1.68301632E12, 2629.8343753552317], [1.68301602E12, 3646.0493827160476], [1.6830162E12, 10625.009026497153], [1.68301638E12, 17994.60888252149], [1.68301608E12, 6850.09454130345], [1.68301626E12, 4098.466408518875], [1.68301614E12, 9650.77375565606]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68301638E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 2617.783221552807, "minX": 1.68301602E12, "maxY": 17994.600286532946, "series": [{"data": [[1.68301632E12, 2617.783221552807], [1.68301602E12, 3645.370370370373], [1.6830162E12, 10435.994564689936], [1.68301638E12, 17994.600286532946], [1.68301608E12, 6381.166251556676], [1.68301626E12, 4004.2797676670198], [1.68301614E12, 9058.857798775662]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68301638E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.12177650429799422, "minX": 1.68301602E12, "maxY": 8336.174706396183, "series": [{"data": [[1.68301632E12, 558.0060247811722], [1.68301602E12, 172.35802469135797], [1.6830162E12, 8336.174706396183], [1.68301638E12, 0.12177650429799422], [1.68301608E12, 300.6664591116647], [1.68301626E12, 998.9293320425926], [1.68301614E12, 842.9689912163967]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68301638E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 9.0, "minX": 1.68301602E12, "maxY": 151697.0, "series": [{"data": [[1.68301632E12, 128382.0], [1.68301602E12, 7465.0], [1.6830162E12, 151697.0], [1.68301638E12, 28889.0], [1.68301608E12, 63064.0], [1.68301626E12, 149703.0], [1.68301614E12, 108438.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.68301632E12, 7384.500000000008], [1.68301602E12, 6491.0], [1.6830162E12, 12414.800000000007], [1.68301638E12, 24338.2], [1.68301608E12, 16546.0], [1.68301626E12, 7011.0], [1.68301614E12, 16645.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.68301632E12, 35318.0], [1.68301602E12, 7462.8], [1.6830162E12, 144883.68000000002], [1.68301638E12, 24378.01], [1.68301608E12, 54328.93], [1.68301626E12, 100130.0], [1.68301614E12, 100184.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.68301632E12, 11963.449999999999], [1.68301602E12, 6499.8], [1.6830162E12, 128524.6], [1.68301638E12, 24358.1], [1.68301608E12, 31248.0], [1.68301626E12, 14295.3], [1.68301614E12, 46786.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.68301632E12, 22.0], [1.68301602E12, 144.0], [1.6830162E12, 14.0], [1.68301638E12, 8346.0], [1.68301608E12, 14.0], [1.68301626E12, 9.0], [1.68301614E12, 12.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.68301632E12, 156.0], [1.68301602E12, 4396.0], [1.6830162E12, 150.0], [1.68301638E12, 20064.5], [1.68301608E12, 207.0], [1.68301626E12, 147.0], [1.68301614E12, 171.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68301638E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 92.0, "minX": 1.0, "maxY": 133683.0, "series": [{"data": [[2.0, 43889.5], [3.0, 2505.0], [4.0, 38253.5], [5.0, 31434.0], [6.0, 13370.0], [7.0, 30680.0], [8.0, 8028.5], [9.0, 63519.0], [11.0, 11232.0], [12.0, 8819.0], [13.0, 24357.0], [15.0, 13463.0], [18.0, 2104.5], [20.0, 11295.5], [21.0, 1081.0], [23.0, 2148.0], [24.0, 2281.5], [25.0, 10851.0], [26.0, 52124.0], [27.0, 14357.0], [29.0, 4647.0], [31.0, 42338.0], [32.0, 8073.0], [35.0, 5479.0], [34.0, 3175.5], [37.0, 10118.0], [36.0, 16547.0], [38.0, 10278.5], [41.0, 1100.5], [43.0, 35299.0], [45.0, 1367.0], [46.0, 106.0], [49.0, 14867.0], [50.0, 1307.5], [51.0, 7637.0], [56.0, 16515.0], [63.0, 92.0], [65.0, 1037.0], [64.0, 1120.5], [75.0, 9038.0], [83.0, 120.0], [85.0, 3414.0], [89.0, 12188.0], [92.0, 114.0], [95.0, 110.0], [97.0, 20071.0], [99.0, 2196.0], [100.0, 170.0], [103.0, 2453.0], [106.0, 128.0], [107.0, 172.0], [104.0, 145.0], [105.0, 154.0], [108.0, 108.0], [114.0, 20227.0], [116.0, 136.0], [121.0, 8715.0], [124.0, 8442.5], [126.0, 9378.5], [125.0, 6175.0], [131.0, 6463.0], [133.0, 156.0], [135.0, 5126.0], [138.0, 160.5], [139.0, 24315.0], [159.0, 152.0], [158.0, 21780.0], [162.0, 203.0], [164.0, 159.0], [174.0, 137.0], [172.0, 129.0], [177.0, 144.0], [178.0, 31478.0], [176.0, 133.5], [183.0, 148.0], [179.0, 157.0], [181.0, 139.5], [186.0, 154.0], [189.0, 139.0], [184.0, 138.0], [198.0, 151.0], [195.0, 144.0], [200.0, 2770.5], [204.0, 136.0], [205.0, 141.0], [202.0, 154.0], [207.0, 137.0], [201.0, 140.0], [203.0, 135.0], [215.0, 135.0], [212.0, 139.0], [208.0, 132.0], [210.0, 133.0], [219.0, 155.0], [220.0, 111.0], [217.0, 142.0], [221.0, 138.0], [227.0, 5465.0], [230.0, 145.0], [239.0, 155.0], [236.0, 153.0], [234.0, 138.0], [238.0, 165.0], [247.0, 159.0], [242.0, 124.0], [252.0, 157.0], [251.0, 143.0], [270.0, 109.0], [265.0, 155.0], [257.0, 130.0], [272.0, 14031.0], [302.0, 144.0], [311.0, 225.0], [315.0, 151.0], [316.0, 100090.0], [339.0, 14099.0], [340.0, 170.0], [361.0, 139.0], [352.0, 12280.0], [354.0, 145.0], [380.0, 16294.0], [371.0, 190.0], [374.0, 125.5], [375.0, 230.0], [379.0, 136.0], [393.0, 157.0], [398.0, 144.0], [397.0, 134.0], [404.0, 145.0], [410.0, 126.0], [406.0, 132.0], [400.0, 151.0], [408.0, 1889.0], [405.0, 118.0], [403.0, 131.0], [418.0, 14934.0], [420.0, 138.0], [434.0, 220.0], [446.0, 157.0], [450.0, 5775.0], [453.0, 263.0], [478.0, 13223.5], [479.0, 121.0], [506.0, 15661.0], [523.0, 11901.0], [543.0, 141.0], [531.0, 191.0], [529.0, 7872.0], [525.0, 160.0], [564.0, 249.0], [557.0, 135.0], [552.0, 140.0], [561.0, 130.0], [607.0, 224.0], [593.0, 158.0], [595.0, 211.0], [592.0, 12634.0], [600.0, 142.0], [586.0, 139.0], [580.0, 7005.0], [598.0, 144.0], [579.0, 148.0], [660.0, 147.0], [687.0, 12570.0], [729.0, 125.0], [706.0, 136.0], [765.0, 12646.0], [738.0, 281.0], [793.0, 14858.0], [813.0, 150.0], [973.0, 259.0], [1001.0, 287.0], [1309.0, 622.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[8.0, 133683.0], [595.0, 40689.0], [41.0, 82354.0], [45.0, 27162.0], [186.0, 19844.0], [3.0, 27877.0], [217.0, 117631.5], [230.0, 43890.0], [239.0, 117713.5], [15.0, 14091.0], [1.0, 105945.0], [18.0, 103252.0], [23.0, 26663.0], [380.0, 28677.0], [24.0, 28003.0], [410.0, 52312.0], [404.0, 50317.5], [408.0, 67930.0], [27.0, 40686.0], [7.0, 26645.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1309.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 100090.0, "series": [{"data": [[2.0, 43889.5], [3.0, 2505.0], [4.0, 38253.5], [5.0, 31434.0], [6.0, 13370.0], [7.0, 30680.0], [8.0, 8028.5], [9.0, 63519.0], [11.0, 11232.0], [12.0, 8819.0], [13.0, 24357.0], [15.0, 13463.0], [18.0, 2104.5], [20.0, 11295.5], [21.0, 1081.0], [23.0, 2148.0], [24.0, 2281.5], [25.0, 10851.0], [26.0, 52124.0], [27.0, 14357.0], [29.0, 4647.0], [31.0, 42338.0], [32.0, 8073.0], [35.0, 5479.0], [34.0, 3175.5], [37.0, 10118.0], [36.0, 16547.0], [38.0, 10278.5], [41.0, 1100.5], [43.0, 35299.0], [45.0, 1367.0], [46.0, 106.0], [49.0, 14867.0], [50.0, 1307.5], [51.0, 7637.0], [56.0, 16515.0], [63.0, 92.0], [65.0, 1037.0], [64.0, 1120.5], [75.0, 9038.0], [83.0, 120.0], [85.0, 3414.0], [89.0, 12188.0], [92.0, 114.0], [95.0, 110.0], [97.0, 20071.0], [99.0, 2196.0], [100.0, 170.0], [103.0, 2453.0], [106.0, 128.0], [107.0, 172.0], [104.0, 145.0], [105.0, 154.0], [108.0, 108.0], [114.0, 20227.0], [116.0, 136.0], [121.0, 8715.0], [124.0, 8442.5], [126.0, 9378.5], [125.0, 6175.0], [131.0, 6463.0], [133.0, 156.0], [135.0, 5126.0], [138.0, 160.5], [139.0, 24315.0], [159.0, 152.0], [158.0, 21780.0], [162.0, 203.0], [164.0, 159.0], [174.0, 137.0], [172.0, 129.0], [177.0, 144.0], [178.0, 31478.0], [176.0, 133.5], [183.0, 148.0], [179.0, 157.0], [181.0, 139.5], [186.0, 154.0], [189.0, 139.0], [184.0, 138.0], [198.0, 151.0], [195.0, 144.0], [200.0, 2770.5], [204.0, 136.0], [205.0, 141.0], [202.0, 154.0], [207.0, 137.0], [201.0, 140.0], [203.0, 135.0], [215.0, 135.0], [212.0, 139.0], [208.0, 132.0], [210.0, 133.0], [219.0, 155.0], [220.0, 111.0], [217.0, 142.0], [221.0, 138.0], [227.0, 5465.0], [230.0, 145.0], [239.0, 155.0], [236.0, 153.0], [234.0, 138.0], [238.0, 165.0], [247.0, 159.0], [242.0, 124.0], [252.0, 157.0], [251.0, 143.0], [270.0, 109.0], [265.0, 155.0], [257.0, 130.0], [272.0, 14031.0], [302.0, 144.0], [311.0, 225.0], [315.0, 151.0], [316.0, 100090.0], [339.0, 14099.0], [340.0, 170.0], [361.0, 139.0], [352.0, 12279.0], [354.0, 145.0], [380.0, 16294.0], [371.0, 190.0], [374.0, 125.5], [375.0, 230.0], [379.0, 136.0], [393.0, 157.0], [398.0, 144.0], [397.0, 134.0], [404.0, 145.0], [410.0, 126.0], [406.0, 132.0], [400.0, 151.0], [408.0, 1889.0], [405.0, 118.0], [403.0, 131.0], [418.0, 14934.0], [420.0, 138.0], [434.0, 220.0], [446.0, 157.0], [450.0, 5775.0], [453.0, 263.0], [478.0, 13223.5], [479.0, 121.0], [506.0, 15661.0], [523.0, 11901.0], [543.0, 141.0], [531.0, 191.0], [529.0, 7872.0], [525.0, 160.0], [564.0, 249.0], [557.0, 135.0], [552.0, 140.0], [561.0, 130.0], [607.0, 224.0], [593.0, 158.0], [595.0, 211.0], [592.0, 12634.0], [600.0, 142.0], [586.0, 139.0], [580.0, 7005.0], [598.0, 144.0], [579.0, 148.0], [660.0, 147.0], [687.0, 12570.0], [729.0, 125.0], [706.0, 136.0], [765.0, 12646.0], [738.0, 281.0], [793.0, 14858.0], [813.0, 150.0], [973.0, 259.0], [1001.0, 287.0], [1309.0, 622.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[8.0, 0.0], [595.0, 0.0], [41.0, 0.0], [45.0, 0.0], [186.0, 0.0], [3.0, 0.0], [217.0, 0.0], [230.0, 0.0], [239.0, 0.0], [15.0, 0.0], [1.0, 0.0], [18.0, 0.0], [23.0, 0.0], [380.0, 0.0], [24.0, 0.0], [410.0, 0.0], [404.0, 0.0], [408.0, 0.0], [27.0, 0.0], [7.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1309.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 33.333333333333336, "minX": 1.68301602E12, "maxY": 256.6666666666667, "series": [{"data": [[1.68301632E12, 146.66666666666666], [1.68301602E12, 33.333333333333336], [1.6830162E12, 166.66666666666666], [1.68301608E12, 173.33333333333334], [1.68301626E12, 256.6666666666667], [1.68301614E12, 226.66666666666666]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68301632E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.68301602E12, "maxY": 257.8833333333333, "series": [{"data": [[1.68301632E12, 146.6], [1.68301602E12, 4.05], [1.6830162E12, 171.45], [1.68301638E12, 11.633333333333333], [1.68301608E12, 158.33333333333334], [1.68301626E12, 257.8833333333333], [1.68301614E12, 248.66666666666666]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.68301632E12, 0.016666666666666666], [1.6830162E12, 0.26666666666666666], [1.68301608E12, 2.2666666666666666], [1.68301626E12, 0.36666666666666664], [1.68301614E12, 1.8]], "isOverall": false, "label": "Non HTTP response code: java.net.SocketException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68301638E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.68301602E12, "maxY": 257.8833333333333, "series": [{"data": [[1.68301632E12, 146.6], [1.68301602E12, 4.05], [1.6830162E12, 171.45], [1.68301638E12, 11.633333333333333], [1.68301608E12, 158.33333333333334], [1.68301626E12, 257.8833333333333], [1.68301614E12, 248.66666666666666]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.68301632E12, 0.016666666666666666], [1.6830162E12, 0.26666666666666666], [1.68301608E12, 2.2666666666666666], [1.68301626E12, 0.36666666666666664], [1.68301614E12, 1.8]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68301638E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.68301602E12, "maxY": 257.8833333333333, "series": [{"data": [[1.68301632E12, 146.6], [1.68301602E12, 4.05], [1.6830162E12, 171.45], [1.68301638E12, 11.633333333333333], [1.68301608E12, 158.33333333333334], [1.68301626E12, 257.8833333333333], [1.68301614E12, 248.66666666666666]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.68301632E12, 0.016666666666666666], [1.6830162E12, 0.26666666666666666], [1.68301608E12, 2.2666666666666666], [1.68301626E12, 0.36666666666666664], [1.68301614E12, 1.8]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68301638E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

