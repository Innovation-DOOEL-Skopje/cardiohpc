/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 9.0, "minX": 0.0, "maxY": 177900.0, "series": [{"data": [[0.0, 9.0], [0.1, 24.0], [0.2, 26.0], [0.3, 27.0], [0.4, 29.0], [0.5, 30.0], [0.6, 31.0], [0.7, 31.0], [0.8, 32.0], [0.9, 32.0], [1.0, 33.0], [1.1, 34.0], [1.2, 35.0], [1.3, 35.0], [1.4, 36.0], [1.5, 36.0], [1.6, 37.0], [1.7, 37.0], [1.8, 37.0], [1.9, 37.0], [2.0, 38.0], [2.1, 38.0], [2.2, 39.0], [2.3, 39.0], [2.4, 39.0], [2.5, 39.0], [2.6, 40.0], [2.7, 40.0], [2.8, 40.0], [2.9, 41.0], [3.0, 41.0], [3.1, 41.0], [3.2, 42.0], [3.3, 42.0], [3.4, 42.0], [3.5, 42.0], [3.6, 43.0], [3.7, 43.0], [3.8, 43.0], [3.9, 44.0], [4.0, 44.0], [4.1, 44.0], [4.2, 45.0], [4.3, 45.0], [4.4, 45.0], [4.5, 45.0], [4.6, 46.0], [4.7, 46.0], [4.8, 46.0], [4.9, 47.0], [5.0, 47.0], [5.1, 47.0], [5.2, 47.0], [5.3, 48.0], [5.4, 48.0], [5.5, 48.0], [5.6, 48.0], [5.7, 49.0], [5.8, 49.0], [5.9, 49.0], [6.0, 50.0], [6.1, 50.0], [6.2, 50.0], [6.3, 50.0], [6.4, 51.0], [6.5, 51.0], [6.6, 51.0], [6.7, 51.0], [6.8, 51.0], [6.9, 51.0], [7.0, 52.0], [7.1, 52.0], [7.2, 52.0], [7.3, 52.0], [7.4, 53.0], [7.5, 53.0], [7.6, 53.0], [7.7, 53.0], [7.8, 53.0], [7.9, 53.0], [8.0, 54.0], [8.1, 54.0], [8.2, 54.0], [8.3, 54.0], [8.4, 54.0], [8.5, 54.0], [8.6, 54.0], [8.7, 55.0], [8.8, 55.0], [8.9, 55.0], [9.0, 55.0], [9.1, 55.0], [9.2, 55.0], [9.3, 56.0], [9.4, 56.0], [9.5, 56.0], [9.6, 56.0], [9.7, 56.0], [9.8, 57.0], [9.9, 57.0], [10.0, 57.0], [10.1, 58.0], [10.2, 58.0], [10.3, 58.0], [10.4, 58.0], [10.5, 59.0], [10.6, 59.0], [10.7, 59.0], [10.8, 59.0], [10.9, 59.0], [11.0, 59.0], [11.1, 59.0], [11.2, 60.0], [11.3, 60.0], [11.4, 60.0], [11.5, 60.0], [11.6, 60.0], [11.7, 60.0], [11.8, 60.0], [11.9, 60.0], [12.0, 61.0], [12.1, 61.0], [12.2, 61.0], [12.3, 61.0], [12.4, 61.0], [12.5, 61.0], [12.6, 61.0], [12.7, 61.0], [12.8, 62.0], [12.9, 62.0], [13.0, 62.0], [13.1, 62.0], [13.2, 62.0], [13.3, 62.0], [13.4, 62.0], [13.5, 62.0], [13.6, 63.0], [13.7, 63.0], [13.8, 63.0], [13.9, 63.0], [14.0, 63.0], [14.1, 63.0], [14.2, 63.0], [14.3, 64.0], [14.4, 64.0], [14.5, 64.0], [14.6, 64.0], [14.7, 64.0], [14.8, 65.0], [14.9, 65.0], [15.0, 65.0], [15.1, 66.0], [15.2, 66.0], [15.3, 66.0], [15.4, 66.0], [15.5, 66.0], [15.6, 66.0], [15.7, 67.0], [15.8, 67.0], [15.9, 67.0], [16.0, 67.0], [16.1, 67.0], [16.2, 67.0], [16.3, 68.0], [16.4, 68.0], [16.5, 68.0], [16.6, 68.0], [16.7, 68.0], [16.8, 69.0], [16.9, 69.0], [17.0, 69.0], [17.1, 69.0], [17.2, 69.0], [17.3, 69.0], [17.4, 69.0], [17.5, 70.0], [17.6, 70.0], [17.7, 70.0], [17.8, 70.0], [17.9, 70.0], [18.0, 70.0], [18.1, 70.0], [18.2, 70.0], [18.3, 70.0], [18.4, 71.0], [18.5, 71.0], [18.6, 71.0], [18.7, 71.0], [18.8, 71.0], [18.9, 71.0], [19.0, 72.0], [19.1, 72.0], [19.2, 72.0], [19.3, 72.0], [19.4, 72.0], [19.5, 72.0], [19.6, 73.0], [19.7, 73.0], [19.8, 73.0], [19.9, 73.0], [20.0, 74.0], [20.1, 74.0], [20.2, 74.0], [20.3, 74.0], [20.4, 75.0], [20.5, 75.0], [20.6, 75.0], [20.7, 76.0], [20.8, 76.0], [20.9, 76.0], [21.0, 77.0], [21.1, 77.0], [21.2, 77.0], [21.3, 77.0], [21.4, 78.0], [21.5, 78.0], [21.6, 78.0], [21.7, 78.0], [21.8, 79.0], [21.9, 79.0], [22.0, 80.0], [22.1, 80.0], [22.2, 80.0], [22.3, 81.0], [22.4, 81.0], [22.5, 81.0], [22.6, 82.0], [22.7, 82.0], [22.8, 83.0], [22.9, 83.0], [23.0, 83.0], [23.1, 84.0], [23.2, 84.0], [23.3, 85.0], [23.4, 85.0], [23.5, 86.0], [23.6, 87.0], [23.7, 87.0], [23.8, 88.0], [23.9, 88.0], [24.0, 89.0], [24.1, 90.0], [24.2, 91.0], [24.3, 93.0], [24.4, 94.0], [24.5, 96.0], [24.6, 100.0], [24.7, 100.0], [24.8, 102.0], [24.9, 103.0], [25.0, 104.0], [25.1, 105.0], [25.2, 107.0], [25.3, 109.0], [25.4, 111.0], [25.5, 116.0], [25.6, 117.0], [25.7, 119.0], [25.8, 123.0], [25.9, 124.0], [26.0, 129.0], [26.1, 135.0], [26.2, 136.0], [26.3, 137.0], [26.4, 139.0], [26.5, 145.0], [26.6, 145.0], [26.7, 156.0], [26.8, 169.0], [26.9, 181.0], [27.0, 191.0], [27.1, 193.0], [27.2, 226.0], [27.3, 230.0], [27.4, 233.0], [27.5, 269.0], [27.6, 288.0], [27.7, 291.0], [27.8, 305.0], [27.9, 309.0], [28.0, 316.0], [28.1, 329.0], [28.2, 349.0], [28.3, 354.0], [28.4, 367.0], [28.5, 384.0], [28.6, 404.0], [28.7, 443.0], [28.8, 458.0], [28.9, 473.0], [29.0, 491.0], [29.1, 496.0], [29.2, 535.0], [29.3, 537.0], [29.4, 561.0], [29.5, 572.0], [29.6, 578.0], [29.7, 631.0], [29.8, 643.0], [29.9, 652.0], [30.0, 685.0], [30.1, 772.0], [30.2, 815.0], [30.3, 842.0], [30.4, 855.0], [30.5, 876.0], [30.6, 885.0], [30.7, 909.0], [30.8, 948.0], [30.9, 980.0], [31.0, 1047.0], [31.1, 1124.0], [31.2, 1144.0], [31.3, 1164.0], [31.4, 1192.0], [31.5, 1205.0], [31.6, 1271.0], [31.7, 1283.0], [31.8, 1325.0], [31.9, 1337.0], [32.0, 1346.0], [32.1, 1436.0], [32.2, 1480.0], [32.3, 1491.0], [32.4, 1520.0], [32.5, 1593.0], [32.6, 1632.0], [32.7, 1650.0], [32.8, 1666.0], [32.9, 1673.0], [33.0, 1686.0], [33.1, 1758.0], [33.2, 1775.0], [33.3, 1780.0], [33.4, 1822.0], [33.5, 1837.0], [33.6, 1851.0], [33.7, 1893.0], [33.8, 1921.0], [33.9, 1935.0], [34.0, 2081.0], [34.1, 2109.0], [34.2, 2128.0], [34.3, 2150.0], [34.4, 2180.0], [34.5, 2190.0], [34.6, 2194.0], [34.7, 2212.0], [34.8, 2241.0], [34.9, 2375.0], [35.0, 2455.0], [35.1, 2529.0], [35.2, 2529.0], [35.3, 2743.0], [35.4, 2745.0], [35.5, 2750.0], [35.6, 2809.0], [35.7, 2924.0], [35.8, 3022.0], [35.9, 3285.0], [36.0, 3539.0], [36.1, 3563.0], [36.2, 3612.0], [36.3, 3614.0], [36.4, 3725.0], [36.5, 3756.0], [36.6, 3806.0], [36.7, 3915.0], [36.8, 3951.0], [36.9, 3982.0], [37.0, 4020.0], [37.1, 4324.0], [37.2, 4519.0], [37.3, 4558.0], [37.4, 4583.0], [37.5, 4605.0], [37.6, 4667.0], [37.7, 4925.0], [37.8, 4977.0], [37.9, 4978.0], [38.0, 4993.0], [38.1, 5067.0], [38.2, 5173.0], [38.3, 5224.0], [38.4, 5235.0], [38.5, 5249.0], [38.6, 5382.0], [38.7, 5628.0], [38.8, 5733.0], [38.9, 5773.0], [39.0, 5812.0], [39.1, 5824.0], [39.2, 5858.0], [39.3, 5930.0], [39.4, 5934.0], [39.5, 6076.0], [39.6, 6107.0], [39.7, 6107.0], [39.8, 6117.0], [39.9, 6123.0], [40.0, 6222.0], [40.1, 6282.0], [40.2, 6342.0], [40.3, 6388.0], [40.4, 6496.0], [40.5, 6542.0], [40.6, 6565.0], [40.7, 6578.0], [40.8, 6608.0], [40.9, 6688.0], [41.0, 6723.0], [41.1, 6745.0], [41.2, 6756.0], [41.3, 6782.0], [41.4, 6803.0], [41.5, 6832.0], [41.6, 6839.0], [41.7, 6883.0], [41.8, 6977.0], [41.9, 6977.0], [42.0, 6983.0], [42.1, 7045.0], [42.2, 7108.0], [42.3, 7185.0], [42.4, 7235.0], [42.5, 7282.0], [42.6, 7292.0], [42.7, 7302.0], [42.8, 7346.0], [42.9, 7370.0], [43.0, 7373.0], [43.1, 7374.0], [43.2, 7379.0], [43.3, 7381.0], [43.4, 7385.0], [43.5, 7390.0], [43.6, 7399.0], [43.7, 7411.0], [43.8, 7430.0], [43.9, 7432.0], [44.0, 7442.0], [44.1, 7450.0], [44.2, 7466.0], [44.3, 7492.0], [44.4, 7507.0], [44.5, 7546.0], [44.6, 7567.0], [44.7, 7605.0], [44.8, 7666.0], [44.9, 7682.0], [45.0, 7683.0], [45.1, 7699.0], [45.2, 7755.0], [45.3, 7834.0], [45.4, 7996.0], [45.5, 8035.0], [45.6, 8065.0], [45.7, 8072.0], [45.8, 8153.0], [45.9, 8186.0], [46.0, 8191.0], [46.1, 8192.0], [46.2, 8195.0], [46.3, 8201.0], [46.4, 8216.0], [46.5, 8275.0], [46.6, 8305.0], [46.7, 8309.0], [46.8, 8333.0], [46.9, 8370.0], [47.0, 8393.0], [47.1, 8400.0], [47.2, 8410.0], [47.3, 8422.0], [47.4, 8440.0], [47.5, 8457.0], [47.6, 8476.0], [47.7, 8476.0], [47.8, 8564.0], [47.9, 8588.0], [48.0, 8634.0], [48.1, 8650.0], [48.2, 8680.0], [48.3, 8723.0], [48.4, 8725.0], [48.5, 8772.0], [48.6, 8791.0], [48.7, 8799.0], [48.8, 8809.0], [48.9, 8869.0], [49.0, 8873.0], [49.1, 8893.0], [49.2, 8953.0], [49.3, 9006.0], [49.4, 9036.0], [49.5, 9079.0], [49.6, 9107.0], [49.7, 9133.0], [49.8, 9170.0], [49.9, 9188.0], [50.0, 9214.0], [50.1, 9244.0], [50.2, 9261.0], [50.3, 9289.0], [50.4, 9309.0], [50.5, 9323.0], [50.6, 9327.0], [50.7, 9332.0], [50.8, 9367.0], [50.9, 9386.0], [51.0, 9430.0], [51.1, 9432.0], [51.2, 9433.0], [51.3, 9448.0], [51.4, 9451.0], [51.5, 9451.0], [51.6, 9457.0], [51.7, 9467.0], [51.8, 9468.0], [51.9, 9477.0], [52.0, 9490.0], [52.1, 9561.0], [52.2, 9592.0], [52.3, 9608.0], [52.4, 9610.0], [52.5, 9611.0], [52.6, 9622.0], [52.7, 9642.0], [52.8, 9652.0], [52.9, 9660.0], [53.0, 9675.0], [53.1, 9715.0], [53.2, 9733.0], [53.3, 9791.0], [53.4, 9794.0], [53.5, 9800.0], [53.6, 9836.0], [53.7, 9865.0], [53.8, 9896.0], [53.9, 9928.0], [54.0, 9944.0], [54.1, 9964.0], [54.2, 9965.0], [54.3, 9969.0], [54.4, 9974.0], [54.5, 9976.0], [54.6, 9979.0], [54.7, 10007.0], [54.8, 10027.0], [54.9, 10040.0], [55.0, 10053.0], [55.1, 10109.0], [55.2, 10112.0], [55.3, 10115.0], [55.4, 10126.0], [55.5, 10149.0], [55.6, 10180.0], [55.7, 10203.0], [55.8, 10229.0], [55.9, 10230.0], [56.0, 10232.0], [56.1, 10250.0], [56.2, 10269.0], [56.3, 10274.0], [56.4, 10278.0], [56.5, 10298.0], [56.6, 10321.0], [56.7, 10338.0], [56.8, 10350.0], [56.9, 10379.0], [57.0, 10412.0], [57.1, 10437.0], [57.2, 10461.0], [57.3, 10472.0], [57.4, 10476.0], [57.5, 10481.0], [57.6, 10495.0], [57.7, 10506.0], [57.8, 10530.0], [57.9, 10547.0], [58.0, 10552.0], [58.1, 10561.0], [58.2, 10567.0], [58.3, 10574.0], [58.4, 10590.0], [58.5, 10603.0], [58.6, 10619.0], [58.7, 10647.0], [58.8, 10657.0], [58.9, 10693.0], [59.0, 10721.0], [59.1, 10734.0], [59.2, 10752.0], [59.3, 10769.0], [59.4, 10793.0], [59.5, 10822.0], [59.6, 10832.0], [59.7, 10848.0], [59.8, 10853.0], [59.9, 10861.0], [60.0, 10877.0], [60.1, 10889.0], [60.2, 10903.0], [60.3, 10914.0], [60.4, 10915.0], [60.5, 10917.0], [60.6, 10926.0], [60.7, 10939.0], [60.8, 10941.0], [60.9, 10943.0], [61.0, 10945.0], [61.1, 10949.0], [61.2, 10954.0], [61.3, 10958.0], [61.4, 10973.0], [61.5, 11026.0], [61.6, 11093.0], [61.7, 11160.0], [61.8, 11237.0], [61.9, 11304.0], [62.0, 11327.0], [62.1, 11329.0], [62.2, 11331.0], [62.3, 11345.0], [62.4, 11363.0], [62.5, 11471.0], [62.6, 11564.0], [62.7, 11566.0], [62.8, 11580.0], [62.9, 11621.0], [63.0, 11654.0], [63.1, 11658.0], [63.2, 11676.0], [63.3, 11678.0], [63.4, 11680.0], [63.5, 11705.0], [63.6, 11742.0], [63.7, 11854.0], [63.8, 11905.0], [63.9, 11945.0], [64.0, 11977.0], [64.1, 12008.0], [64.2, 12118.0], [64.3, 12128.0], [64.4, 12138.0], [64.5, 12171.0], [64.6, 12222.0], [64.7, 12279.0], [64.8, 12301.0], [64.9, 12327.0], [65.0, 12341.0], [65.1, 12347.0], [65.2, 12353.0], [65.3, 12356.0], [65.4, 12358.0], [65.5, 12362.0], [65.6, 12370.0], [65.7, 12377.0], [65.8, 12379.0], [65.9, 12392.0], [66.0, 12408.0], [66.1, 12418.0], [66.2, 12455.0], [66.3, 12476.0], [66.4, 12484.0], [66.5, 12497.0], [66.6, 12504.0], [66.7, 12513.0], [66.8, 12515.0], [66.9, 12517.0], [67.0, 12535.0], [67.1, 12547.0], [67.2, 12563.0], [67.3, 12575.0], [67.4, 12581.0], [67.5, 12583.0], [67.6, 12592.0], [67.7, 12599.0], [67.8, 12605.0], [67.9, 12613.0], [68.0, 12634.0], [68.1, 12661.0], [68.2, 12680.0], [68.3, 12699.0], [68.4, 12714.0], [68.5, 12716.0], [68.6, 12722.0], [68.7, 12732.0], [68.8, 12752.0], [68.9, 12786.0], [69.0, 12833.0], [69.1, 12847.0], [69.2, 12862.0], [69.3, 12877.0], [69.4, 12891.0], [69.5, 12901.0], [69.6, 12968.0], [69.7, 13007.0], [69.8, 13032.0], [69.9, 13075.0], [70.0, 13120.0], [70.1, 13142.0], [70.2, 13164.0], [70.3, 13198.0], [70.4, 13218.0], [70.5, 13229.0], [70.6, 13233.0], [70.7, 13246.0], [70.8, 13248.0], [70.9, 13251.0], [71.0, 13264.0], [71.1, 13272.0], [71.2, 13275.0], [71.3, 13276.0], [71.4, 13282.0], [71.5, 13290.0], [71.6, 13298.0], [71.7, 13307.0], [71.8, 13314.0], [71.9, 13329.0], [72.0, 13332.0], [72.1, 13340.0], [72.2, 13354.0], [72.3, 13367.0], [72.4, 13391.0], [72.5, 13401.0], [72.6, 13440.0], [72.7, 13443.0], [72.8, 13476.0], [72.9, 13492.0], [73.0, 13499.0], [73.1, 13521.0], [73.2, 13534.0], [73.3, 13587.0], [73.4, 13595.0], [73.5, 13613.0], [73.6, 13617.0], [73.7, 13675.0], [73.8, 13706.0], [73.9, 13708.0], [74.0, 13725.0], [74.1, 13731.0], [74.2, 13737.0], [74.3, 13763.0], [74.4, 13785.0], [74.5, 13845.0], [74.6, 13848.0], [74.7, 13851.0], [74.8, 13910.0], [74.9, 13932.0], [75.0, 13963.0], [75.1, 13973.0], [75.2, 13988.0], [75.3, 14016.0], [75.4, 14034.0], [75.5, 14038.0], [75.6, 14051.0], [75.7, 14068.0], [75.8, 14106.0], [75.9, 14121.0], [76.0, 14136.0], [76.1, 14140.0], [76.2, 14173.0], [76.3, 14186.0], [76.4, 14193.0], [76.5, 14208.0], [76.6, 14228.0], [76.7, 14231.0], [76.8, 14247.0], [76.9, 14287.0], [77.0, 14320.0], [77.1, 14365.0], [77.2, 14394.0], [77.3, 14452.0], [77.4, 14463.0], [77.5, 14493.0], [77.6, 14532.0], [77.7, 14567.0], [77.8, 14647.0], [77.9, 14663.0], [78.0, 14735.0], [78.1, 14779.0], [78.2, 14803.0], [78.3, 14891.0], [78.4, 14954.0], [78.5, 14986.0], [78.6, 15003.0], [78.7, 15012.0], [78.8, 15021.0], [78.9, 15026.0], [79.0, 15038.0], [79.1, 15063.0], [79.2, 15101.0], [79.3, 15174.0], [79.4, 15250.0], [79.5, 15302.0], [79.6, 15327.0], [79.7, 15331.0], [79.8, 15351.0], [79.9, 15400.0], [80.0, 15412.0], [80.1, 15437.0], [80.2, 15459.0], [80.3, 15514.0], [80.4, 15522.0], [80.5, 15532.0], [80.6, 15606.0], [80.7, 15610.0], [80.8, 15620.0], [80.9, 15689.0], [81.0, 15697.0], [81.1, 15718.0], [81.2, 15759.0], [81.3, 15784.0], [81.4, 15831.0], [81.5, 15869.0], [81.6, 15879.0], [81.7, 15883.0], [81.8, 15920.0], [81.9, 15960.0], [82.0, 15985.0], [82.1, 16085.0], [82.2, 16119.0], [82.3, 16191.0], [82.4, 16292.0], [82.5, 16306.0], [82.6, 16385.0], [82.7, 16430.0], [82.8, 16471.0], [82.9, 16481.0], [83.0, 16504.0], [83.1, 16543.0], [83.2, 16578.0], [83.3, 16616.0], [83.4, 16659.0], [83.5, 16670.0], [83.6, 16694.0], [83.7, 16699.0], [83.8, 16746.0], [83.9, 16782.0], [84.0, 16804.0], [84.1, 16855.0], [84.2, 16871.0], [84.3, 16937.0], [84.4, 16976.0], [84.5, 17055.0], [84.6, 17058.0], [84.7, 17059.0], [84.8, 17072.0], [84.9, 17090.0], [85.0, 17154.0], [85.1, 17158.0], [85.2, 17175.0], [85.3, 17214.0], [85.4, 17240.0], [85.5, 17260.0], [85.6, 17272.0], [85.7, 17294.0], [85.8, 17315.0], [85.9, 17327.0], [86.0, 17352.0], [86.1, 17375.0], [86.2, 17386.0], [86.3, 17397.0], [86.4, 17415.0], [86.5, 17440.0], [86.6, 17454.0], [86.7, 17467.0], [86.8, 17502.0], [86.9, 17538.0], [87.0, 17565.0], [87.1, 17597.0], [87.2, 17632.0], [87.3, 17657.0], [87.4, 17674.0], [87.5, 17715.0], [87.6, 17827.0], [87.7, 17868.0], [87.8, 18034.0], [87.9, 18163.0], [88.0, 18316.0], [88.1, 18795.0], [88.2, 18897.0], [88.3, 18963.0], [88.4, 19024.0], [88.5, 19044.0], [88.6, 19066.0], [88.7, 19456.0], [88.8, 19537.0], [88.9, 19543.0], [89.0, 19572.0], [89.1, 19640.0], [89.2, 19700.0], [89.3, 19938.0], [89.4, 20234.0], [89.5, 20378.0], [89.6, 20483.0], [89.7, 20595.0], [89.8, 20821.0], [89.9, 20905.0], [90.0, 21116.0], [90.1, 21620.0], [90.2, 21683.0], [90.3, 21855.0], [90.4, 22251.0], [90.5, 22955.0], [90.6, 23266.0], [90.7, 23902.0], [90.8, 24126.0], [90.9, 24137.0], [91.0, 24345.0], [91.1, 24754.0], [91.2, 26886.0], [91.3, 27244.0], [91.4, 28031.0], [91.5, 29216.0], [91.6, 29550.0], [91.7, 30891.0], [91.8, 31409.0], [91.9, 31412.0], [92.0, 31462.0], [92.1, 32264.0], [92.2, 32323.0], [92.3, 32521.0], [92.4, 32535.0], [92.5, 32824.0], [92.6, 33221.0], [92.7, 33249.0], [92.8, 33357.0], [92.9, 34082.0], [93.0, 34606.0], [93.1, 36408.0], [93.2, 37040.0], [93.3, 37127.0], [93.4, 37178.0], [93.5, 37209.0], [93.6, 37265.0], [93.7, 37403.0], [93.8, 37472.0], [93.9, 37520.0], [94.0, 37953.0], [94.1, 38821.0], [94.2, 39145.0], [94.3, 39894.0], [94.4, 40235.0], [94.5, 40816.0], [94.6, 43176.0], [94.7, 44855.0], [94.8, 45463.0], [94.9, 46368.0], [95.0, 48084.0], [95.1, 48268.0], [95.2, 50912.0], [95.3, 53940.0], [95.4, 56843.0], [95.5, 57177.0], [95.6, 59370.0], [95.7, 61891.0], [95.8, 63836.0], [95.9, 63857.0], [96.0, 64086.0], [96.1, 64158.0], [96.2, 68036.0], [96.3, 69485.0], [96.4, 72717.0], [96.5, 74753.0], [96.6, 74757.0], [96.7, 74849.0], [96.8, 76197.0], [96.9, 76510.0], [97.0, 76631.0], [97.1, 76716.0], [97.2, 78396.0], [97.3, 79436.0], [97.4, 83734.0], [97.5, 86035.0], [97.6, 88434.0], [97.7, 94783.0], [97.8, 99841.0], [97.9, 100020.0], [98.0, 100025.0], [98.1, 100034.0], [98.2, 100045.0], [98.3, 100067.0], [98.4, 100073.0], [98.5, 100076.0], [98.6, 100078.0], [98.7, 100079.0], [98.8, 100081.0], [98.9, 100087.0], [99.0, 100100.0], [99.1, 109630.0], [99.2, 114110.0], [99.3, 136588.0], [99.4, 138603.0], [99.5, 145926.0], [99.6, 145930.0], [99.7, 159077.0], [99.8, 165615.0], [99.9, 167678.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 6217.0, "series": [{"data": [[0.0, 6217.0], [132000.0, 2.0], [139300.0, 1.0], [66700.0, 2.0], [68300.0, 1.0], [74700.0, 40.0], [76300.0, 2.0], [85900.0, 2.0], [87500.0, 1.0], [95500.0, 2.0], [100.0, 641.0], [34500.0, 2.0], [35300.0, 2.0], [37700.0, 7.0], [38500.0, 2.0], [36900.0, 1.0], [40100.0, 7.0], [39300.0, 4.0], [41700.0, 1.0], [42500.0, 2.0], [43300.0, 2.0], [44900.0, 6.0], [45700.0, 3.0], [48100.0, 5.0], [50500.0, 1.0], [49700.0, 1.0], [200.0, 151.0], [52100.0, 1.0], [52900.0, 2.0], [54500.0, 7.0], [55300.0, 1.0], [56900.0, 7.0], [59300.0, 7.0], [64100.0, 4.0], [64900.0, 1.0], [69000.0, 2.0], [72200.0, 2.0], [300.0, 220.0], [80200.0, 1.0], [86600.0, 1.0], [89800.0, 1.0], [91400.0, 2.0], [97800.0, 2.0], [94600.0, 1.0], [400.0, 139.0], [500.0, 120.0], [128200.0, 3.0], [132400.0, 1.0], [600.0, 110.0], [167600.0, 33.0], [700.0, 20.0], [800.0, 135.0], [900.0, 72.0], [1000.0, 28.0], [1100.0, 109.0], [1200.0, 61.0], [1300.0, 83.0], [1400.0, 62.0], [1500.0, 66.0], [1600.0, 117.0], [1700.0, 78.0], [1800.0, 103.0], [1900.0, 52.0], [2000.0, 14.0], [2100.0, 164.0], [136500.0, 3.0], [2200.0, 46.0], [2300.0, 17.0], [2400.0, 41.0], [2500.0, 43.0], [2600.0, 9.0], [2700.0, 81.0], [2800.0, 23.0], [2900.0, 27.0], [3000.0, 10.0], [3100.0, 2.0], [3200.0, 16.0], [3300.0, 22.0], [3400.0, 3.0], [3500.0, 48.0], [3600.0, 43.0], [3700.0, 58.0], [3800.0, 18.0], [3900.0, 73.0], [4000.0, 31.0], [4100.0, 6.0], [4300.0, 5.0], [68100.0, 10.0], [66500.0, 2.0], [4500.0, 72.0], [4600.0, 40.0], [4400.0, 19.0], [74500.0, 2.0], [76100.0, 7.0], [4700.0, 4.0], [4800.0, 10.0], [77700.0, 1.0], [5100.0, 40.0], [79300.0, 4.0], [4900.0, 88.0], [5000.0, 18.0], [5200.0, 73.0], [5300.0, 12.0], [5500.0, 13.0], [5600.0, 15.0], [5400.0, 1.0], [87300.0, 1.0], [5700.0, 64.0], [5800.0, 79.0], [93700.0, 2.0], [6100.0, 113.0], [6000.0, 16.0], [5900.0, 45.0], [95300.0, 2.0], [6200.0, 39.0], [6300.0, 63.0], [100100.0, 12.0], [98500.0, 1.0], [6500.0, 97.0], [6400.0, 8.0], [6600.0, 39.0], [6800.0, 87.0], [6700.0, 110.0], [6900.0, 78.0], [7100.0, 41.0], [7000.0, 42.0], [7200.0, 86.0], [7300.0, 229.0], [7400.0, 194.0], [7600.0, 103.0], [7500.0, 82.0], [7800.0, 12.0], [7900.0, 29.0], [7700.0, 41.0], [8000.0, 83.0], [8100.0, 135.0], [8600.0, 71.0], [8200.0, 71.0], [8400.0, 173.0], [9200.0, 107.0], [8800.0, 96.0], [9000.0, 71.0], [9400.0, 275.0], [9600.0, 207.0], [10200.0, 211.0], [10000.0, 96.0], [9800.0, 81.0], [10400.0, 178.0], [10600.0, 118.0], [10800.0, 186.0], [11200.0, 30.0], [11000.0, 39.0], [11400.0, 21.0], [11600.0, 151.0], [12200.0, 62.0], [11800.0, 26.0], [12000.0, 16.0], [12400.0, 140.0], [12600.0, 152.0], [13000.0, 68.0], [13200.0, 330.0], [12800.0, 141.0], [13800.0, 80.0], [13400.0, 148.0], [13600.0, 73.0], [14000.0, 138.0], [14200.0, 134.0], [14600.0, 56.0], [14400.0, 72.0], [14800.0, 37.0], [15200.0, 31.0], [15000.0, 155.0], [15400.0, 93.0], [15800.0, 104.0], [15600.0, 120.0], [16200.0, 28.0], [16000.0, 37.0], [17200.0, 126.0], [16800.0, 70.0], [16400.0, 91.0], [17600.0, 85.0], [18000.0, 23.0], [18800.0, 23.0], [19200.0, 3.0], [19600.0, 46.0], [20400.0, 24.0], [21200.0, 4.0], [20800.0, 30.0], [21600.0, 45.0], [22400.0, 1.0], [23200.0, 26.0], [24400.0, 3.0], [24000.0, 1.0], [23600.0, 2.0], [25200.0, 4.0], [24800.0, 5.0], [27200.0, 12.0], [26800.0, 10.0], [28000.0, 1.0], [28400.0, 2.0], [29200.0, 5.0], [28800.0, 1.0], [30400.0, 5.0], [30800.0, 7.0], [32400.0, 3.0], [32000.0, 2.0], [34400.0, 4.0], [138300.0, 7.0], [32800.0, 34.0], [36000.0, 3.0], [38400.0, 2.0], [40000.0, 8.0], [40800.0, 9.0], [39200.0, 1.0], [44800.0, 2.0], [45600.0, 4.0], [46400.0, 2.0], [48000.0, 14.0], [48800.0, 2.0], [49600.0, 2.0], [56800.0, 1.0], [60800.0, 2.0], [60000.0, 1.0], [64800.0, 1.0], [64000.0, 38.0], [65600.0, 2.0], [70400.0, 1.0], [72000.0, 1.0], [76800.0, 1.0], [78400.0, 2.0], [84800.0, 1.0], [86400.0, 4.0], [88000.0, 1.0], [92800.0, 2.0], [91200.0, 1.0], [137600.0, 8.0], [151300.0, 1.0], [73500.0, 2.0], [76700.0, 27.0], [78300.0, 2.0], [81500.0, 1.0], [84700.0, 2.0], [86300.0, 1.0], [94300.0, 2.0], [177800.0, 15.0], [33900.0, 6.0], [137100.0, 2.0], [35500.0, 1.0], [36300.0, 2.0], [37100.0, 65.0], [37900.0, 2.0], [38700.0, 9.0], [40300.0, 3.0], [46700.0, 3.0], [50700.0, 5.0], [49900.0, 4.0], [51500.0, 1.0], [54700.0, 1.0], [53900.0, 2.0], [57100.0, 16.0], [57900.0, 2.0], [65100.0, 2.0], [69400.0, 1.0], [72600.0, 1.0], [83800.0, 3.0], [82200.0, 1.0], [85400.0, 1.0], [99800.0, 2.0], [141200.0, 1.0], [132500.0, 2.0], [164500.0, 14.0], [66900.0, 1.0], [70100.0, 1.0], [71700.0, 2.0], [73300.0, 1.0], [76500.0, 42.0], [74900.0, 9.0], [79700.0, 2.0], [78100.0, 1.0], [95700.0, 1.0], [98900.0, 1.0], [159000.0, 5.0], [16500.0, 66.0], [17300.0, 150.0], [16900.0, 45.0], [17700.0, 32.0], [18100.0, 37.0], [19300.0, 6.0], [18900.0, 35.0], [18500.0, 10.0], [19700.0, 12.0], [20100.0, 15.0], [20500.0, 21.0], [21300.0, 3.0], [20900.0, 9.0], [21700.0, 1.0], [23300.0, 3.0], [22900.0, 3.0], [24100.0, 54.0], [23700.0, 9.0], [24500.0, 4.0], [24900.0, 2.0], [26900.0, 16.0], [27300.0, 11.0], [29300.0, 3.0], [29700.0, 1.0], [30100.0, 4.0], [30500.0, 1.0], [31300.0, 7.0], [32500.0, 49.0], [32100.0, 3.0], [33800.0, 3.0], [34600.0, 4.0], [137500.0, 1.0], [36200.0, 3.0], [35400.0, 1.0], [37000.0, 15.0], [38600.0, 1.0], [40200.0, 13.0], [41800.0, 4.0], [42600.0, 2.0], [45000.0, 6.0], [45800.0, 2.0], [48200.0, 20.0], [49800.0, 2.0], [50600.0, 1.0], [51400.0, 1.0], [53000.0, 1.0], [54600.0, 1.0], [57000.0, 8.0], [58600.0, 5.0], [57800.0, 2.0], [60200.0, 5.0], [61000.0, 2.0], [61800.0, 2.0], [65000.0, 1.0], [67600.0, 3.0], [69200.0, 1.0], [72400.0, 1.0], [74000.0, 4.0], [80400.0, 3.0], [82000.0, 2.0], [83600.0, 1.0], [86800.0, 1.0], [88400.0, 1.0], [96400.0, 1.0], [114000.0, 1.0], [143200.0, 1.0], [165600.0, 3.0], [72300.0, 2.0], [70700.0, 1.0], [77100.0, 3.0], [78700.0, 2.0], [88300.0, 1.0], [91500.0, 2.0], [94700.0, 2.0], [96300.0, 1.0], [99500.0, 1.0], [132200.0, 3.0], [138600.0, 5.0], [34100.0, 12.0], [33300.0, 13.0], [34900.0, 3.0], [145900.0, 51.0], [37300.0, 22.0], [38100.0, 1.0], [38900.0, 1.0], [39700.0, 4.0], [42100.0, 1.0], [177900.0, 1.0], [47700.0, 3.0], [48500.0, 1.0], [50900.0, 2.0], [52500.0, 1.0], [54100.0, 2.0], [54900.0, 2.0], [58900.0, 3.0], [62900.0, 2.0], [62100.0, 1.0], [66600.0, 2.0], [68200.0, 1.0], [76200.0, 2.0], [79400.0, 7.0], [82600.0, 2.0], [85800.0, 1.0], [87400.0, 1.0], [95400.0, 1.0], [138100.0, 3.0], [141300.0, 1.0], [70500.0, 2.0], [75300.0, 2.0], [83300.0, 1.0], [8300.0, 126.0], [8700.0, 126.0], [8500.0, 49.0], [9100.0, 93.0], [8900.0, 43.0], [9300.0, 150.0], [9500.0, 56.0], [9700.0, 105.0], [10100.0, 157.0], [9900.0, 222.0], [161400.0, 4.0], [10500.0, 208.0], [10300.0, 110.0], [10700.0, 121.0], [10900.0, 330.0], [11100.0, 34.0], [11300.0, 147.0], [11700.0, 46.0], [11500.0, 89.0], [11900.0, 77.0], [12100.0, 104.0], [12500.0, 301.0], [12300.0, 294.0], [12700.0, 161.0], [13100.0, 95.0], [13300.0, 203.0], [12900.0, 43.0], [13500.0, 115.0], [13700.0, 181.0], [14300.0, 67.0], [13900.0, 106.0], [14100.0, 173.0], [14500.0, 56.0], [14700.0, 53.0], [15300.0, 105.0], [15100.0, 44.0], [14900.0, 63.0], [15500.0, 85.0], [15700.0, 68.0], [15900.0, 72.0], [16100.0, 34.0], [16300.0, 50.0], [16600.0, 117.0], [17400.0, 117.0], [17000.0, 124.0], [17800.0, 33.0], [18200.0, 8.0], [19000.0, 70.0], [18600.0, 5.0], [19400.0, 15.0], [19800.0, 6.0], [20200.0, 10.0], [20600.0, 14.0], [21000.0, 8.0], [22200.0, 10.0], [21800.0, 15.0], [22600.0, 9.0], [23800.0, 3.0], [24200.0, 2.0], [26200.0, 4.0], [25800.0, 1.0], [27400.0, 3.0], [27000.0, 2.0], [29000.0, 5.0], [29400.0, 7.0], [30600.0, 3.0], [30200.0, 1.0], [31000.0, 2.0], [31400.0, 69.0], [32200.0, 27.0], [34000.0, 7.0], [33200.0, 47.0], [35600.0, 2.0], [36400.0, 11.0], [37200.0, 35.0], [38000.0, 4.0], [38800.0, 9.0], [40400.0, 6.0], [159100.0, 2.0], [41200.0, 3.0], [42800.0, 2.0], [44400.0, 1.0], [45200.0, 5.0], [46000.0, 1.0], [46800.0, 2.0], [48400.0, 1.0], [47600.0, 1.0], [51600.0, 8.0], [52400.0, 3.0], [56400.0, 2.0], [58800.0, 2.0], [59600.0, 2.0], [62000.0, 4.0], [63600.0, 11.0], [68000.0, 12.0], [66400.0, 1.0], [72800.0, 1.0], [79200.0, 10.0], [82400.0, 2.0], [88800.0, 1.0], [90400.0, 2.0], [96800.0, 2.0], [100000.0, 301.0], [109600.0, 37.0], [69500.0, 1.0], [72700.0, 4.0], [71100.0, 1.0], [74300.0, 2.0], [79100.0, 1.0], [80700.0, 1.0], [82300.0, 1.0], [95100.0, 3.0], [134600.0, 6.0], [33500.0, 4.0], [135500.0, 1.0], [138700.0, 11.0], [34300.0, 2.0], [35900.0, 1.0], [37500.0, 22.0], [39900.0, 6.0], [39100.0, 11.0], [40700.0, 1.0], [42300.0, 1.0], [43900.0, 2.0], [43100.0, 3.0], [45500.0, 2.0], [46300.0, 6.0], [48700.0, 2.0], [51100.0, 2.0], [51900.0, 3.0], [55100.0, 2.0], [56700.0, 1.0], [55900.0, 2.0], [57500.0, 2.0], [58300.0, 2.0], [59900.0, 1.0], [63100.0, 2.0], [63900.0, 2.0], [68600.0, 2.0], [76600.0, 21.0], [81400.0, 4.0], [89400.0, 2.0], [87800.0, 1.0], [94200.0, 1.0], [95800.0, 1.0], [143700.0, 3.0], [66100.0, 2.0], [72500.0, 4.0], [74100.0, 5.0], [83700.0, 1.0], [85300.0, 1.0], [88500.0, 2.0], [93300.0, 2.0], [96500.0, 2.0], [114100.0, 9.0], [138200.0, 2.0], [16700.0, 70.0], [17100.0, 79.0], [17500.0, 85.0], [18300.0, 11.0], [17900.0, 2.0], [19100.0, 4.0], [18700.0, 3.0], [19900.0, 14.0], [20300.0, 26.0], [19500.0, 73.0], [21100.0, 21.0], [20700.0, 5.0], [21500.0, 5.0], [21900.0, 9.0], [22300.0, 3.0], [23100.0, 3.0], [22700.0, 7.0], [23900.0, 14.0], [24300.0, 25.0], [25100.0, 1.0], [24700.0, 4.0], [27500.0, 2.0], [28300.0, 4.0], [29100.0, 10.0], [28700.0, 1.0], [29500.0, 17.0], [29900.0, 3.0], [30300.0, 2.0], [31500.0, 6.0], [32300.0, 7.0], [32700.0, 4.0], [33400.0, 7.0], [34200.0, 2.0], [36600.0, 3.0], [35000.0, 3.0], [37400.0, 45.0], [39800.0, 15.0], [39000.0, 13.0], [40600.0, 4.0], [42200.0, 1.0], [44600.0, 15.0], [43800.0, 2.0], [45400.0, 15.0], [48600.0, 1.0], [47800.0, 2.0], [55800.0, 2.0], [57400.0, 1.0], [60600.0, 2.0], [59800.0, 2.0], [63000.0, 2.0], [63800.0, 35.0], [64600.0, 1.0], [71600.0, 1.0], [70000.0, 1.0], [73200.0, 1.0], [74800.0, 24.0], [86000.0, 26.0], [82800.0, 1.0], [98800.0, 2.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 177900.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 37.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 17079.0, "series": [{"data": [[0.0, 7369.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 799.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 17079.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 37.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 173.82798833819245, "minX": 1.68289566E12, "maxY": 3000.0, "series": [{"data": [[1.68289566E12, 3000.0], [1.68289596E12, 2282.4689252860635], [1.68289578E12, 3000.0], [1.68289608E12, 173.82798833819245], [1.6828959E12, 3000.0], [1.68289572E12, 3000.0], [1.68289602E12, 403.5], [1.68289584E12, 3000.0]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68289608E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 34.0, "minX": 2.0, "maxY": 100101.0, "series": [{"data": [[2.0, 100093.0], [4.0, 100091.5], [5.0, 100087.0], [6.0, 100077.0], [9.0, 100077.0], [10.0, 100076.0], [12.0, 100075.0], [14.0, 100074.0], [15.0, 100072.0], [16.0, 100071.0], [17.0, 100070.0], [20.0, 100061.0], [22.0, 100081.0], [23.0, 100081.0], [27.0, 100080.0], [28.0, 100079.4], [31.0, 100079.0], [33.0, 100079.0], [35.0, 100077.0], [34.0, 100078.0], [37.0, 100074.0], [36.0, 100075.0], [38.0, 100073.0], [42.0, 100072.25], [45.0, 100070.66666666667], [46.0, 100069.0], [49.0, 100101.0], [48.0, 100068.5], [51.0, 100100.0], [53.0, 100098.0], [52.0, 100100.0], [55.0, 100094.0], [54.0, 100097.0], [59.0, 100087.0], [67.0, 100083.0], [66.0, 100084.0], [65.0, 100087.12500000001], [64.0, 100087.0], [69.0, 100079.0], [68.0, 100081.0], [74.0, 100078.2], [79.0, 100079.0], [78.0, 100079.0], [83.0, 100079.0], [82.0, 100078.0], [80.0, 100080.0], [90.0, 100078.0], [89.0, 100078.0], [88.0, 100078.0], [95.0, 100075.0], [94.0, 100076.0], [93.0, 100076.0], [92.0, 100077.0], [97.0, 100075.0], [96.0, 100074.0], [103.0, 100070.0], [101.0, 100073.33333333333], [100.0, 100073.0], [106.0, 100069.0], [105.0, 100069.0], [104.0, 100069.0], [110.0, 100056.25], [115.0, 100035.5], [113.0, 100039.0], [117.0, 100034.0], [123.0, 100028.0], [122.0, 100033.8], [143.0, 100024.85714285714], [142.0, 100025.0], [139.0, 100025.66666666667], [149.0, 100023.0], [148.0, 100023.8], [147.0, 100024.0], [145.0, 100024.57142857143], [144.0, 100025.0], [167.0, 100076.66666666667], [166.0, 100077.83333333334], [174.0, 100067.0], [173.0, 100071.0], [172.0, 100072.0], [171.0, 100072.0], [170.0, 100073.0], [169.0, 100076.0], [168.0, 100076.75], [183.0, 100040.0], [181.0, 100041.0], [180.0, 100054.0], [179.0, 100056.0], [177.0, 100061.0], [176.0, 100062.0], [191.0, 100036.6], [186.0, 100037.0], [184.0, 100040.0], [198.0, 100031.33333333333], [195.0, 100033.0], [192.0, 100034.0], [207.0, 100021.0], [206.0, 100020.0], [201.0, 100027.0], [200.0, 100029.0], [214.0, 100019.33333333333], [211.0, 100019.0], [210.0, 100019.0], [209.0, 100020.0], [208.0, 100020.0], [223.0, 100086.66666666667], [222.0, 100087.0], [218.0, 100017.75], [216.0, 100018.0], [230.0, 100085.0], [228.0, 100086.5], [226.0, 100085.0], [225.0, 100087.0], [224.0, 100087.0], [239.0, 100079.5], [237.0, 100081.0], [236.0, 100084.0], [235.0, 100084.0], [234.0, 100084.0], [233.0, 100085.0], [247.0, 100065.0], [246.0, 100068.25], [242.0, 100076.5], [240.0, 100080.0], [255.0, 100037.0], [254.0, 100045.5], [252.0, 100046.0], [251.0, 100060.0], [250.0, 100065.0], [271.0, 100015.0], [268.0, 100018.0], [267.0, 100019.0], [266.0, 100019.0], [265.0, 100021.0], [264.0, 100033.0], [261.0, 100034.0], [260.0, 100036.0], [256.0, 100036.0], [287.0, 100079.0], [284.0, 100081.0], [282.0, 100081.0], [280.0, 100082.0], [277.0, 99586.0], [276.0, 98532.0], [275.0, 100013.5], [302.0, 96344.0], [303.0, 95336.0], [301.0, 95549.0], [300.0, 96557.0], [299.0, 95503.0], [298.0, 96512.0], [297.0, 95416.0], [296.0, 96424.0], [295.0, 98969.0], [288.0, 100079.0], [290.0, 100075.0], [289.0, 100079.0], [294.0, 100071.0], [293.0, 100073.0], [292.0, 100074.0], [318.0, 87861.0], [319.0, 87369.0], [317.0, 85319.0], [316.0, 86326.0], [315.0, 88871.0], [314.0, 89879.0], [313.0, 88434.0], [312.0, 88346.0], [311.0, 91295.0], [305.0, 94327.0], [304.0, 95334.0], [307.0, 93317.0], [306.0, 94325.0], [310.0, 91507.0], [309.0, 91509.0], [308.0, 93314.0], [334.0, 79394.0], [335.0, 79783.0], [333.0, 80402.0], [332.0, 80795.0], [331.0, 82209.0], [330.0, 79262.0], [329.0, 80269.0], [328.0, 82813.0], [327.0, 83823.0], [321.0, 86459.0], [320.0, 86852.0], [323.0, 85841.0], [322.0, 85452.0], [326.0, 82376.0], [325.0, 83384.0], [324.0, 84833.0], [350.0, 71709.0], [351.0, 71707.0], [349.0, 72717.0], [348.0, 72719.0], [347.0, 72007.0], [346.0, 73337.0], [345.0, 74344.0], [344.0, 74346.0], [343.0, 75354.0], [337.0, 78774.0], [336.0, 78776.0], [339.0, 78170.0], [338.0, 77766.0], [342.0, 73204.0], [341.0, 75308.0], [340.0, 77161.0], [366.0, 64039.0], [367.0, 64038.0], [365.0, 65046.0], [364.0, 64643.0], [363.0, 65650.0], [362.0, 65652.0], [361.0, 66659.0], [360.0, 66661.0], [359.0, 67668.0], [353.0, 71103.0], [352.0, 70700.0], [355.0, 69297.0], [354.0, 70096.0], [358.0, 67670.0], [357.0, 68679.0], [356.0, 68289.0], [382.0, 55962.0], [383.0, 55960.0], [381.0, 56969.0], [380.0, 56971.0], [379.0, 57979.0], [378.0, 57980.0], [377.0, 58989.0], [376.0, 58991.0], [375.0, 59998.0], [369.0, 63028.0], [368.0, 63029.0], [371.0, 62018.0], [370.0, 62019.0], [374.0, 60000.0], [373.0, 61008.0], [372.0, 61010.0], [398.0, 47886.0], [399.0, 47884.0], [397.0, 48893.0], [396.0, 48895.0], [395.0, 49904.0], [394.0, 49905.0], [393.0, 50912.0], [392.0, 50915.0], [391.0, 51921.0], [385.0, 54950.0], [384.0, 54952.0], [387.0, 53940.0], [386.0, 53942.0], [390.0, 51924.0], [389.0, 52932.0], [388.0, 52933.0], [414.0, 39808.0], [415.0, 39807.0], [413.0, 40816.0], [412.0, 40818.0], [411.0, 41826.0], [410.0, 41829.0], [409.0, 42836.0], [408.0, 42838.0], [407.0, 43846.0], [401.0, 46874.0], [400.0, 46876.0], [403.0, 45866.0], [402.0, 45867.0], [406.0, 43847.0], [405.0, 44855.0], [404.0, 44858.0], [430.0, 32350.0], [431.0, 32348.0], [429.0, 33357.0], [428.0, 33359.0], [427.0, 34367.0], [426.0, 34369.0], [425.0, 35376.0], [424.0, 35379.0], [423.0, 36386.0], [417.0, 38798.0], [416.0, 38800.0], [419.0, 38405.0], [418.0, 38407.0], [422.0, 36388.0], [421.0, 37396.0], [420.0, 37399.0], [446.0, 24272.0], [447.0, 24270.0], [445.0, 25280.0], [444.0, 25282.0], [443.0, 26290.0], [442.0, 26292.0], [441.0, 27300.0], [440.0, 27302.0], [439.0, 28310.0], [433.0, 31340.0], [432.0, 31340.0], [435.0, 30328.0], [434.0, 30331.0], [438.0, 28311.0], [437.0, 29318.0], [436.0, 29321.0], [462.0, 16196.0], [463.0, 16195.0], [461.0, 17205.0], [460.0, 17206.0], [459.0, 18213.0], [458.0, 18215.0], [457.0, 19223.0], [456.0, 19225.0], [455.0, 20233.0], [449.0, 23261.0], [448.0, 23263.0], [451.0, 22251.0], [450.0, 22253.0], [454.0, 20234.0], [453.0, 21242.0], [452.0, 21244.0], [478.0, 11299.0], [479.0, 11299.0], [477.0, 11178.0], [476.0, 11179.0], [475.0, 11179.0], [474.0, 11180.0], [473.0, 11181.0], [471.0, 12157.0], [465.0, 15184.0], [464.0, 15187.0], [467.0, 14176.0], [466.0, 14177.0], [470.0, 12158.0], [469.0, 13167.0], [468.0, 13167.0], [494.0, 11414.0], [495.0, 11052.0], [493.0, 12601.0], [492.0, 10923.0], [491.0, 10923.0], [490.0, 10924.0], [489.0, 10927.0], [488.0, 10927.0], [487.0, 10927.0], [483.0, 10928.0], [482.0, 10928.5], [480.0, 11267.0], [486.0, 11091.666666666666], [499.0, 11412.0], [510.0, 10914.0], [508.0, 12593.0], [507.0, 10915.0], [505.0, 11407.0], [504.0, 10917.0], [503.0, 10919.0], [502.0, 11165.5], [500.0, 12846.0], [498.0, 12846.0], [497.0, 10921.0], [536.0, 10898.0], [540.0, 11143.0], [528.0, 12829.0], [538.0, 11143.0], [512.0, 11078.0], [516.0, 10912.0], [518.0, 10908.0], [524.0, 10905.0], [520.0, 11035.0], [534.0, 10900.0], [532.0, 10901.0], [530.0, 11032.0], [572.0, 10945.0], [574.0, 11010.0], [560.0, 11725.0], [562.0, 10885.0], [570.0, 10880.0], [558.0, 12813.0], [544.0, 11059.0], [548.0, 11839.5], [546.0, 10894.0], [550.0, 11384.0], [556.0, 12566.0], [554.0, 10889.0], [552.0, 12676.0], [566.0, 10882.0], [600.0, 12540.0], [592.0, 11705.5], [594.0, 12790.0], [604.0, 11351.5], [590.0, 12545.0], [576.0, 11367.0], [578.0, 11366.0], [580.0, 11712.0], [586.0, 12547.0], [584.0, 11035.0], [598.0, 12789.0], [596.0, 12542.0], [632.0, 12769.0], [624.0, 12635.0], [626.0, 12524.0], [634.0, 11855.0], [610.0, 12751.0], [608.0, 10987.0], [620.0, 10980.0], [618.0, 11815.0], [616.0, 10852.0], [628.0, 11336.0], [642.0, 12192.333333333334], [658.0, 11327.0], [670.0, 12756.0], [666.0, 11669.666666666666], [654.0, 12730.0], [652.0, 12334.333333333334], [650.0, 12515.0], [648.0, 12668.0], [660.0, 11739.0], [656.0, 11328.0], [700.0, 11305.0], [702.0, 12005.0], [696.0, 12707.0], [694.0, 11701.333333333334], [672.0, 11320.0], [674.0, 11316.0], [676.0, 11310.0], [684.0, 12494.0], [708.0, 11302.5], [720.0, 12685.0], [732.0, 10865.0], [730.0, 10736.0], [704.0, 12737.0], [706.0, 11457.0], [710.0, 10940.0], [718.0, 11297.0], [716.0, 11969.666666666666], [712.0, 12595.0], [724.0, 10789.0], [762.0, 11813.0], [766.0, 12581.0], [752.0, 12595.0], [764.0, 11749.0], [738.0, 11447.333333333334], [740.0, 12605.0], [742.0, 12356.0], [750.0, 10675.0], [748.0, 10986.5], [744.0, 10806.0], [754.0, 10798.0], [794.0, 12557.0], [798.0, 12516.0], [784.0, 12566.0], [788.0, 12563.0], [792.0, 10762.0], [774.0, 12542.0], [772.0, 10780.0], [770.0, 11387.666666666666], [782.0, 12535.0], [780.0, 12538.0], [778.0, 12570.0], [776.0, 12324.0], [790.0, 12421.0], [826.0, 12282.5], [830.0, 10734.0], [816.0, 12521.0], [818.0, 12290.0], [824.0, 10917.0], [806.0, 10749.0], [804.0, 12514.0], [802.0, 12515.0], [800.0, 12515.0], [814.0, 12539.0], [812.0, 10744.0], [808.0, 12294.0], [822.0, 12501.0], [820.0, 12287.0], [834.0, 12278.0], [858.0, 11486.0], [856.0, 12477.0], [838.0, 12500.333333333334], [832.0, 10731.0], [854.0, 10836.0], [848.0, 10718.0], [846.0, 12485.0], [844.0, 10722.0], [842.0, 12271.0], [840.0, 12273.0], [890.0, 10673.0], [894.0, 12423.0], [880.0, 11575.0], [892.0, 12468.0], [870.0, 12466.0], [868.0, 11663.0], [864.0, 11417.333333333334], [878.0, 11869.333333333334], [874.0, 11650.5], [872.0, 10701.0], [886.0, 12462.0], [884.0, 12479.0], [922.0, 12130.0], [926.0, 12370.0], [914.0, 12371.0], [912.0, 12372.0], [920.0, 12150.0], [902.0, 12192.0], [898.0, 12205.0], [896.0, 12422.0], [908.0, 10641.0], [906.0, 11866.666666666666], [918.0, 10605.0], [956.0, 12352.0], [958.0, 12350.0], [944.0, 12357.0], [946.0, 12356.0], [948.0, 12355.0], [954.0, 12354.0], [952.0, 12354.0], [934.0, 12364.0], [932.0, 10569.0], [930.0, 12368.0], [942.0, 12328.0], [940.0, 12361.0], [938.0, 12361.0], [936.0, 12363.0], [950.0, 12354.0], [984.0, 12083.0], [988.0, 10528.0], [976.0, 12086.0], [980.0, 12301.333333333334], [990.0, 12074.0], [986.0, 10528.0], [974.0, 12486.0], [960.0, 12423.0], [962.0, 12347.0], [964.0, 12346.0], [966.0, 12497.0], [972.0, 12307.0], [970.0, 12341.0], [1020.0, 7573.5], [1022.0, 9417.0], [1008.0, 6047.0], [1010.0, 7577.0], [1012.0, 7576.0], [1016.0, 9345.0], [998.0, 10186.0], [996.0, 10479.0], [994.0, 10514.0], [992.0, 10517.0], [1006.0, 7057.0], [1004.0, 8068.0], [1002.0, 9081.0], [1000.0, 10090.0], [1014.0, 7575.0], [1032.0, 7567.0], [1084.0, 7542.0], [1080.0, 9387.0], [1076.0, 8431.0], [1024.0, 7569.0], [1036.0, 8010.0], [1052.0, 7557.0], [1044.0, 8176.0], [1040.0, 9406.0], [1064.0, 8441.0], [1140.0, 10817.5], [1136.0, 7515.0], [1148.0, 10846.0], [1120.0, 9333.0], [1144.0, 10326.0], [1088.0, 7540.0], [1100.0, 9305.0], [1116.0, 9333.0], [1112.0, 9371.0], [1108.0, 9373.0], [1104.0, 9342.0], [1132.0, 9363.0], [1128.0, 9292.5], [1200.0, 10687.0], [1204.0, 9992.0], [1152.0, 10844.0], [1156.0, 10838.0], [1160.0, 7499.0], [1192.0, 10006.5], [1188.0, 10766.5], [1228.0, 10711.0], [1256.0, 9890.5], [1248.0, 10696.0], [1268.0, 10597.0], [1224.0, 9933.0], [1220.0, 9152.0], [1216.0, 10724.0], [1244.0, 9133.0], [1240.0, 9952.5], [1236.0, 10657.333333333334], [1232.0, 10322.25], [1260.0, 10666.0], [1252.0, 10181.0], [1292.0, 10573.0], [1332.0, 15061.0], [1316.0, 9858.0], [1340.0, 15046.0], [1288.0, 10577.0], [1280.0, 10591.0], [1308.0, 9114.0], [1304.0, 9120.0], [1296.0, 10558.0], [1320.0, 10587.0], [1376.0, 8692.0], [1404.0, 10214.0], [1388.0, 6883.0], [1400.0, 11302.333333333334], [1396.0, 15034.0], [1392.0, 8726.0], [1364.0, 15038.0], [1460.0, 10181.0], [1464.0, 10115.0], [1440.0, 12791.0], [1444.0, 15015.0], [1448.0, 10134.0], [1452.0, 11281.0], [1456.0, 10118.0], [1416.0, 15022.0], [1412.0, 8718.0], [1408.0, 9172.666666666666], [1432.0, 13413.666666666666], [1428.0, 15020.0], [1424.0, 9457.5], [1476.0, 14991.0], [1520.0, 80.0], [1500.0, 4089.0], [1480.0, 14984.0], [1484.0, 14958.0], [1496.0, 14844.0], [1504.0, 93.0], [1508.0, 91.0], [1584.0, 63.0], [1556.0, 53.08333333333335], [1608.0, 51.5], [1656.0, 72.25], [1660.0, 71.36363636363636], [1604.0, 52.333333333333336], [1624.0, 94.25], [1616.0, 98.0], [1704.0, 10333.0], [1708.0, 10494.8], [1716.0, 9255.0], [1664.0, 69.5], [1676.0, 1087.0], [1692.0, 11153.0], [1784.0, 9189.666666666666], [1788.0, 9210.0], [1768.0, 11104.0], [1760.0, 11350.0], [1764.0, 10290.0], [1772.0, 9218.0], [1776.0, 9142.0], [1732.0, 9786.5], [1736.0, 10316.0], [1740.0, 9250.0], [1756.0, 11351.0], [1752.0, 9943.0], [1748.0, 11116.0], [1744.0, 9590.333333333334], [1848.0, 9089.5], [1832.0, 9081.0], [1836.0, 9688.0], [1852.0, 9045.0], [1840.0, 9079.0], [1804.0, 9198.0], [1796.0, 9740.5], [1792.0, 9207.0], [1816.0, 9188.0], [1812.0, 9192.0], [1808.0, 9157.5], [1912.0, 8999.0], [1908.0, 9040.0], [1888.0, 9030.0], [1896.0, 9102.0], [1900.0, 11211.0], [1916.0, 8996.0], [1904.0, 9084.0], [1864.0, 9040.0], [1860.0, 9042.0], [1856.0, 9045.333333333334], [1880.0, 9031.0], [1876.0, 9058.333333333334], [1872.0, 9108.0], [1976.0, 7942.0], [1952.0, 10774.0], [1960.0, 11983.0], [1980.0, 10760.0], [1972.0, 10572.666666666666], [1968.0, 11980.0], [1928.0, 10134.0], [1924.0, 9565.0], [1920.0, 8995.0], [1948.0, 11986.0], [1944.0, 13617.0], [1940.0, 13910.0], [1936.0, 13916.0], [1996.0, 7736.0], [2040.0, 11947.0], [2044.0, 9930.5], [1984.0, 12609.0], [2144.0, 11255.5], [2120.0, 13534.0], [2168.0, 10532.0], [2152.0, 7619.0], [2064.0, 11967.0], [2104.0, 9194.0], [2088.0, 11942.0], [2080.0, 13022.0], [2288.0, 11241.333333333334], [2280.0, 13279.0], [2248.0, 11679.0], [2256.0, 11817.0], [2296.0, 13260.0], [2272.0, 10448.0], [2176.0, 7507.0], [2184.0, 10861.666666666666], [2192.0, 13344.0], [2200.0, 10498.0], [2224.0, 11731.333333333334], [2216.0, 12978.333333333334], [2416.0, 13661.0], [2384.0, 14236.0], [2328.0, 15400.0], [2304.0, 12258.0], [2352.0, 10351.0], [2336.0, 12873.0], [2496.0, 13749.75], [2480.0, 23287.5], [2472.0, 13345.0], [2672.0, 14103.0], [2664.0, 14036.0], [2632.0, 13815.5], [2616.0, 14039.0], [2592.0, 18841.0], [2792.0, 14106.0], [2800.0, 20352.333333333332], [2696.0, 13723.8], [2744.0, 21661.5], [2728.0, 13762.0], [2720.0, 12663.0], [2904.0, 70.0], [2912.0, 69.0], [2816.0, 83.0], [3000.0, 11424.904988123511], [2952.0, 71.0], [2968.0, 64.66666666666667], [2161.0, 11945.5], [2113.0, 12448.0], [2121.0, 12718.0], [2137.0, 11861.0], [2145.0, 13490.0], [2049.0, 10735.0], [2105.0, 9192.5], [2089.0, 12284.5], [2289.0, 7613.0], [2241.0, 11892.5], [2257.0, 12958.0], [2297.0, 11629.0], [2281.0, 13279.0], [2273.0, 10448.0], [2177.0, 7601.5], [2193.0, 13341.0], [2201.0, 13338.0], [2233.0, 12994.0], [2209.0, 11102.5], [2417.0, 17809.8], [2369.0, 10338.0], [2401.0, 33099.0], [2321.0, 14140.0], [2305.0, 13242.0], [2337.0, 15384.0], [2457.0, 11920.5], [2481.0, 13729.0], [2473.0, 26435.0], [2465.0, 12485.0], [2665.0, 14096.0], [2673.0, 13611.5], [2681.0, 14003.0], [2633.0, 16333.0], [2657.0, 13732.5], [2585.0, 13135.5], [2617.0, 14139.0], [2609.0, 23689.0], [2601.0, 13394.0], [2809.0, 14005.0], [2801.0, 14072.0], [2745.0, 14023.0], [2737.0, 13803.0], [2729.0, 14029.0], [2905.0, 69.0], [2889.0, 71.0], [2913.0, 69.0], [2817.0, 82.0], [2825.0, 81.0], [2961.0, 66.0], [1029.0, 8159.333333333333], [1081.0, 9313.0], [1077.0, 9388.0], [1073.0, 7547.0], [1025.0, 7570.0], [1037.0, 9411.0], [1049.0, 7557.5], [1045.0, 7560.0], [1041.0, 7563.0], [1069.0, 8433.0], [1137.0, 8400.0], [1149.0, 10845.0], [1145.0, 9283.0], [1141.0, 7513.0], [1089.0, 9309.0], [1093.0, 9306.0], [1113.0, 7526.0], [1109.0, 9299.0], [1105.0, 8419.5], [1129.0, 9365.0], [1121.0, 9369.0], [1201.0, 9247.0], [1213.0, 9234.0], [1209.0, 10189.333333333334], [1205.0, 10736.0], [1165.0, 10768.0], [1161.0, 10087.5], [1157.0, 9347.0], [1153.0, 10843.0], [1197.0, 10719.0], [1189.0, 10734.0], [1185.0, 10091.76923076923], [1269.0, 10597.0], [1277.0, 10608.0], [1253.0, 10669.0], [1273.0, 10657.0], [1265.0, 10630.0], [1225.0, 10651.0], [1221.0, 9152.0], [1217.0, 10692.0], [1245.0, 9919.5], [1233.0, 9135.0], [1257.0, 10667.0], [1333.0, 15059.0], [1313.0, 10572.5], [1321.0, 10573.0], [1337.0, 6897.0], [1329.0, 15061.0], [1293.0, 10570.0], [1285.0, 9897.5], [1281.0, 10587.0], [1305.0, 9118.0], [1297.0, 10557.0], [1325.0, 11870.0], [1401.0, 11398.0], [1381.0, 11389.142857142857], [1345.0, 11851.5], [1369.0, 8656.0], [1361.0, 6887.0], [1465.0, 8686.0], [1469.0, 14992.0], [1445.0, 15015.0], [1453.0, 10133.0], [1461.0, 12589.0], [1417.0, 15021.0], [1413.0, 10144.0], [1409.0, 15030.0], [1433.0, 15020.0], [1429.0, 10942.5], [1425.0, 15020.0], [1485.0, 8649.0], [1473.0, 14991.0], [1477.0, 10110.0], [1481.0, 10152.0], [1493.0, 12421.5], [1489.0, 12513.5], [1505.0, 93.0], [1509.0, 90.0], [1517.0, 87.0], [1513.0, 89.0], [1589.0, 63.0], [1585.0, 63.0], [1557.0, 3079.0], [1653.0, 72.0], [1657.0, 72.2], [1613.0, 50.4], [1601.0, 53.0], [1629.0, 93.0], [1625.0, 94.0], [1621.0, 95.0], [1725.0, 9252.5], [1721.0, 11379.0], [1697.0, 9266.0], [1705.0, 10333.0], [1709.0, 10326.0], [1713.0, 10324.5], [1665.0, 2069.0], [1677.0, 1084.0], [1689.0, 9271.5], [1789.0, 9209.0], [1761.0, 10292.0], [1765.0, 11105.0], [1769.0, 9220.0], [1773.0, 11343.0], [1785.0, 9189.333333333334], [1729.0, 10041.4], [1733.0, 9251.0], [1741.0, 9234.0], [1757.0, 11352.0], [1753.0, 11114.0], [1749.0, 10301.0], [1745.0, 9233.0], [1845.0, 9089.5], [1825.0, 10090.0], [1829.0, 11300.5], [1849.0, 9050.0], [1805.0, 9122.0], [1801.0, 9204.0], [1797.0, 9206.0], [1817.0, 10255.0], [1813.0, 11317.0], [1809.0, 9120.0], [1909.0, 9002.0], [1913.0, 8999.0], [1893.0, 9028.666666666666], [1897.0, 9101.0], [1901.0, 9084.0], [1869.0, 9037.0], [1865.0, 9611.0], [1861.0, 9041.0], [1857.0, 9044.0], [1873.0, 10993.0], [1977.0, 13602.0], [1973.0, 13607.0], [1957.0, 11378.5], [1953.0, 13275.0], [1961.0, 7763.0], [1965.0, 12189.5], [1929.0, 10132.0], [1941.0, 13910.0], [1937.0, 13916.0], [1993.0, 12166.5], [1997.0, 11954.0], [1989.0, 11353.5], [1985.0, 10753.0], [2170.0, 14286.0], [2114.0, 10244.25], [2050.0, 10136.0], [2058.0, 12888.5], [2090.0, 9926.0], [2298.0, 11628.0], [2242.0, 12973.0], [2250.0, 12968.0], [2258.0, 15483.0], [2266.0, 13120.0], [2290.0, 13274.0], [2282.0, 11647.0], [2274.0, 12949.0], [2186.0, 10260.5], [2202.0, 13338.0], [2234.0, 12677.333333333334], [2210.0, 13336.0], [2402.0, 14106.0], [2370.0, 10337.0], [2330.0, 14128.0], [2314.0, 12880.0], [2306.0, 10391.0], [2354.0, 10350.5], [2346.0, 7345.5], [2458.0, 13211.0], [2498.0, 18477.5], [2482.0, 13653.0], [2466.0, 18422.75], [2626.0, 14138.5], [2666.0, 20321.333333333332], [2634.0, 20366.666666666668], [2658.0, 13922.5], [2618.0, 20186.333333333332], [2602.0, 15557.09090909091], [2594.0, 18826.125], [2786.0, 13563.0], [2706.0, 13917.5], [2698.0, 13646.5], [2930.0, 89.5], [2906.0, 69.0], [2938.0, 70.0], [2914.0, 69.0909090909091], [2850.0, 66.14285714285714], [2826.0, 81.0], [2962.0, 66.0], [2954.0, 70.0], [2123.0, 12718.0], [2131.0, 11460.333333333334], [2163.0, 9020.5], [2155.0, 12407.0], [2075.0, 10732.0], [2091.0, 13096.285714285714], [2083.0, 13232.0], [2275.0, 12947.0], [2299.0, 11627.0], [2243.0, 13313.0], [2259.0, 15483.0], [2283.0, 13276.0], [2179.0, 10261.0], [2187.0, 10514.0], [2195.0, 13341.0], [2203.0, 10496.0], [2235.0, 13333.0], [2227.0, 13335.0], [2219.0, 11732.0], [2323.0, 15402.5], [2411.0, 17835.8], [2427.0, 13734.0], [2403.0, 14106.0], [2315.0, 13219.666666666666], [2307.0, 13226.0], [2363.0, 10339.0], [2355.0, 10350.0], [2435.0, 33055.5], [2459.0, 14060.0], [2483.0, 14060.0], [2475.0, 13210.0], [2467.0, 13614.0], [2667.0, 21072.875], [2675.0, 14036.0], [2627.0, 13651.0], [2683.0, 14035.0], [2659.0, 13593.0], [2587.0, 23419.0], [2579.0, 13598.0], [2603.0, 23418.0], [2811.0, 18800.375], [2803.0, 22713.5], [2755.0, 14116.0], [2715.0, 23444.25], [2707.0, 14132.0], [2747.0, 13685.0], [2731.0, 13863.0], [2923.0, 101.6], [2827.0, 81.0], [2835.0, 69.33333333333333], [2971.0, 64.0], [2955.0, 69.0], [513.0, 10913.0], [531.0, 10901.0], [541.0, 10897.0], [527.0, 10903.0], [515.0, 11159.5], [517.0, 10910.0], [519.0, 10907.0], [525.0, 10905.0], [523.0, 10905.0], [521.0, 10906.0], [533.0, 12794.0], [529.0, 10902.0], [569.0, 10881.5], [575.0, 12553.0], [561.0, 11377.0], [573.0, 12558.0], [545.0, 12788.0], [549.0, 10891.0], [557.0, 10887.0], [555.0, 10888.0], [553.0, 10889.0], [567.0, 10882.0], [565.0, 11831.0], [563.0, 12562.0], [603.0, 10860.0], [605.0, 11352.0], [607.0, 11761.0], [593.0, 10865.0], [595.0, 11356.0], [601.0, 11353.0], [577.0, 12552.0], [581.0, 12549.0], [589.0, 11471.333333333334], [585.0, 10870.0], [599.0, 11354.0], [597.0, 12542.0], [635.0, 12519.0], [637.0, 11149.5], [627.0, 12523.0], [639.0, 11849.5], [625.0, 12525.0], [615.0, 11499.0], [613.0, 11346.0], [611.0, 10983.0], [609.0, 10986.0], [623.0, 12042.5], [621.0, 11341.0], [631.0, 11928.5], [629.0, 10974.0], [669.0, 11915.0], [671.0, 12507.0], [655.0, 10966.0], [645.0, 11329.0], [651.0, 10966.0], [649.0, 12731.0], [663.0, 10896.5], [661.0, 10964.0], [679.0, 11129.5], [701.0, 11140.666666666666], [695.0, 11021.333333333334], [689.0, 12250.5], [687.0, 12709.0], [673.0, 11319.0], [675.0, 11314.0], [677.0, 11311.0], [683.0, 11901.0], [681.0, 11127.5], [729.0, 11825.25], [733.0, 11176.0], [735.0, 11173.5], [731.0, 11227.0], [719.0, 10922.0], [709.0, 11302.0], [717.0, 12701.0], [713.0, 12735.0], [725.0, 12467.0], [723.0, 11036.5], [721.0, 12717.0], [739.0, 12358.0], [761.0, 11158.0], [767.0, 12579.0], [765.0, 12332.0], [751.0, 12600.0], [743.0, 10808.0], [749.0, 12601.0], [747.0, 10677.0], [745.0, 12571.0], [757.0, 10913.0], [755.0, 10798.0], [753.0, 11160.0], [795.0, 12309.0], [793.0, 12526.0], [799.0, 12515.0], [787.0, 12473.0], [797.0, 12540.5], [775.0, 10777.0], [773.0, 12328.0], [771.0, 12330.0], [783.0, 10771.0], [781.0, 12569.0], [779.0, 12538.0], [777.0, 12540.0], [791.0, 11126.0], [827.0, 12500.0], [829.0, 11814.0], [819.0, 10738.0], [817.0, 10741.0], [807.0, 12510.0], [805.0, 12298.0], [803.0, 12514.0], [813.0, 12508.0], [811.0, 10745.0], [821.0, 12502.0], [833.0, 12511.0], [861.0, 11666.5], [839.0, 10725.0], [835.0, 11091.0], [855.0, 12262.0], [851.0, 11914.333333333334], [847.0, 12517.0], [845.0, 10721.0], [843.0, 12518.0], [841.0, 12487.0], [893.0, 12455.0], [895.0, 12423.0], [883.0, 10682.5], [881.0, 12448.0], [891.0, 12436.0], [889.0, 11848.666666666666], [871.0, 12466.0], [869.0, 11069.0], [867.0, 12504.0], [865.0, 12488.5], [877.0, 10694.0], [923.0, 12346.0], [921.0, 12365.0], [927.0, 12337.0], [917.0, 12370.0], [915.0, 10607.0], [925.0, 12355.0], [901.0, 10826.0], [899.0, 12203.0], [897.0, 12421.0], [911.0, 12265.0], [909.0, 12405.0], [907.0, 12405.0], [905.0, 12438.0], [919.0, 10602.0], [953.0, 12354.5], [957.0, 12320.0], [945.0, 12509.0], [947.0, 12507.0], [955.0, 12353.0], [935.0, 12365.0], [933.0, 12366.0], [931.0, 12520.0], [929.0, 12444.5], [943.0, 12359.0], [941.0, 12360.0], [937.0, 12362.0], [949.0, 12355.0], [987.0, 12476.0], [991.0, 12465.0], [977.0, 12194.0], [989.0, 10526.0], [985.0, 12299.0], [961.0, 12347.0], [963.0, 12346.0], [965.0, 12345.0], [967.0, 12345.0], [973.0, 12335.0], [971.0, 12341.0], [969.0, 12419.0], [983.0, 11418.0], [981.0, 12084.0], [1019.0, 7574.0], [1017.0, 9345.0], [1023.0, 7572.0], [1009.0, 7577.0], [1011.0, 9347.0], [1021.0, 9344.0], [999.0, 10092.0], [997.0, 10187.0], [995.0, 12427.0], [993.0, 12463.0], [1007.0, 6049.0], [1005.0, 7059.0], [1003.0, 8070.0], [1001.0, 9081.0], [1015.0, 8497.0], [1082.0, 7542.0], [1074.0, 9390.0], [1086.0, 8426.5], [1054.0, 9326.0], [1026.0, 7569.0], [1030.0, 7569.0], [1038.0, 7564.0], [1050.0, 9328.0], [1046.0, 9330.0], [1070.0, 7548.0], [1066.0, 8246.375], [1058.0, 8440.5], [1146.0, 10846.0], [1126.0, 9293.333333333334], [1138.0, 9285.0], [1118.0, 9370.0], [1094.0, 8458.5], [1090.0, 9309.0], [1102.0, 9379.0], [1110.0, 10863.0], [1134.0, 10069.0], [1130.0, 9290.0], [1166.0, 10335.0], [1190.0, 10797.0], [1214.0, 9910.5], [1206.0, 9241.0], [1182.0, 9338.0], [1154.0, 9351.0], [1158.0, 9269.0], [1162.0, 10832.0], [1174.0, 9339.0], [1170.0, 10050.25], [1198.0, 9260.0], [1194.0, 10687.5], [1186.0, 9233.0], [1270.0, 10657.0], [1274.0, 10592.0], [1226.0, 10714.0], [1222.0, 9225.0], [1218.0, 10660.0], [1238.0, 10634.5], [1262.0, 10633.0], [1258.0, 10602.0], [1254.0, 10669.0], [1330.0, 9448.25], [1342.0, 10969.5], [1314.0, 9858.0], [1334.0, 15053.0], [1294.0, 9133.0], [1282.0, 10583.0], [1310.0, 10605.0], [1306.0, 10544.0], [1302.0, 9595.666666666666], [1298.0, 9048.0], [1322.0, 10568.0], [1318.0, 9857.0], [1398.0, 15033.0], [1378.0, 6883.0], [1386.0, 15034.666666666666], [1390.0, 15035.0], [1394.0, 15034.0], [1354.0, 11848.5], [1346.0, 15041.0], [1370.0, 10807.666666666666], [1470.0, 11837.0], [1446.0, 15015.0], [1466.0, 14993.0], [1442.0, 15015.0], [1450.0, 10197.0], [1454.0, 10194.0], [1458.0, 11844.0], [1422.0, 15020.75], [1418.0, 15021.0], [1414.0, 8716.0], [1410.0, 10213.0], [1430.0, 15020.0], [1478.0, 14991.0], [1510.0, 90.0], [1474.0, 12582.5], [1482.0, 10087.0], [1498.0, 4423.5], [1494.0, 14860.0], [1490.0, 9989.0], [1506.0, 91.0], [1518.0, 86.0], [1514.0, 88.0], [1598.0, 53.142857142857146], [1590.0, 63.0], [1586.0, 63.0], [1558.0, 3078.0], [1654.0, 72.0], [1622.0, 96.0], [1618.0, 96.0], [1718.0, 9788.0], [1702.0, 10067.0], [1706.0, 11391.0], [1722.0, 9216.5], [1714.0, 9256.0], [1694.0, 10745.0], [1666.0, 2067.0], [1690.0, 10747.0], [1686.0, 10807.5], [1682.0, 10340.0], [1710.0, 10326.0], [1786.0, 9213.0], [1762.0, 11349.0], [1766.0, 10289.0], [1770.0, 9146.0], [1774.0, 11342.0], [1778.0, 9216.5], [1730.0, 9253.0], [1738.0, 9251.0], [1754.0, 11111.0], [1806.0, 9194.0], [1850.0, 10192.0], [1826.0, 9180.0], [1834.0, 10216.5], [1842.0, 9128.666666666666], [1802.0, 9738.5], [1798.0, 9205.0], [1794.0, 9741.0], [1822.0, 9185.0], [1818.0, 9187.0], [1814.0, 9117.0], [1810.0, 9192.0], [1910.0, 9001.0], [1894.0, 9028.0], [1898.0, 9026.0], [1918.0, 8996.0], [1906.0, 10102.5], [1866.0, 9039.0], [1862.0, 9041.0], [1858.0, 9117.0], [1882.0, 9105.0], [1970.0, 7760.0], [1974.0, 11976.0], [1982.0, 11969.0], [1954.0, 11986.0], [1958.0, 10773.0], [1962.0, 7763.0], [1934.0, 8976.0], [1930.0, 8985.0], [1926.0, 9972.5], [1922.0, 8994.0], [1950.0, 11009.666666666666], [1938.0, 13915.0], [2046.0, 11340.5], [2042.0, 12762.0], [1998.0, 10743.0], [1994.0, 7924.0], [1990.0, 11957.0], [1986.0, 10752.0], [2164.0, 13364.0], [2156.0, 13455.0], [2116.0, 15720.0], [2172.0, 9014.5], [2060.0, 13347.666666666666], [2076.0, 12285.5], [2108.0, 13535.0], [2092.0, 12024.42857142857], [2276.0, 11654.0], [2300.0, 13257.0], [2244.0, 13313.0], [2252.0, 10468.0], [2260.0, 12954.0], [2196.0, 11919.5], [2204.0, 13337.0], [2236.0, 12977.0], [2212.0, 10495.0], [2404.0, 18766.25], [2396.0, 33306.0], [2332.0, 15399.5], [2308.0, 15408.0], [2340.0, 15384.0], [2492.0, 13728.0], [2484.0, 17270.545454545456], [2476.0, 14159.0], [2468.0, 14059.0], [2676.0, 22392.0], [2628.0, 22097.142857142855], [2636.0, 14137.0], [2684.0, 32821.0], [2668.0, 13402.5], [2660.0, 13921.25], [2580.0, 13927.333333333334], [2620.0, 13978.0], [2812.0, 13674.0], [2796.0, 17420.6], [2716.0, 13586.0], [2740.0, 14125.0], [2924.0, 91.0], [2908.0, 69.0], [2940.0, 34.0], [2916.0, 69.0], [2828.0, 80.5], [2836.0, 68.0], [2964.0, 65.5], [2956.0, 68.0], [2165.0, 10523.0], [2117.0, 7685.0], [2125.0, 13496.0], [2173.0, 13358.0], [2157.0, 7605.0], [2149.0, 11661.5], [2053.0, 13461.666666666666], [2077.0, 13573.0], [2093.0, 12587.0], [2085.0, 10731.0], [2293.0, 12315.666666666666], [2285.0, 10435.0], [2245.0, 13311.0], [2253.0, 12967.0], [2261.0, 13295.0], [2301.0, 11625.0], [2277.0, 10441.0], [2189.0, 11933.5], [2205.0, 13337.0], [2229.0, 11743.5], [2213.0, 11745.5], [2405.0, 14107.0], [2421.0, 18747.25], [2373.0, 10338.0], [2397.0, 13719.0], [2325.0, 15401.0], [2317.0, 15405.0], [2309.0, 12882.0], [2357.0, 10349.5], [2349.0, 10351.5], [2341.0, 15384.0], [2493.0, 16471.428571428572], [2461.0, 17613.8], [2637.0, 13927.0], [2661.0, 13592.0], [2621.0, 13595.0], [2613.0, 13652.0], [2605.0, 13595.0], [2597.0, 23211.0], [2789.0, 13743.666666666666], [2797.0, 23656.0], [2717.0, 13701.0], [2709.0, 23681.0], [2701.0, 21791.571428571428], [2909.0, 69.0], [2829.0, 80.0], [2949.0, 71.0], [1083.0, 9312.0], [1087.0, 9311.0], [1079.0, 9350.0], [1051.0, 7558.0], [1031.0, 7569.0], [1039.0, 7563.0], [1047.0, 7560.0], [1071.0, 7547.0], [1067.0, 7550.0], [1063.0, 9400.0], [1147.0, 9355.0], [1151.0, 10029.5], [1119.0, 9333.5], [1091.0, 9307.0], [1099.0, 9266.6], [1111.0, 10799.0], [1107.0, 7534.0], [1131.0, 9290.0], [1123.0, 9369.0], [1211.0, 9942.5], [1203.0, 10738.0], [1155.0, 7505.0], [1199.0, 9968.5], [1279.0, 9877.5], [1251.0, 10614.0], [1271.0, 10593.0], [1267.0, 10143.0], [1227.0, 9147.0], [1219.0, 9227.0], [1247.0, 9915.0], [1259.0, 10602.0], [1331.0, 8678.0], [1339.0, 12919.333333333334], [1343.0, 15043.0], [1315.0, 10539.0], [1319.0, 10530.0], [1335.0, 8666.0], [1295.0, 10560.0], [1287.0, 10610.0], [1283.0, 10581.0], [1307.0, 10607.0], [1303.0, 10611.0], [1299.0, 10548.0], [1323.0, 8679.0], [1403.0, 11877.0], [1407.0, 12589.5], [1379.0, 8655.0], [1387.0, 15035.0], [1391.0, 12317.666666666666], [1399.0, 9293.6], [1395.0, 12236.75], [1347.0, 8733.0], [1371.0, 9202.0], [1363.0, 8656.5], [1447.0, 15015.0], [1455.0, 15012.0], [1467.0, 14992.0], [1463.0, 12588.0], [1415.0, 10142.0], [1411.0, 15026.0], [1435.0, 12609.5], [1479.0, 10110.0], [1515.0, 87.0], [1475.0, 10175.0], [1483.0, 10078.0], [1487.0, 12516.0], [1499.0, 4092.0], [1495.0, 14845.0], [1491.0, 14865.0], [1519.0, 80.0], [1511.0, 90.0], [1591.0, 62.5], [1587.0, 63.0], [1563.0, 66.4], [1659.0, 72.0], [1655.0, 72.16666666666667], [1615.0, 97.0], [1627.0, 92.5], [1715.0, 11139.0], [1667.0, 77.0], [1675.0, 76.625], [1679.0, 60.0], [1691.0, 8946.0], [1711.0, 9257.0], [1791.0, 9208.0], [1787.0, 9213.0], [1763.0, 9148.0], [1767.0, 10289.0], [1771.0, 9220.0], [1775.0, 9142.0], [1779.0, 10283.0], [1759.0, 9225.5], [1739.0, 10847.0], [1755.0, 9227.0], [1747.0, 9730.5], [1847.0, 11011.0], [1843.0, 9054.0], [1855.0, 9045.0], [1827.0, 9178.0], [1831.0, 9137.0], [1851.0, 10191.0], [1803.0, 9126.0], [1799.0, 9204.0], [1823.0, 9719.0], [1819.0, 9113.0], [1815.0, 9115.0], [1811.0, 9118.0], [1919.0, 8995.0], [1911.0, 9000.0], [1895.0, 9028.0], [1891.0, 9066.0], [1899.0, 9090.0], [1903.0, 9084.5], [1871.0, 10134.5], [1867.0, 9038.0], [1859.0, 11241.0], [1887.0, 9410.666666666666], [1883.0, 9031.0], [1879.0, 9412.666666666666], [1979.0, 13602.5], [1955.0, 10773.0], [1963.0, 11982.0], [1967.0, 10609.0], [1975.0, 13605.0], [1935.0, 13916.0], [1931.0, 11178.0], [1927.0, 11190.0], [1923.0, 8994.0], [1947.0, 11380.5], [1943.0, 7768.0], [1939.0, 13912.0], [2039.0, 9838.5], [1995.0, 7737.0], [1991.0, 7925.0], [1987.0, 7742.0], [2150.0, 7620.0], [2166.0, 13364.0], [2134.0, 9745.714285714284], [2142.0, 10545.42857142857], [2110.0, 10244.75], [2054.0, 11786.8], [2078.0, 11943.0], [2094.0, 11336.5], [2086.0, 13233.0], [2278.0, 15467.0], [2286.0, 11646.0], [2302.0, 11625.0], [2254.0, 12967.0], [2262.0, 7444.0], [2182.0, 13356.0], [2190.0, 13347.0], [2198.0, 13170.0], [2238.0, 13314.0], [2230.0, 13836.0], [2406.0, 23483.5], [2430.0, 14064.0], [2374.0, 11181.1], [2382.0, 13865.857142857143], [2390.0, 32893.0], [2422.0, 14067.0], [2318.0, 14311.5], [2310.0, 15407.0], [2358.0, 10347.0], [2350.0, 10351.0], [2342.0, 7347.0], [2494.0, 13614.0], [2462.0, 23287.5], [2486.0, 23493.0], [2470.0, 19717.0], [2678.0, 13591.0], [2662.0, 16961.666666666664], [2590.0, 13711.5], [2606.0, 14039.0], [2790.0, 13532.0], [2814.0, 13616.0], [2758.0, 17483.909090909092], [2798.0, 13562.0], [2710.0, 14031.0], [2726.0, 25423.8], [2886.0, 71.0], [2942.0, 71.5], [2902.0, 70.0], [2910.0, 69.25], [2918.0, 68.15789473684211], [2822.0, 82.0], [2830.0, 71.0], [2958.0, 66.0], [2159.0, 13276.0], [2151.0, 13468.0], [2175.0, 7695.0], [2119.0, 10546.75], [2055.0, 13235.0], [2063.0, 12400.666666666666], [2103.0, 11909.0], [2095.0, 12908.625], [2279.0, 11650.0], [2295.0, 12447.0], [2247.0, 13139.0], [2263.0, 10451.0], [2271.0, 11456.833333333334], [2239.0, 12499.0], [2183.0, 7693.0], [2191.0, 10504.0], [2199.0, 12999.0], [2223.0, 10494.0], [2215.0, 11745.5], [2327.0, 15400.0], [2375.0, 13839.0], [2391.0, 23542.0], [2335.0, 15399.0], [2319.0, 12878.0], [2311.0, 15406.0], [2367.0, 10338.0], [2351.0, 10351.5], [2495.0, 33257.0], [2479.0, 13729.0], [2687.0, 14106.0], [2679.0, 12668.0], [2631.0, 13861.166666666666], [2655.0, 13868.5], [2671.0, 21653.4], [2663.0, 12668.5], [2583.0, 18648.5], [2623.0, 13873.25], [2807.0, 22714.5], [2799.0, 20300.666666666668], [2791.0, 13926.0], [2719.0, 33229.0], [2703.0, 13917.0], [2727.0, 13864.0], [2935.0, 88.0], [2895.0, 70.0], [2911.0, 69.16666666666667], [2823.0, 82.0], [2831.0, 70.0], [2967.0, 65.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[2822.8521594684426, 12689.26514791966]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 3000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 1008.0, "minX": 1.68289566E12, "maxY": 73135.56666666667, "series": [{"data": [[1.68289566E12, 2936.8], [1.68289596E12, 49881.38333333333], [1.68289578E12, 69067.43333333333], [1.68289608E12, 4130.8], [1.6828959E12, 61053.05], [1.68289572E12, 28163.666666666668], [1.68289602E12, 1471.05], [1.68289584E12, 73135.56666666667]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.68289566E12, 2352.0], [1.68289596E12, 37438.8], [1.68289578E12, 50862.0], [1.68289608E12, 2881.2], [1.6828959E12, 44352.0], [1.68289572E12, 22100.4], [1.68289602E12, 1008.0], [1.68289584E12, 51080.4]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68289608E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 3299.892857142857, "minX": 1.68289566E12, "maxY": 98157.73469387754, "series": [{"data": [[1.68289566E12, 3299.892857142857], [1.68289596E12, 9174.059008301523], [1.68289578E12, 15438.118909991752], [1.68289608E12, 98157.73469387754], [1.6828959E12, 9640.520075757597], [1.68289572E12, 14389.01938426455], [1.68289602E12, 45502.26666666668], [1.68289584E12, 9424.156260215736]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68289608E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 3299.3357142857144, "minX": 1.68289566E12, "maxY": 98157.72303207002, "series": [{"data": [[1.68289566E12, 3299.3357142857144], [1.68289596E12, 9174.04801435947], [1.68289578E12, 15438.09463253511], [1.68289608E12, 98157.72303207002], [1.6828959E12, 9640.509848484822], [1.68289572E12, 14389.001520334454], [1.68289602E12, 45502.25833333331], [1.68289584E12, 8761.134684537405]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68289608E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.32892079874354935, "minX": 1.68289566E12, "maxY": 4284.104609349471, "series": [{"data": [[1.68289566E12, 23.024999999999977], [1.68289596E12, 0.32892079874354935], [1.68289578E12, 3076.5757225433626], [1.68289608E12, 0.5481049562682219], [1.6828959E12, 1754.0948863636306], [1.68289572E12, 1.4484986697073403], [1.68289602E12, 0.6166666666666667], [1.68289584E12, 4284.104609349471]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68289608E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 9.0, "minX": 1.68289566E12, "maxY": 177900.0, "series": [{"data": [[1.68289566E12, 6587.0], [1.68289596E12, 33307.0], [1.68289578E12, 100138.0], [1.68289608E12, 100101.0], [1.6828959E12, 177900.0], [1.68289572E12, 43959.0], [1.68289602E12, 74346.0], [1.68289584E12, 159110.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.68289566E12, 5249.6], [1.68289596E12, 14137.0], [1.68289578E12, 32517.0], [1.68289608E12, 100085.0], [1.6828959E12, 15427.800000000001], [1.68289572E12, 32264.8], [1.68289602E12, 69235.2], [1.68289584E12, 17877.600000000002]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.68289566E12, 6586.0], [1.68289596E12, 32866.48], [1.68289578E12, 82447.43999999999], [1.68289608E12, 100100.0], [1.6828959E12, 164776.7499999996], [1.68289572E12, 39927.95999999999], [1.68289602E12, 74345.58], [1.68289584E12, 143752.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.68289566E12, 5537.7], [1.68289596E12, 17058.0], [1.68289578E12, 63320.799999999814], [1.68289608E12, 100087.0], [1.6828959E12, 19075.0], [1.68289572E12, 37264.4], [1.68289602E12, 71992.09999999999], [1.68289584E12, 58862.8]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.68289566E12, 1270.0], [1.68289596E12, 20.0], [1.68289578E12, 13.0], [1.68289608E12, 73204.0], [1.6828959E12, 9.0], [1.68289572E12, 51.0], [1.68289602E12, 16195.0], [1.68289584E12, 9.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.68289566E12, 2470.0], [1.68289596E12, 9620.0], [1.68289578E12, 12732.0], [1.68289608E12, 100067.0], [1.6828959E12, 8261.0], [1.68289572E12, 12589.0], [1.68289602E12, 45362.0], [1.68289584E12, 83.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68289608E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 51.0, "minX": 1.0, "maxY": 109630.0, "series": [{"data": [[2.0, 48389.5], [3.0, 76467.0], [4.0, 19934.0], [5.0, 10308.0], [6.0, 885.0], [7.0, 13915.0], [8.0, 1131.5], [9.0, 11181.0], [11.0, 77.0], [13.0, 5512.5], [15.0, 12378.0], [16.0, 13528.0], [17.0, 15010.0], [18.0, 15436.5], [19.0, 48243.5], [20.0, 58561.0], [23.0, 16136.0], [26.0, 3046.0], [30.0, 59.0], [32.0, 24882.0], [33.0, 9842.0], [36.0, 1120.5], [37.0, 3755.0], [39.0, 32271.0], [43.0, 5507.5], [44.0, 5172.0], [46.0, 5682.0], [48.0, 1272.5], [49.0, 19925.0], [52.0, 903.0], [54.0, 59693.5], [55.0, 6578.0], [57.0, 124.0], [58.0, 53.0], [60.0, 4612.0], [67.0, 67.0], [70.0, 17452.5], [71.0, 75.0], [74.0, 65.0], [72.0, 1163.0], [76.0, 62.0], [82.0, 272.0], [80.0, 76.5], [87.0, 4535.0], [84.0, 70.0], [86.0, 58.0], [85.0, 59.0], [88.0, 73.0], [89.0, 64.0], [90.0, 69.0], [95.0, 72.0], [92.0, 51.5], [96.0, 1632.5], [102.0, 108.0], [107.0, 64.0], [110.0, 5821.0], [108.0, 67.0], [114.0, 7455.5], [112.0, 65.0], [124.0, 2794.5], [130.0, 17398.0], [138.0, 927.5], [159.0, 12784.0], [158.0, 111.0], [154.0, 8311.5], [155.0, 1678.0], [162.0, 55.0], [167.0, 70.0], [161.0, 61.0], [165.0, 51.0], [160.0, 52.0], [174.0, 3979.0], [170.0, 77.0], [173.0, 68.0], [168.0, 80.5], [179.0, 9876.0], [178.0, 10202.0], [185.0, 10777.0], [194.0, 77.0], [203.0, 100046.0], [212.0, 1895.5], [210.0, 138.0], [223.0, 90.0], [233.0, 13415.0], [239.0, 10197.0], [247.0, 37151.0], [240.0, 55.5], [244.0, 69.0], [242.0, 13737.0], [249.0, 20799.0], [252.0, 74.0], [248.0, 79.0], [255.0, 9208.0], [270.0, 7366.5], [264.0, 56.0], [258.0, 66.0], [262.0, 13278.5], [261.0, 9794.0], [280.0, 12573.5], [284.0, 6106.0], [299.0, 7185.0], [294.0, 8065.0], [298.0, 9625.5], [314.0, 10832.0], [316.0, 62.0], [320.0, 17248.5], [333.0, 12172.0], [328.0, 9975.0], [336.0, 129.0], [338.0, 7952.0], [343.0, 10945.0], [354.0, 13149.5], [369.0, 13445.0], [413.0, 10232.0], [407.0, 9452.0], [405.0, 11979.0], [420.0, 330.0], [436.0, 11347.0], [468.0, 14024.5], [492.0, 19025.0], [520.0, 12140.0], [553.0, 12715.0], [598.0, 15698.5], [721.0, 14018.0], [1.0, 1563.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[112.0, 109630.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 721.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 100046.0, "series": [{"data": [[2.0, 48389.5], [3.0, 76467.0], [4.0, 19934.0], [5.0, 10308.0], [6.0, 885.0], [7.0, 13915.0], [8.0, 1131.5], [9.0, 11181.0], [11.0, 77.0], [13.0, 5512.5], [15.0, 12378.0], [16.0, 13528.0], [17.0, 15010.0], [18.0, 15436.5], [19.0, 48243.5], [20.0, 58561.0], [23.0, 16136.0], [26.0, 3046.0], [30.0, 59.0], [32.0, 24882.0], [33.0, 9842.0], [36.0, 1120.5], [37.0, 3755.0], [39.0, 32271.0], [43.0, 5507.5], [44.0, 5172.0], [46.0, 5682.0], [48.0, 1270.5], [49.0, 19925.0], [52.0, 902.5], [54.0, 59693.5], [55.0, 6578.0], [57.0, 123.0], [58.0, 53.0], [60.0, 4612.0], [67.0, 67.0], [70.0, 17452.5], [71.0, 75.0], [74.0, 65.0], [72.0, 1163.0], [76.0, 62.0], [82.0, 272.0], [80.0, 76.5], [87.0, 4535.0], [84.0, 70.0], [86.0, 58.0], [85.0, 59.0], [88.0, 73.0], [89.0, 64.0], [90.0, 69.0], [95.0, 72.0], [92.0, 51.5], [96.0, 1632.5], [102.0, 108.0], [107.0, 64.0], [110.0, 5821.0], [108.0, 67.0], [114.0, 7455.5], [112.0, 65.0], [124.0, 2794.5], [130.0, 17398.0], [138.0, 927.5], [159.0, 12784.0], [158.0, 111.0], [154.0, 8311.5], [155.0, 1678.0], [162.0, 55.0], [167.0, 70.0], [161.0, 61.0], [165.0, 51.0], [160.0, 52.0], [174.0, 3979.0], [170.0, 77.0], [173.0, 68.0], [168.0, 80.5], [179.0, 9876.0], [178.0, 10202.0], [185.0, 10777.0], [194.0, 77.0], [203.0, 100046.0], [212.0, 1895.5], [210.0, 138.0], [223.0, 90.0], [233.0, 13415.0], [239.0, 10197.0], [247.0, 37151.0], [240.0, 55.5], [244.0, 68.5], [242.0, 13737.0], [249.0, 20799.0], [252.0, 74.0], [248.0, 79.0], [255.0, 9208.0], [270.0, 7366.5], [264.0, 56.0], [258.0, 66.0], [262.0, 13278.5], [261.0, 9794.0], [280.0, 12573.5], [284.0, 6106.0], [299.0, 7185.0], [294.0, 8065.0], [298.0, 9625.5], [314.0, 10832.0], [316.0, 62.0], [320.0, 17248.5], [333.0, 12172.0], [328.0, 9975.0], [336.0, 128.5], [338.0, 7952.0], [343.0, 10945.0], [354.0, 13149.5], [369.0, 13445.0], [413.0, 10232.0], [407.0, 9452.0], [405.0, 11979.0], [420.0, 330.0], [436.0, 11347.0], [468.0, 14024.5], [492.0, 19025.0], [520.0, 12140.0], [553.0, 12715.0], [598.0, 15698.5], [721.0, 14018.0], [1.0, 1563.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[112.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 721.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 9.8, "minX": 1.68289566E12, "maxY": 102.2, "series": [{"data": [[1.68289566E12, 9.8], [1.68289596E12, 77.0], [1.68289578E12, 81.2], [1.6828959E12, 82.6], [1.68289572E12, 68.6], [1.68289584E12, 102.2]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68289596E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.6166666666666667, "minX": 1.68289566E12, "maxY": 101.35, "series": [{"data": [[1.68289566E12, 4.666666666666667], [1.68289596E12, 74.28333333333333], [1.68289578E12, 100.91666666666667], [1.68289608E12, 5.716666666666667], [1.6828959E12, 88.0], [1.68289572E12, 43.85], [1.68289602E12, 2.0], [1.68289584E12, 101.35]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.68289584E12, 0.6166666666666667]], "isOverall": false, "label": "Non HTTP response code: java.net.SocketException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68289608E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.6166666666666667, "minX": 1.68289566E12, "maxY": 101.35, "series": [{"data": [[1.68289566E12, 4.666666666666667], [1.68289596E12, 74.28333333333333], [1.68289578E12, 100.91666666666667], [1.68289608E12, 5.716666666666667], [1.6828959E12, 88.0], [1.68289572E12, 43.85], [1.68289602E12, 2.0], [1.68289584E12, 101.35]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.68289584E12, 0.6166666666666667]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68289608E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.6166666666666667, "minX": 1.68289566E12, "maxY": 101.35, "series": [{"data": [[1.68289566E12, 4.666666666666667], [1.68289596E12, 74.28333333333333], [1.68289578E12, 100.91666666666667], [1.68289608E12, 5.716666666666667], [1.6828959E12, 88.0], [1.68289572E12, 43.85], [1.68289602E12, 2.0], [1.68289584E12, 101.35]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.68289584E12, 0.6166666666666667]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68289608E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

