/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 10.0, "minX": 0.0, "maxY": 164825.0, "series": [{"data": [[0.0, 10.0], [0.1, 20.0], [0.2, 22.0], [0.3, 23.0], [0.4, 25.0], [0.5, 27.0], [0.6, 31.0], [0.7, 33.0], [0.8, 34.0], [0.9, 36.0], [1.0, 37.0], [1.1, 39.0], [1.2, 40.0], [1.3, 41.0], [1.4, 42.0], [1.5, 44.0], [1.6, 45.0], [1.7, 46.0], [1.8, 47.0], [1.9, 48.0], [2.0, 49.0], [2.1, 50.0], [2.2, 51.0], [2.3, 51.0], [2.4, 52.0], [2.5, 53.0], [2.6, 53.0], [2.7, 53.0], [2.8, 54.0], [2.9, 54.0], [3.0, 55.0], [3.1, 56.0], [3.2, 56.0], [3.3, 57.0], [3.4, 58.0], [3.5, 58.0], [3.6, 59.0], [3.7, 59.0], [3.8, 60.0], [3.9, 60.0], [4.0, 61.0], [4.1, 62.0], [4.2, 62.0], [4.3, 63.0], [4.4, 63.0], [4.5, 64.0], [4.6, 64.0], [4.7, 65.0], [4.8, 65.0], [4.9, 65.0], [5.0, 66.0], [5.1, 66.0], [5.2, 67.0], [5.3, 67.0], [5.4, 67.0], [5.5, 68.0], [5.6, 68.0], [5.7, 69.0], [5.8, 69.0], [5.9, 69.0], [6.0, 70.0], [6.1, 70.0], [6.2, 70.0], [6.3, 70.0], [6.4, 70.0], [6.5, 71.0], [6.6, 71.0], [6.7, 71.0], [6.8, 71.0], [6.9, 71.0], [7.0, 72.0], [7.1, 72.0], [7.2, 72.0], [7.3, 73.0], [7.4, 73.0], [7.5, 73.0], [7.6, 73.0], [7.7, 74.0], [7.8, 74.0], [7.9, 74.0], [8.0, 74.0], [8.1, 75.0], [8.2, 75.0], [8.3, 75.0], [8.4, 75.0], [8.5, 76.0], [8.6, 76.0], [8.7, 76.0], [8.8, 77.0], [8.9, 77.0], [9.0, 77.0], [9.1, 77.0], [9.2, 78.0], [9.3, 78.0], [9.4, 78.0], [9.5, 78.0], [9.6, 79.0], [9.7, 79.0], [9.8, 79.0], [9.9, 79.0], [10.0, 80.0], [10.1, 80.0], [10.2, 80.0], [10.3, 80.0], [10.4, 80.0], [10.5, 80.0], [10.6, 81.0], [10.7, 81.0], [10.8, 81.0], [10.9, 81.0], [11.0, 81.0], [11.1, 81.0], [11.2, 82.0], [11.3, 82.0], [11.4, 82.0], [11.5, 82.0], [11.6, 82.0], [11.7, 82.0], [11.8, 83.0], [11.9, 83.0], [12.0, 83.0], [12.1, 83.0], [12.2, 83.0], [12.3, 83.0], [12.4, 83.0], [12.5, 84.0], [12.6, 84.0], [12.7, 84.0], [12.8, 84.0], [12.9, 84.0], [13.0, 85.0], [13.1, 85.0], [13.2, 85.0], [13.3, 85.0], [13.4, 85.0], [13.5, 86.0], [13.6, 86.0], [13.7, 86.0], [13.8, 86.0], [13.9, 86.0], [14.0, 86.0], [14.1, 86.0], [14.2, 87.0], [14.3, 87.0], [14.4, 87.0], [14.5, 87.0], [14.6, 87.0], [14.7, 87.0], [14.8, 87.0], [14.9, 88.0], [15.0, 88.0], [15.1, 88.0], [15.2, 88.0], [15.3, 88.0], [15.4, 88.0], [15.5, 88.0], [15.6, 88.0], [15.7, 89.0], [15.8, 89.0], [15.9, 89.0], [16.0, 89.0], [16.1, 89.0], [16.2, 89.0], [16.3, 90.0], [16.4, 90.0], [16.5, 90.0], [16.6, 90.0], [16.7, 90.0], [16.8, 90.0], [16.9, 90.0], [17.0, 91.0], [17.1, 91.0], [17.2, 91.0], [17.3, 91.0], [17.4, 91.0], [17.5, 91.0], [17.6, 91.0], [17.7, 91.0], [17.8, 91.0], [17.9, 92.0], [18.0, 92.0], [18.1, 92.0], [18.2, 92.0], [18.3, 92.0], [18.4, 92.0], [18.5, 92.0], [18.6, 92.0], [18.7, 92.0], [18.8, 92.0], [18.9, 92.0], [19.0, 93.0], [19.1, 93.0], [19.2, 93.0], [19.3, 93.0], [19.4, 93.0], [19.5, 93.0], [19.6, 93.0], [19.7, 93.0], [19.8, 93.0], [19.9, 93.0], [20.0, 94.0], [20.1, 94.0], [20.2, 94.0], [20.3, 94.0], [20.4, 94.0], [20.5, 94.0], [20.6, 94.0], [20.7, 94.0], [20.8, 95.0], [20.9, 95.0], [21.0, 95.0], [21.1, 95.0], [21.2, 95.0], [21.3, 95.0], [21.4, 95.0], [21.5, 95.0], [21.6, 96.0], [21.7, 96.0], [21.8, 96.0], [21.9, 96.0], [22.0, 96.0], [22.1, 96.0], [22.2, 96.0], [22.3, 96.0], [22.4, 96.0], [22.5, 97.0], [22.6, 97.0], [22.7, 97.0], [22.8, 97.0], [22.9, 97.0], [23.0, 97.0], [23.1, 97.0], [23.2, 97.0], [23.3, 97.0], [23.4, 97.0], [23.5, 97.0], [23.6, 97.0], [23.7, 98.0], [23.8, 98.0], [23.9, 98.0], [24.0, 98.0], [24.1, 98.0], [24.2, 98.0], [24.3, 98.0], [24.4, 98.0], [24.5, 98.0], [24.6, 98.0], [24.7, 99.0], [24.8, 99.0], [24.9, 99.0], [25.0, 99.0], [25.1, 99.0], [25.2, 99.0], [25.3, 99.0], [25.4, 99.0], [25.5, 99.0], [25.6, 100.0], [25.7, 100.0], [25.8, 100.0], [25.9, 100.0], [26.0, 100.0], [26.1, 100.0], [26.2, 100.0], [26.3, 100.0], [26.4, 100.0], [26.5, 101.0], [26.6, 101.0], [26.7, 101.0], [26.8, 101.0], [26.9, 101.0], [27.0, 101.0], [27.1, 101.0], [27.2, 101.0], [27.3, 101.0], [27.4, 102.0], [27.5, 102.0], [27.6, 102.0], [27.7, 102.0], [27.8, 102.0], [27.9, 102.0], [28.0, 102.0], [28.1, 102.0], [28.2, 103.0], [28.3, 103.0], [28.4, 103.0], [28.5, 103.0], [28.6, 103.0], [28.7, 103.0], [28.8, 103.0], [28.9, 103.0], [29.0, 103.0], [29.1, 103.0], [29.2, 103.0], [29.3, 104.0], [29.4, 104.0], [29.5, 104.0], [29.6, 104.0], [29.7, 104.0], [29.8, 104.0], [29.9, 104.0], [30.0, 104.0], [30.1, 104.0], [30.2, 104.0], [30.3, 105.0], [30.4, 105.0], [30.5, 105.0], [30.6, 105.0], [30.7, 105.0], [30.8, 105.0], [30.9, 105.0], [31.0, 105.0], [31.1, 105.0], [31.2, 105.0], [31.3, 105.0], [31.4, 105.0], [31.5, 105.0], [31.6, 105.0], [31.7, 105.0], [31.8, 106.0], [31.9, 106.0], [32.0, 106.0], [32.1, 106.0], [32.2, 106.0], [32.3, 106.0], [32.4, 106.0], [32.5, 106.0], [32.6, 106.0], [32.7, 106.0], [32.8, 106.0], [32.9, 106.0], [33.0, 106.0], [33.1, 106.0], [33.2, 106.0], [33.3, 106.0], [33.4, 106.0], [33.5, 106.0], [33.6, 107.0], [33.7, 107.0], [33.8, 107.0], [33.9, 107.0], [34.0, 107.0], [34.1, 107.0], [34.2, 107.0], [34.3, 107.0], [34.4, 107.0], [34.5, 107.0], [34.6, 107.0], [34.7, 107.0], [34.8, 107.0], [34.9, 107.0], [35.0, 107.0], [35.1, 108.0], [35.2, 108.0], [35.3, 108.0], [35.4, 108.0], [35.5, 108.0], [35.6, 108.0], [35.7, 108.0], [35.8, 108.0], [35.9, 108.0], [36.0, 108.0], [36.1, 108.0], [36.2, 108.0], [36.3, 109.0], [36.4, 109.0], [36.5, 109.0], [36.6, 109.0], [36.7, 109.0], [36.8, 109.0], [36.9, 109.0], [37.0, 109.0], [37.1, 110.0], [37.2, 110.0], [37.3, 110.0], [37.4, 110.0], [37.5, 110.0], [37.6, 110.0], [37.7, 110.0], [37.8, 110.0], [37.9, 110.0], [38.0, 110.0], [38.1, 111.0], [38.2, 111.0], [38.3, 111.0], [38.4, 111.0], [38.5, 111.0], [38.6, 111.0], [38.7, 111.0], [38.8, 111.0], [38.9, 111.0], [39.0, 111.0], [39.1, 112.0], [39.2, 112.0], [39.3, 112.0], [39.4, 112.0], [39.5, 112.0], [39.6, 112.0], [39.7, 112.0], [39.8, 112.0], [39.9, 112.0], [40.0, 112.0], [40.1, 112.0], [40.2, 112.0], [40.3, 112.0], [40.4, 113.0], [40.5, 113.0], [40.6, 113.0], [40.7, 113.0], [40.8, 113.0], [40.9, 113.0], [41.0, 113.0], [41.1, 113.0], [41.2, 113.0], [41.3, 113.0], [41.4, 113.0], [41.5, 113.0], [41.6, 113.0], [41.7, 114.0], [41.8, 114.0], [41.9, 114.0], [42.0, 114.0], [42.1, 114.0], [42.2, 114.0], [42.3, 114.0], [42.4, 114.0], [42.5, 114.0], [42.6, 114.0], [42.7, 114.0], [42.8, 115.0], [42.9, 115.0], [43.0, 115.0], [43.1, 115.0], [43.2, 115.0], [43.3, 115.0], [43.4, 115.0], [43.5, 115.0], [43.6, 115.0], [43.7, 115.0], [43.8, 115.0], [43.9, 115.0], [44.0, 116.0], [44.1, 116.0], [44.2, 116.0], [44.3, 116.0], [44.4, 116.0], [44.5, 116.0], [44.6, 116.0], [44.7, 116.0], [44.8, 116.0], [44.9, 116.0], [45.0, 117.0], [45.1, 117.0], [45.2, 117.0], [45.3, 117.0], [45.4, 117.0], [45.5, 117.0], [45.6, 117.0], [45.7, 117.0], [45.8, 117.0], [45.9, 117.0], [46.0, 118.0], [46.1, 118.0], [46.2, 118.0], [46.3, 118.0], [46.4, 118.0], [46.5, 118.0], [46.6, 118.0], [46.7, 118.0], [46.8, 118.0], [46.9, 119.0], [47.0, 119.0], [47.1, 119.0], [47.2, 119.0], [47.3, 119.0], [47.4, 119.0], [47.5, 120.0], [47.6, 120.0], [47.7, 120.0], [47.8, 120.0], [47.9, 120.0], [48.0, 120.0], [48.1, 121.0], [48.2, 121.0], [48.3, 121.0], [48.4, 121.0], [48.5, 121.0], [48.6, 121.0], [48.7, 122.0], [48.8, 122.0], [48.9, 122.0], [49.0, 122.0], [49.1, 123.0], [49.2, 123.0], [49.3, 123.0], [49.4, 124.0], [49.5, 124.0], [49.6, 124.0], [49.7, 124.0], [49.8, 125.0], [49.9, 125.0], [50.0, 125.0], [50.1, 126.0], [50.2, 126.0], [50.3, 127.0], [50.4, 127.0], [50.5, 128.0], [50.6, 128.0], [50.7, 129.0], [50.8, 129.0], [50.9, 130.0], [51.0, 130.0], [51.1, 130.0], [51.2, 131.0], [51.3, 132.0], [51.4, 132.0], [51.5, 133.0], [51.6, 133.0], [51.7, 133.0], [51.8, 134.0], [51.9, 135.0], [52.0, 136.0], [52.1, 137.0], [52.2, 137.0], [52.3, 138.0], [52.4, 139.0], [52.5, 139.0], [52.6, 140.0], [52.7, 141.0], [52.8, 141.0], [52.9, 142.0], [53.0, 143.0], [53.1, 144.0], [53.2, 146.0], [53.3, 146.0], [53.4, 147.0], [53.5, 147.0], [53.6, 148.0], [53.7, 149.0], [53.8, 150.0], [53.9, 151.0], [54.0, 152.0], [54.1, 155.0], [54.2, 156.0], [54.3, 156.0], [54.4, 157.0], [54.5, 159.0], [54.6, 163.0], [54.7, 163.0], [54.8, 164.0], [54.9, 165.0], [55.0, 166.0], [55.1, 167.0], [55.2, 167.0], [55.3, 168.0], [55.4, 168.0], [55.5, 169.0], [55.6, 169.0], [55.7, 170.0], [55.8, 171.0], [55.9, 173.0], [56.0, 174.0], [56.1, 175.0], [56.2, 178.0], [56.3, 178.0], [56.4, 179.0], [56.5, 179.0], [56.6, 180.0], [56.7, 181.0], [56.8, 182.0], [56.9, 183.0], [57.0, 185.0], [57.1, 186.0], [57.2, 188.0], [57.3, 189.0], [57.4, 189.0], [57.5, 190.0], [57.6, 191.0], [57.7, 194.0], [57.8, 194.0], [57.9, 195.0], [58.0, 195.0], [58.1, 195.0], [58.2, 196.0], [58.3, 198.0], [58.4, 200.0], [58.5, 206.0], [58.6, 250.0], [58.7, 265.0], [58.8, 266.0], [58.9, 267.0], [59.0, 267.0], [59.1, 269.0], [59.2, 270.0], [59.3, 272.0], [59.4, 274.0], [59.5, 282.0], [59.6, 294.0], [59.7, 316.0], [59.8, 356.0], [59.9, 377.0], [60.0, 397.0], [60.1, 409.0], [60.2, 416.0], [60.3, 459.0], [60.4, 482.0], [60.5, 545.0], [60.6, 552.0], [60.7, 555.0], [60.8, 621.0], [60.9, 725.0], [61.0, 809.0], [61.1, 836.0], [61.2, 899.0], [61.3, 1012.0], [61.4, 1132.0], [61.5, 1167.0], [61.6, 1236.0], [61.7, 1257.0], [61.8, 1271.0], [61.9, 1314.0], [62.0, 1342.0], [62.1, 1386.0], [62.2, 1434.0], [62.3, 1464.0], [62.4, 1509.0], [62.5, 1564.0], [62.6, 1609.0], [62.7, 1641.0], [62.8, 1659.0], [62.9, 1681.0], [63.0, 1707.0], [63.1, 1722.0], [63.2, 1737.0], [63.3, 1778.0], [63.4, 1820.0], [63.5, 1879.0], [63.6, 1909.0], [63.7, 1941.0], [63.8, 1976.0], [63.9, 2034.0], [64.0, 2129.0], [64.1, 2200.0], [64.2, 2242.0], [64.3, 2289.0], [64.4, 2390.0], [64.5, 2420.0], [64.6, 2431.0], [64.7, 2476.0], [64.8, 2557.0], [64.9, 2622.0], [65.0, 2693.0], [65.1, 2719.0], [65.2, 2757.0], [65.3, 2794.0], [65.4, 2849.0], [65.5, 2940.0], [65.6, 2977.0], [65.7, 2988.0], [65.8, 3162.0], [65.9, 3306.0], [66.0, 3348.0], [66.1, 3414.0], [66.2, 3426.0], [66.3, 3489.0], [66.4, 3519.0], [66.5, 3550.0], [66.6, 3589.0], [66.7, 3653.0], [66.8, 3741.0], [66.9, 3789.0], [67.0, 3832.0], [67.1, 3866.0], [67.2, 3894.0], [67.3, 4027.0], [67.4, 4131.0], [67.5, 4156.0], [67.6, 4179.0], [67.7, 4230.0], [67.8, 4285.0], [67.9, 4299.0], [68.0, 4314.0], [68.1, 4424.0], [68.2, 4470.0], [68.3, 4561.0], [68.4, 4589.0], [68.5, 4650.0], [68.6, 4772.0], [68.7, 4813.0], [68.8, 4941.0], [68.9, 5037.0], [69.0, 5069.0], [69.1, 5146.0], [69.2, 5228.0], [69.3, 5321.0], [69.4, 5442.0], [69.5, 5506.0], [69.6, 5580.0], [69.7, 5601.0], [69.8, 5638.0], [69.9, 5844.0], [70.0, 5885.0], [70.1, 6071.0], [70.2, 6221.0], [70.3, 6270.0], [70.4, 6346.0], [70.5, 6382.0], [70.6, 6478.0], [70.7, 6803.0], [70.8, 6837.0], [70.9, 6909.0], [71.0, 6993.0], [71.1, 7058.0], [71.2, 7103.0], [71.3, 7202.0], [71.4, 7206.0], [71.5, 7237.0], [71.6, 7241.0], [71.7, 7285.0], [71.8, 7314.0], [71.9, 7333.0], [72.0, 7387.0], [72.1, 7435.0], [72.2, 7486.0], [72.3, 7515.0], [72.4, 7564.0], [72.5, 7616.0], [72.6, 7853.0], [72.7, 7968.0], [72.8, 8114.0], [72.9, 8221.0], [73.0, 8365.0], [73.1, 8367.0], [73.2, 8404.0], [73.3, 8465.0], [73.4, 8484.0], [73.5, 8599.0], [73.6, 8737.0], [73.7, 8804.0], [73.8, 8938.0], [73.9, 9030.0], [74.0, 9079.0], [74.1, 9123.0], [74.2, 9187.0], [74.3, 9207.0], [74.4, 9225.0], [74.5, 9247.0], [74.6, 9286.0], [74.7, 9426.0], [74.8, 9503.0], [74.9, 9578.0], [75.0, 9628.0], [75.1, 9697.0], [75.2, 9717.0], [75.3, 9742.0], [75.4, 9799.0], [75.5, 9825.0], [75.6, 9848.0], [75.7, 9914.0], [75.8, 10000.0], [75.9, 10081.0], [76.0, 10129.0], [76.1, 10173.0], [76.2, 10238.0], [76.3, 10239.0], [76.4, 10240.0], [76.5, 10261.0], [76.6, 10298.0], [76.7, 10458.0], [76.8, 10615.0], [76.9, 10802.0], [77.0, 10971.0], [77.1, 11182.0], [77.2, 11334.0], [77.3, 11457.0], [77.4, 11476.0], [77.5, 11641.0], [77.6, 11820.0], [77.7, 11874.0], [77.8, 11975.0], [77.9, 12038.0], [78.0, 12103.0], [78.1, 12245.0], [78.2, 12345.0], [78.3, 12382.0], [78.4, 12411.0], [78.5, 12561.0], [78.6, 13379.0], [78.7, 13402.0], [78.8, 13498.0], [78.9, 13568.0], [79.0, 13598.0], [79.1, 13621.0], [79.2, 13664.0], [79.3, 13736.0], [79.4, 13747.0], [79.5, 13814.0], [79.6, 13897.0], [79.7, 13920.0], [79.8, 13971.0], [79.9, 14133.0], [80.0, 14214.0], [80.1, 14264.0], [80.2, 14316.0], [80.3, 14343.0], [80.4, 14363.0], [80.5, 14459.0], [80.6, 14515.0], [80.7, 14609.0], [80.8, 15207.0], [80.9, 15325.0], [81.0, 15556.0], [81.1, 15821.0], [81.2, 15982.0], [81.3, 16108.0], [81.4, 16256.0], [81.5, 16261.0], [81.6, 16310.0], [81.7, 16312.0], [81.8, 16313.0], [81.9, 16323.0], [82.0, 16441.0], [82.1, 16631.0], [82.2, 16745.0], [82.3, 16748.0], [82.4, 16753.0], [82.5, 16799.0], [82.6, 16855.0], [82.7, 16856.0], [82.8, 16856.0], [82.9, 16906.0], [83.0, 16988.0], [83.1, 16990.0], [83.2, 17198.0], [83.3, 17298.0], [83.4, 17305.0], [83.5, 17352.0], [83.6, 17401.0], [83.7, 17434.0], [83.8, 17477.0], [83.9, 17595.0], [84.0, 17599.0], [84.1, 17631.0], [84.2, 17683.0], [84.3, 17715.0], [84.4, 17720.0], [84.5, 17813.0], [84.6, 17900.0], [84.7, 17924.0], [84.8, 18031.0], [84.9, 18041.0], [85.0, 18055.0], [85.1, 18150.0], [85.2, 18169.0], [85.3, 18171.0], [85.4, 18206.0], [85.5, 18209.0], [85.6, 18237.0], [85.7, 18303.0], [85.8, 18321.0], [85.9, 18331.0], [86.0, 18332.0], [86.1, 18334.0], [86.2, 18396.0], [86.3, 18491.0], [86.4, 18510.0], [86.5, 18550.0], [86.6, 18678.0], [86.7, 18932.0], [86.8, 18940.0], [86.9, 18941.0], [87.0, 18947.0], [87.1, 19034.0], [87.2, 19124.0], [87.3, 19176.0], [87.4, 19196.0], [87.5, 19238.0], [87.6, 19259.0], [87.7, 19367.0], [87.8, 19439.0], [87.9, 19788.0], [88.0, 19827.0], [88.1, 19834.0], [88.2, 20224.0], [88.3, 20259.0], [88.4, 20272.0], [88.5, 20337.0], [88.6, 20424.0], [88.7, 20497.0], [88.8, 20650.0], [88.9, 20661.0], [89.0, 20694.0], [89.1, 20782.0], [89.2, 20785.0], [89.3, 20820.0], [89.4, 20874.0], [89.5, 20899.0], [89.6, 20909.0], [89.7, 21204.0], [89.8, 21248.0], [89.9, 21292.0], [90.0, 21341.0], [90.1, 21427.0], [90.2, 21465.0], [90.3, 21553.0], [90.4, 21615.0], [90.5, 21635.0], [90.6, 21760.0], [90.7, 22170.0], [90.8, 22259.0], [90.9, 22278.0], [91.0, 22315.0], [91.1, 22434.0], [91.2, 23069.0], [91.3, 23584.0], [91.4, 23663.0], [91.5, 23716.0], [91.6, 23759.0], [91.7, 24643.0], [91.8, 24651.0], [91.9, 24891.0], [92.0, 25372.0], [92.1, 25658.0], [92.2, 26234.0], [92.3, 26444.0], [92.4, 26555.0], [92.5, 27417.0], [92.6, 27804.0], [92.7, 28219.0], [92.8, 28382.0], [92.9, 30250.0], [93.0, 30970.0], [93.1, 32582.0], [93.2, 32598.0], [93.3, 33069.0], [93.4, 33259.0], [93.5, 33415.0], [93.6, 33515.0], [93.7, 34320.0], [93.8, 34584.0], [93.9, 34814.0], [94.0, 35395.0], [94.1, 36773.0], [94.2, 37376.0], [94.3, 39425.0], [94.4, 40428.0], [94.5, 41528.0], [94.6, 45474.0], [94.7, 48233.0], [94.8, 48715.0], [94.9, 50818.0], [95.0, 52011.0], [95.1, 55533.0], [95.2, 57161.0], [95.3, 60246.0], [95.4, 60766.0], [95.5, 64213.0], [95.6, 64711.0], [95.7, 66065.0], [95.8, 67714.0], [95.9, 68722.0], [96.0, 69158.0], [96.1, 71831.0], [96.2, 73781.0], [96.3, 76881.0], [96.4, 77562.0], [96.5, 79865.0], [96.6, 82217.0], [96.7, 83871.0], [96.8, 88938.0], [96.9, 94869.0], [97.0, 95895.0], [97.1, 100015.0], [97.2, 100033.0], [97.3, 100068.0], [97.4, 100079.0], [97.5, 100086.0], [97.6, 100089.0], [97.7, 100095.0], [97.8, 100099.0], [97.9, 100112.0], [98.0, 100121.0], [98.1, 100129.0], [98.2, 100137.0], [98.3, 100150.0], [98.4, 100223.0], [98.5, 100242.0], [98.6, 103131.0], [98.7, 103140.0], [98.8, 104874.0], [98.9, 127616.0], [99.0, 128171.0], [99.1, 128382.0], [99.2, 128766.0], [99.3, 128951.0], [99.4, 129109.0], [99.5, 129415.0], [99.6, 131619.0], [99.7, 133229.0], [99.8, 133335.0], [99.9, 138871.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 14774.0, "series": [{"data": [[0.0, 11526.0], [66700.0, 5.0], [68300.0, 1.0], [73100.0, 3.0], [69900.0, 2.0], [74700.0, 1.0], [79500.0, 2.0], [82700.0, 1.0], [93900.0, 2.0], [97100.0, 2.0], [100300.0, 12.0], [101900.0, 1.0], [109900.0, 2.0], [127500.0, 3.0], [129100.0, 17.0], [140200.0, 1.0], [100.0, 14774.0], [34500.0, 37.0], [131500.0, 1.0], [32900.0, 2.0], [35300.0, 9.0], [36900.0, 3.0], [37700.0, 1.0], [40900.0, 1.0], [42500.0, 4.0], [41700.0, 2.0], [44900.0, 2.0], [46500.0, 2.0], [50500.0, 3.0], [200.0, 577.0], [51300.0, 2.0], [52100.0, 5.0], [52900.0, 1.0], [53700.0, 1.0], [54500.0, 2.0], [56100.0, 2.0], [59300.0, 8.0], [58500.0, 2.0], [60100.0, 3.0], [60900.0, 1.0], [61700.0, 3.0], [64900.0, 1.0], [64100.0, 3.0], [69000.0, 31.0], [65800.0, 2.0], [67400.0, 1.0], [70600.0, 3.0], [300.0, 165.0], [73800.0, 3.0], [81800.0, 4.0], [83400.0, 33.0], [86600.0, 1.0], [93000.0, 21.0], [97800.0, 5.0], [400.0, 196.0], [104200.0, 1.0], [500.0, 127.0], [129800.0, 12.0], [132400.0, 1.0], [138800.0, 6.0], [600.0, 46.0], [148400.0, 32.0], [700.0, 60.0], [800.0, 101.0], [900.0, 24.0], [1000.0, 48.0], [1100.0, 91.0], [1200.0, 142.0], [1300.0, 127.0], [1400.0, 105.0], [1500.0, 82.0], [1600.0, 150.0], [1700.0, 209.0], [1800.0, 90.0], [1900.0, 110.0], [2000.0, 71.0], [2100.0, 56.0], [133300.0, 5.0], [2200.0, 95.0], [2300.0, 55.0], [2400.0, 137.0], [2500.0, 67.0], [2600.0, 57.0], [2700.0, 153.0], [2800.0, 49.0], [2900.0, 116.0], [3000.0, 28.0], [3100.0, 16.0], [3200.0, 38.0], [3300.0, 71.0], [3400.0, 125.0], [3500.0, 125.0], [3700.0, 97.0], [3600.0, 54.0], [3800.0, 129.0], [3900.0, 12.0], [4000.0, 50.0], [4100.0, 114.0], [4200.0, 127.0], [68100.0, 6.0], [4300.0, 85.0], [66500.0, 4.0], [4400.0, 76.0], [4500.0, 75.0], [4600.0, 51.0], [71300.0, 2.0], [69700.0, 4.0], [4700.0, 66.0], [4800.0, 39.0], [5000.0, 92.0], [5100.0, 48.0], [4900.0, 41.0], [5300.0, 30.0], [5200.0, 51.0], [85700.0, 1.0], [5500.0, 97.0], [5400.0, 56.0], [88900.0, 2.0], [5600.0, 49.0], [5700.0, 31.0], [5800.0, 63.0], [6000.0, 9.0], [6100.0, 34.0], [5900.0, 33.0], [96900.0, 2.0], [6200.0, 69.0], [6300.0, 87.0], [100100.0, 248.0], [6500.0, 8.0], [6600.0, 8.0], [104900.0, 1.0], [6400.0, 39.0], [6900.0, 50.0], [6800.0, 88.0], [6700.0, 21.0], [7000.0, 85.0], [7100.0, 26.0], [7300.0, 122.0], [7400.0, 106.0], [7200.0, 225.0], [7500.0, 95.0], [7600.0, 45.0], [7900.0, 49.0], [7700.0, 8.0], [7800.0, 17.0], [8000.0, 26.0], [8100.0, 38.0], [128900.0, 49.0], [130500.0, 6.0], [8400.0, 102.0], [8200.0, 36.0], [8600.0, 29.0], [9200.0, 157.0], [9000.0, 84.0], [8800.0, 19.0], [9400.0, 49.0], [9600.0, 76.0], [10000.0, 73.0], [10200.0, 190.0], [9800.0, 130.0], [10600.0, 23.0], [10400.0, 30.0], [10800.0, 19.0], [11200.0, 20.0], [11000.0, 13.0], [11600.0, 49.0], [11400.0, 90.0], [11800.0, 60.0], [12000.0, 70.0], [12200.0, 44.0], [12400.0, 54.0], [12600.0, 2.0], [13200.0, 9.0], [12800.0, 5.0], [13000.0, 1.0], [13800.0, 74.0], [13600.0, 118.0], [13400.0, 83.0], [14000.0, 24.0], [14200.0, 80.0], [14400.0, 56.0], [14600.0, 30.0], [15200.0, 31.0], [15000.0, 5.0], [15800.0, 28.0], [15600.0, 11.0], [15400.0, 25.0], [16200.0, 101.0], [16000.0, 29.0], [16800.0, 178.0], [17200.0, 65.0], [16400.0, 15.0], [17600.0, 94.0], [18400.0, 43.0], [18000.0, 145.0], [19200.0, 116.0], [18800.0, 2.0], [19600.0, 2.0], [20400.0, 67.0], [20000.0, 4.0], [21200.0, 109.0], [20800.0, 126.0], [22000.0, 6.0], [22400.0, 32.0], [21600.0, 76.0], [22800.0, 1.0], [23200.0, 4.0], [23600.0, 68.0], [24800.0, 33.0], [25600.0, 20.0], [26400.0, 76.0], [26000.0, 1.0], [27200.0, 3.0], [27600.0, 5.0], [28400.0, 14.0], [28000.0, 2.0], [28800.0, 2.0], [30400.0, 2.0], [30800.0, 10.0], [32400.0, 4.0], [34400.0, 7.0], [32800.0, 1.0], [33600.0, 5.0], [36800.0, 12.0], [36000.0, 2.0], [38400.0, 2.0], [39200.0, 2.0], [40000.0, 7.0], [42400.0, 2.0], [46400.0, 2.0], [47200.0, 2.0], [49600.0, 1.0], [52000.0, 25.0], [52800.0, 2.0], [55200.0, 2.0], [56000.0, 3.0], [59200.0, 4.0], [60800.0, 3.0], [61600.0, 4.0], [65600.0, 4.0], [70400.0, 10.0], [72000.0, 3.0], [76800.0, 5.0], [75200.0, 1.0], [81600.0, 3.0], [84800.0, 2.0], [96000.0, 2.0], [112000.0, 1.0], [128000.0, 21.0], [132100.0, 14.0], [68700.0, 6.0], [67100.0, 3.0], [73500.0, 1.0], [75100.0, 1.0], [94300.0, 4.0], [95900.0, 3.0], [129500.0, 8.0], [133000.0, 2.0], [34700.0, 29.0], [133900.0, 10.0], [33100.0, 16.0], [33900.0, 2.0], [36300.0, 2.0], [35500.0, 6.0], [37100.0, 4.0], [38700.0, 21.0], [40300.0, 17.0], [39500.0, 2.0], [41900.0, 1.0], [41100.0, 9.0], [44300.0, 2.0], [43500.0, 2.0], [48300.0, 12.0], [47500.0, 2.0], [50700.0, 4.0], [51500.0, 4.0], [56300.0, 1.0], [57100.0, 2.0], [55500.0, 22.0], [58700.0, 2.0], [57900.0, 1.0], [60300.0, 6.0], [65100.0, 2.0], [63500.0, 2.0], [71000.0, 1.0], [72600.0, 1.0], [74200.0, 3.0], [75800.0, 1.0], [80600.0, 1.0], [83800.0, 4.0], [82200.0, 1.0], [88600.0, 1.0], [95000.0, 11.0], [96600.0, 1.0], [99800.0, 1.0], [103000.0, 1.0], [128600.0, 1.0], [131600.0, 18.0], [138900.0, 1.0], [66900.0, 11.0], [71700.0, 4.0], [70100.0, 2.0], [73300.0, 1.0], [79700.0, 3.0], [82900.0, 2.0], [89300.0, 1.0], [87700.0, 1.0], [90900.0, 2.0], [95700.0, 11.0], [102100.0, 1.0], [98900.0, 2.0], [119700.0, 1.0], [129300.0, 25.0], [133400.0, 1.0], [16500.0, 18.0], [16900.0, 110.0], [17300.0, 107.0], [18100.0, 136.0], [17700.0, 117.0], [18500.0, 92.0], [18900.0, 199.0], [19300.0, 23.0], [19700.0, 54.0], [20100.0, 1.0], [21300.0, 53.0], [20500.0, 9.0], [20900.0, 60.0], [22500.0, 14.0], [22100.0, 56.0], [21700.0, 31.0], [23300.0, 8.0], [22900.0, 2.0], [24500.0, 2.0], [23700.0, 76.0], [24100.0, 1.0], [24900.0, 6.0], [25300.0, 4.0], [25700.0, 2.0], [26500.0, 6.0], [26900.0, 13.0], [27300.0, 2.0], [27700.0, 22.0], [30100.0, 9.0], [30900.0, 5.0], [31300.0, 4.0], [31700.0, 4.0], [32500.0, 50.0], [32100.0, 4.0], [33800.0, 1.0], [34600.0, 4.0], [33000.0, 8.0], [35400.0, 3.0], [140700.0, 2.0], [38600.0, 3.0], [37000.0, 3.0], [39400.0, 2.0], [40200.0, 2.0], [41000.0, 1.0], [41800.0, 10.0], [48200.0, 3.0], [47400.0, 5.0], [49000.0, 1.0], [50600.0, 2.0], [54600.0, 2.0], [55400.0, 2.0], [57800.0, 1.0], [58600.0, 1.0], [60200.0, 9.0], [59400.0, 2.0], [63400.0, 7.0], [62600.0, 2.0], [64200.0, 14.0], [65000.0, 2.0], [66000.0, 9.0], [67600.0, 3.0], [77200.0, 1.0], [78800.0, 2.0], [86800.0, 2.0], [98000.0, 1.0], [96400.0, 5.0], [94800.0, 1.0], [102800.0, 1.0], [128400.0, 4.0], [136800.0, 1.0], [131300.0, 2.0], [65900.0, 2.0], [69100.0, 11.0], [67500.0, 1.0], [70700.0, 5.0], [73900.0, 3.0], [75500.0, 1.0], [77100.0, 1.0], [78700.0, 2.0], [89900.0, 1.0], [88300.0, 2.0], [86700.0, 3.0], [94700.0, 1.0], [113900.0, 1.0], [128300.0, 74.0], [129900.0, 1.0], [33300.0, 4.0], [133100.0, 5.0], [34900.0, 3.0], [37300.0, 14.0], [40500.0, 7.0], [39700.0, 1.0], [44500.0, 3.0], [43700.0, 3.0], [46900.0, 5.0], [48500.0, 6.0], [52500.0, 2.0], [54100.0, 1.0], [53300.0, 4.0], [55700.0, 10.0], [56500.0, 2.0], [58100.0, 2.0], [64500.0, 9.0], [65300.0, 3.0], [63700.0, 9.0], [66600.0, 6.0], [68200.0, 26.0], [76200.0, 1.0], [74600.0, 1.0], [82600.0, 1.0], [84200.0, 1.0], [93800.0, 1.0], [95400.0, 9.0], [100200.0, 85.0], [101800.0, 1.0], [105000.0, 7.0], [129000.0, 12.0], [134900.0, 6.0], [65700.0, 6.0], [68900.0, 1.0], [67300.0, 1.0], [70500.0, 3.0], [72100.0, 3.0], [73700.0, 23.0], [78500.0, 1.0], [81700.0, 1.0], [86500.0, 1.0], [92900.0, 2.0], [96100.0, 2.0], [97700.0, 1.0], [128100.0, 1.0], [8300.0, 109.0], [8500.0, 37.0], [8700.0, 55.0], [132600.0, 1.0], [8900.0, 66.0], [9100.0, 91.0], [9300.0, 32.0], [9500.0, 69.0], [9700.0, 129.0], [10100.0, 98.0], [9900.0, 49.0], [10500.0, 17.0], [10300.0, 36.0], [10700.0, 26.0], [10900.0, 36.0], [11100.0, 35.0], [11300.0, 34.0], [11500.0, 10.0], [11700.0, 10.0], [11900.0, 51.0], [12100.0, 26.0], [12700.0, 4.0], [12300.0, 95.0], [12500.0, 8.0], [13100.0, 18.0], [12900.0, 1.0], [13300.0, 12.0], [13700.0, 93.0], [13500.0, 93.0], [13900.0, 81.0], [14300.0, 139.0], [14100.0, 46.0], [14500.0, 41.0], [14700.0, 2.0], [14900.0, 5.0], [15300.0, 29.0], [15100.0, 14.0], [15500.0, 29.0], [15700.0, 3.0], [15900.0, 31.0], [16100.0, 31.0], [16300.0, 183.0], [17400.0, 104.0], [16600.0, 37.0], [17000.0, 7.0], [17800.0, 38.0], [18200.0, 155.0], [19000.0, 60.0], [19400.0, 50.0], [18600.0, 47.0], [19800.0, 84.0], [20200.0, 114.0], [21400.0, 90.0], [21000.0, 21.0], [20600.0, 125.0], [22200.0, 99.0], [21800.0, 5.0], [23000.0, 11.0], [22600.0, 2.0], [23800.0, 12.0], [25000.0, 8.0], [24600.0, 65.0], [25800.0, 20.0], [26600.0, 6.0], [26200.0, 4.0], [27400.0, 12.0], [27000.0, 2.0], [27800.0, 29.0], [28200.0, 56.0], [29400.0, 11.0], [29800.0, 5.0], [30200.0, 9.0], [30600.0, 20.0], [31000.0, 2.0], [31400.0, 6.0], [32600.0, 28.0], [32200.0, 11.0], [33200.0, 48.0], [34800.0, 12.0], [34000.0, 1.0], [35600.0, 5.0], [36400.0, 2.0], [38000.0, 4.0], [37200.0, 6.0], [40400.0, 31.0], [42800.0, 2.0], [41200.0, 2.0], [46800.0, 4.0], [45200.0, 6.0], [47600.0, 7.0], [48400.0, 3.0], [49200.0, 2.0], [50800.0, 20.0], [50000.0, 1.0], [52400.0, 2.0], [55600.0, 9.0], [58800.0, 3.0], [59600.0, 3.0], [60400.0, 1.0], [65200.0, 5.0], [63600.0, 4.0], [64400.0, 18.0], [68000.0, 1.0], [69600.0, 1.0], [77600.0, 11.0], [80800.0, 8.0], [79200.0, 1.0], [85600.0, 1.0], [93600.0, 2.0], [96800.0, 3.0], [100000.0, 323.0], [104800.0, 7.0], [164800.0, 2.0], [66300.0, 1.0], [69500.0, 1.0], [72700.0, 8.0], [77500.0, 48.0], [80700.0, 5.0], [79100.0, 2.0], [85500.0, 23.0], [87100.0, 3.0], [91900.0, 2.0], [96700.0, 2.0], [99900.0, 1.0], [103100.0, 95.0], [114300.0, 8.0], [128700.0, 32.0], [147400.0, 6.0], [34300.0, 20.0], [33500.0, 32.0], [135500.0, 1.0], [36700.0, 17.0], [35100.0, 7.0], [37500.0, 1.0], [40700.0, 6.0], [41500.0, 2.0], [43100.0, 2.0], [45500.0, 3.0], [46300.0, 1.0], [48700.0, 13.0], [49500.0, 2.0], [51900.0, 11.0], [53500.0, 3.0], [56700.0, 1.0], [59100.0, 2.0], [57500.0, 2.0], [60700.0, 9.0], [63100.0, 2.0], [65500.0, 4.0], [64700.0, 3.0], [67000.0, 1.0], [68600.0, 4.0], [71800.0, 2.0], [75000.0, 1.0], [79800.0, 17.0], [78200.0, 1.0], [81400.0, 10.0], [87800.0, 2.0], [95800.0, 14.0], [99000.0, 2.0], [103800.0, 1.0], [129400.0, 18.0], [133200.0, 50.0], [67700.0, 5.0], [66100.0, 5.0], [72500.0, 3.0], [77300.0, 5.0], [75700.0, 1.0], [80500.0, 3.0], [83700.0, 1.0], [93300.0, 1.0], [94900.0, 2.0], [99700.0, 1.0], [106100.0, 3.0], [114100.0, 6.0], [110900.0, 1.0], [128500.0, 1.0], [131800.0, 1.0], [135000.0, 19.0], [16700.0, 165.0], [17100.0, 21.0], [17500.0, 90.0], [17900.0, 73.0], [18300.0, 230.0], [19100.0, 101.0], [19500.0, 3.0], [20300.0, 51.0], [19900.0, 14.0], [21500.0, 50.0], [20700.0, 97.0], [21100.0, 8.0], [22300.0, 37.0], [22700.0, 6.0], [23500.0, 35.0], [23100.0, 2.0], [23900.0, 5.0], [24300.0, 6.0], [24700.0, 5.0], [25100.0, 18.0], [25500.0, 26.0], [26300.0, 10.0], [25900.0, 18.0], [27100.0, 6.0], [27500.0, 6.0], [26700.0, 5.0], [27900.0, 2.0], [28300.0, 7.0], [30700.0, 2.0], [31500.0, 6.0], [32700.0, 6.0], [33400.0, 58.0], [34200.0, 4.0], [35000.0, 17.0], [36600.0, 10.0], [38200.0, 5.0], [37400.0, 3.0], [40600.0, 1.0], [39000.0, 2.0], [42200.0, 1.0], [43800.0, 1.0], [45400.0, 3.0], [46200.0, 4.0], [47000.0, 4.0], [48600.0, 19.0], [50200.0, 2.0], [51000.0, 3.0], [51800.0, 2.0], [55000.0, 2.0], [54200.0, 2.0], [53400.0, 1.0], [55800.0, 1.0], [57400.0, 2.0], [60600.0, 29.0], [65400.0, 5.0], [64600.0, 5.0], [63800.0, 1.0], [68400.0, 2.0], [71600.0, 3.0], [74800.0, 21.0], [79600.0, 1.0], [81200.0, 1.0], [82800.0, 3.0], [89200.0, 3.0], [98800.0, 2.0], [108400.0, 1.0], [127600.0, 27.0], [129200.0, 2.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 164800.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 154.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 27238.0, "series": [{"data": [[0.0, 27238.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 871.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 16789.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 154.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 228.04415011037526, "minX": 1.68289818E12, "maxY": 3000.0, "series": [{"data": [[1.68289824E12, 3000.0], [1.68289842E12, 2998.8498422712914], [1.6828983E12, 3000.0], [1.68289848E12, 1685.5540484997919], [1.68289818E12, 3000.0], [1.68289836E12, 3000.0], [1.68289854E12, 228.04415011037526]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68289854E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 60.0, "minX": 1.0, "maxY": 138909.0, "series": [{"data": [[4.0, 100077.0], [5.0, 100076.0], [6.0, 100076.0], [8.0, 100075.0], [9.0, 100069.0], [11.0, 100068.0], [12.0, 100055.0], [17.0, 100139.0], [18.0, 100139.0], [21.0, 100138.0], [23.0, 100138.0], [24.0, 100137.5], [25.0, 100138.0], [28.0, 100138.0], [29.0, 100138.0], [30.0, 100136.5], [31.0, 100137.0], [34.0, 100135.0], [37.0, 100134.5], [39.0, 100134.0], [41.0, 100134.0], [40.0, 100134.25], [42.0, 100133.0], [44.0, 100132.0], [47.0, 100126.33333333333], [49.0, 100121.0], [48.0, 100125.0], [51.0, 100097.0], [50.0, 100112.0], [53.0, 100093.0], [52.0, 100096.0], [55.0, 100040.0], [54.0, 100080.0], [57.0, 100034.0], [56.0, 100034.0], [59.0, 100031.0], [58.0, 100033.0], [61.0, 98805.0], [60.0, 99813.0], [66.0, 100135.0], [65.0, 100134.33333333333], [69.0, 100134.0], [75.0, 100130.5], [73.0, 100134.0], [72.0, 100133.66666666667], [79.0, 100129.0], [78.0, 100128.0], [76.0, 100130.0], [82.0, 100127.0], [81.0, 100128.33333333333], [85.0, 100117.66666666667], [91.0, 100112.0], [90.0, 100112.0], [88.0, 100116.33333333333], [95.0, 100100.0], [93.0, 100110.0], [92.0, 100110.0], [99.0, 100100.66666666667], [97.0, 100100.0], [103.0, 100098.5], [102.0, 100099.0], [100.0, 100099.0], [107.0, 100096.0], [105.0, 100097.0], [104.0, 100098.0], [111.0, 100095.0], [110.0, 100095.0], [109.0, 100096.0], [108.0, 100096.0], [112.0, 100094.0], [119.0, 100088.0], [118.0, 100089.0], [117.0, 100091.0], [116.0, 100093.5], [123.0, 100087.75], [126.0, 100084.0], [125.0, 100086.5], [135.0, 100081.0], [134.0, 100082.0], [133.0, 100081.66666666667], [130.0, 100083.0], [129.0, 100083.0], [142.0, 100079.0], [151.0, 100077.0], [150.0, 100078.66666666667], [148.0, 100077.25], [144.0, 100079.0], [159.0, 100076.5], [157.0, 100077.0], [156.0, 100076.33333333333], [153.0, 100077.66666666667], [152.0, 100078.33333333333], [167.0, 100062.0], [166.0, 100063.0], [165.0, 100062.66666666667], [163.0, 100063.0], [160.0, 100066.0], [174.0, 100026.25], [170.0, 100030.0], [169.0, 100050.5], [177.0, 100024.0], [191.0, 95776.0], [190.0, 96786.0], [189.0, 96787.0], [188.0, 97794.0], [187.0, 100017.0], [186.0, 100017.6], [185.0, 100018.25], [199.0, 100142.0], [198.0, 100142.0], [192.0, 95774.0], [207.0, 100140.0], [205.0, 100141.0], [204.0, 100141.0], [201.0, 100141.0], [200.0, 100142.0], [215.0, 100131.0], [214.0, 100136.0], [212.0, 100138.0], [211.0, 100139.0], [210.0, 100140.0], [209.0, 100141.0], [223.0, 100120.0], [221.0, 100124.0], [220.0, 100126.0], [218.0, 100127.0], [231.0, 100108.0], [230.0, 100108.0], [229.0, 100108.0], [228.0, 100120.33333333333], [238.0, 100100.0], [237.0, 100101.0], [236.0, 100102.0], [235.0, 100102.0], [234.0, 100104.0], [233.0, 100103.0], [232.0, 100108.0], [244.0, 95877.0], [243.0, 95879.0], [242.0, 96887.0], [241.0, 93325.0], [240.0, 100091.0], [255.0, 100128.0], [253.0, 100127.8], [252.0, 100128.5], [269.0, 100115.0], [271.0, 100114.5], [268.0, 100116.0], [267.0, 100124.0], [266.0, 100125.0], [265.0, 100124.4], [264.0, 100126.0], [259.0, 100126.0], [257.0, 100127.0], [256.0, 100127.0], [285.0, 100098.0], [280.0, 100104.5], [278.0, 100106.0], [277.0, 100106.75], [273.0, 100107.0], [272.0, 100115.0], [302.0, 100094.0], [303.0, 100092.0], [300.0, 100095.0], [299.0, 100095.0], [298.0, 100096.0], [296.0, 100096.0], [294.0, 100097.0], [292.0, 100097.0], [291.0, 100097.0], [290.0, 100098.0], [288.0, 100097.57142857143], [317.0, 100083.0], [318.0, 100081.0], [316.0, 100083.66666666667], [313.0, 100086.0], [312.0, 100086.5], [311.0, 100088.0], [309.0, 100090.0], [306.0, 100091.0], [305.0, 100091.0], [332.0, 100129.33333333333], [331.0, 100130.0], [325.0, 96811.0], [324.0, 98968.0], [323.0, 97821.0], [322.0, 94869.0], [321.0, 100077.0], [320.0, 100080.0], [350.0, 100092.0], [351.0, 100091.0], [349.0, 100101.0], [348.0, 100102.0], [346.0, 100102.0], [345.0, 100113.0], [344.0, 100114.0], [342.0, 100121.0], [339.0, 100123.0], [338.0, 100127.0], [337.0, 100128.0], [336.0, 100128.0], [340.0, 100122.0], [366.0, 95953.0], [367.0, 86688.0], [365.0, 96961.0], [364.0, 94930.0], [363.0, 95937.0], [362.0, 95939.0], [361.0, 96947.0], [360.0, 98982.0], [359.0, 99990.0], [355.0, 100089.0], [358.0, 95805.0], [357.0, 100085.5], [382.0, 80734.0], [383.0, 80733.0], [381.0, 81743.0], [380.0, 86854.0], [379.0, 87860.0], [378.0, 82754.0], [377.0, 83762.0], [376.0, 86719.0], [375.0, 87725.0], [369.0, 87800.0], [368.0, 84238.0], [371.0, 86790.0], [370.0, 86791.0], [374.0, 81209.0], [373.0, 82217.0], [372.0, 85784.0], [398.0, 69095.0], [399.0, 72657.0], [397.0, 70102.0], [396.0, 80810.0], [395.0, 81819.0], [394.0, 79787.0], [393.0, 80794.0], [392.0, 72124.0], [391.0, 73131.0], [385.0, 86866.0], [384.0, 79726.0], [387.0, 83823.0], [386.0, 75152.0], [390.0, 79652.0], [389.0, 80660.0], [388.0, 82815.0], [414.0, 67537.0], [415.0, 71724.0], [413.0, 72732.0], [412.0, 72734.0], [411.0, 73742.0], [410.0, 64481.0], [409.0, 65488.0], [408.0, 67611.0], [407.0, 68619.0], [401.0, 78789.0], [400.0, 71650.0], [403.0, 70638.0], [402.0, 75748.0], [406.0, 65057.0], [405.0, 66065.0], [404.0, 69630.0], [430.0, 63649.0], [431.0, 63647.0], [429.0, 64656.0], [428.0, 64658.0], [427.0, 65666.0], [426.0, 65667.0], [425.0, 66675.0], [424.0, 64644.0], [423.0, 65651.0], [417.0, 66525.0], [416.0, 70717.0], [419.0, 69703.0], [418.0, 65517.0], [422.0, 67687.0], [421.0, 68694.0], [420.0, 68696.0], [446.0, 55573.0], [447.0, 55570.0], [445.0, 56581.0], [444.0, 56583.0], [443.0, 57589.0], [442.0, 57591.0], [441.0, 58599.0], [440.0, 58601.0], [439.0, 59608.0], [433.0, 62637.0], [432.0, 62640.0], [435.0, 61627.0], [434.0, 61629.0], [438.0, 59610.0], [437.0, 60618.0], [436.0, 60620.0], [462.0, 47498.0], [463.0, 47493.0], [461.0, 48503.0], [460.0, 48505.0], [459.0, 49512.0], [458.0, 49514.0], [457.0, 50522.0], [456.0, 50524.0], [455.0, 51531.0], [449.0, 54562.0], [448.0, 54564.0], [451.0, 53551.0], [450.0, 53553.0], [454.0, 51533.0], [453.0, 52541.0], [452.0, 52544.0], [478.0, 42537.0], [479.0, 42535.0], [477.0, 43544.0], [476.0, 43546.0], [475.0, 44556.0], [474.0, 44556.0], [473.0, 45564.0], [472.0, 45565.0], [471.0, 46574.0], [465.0, 46485.0], [464.0, 46486.0], [467.0, 45474.0], [466.0, 45476.0], [470.0, 46576.0], [469.0, 47583.0], [468.0, 47585.0], [494.0, 34461.0], [495.0, 34458.0], [493.0, 35468.0], [492.0, 35470.0], [491.0, 36477.0], [490.0, 36479.0], [489.0, 37487.0], [488.0, 37489.0], [487.0, 38496.0], [481.0, 41525.0], [480.0, 41528.0], [483.0, 40517.0], [482.0, 40518.0], [486.0, 38498.0], [485.0, 39506.0], [484.0, 39508.0], [510.0, 26384.0], [511.0, 26382.0], [509.0, 27392.0], [508.0, 27393.0], [507.0, 28402.0], [506.0, 28403.0], [505.0, 29411.0], [504.0, 29412.0], [503.0, 30421.0], [497.0, 33448.0], [496.0, 33450.0], [499.0, 32440.0], [498.0, 32441.0], [502.0, 30422.0], [501.0, 31429.0], [500.0, 31431.0], [540.0, 7553.0], [542.0, 7549.0], [528.0, 7589.5], [530.0, 7587.0], [532.0, 7571.0], [536.0, 7564.0], [518.0, 22346.0], [516.0, 23355.0], [514.0, 24365.0], [512.0, 25374.0], [526.0, 23257.0], [524.0, 10852.5], [522.0, 7593.0], [520.0, 14113.0], [534.0, 7568.0], [568.0, 14477.0], [574.0, 13914.0], [562.0, 13940.0], [570.0, 13664.0], [550.0, 13674.0], [548.0, 8600.0], [546.0, 7535.0], [544.0, 7543.0], [558.0, 8594.0], [556.0, 11135.5], [554.0, 8598.0], [566.0, 13667.0], [580.0, 14285.333333333334], [592.0, 14538.333333333334], [604.0, 22793.0], [600.0, 8573.0], [576.0, 13914.0], [582.0, 13658.0], [588.0, 14467.0], [586.0, 13906.0], [584.0, 14469.0], [598.0, 15806.0], [596.0, 13651.0], [632.0, 13623.0], [638.0, 13872.0], [624.0, 13628.0], [626.0, 13626.0], [636.0, 13621.0], [622.0, 13628.0], [608.0, 13899.0], [612.0, 25204.0], [610.0, 14455.0], [614.0, 13633.0], [618.0, 36771.0], [616.0, 22664.5], [630.0, 13624.0], [628.0, 13626.0], [666.0, 14139.0], [670.0, 14416.0], [658.0, 13610.0], [660.0, 13608.0], [668.0, 13603.0], [664.0, 13607.0], [646.0, 13616.0], [644.0, 14430.0], [640.0, 13745.0], [654.0, 14018.5], [652.0, 13613.0], [650.0, 13614.0], [648.0, 13867.0], [700.0, 14399.0], [688.0, 13846.0], [690.0, 14406.0], [692.0, 14404.0], [702.0, 14395.0], [698.0, 14399.0], [696.0, 14399.0], [672.0, 13602.0], [674.0, 13853.0], [676.0, 14413.0], [678.0, 13598.0], [686.0, 13594.0], [684.0, 13596.0], [682.0, 13766.0], [694.0, 13587.0], [730.0, 13568.0], [734.0, 13818.0], [722.0, 14114.0], [732.0, 13693.5], [704.0, 13834.0], [706.0, 15734.0], [708.0, 22725.0], [710.0, 13830.0], [716.0, 13827.0], [714.0, 13744.666666666666], [726.0, 13822.0], [724.0, 13823.0], [760.0, 13799.0], [756.0, 13808.0], [754.0, 13809.0], [762.0, 13798.0], [740.0, 13815.0], [738.0, 13563.0], [736.0, 14377.0], [750.0, 13810.0], [748.0, 14371.0], [746.0, 15714.0], [744.0, 15044.5], [758.0, 13802.0], [796.0, 13756.0], [792.0, 14584.0], [784.0, 13767.0], [788.0, 13765.0], [786.0, 13766.0], [798.0, 13500.0], [794.0, 14317.0], [782.0, 13769.0], [768.0, 14338.0], [770.0, 14337.0], [772.0, 13776.0], [780.0, 13771.0], [776.0, 13774.0], [790.0, 13762.0], [828.0, 13735.5], [830.0, 13734.0], [816.0, 13744.0], [818.0, 13742.0], [826.0, 13735.0], [814.0, 13745.0], [800.0, 13752.0], [802.0, 13750.0], [804.0, 14309.0], [812.0, 13746.0], [810.0, 13747.0], [808.0, 13495.0], [822.0, 15639.0], [820.0, 13739.0], [856.0, 13686.0], [862.0, 22574.0], [848.0, 18140.5], [858.0, 15587.5], [846.0, 14258.0], [832.0, 13731.0], [834.0, 15630.0], [836.0, 13726.0], [844.0, 13723.0], [842.0, 15624.0], [840.0, 14284.0], [854.0, 20744.0], [852.0, 14253.0], [868.0, 13669.0], [894.0, 13649.0], [880.0, 14888.0], [892.0, 22543.0], [866.0, 15572.0], [870.0, 13664.0], [876.0, 13659.0], [874.0, 14222.0], [872.0, 13662.0], [884.0, 14214.0], [882.0, 15557.0], [924.0, 15363.0], [912.0, 13545.0], [914.0, 14093.0], [916.0, 14076.0], [926.0, 13460.0], [922.0, 14072.0], [920.0, 14072.0], [896.0, 18372.0], [898.0, 14204.5], [900.0, 13642.0], [902.0, 13615.0], [910.0, 13559.0], [908.0, 14140.0], [906.0, 15497.0], [904.0, 14157.0], [918.0, 14075.0], [954.0, 15321.5], [952.0, 15322.0], [958.0, 13977.0], [946.0, 15339.0], [956.0, 13419.0], [930.0, 14465.0], [932.0, 14688.5], [934.0, 14017.0], [942.0, 14449.666666666666], [938.0, 15345.0], [936.0, 14016.0], [950.0, 15325.0], [948.0, 15325.0], [984.0, 13385.0], [988.0, 13935.0], [978.0, 15295.0], [980.0, 13948.0], [990.0, 13931.0], [986.0, 13938.0], [960.0, 22308.0], [962.0, 15314.0], [964.0, 15312.0], [966.0, 14640.0], [974.0, 13955.0], [972.0, 13958.0], [970.0, 13960.0], [968.0, 15303.0], [1020.0, 17698.0], [1022.0, 13644.0], [1008.0, 15219.0], [1010.0, 11844.0], [1012.0, 20173.0], [1018.0, 15193.0], [1016.0, 15197.0], [998.0, 20297.0], [996.0, 13740.666666666666], [992.0, 13930.0], [1006.0, 13189.0], [1004.0, 13191.0], [1002.0, 11850.0], [1000.0, 19286.0], [1014.0, 15207.0], [1072.0, 14360.0], [1084.0, 14356.0], [1060.0, 14367.0], [1056.0, 15683.0], [1076.0, 13625.0], [1028.0, 10268.0], [1024.0, 10269.0], [1032.0, 10263.0], [1052.0, 10251.0], [1048.0, 11939.0], [1040.0, 10255.0], [1068.0, 14363.0], [1140.0, 14328.0], [1120.0, 14335.0], [1124.0, 13601.0], [1144.0, 14324.0], [1088.0, 14352.0], [1092.0, 13984.5], [1096.0, 13616.0], [1100.0, 14347.0], [1112.0, 14340.0], [1108.0, 14342.0], [1104.0, 14345.0], [1132.0, 13597.0], [1128.0, 14333.0], [1200.0, 15107.666666666666], [1212.0, 13548.0], [1184.0, 13566.0], [1204.0, 13551.0], [1152.0, 13588.0], [1156.0, 14318.0], [1160.0, 13584.0], [1164.0, 13580.0], [1180.0, 13940.0], [1176.0, 13575.0], [1172.0, 13942.5], [1168.0, 13579.0], [1192.0, 13557.0], [1188.0, 14295.0], [1264.0, 16816.0], [1272.0, 16816.0], [1248.0, 13493.0], [1268.0, 14263.0], [1216.0, 13898.0], [1220.0, 16722.0], [1224.0, 14254.0], [1228.0, 16715.0], [1244.0, 13498.0], [1240.0, 13502.0], [1236.0, 13505.0], [1260.0, 14208.0], [1256.0, 14212.0], [1252.0, 13847.0], [1312.0, 17613.0], [1316.0, 17612.0], [1280.0, 13465.0], [1308.0, 16776.0], [1304.0, 14166.0], [1300.0, 16792.0], [1296.0, 17364.666666666668], [1412.0, 16753.0], [1524.0, 13400.0], [1532.0, 14797.0], [1504.0, 12814.0], [1508.0, 15900.750000000002], [1520.0, 17591.0], [1484.0, 17594.5], [1496.0, 17592.0], [1492.0, 15912.666666666666], [1516.0, 14111.4], [1568.0, 14609.0], [1580.0, 132.0], [1576.0, 11992.0], [1572.0, 14606.0], [1548.0, 78.0], [1544.0, 16081.625], [1536.0, 13765.5], [1564.0, 11999.0], [1560.0, 12003.0], [1556.0, 12006.0], [1552.0, 13892.0], [1656.0, 91.0], [1660.0, 11528.0], [1636.0, 92.5], [1640.0, 92.0], [1648.0, 92.0], [1612.0, 1070.1538461538462], [1604.0, 118.0], [1600.0, 118.5], [1628.0, 92.5], [1624.0, 94.0], [1620.0, 96.14285714285715], [1720.0, 9571.0], [1696.0, 22301.0], [1700.0, 9765.0], [1704.0, 9864.0], [1724.0, 9854.0], [1716.0, 9863.0], [1676.0, 13390.0], [1672.0, 13401.0], [1668.0, 13404.0], [1664.0, 12984.5], [1692.0, 9586.0], [1688.0, 8978.0], [1684.0, 9442.0], [1780.0, 16040.0], [1776.0, 9823.0], [1788.0, 22251.0], [1760.0, 9833.0], [1764.0, 9545.0], [1784.0, 9823.0], [1732.0, 9844.0], [1736.0, 9559.5], [1740.0, 9739.0], [1752.0, 9834.0], [1748.0, 9837.0], [1744.0, 9555.0], [1840.0, 9792.0], [1852.0, 9781.0], [1824.0, 9700.0], [1832.0, 9735.833333333334], [1836.0, 9671.333333333334], [1804.0, 9813.0], [1800.0, 15980.5], [1792.0, 22250.0], [1820.0, 9804.0], [1816.0, 9806.0], [1812.0, 9811.0], [1808.0, 9812.0], [1912.0, 15861.0], [1916.0, 9693.0], [1888.0, 13860.333333333334], [1892.0, 9681.666666666666], [1896.0, 9711.0], [1908.0, 22130.0], [1904.0, 9416.0], [1868.0, 22165.0], [1864.0, 9630.0], [1856.0, 9730.0], [1880.0, 9717.0], [1928.0, 15824.5], [1924.0, 9644.0], [1948.0, 9483.0], [1944.0, 9493.0], [1940.0, 22038.0], [1936.0, 9553.0], [2036.0, 9222.0], [2040.0, 9218.0], [2044.0, 21743.0], [2020.0, 9242.0], [2028.0, 9339.0], [2032.0, 9227.0], [1988.0, 9286.0], [1992.0, 9286.0], [1996.0, 9289.0], [2012.0, 9423.25], [2000.0, 9285.0], [2168.0, 7322.0], [2112.0, 7496.0], [2120.0, 7539.0], [2136.0, 7554.0], [2160.0, 7325.0], [2152.0, 16382.0], [2144.0, 6061.0], [2048.0, 9200.0], [2072.0, 8451.0], [2104.0, 6806.0], [2096.0, 8126.0], [2272.0, 6689.0], [2288.0, 16310.0], [2296.0, 16294.0], [2280.0, 16314.0], [2176.0, 7319.0], [2184.0, 6044.0], [2192.0, 5613.0], [2200.0, 7306.0], [2232.0, 5592.0], [2224.0, 6444.5], [2216.0, 6003.5], [2448.0, 15982.0], [2456.0, 16264.0], [2504.0, 15124.75], [2552.0, 118.0], [2440.0, 5515.0], [2488.0, 11732.5], [2480.0, 9257.875], [2472.0, 7208.0], [2464.0, 138814.0], [2512.0, 127.0], [2664.0, 75.5], [2584.0, 94.0], [2568.0, 116.0], [2800.0, 10729.0], [2752.0, 12112.0], [2768.0, 12390.0], [2776.0, 10751.0], [2792.0, 12376.0], [2688.0, 109.0], [2744.0, 10674.0], [2736.0, 99.0], [2728.0, 100.2], [2720.0, 100.0], [2832.0, 10458.5], [2936.0, 9222.0], [2920.0, 8291.0], [2880.0, 10298.0], [2888.0, 9857.0], [2904.0, 11486.0], [2824.0, 10467.0], [2840.0, 10439.0], [2864.0, 8777.0], [2856.0, 10342.0], [2848.0, 11990.0], [2952.0, 8223.0], [3000.0, 8378.641835107008], [2960.0, 9796.666666666666], [2968.0, 9224.666666666666], [2992.0, 9676.0], [2984.0, 9696.0], [2145.0, 6059.0], [2113.0, 20031.0], [2129.0, 8498.5], [2161.0, 16380.0], [2065.0, 8469.0], [2049.0, 7999.0], [2097.0, 10085.0], [2081.0, 8436.0], [2297.0, 7236.0], [2289.0, 16304.0], [2241.0, 16341.5], [2249.0, 6437.0], [2257.0, 7285.0], [2265.0, 7283.0], [2281.0, 16313.0], [2185.0, 7314.0], [2193.0, 16083.0], [2201.0, 6414.0], [2225.0, 5595.0], [2217.0, 6405.0], [2209.0, 7303.333333333333], [2305.0, 7231.0], [2553.0, 118.0], [2457.0, 14114.2], [2449.0, 16265.0], [2489.0, 16258.666666666666], [2473.0, 11168.5], [2681.0, 112.0], [2673.0, 113.5], [2665.0, 75.0], [2585.0, 93.0], [2577.0, 115.0], [2561.0, 117.0], [2809.0, 9917.5], [2753.0, 9217.0], [2761.0, 10660.0], [2769.0, 11429.0], [2777.0, 9204.0], [2801.0, 10729.0], [2793.0, 11414.5], [2785.0, 11420.5], [2745.0, 12119.0], [2729.0, 100.0], [2721.0, 100.0], [2913.0, 10385.0], [2881.0, 10297.0], [2897.0, 9900.5], [2929.0, 10389.5], [2825.0, 8920.0], [2833.0, 8914.0], [2841.0, 8893.0], [2873.0, 9544.0], [2849.0, 11705.0], [2945.0, 10245.25], [2961.0, 10580.5], [2969.0, 8187.0], [2993.0, 11300.0], [2985.0, 9685.0], [2977.0, 10534.5], [1073.0, 16824.0], [1085.0, 14354.0], [1081.0, 12695.0], [1077.0, 13625.0], [1033.0, 10262.0], [1029.0, 10268.0], [1053.0, 16689.0], [1049.0, 18585.0], [1041.0, 10254.0], [1065.0, 14364.0], [1141.0, 13593.0], [1149.0, 13956.0], [1125.0, 13600.0], [1129.0, 14332.0], [1145.0, 13590.0], [1137.0, 13081.0], [1101.0, 14346.0], [1117.0, 13091.0], [1113.0, 14339.0], [1109.0, 14342.0], [1133.0, 13597.0], [1201.0, 14285.0], [1213.0, 14265.0], [1185.0, 13563.0], [1189.0, 13559.0], [1205.0, 14283.0], [1157.0, 13584.0], [1161.0, 14315.0], [1181.0, 13569.0], [1177.0, 13574.0], [1173.0, 13576.0], [1169.0, 14312.0], [1197.0, 13919.5], [1193.0, 16753.0], [1225.0, 14254.0], [1257.0, 16674.0], [1277.0, 15139.0], [1273.0, 14203.0], [1245.0, 14230.0], [1217.0, 11769.0], [1221.0, 13522.0], [1229.0, 13516.0], [1241.0, 14234.0], [1233.0, 14249.0], [1261.0, 16817.0], [1249.0, 13482.0], [1285.0, 15135.5], [1309.0, 17621.0], [1317.0, 14153.0], [1281.0, 13464.0], [1289.0, 13460.0], [1293.0, 17647.0], [1305.0, 17624.0], [1297.0, 16799.0], [1413.0, 13287.482758620688], [1533.0, 17591.0], [1513.0, 13400.0], [1525.0, 15489.857142857145], [1501.0, 15195.4], [1497.0, 17169.0], [1493.0, 16745.0], [1489.0, 16745.0], [1517.0, 16156.0], [1509.0, 17027.333333333332], [1549.0, 78.0], [1581.0, 12502.0], [1573.0, 14460.0], [1569.0, 11266.0], [1545.0, 14131.0], [1537.0, 11639.0], [1561.0, 12002.0], [1553.0, 13876.0], [1637.0, 92.0], [1661.0, 11526.0], [1653.0, 91.0], [1609.0, 118.0], [1605.0, 117.5], [1621.0, 95.0], [1725.0, 9851.0], [1701.0, 9865.0], [1705.0, 9580.0], [1709.0, 9721.5], [1721.0, 9855.0], [1717.0, 9863.0], [1713.0, 9720.0], [1677.0, 10454.0], [1673.0, 12407.0], [1669.0, 12556.0], [1665.0, 12560.0], [1693.0, 9768.0], [1689.0, 9587.0], [1685.0, 8433.0], [1681.0, 131.5], [1737.0, 9575.0], [1785.0, 22254.0], [1773.0, 9827.0], [1789.0, 9818.0], [1729.0, 9566.0], [1741.0, 9556.0], [1757.0, 15974.0], [1753.0, 9733.0], [1749.0, 22269.0], [1745.0, 9554.0], [1805.0, 22247.0], [1845.0, 9731.0], [1853.0, 9767.0], [1825.0, 9802.0], [1801.0, 9814.0], [1797.0, 15981.0], [1793.0, 9815.0], [1817.0, 9703.0], [1813.0, 9708.0], [1837.0, 9800.0], [1889.0, 9523.0], [1913.0, 9426.0], [1905.0, 9416.0], [1869.0, 9628.0], [1865.0, 9731.0], [1885.0, 9624.0], [1921.0, 13188.999999999998], [1925.0, 9612.0], [1949.0, 9482.0], [1937.0, 9603.0], [2041.0, 9212.0], [2045.0, 9208.0], [2017.0, 9245.0], [2021.0, 9240.0], [2025.0, 9147.0], [2037.0, 21756.0], [2033.0, 21760.0], [2013.0, 9400.352941176472], [2001.0, 9285.0], [2154.0, 6190.5], [2170.0, 14704.0], [2114.0, 7595.0], [2130.0, 7464.0], [2138.0, 19988.0], [2050.0, 7998.0], [2058.0, 12652.333333333332], [2066.0, 8467.0], [2074.0, 14719.5], [2098.0, 10083.0], [2090.0, 10097.0], [2082.0, 8411.5], [2290.0, 7248.0], [2242.0, 7286.0], [2266.0, 7282.0], [2298.0, 7232.0], [2282.0, 16311.0], [2274.0, 10945.0], [2178.0, 11846.0], [2186.0, 7313.0], [2194.0, 6418.0], [2202.0, 7305.0], [2234.0, 10966.0], [2226.0, 7292.0], [2218.0, 7295.0], [2210.0, 5604.0], [2306.0, 7231.0], [2498.0, 11258.053333333331], [2458.0, 7209.0], [2506.0, 13238.666666666666], [2442.0, 5676.2], [2490.0, 7204.0], [2474.0, 16262.0], [2466.0, 7208.5], [2682.0, 110.0], [2674.0, 113.5], [2634.0, 78.0], [2666.0, 74.43243243243242], [2578.0, 115.0], [2570.0, 116.0], [2562.0, 117.0], [2810.0, 9918.5], [2794.0, 12089.0], [2754.0, 12111.0], [2762.0, 12106.0], [2770.0, 12387.0], [2778.0, 12384.0], [2802.0, 9182.0], [2786.0, 9973.5], [2690.0, 108.0], [2746.0, 12120.0], [2738.0, 99.0], [2730.0, 100.0], [2938.0, 9824.0], [2930.0, 11462.0], [2890.0, 11491.0], [2882.0, 10295.0], [2898.0, 9855.0], [2906.0, 9848.0], [2922.0, 9320.0], [2914.0, 9324.0], [2818.0, 8925.5], [2826.0, 8919.0], [2834.0, 11804.0], [2842.0, 12068.0], [2874.0, 10316.0], [2866.0, 11140.0], [2858.0, 10340.5], [2850.0, 11989.0], [2946.0, 8260.0], [2954.0, 11402.0], [2962.0, 9800.0], [2970.0, 10549.0], [2994.0, 155.0], [2978.0, 11343.0], [2171.0, 5624.0], [2115.0, 7492.0], [2123.0, 7521.666666666667], [2131.0, 19996.0], [2139.0, 19987.0], [2163.0, 5628.0], [2155.0, 7327.0], [2147.0, 5057.5], [2075.0, 8442.0], [2067.0, 8465.0], [2051.0, 8476.0], [2107.0, 7599.0], [2091.0, 10095.0], [2083.0, 10104.0], [2299.0, 7231.0], [2251.0, 7284.0], [2259.0, 6525.333333333333], [2267.0, 73084.5], [2179.0, 5620.0], [2187.0, 5616.0], [2195.0, 16363.0], [2227.0, 7291.0], [2219.0, 7294.0], [2211.0, 7299.0], [2307.0, 16285.0], [2499.0, 7202.0], [2507.0, 7202.0], [2443.0, 6646.666666666667], [2491.0, 7204.0], [2483.0, 7205.5], [2475.0, 13149.333333333334], [2635.0, 78.0], [2683.0, 109.0], [2659.0, 75.0], [2579.0, 115.0], [2571.0, 116.0], [2811.0, 12301.0], [2803.0, 12344.0], [2763.0, 9212.0], [2755.0, 10762.0], [2771.0, 9207.0], [2779.0, 10747.0], [2795.0, 10735.0], [2787.0, 10747.0], [2691.0, 108.0], [2747.0, 9221.0], [2739.0, 99.0], [2731.0, 99.0], [2723.0, 100.0], [2923.0, 9768.0], [2931.0, 9110.333333333334], [2883.0, 11928.0], [2907.0, 10666.5], [2915.0, 9838.0], [2819.0, 10470.0], [2827.0, 8917.0], [2835.0, 12084.0], [2843.0, 12068.0], [2875.0, 8770.0], [2867.0, 11957.0], [2859.0, 10341.0], [2947.0, 11440.0], [2995.0, 146.0], [2963.0, 9792.0], [2987.0, 11319.0], [2979.0, 9191.333333333334], [539.0, 7554.5], [537.0, 7560.0], [543.0, 7549.0], [529.0, 7588.0], [531.0, 7572.0], [533.0, 7568.0], [541.0, 7554.0], [519.0, 22344.0], [517.0, 23353.0], [515.0, 24362.0], [513.0, 25372.0], [525.0, 7592.0], [521.0, 23259.0], [535.0, 7567.0], [571.0, 13662.0], [569.0, 13663.0], [575.0, 13914.0], [565.0, 13667.5], [563.0, 13921.0], [573.0, 13915.0], [551.0, 8598.0], [549.0, 8599.0], [547.0, 7524.0], [545.0, 7538.0], [559.0, 8594.0], [557.0, 8595.0], [553.0, 36814.0], [567.0, 13917.0], [603.0, 13901.0], [605.0, 13900.0], [607.0, 13900.0], [595.0, 8575.0], [593.0, 13905.0], [601.0, 14462.0], [589.0, 14059.5], [577.0, 14472.0], [581.0, 13912.0], [583.0, 13657.0], [585.0, 13907.0], [599.0, 13903.0], [597.0, 8575.5], [633.0, 13622.0], [637.0, 13621.0], [625.0, 13626.0], [635.0, 13622.0], [609.0, 13899.0], [613.0, 8558.0], [621.0, 13756.5], [619.0, 13630.0], [617.0, 36773.0], [631.0, 13624.0], [629.0, 13625.0], [669.0, 14416.0], [671.0, 13603.0], [657.0, 14016.5], [659.0, 14422.0], [667.0, 13604.0], [647.0, 13615.0], [643.0, 13745.0], [641.0, 13618.0], [655.0, 13611.0], [651.0, 13613.0], [649.0, 13867.0], [663.0, 13734.0], [661.0, 13608.0], [701.0, 14395.0], [703.0, 14395.0], [689.0, 13593.0], [691.0, 13844.0], [693.0, 13589.0], [699.0, 13838.0], [697.0, 13586.0], [687.0, 13593.0], [673.0, 13601.0], [675.0, 14413.0], [677.0, 13599.0], [679.0, 13598.0], [685.0, 13595.0], [683.0, 13596.0], [695.0, 13840.0], [729.0, 18141.0], [735.0, 14378.0], [723.0, 13571.0], [733.0, 13566.0], [719.0, 13573.0], [705.0, 13834.0], [707.0, 13832.0], [709.0, 13580.0], [711.0, 13576.0], [717.0, 13826.0], [715.0, 13575.0], [727.0, 13568.0], [725.0, 22715.0], [761.0, 13798.0], [763.0, 13796.0], [767.0, 14551.25], [753.0, 13809.0], [755.0, 14369.0], [741.0, 14374.0], [739.0, 13689.5], [749.0, 13811.0], [747.0, 13559.0], [745.0, 14094.0], [759.0, 13801.0], [757.0, 14363.0], [795.0, 14316.0], [799.0, 13752.0], [785.0, 14326.0], [797.0, 13755.0], [793.0, 14321.0], [769.0, 22671.0], [771.0, 14337.0], [775.0, 16653.333333333332], [781.0, 13770.0], [779.0, 13771.5], [777.0, 13771.0], [789.0, 14323.0], [825.0, 14296.0], [831.0, 14291.0], [817.0, 14302.0], [819.0, 13742.0], [829.0, 14295.0], [801.0, 14311.0], [803.0, 13749.0], [807.0, 14028.0], [805.0, 13749.0], [813.0, 14305.0], [811.0, 14307.0], [823.0, 13738.0], [821.0, 13738.0], [861.0, 13685.0], [863.0, 13671.0], [851.0, 13693.0], [849.0, 13694.0], [859.0, 14246.0], [833.0, 14290.0], [835.0, 13729.0], [839.0, 14284.5], [837.0, 15628.0], [845.0, 13698.0], [841.0, 13722.0], [855.0, 20743.0], [853.0, 14252.0], [869.0, 13666.0], [893.0, 14470.0], [883.0, 15556.0], [889.0, 14210.5], [877.0, 14219.0], [865.0, 13950.5], [867.0, 13671.0], [871.0, 14224.0], [875.0, 13661.0], [887.0, 15552.0], [885.0, 14213.0], [881.0, 13530.5], [925.0, 14022.0], [927.0, 15360.0], [915.0, 13813.0], [917.0, 14075.0], [923.0, 14035.0], [921.0, 15413.0], [911.0, 22448.0], [899.0, 13644.0], [901.0, 15517.0], [903.0, 13601.0], [909.0, 13560.0], [907.0, 22472.0], [905.0, 13597.0], [919.0, 22407.0], [955.0, 13980.0], [959.0, 14367.0], [945.0, 15339.5], [947.0, 15327.0], [943.0, 14002.0], [933.0, 15359.0], [935.0, 15357.0], [939.0, 13443.0], [937.0, 15356.0], [951.0, 13422.0], [949.0, 15325.0], [989.0, 15273.0], [991.0, 13931.0], [977.0, 15296.5], [979.0, 13952.0], [987.0, 13935.0], [985.0, 13379.0], [975.0, 13395.0], [961.0, 13975.0], [963.0, 13412.0], [967.0, 13968.0], [973.0, 13957.0], [971.0, 15299.0], [969.0, 15302.0], [983.0, 13665.0], [981.0, 22279.0], [1017.0, 15196.0], [1021.0, 10270.0], [1009.0, 11845.0], [1011.0, 13183.0], [1013.0, 11835.0], [1019.0, 17701.0], [999.0, 19288.0], [997.0, 20299.0], [993.0, 13928.0], [1007.0, 15220.0], [1005.0, 13190.0], [1001.0, 11852.0], [1015.0, 13168.0], [1078.0, 13624.0], [1086.0, 13619.0], [1074.0, 11865.0], [1054.0, 16688.0], [1030.0, 10266.0], [1038.0, 10256.0], [1034.0, 10258.0], [1046.0, 11377.666666666666], [1042.0, 10254.0], [1070.0, 13628.5], [1066.0, 14363.0], [1062.0, 14366.5], [1138.0, 14328.0], [1146.0, 16934.0], [1150.0, 13588.0], [1122.0, 13968.5], [1126.0, 13600.0], [1142.0, 13591.0], [1118.0, 16948.0], [1094.0, 13617.0], [1098.0, 13981.5], [1102.0, 14345.0], [1114.0, 14339.0], [1110.0, 11847.0], [1106.0, 13976.5], [1134.0, 14329.0], [1130.0, 14331.0], [1206.0, 14282.0], [1214.0, 14265.0], [1202.0, 13551.0], [1182.0, 13568.0], [1154.0, 13586.0], [1158.0, 14316.0], [1166.0, 13946.5], [1170.0, 14312.0], [1194.0, 13554.0], [1186.0, 14296.0], [1218.0, 14263.0], [1254.0, 13480.0], [1278.0, 17656.0], [1246.0, 14226.0], [1222.0, 14256.0], [1226.0, 13517.0], [1242.0, 16842.0], [1238.0, 13869.0], [1234.0, 13515.0], [1258.0, 13475.0], [1250.0, 14214.0], [1282.0, 14197.0], [1310.0, 17621.0], [1314.0, 14154.0], [1290.0, 13460.0], [1286.0, 15925.0], [1306.0, 17624.0], [1302.0, 14238.5], [1298.0, 16793.0], [1530.0, 14759.0], [1534.0, 14758.333333333334], [1506.0, 13401.0], [1514.0, 17591.0], [1526.0, 15580.666666666666], [1522.0, 14649.4], [1502.0, 11640.0], [1494.0, 16745.0], [1518.0, 17591.0], [1550.0, 78.0], [1570.0, 15455.0], [1546.0, 14131.0], [1566.0, 11999.5], [1562.0, 14614.0], [1558.0, 13734.0], [1554.0, 13288.0], [1638.0, 92.0], [1662.0, 13409.0], [1646.0, 92.0], [1650.0, 91.0], [1610.0, 117.5], [1606.0, 118.0], [1618.0, 96.0], [1722.0, 22288.0], [1702.0, 9581.0], [1698.0, 9725.0], [1710.0, 9579.0], [1718.0, 9856.0], [1678.0, 10452.0], [1674.0, 13398.0], [1666.0, 12412.0], [1694.0, 9601.0], [1686.0, 8431.0], [1682.0, 132.0], [1790.0, 9549.0], [1762.0, 15904.0], [1766.0, 9636.0], [1774.0, 9826.0], [1786.0, 9819.0], [1730.0, 13865.666666666666], [1734.0, 16010.0], [1738.0, 9841.0], [1742.0, 22273.0], [1754.0, 9833.0], [1750.0, 9836.0], [1746.0, 9838.0], [1802.0, 9813.0], [1842.0, 9739.0], [1850.0, 9704.6], [1806.0, 9628.5], [1798.0, 9712.0], [1794.0, 9815.0], [1822.0, 9802.0], [1814.0, 9706.0], [1810.0, 9812.0], [1870.0, 9628.0], [1906.0, 9415.0], [1894.0, 9715.0], [1902.0, 15920.0], [1866.0, 9629.0], [1862.0, 13758.333333333334], [1858.0, 9745.0], [1886.0, 9716.0], [1882.0, 9615.0], [1978.0, 9287.0], [1934.0, 9503.0], [1930.0, 9606.0], [1926.0, 9607.0], [1946.0, 9593.0], [1942.0, 15813.5], [2046.0, 9041.0], [2018.0, 9244.0], [2022.0, 9239.0], [2026.0, 9055.0], [2030.0, 9234.0], [2042.0, 9210.0], [2038.0, 9219.0], [2034.0, 21759.0], [1994.0, 9286.0], [2010.0, 9335.777777777777], [2006.0, 9284.0], [2148.0, 4384.0], [2164.0, 6031.5], [2116.0, 7490.0], [2124.0, 20021.0], [2132.0, 19997.0], [2140.0, 7551.0], [2052.0, 8476.0], [2060.0, 8474.0], [2068.0, 8465.0], [2076.0, 20977.0], [2108.0, 13815.0], [2100.0, 10081.0], [2092.0, 10094.0], [2084.0, 20574.0], [2276.0, 6976.0], [2244.0, 9173.0], [2252.0, 6435.5], [2260.0, 7283.0], [2268.0, 16330.0], [2188.0, 7313.0], [2196.0, 7309.0], [2204.0, 7305.0], [2228.0, 7290.0], [2212.0, 16071.0], [2308.0, 13267.0], [2508.0, 6070.0], [2548.0, 118.0], [2444.0, 5515.0], [2436.0, 5516.0], [2468.0, 16263.0], [2636.0, 77.28571428571429], [2660.0, 75.0], [2580.0, 115.0], [2572.0, 115.0], [2796.0, 10736.0], [2788.0, 12093.0], [2764.0, 9211.0], [2772.0, 10752.0], [2812.0, 10665.0], [2692.0, 107.0], [2716.0, 101.0], [2748.0, 12114.0], [2740.0, 9229.0], [2732.0, 99.0], [2724.0, 100.0], [2940.0, 10252.5], [2884.0, 11926.0], [2892.0, 9857.0], [2900.0, 9078.0], [2908.0, 9332.666666666666], [2932.0, 8282.0], [2924.0, 9833.0], [2820.0, 8925.0], [2836.0, 12079.0], [2876.0, 8761.0], [2868.0, 10318.0], [2852.0, 11170.5], [2956.0, 11401.0], [2964.0, 11382.0], [2972.0, 11354.0], [2996.0, 146.5], [2988.0, 10502.5], [2157.0, 9559.0], [2149.0, 4382.0], [2125.0, 20012.0], [2117.0, 7490.0], [2141.0, 7551.0], [2173.0, 6471.0], [2077.0, 8440.0], [2069.0, 8461.0], [2061.0, 8471.0], [2053.0, 8476.0], [2101.0, 10077.0], [2285.0, 13099.0], [2245.0, 5589.0], [2261.0, 7283.0], [2293.0, 16303.333333333334], [2181.0, 7317.0], [2189.0, 7312.0], [2197.0, 5612.0], [2205.0, 11832.5], [2237.0, 7287.0], [2229.0, 7290.0], [2221.0, 7294.0], [2213.0, 5601.0], [2309.0, 7230.0], [2461.0, 61321.8], [2453.0, 10889.0], [2509.0, 9464.75], [2501.0, 5929.5], [2549.0, 118.5], [2445.0, 7211.5], [2437.0, 16268.0], [2477.0, 16261.0], [2469.0, 11878.0], [2669.0, 114.0], [2677.0, 113.0], [2661.0, 75.0], [2581.0, 114.33333333333334], [2797.0, 9188.0], [2805.0, 11382.5], [2757.0, 10662.5], [2765.0, 9211.0], [2789.0, 12378.0], [2749.0, 12400.0], [2733.0, 99.0], [2725.0, 100.0], [2925.0, 11468.0], [2941.0, 9816.0], [2893.0, 10673.5], [2901.0, 11485.0], [2917.0, 9837.0], [2821.0, 10470.0], [2829.0, 8915.0], [2845.0, 11176.0], [2877.0, 10303.0], [2853.0, 10352.0], [2949.0, 9032.5], [2957.0, 9953.5], [2965.0, 10971.75], [2997.0, 140.0], [1075.0, 13626.0], [1087.0, 13620.0], [1063.0, 14364.0], [1059.0, 13536.0], [1083.0, 14357.0], [1039.0, 10256.0], [1031.0, 10265.0], [1027.0, 11393.666666666666], [1055.0, 15686.0], [1051.0, 11938.5], [1043.0, 10254.0], [1071.0, 14360.0], [1147.0, 13589.0], [1151.0, 16786.0], [1123.0, 14335.0], [1127.0, 13600.0], [1131.0, 13598.0], [1143.0, 13591.0], [1103.0, 13612.0], [1099.0, 13614.0], [1095.0, 14349.0], [1119.0, 14337.0], [1115.0, 13605.0], [1111.0, 14340.0], [1107.0, 14344.0], [1135.0, 14329.0], [1203.0, 13550.0], [1211.0, 13731.5], [1187.0, 13562.0], [1207.0, 14282.0], [1183.0, 14300.0], [1159.0, 14316.0], [1167.0, 14313.0], [1163.0, 12700.5], [1179.0, 16918.0], [1175.0, 13061.0], [1195.0, 13554.0], [1191.0, 13924.0], [1227.0, 14250.0], [1271.0, 17380.666666666668], [1279.0, 14198.0], [1219.0, 11769.0], [1231.0, 13881.5], [1243.0, 13497.0], [1239.0, 14235.0], [1235.0, 16856.0], [1263.0, 13473.0], [1259.0, 17665.0], [1255.0, 13479.0], [1287.0, 17651.0], [1315.0, 14154.0], [1311.0, 17617.0], [1291.0, 15921.0], [1307.0, 17622.0], [1303.0, 16790.0], [1299.0, 16793.0], [1487.0, 13536.35294117647], [1531.0, 16744.0], [1507.0, 16745.333333333332], [1527.0, 15873.666666666666], [1503.0, 15762.124999999998], [1479.0, 17057.8], [1499.0, 16826.6], [1495.0, 14632.75], [1491.0, 16745.0], [1519.0, 15615.000000000002], [1515.0, 15188.214285714286], [1511.0, 15021.818181818184], [1547.0, 78.0], [1571.0, 15454.0], [1579.0, 13751.2], [1551.0, 77.0], [1539.0, 17251.2], [1567.0, 14464.0], [1563.0, 11269.0], [1559.0, 14615.0], [1555.0, 13286.0], [1659.0, 60.0], [1643.0, 92.0], [1655.0, 91.25], [1627.0, 93.0], [1611.0, 117.5], [1607.0, 119.0], [1723.0, 9586.0], [1719.0, 9572.0], [1727.0, 22283.0], [1699.0, 9583.0], [1703.0, 9865.0], [1707.0, 9722.0], [1711.0, 9579.0], [1715.0, 9862.0], [1679.0, 138.0], [1675.0, 12543.0], [1671.0, 11249.5], [1667.0, 9947.0], [1695.0, 9585.0], [1691.0, 15944.5], [1687.0, 8979.0], [1683.0, 9444.0], [1787.0, 9535.0], [1791.0, 9714.0], [1763.0, 9728.0], [1767.0, 9828.0], [1771.0, 16019.75], [1775.0, 22257.0], [1783.0, 9694.333333333334], [1779.0, 15989.0], [1759.0, 9832.5], [1731.0, 9850.0], [1739.0, 9841.0], [1743.0, 9555.0], [1755.0, 9833.0], [1751.0, 9836.0], [1747.0, 22270.0], [1795.0, 9815.0], [1831.0, 9801.0], [1835.0, 9800.0], [1843.0, 9688.0], [1823.0, 9802.0], [1819.0, 9804.5], [1815.0, 9706.0], [1811.0, 9710.0], [1839.0, 9799.5], [1907.0, 9411.0], [1911.0, 9695.0], [1891.0, 9716.0], [1895.0, 9618.5], [1903.0, 9661.2], [1871.0, 9729.0], [1867.0, 9730.0], [1863.0, 9632.0], [1859.0, 9559.0], [1883.0, 9716.0], [1947.0, 9593.0], [1931.0, 9503.0], [1923.0, 22125.0], [1943.0, 9311.0], [1939.0, 9603.5], [2043.0, 9210.0], [2047.0, 9206.0], [2019.0, 9061.0], [2023.0, 9239.0], [2027.0, 9072.0], [2031.0, 9230.0], [2039.0, 9053.0], [2035.0, 9222.0], [2015.0, 9162.0], [1991.0, 9286.0], [2003.0, 9467.0], [2158.0, 7327.0], [2166.0, 7325.5], [2126.0, 7576.0], [2118.0, 7490.0], [2134.0, 9526.0], [2142.0, 13768.5], [2110.0, 7497.5], [2054.0, 8475.0], [2062.0, 8470.0], [2070.0, 8564.0], [2078.0, 8441.0], [2102.0, 10077.0], [2302.0, 10910.0], [2270.0, 11795.0], [2278.0, 72219.5], [2238.0, 6998.0], [2206.0, 138909.0], [2222.0, 7293.0], [2214.0, 16353.0], [2310.0, 7226.0], [2462.0, 138813.0], [2502.0, 14445.4], [2454.0, 16263.5], [2446.0, 7211.0], [2478.0, 10224.666666666668], [2510.0, 1971.0], [2662.0, 75.0], [2686.0, 109.0], [2678.0, 112.0], [2582.0, 887.0], [2574.0, 115.12500000000001], [2566.0, 117.0], [2814.0, 11482.5], [2758.0, 9215.0], [2766.0, 12103.0], [2774.0, 12099.0], [2782.0, 11322.333333333334], [2806.0, 10693.0], [2798.0, 12079.0], [2790.0, 10741.0], [2694.0, 107.0], [2750.0, 12114.0], [2742.0, 10674.5], [2734.0, 99.0], [2726.0, 100.0], [2918.0, 9064.5], [2942.0, 9815.0], [2886.0, 9516.5], [2894.0, 9082.5], [2910.0, 11479.5], [2822.0, 8924.0], [2830.0, 8915.0], [2838.0, 9672.0], [2846.0, 10357.0], [2878.0, 11935.0], [2870.0, 9545.5], [2862.0, 11142.0], [2854.0, 10352.0], [2958.0, 8994.0], [2950.0, 10587.0], [2966.0, 8197.0], [2974.0, 9718.333333333334], [2990.0, 10501.0], [2159.0, 16098.0], [2167.0, 7322.0], [2175.0, 10857.5], [2127.0, 7574.0], [2135.0, 19994.5], [2143.0, 7548.0], [2151.0, 2596.0], [2079.0, 8440.0], [2071.0, 8461.0], [2063.0, 21005.0], [2055.0, 8475.0], [2111.0, 7496.0], [2103.0, 6808.0], [2095.0, 12928.666666666666], [2087.0, 13592.333333333334], [2295.0, 16301.5], [2247.0, 6436.5], [2255.0, 13320.666666666666], [2263.0, 16336.5], [2271.0, 7267.0], [2279.0, 7265.0], [2239.0, 16342.0], [2191.0, 6866.5], [2199.0, 6460.0], [2231.0, 7289.0], [2447.0, 5514.0], [2551.0, 118.0], [2487.0, 9398.0], [2479.0, 7206.0], [2511.0, 1971.0], [2679.0, 112.0], [2639.0, 77.0], [2663.0, 75.0], [2583.0, 883.0], [2575.0, 115.0], [2759.0, 9214.0], [2815.0, 10664.0], [2775.0, 10651.5], [2799.0, 12365.0], [2751.0, 12113.0], [2719.0, 100.0], [2727.0, 100.0], [2919.0, 9837.0], [2935.0, 9210.0], [2895.0, 9901.0], [2903.0, 10666.0], [2911.0, 9872.0], [2927.0, 8286.333333333334], [2879.0, 10298.0], [2823.0, 12103.0], [2839.0, 12078.0], [2847.0, 11991.0], [2871.0, 11666.0], [2863.0, 9552.0], [2855.0, 11983.0], [2951.0, 9166.0], [2959.0, 11401.0], [2967.0, 9742.0], [2975.0, 9717.0], [2991.0, 10496.0], [2983.0, 9944.57142857143], [1.0, 100082.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[2900.9396031252754, 9439.509278167448]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 3000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 3805.2, "minX": 1.68289818E12, "maxY": 142888.68333333332, "series": [{"data": [[1.68289824E12, 109279.2], [1.68289842E12, 92441.06666666667], [1.6828983E12, 142888.68333333332], [1.68289848E12, 26778.316666666666], [1.68289818E12, 24345.95], [1.68289836E12, 133706.6], [1.68289854E12, 5466.333333333333]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.68289824E12, 75180.0], [1.68289842E12, 66570.0], [1.6828983E12, 99985.2], [1.68289848E12, 20437.2], [1.68289818E12, 18202.8], [1.68289836E12, 92962.8], [1.68289854E12, 3805.2]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68289854E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 4539.016277602544, "minX": 1.68289818E12, "maxY": 94259.41942604858, "series": [{"data": [[1.68289824E12, 9631.954550481014], [1.68289842E12, 4539.016277602544], [1.6828983E12, 12976.360033514851], [1.68289848E12, 11951.927250308241], [1.68289818E12, 10898.878172588835], [1.68289836E12, 4679.706290555155], [1.68289854E12, 94259.41942604858]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68289854E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 4501.252793799569, "minX": 1.68289818E12, "maxY": 94259.39735099336, "series": [{"data": [[1.68289824E12, 9120.112130930029], [1.68289842E12, 4539.008706624596], [1.6828983E12, 12930.630247172176], [1.68289848E12, 11951.922729140988], [1.68289818E12, 10898.81218274113], [1.68289836E12, 4501.252793799569], [1.68289854E12, 94259.39735099336]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68289854E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.4657836644591612, "minX": 1.68289818E12, "maxY": 5905.875324675313, "series": [{"data": [[1.68289824E12, 933.7381399977894], [1.68289842E12, 393.26069400630973], [1.6828983E12, 5905.875324675313], [1.68289848E12, 367.68105219893187], [1.68289818E12, 6.56945085371482], [1.68289836E12, 1665.9259192501659], [1.68289854E12, 0.4657836644591612]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68289854E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 10.0, "minX": 1.68289818E12, "maxY": 164825.0, "series": [{"data": [[1.68289824E12, 89949.0], [1.68289842E12, 140726.0], [1.6828983E12, 140249.0], [1.68289848E12, 138909.0], [1.68289818E12, 36781.0], [1.68289836E12, 164825.0], [1.68289854E12, 100142.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.68289824E12, 23663.0], [1.68289842E12, 10287.0], [1.6828983E12, 27563.0], [1.68289848E12, 16790.6], [1.68289818E12, 21481.0], [1.68289836E12, 6839.0], [1.68289854E12, 100135.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.68289824E12, 70482.49], [1.68289842E12, 66976.0], [1.6828983E12, 131633.88], [1.68289848E12, 45564.66], [1.68289818E12, 32687.32], [1.68289836E12, 100034.0], [1.68289854E12, 100142.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.68289824E12, 48598.45], [1.68289842E12, 20366.399999999994], [1.6828983E12, 100248.8], [1.68289848E12, 22132.1], [1.68289818E12, 25356.6], [1.68289836E12, 20449.400000000005], [1.68289854E12, 100139.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.68289824E12, 14.0], [1.68289842E12, 11.0], [1.6828983E12, 13.0], [1.68289848E12, 60.0], [1.68289818E12, 33.0], [1.68289836E12, 10.0], [1.68289854E12, 52541.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.68289824E12, 148.0], [1.68289842E12, 121.0], [1.6828983E12, 117.0], [1.68289848E12, 12119.0], [1.68289818E12, 9996.0], [1.68289836E12, 113.0], [1.68289854E12, 100091.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68289854E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 73.0, "minX": 1.0, "maxY": 119750.0, "series": [{"data": [[2.0, 55067.0], [4.0, 17896.0], [5.0, 12819.0], [6.0, 21261.0], [7.0, 4611.5], [8.0, 7505.5], [9.0, 7955.0], [10.0, 19986.0], [11.0, 7377.5], [12.0, 66152.0], [13.0, 4133.5], [15.0, 32072.0], [16.0, 95.0], [17.0, 12556.0], [18.0, 98.0], [20.0, 13191.0], [22.0, 73729.0], [25.0, 100141.0], [26.0, 7407.5], [27.0, 100108.0], [28.0, 18391.0], [30.0, 2260.5], [35.0, 65773.0], [34.0, 57195.0], [37.0, 4440.0], [36.0, 52837.0], [39.0, 6896.5], [41.0, 12408.0], [40.0, 83413.0], [43.0, 14328.0], [42.0, 100135.0], [44.0, 73.0], [47.0, 24889.0], [52.0, 17474.5], [54.0, 81612.0], [58.0, 9203.0], [64.0, 8446.5], [79.0, 100098.0], [80.0, 66990.5], [89.0, 87.0], [91.0, 115.0], [94.0, 81.0], [95.0, 3869.0], [102.0, 116.0], [105.0, 120.0], [107.0, 2786.0], [106.0, 117.0], [116.0, 106.5], [118.0, 107.0], [121.0, 9207.0], [126.0, 9081.0], [127.0, 116.0], [124.0, 121.5], [133.0, 79.0], [137.0, 95.0], [136.0, 87.0], [138.0, 110.0], [141.0, 95.0], [142.0, 6321.5], [148.0, 99.0], [151.0, 96.0], [150.0, 105.0], [149.0, 108.0], [147.0, 10666.0], [156.0, 99.0], [158.0, 103.5], [154.0, 113.0], [157.0, 113.0], [153.0, 106.0], [152.0, 108.5], [155.0, 112.0], [162.0, 7949.5], [163.0, 98.0], [160.0, 80.0], [161.0, 7292.0], [175.0, 82.0], [168.0, 137.5], [169.0, 92.0], [180.0, 4156.0], [188.0, 122.0], [191.0, 104.0], [209.0, 7330.0], [219.0, 86.0], [217.0, 126.0], [226.0, 92.0], [231.0, 120.0], [236.0, 100.0], [241.0, 1705.0], [245.0, 108.0], [246.0, 3421.0], [253.0, 88.0], [263.0, 7312.0], [256.0, 21362.0], [259.0, 108.0], [271.0, 7203.0], [278.0, 97.0], [287.0, 106.0], [298.0, 546.0], [303.0, 93.0], [301.0, 99.0], [302.0, 111.0], [300.0, 267.0], [299.0, 123.0], [304.0, 118.0], [310.0, 114.0], [308.0, 106.0], [318.0, 108.0], [335.0, 105.0], [327.0, 9695.0], [349.0, 119.0], [338.0, 96.0], [339.0, 107.0], [356.0, 86.0], [354.0, 9847.0], [357.0, 119.0], [362.0, 110.5], [383.0, 97.0], [370.0, 4301.5], [399.0, 147.0], [408.0, 168.0], [414.0, 270.0], [431.0, 178.0], [442.0, 18318.0], [435.0, 110.0], [444.0, 8368.0], [448.0, 20898.0], [455.0, 20330.0], [452.0, 105.0], [454.0, 99.0], [449.0, 124.0], [453.0, 167.0], [450.0, 103.0], [469.0, 161.0], [464.0, 18940.0], [485.0, 21314.0], [483.0, 120.0], [489.0, 107.0], [490.0, 13401.0], [533.0, 17385.0], [522.0, 16857.0], [551.0, 105.0], [591.0, 147.0], [604.0, 188.0], [633.0, 17355.0], [609.0, 135.0], [663.0, 16746.0], [768.0, 18052.0], [1.0, 49942.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[263.0, 69906.0], [136.0, 13898.0], [18.0, 15421.0], [354.0, 13738.0], [180.0, 64726.0], [47.0, 13850.0], [191.0, 68284.0], [6.0, 119750.0], [54.0, 77562.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 768.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 100141.0, "series": [{"data": [[2.0, 55067.0], [4.0, 17896.0], [5.0, 12819.0], [6.0, 21261.0], [7.0, 4611.5], [8.0, 7505.5], [9.0, 7955.0], [10.0, 19986.0], [11.0, 7377.5], [12.0, 66152.0], [13.0, 4133.5], [15.0, 32072.0], [16.0, 95.0], [17.0, 12556.0], [18.0, 98.0], [20.0, 13191.0], [22.0, 73729.0], [25.0, 100141.0], [26.0, 7407.5], [27.0, 100108.0], [28.0, 18391.0], [30.0, 2260.5], [35.0, 65773.0], [34.0, 57195.0], [37.0, 4440.0], [36.0, 52837.0], [39.0, 6896.5], [41.0, 12408.0], [40.0, 83413.0], [43.0, 14328.0], [42.0, 100135.0], [44.0, 73.0], [47.0, 24889.0], [52.0, 17474.5], [54.0, 81612.0], [58.0, 9203.0], [64.0, 8446.5], [79.0, 100098.0], [80.0, 66990.5], [89.0, 87.0], [91.0, 115.0], [94.0, 81.0], [95.0, 3869.0], [102.0, 116.0], [105.0, 120.0], [107.0, 2786.0], [106.0, 117.0], [116.0, 106.5], [118.0, 107.0], [121.0, 9207.0], [126.0, 9081.0], [127.0, 116.0], [124.0, 121.5], [133.0, 79.0], [137.0, 95.0], [136.0, 87.0], [138.0, 110.0], [141.0, 95.0], [142.0, 6321.5], [148.0, 99.0], [151.0, 96.0], [150.0, 105.0], [149.0, 108.0], [147.0, 10666.0], [156.0, 99.0], [158.0, 103.0], [154.0, 113.0], [157.0, 113.0], [153.0, 106.0], [152.0, 108.5], [155.0, 112.0], [162.0, 7949.5], [163.0, 98.0], [160.0, 80.0], [161.0, 7292.0], [175.0, 82.0], [168.0, 137.5], [169.0, 92.0], [180.0, 4156.0], [188.0, 122.0], [191.0, 104.0], [209.0, 7330.0], [219.0, 86.0], [217.0, 126.0], [226.0, 92.0], [231.0, 120.0], [236.0, 100.0], [241.0, 1705.0], [245.0, 108.0], [246.0, 3421.0], [253.0, 88.0], [263.0, 7312.0], [256.0, 21362.0], [259.0, 108.0], [271.0, 7203.0], [278.0, 97.0], [287.0, 106.0], [298.0, 546.0], [303.0, 93.0], [301.0, 99.0], [302.0, 111.0], [300.0, 267.0], [299.0, 123.0], [304.0, 118.0], [310.0, 114.0], [308.0, 106.0], [318.0, 108.0], [335.0, 105.0], [327.0, 9695.0], [349.0, 119.0], [338.0, 96.0], [339.0, 107.0], [356.0, 86.0], [354.0, 9847.0], [357.0, 119.0], [362.0, 110.5], [383.0, 97.0], [370.0, 4301.5], [399.0, 147.0], [408.0, 168.0], [414.0, 270.0], [431.0, 178.0], [442.0, 18318.0], [435.0, 110.0], [444.0, 8368.0], [448.0, 20898.0], [455.0, 20330.0], [452.0, 105.0], [454.0, 99.0], [449.0, 124.0], [453.0, 167.0], [450.0, 103.0], [469.0, 161.0], [464.0, 18940.0], [485.0, 21314.0], [483.0, 120.0], [489.0, 107.0], [490.0, 13401.0], [533.0, 17385.0], [522.0, 16857.0], [551.0, 105.0], [591.0, 147.0], [604.0, 188.0], [633.0, 17355.0], [609.0, 135.0], [663.0, 16746.0], [768.0, 18052.0], [1.0, 49942.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[263.0, 0.0], [136.0, 0.0], [18.0, 0.0], [354.0, 0.0], [180.0, 0.0], [47.0, 0.0], [191.0, 0.0], [6.0, 0.0], [54.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 768.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 38.36666666666667, "minX": 1.68289818E12, "maxY": 175.0, "series": [{"data": [[1.68289824E12, 152.5], [1.68289842E12, 137.5], [1.6828983E12, 172.5], [1.68289848E12, 38.36666666666667], [1.68289818E12, 75.0], [1.68289836E12, 175.0]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68289848E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.48333333333333334, "minX": 1.68289818E12, "maxY": 198.38333333333333, "series": [{"data": [[1.68289824E12, 149.16666666666666], [1.68289842E12, 132.08333333333334], [1.6828983E12, 198.38333333333333], [1.68289848E12, 40.55], [1.68289818E12, 36.11666666666667], [1.68289836E12, 184.45], [1.68289854E12, 7.55]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.68289824E12, 1.55], [1.6828983E12, 0.5333333333333333], [1.68289836E12, 0.48333333333333334]], "isOverall": false, "label": "Non HTTP response code: java.net.SocketException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68289854E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.48333333333333334, "minX": 1.68289818E12, "maxY": 198.38333333333333, "series": [{"data": [[1.68289824E12, 149.16666666666666], [1.68289842E12, 132.08333333333334], [1.6828983E12, 198.38333333333333], [1.68289848E12, 40.55], [1.68289818E12, 36.11666666666667], [1.68289836E12, 184.45], [1.68289854E12, 7.55]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.68289824E12, 1.55], [1.6828983E12, 0.5333333333333333], [1.68289836E12, 0.48333333333333334]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68289854E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.48333333333333334, "minX": 1.68289818E12, "maxY": 198.38333333333333, "series": [{"data": [[1.68289824E12, 149.16666666666666], [1.68289842E12, 132.08333333333334], [1.6828983E12, 198.38333333333333], [1.68289848E12, 40.55], [1.68289818E12, 36.11666666666667], [1.68289836E12, 184.45], [1.68289854E12, 7.55]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.68289824E12, 1.55], [1.6828983E12, 0.5333333333333333], [1.68289836E12, 0.48333333333333334]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68289854E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

