/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 2330.0, "minX": 0.0, "maxY": 6629.0, "series": [{"data": [[0.0, 2330.0], [0.1, 2413.0], [0.2, 2425.0], [0.3, 2490.0], [0.4, 2507.0], [0.5, 2519.0], [0.6, 2526.0], [0.7, 2529.0], [0.8, 2536.0], [0.9, 2538.0], [1.0, 2550.0], [1.1, 2552.0], [1.2, 2557.0], [1.3, 2559.0], [1.4, 2559.0], [1.5, 2561.0], [1.6, 2565.0], [1.7, 2568.0], [1.8, 2572.0], [1.9, 2573.0], [2.0, 2576.0], [2.1, 2578.0], [2.2, 2579.0], [2.3, 2580.0], [2.4, 2582.0], [2.5, 2586.0], [2.6, 2587.0], [2.7, 2595.0], [2.8, 2596.0], [2.9, 2598.0], [3.0, 2601.0], [3.1, 2603.0], [3.2, 2606.0], [3.3, 2606.0], [3.4, 2608.0], [3.5, 2609.0], [3.6, 2609.0], [3.7, 2613.0], [3.8, 2614.0], [3.9, 2615.0], [4.0, 2617.0], [4.1, 2617.0], [4.2, 2620.0], [4.3, 2621.0], [4.4, 2624.0], [4.5, 2625.0], [4.6, 2627.0], [4.7, 2628.0], [4.8, 2629.0], [4.9, 2629.0], [5.0, 2632.0], [5.1, 2633.0], [5.2, 2638.0], [5.3, 2641.0], [5.4, 2641.0], [5.5, 2642.0], [5.6, 2644.0], [5.7, 2646.0], [5.8, 2646.0], [5.9, 2650.0], [6.0, 2650.0], [6.1, 2651.0], [6.2, 2652.0], [6.3, 2653.0], [6.4, 2655.0], [6.5, 2655.0], [6.6, 2656.0], [6.7, 2656.0], [6.8, 2657.0], [6.9, 2658.0], [7.0, 2658.0], [7.1, 2659.0], [7.2, 2661.0], [7.3, 2662.0], [7.4, 2663.0], [7.5, 2664.0], [7.6, 2665.0], [7.7, 2666.0], [7.8, 2666.0], [7.9, 2666.0], [8.0, 2667.0], [8.1, 2667.0], [8.2, 2669.0], [8.3, 2669.0], [8.4, 2670.0], [8.5, 2671.0], [8.6, 2674.0], [8.7, 2674.0], [8.8, 2675.0], [8.9, 2677.0], [9.0, 2678.0], [9.1, 2678.0], [9.2, 2679.0], [9.3, 2680.0], [9.4, 2681.0], [9.5, 2681.0], [9.6, 2682.0], [9.7, 2683.0], [9.8, 2683.0], [9.9, 2684.0], [10.0, 2684.0], [10.1, 2686.0], [10.2, 2688.0], [10.3, 2689.0], [10.4, 2689.0], [10.5, 2690.0], [10.6, 2691.0], [10.7, 2691.0], [10.8, 2691.0], [10.9, 2692.0], [11.0, 2693.0], [11.1, 2695.0], [11.2, 2695.0], [11.3, 2696.0], [11.4, 2697.0], [11.5, 2697.0], [11.6, 2697.0], [11.7, 2698.0], [11.8, 2698.0], [11.9, 2699.0], [12.0, 2699.0], [12.1, 2699.0], [12.2, 2700.0], [12.3, 2701.0], [12.4, 2701.0], [12.5, 2701.0], [12.6, 2702.0], [12.7, 2703.0], [12.8, 2704.0], [12.9, 2704.0], [13.0, 2704.0], [13.1, 2704.0], [13.2, 2705.0], [13.3, 2706.0], [13.4, 2707.0], [13.5, 2707.0], [13.6, 2708.0], [13.7, 2708.0], [13.8, 2709.0], [13.9, 2710.0], [14.0, 2710.0], [14.1, 2710.0], [14.2, 2711.0], [14.3, 2712.0], [14.4, 2712.0], [14.5, 2713.0], [14.6, 2713.0], [14.7, 2715.0], [14.8, 2715.0], [14.9, 2715.0], [15.0, 2716.0], [15.1, 2717.0], [15.2, 2718.0], [15.3, 2718.0], [15.4, 2719.0], [15.5, 2720.0], [15.6, 2720.0], [15.7, 2720.0], [15.8, 2721.0], [15.9, 2721.0], [16.0, 2721.0], [16.1, 2722.0], [16.2, 2723.0], [16.3, 2723.0], [16.4, 2724.0], [16.5, 2724.0], [16.6, 2724.0], [16.7, 2725.0], [16.8, 2725.0], [16.9, 2725.0], [17.0, 2725.0], [17.1, 2726.0], [17.2, 2726.0], [17.3, 2726.0], [17.4, 2727.0], [17.5, 2727.0], [17.6, 2728.0], [17.7, 2728.0], [17.8, 2728.0], [17.9, 2729.0], [18.0, 2729.0], [18.1, 2729.0], [18.2, 2730.0], [18.3, 2730.0], [18.4, 2730.0], [18.5, 2731.0], [18.6, 2731.0], [18.7, 2732.0], [18.8, 2732.0], [18.9, 2732.0], [19.0, 2732.0], [19.1, 2732.0], [19.2, 2733.0], [19.3, 2733.0], [19.4, 2734.0], [19.5, 2734.0], [19.6, 2734.0], [19.7, 2735.0], [19.8, 2736.0], [19.9, 2736.0], [20.0, 2736.0], [20.1, 2737.0], [20.2, 2737.0], [20.3, 2737.0], [20.4, 2738.0], [20.5, 2738.0], [20.6, 2739.0], [20.7, 2739.0], [20.8, 2739.0], [20.9, 2740.0], [21.0, 2740.0], [21.1, 2740.0], [21.2, 2741.0], [21.3, 2742.0], [21.4, 2742.0], [21.5, 2742.0], [21.6, 2742.0], [21.7, 2742.0], [21.8, 2742.0], [21.9, 2743.0], [22.0, 2743.0], [22.1, 2744.0], [22.2, 2744.0], [22.3, 2744.0], [22.4, 2745.0], [22.5, 2745.0], [22.6, 2746.0], [22.7, 2746.0], [22.8, 2746.0], [22.9, 2747.0], [23.0, 2747.0], [23.1, 2748.0], [23.2, 2748.0], [23.3, 2748.0], [23.4, 2749.0], [23.5, 2750.0], [23.6, 2750.0], [23.7, 2750.0], [23.8, 2751.0], [23.9, 2751.0], [24.0, 2751.0], [24.1, 2752.0], [24.2, 2752.0], [24.3, 2753.0], [24.4, 2753.0], [24.5, 2753.0], [24.6, 2753.0], [24.7, 2753.0], [24.8, 2754.0], [24.9, 2754.0], [25.0, 2754.0], [25.1, 2755.0], [25.2, 2756.0], [25.3, 2756.0], [25.4, 2757.0], [25.5, 2758.0], [25.6, 2758.0], [25.7, 2759.0], [25.8, 2759.0], [25.9, 2759.0], [26.0, 2760.0], [26.1, 2760.0], [26.2, 2761.0], [26.3, 2761.0], [26.4, 2761.0], [26.5, 2762.0], [26.6, 2762.0], [26.7, 2762.0], [26.8, 2762.0], [26.9, 2763.0], [27.0, 2764.0], [27.1, 2764.0], [27.2, 2764.0], [27.3, 2764.0], [27.4, 2765.0], [27.5, 2765.0], [27.6, 2765.0], [27.7, 2765.0], [27.8, 2766.0], [27.9, 2766.0], [28.0, 2767.0], [28.1, 2768.0], [28.2, 2768.0], [28.3, 2770.0], [28.4, 2770.0], [28.5, 2770.0], [28.6, 2771.0], [28.7, 2771.0], [28.8, 2771.0], [28.9, 2771.0], [29.0, 2772.0], [29.1, 2772.0], [29.2, 2772.0], [29.3, 2772.0], [29.4, 2772.0], [29.5, 2772.0], [29.6, 2773.0], [29.7, 2773.0], [29.8, 2773.0], [29.9, 2775.0], [30.0, 2775.0], [30.1, 2776.0], [30.2, 2777.0], [30.3, 2777.0], [30.4, 2777.0], [30.5, 2778.0], [30.6, 2778.0], [30.7, 2779.0], [30.8, 2779.0], [30.9, 2780.0], [31.0, 2780.0], [31.1, 2780.0], [31.2, 2780.0], [31.3, 2781.0], [31.4, 2781.0], [31.5, 2782.0], [31.6, 2782.0], [31.7, 2782.0], [31.8, 2783.0], [31.9, 2783.0], [32.0, 2784.0], [32.1, 2784.0], [32.2, 2784.0], [32.3, 2784.0], [32.4, 2785.0], [32.5, 2785.0], [32.6, 2785.0], [32.7, 2786.0], [32.8, 2786.0], [32.9, 2787.0], [33.0, 2787.0], [33.1, 2788.0], [33.2, 2788.0], [33.3, 2788.0], [33.4, 2789.0], [33.5, 2789.0], [33.6, 2789.0], [33.7, 2789.0], [33.8, 2789.0], [33.9, 2790.0], [34.0, 2790.0], [34.1, 2791.0], [34.2, 2791.0], [34.3, 2791.0], [34.4, 2791.0], [34.5, 2792.0], [34.6, 2792.0], [34.7, 2793.0], [34.8, 2793.0], [34.9, 2793.0], [35.0, 2794.0], [35.1, 2794.0], [35.2, 2795.0], [35.3, 2795.0], [35.4, 2795.0], [35.5, 2795.0], [35.6, 2795.0], [35.7, 2796.0], [35.8, 2796.0], [35.9, 2796.0], [36.0, 2796.0], [36.1, 2797.0], [36.2, 2797.0], [36.3, 2797.0], [36.4, 2797.0], [36.5, 2798.0], [36.6, 2798.0], [36.7, 2798.0], [36.8, 2799.0], [36.9, 2799.0], [37.0, 2799.0], [37.1, 2800.0], [37.2, 2800.0], [37.3, 2800.0], [37.4, 2800.0], [37.5, 2801.0], [37.6, 2801.0], [37.7, 2801.0], [37.8, 2802.0], [37.9, 2802.0], [38.0, 2803.0], [38.1, 2803.0], [38.2, 2804.0], [38.3, 2805.0], [38.4, 2805.0], [38.5, 2805.0], [38.6, 2805.0], [38.7, 2806.0], [38.8, 2806.0], [38.9, 2806.0], [39.0, 2807.0], [39.1, 2807.0], [39.2, 2807.0], [39.3, 2807.0], [39.4, 2808.0], [39.5, 2808.0], [39.6, 2808.0], [39.7, 2809.0], [39.8, 2809.0], [39.9, 2810.0], [40.0, 2810.0], [40.1, 2810.0], [40.2, 2810.0], [40.3, 2810.0], [40.4, 2810.0], [40.5, 2810.0], [40.6, 2811.0], [40.7, 2811.0], [40.8, 2811.0], [40.9, 2811.0], [41.0, 2812.0], [41.1, 2812.0], [41.2, 2812.0], [41.3, 2812.0], [41.4, 2813.0], [41.5, 2813.0], [41.6, 2813.0], [41.7, 2814.0], [41.8, 2814.0], [41.9, 2814.0], [42.0, 2814.0], [42.1, 2814.0], [42.2, 2814.0], [42.3, 2815.0], [42.4, 2815.0], [42.5, 2816.0], [42.6, 2816.0], [42.7, 2816.0], [42.8, 2817.0], [42.9, 2817.0], [43.0, 2817.0], [43.1, 2818.0], [43.2, 2818.0], [43.3, 2818.0], [43.4, 2819.0], [43.5, 2819.0], [43.6, 2819.0], [43.7, 2820.0], [43.8, 2820.0], [43.9, 2820.0], [44.0, 2820.0], [44.1, 2820.0], [44.2, 2821.0], [44.3, 2821.0], [44.4, 2821.0], [44.5, 2821.0], [44.6, 2822.0], [44.7, 2822.0], [44.8, 2822.0], [44.9, 2823.0], [45.0, 2823.0], [45.1, 2824.0], [45.2, 2824.0], [45.3, 2825.0], [45.4, 2825.0], [45.5, 2825.0], [45.6, 2825.0], [45.7, 2825.0], [45.8, 2826.0], [45.9, 2826.0], [46.0, 2826.0], [46.1, 2827.0], [46.2, 2827.0], [46.3, 2827.0], [46.4, 2827.0], [46.5, 2828.0], [46.6, 2828.0], [46.7, 2828.0], [46.8, 2828.0], [46.9, 2829.0], [47.0, 2829.0], [47.1, 2830.0], [47.2, 2830.0], [47.3, 2830.0], [47.4, 2831.0], [47.5, 2831.0], [47.6, 2831.0], [47.7, 2831.0], [47.8, 2832.0], [47.9, 2832.0], [48.0, 2833.0], [48.1, 2833.0], [48.2, 2833.0], [48.3, 2833.0], [48.4, 2834.0], [48.5, 2834.0], [48.6, 2835.0], [48.7, 2835.0], [48.8, 2836.0], [48.9, 2836.0], [49.0, 2837.0], [49.1, 2837.0], [49.2, 2838.0], [49.3, 2838.0], [49.4, 2838.0], [49.5, 2839.0], [49.6, 2839.0], [49.7, 2839.0], [49.8, 2839.0], [49.9, 2840.0], [50.0, 2840.0], [50.1, 2841.0], [50.2, 2841.0], [50.3, 2841.0], [50.4, 2841.0], [50.5, 2841.0], [50.6, 2842.0], [50.7, 2842.0], [50.8, 2842.0], [50.9, 2842.0], [51.0, 2843.0], [51.1, 2843.0], [51.2, 2844.0], [51.3, 2844.0], [51.4, 2844.0], [51.5, 2845.0], [51.6, 2846.0], [51.7, 2846.0], [51.8, 2846.0], [51.9, 2847.0], [52.0, 2847.0], [52.1, 2847.0], [52.2, 2847.0], [52.3, 2847.0], [52.4, 2847.0], [52.5, 2848.0], [52.6, 2848.0], [52.7, 2849.0], [52.8, 2849.0], [52.9, 2849.0], [53.0, 2849.0], [53.1, 2849.0], [53.2, 2850.0], [53.3, 2850.0], [53.4, 2851.0], [53.5, 2851.0], [53.6, 2851.0], [53.7, 2851.0], [53.8, 2852.0], [53.9, 2852.0], [54.0, 2852.0], [54.1, 2852.0], [54.2, 2853.0], [54.3, 2853.0], [54.4, 2853.0], [54.5, 2853.0], [54.6, 2853.0], [54.7, 2853.0], [54.8, 2853.0], [54.9, 2854.0], [55.0, 2854.0], [55.1, 2855.0], [55.2, 2855.0], [55.3, 2855.0], [55.4, 2855.0], [55.5, 2855.0], [55.6, 2856.0], [55.7, 2856.0], [55.8, 2856.0], [55.9, 2856.0], [56.0, 2857.0], [56.1, 2857.0], [56.2, 2857.0], [56.3, 2857.0], [56.4, 2858.0], [56.5, 2858.0], [56.6, 2858.0], [56.7, 2858.0], [56.8, 2859.0], [56.9, 2859.0], [57.0, 2859.0], [57.1, 2860.0], [57.2, 2860.0], [57.3, 2860.0], [57.4, 2860.0], [57.5, 2860.0], [57.6, 2861.0], [57.7, 2861.0], [57.8, 2862.0], [57.9, 2862.0], [58.0, 2862.0], [58.1, 2862.0], [58.2, 2862.0], [58.3, 2862.0], [58.4, 2863.0], [58.5, 2863.0], [58.6, 2863.0], [58.7, 2863.0], [58.8, 2864.0], [58.9, 2864.0], [59.0, 2864.0], [59.1, 2865.0], [59.2, 2865.0], [59.3, 2866.0], [59.4, 2866.0], [59.5, 2867.0], [59.6, 2867.0], [59.7, 2867.0], [59.8, 2867.0], [59.9, 2868.0], [60.0, 2869.0], [60.1, 2869.0], [60.2, 2870.0], [60.3, 2870.0], [60.4, 2871.0], [60.5, 2871.0], [60.6, 2871.0], [60.7, 2871.0], [60.8, 2872.0], [60.9, 2873.0], [61.0, 2874.0], [61.1, 2874.0], [61.2, 2874.0], [61.3, 2875.0], [61.4, 2875.0], [61.5, 2875.0], [61.6, 2875.0], [61.7, 2876.0], [61.8, 2876.0], [61.9, 2877.0], [62.0, 2877.0], [62.1, 2878.0], [62.2, 2878.0], [62.3, 2879.0], [62.4, 2879.0], [62.5, 2880.0], [62.6, 2880.0], [62.7, 2880.0], [62.8, 2881.0], [62.9, 2881.0], [63.0, 2882.0], [63.1, 2883.0], [63.2, 2883.0], [63.3, 2883.0], [63.4, 2884.0], [63.5, 2884.0], [63.6, 2884.0], [63.7, 2884.0], [63.8, 2885.0], [63.9, 2885.0], [64.0, 2885.0], [64.1, 2885.0], [64.2, 2886.0], [64.3, 2886.0], [64.4, 2886.0], [64.5, 2887.0], [64.6, 2887.0], [64.7, 2887.0], [64.8, 2888.0], [64.9, 2888.0], [65.0, 2889.0], [65.1, 2889.0], [65.2, 2890.0], [65.3, 2891.0], [65.4, 2891.0], [65.5, 2891.0], [65.6, 2891.0], [65.7, 2892.0], [65.8, 2892.0], [65.9, 2892.0], [66.0, 2892.0], [66.1, 2892.0], [66.2, 2893.0], [66.3, 2893.0], [66.4, 2893.0], [66.5, 2894.0], [66.6, 2894.0], [66.7, 2895.0], [66.8, 2896.0], [66.9, 2896.0], [67.0, 2897.0], [67.1, 2898.0], [67.2, 2898.0], [67.3, 2898.0], [67.4, 2899.0], [67.5, 2900.0], [67.6, 2901.0], [67.7, 2901.0], [67.8, 2901.0], [67.9, 2902.0], [68.0, 2902.0], [68.1, 2902.0], [68.2, 2904.0], [68.3, 2905.0], [68.4, 2905.0], [68.5, 2906.0], [68.6, 2907.0], [68.7, 2907.0], [68.8, 2908.0], [68.9, 2908.0], [69.0, 2908.0], [69.1, 2909.0], [69.2, 2909.0], [69.3, 2910.0], [69.4, 2910.0], [69.5, 2911.0], [69.6, 2911.0], [69.7, 2912.0], [69.8, 2912.0], [69.9, 2913.0], [70.0, 2914.0], [70.1, 2915.0], [70.2, 2915.0], [70.3, 2916.0], [70.4, 2916.0], [70.5, 2916.0], [70.6, 2917.0], [70.7, 2918.0], [70.8, 2919.0], [70.9, 2920.0], [71.0, 2921.0], [71.1, 2921.0], [71.2, 2922.0], [71.3, 2922.0], [71.4, 2923.0], [71.5, 2924.0], [71.6, 2925.0], [71.7, 2925.0], [71.8, 2925.0], [71.9, 2926.0], [72.0, 2927.0], [72.1, 2928.0], [72.2, 2928.0], [72.3, 2928.0], [72.4, 2929.0], [72.5, 2929.0], [72.6, 2930.0], [72.7, 2930.0], [72.8, 2931.0], [72.9, 2931.0], [73.0, 2933.0], [73.1, 2934.0], [73.2, 2934.0], [73.3, 2935.0], [73.4, 2935.0], [73.5, 2935.0], [73.6, 2936.0], [73.7, 2936.0], [73.8, 2937.0], [73.9, 2937.0], [74.0, 2937.0], [74.1, 2938.0], [74.2, 2939.0], [74.3, 2940.0], [74.4, 2941.0], [74.5, 2941.0], [74.6, 2943.0], [74.7, 2944.0], [74.8, 2944.0], [74.9, 2946.0], [75.0, 2947.0], [75.1, 2949.0], [75.2, 2949.0], [75.3, 2950.0], [75.4, 2950.0], [75.5, 2951.0], [75.6, 2952.0], [75.7, 2952.0], [75.8, 2955.0], [75.9, 2956.0], [76.0, 2957.0], [76.1, 2959.0], [76.2, 2959.0], [76.3, 2962.0], [76.4, 2963.0], [76.5, 2964.0], [76.6, 2965.0], [76.7, 2966.0], [76.8, 2967.0], [76.9, 2967.0], [77.0, 2967.0], [77.1, 2967.0], [77.2, 2968.0], [77.3, 2969.0], [77.4, 2969.0], [77.5, 2970.0], [77.6, 2971.0], [77.7, 2972.0], [77.8, 2973.0], [77.9, 2973.0], [78.0, 2974.0], [78.1, 2975.0], [78.2, 2976.0], [78.3, 2978.0], [78.4, 2978.0], [78.5, 2983.0], [78.6, 2985.0], [78.7, 2987.0], [78.8, 2988.0], [78.9, 2989.0], [79.0, 2991.0], [79.1, 2993.0], [79.2, 2995.0], [79.3, 2998.0], [79.4, 2999.0], [79.5, 3000.0], [79.6, 3001.0], [79.7, 3002.0], [79.8, 3004.0], [79.9, 3004.0], [80.0, 3005.0], [80.1, 3006.0], [80.2, 3007.0], [80.3, 3009.0], [80.4, 3010.0], [80.5, 3012.0], [80.6, 3013.0], [80.7, 3013.0], [80.8, 3015.0], [80.9, 3017.0], [81.0, 3019.0], [81.1, 3020.0], [81.2, 3022.0], [81.3, 3023.0], [81.4, 3025.0], [81.5, 3026.0], [81.6, 3028.0], [81.7, 3030.0], [81.8, 3033.0], [81.9, 3037.0], [82.0, 3038.0], [82.1, 3044.0], [82.2, 3047.0], [82.3, 3048.0], [82.4, 3051.0], [82.5, 3054.0], [82.6, 3056.0], [82.7, 3058.0], [82.8, 3059.0], [82.9, 3063.0], [83.0, 3064.0], [83.1, 3067.0], [83.2, 3070.0], [83.3, 3070.0], [83.4, 3073.0], [83.5, 3074.0], [83.6, 3078.0], [83.7, 3079.0], [83.8, 3081.0], [83.9, 3086.0], [84.0, 3087.0], [84.1, 3099.0], [84.2, 3102.0], [84.3, 3104.0], [84.4, 3105.0], [84.5, 3109.0], [84.6, 3111.0], [84.7, 3114.0], [84.8, 3119.0], [84.9, 3120.0], [85.0, 3121.0], [85.1, 3123.0], [85.2, 3126.0], [85.3, 3129.0], [85.4, 3131.0], [85.5, 3134.0], [85.6, 3137.0], [85.7, 3144.0], [85.8, 3148.0], [85.9, 3152.0], [86.0, 3164.0], [86.1, 3169.0], [86.2, 3171.0], [86.3, 3174.0], [86.4, 3176.0], [86.5, 3185.0], [86.6, 3192.0], [86.7, 3195.0], [86.8, 3199.0], [86.9, 3205.0], [87.0, 3206.0], [87.1, 3210.0], [87.2, 3218.0], [87.3, 3221.0], [87.4, 3224.0], [87.5, 3229.0], [87.6, 3238.0], [87.7, 3241.0], [87.8, 3245.0], [87.9, 3246.0], [88.0, 3253.0], [88.1, 3254.0], [88.2, 3257.0], [88.3, 3263.0], [88.4, 3266.0], [88.5, 3275.0], [88.6, 3285.0], [88.7, 3290.0], [88.8, 3295.0], [88.9, 3300.0], [89.0, 3309.0], [89.1, 3310.0], [89.2, 3318.0], [89.3, 3325.0], [89.4, 3335.0], [89.5, 3349.0], [89.6, 3353.0], [89.7, 3357.0], [89.8, 3374.0], [89.9, 3379.0], [90.0, 3381.0], [90.1, 3388.0], [90.2, 3395.0], [90.3, 3398.0], [90.4, 3404.0], [90.5, 3412.0], [90.6, 3413.0], [90.7, 3416.0], [90.8, 3427.0], [90.9, 3439.0], [91.0, 3455.0], [91.1, 3462.0], [91.2, 3465.0], [91.3, 3474.0], [91.4, 3480.0], [91.5, 3485.0], [91.6, 3502.0], [91.7, 3508.0], [91.8, 3519.0], [91.9, 3526.0], [92.0, 3538.0], [92.1, 3547.0], [92.2, 3562.0], [92.3, 3569.0], [92.4, 3576.0], [92.5, 3591.0], [92.6, 3600.0], [92.7, 3617.0], [92.8, 3629.0], [92.9, 3647.0], [93.0, 3680.0], [93.1, 3682.0], [93.2, 3696.0], [93.3, 3697.0], [93.4, 3713.0], [93.5, 3737.0], [93.6, 3742.0], [93.7, 3758.0], [93.8, 3761.0], [93.9, 3782.0], [94.0, 3798.0], [94.1, 3821.0], [94.2, 3830.0], [94.3, 3840.0], [94.4, 3890.0], [94.5, 3896.0], [94.6, 3921.0], [94.7, 3938.0], [94.8, 3950.0], [94.9, 3964.0], [95.0, 3976.0], [95.1, 4005.0], [95.2, 4029.0], [95.3, 4040.0], [95.4, 4048.0], [95.5, 4087.0], [95.6, 4093.0], [95.7, 4106.0], [95.8, 4114.0], [95.9, 4119.0], [96.0, 4126.0], [96.1, 4137.0], [96.2, 4140.0], [96.3, 4159.0], [96.4, 4175.0], [96.5, 4182.0], [96.6, 4202.0], [96.7, 4221.0], [96.8, 4230.0], [96.9, 4255.0], [97.0, 4260.0], [97.1, 4327.0], [97.2, 4354.0], [97.3, 4359.0], [97.4, 4391.0], [97.5, 4460.0], [97.6, 4495.0], [97.7, 4584.0], [97.8, 4619.0], [97.9, 4656.0], [98.0, 4670.0], [98.1, 4736.0], [98.2, 4758.0], [98.3, 4783.0], [98.4, 4886.0], [98.5, 4942.0], [98.6, 4963.0], [98.7, 5013.0], [98.8, 5072.0], [98.9, 5113.0], [99.0, 5269.0], [99.1, 5287.0], [99.2, 5324.0], [99.3, 5717.0], [99.4, 5727.0], [99.5, 5734.0], [99.6, 5782.0], [99.7, 5786.0], [99.8, 5873.0], [99.9, 6185.0], [100.0, 6629.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 2300.0, "maxY": 731.0, "series": [{"data": [[2300.0, 2.0], [2400.0, 7.0], [2500.0, 63.0], [2600.0, 220.0], [2800.0, 731.0], [2700.0, 601.0], [2900.0, 289.0], [3000.0, 113.0], [3100.0, 65.0], [3200.0, 49.0], [3300.0, 35.0], [3400.0, 30.0], [3500.0, 24.0], [3600.0, 18.0], [3700.0, 17.0], [3800.0, 12.0], [3900.0, 14.0], [4000.0, 14.0], [4100.0, 22.0], [4200.0, 11.0], [4300.0, 9.0], [4400.0, 5.0], [4600.0, 8.0], [4500.0, 2.0], [4700.0, 8.0], [4800.0, 1.0], [4900.0, 6.0], [5000.0, 5.0], [5100.0, 1.0], [5200.0, 6.0], [5300.0, 2.0], [5600.0, 1.0], [5700.0, 11.0], [5800.0, 2.0], [6000.0, 1.0], [6100.0, 1.0], [6600.0, 1.0], [6400.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 6600.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 2408.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 2408.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 2408.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 140.52500000000015, "minX": 1.68303654E12, "maxY": 2260.5405405405404, "series": [{"data": [[1.68303684E12, 140.52500000000015], [1.68303654E12, 2260.5405405405404], [1.68303666E12, 1368.5195312499986], [1.6830366E12, 1868.5409836065587], [1.68303678E12, 488.52403846153817], [1.68303672E12, 904.5312499999998]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68303684E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 2330.0, "minX": 1.0, "maxY": 6629.0, "series": [{"data": [[2.0, 2892.0], [3.0, 2874.0], [4.0, 2862.0], [5.0, 2855.0], [6.0, 2840.0], [7.0, 2735.0], [8.0, 2732.0], [9.0, 2832.0], [10.0, 2664.0], [11.0, 2650.0], [12.0, 2641.0], [13.0, 2598.0], [14.0, 2586.0], [15.0, 2494.0], [16.0, 2490.0], [17.0, 3221.0], [18.0, 3218.0], [19.0, 3427.0], [20.0, 3209.0], [21.0, 3205.0], [22.0, 3416.0], [23.0, 3415.0], [24.0, 3197.0], [25.0, 3190.0], [26.0, 3171.0], [27.0, 3380.0], [28.0, 3164.0], [29.0, 3375.0], [30.0, 3310.0], [31.0, 3285.0], [33.0, 3195.0], [32.0, 3198.0], [35.0, 3176.0], [34.0, 3185.0], [37.0, 3144.0], [36.0, 3170.0], [39.0, 3028.0], [38.0, 3086.0], [41.0, 2804.0], [40.0, 2858.0], [43.0, 2795.0], [42.0, 2798.0], [45.0, 2776.0], [44.0, 2779.0], [47.0, 2713.0], [46.0, 2724.0], [49.0, 2828.0], [48.0, 2699.0], [51.0, 2822.0], [50.0, 2826.0], [53.0, 2811.0], [52.0, 2816.0], [55.0, 2755.0], [54.0, 2807.0], [57.0, 2852.0], [56.0, 2729.0], [59.0, 2849.0], [58.0, 2851.0], [61.0, 2844.0], [60.0, 2849.0], [63.0, 2771.0], [62.0, 2783.0], [67.0, 2921.0], [66.0, 2925.0], [65.0, 2928.0], [64.0, 2712.0], [71.0, 2852.0], [70.0, 2857.0], [69.0, 2891.0], [68.0, 2912.0], [75.0, 2772.0], [74.0, 2796.0], [73.0, 2819.0], [72.0, 2736.0], [79.0, 2669.0], [78.0, 2718.0], [77.0, 2724.0], [76.0, 2732.0], [83.0, 2713.0], [82.0, 2715.0], [81.0, 2724.0], [80.0, 2655.0], [87.0, 2620.0], [85.0, 2627.0], [84.0, 2703.0], [91.0, 2629.0], [90.0, 2652.0], [89.0, 2670.0], [88.0, 2561.0], [95.0, 2560.0], [94.0, 2601.0], [93.0, 2606.0], [92.0, 2624.0], [99.0, 2916.0], [98.0, 2923.0], [97.0, 2941.0], [96.0, 2533.0], [103.0, 2841.0], [102.0, 3019.0], [101.0, 2891.0], [100.0, 2901.0], [107.0, 2908.0], [105.0, 2796.0], [104.0, 2838.0], [111.0, 2790.0], [109.0, 2817.0], [108.0, 2837.0], [115.0, 2887.0], [114.0, 2967.0], [113.0, 2997.0], [112.0, 2762.0], [119.0, 2813.0], [118.0, 2817.0], [117.0, 2830.0], [116.0, 2862.0], [123.0, 2858.0], [122.0, 2862.0], [121.0, 2863.0], [120.0, 2806.0], [127.0, 2794.0], [126.0, 2827.0], [125.0, 2849.0], [124.0, 2856.0], [135.0, 2678.0], [134.0, 2712.0], [133.0, 2816.0], [132.0, 2827.0], [131.0, 2831.0], [130.0, 2850.0], [129.0, 2898.0], [128.0, 2770.0], [143.0, 3123.0], [142.0, 3126.0], [141.0, 3131.0], [140.0, 3143.0], [139.0, 3147.5], [137.0, 3148.0], [136.0, 2673.0], [151.0, 2908.0], [150.0, 2909.0], [149.0, 2989.0], [148.0, 4162.0], [147.0, 4182.0], [146.0, 4223.0], [145.0, 4245.0], [144.0, 3114.0], [159.0, 3266.0], [158.0, 2967.0], [157.0, 2967.0], [156.0, 2969.0], [155.0, 2892.0], [154.0, 2972.0], [153.0, 2976.0], [152.0, 3169.0], [167.0, 3163.0], [166.0, 3079.0], [165.0, 3102.0], [164.0, 3115.0], [163.0, 3119.0], [162.0, 2940.0], [161.0, 2876.0], [160.0, 2964.0], [175.0, 2837.0], [174.0, 2928.0], [173.0, 3023.0], [172.0, 2912.0], [171.0, 3072.0], [170.0, 3073.0], [169.0, 2968.0], [168.0, 2971.0], [183.0, 2785.0], [182.0, 2787.0], [181.0, 2805.0], [180.0, 2830.0], [179.0, 2839.0], [178.0, 2852.0], [177.0, 2863.0], [176.0, 2779.0], [191.0, 3074.0], [190.0, 3078.0], [189.0, 2898.0], [188.0, 2919.0], [187.0, 2927.0], [186.0, 2927.0], [185.0, 2933.0], [184.0, 2782.0], [199.0, 3004.0], [197.0, 3010.0], [196.0, 2847.0], [195.0, 3037.0], [194.0, 3048.0], [193.0, 2975.5], [207.0, 2575.0], [206.0, 2603.0], [205.0, 2651.0], [204.0, 2667.0], [203.0, 2713.0], [202.0, 2731.0], [201.0, 2747.0], [200.0, 2785.0], [215.0, 2856.0], [214.0, 2864.0], [213.0, 2874.0], [212.0, 2888.0], [211.0, 2893.0], [210.0, 2901.0], [209.0, 2904.0], [208.0, 2531.0], [223.0, 2559.0], [222.0, 2562.0], [221.0, 2576.0], [220.0, 2707.0], [219.0, 2733.0], [218.0, 2752.0], [217.0, 2825.0], [216.0, 2680.0], [231.0, 2781.0], [230.0, 2787.0], [229.0, 2803.0], [228.0, 2822.0], [227.0, 2824.0], [226.0, 2825.0], [225.0, 2828.0], [224.0, 2559.0], [239.0, 2794.0], [238.0, 2813.0], [237.0, 2818.0], [236.0, 2839.0], [235.0, 2853.0], [234.0, 2864.0], [233.0, 2869.0], [232.0, 2731.0], [247.0, 2867.0], [246.0, 2907.0], [245.0, 2939.0], [244.0, 2950.0], [243.0, 2969.0], [242.0, 2973.0], [241.0, 2789.0], [240.0, 2989.0], [255.0, 2865.0], [254.0, 2952.0], [253.0, 2975.0], [252.0, 2976.0], [251.0, 2999.0], [250.0, 3000.0], [249.0, 3007.0], [248.0, 2810.0], [270.0, 2884.0], [271.0, 2983.0], [269.0, 2886.0], [268.0, 2904.0], [267.0, 2930.0], [266.0, 2935.0], [265.0, 2946.0], [264.0, 2818.0], [263.0, 2899.0], [256.0, 2859.0], [258.0, 2980.0], [257.0, 2995.0], [262.0, 2957.0], [261.0, 2966.0], [260.0, 2970.5], [286.0, 4089.0], [287.0, 4077.0], [285.0, 4090.0], [284.0, 4093.0], [283.0, 4255.0], [282.0, 4259.0], [281.0, 4117.0], [280.0, 2848.0], [279.0, 2857.0], [273.0, 2845.0], [272.0, 2846.0], [275.0, 2937.0], [274.0, 2937.0], [278.0, 2874.0], [277.0, 2916.0], [276.0, 2934.0], [302.0, 2987.0], [303.0, 2967.0], [301.0, 2931.0], [300.0, 3008.0], [299.0, 3015.0], [298.0, 2965.0], [297.0, 2994.0], [296.0, 3058.0], [295.0, 2998.0], [289.0, 3976.0], [288.0, 4040.0], [291.0, 3127.0], [290.0, 3119.0], [294.0, 3022.0], [293.0, 2895.0], [292.0, 3120.0], [318.0, 3037.0], [319.0, 3013.0], [317.0, 3047.0], [316.0, 2950.0], [315.0, 3075.0], [314.0, 3210.0], [313.0, 3120.0], [312.0, 3124.0], [311.0, 3136.0], [305.0, 3171.0], [304.0, 2947.0], [307.0, 3166.0], [306.0, 3290.0], [310.0, 3273.0], [309.0, 3285.0], [308.0, 3165.0], [334.0, 2886.0], [335.0, 2852.0], [333.0, 3041.0], [332.0, 2906.0], [331.0, 2929.0], [330.0, 2935.0], [329.0, 2949.0], [328.0, 2537.0], [327.0, 2642.0], [321.0, 2692.0], [320.0, 2972.0], [323.0, 2684.0], [322.0, 2689.0], [326.0, 2646.0], [325.0, 2666.0], [324.0, 2676.0], [350.0, 2916.0], [351.0, 2894.0], [349.0, 2925.0], [348.0, 2934.0], [347.0, 2935.0], [346.0, 2943.0], [345.0, 2951.0], [344.0, 2656.0], [343.0, 2691.0], [336.0, 2983.0], [339.0, 2889.0], [337.0, 2825.0], [342.0, 2720.0], [341.0, 2850.0], [340.0, 2893.0], [366.0, 2853.0], [367.0, 2804.0], [365.0, 2860.0], [364.0, 2862.0], [363.0, 2863.0], [362.0, 2868.0], [361.0, 2883.0], [360.0, 2824.0], [359.0, 2847.0], [352.0, 2780.0], [355.0, 2974.0], [354.0, 3134.0], [358.0, 2849.0], [357.0, 2851.0], [356.0, 2853.0], [382.0, 2818.0], [383.0, 2812.0], [381.0, 2874.0], [380.0, 2879.0], [379.0, 2901.0], [378.0, 2939.0], [377.0, 2952.0], [376.0, 2691.0], [375.0, 2724.0], [369.0, 2754.0], [368.0, 2739.0], [371.0, 2749.0], [370.0, 2748.0], [374.0, 2733.0], [373.0, 2739.0], [372.0, 2744.0], [398.0, 2819.0], [399.0, 2748.0], [397.0, 2820.0], [396.0, 2719.0], [395.0, 2858.0], [394.0, 2889.0], [393.0, 2894.0], [392.0, 2843.0], [390.0, 2784.0], [385.0, 2872.0], [384.0, 2748.0], [387.0, 2858.0], [386.0, 2865.0], [389.0, 2795.0], [388.0, 2820.0], [414.0, 2807.0], [415.0, 2791.0], [413.0, 2809.0], [412.0, 2810.0], [411.0, 2820.0], [410.0, 2831.0], [409.0, 2833.0], [408.0, 2693.0], [407.0, 2699.0], [401.0, 2740.0], [400.0, 2725.0], [403.0, 2721.0], [402.0, 2722.0], [406.0, 2701.0], [405.0, 2709.0], [404.0, 2715.0], [430.0, 2773.0], [431.0, 2727.0], [429.0, 2811.0], [428.0, 2814.0], [427.0, 2830.0], [426.0, 2831.0], [425.0, 2834.0], [424.0, 2822.0], [423.0, 2826.0], [417.0, 2898.0], [416.0, 2756.0], [419.0, 2875.0], [418.0, 2885.0], [422.0, 2856.0], [421.0, 2863.0], [420.0, 2865.0], [446.0, 2830.0], [447.0, 2820.0], [445.0, 2836.0], [444.0, 2851.0], [443.0, 2862.0], [442.0, 2871.0], [441.0, 2871.0], [440.0, 2700.0], [439.0, 2715.0], [433.0, 2885.0], [432.0, 2725.0], [435.0, 2882.0], [434.0, 2882.0], [438.0, 2827.0], [437.0, 2859.0], [436.0, 2880.0], [462.0, 2885.0], [463.0, 2735.0], [461.0, 2899.0], [460.0, 2917.0], [459.0, 2918.0], [458.0, 2921.0], [457.0, 2927.0], [456.0, 2810.0], [455.0, 2812.0], [449.0, 2865.0], [448.0, 2760.0], [451.0, 2852.0], [450.0, 2859.0], [454.0, 2822.0], [453.0, 2825.0], [452.0, 2825.0], [477.0, 2855.0], [479.0, 2793.5], [476.0, 2863.0], [467.0, 2888.0], [466.0, 2924.0], [465.0, 3070.0], [464.0, 2704.0], [475.0, 2884.0], [474.0, 2910.0], [473.0, 2795.0], [472.0, 2825.0], [471.0, 2827.0], [470.0, 2848.0], [469.0, 2973.0], [468.0, 2876.0], [494.0, 2789.0], [495.0, 2765.0], [493.0, 2814.0], [492.0, 2821.0], [491.0, 2823.0], [490.0, 2850.0], [489.0, 2871.0], [488.0, 2749.0], [487.0, 2831.0], [480.0, 2718.0], [483.0, 2858.0], [482.0, 2863.5], [485.0, 2841.0], [484.0, 2847.0], [510.0, 2586.0], [511.0, 2568.0], [509.0, 2625.0], [508.0, 2754.0], [507.0, 2768.0], [506.0, 2778.0], [505.0, 2783.0], [504.0, 2603.0], [503.0, 2608.0], [497.0, 2704.0], [496.0, 2726.0], [499.0, 2681.0], [498.0, 2691.0], [501.0, 2644.0], [500.0, 2656.0], [540.0, 2801.0], [542.0, 2795.0], [538.0, 2816.0], [536.0, 2742.0], [534.0, 2803.0], [532.0, 2821.0], [530.0, 2859.0], [528.0, 2652.0], [526.0, 2784.0], [514.0, 2829.0], [512.0, 2557.0], [518.0, 2777.0], [516.0, 2792.0], [524.0, 2800.0], [522.0, 2805.0], [520.0, 2742.0], [572.0, 2629.0], [574.0, 2587.0], [570.0, 2781.0], [568.0, 2667.0], [566.0, 2688.0], [564.0, 2746.0], [562.0, 2573.0], [560.0, 2796.0], [558.0, 2789.0], [546.0, 3229.0], [544.0, 2765.0], [550.0, 2821.0], [548.0, 3192.0], [556.0, 2862.0], [554.0, 2908.0], [552.0, 2940.0], [604.0, 2784.0], [606.0, 2754.0], [602.0, 2824.0], [600.0, 2932.5], [598.0, 2896.0], [596.0, 2910.0], [594.0, 2920.0], [592.0, 2559.0], [590.0, 2772.0], [578.0, 2905.0], [576.0, 2519.0], [582.0, 2790.0], [580.0, 2850.0], [588.0, 2786.0], [586.0, 2808.0], [584.0, 2548.0], [636.0, 2764.0], [638.0, 2739.0], [634.0, 2782.0], [632.0, 2626.0], [630.0, 2662.0], [628.0, 2697.0], [626.0, 2741.0], [624.0, 2744.0], [622.0, 2805.0], [610.0, 3000.0], [608.0, 2724.0], [614.0, 2917.0], [612.0, 2952.0], [620.0, 2762.0], [618.0, 2862.0], [616.0, 2806.0], [668.0, 2740.0], [670.0, 2720.0], [666.0, 2775.0], [646.0, 2845.0], [644.0, 2901.0], [642.0, 2920.0], [640.0, 2685.0], [662.0, 2788.0], [660.0, 2695.0], [658.0, 2697.0], [656.0, 2737.0], [654.0, 2798.0], [652.0, 2814.0], [650.0, 2828.0], [648.0, 2742.0], [700.0, 2851.0], [702.0, 2809.0], [698.0, 2860.0], [696.0, 2892.0], [694.0, 2933.0], [692.0, 2959.0], [690.0, 3254.0], [688.0, 3298.0], [686.0, 3295.0], [674.0, 2800.0], [672.0, 2632.0], [678.0, 2732.0], [676.0, 2753.0], [684.0, 2661.0], [682.0, 3321.0], [680.0, 3325.0], [732.0, 2764.0], [734.0, 2738.0], [730.0, 2774.0], [728.0, 2699.0], [726.0, 2782.0], [724.0, 2786.0], [720.0, 2696.0], [718.0, 2788.0], [706.0, 2935.5], [704.0, 2771.0], [710.0, 2902.0], [708.0, 2923.0], [716.0, 2810.0], [714.0, 2864.0], [712.0, 2924.0], [764.0, 2842.0], [766.0, 2822.0], [762.0, 2853.0], [760.0, 2678.0], [758.0, 2695.0], [756.0, 2821.0], [754.0, 2876.0], [752.0, 2704.0], [750.0, 2771.0], [738.0, 2758.0], [736.0, 2688.0], [742.0, 2729.0], [740.0, 2744.0], [748.0, 2809.0], [746.0, 2839.0], [744.0, 2710.0], [794.0, 3010.0], [798.0, 2931.0], [792.0, 2629.0], [774.0, 2773.0], [772.0, 2791.0], [770.0, 2834.0], [768.0, 2727.0], [790.0, 2648.0], [788.0, 2795.0], [786.0, 2811.0], [784.0, 2723.0], [782.0, 2728.0], [780.0, 2772.0], [778.0, 2780.0], [776.0, 2736.0], [828.0, 2828.0], [830.0, 2778.0], [826.0, 2850.0], [824.0, 2750.0], [822.0, 2821.0], [820.0, 2828.0], [818.0, 2851.0], [816.0, 2725.0], [814.0, 2766.0], [802.0, 2901.0], [800.0, 2908.0], [806.0, 2846.0], [804.0, 2887.0], [812.0, 2784.0], [810.0, 2809.0], [808.0, 2852.0], [860.0, 3309.0], [848.0, 3482.0], [850.0, 2905.0], [852.0, 3379.0], [862.0, 3245.0], [858.0, 3335.0], [856.0, 3354.0], [832.0, 2760.0], [834.0, 3862.0], [836.0, 3707.0], [838.0, 3020.0], [846.0, 3404.0], [844.0, 2962.0], [842.0, 2816.0], [840.0, 2993.0], [854.0, 3366.0], [892.0, 2772.0], [880.0, 2936.0], [882.0, 3105.0], [884.0, 2947.0], [894.0, 2757.0], [890.0, 2776.0], [888.0, 2797.0], [864.0, 3104.0], [866.0, 2742.0], [868.0, 2708.0], [870.0, 2701.0], [878.0, 2991.0], [876.0, 3016.0], [874.0, 2675.0], [872.0, 2881.0], [886.0, 2822.0], [924.0, 2731.0], [912.0, 2663.0], [914.0, 2759.0], [916.0, 2738.0], [926.0, 2726.0], [922.0, 2738.0], [920.0, 2690.0], [896.0, 2732.0], [898.0, 2811.0], [900.0, 2788.0], [902.0, 2771.0], [910.0, 2781.0], [908.0, 2797.0], [904.0, 2683.0], [918.0, 2698.0], [956.0, 2745.0], [958.0, 2740.0], [944.0, 2679.0], [946.0, 2902.0], [948.0, 2867.0], [952.0, 2731.0], [934.0, 2684.0], [932.0, 2713.0], [930.0, 2745.0], [928.0, 2709.0], [942.0, 2710.0], [940.0, 2756.0], [938.0, 2765.0], [936.0, 2675.0], [950.0, 2745.0], [988.0, 2680.0], [976.0, 2699.0], [978.0, 2885.0], [980.0, 2865.0], [990.0, 2592.0], [986.0, 2727.0], [984.0, 2824.0], [960.0, 2413.0], [962.0, 2896.0], [964.0, 2893.0], [966.0, 2916.0], [972.0, 2771.0], [970.0, 2806.0], [968.0, 2828.0], [982.0, 2855.0], [1020.0, 2725.0], [1008.0, 2698.0], [1010.0, 2894.0], [1012.0, 2872.0], [1022.0, 2660.0], [1018.0, 2761.0], [1016.0, 2788.0], [992.0, 2517.0], [994.0, 2896.0], [996.0, 2879.0], [998.0, 2862.0], [1006.0, 2715.0], [1004.0, 2812.0], [1002.0, 2846.0], [1000.0, 2791.0], [1014.0, 2843.0], [1080.0, 2559.0], [1056.0, 2750.0], [1060.0, 2722.0], [1064.0, 2550.0], [1084.0, 2755.0], [1076.0, 2636.0], [1072.0, 2730.0], [1024.0, 2558.0], [1028.0, 2744.0], [1032.0, 2669.0], [1036.0, 2796.0], [1052.0, 2777.0], [1048.0, 2778.0], [1044.0, 2846.0], [1040.0, 2759.0], [1068.0, 2847.0], [1144.0, 2874.0], [1120.0, 2669.0], [1124.0, 2808.0], [1128.0, 2704.0], [1148.0, 2928.0], [1140.0, 2898.0], [1136.0, 2653.0], [1088.0, 2724.0], [1092.0, 2828.0], [1096.0, 2688.0], [1100.0, 2669.0], [1116.0, 2749.0], [1112.0, 2810.0], [1104.0, 2641.0], [1132.0, 2717.0], [1208.0, 2624.0], [1184.0, 2673.0], [1188.0, 2829.0], [1192.0, 2729.0], [1212.0, 2925.0], [1204.0, 2717.0], [1200.0, 2771.0], [1152.0, 2867.0], [1156.0, 2887.0], [1160.0, 2797.0], [1164.0, 2742.0], [1180.0, 2732.0], [1176.0, 2780.0], [1172.0, 2882.0], [1168.0, 2616.0], [1196.0, 2811.0], [1272.0, 2666.0], [1248.0, 2884.0], [1252.0, 3006.0], [1256.0, 2986.0], [1276.0, 2888.0], [1268.0, 2853.0], [1264.0, 2930.0], [1216.0, 2657.0], [1224.0, 2468.0], [1228.0, 2655.0], [1244.0, 2929.0], [1240.0, 3029.0], [1236.0, 3104.0], [1232.0, 2552.0], [1260.0, 3013.0], [1336.0, 2704.0], [1312.0, 2579.0], [1316.0, 2832.0], [1320.0, 2719.0], [1340.0, 2780.0], [1332.0, 2737.0], [1328.0, 2646.0], [1280.0, 2853.0], [1288.0, 2807.0], [1292.0, 2797.0], [1308.0, 2760.0], [1304.0, 2739.0], [1300.0, 2802.0], [1296.0, 2613.0], [1324.0, 2682.0], [1400.0, 2770.0], [1376.0, 3265.0], [1380.0, 3343.0], [1384.0, 3013.0], [1404.0, 2880.0], [1396.0, 2833.0], [1392.0, 2908.0], [1344.0, 2708.0], [1348.0, 2606.0], [1352.0, 2374.0], [1356.0, 3738.0], [1372.0, 2820.0], [1368.0, 2585.0], [1364.0, 2878.0], [1360.0, 3572.0], [1388.0, 3038.0], [1464.0, 2883.0], [1440.0, 2606.0], [1444.0, 2812.0], [1448.0, 2617.0], [1468.0, 2929.0], [1460.0, 3020.0], [1456.0, 2664.0], [1408.0, 2721.0], [1412.0, 2728.0], [1416.0, 2615.0], [1420.0, 2760.0], [1436.0, 2708.0], [1432.0, 2620.0], [1428.0, 2691.0], [1424.0, 2700.0], [1452.0, 2870.0], [1528.0, 2941.0], [1504.0, 2967.0], [1508.0, 2916.0], [1512.0, 2874.0], [1532.0, 2862.0], [1524.0, 2743.0], [1520.0, 2767.0], [1472.0, 2844.0], [1476.0, 2578.0], [1480.0, 2526.0], [1484.0, 2944.0], [1500.0, 3012.0], [1496.0, 2653.0], [1492.0, 2936.0], [1488.0, 2919.0], [1516.0, 2929.0], [1592.0, 3253.0], [1568.0, 4041.0], [1572.0, 2730.0], [1576.0, 2715.0], [1596.0, 3248.0], [1588.0, 3398.0], [1584.0, 3267.0], [1536.0, 2734.0], [1540.0, 2817.0], [1544.0, 2732.0], [1548.0, 2646.0], [1564.0, 3697.0], [1560.0, 3560.0], [1556.0, 3587.0], [1552.0, 2507.0], [1580.0, 3474.0], [1656.0, 2835.0], [1660.0, 2988.0], [1632.0, 2894.0], [1636.0, 2858.0], [1640.0, 2667.0], [1644.0, 2856.0], [1652.0, 2846.0], [1648.0, 2704.0], [1612.0, 2963.0], [1608.0, 2816.0], [1604.0, 3129.0], [1600.0, 3200.0], [1628.0, 2963.0], [1624.0, 2782.0], [1620.0, 3032.0], [1616.0, 2650.0], [1720.0, 4162.0], [1716.0, 2820.0], [1724.0, 4129.0], [1696.0, 3519.0], [1700.0, 3312.0], [1704.0, 3175.0], [1708.0, 2736.0], [1712.0, 2416.0], [1664.0, 2890.0], [1668.0, 3391.0], [1672.0, 3353.0], [1676.0, 3637.0], [1692.0, 3470.0], [1688.0, 2597.0], [1684.0, 2663.0], [1680.0, 2912.0], [1788.0, 2883.5], [1784.0, 2833.0], [1760.0, 2825.0], [1764.0, 2877.0], [1768.0, 2849.0], [1772.0, 2701.0], [1780.0, 2892.0], [1776.0, 2641.0], [1740.0, 2941.0], [1736.0, 3152.0], [1732.0, 3876.0], [1728.0, 4005.0], [1752.0, 3069.0], [1748.0, 3077.0], [1744.0, 2677.0], [1848.0, 2720.0], [1844.0, 2789.0], [1852.0, 2878.0], [1824.0, 2762.0], [1832.0, 2704.0], [1836.0, 2826.0], [1840.0, 2779.0], [1792.0, 2681.0], [1796.0, 2800.0], [1800.0, 2736.0], [1804.0, 2844.0], [1820.0, 2813.0], [1816.0, 2817.0], [1812.0, 2856.0], [1808.0, 2724.0], [1912.0, 2330.0], [1908.0, 2614.0], [1916.0, 2826.0], [1888.0, 2962.0], [1892.0, 2922.0], [1896.0, 2988.0], [1900.0, 2815.0], [1904.0, 2767.0], [1856.0, 2841.0], [1860.0, 2874.0], [1864.0, 2773.0], [1868.0, 2811.0], [1884.0, 2759.0], [1880.0, 2796.0], [1876.0, 2810.0], [1872.0, 2721.0], [1976.0, 2721.0], [1972.0, 2907.0], [1980.0, 2686.0], [1952.0, 2730.0], [1956.0, 2657.0], [1960.0, 2437.0], [1964.0, 2689.0], [1968.0, 2599.0], [1920.0, 2572.0], [1924.0, 3682.0], [1928.0, 2863.0], [1948.0, 2998.0], [1944.0, 3241.0], [1940.0, 3119.0], [1936.0, 3181.0], [2040.0, 2852.0], [2036.0, 2885.0], [2044.0, 2762.0], [2016.0, 2871.0], [2020.0, 2825.0], [2024.0, 2762.0], [2028.0, 2772.0], [2032.0, 2684.0], [1984.0, 2566.0], [1988.0, 2863.0], [1992.0, 2825.0], [1996.0, 2919.0], [2012.0, 2915.0], [2008.0, 2796.0], [2004.0, 2861.0], [2000.0, 2883.0], [2168.0, 2957.0], [2152.0, 2678.5], [2112.0, 2857.0], [2120.0, 2690.0], [2128.0, 3123.0], [2136.0, 2836.0], [2160.0, 2710.0], [2144.0, 2695.0], [2072.0, 2747.0], [2064.0, 2802.0], [2056.0, 2723.0], [2048.0, 2719.0], [2104.0, 2914.0], [2096.0, 2782.0], [2088.0, 2699.0], [2080.0, 2743.0], [2280.0, 4114.0], [2296.0, 4475.0], [2240.0, 4584.0], [2248.0, 4745.0], [2256.0, 4129.0], [2288.0, 4335.0], [2272.0, 4606.0], [2200.0, 2580.0], [2192.0, 3050.0], [2184.0, 3398.0], [2232.0, 2651.0], [2224.0, 2833.0], [2216.0, 2706.0], [2208.0, 2759.0], [2400.0, 2601.0], [2392.0, 2738.0], [2408.0, 2806.0], [2368.0, 3218.0], [2376.0, 2770.0], [2384.0, 2711.0], [2328.0, 5026.0], [2320.0, 5234.0], [2312.0, 4354.0], [2304.0, 4152.0], [2360.0, 3382.0], [2352.0, 3829.0], [2344.0, 3921.0], [2336.0, 3613.0], [2161.0, 3019.0], [2169.0, 2951.0], [2113.0, 2802.0], [2121.0, 3000.0], [2129.0, 3111.0], [2137.0, 2785.0], [2153.0, 2883.0], [2145.0, 2792.0], [2073.0, 2871.0], [2065.0, 2856.0], [2057.0, 2838.0], [2049.0, 2710.0], [2105.0, 2992.0], [2097.0, 2969.0], [2089.0, 2889.0], [2081.0, 2867.0], [2289.0, 4327.0], [2297.0, 3966.0], [2241.0, 5786.0], [2249.0, 5765.0], [2257.0, 5727.0], [2265.0, 5371.0], [2281.0, 4175.0], [2273.0, 5373.0], [2201.0, 2860.0], [2193.0, 2856.0], [2185.0, 3388.0], [2177.0, 3131.0], [2233.0, 4736.0], [2225.0, 2812.0], [2217.0, 3199.0], [2209.0, 2831.0], [2329.0, 4948.0], [2401.0, 2895.0], [2369.0, 2841.0], [2377.0, 2949.0], [2385.0, 2810.0], [2393.0, 2810.0], [2321.0, 4048.0], [2313.0, 4272.0], [2305.0, 5794.0], [2361.0, 3547.0], [2353.0, 3761.0], [2345.0, 3567.0], [2337.0, 3831.0], [1081.0, 2823.0], [1085.0, 2750.0], [1057.0, 2762.0], [1061.0, 2689.0], [1065.0, 2881.0], [1073.0, 2684.0], [1037.0, 2791.0], [1033.0, 2827.0], [1029.0, 2740.0], [1025.0, 2822.0], [1053.0, 2771.0], [1049.0, 2791.0], [1045.0, 2787.0], [1041.0, 2860.0], [1069.0, 2842.0], [1141.0, 2891.0], [1149.0, 2911.0], [1121.0, 2823.0], [1125.0, 2795.0], [1129.0, 2806.0], [1137.0, 2941.0], [1101.0, 2660.0], [1097.0, 2727.0], [1093.0, 2807.0], [1089.0, 2875.0], [1117.0, 2702.0], [1113.0, 2764.0], [1109.0, 2853.5], [1105.0, 2878.0], [1133.0, 2705.0], [1209.0, 2970.0], [1185.0, 2892.0], [1189.0, 2805.0], [1193.0, 2826.0], [1213.0, 2885.0], [1205.0, 2702.0], [1201.0, 2786.0], [1153.0, 2916.0], [1157.0, 2875.0], [1161.0, 2763.0], [1165.0, 2740.0], [1181.0, 2728.0], [1177.0, 2757.0], [1173.0, 2849.0], [1169.0, 2973.0], [1197.0, 2811.0], [1273.0, 3052.0], [1277.0, 2882.0], [1249.0, 3094.0], [1253.0, 3004.0], [1257.0, 3070.0], [1269.0, 2787.0], [1265.0, 2908.0], [1229.0, 2609.0], [1225.0, 2730.0], [1221.0, 2595.0], [1217.0, 2715.0], [1245.0, 2926.0], [1241.0, 3528.0], [1237.0, 3099.0], [1233.0, 3126.0], [1261.0, 3004.0], [1337.0, 2698.0], [1313.0, 2874.0], [1317.0, 2821.0], [1321.0, 2746.0], [1341.0, 2753.0], [1333.0, 2880.0], [1329.0, 2779.0], [1281.0, 2918.0], [1285.0, 2891.0], [1289.0, 2837.0], [1293.0, 2789.0], [1309.0, 2741.0], [1305.0, 2782.0], [1301.0, 2802.0], [1297.0, 2884.0], [1325.0, 2674.0], [1401.0, 2930.0], [1377.0, 2768.0], [1381.0, 3226.0], [1385.0, 3001.0], [1405.0, 2876.0], [1397.0, 2817.0], [1393.0, 2856.0], [1345.0, 2657.0], [1349.0, 2572.0], [1353.0, 3762.0], [1357.0, 3715.0], [1373.0, 2808.0], [1369.0, 2834.0], [1365.0, 2617.0], [1361.0, 3600.0], [1389.0, 3025.0], [1465.0, 2875.0], [1441.0, 2875.0], [1445.0, 2739.0], [1449.0, 2893.0], [1469.0, 2912.0], [1461.0, 2909.0], [1457.0, 2949.0], [1409.0, 2748.0], [1413.0, 2724.0], [1417.0, 2817.0], [1421.0, 2739.0], [1437.0, 2706.0], [1433.0, 2795.0], [1429.0, 2685.0], [1425.0, 2734.0], [1453.0, 2864.0], [1529.0, 2662.0], [1505.0, 2967.0], [1509.0, 2905.0], [1513.0, 2863.0], [1533.0, 2854.0], [1525.0, 2737.0], [1521.0, 2853.0], [1473.0, 2622.0], [1477.0, 2557.0], [1481.0, 3145.0], [1485.0, 2943.0], [1501.0, 2978.0], [1497.0, 3046.0], [1493.0, 2930.0], [1489.0, 3086.0], [1517.0, 2876.0], [1593.0, 3278.0], [1569.0, 4040.0], [1573.0, 2728.0], [1577.0, 3480.0], [1597.0, 3246.0], [1589.0, 3192.0], [1585.0, 3263.0], [1537.0, 2825.0], [1541.0, 2812.0], [1545.0, 2665.0], [1549.0, 2633.0], [1565.0, 3686.0], [1561.0, 3758.0], [1557.0, 3824.0], [1553.0, 3629.0], [1581.0, 3305.0], [1661.0, 2938.0], [1633.0, 2889.0], [1637.0, 2814.0], [1641.0, 2887.0], [1645.0, 2847.0], [1657.0, 3137.0], [1653.0, 2843.0], [1649.0, 2849.0], [1613.0, 2910.0], [1601.0, 2978.0], [1605.0, 2928.0], [1609.0, 3007.0], [1629.0, 2959.0], [1625.0, 3015.0], [1621.0, 3030.0], [1617.0, 3081.0], [1721.0, 2795.0], [1725.0, 4178.0], [1697.0, 3498.0], [1701.0, 3229.0], [1705.0, 2753.0], [1709.0, 2730.0], [1717.0, 2810.0], [1713.0, 2893.0], [1665.0, 3413.0], [1669.0, 2820.0], [1673.0, 3713.0], [1677.0, 2683.0], [1689.0, 3547.0], [1685.0, 2632.0], [1681.0, 2565.0], [1785.0, 2901.0], [1761.0, 2967.0], [1765.0, 2875.0], [1769.0, 2767.0], [1773.0, 2699.0], [1789.0, 2881.0], [1781.0, 2883.0], [1777.0, 2921.0], [1741.0, 2754.0], [1737.0, 3275.0], [1733.0, 3219.0], [1729.0, 3978.0], [1757.0, 3057.0], [1753.0, 3059.0], [1749.0, 3074.0], [1745.0, 3087.0], [1849.0, 2896.0], [1853.0, 2875.0], [1825.0, 2831.0], [1829.0, 2746.0], [1833.0, 2860.0], [1837.0, 2823.0], [1845.0, 2770.0], [1841.0, 2810.0], [1793.0, 2851.0], [1797.0, 2796.0], [1801.0, 2892.0], [1805.0, 2842.0], [1821.0, 2801.0], [1813.0, 2847.0], [1809.0, 2892.0], [1913.0, 2860.0], [1917.0, 2810.0], [1889.0, 2955.0], [1893.0, 2910.0], [1897.0, 2968.0], [1901.0, 2814.0], [1909.0, 2550.0], [1905.0, 2682.0], [1857.0, 2880.0], [1861.0, 2861.0], [1865.0, 2840.0], [1869.0, 2810.0], [1885.0, 2755.0], [1881.0, 2799.0], [1877.0, 2808.0], [1873.0, 2891.0], [1977.0, 2714.0], [1981.0, 2678.0], [1953.0, 2674.0], [1957.0, 2652.0], [1961.0, 2771.0], [1965.0, 2674.0], [1973.0, 2898.0], [1969.0, 2955.0], [1921.0, 3752.0], [1925.0, 2879.0], [1929.0, 2861.0], [1933.0, 3025.0], [1949.0, 2965.0], [1945.0, 3079.0], [1941.0, 3106.0], [1937.0, 2807.0], [2041.0, 2772.0], [2045.0, 2761.0], [2017.0, 2869.0], [2021.0, 2816.0], [2025.0, 2799.0], [2037.0, 2876.0], [2033.0, 2915.0], [1985.0, 2906.0], [1989.0, 2861.0], [1993.0, 3026.0], [1997.0, 2912.0], [2013.0, 2905.0], [2009.0, 2931.0], [2005.0, 2856.0], [2001.0, 2885.0], [2170.0, 2935.0], [2114.0, 2764.0], [2122.0, 2948.0], [2130.0, 3101.0], [2138.0, 2765.0], [2162.0, 3017.0], [2154.0, 2854.0], [2146.0, 2764.0], [2074.0, 2847.0], [2066.0, 2800.0], [2058.0, 2833.0], [2050.0, 2911.0], [2106.0, 2888.0], [2098.0, 3055.0], [2090.0, 2866.0], [2082.0, 2860.0], [2298.0, 3964.0], [2242.0, 5782.0], [2250.0, 5113.0], [2258.0, 4126.0], [2266.0, 5013.0], [2290.0, 4106.0], [2282.0, 4316.0], [2274.0, 4460.0], [2202.0, 2847.0], [2194.0, 2852.0], [2186.0, 3318.0], [2234.0, 4718.0], [2226.0, 2805.0], [2218.0, 3033.0], [2210.0, 2814.0], [2330.0, 4758.0], [2402.0, 2890.0], [2370.0, 2821.0], [2378.0, 2870.0], [2386.0, 2805.0], [2394.0, 2806.0], [2322.0, 4123.0], [2314.0, 4260.0], [2306.0, 3562.0], [2362.0, 3536.0], [2354.0, 3626.0], [2346.0, 3796.0], [2338.0, 3951.0], [2163.0, 3009.0], [2171.0, 2925.0], [2115.0, 2751.0], [2123.0, 2923.0], [2131.0, 2720.0], [2139.0, 2756.0], [2155.0, 2844.0], [2147.0, 2753.0], [2075.0, 2842.0], [2067.0, 2788.0], [2059.0, 2833.0], [2051.0, 2866.0], [2107.0, 2966.0], [2099.0, 2961.0], [2091.0, 2856.0], [2083.0, 2843.0], [2291.0, 4190.0], [2299.0, 4445.0], [2243.0, 4954.0], [2251.0, 6400.0], [2259.0, 6629.0], [2267.0, 4963.0], [2283.0, 4099.0], [2275.0, 4569.0], [2203.0, 2837.0], [2195.0, 2851.0], [2187.0, 3062.0], [2179.0, 3408.5], [2227.0, 2762.0], [2219.0, 3001.0], [2211.0, 2791.0], [2403.0, 2881.0], [2331.0, 4942.0], [2371.0, 2818.0], [2379.0, 2853.0], [2387.0, 2764.0], [2395.0, 2803.0], [2323.0, 5088.0], [2307.0, 4362.0], [2363.0, 3526.0], [2355.0, 3737.0], [2347.0, 3908.0], [2339.0, 3950.0], [541.0, 2799.0], [543.0, 2783.0], [539.0, 2803.0], [537.0, 2839.0], [535.0, 2771.0], [533.0, 2813.0], [531.0, 2826.0], [529.0, 2893.0], [527.0, 2780.0], [513.0, 2848.0], [519.0, 2753.0], [515.0, 2821.0], [525.0, 2791.0], [523.0, 2801.0], [521.0, 2811.0], [573.0, 2620.0], [575.0, 2529.0], [571.0, 2682.0], [569.0, 2842.0], [567.0, 2669.0], [565.0, 2742.0], [563.0, 2751.0], [561.0, 2577.0], [559.0, 2812.0], [547.0, 3206.0], [545.0, 3300.0], [551.0, 2818.0], [549.0, 2838.0], [557.0, 2851.0], [555.0, 2869.0], [553.0, 2700.0], [605.0, 2819.0], [607.0, 2754.0], [603.0, 2830.0], [601.0, 2838.0], [597.0, 2902.0], [595.0, 2957.0], [593.0, 2925.0], [591.0, 2745.0], [579.0, 2901.0], [577.0, 2914.0], [583.0, 2772.0], [581.0, 2795.0], [589.0, 2773.0], [587.0, 2797.0], [585.0, 2808.0], [637.0, 2752.0], [639.0, 2712.0], [635.0, 2765.0], [633.0, 2783.0], [631.0, 2662.0], [629.0, 2690.0], [627.0, 2716.0], [625.0, 2746.0], [623.0, 2761.0], [611.0, 2969.0], [609.0, 3017.0], [615.0, 2909.0], [613.0, 2922.0], [621.0, 2807.0], [619.0, 2855.0], [617.0, 2887.0], [669.0, 2734.0], [671.0, 2701.0], [667.0, 2742.0], [665.0, 2645.0], [663.0, 2650.0], [661.0, 2664.0], [659.0, 2695.0], [657.0, 2791.0], [655.0, 2752.0], [643.0, 2902.0], [641.0, 2925.0], [647.0, 2839.0], [645.0, 2860.0], [653.0, 2797.0], [651.0, 2818.0], [649.0, 2832.0], [701.0, 2834.0], [703.0, 2785.0], [699.0, 2857.0], [697.0, 2867.0], [695.0, 2902.0], [693.0, 2922.0], [691.0, 3191.0], [689.0, 3257.0], [687.0, 3290.0], [675.0, 2772.0], [673.0, 2853.0], [679.0, 2729.0], [677.0, 2746.0], [685.0, 3330.0], [683.0, 3337.0], [681.0, 3323.0], [733.0, 2748.0], [735.0, 2696.0], [731.0, 2768.0], [729.0, 2793.0], [727.0, 2773.0], [725.0, 2784.0], [723.0, 2801.0], [721.0, 2810.0], [719.0, 2778.0], [707.0, 2934.0], [711.0, 2935.0], [709.0, 2967.0], [717.0, 2793.0], [715.0, 2841.0], [713.0, 2867.0], [765.0, 2832.0], [767.0, 2744.0], [763.0, 2845.0], [761.0, 2868.0], [759.0, 2691.0], [757.0, 2785.0], [755.0, 2857.0], [753.0, 2890.0], [751.0, 2753.0], [739.0, 2752.0], [737.0, 2798.0], [743.0, 2728.0], [741.0, 2742.0], [749.0, 2792.0], [747.0, 2828.0], [745.0, 2844.0], [797.0, 2976.5], [799.0, 2911.0], [795.0, 3005.0], [793.0, 3033.0], [791.0, 2630.0], [789.0, 2750.0], [787.0, 2799.0], [785.0, 2831.0], [783.0, 2725.0], [771.0, 2816.0], [769.0, 2888.0], [775.0, 2771.0], [773.0, 2784.0], [781.0, 2751.0], [779.0, 2778.0], [777.0, 2798.0], [829.0, 2804.0], [831.0, 2777.0], [827.0, 2831.0], [825.0, 2854.0], [823.0, 2807.0], [821.0, 2825.0], [819.0, 2828.0], [817.0, 2852.0], [815.0, 2763.0], [803.0, 2885.0], [801.0, 2925.0], [807.0, 2864.0], [805.0, 2854.0], [813.0, 2772.0], [811.0, 2805.0], [809.0, 2813.0], [861.0, 3295.0], [863.0, 3048.0], [849.0, 3482.0], [851.0, 2892.0], [853.0, 3459.0], [859.0, 3357.0], [857.0, 3349.0], [847.0, 2915.0], [833.0, 3950.0], [835.0, 3758.0], [837.0, 2865.0], [839.0, 2849.0], [845.0, 2959.0], [843.0, 2972.0], [841.0, 2829.0], [855.0, 3359.0], [893.0, 2760.0], [895.0, 2740.0], [881.0, 2921.0], [883.0, 3055.0], [885.0, 2913.0], [891.0, 2775.0], [889.0, 2777.0], [879.0, 2982.0], [865.0, 2750.0], [867.0, 2725.0], [869.0, 2707.0], [877.0, 3006.0], [875.0, 3255.0], [873.0, 3056.0], [887.0, 2817.0], [925.0, 2728.0], [927.0, 2720.0], [913.0, 2789.0], [915.0, 2757.0], [923.0, 2732.0], [921.0, 2748.0], [911.0, 2775.0], [897.0, 2827.0], [899.0, 2799.0], [901.0, 2782.0], [903.0, 2741.0], [909.0, 2796.0], [907.0, 2800.0], [905.0, 2802.0], [917.0, 2729.0], [955.0, 2751.0], [953.0, 2766.0], [959.0, 2670.0], [945.0, 2928.0], [947.0, 2891.0], [949.0, 2860.0], [957.0, 2744.0], [935.0, 2682.0], [933.0, 2704.0], [931.0, 2730.0], [929.0, 2753.0], [943.0, 2681.0], [941.0, 2726.0], [939.0, 2761.0], [937.0, 2780.0], [951.0, 2743.0], [989.0, 2631.0], [991.0, 2579.0], [977.0, 2891.0], [979.0, 2867.0], [987.0, 2707.0], [985.0, 2776.0], [975.0, 2707.0], [961.0, 2896.0], [963.0, 2895.0], [965.0, 2918.0], [967.0, 2859.0], [973.0, 2718.0], [971.0, 2783.0], [969.0, 2816.0], [983.0, 2844.0], [1021.0, 2710.0], [1023.0, 2582.0], [1009.0, 2898.0], [1011.0, 2883.0], [1013.0, 2867.0], [1019.0, 2730.0], [1017.0, 2794.0], [1007.0, 2715.0], [993.0, 2905.0], [997.0, 2877.0], [999.0, 2855.0], [1005.0, 2809.0], [1003.0, 2842.0], [1001.0, 2870.0], [1015.0, 2842.0], [1082.0, 2806.0], [1086.0, 2742.0], [1058.0, 2760.0], [1062.0, 2638.0], [1066.0, 2867.0], [1078.0, 2617.0], [1074.0, 2655.0], [1054.0, 2765.0], [1026.0, 2777.0], [1030.0, 2737.0], [1034.0, 2814.0], [1038.0, 2790.0], [1050.0, 2786.0], [1046.0, 2785.0], [1042.0, 2858.0], [1070.0, 2829.0], [1146.0, 2937.0], [1150.0, 2903.0], [1122.0, 2814.0], [1126.0, 2775.0], [1130.0, 2775.0], [1142.0, 2887.0], [1138.0, 2938.0], [1118.0, 2698.0], [1094.0, 2793.0], [1098.0, 2683.0], [1102.0, 2656.0], [1114.0, 2764.0], [1110.0, 2847.0], [1106.0, 2870.0], [1134.0, 2701.0], [1210.0, 2964.0], [1214.0, 2866.0], [1186.0, 2853.0], [1190.0, 2748.0], [1194.0, 2825.0], [1206.0, 2684.0], [1202.0, 2728.0], [1182.0, 2710.0], [1154.0, 2895.0], [1158.0, 2859.0], [1162.0, 2750.0], [1166.0, 2717.0], [1174.0, 2833.0], [1170.0, 2925.0], [1198.0, 2791.0], [1274.0, 3022.0], [1278.0, 2871.0], [1254.0, 2999.0], [1258.0, 3066.0], [1270.0, 2716.0], [1266.0, 2846.0], [1246.0, 2926.0], [1222.0, 2568.0], [1218.0, 2696.0], [1226.0, 2725.0], [1230.0, 2578.0], [1242.0, 2994.0], [1238.0, 3569.0], [1234.0, 3111.0], [1262.0, 2953.0], [1338.0, 2814.0], [1342.0, 2737.0], [1314.0, 2835.0], [1318.0, 2799.0], [1322.0, 2737.0], [1334.0, 2734.0], [1330.0, 2742.0], [1310.0, 2736.0], [1286.0, 2854.0], [1282.0, 2898.0], [1290.0, 2809.0], [1294.0, 2784.0], [1306.0, 2772.0], [1302.0, 2799.0], [1298.0, 2849.0], [1326.0, 2658.0], [1402.0, 2911.0], [1406.0, 2871.0], [1378.0, 3243.0], [1382.0, 3222.0], [1386.0, 3103.0], [1398.0, 2813.0], [1394.0, 2855.0], [1374.0, 2794.0], [1346.0, 2614.0], [1350.0, 2571.0], [1354.0, 3743.0], [1358.0, 3696.0], [1370.0, 2575.0], [1366.0, 2609.0], [1362.0, 3576.0], [1390.0, 3011.0], [1466.0, 2944.0], [1470.0, 2903.0], [1442.0, 2821.0], [1450.0, 2886.0], [1462.0, 2898.0], [1458.0, 2936.0], [1438.0, 2666.0], [1410.0, 2745.0], [1414.0, 2719.0], [1418.0, 2781.0], [1422.0, 2733.0], [1434.0, 2765.0], [1430.0, 2676.0], [1426.0, 2726.0], [1454.0, 2827.0], [1530.0, 2885.0], [1534.0, 2847.0], [1506.0, 3025.0], [1510.0, 2886.0], [1514.0, 2857.0], [1526.0, 2711.0], [1522.0, 2773.0], [1502.0, 2973.0], [1474.0, 2608.0], [1478.0, 2538.0], [1482.0, 2956.0], [1486.0, 2935.0], [1498.0, 3025.0], [1494.0, 2869.0], [1490.0, 3012.0], [1518.0, 2860.0], [1594.0, 3023.0], [1598.0, 3239.0], [1570.0, 3996.0], [1574.0, 2727.0], [1578.0, 3310.0], [1590.0, 3352.0], [1586.0, 3416.0], [1566.0, 3680.0], [1542.0, 2807.0], [1546.0, 2666.0], [1550.0, 2613.0], [1562.0, 3508.0], [1558.0, 3582.0], [1554.0, 3840.0], [1582.0, 3455.0], [1658.0, 3044.0], [1634.0, 2860.0], [1638.0, 2826.0], [1642.0, 2873.0], [1646.0, 2836.0], [1654.0, 2841.0], [1650.0, 2847.0], [1614.0, 2881.0], [1610.0, 2806.0], [1606.0, 2922.0], [1602.0, 2951.0], [1630.0, 2949.0], [1622.0, 3030.0], [1618.0, 3056.0], [1726.0, 4137.0], [1698.0, 3403.0], [1702.0, 3137.0], [1706.0, 2744.0], [1710.0, 2723.0], [1722.0, 4217.0], [1718.0, 2808.0], [1714.0, 2840.0], [1666.0, 3412.0], [1670.0, 2815.0], [1674.0, 3682.0], [1678.0, 2668.0], [1694.0, 3492.0], [1690.0, 3485.0], [1686.0, 2628.0], [1682.0, 2842.0], [1786.0, 2884.0], [1762.0, 2949.0], [1774.0, 2658.0], [1790.0, 2859.0], [1782.0, 2875.0], [1778.0, 2909.0], [1742.0, 2733.0], [1738.0, 3174.0], [1734.0, 3257.0], [1730.0, 3950.0], [1758.0, 3001.0], [1754.0, 3064.0], [1750.0, 3064.0], [1746.0, 3085.0], [1854.0, 2872.0], [1826.0, 2772.0], [1830.0, 2746.0], [1834.0, 2830.0], [1838.0, 2814.0], [1850.0, 2892.0], [1846.0, 2765.0], [1842.0, 2801.0], [1822.0, 2789.0], [1794.0, 2843.0], [1798.0, 2793.0], [1802.0, 2856.0], [1806.0, 2831.0], [1818.0, 2862.0], [1814.0, 2837.0], [1810.0, 2880.0], [1918.0, 2786.0], [1890.0, 2942.0], [1894.0, 2908.0], [1898.0, 2822.0], [1902.0, 2801.0], [1914.0, 2849.0], [1910.0, 2525.0], [1906.0, 2666.0], [1858.0, 2879.0], [1862.0, 2840.0], [1870.0, 2759.0], [1886.0, 2753.0], [1882.0, 2791.0], [1878.0, 2797.0], [1874.0, 2835.0], [1982.0, 2671.0], [1954.0, 2659.0], [1958.0, 2580.0], [1962.0, 2734.0], [1966.0, 2627.0], [1978.0, 2711.0], [1974.0, 2860.0], [1970.0, 2951.0], [1922.0, 3707.0], [1926.0, 2644.0], [1930.0, 2624.0], [1934.0, 2834.0], [1950.0, 2950.0], [1946.0, 3206.0], [1942.0, 3104.0], [1938.0, 2799.0], [2046.0, 2967.0], [2018.0, 2857.0], [2022.0, 2796.0], [2026.0, 2779.0], [2030.0, 2751.0], [2042.0, 2766.0], [2038.0, 2863.0], [2034.0, 2913.0], [1986.0, 2892.0], [1990.0, 2841.0], [1994.0, 3026.0], [1998.0, 2900.0], [2014.0, 2884.0], [2010.0, 2930.0], [2006.0, 2853.0], [2002.0, 2881.0], [2164.0, 3002.0], [2156.0, 2821.0], [2172.0, 2871.0], [2116.0, 2748.0], [2124.0, 2900.0], [2132.0, 3028.0], [2140.0, 2753.0], [2148.0, 2742.0], [2076.0, 2838.0], [2068.0, 2780.0], [2060.0, 2815.0], [2052.0, 2838.0], [2108.0, 2935.0], [2100.0, 2958.0], [2092.0, 2850.0], [2084.0, 2838.0], [2292.0, 4495.0], [2284.0, 4159.0], [2300.0, 4230.0], [2244.0, 4917.0], [2252.0, 4138.0], [2260.0, 5718.0], [2268.0, 4794.0], [2276.0, 5819.0], [2204.0, 2811.0], [2188.0, 3088.0], [2180.0, 2797.0], [2236.0, 4670.0], [2228.0, 2666.0], [2220.0, 2793.0], [2212.0, 2759.0], [2332.0, 5276.0], [2404.0, 2867.0], [2372.0, 2813.0], [2380.0, 2828.0], [2396.0, 2788.0], [2324.0, 5270.0], [2316.0, 5287.5], [2308.0, 4361.0], [2364.0, 3507.0], [2356.0, 3691.0], [2348.0, 3782.0], [2340.0, 3821.0], [2165.0, 2991.0], [2117.0, 2720.0], [2125.0, 2886.0], [2133.0, 3014.0], [2141.0, 2729.0], [2173.0, 2848.0], [2157.0, 2800.0], [2149.0, 2723.0], [2077.0, 2808.0], [2069.0, 2768.0], [2053.0, 2770.0], [2109.0, 2913.0], [2101.0, 2954.0], [2093.0, 2839.0], [2085.0, 2829.0], [2293.0, 4186.0], [2245.0, 5873.0], [2253.0, 4966.0], [2261.0, 5717.0], [2269.0, 6185.0], [2301.0, 3830.0], [2285.0, 4087.0], [2277.0, 4391.0], [2205.0, 2810.0], [2197.0, 2841.5], [2189.0, 3080.0], [2181.0, 2786.0], [2237.0, 4644.0], [2229.0, 2702.0], [2221.0, 2789.0], [2213.0, 2739.0], [2325.0, 4040.0], [2405.0, 2862.0], [2373.0, 2799.0], [2381.0, 2787.0], [2389.0, 2758.0], [2397.0, 2767.0], [2317.0, 4234.0], [2365.0, 3502.0], [2357.0, 3475.0], [2349.0, 3896.0], [2341.0, 3938.0], [1079.0, 2586.0], [1075.0, 2653.0], [1087.0, 2726.0], [1059.0, 2732.0], [1063.0, 2580.0], [1067.0, 2851.0], [1083.0, 2780.0], [1039.0, 2789.0], [1035.0, 2801.0], [1031.0, 2689.0], [1027.0, 2761.0], [1055.0, 2764.0], [1051.0, 2784.0], [1047.0, 2780.0], [1043.0, 2858.0], [1071.0, 2759.0], [1143.0, 2877.0], [1139.0, 2910.0], [1151.0, 2891.0], [1123.0, 2814.0], [1127.0, 2721.0], [1131.0, 2761.0], [1147.0, 2937.0], [1103.0, 2655.0], [1099.0, 2678.0], [1095.0, 2690.0], [1091.0, 2855.0], [1119.0, 2696.0], [1115.0, 2751.0], [1111.0, 2840.0], [1107.0, 2862.0], [1135.0, 2667.0], [1211.0, 2929.0], [1215.0, 2853.0], [1187.0, 2845.0], [1191.0, 2736.0], [1195.0, 2813.0], [1207.0, 2628.0], [1203.0, 2727.0], [1183.0, 2705.0], [1155.0, 2890.0], [1159.0, 2840.0], [1167.0, 2699.0], [1179.0, 2731.5], [1175.0, 2810.0], [1171.0, 2891.0], [1199.0, 2788.0], [1267.0, 2841.0], [1275.0, 3006.0], [1251.0, 3061.5], [1255.0, 2987.0], [1259.0, 2944.0], [1271.0, 2681.0], [1231.0, 2559.0], [1227.0, 2697.0], [1223.0, 2526.0], [1219.0, 2608.0], [1247.0, 2889.0], [1243.0, 3448.0], [1239.0, 3037.0], [1235.0, 3109.0], [1263.0, 2985.0], [1339.0, 2800.0], [1343.0, 2725.0], [1315.0, 2835.0], [1319.0, 2765.0], [1323.0, 2698.0], [1335.0, 2713.0], [1331.0, 2742.0], [1311.0, 2723.0], [1283.0, 2893.0], [1287.0, 2815.0], [1291.0, 2805.0], [1295.0, 2765.0], [1307.0, 2770.0], [1303.0, 2783.0], [1299.0, 2847.0], [1327.0, 2658.0], [1403.0, 2897.0], [1407.0, 2737.0], [1379.0, 3243.0], [1383.0, 3121.0], [1387.0, 3059.0], [1399.0, 2795.0], [1395.0, 2855.0], [1375.0, 2784.0], [1347.0, 2612.0], [1351.0, 2541.0], [1355.0, 3742.0], [1359.0, 3641.0], [1367.0, 2590.0], [1363.0, 3538.0], [1391.0, 2915.0], [1467.0, 2942.0], [1471.0, 2886.0], [1443.0, 2820.0], [1447.0, 2707.5], [1451.0, 2872.0], [1463.0, 2884.0], [1459.0, 2928.0], [1439.0, 2658.0], [1411.0, 2730.0], [1415.0, 2641.0], [1419.0, 2762.0], [1423.0, 2701.0], [1435.0, 2762.0], [1431.0, 2641.0], [1427.0, 2693.0], [1455.0, 2814.0], [1531.0, 2879.0], [1535.0, 2798.0], [1507.0, 2917.0], [1511.0, 2969.0], [1515.0, 2929.0], [1527.0, 2706.0], [1523.0, 2744.0], [1503.0, 2969.0], [1475.0, 2598.0], [1479.0, 2536.0], [1483.0, 2946.0], [1487.0, 3109.0], [1499.0, 3013.0], [1495.0, 2846.0], [1491.0, 2825.0], [1519.0, 2795.0], [1595.0, 3252.0], [1599.0, 3213.0], [1571.0, 3601.0], [1575.0, 2721.0], [1579.0, 3309.0], [1591.0, 3260.0], [1587.0, 3238.0], [1567.0, 3413.0], [1539.0, 2819.5], [1543.0, 2796.0], [1547.0, 2656.0], [1551.0, 2609.0], [1563.0, 3507.0], [1559.0, 3821.0], [1555.0, 3591.0], [1583.0, 3452.0], [1663.0, 3464.5], [1659.0, 3003.0], [1635.0, 2851.0], [1639.0, 2790.0], [1643.0, 2858.0], [1647.0, 2716.0], [1655.0, 2841.0], [1651.0, 2847.0], [1615.0, 2866.0], [1611.0, 2974.0], [1631.0, 2912.0], [1603.0, 2940.0], [1607.0, 2841.0], [1627.0, 2976.0], [1623.0, 2935.0], [1619.0, 3045.0], [1723.0, 2790.0], [1727.0, 4016.0], [1699.0, 3254.0], [1703.0, 3121.0], [1711.0, 2677.0], [1719.0, 4221.0], [1715.0, 2827.0], [1695.0, 3519.0], [1667.0, 3395.0], [1671.0, 3381.0], [1675.0, 3657.0], [1679.0, 2666.0], [1691.0, 3540.0], [1687.0, 2603.0], [1683.0, 2755.0], [1779.0, 2907.0], [1791.0, 2853.0], [1763.0, 2877.0], [1771.0, 2742.5], [1775.0, 2644.0], [1783.0, 2857.0], [1743.0, 2692.0], [1739.0, 3171.0], [1735.0, 3224.0], [1731.0, 3890.0], [1759.0, 2944.0], [1755.0, 3063.0], [1751.0, 3063.0], [1747.0, 3084.0], [1851.0, 2887.0], [1855.0, 2858.0], [1827.0, 2747.0], [1831.0, 2737.0], [1835.0, 2828.0], [1839.0, 2793.0], [1847.0, 2732.0], [1843.0, 2792.0], [1795.0, 2833.0], [1799.0, 2789.0], [1803.0, 2855.0], [1807.0, 2820.0], [1819.0, 2819.0], [1815.0, 2830.0], [1811.0, 2860.0], [1915.0, 2841.0], [1919.0, 2779.0], [1891.0, 2596.0], [1895.0, 2859.0], [1899.0, 2866.0], [1903.0, 2797.0], [1911.0, 2425.0], [1907.0, 2627.0], [1887.0, 2652.0], [1859.0, 2875.0], [1863.0, 2839.0], [1867.0, 2839.0], [1871.0, 2758.0], [1883.0, 2763.0], [1875.0, 2812.0], [1979.0, 2710.0], [1983.0, 2633.0], [1959.0, 2509.0], [1963.0, 2722.0], [1967.0, 2613.0], [1975.0, 2819.0], [1971.0, 2915.0], [1951.0, 2869.0], [1923.0, 3696.0], [1927.0, 2638.0], [1931.0, 2621.0], [1935.0, 2819.0], [1947.0, 3050.0], [1943.0, 3245.0], [1939.0, 3131.0], [2043.0, 2764.0], [2047.0, 2726.0], [2019.0, 2836.0], [2023.0, 2793.0], [2027.0, 2772.0], [2031.0, 2726.0], [2039.0, 2862.0], [2035.0, 2889.0], [2015.0, 2877.0], [1987.0, 2878.0], [1991.0, 2839.0], [1995.0, 2936.0], [1999.0, 2900.0], [2011.0, 2928.0], [2007.0, 2835.0], [2003.0, 2871.0], [2166.0, 2978.0], [2174.0, 3439.0], [2118.0, 2703.0], [2126.0, 2833.0], [2134.0, 3005.0], [2142.0, 2703.0], [2158.0, 2744.0], [2150.0, 2697.0], [2078.0, 2805.0], [2070.0, 2763.0], [2062.0, 2811.0], [2054.0, 2754.0], [2110.0, 2894.0], [2102.0, 2947.0], [2094.0, 2813.0], [2086.0, 2735.0], [2294.0, 3921.0], [2302.0, 5783.0], [2246.0, 5735.0], [2254.0, 5734.0], [2262.0, 5072.0], [2270.0, 4770.0], [2286.0, 4656.0], [2206.0, 2793.0], [2198.0, 2820.0], [2190.0, 3051.0], [2182.0, 3414.0], [2238.0, 4619.0], [2230.0, 2697.0], [2214.0, 2735.0], [2334.0, 4782.5], [2374.0, 2798.0], [2382.0, 2770.0], [2390.0, 2756.0], [2406.0, 2847.0], [2326.0, 4116.0], [2318.0, 5269.0], [2310.0, 4841.5], [2366.0, 3380.0], [2358.0, 3592.0], [2350.0, 3890.0], [2342.0, 3935.0], [2398.0, 2721.0], [2167.0, 2973.0], [2175.0, 3465.0], [2119.0, 2702.0], [2127.0, 2806.0], [2135.0, 2962.0], [2143.0, 2697.0], [2159.0, 2711.0], [2079.0, 2772.0], [2071.0, 2751.0], [2063.0, 2810.0], [2055.0, 2739.0], [2111.0, 2884.0], [2103.0, 2937.0], [2095.0, 2795.0], [2087.0, 2732.0], [2295.0, 4486.0], [2303.0, 3647.0], [2247.0, 4886.0], [2255.0, 5732.0], [2263.0, 4108.0], [2271.0, 6027.0], [2287.0, 4140.0], [2279.0, 4404.5], [2207.0, 2768.0], [2199.0, 2814.0], [2191.0, 3072.0], [2183.0, 3374.0], [2239.0, 4601.0], [2231.0, 2667.0], [2223.0, 2753.5], [2215.0, 2734.0], [2407.0, 2819.0], [2383.0, 2732.0], [2375.0, 2773.0], [2391.0, 2752.0], [2335.0, 3617.0], [2327.0, 4029.0], [2319.0, 4202.0], [2311.0, 4357.0], [2367.0, 3235.0], [2359.0, 3388.0], [2351.0, 3763.0], [2343.0, 3798.0], [2399.0, 2661.0], [1.0, 2907.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[1204.5299003322261, 2969.625830564783]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 2408.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 2361.3333333333335, "minX": 1.68303654E12, "maxY": 5370.55, "series": [{"data": [[1.68303684E12, 2937.2], [1.68303654E12, 3104.733333333333], [1.68303666E12, 5370.55], [1.6830366E12, 5118.666666666667], [1.68303678E12, 4363.0], [1.68303672E12, 4363.2]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.68303684E12, 2361.3333333333335], [1.68303654E12, 2496.266666666667], [1.68303666E12, 4317.866666666667], [1.6830366E12, 4115.466666666666], [1.68303678E12, 3508.266666666667], [1.68303672E12, 3508.266666666667]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68303684E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 2824.1033653846152, "minX": 1.68303654E12, "maxY": 3610.8513513513512, "series": [{"data": [[1.68303684E12, 2899.9357142857125], [1.68303654E12, 3610.8513513513512], [1.68303666E12, 2898.0546875000005], [1.6830366E12, 2906.8586065573777], [1.68303678E12, 2867.5168269230758], [1.68303672E12, 2824.1033653846152]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68303684E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 2824.086538461537, "minX": 1.68303654E12, "maxY": 3610.6114864864862, "series": [{"data": [[1.68303684E12, 2899.921428571429], [1.68303654E12, 3610.6114864864862], [1.68303666E12, 2898.033203125001], [1.6830366E12, 2906.809426229508], [1.68303678E12, 2867.5048076923094], [1.68303672E12, 2824.086538461537]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68303684E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.47355769230769224, "minX": 1.68303654E12, "maxY": 3.6486486486486513, "series": [{"data": [[1.68303684E12, 0.5892857142857143], [1.68303654E12, 3.6486486486486513], [1.68303666E12, 0.6328124999999991], [1.6830366E12, 0.7520491803278686], [1.68303678E12, 0.49038461538461525], [1.68303672E12, 0.47355769230769224]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68303684E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 2330.0, "minX": 1.68303654E12, "maxY": 6629.0, "series": [{"data": [[1.68303684E12, 4245.0], [1.68303654E12, 6629.0], [1.68303666E12, 4041.0], [1.6830366E12, 4221.0], [1.68303678E12, 4259.0], [1.68303672E12, 3950.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.68303684E12, 3148.0], [1.68303654E12, 5056.6], [1.68303666E12, 3250.8], [1.6830366E12, 3206.1], [1.68303678E12, 3061.6000000000004], [1.68303672E12, 2939.3]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.68303684E12, 4189.79], [1.68303654E12, 6191.449999999994], [1.68303666E12, 3823.61], [1.6830366E12, 4139.75], [1.68303678E12, 4092.49], [1.68303672E12, 3668.7499999999964]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.68303684E12, 3217.5499999999997], [1.68303654E12, 5727.75], [1.68303666E12, 3570.0499999999997], [1.6830366E12, 3519.0], [1.68303678E12, 3274.7999999999997], [1.68303672E12, 3104.15]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.68303684E12, 2490.0], [1.68303654E12, 2580.0], [1.68303666E12, 2374.0], [1.6830366E12, 2330.0], [1.68303678E12, 2519.0], [1.68303672E12, 2413.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.68303684E12, 2862.0], [1.68303654E12, 3117.0], [1.68303666E12, 2841.0], [1.6830366E12, 2845.0], [1.68303678E12, 2824.5], [1.68303672E12, 2791.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68303684E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 2704.0, "minX": 1.0, "maxY": 4539.5, "series": [{"data": [[2.0, 2815.0], [32.0, 3262.5], [3.0, 2935.0], [4.0, 2748.0], [5.0, 2843.0], [6.0, 2761.0], [7.0, 2851.0], [8.0, 2800.0], [9.0, 2854.5], [10.0, 2763.0], [11.0, 2866.0], [12.0, 2818.5], [13.0, 2849.5], [14.0, 2849.0], [15.0, 2863.5], [16.0, 2839.0], [1.0, 2704.0], [17.0, 2835.5], [18.0, 2862.0], [19.0, 3507.0], [20.0, 2886.0], [21.0, 2800.0], [22.0, 2897.5], [24.0, 2847.5], [25.0, 2823.5], [28.0, 3202.0], [29.0, 4539.5], [30.0, 2833.5], [31.0, 3047.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 32.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 2704.0, "minX": 1.0, "maxY": 4539.5, "series": [{"data": [[2.0, 2815.0], [32.0, 3262.5], [3.0, 2935.0], [4.0, 2748.0], [5.0, 2843.0], [6.0, 2761.0], [7.0, 2851.0], [8.0, 2800.0], [9.0, 2854.5], [10.0, 2763.0], [11.0, 2866.0], [12.0, 2818.5], [13.0, 2849.5], [14.0, 2849.0], [15.0, 2863.5], [16.0, 2839.0], [1.0, 2704.0], [17.0, 2835.5], [18.0, 2862.0], [19.0, 3507.0], [20.0, 2886.0], [21.0, 2800.0], [22.0, 2897.5], [24.0, 2847.5], [25.0, 2823.5], [28.0, 3202.0], [29.0, 4539.5], [30.0, 2833.5], [31.0, 3047.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 32.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 4.4, "minX": 1.68303654E12, "maxY": 8.666666666666666, "series": [{"data": [[1.68303684E12, 4.4], [1.68303654E12, 5.2], [1.68303666E12, 8.0], [1.6830366E12, 8.666666666666666], [1.68303678E12, 6.533333333333333], [1.68303672E12, 7.333333333333333]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68303684E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 4.666666666666667, "minX": 1.68303654E12, "maxY": 8.533333333333333, "series": [{"data": [[1.68303684E12, 4.666666666666667], [1.68303654E12, 4.933333333333334], [1.68303666E12, 8.533333333333333], [1.6830366E12, 8.133333333333333], [1.68303678E12, 6.933333333333334], [1.68303672E12, 6.933333333333334]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68303684E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 4.666666666666667, "minX": 1.68303654E12, "maxY": 8.533333333333333, "series": [{"data": [[1.68303684E12, 4.666666666666667], [1.68303654E12, 4.933333333333334], [1.68303666E12, 8.533333333333333], [1.6830366E12, 8.133333333333333], [1.68303678E12, 6.933333333333334], [1.68303672E12, 6.933333333333334]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68303684E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 4.666666666666667, "minX": 1.68303654E12, "maxY": 8.533333333333333, "series": [{"data": [[1.68303684E12, 4.666666666666667], [1.68303654E12, 4.933333333333334], [1.68303666E12, 8.533333333333333], [1.6830366E12, 8.133333333333333], [1.68303678E12, 6.933333333333334], [1.68303672E12, 6.933333333333334]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68303684E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

