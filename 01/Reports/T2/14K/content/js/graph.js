/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 3.0, "minX": 0.0, "maxY": 249763.0, "series": [{"data": [[0.0, 3.0], [0.1, 7.0], [0.2, 8.0], [0.3, 10.0], [0.4, 11.0], [0.5, 13.0], [0.6, 14.0], [0.7, 14.0], [0.8, 15.0], [0.9, 16.0], [1.0, 18.0], [1.1, 19.0], [1.2, 20.0], [1.3, 21.0], [1.4, 22.0], [1.5, 23.0], [1.6, 24.0], [1.7, 25.0], [1.8, 25.0], [1.9, 26.0], [2.0, 27.0], [2.1, 28.0], [2.2, 28.0], [2.3, 29.0], [2.4, 30.0], [2.5, 30.0], [2.6, 31.0], [2.7, 31.0], [2.8, 32.0], [2.9, 32.0], [3.0, 32.0], [3.1, 33.0], [3.2, 33.0], [3.3, 33.0], [3.4, 34.0], [3.5, 34.0], [3.6, 35.0], [3.7, 35.0], [3.8, 35.0], [3.9, 36.0], [4.0, 36.0], [4.1, 36.0], [4.2, 37.0], [4.3, 37.0], [4.4, 37.0], [4.5, 38.0], [4.6, 38.0], [4.7, 38.0], [4.8, 39.0], [4.9, 39.0], [5.0, 39.0], [5.1, 40.0], [5.2, 40.0], [5.3, 40.0], [5.4, 41.0], [5.5, 41.0], [5.6, 41.0], [5.7, 41.0], [5.8, 42.0], [5.9, 42.0], [6.0, 43.0], [6.1, 43.0], [6.2, 43.0], [6.3, 44.0], [6.4, 44.0], [6.5, 44.0], [6.6, 44.0], [6.7, 45.0], [6.8, 45.0], [6.9, 45.0], [7.0, 46.0], [7.1, 46.0], [7.2, 46.0], [7.3, 47.0], [7.4, 47.0], [7.5, 47.0], [7.6, 48.0], [7.7, 48.0], [7.8, 48.0], [7.9, 49.0], [8.0, 49.0], [8.1, 49.0], [8.2, 50.0], [8.3, 50.0], [8.4, 50.0], [8.5, 51.0], [8.6, 51.0], [8.7, 51.0], [8.8, 52.0], [8.9, 52.0], [9.0, 52.0], [9.1, 52.0], [9.2, 53.0], [9.3, 53.0], [9.4, 53.0], [9.5, 54.0], [9.6, 54.0], [9.7, 54.0], [9.8, 55.0], [9.9, 55.0], [10.0, 55.0], [10.1, 56.0], [10.2, 56.0], [10.3, 56.0], [10.4, 57.0], [10.5, 57.0], [10.6, 58.0], [10.7, 58.0], [10.8, 58.0], [10.9, 59.0], [11.0, 59.0], [11.1, 60.0], [11.2, 60.0], [11.3, 61.0], [11.4, 61.0], [11.5, 62.0], [11.6, 62.0], [11.7, 62.0], [11.8, 63.0], [11.9, 63.0], [12.0, 63.0], [12.1, 64.0], [12.2, 64.0], [12.3, 65.0], [12.4, 65.0], [12.5, 66.0], [12.6, 66.0], [12.7, 66.0], [12.8, 67.0], [12.9, 67.0], [13.0, 68.0], [13.1, 68.0], [13.2, 68.0], [13.3, 69.0], [13.4, 69.0], [13.5, 70.0], [13.6, 70.0], [13.7, 70.0], [13.8, 71.0], [13.9, 71.0], [14.0, 71.0], [14.1, 72.0], [14.2, 72.0], [14.3, 73.0], [14.4, 73.0], [14.5, 73.0], [14.6, 74.0], [14.7, 74.0], [14.8, 75.0], [14.9, 75.0], [15.0, 75.0], [15.1, 76.0], [15.2, 76.0], [15.3, 77.0], [15.4, 77.0], [15.5, 78.0], [15.6, 78.0], [15.7, 78.0], [15.8, 79.0], [15.9, 79.0], [16.0, 80.0], [16.1, 80.0], [16.2, 80.0], [16.3, 81.0], [16.4, 81.0], [16.5, 81.0], [16.6, 82.0], [16.7, 82.0], [16.8, 82.0], [16.9, 83.0], [17.0, 83.0], [17.1, 83.0], [17.2, 84.0], [17.3, 84.0], [17.4, 84.0], [17.5, 85.0], [17.6, 85.0], [17.7, 85.0], [17.8, 86.0], [17.9, 86.0], [18.0, 87.0], [18.1, 87.0], [18.2, 87.0], [18.3, 88.0], [18.4, 88.0], [18.5, 89.0], [18.6, 89.0], [18.7, 89.0], [18.8, 89.0], [18.9, 90.0], [19.0, 90.0], [19.1, 90.0], [19.2, 91.0], [19.3, 91.0], [19.4, 91.0], [19.5, 92.0], [19.6, 92.0], [19.7, 92.0], [19.8, 93.0], [19.9, 93.0], [20.0, 93.0], [20.1, 94.0], [20.2, 94.0], [20.3, 94.0], [20.4, 95.0], [20.5, 95.0], [20.6, 95.0], [20.7, 96.0], [20.8, 96.0], [20.9, 96.0], [21.0, 96.0], [21.1, 97.0], [21.2, 97.0], [21.3, 97.0], [21.4, 98.0], [21.5, 98.0], [21.6, 98.0], [21.7, 99.0], [21.8, 99.0], [21.9, 99.0], [22.0, 100.0], [22.1, 100.0], [22.2, 100.0], [22.3, 101.0], [22.4, 101.0], [22.5, 101.0], [22.6, 101.0], [22.7, 101.0], [22.8, 102.0], [22.9, 102.0], [23.0, 102.0], [23.1, 103.0], [23.2, 103.0], [23.3, 103.0], [23.4, 104.0], [23.5, 104.0], [23.6, 104.0], [23.7, 105.0], [23.8, 105.0], [23.9, 106.0], [24.0, 106.0], [24.1, 106.0], [24.2, 107.0], [24.3, 107.0], [24.4, 107.0], [24.5, 107.0], [24.6, 108.0], [24.7, 108.0], [24.8, 108.0], [24.9, 109.0], [25.0, 109.0], [25.1, 109.0], [25.2, 110.0], [25.3, 110.0], [25.4, 110.0], [25.5, 110.0], [25.6, 111.0], [25.7, 111.0], [25.8, 111.0], [25.9, 112.0], [26.0, 112.0], [26.1, 113.0], [26.2, 113.0], [26.3, 113.0], [26.4, 114.0], [26.5, 114.0], [26.6, 114.0], [26.7, 115.0], [26.8, 115.0], [26.9, 115.0], [27.0, 115.0], [27.1, 116.0], [27.2, 116.0], [27.3, 116.0], [27.4, 116.0], [27.5, 116.0], [27.6, 117.0], [27.7, 117.0], [27.8, 117.0], [27.9, 117.0], [28.0, 118.0], [28.1, 118.0], [28.2, 118.0], [28.3, 119.0], [28.4, 119.0], [28.5, 119.0], [28.6, 120.0], [28.7, 120.0], [28.8, 121.0], [28.9, 121.0], [29.0, 121.0], [29.1, 122.0], [29.2, 122.0], [29.3, 123.0], [29.4, 123.0], [29.5, 123.0], [29.6, 124.0], [29.7, 124.0], [29.8, 124.0], [29.9, 124.0], [30.0, 125.0], [30.1, 125.0], [30.2, 125.0], [30.3, 125.0], [30.4, 126.0], [30.5, 126.0], [30.6, 126.0], [30.7, 126.0], [30.8, 127.0], [30.9, 127.0], [31.0, 127.0], [31.1, 128.0], [31.2, 128.0], [31.3, 129.0], [31.4, 129.0], [31.5, 129.0], [31.6, 130.0], [31.7, 130.0], [31.8, 131.0], [31.9, 131.0], [32.0, 131.0], [32.1, 132.0], [32.2, 132.0], [32.3, 132.0], [32.4, 133.0], [32.5, 133.0], [32.6, 133.0], [32.7, 134.0], [32.8, 134.0], [32.9, 135.0], [33.0, 135.0], [33.1, 136.0], [33.2, 136.0], [33.3, 136.0], [33.4, 137.0], [33.5, 137.0], [33.6, 138.0], [33.7, 138.0], [33.8, 139.0], [33.9, 139.0], [34.0, 140.0], [34.1, 140.0], [34.2, 141.0], [34.3, 141.0], [34.4, 142.0], [34.5, 142.0], [34.6, 143.0], [34.7, 143.0], [34.8, 143.0], [34.9, 144.0], [35.0, 145.0], [35.1, 145.0], [35.2, 146.0], [35.3, 147.0], [35.4, 147.0], [35.5, 148.0], [35.6, 149.0], [35.7, 150.0], [35.8, 150.0], [35.9, 151.0], [36.0, 151.0], [36.1, 152.0], [36.2, 152.0], [36.3, 153.0], [36.4, 153.0], [36.5, 154.0], [36.6, 155.0], [36.7, 156.0], [36.8, 157.0], [36.9, 158.0], [37.0, 159.0], [37.1, 159.0], [37.2, 161.0], [37.3, 162.0], [37.4, 163.0], [37.5, 164.0], [37.6, 166.0], [37.7, 167.0], [37.8, 169.0], [37.9, 170.0], [38.0, 171.0], [38.1, 172.0], [38.2, 173.0], [38.3, 174.0], [38.4, 175.0], [38.5, 176.0], [38.6, 177.0], [38.7, 179.0], [38.8, 180.0], [38.9, 181.0], [39.0, 182.0], [39.1, 183.0], [39.2, 185.0], [39.3, 188.0], [39.4, 190.0], [39.5, 191.0], [39.6, 192.0], [39.7, 194.0], [39.8, 197.0], [39.9, 200.0], [40.0, 203.0], [40.1, 206.0], [40.2, 210.0], [40.3, 213.0], [40.4, 216.0], [40.5, 219.0], [40.6, 223.0], [40.7, 226.0], [40.8, 229.0], [40.9, 231.0], [41.0, 232.0], [41.1, 235.0], [41.2, 237.0], [41.3, 242.0], [41.4, 250.0], [41.5, 253.0], [41.6, 257.0], [41.7, 266.0], [41.8, 269.0], [41.9, 278.0], [42.0, 282.0], [42.1, 292.0], [42.2, 314.0], [42.3, 326.0], [42.4, 334.0], [42.5, 347.0], [42.6, 349.0], [42.7, 352.0], [42.8, 354.0], [42.9, 357.0], [43.0, 360.0], [43.1, 365.0], [43.2, 373.0], [43.3, 378.0], [43.4, 380.0], [43.5, 381.0], [43.6, 383.0], [43.7, 388.0], [43.8, 390.0], [43.9, 393.0], [44.0, 395.0], [44.1, 396.0], [44.2, 397.0], [44.3, 399.0], [44.4, 401.0], [44.5, 402.0], [44.6, 403.0], [44.7, 404.0], [44.8, 405.0], [44.9, 407.0], [45.0, 411.0], [45.1, 412.0], [45.2, 414.0], [45.3, 415.0], [45.4, 417.0], [45.5, 418.0], [45.6, 419.0], [45.7, 420.0], [45.8, 420.0], [45.9, 422.0], [46.0, 423.0], [46.1, 423.0], [46.2, 424.0], [46.3, 424.0], [46.4, 425.0], [46.5, 425.0], [46.6, 426.0], [46.7, 426.0], [46.8, 427.0], [46.9, 427.0], [47.0, 428.0], [47.1, 428.0], [47.2, 428.0], [47.3, 429.0], [47.4, 429.0], [47.5, 430.0], [47.6, 430.0], [47.7, 431.0], [47.8, 431.0], [47.9, 432.0], [48.0, 433.0], [48.1, 434.0], [48.2, 434.0], [48.3, 435.0], [48.4, 436.0], [48.5, 437.0], [48.6, 437.0], [48.7, 438.0], [48.8, 440.0], [48.9, 441.0], [49.0, 442.0], [49.1, 443.0], [49.2, 444.0], [49.3, 444.0], [49.4, 445.0], [49.5, 445.0], [49.6, 446.0], [49.7, 447.0], [49.8, 448.0], [49.9, 449.0], [50.0, 450.0], [50.1, 451.0], [50.2, 451.0], [50.3, 452.0], [50.4, 453.0], [50.5, 453.0], [50.6, 453.0], [50.7, 454.0], [50.8, 454.0], [50.9, 455.0], [51.0, 456.0], [51.1, 457.0], [51.2, 458.0], [51.3, 459.0], [51.4, 459.0], [51.5, 460.0], [51.6, 460.0], [51.7, 461.0], [51.8, 461.0], [51.9, 461.0], [52.0, 462.0], [52.1, 462.0], [52.2, 462.0], [52.3, 463.0], [52.4, 464.0], [52.5, 464.0], [52.6, 465.0], [52.7, 466.0], [52.8, 466.0], [52.9, 467.0], [53.0, 467.0], [53.1, 468.0], [53.2, 468.0], [53.3, 469.0], [53.4, 469.0], [53.5, 469.0], [53.6, 470.0], [53.7, 470.0], [53.8, 470.0], [53.9, 470.0], [54.0, 471.0], [54.1, 471.0], [54.2, 471.0], [54.3, 471.0], [54.4, 472.0], [54.5, 472.0], [54.6, 472.0], [54.7, 473.0], [54.8, 473.0], [54.9, 473.0], [55.0, 474.0], [55.1, 474.0], [55.2, 474.0], [55.3, 475.0], [55.4, 475.0], [55.5, 476.0], [55.6, 476.0], [55.7, 476.0], [55.8, 477.0], [55.9, 477.0], [56.0, 478.0], [56.1, 478.0], [56.2, 479.0], [56.3, 479.0], [56.4, 480.0], [56.5, 480.0], [56.6, 481.0], [56.7, 481.0], [56.8, 481.0], [56.9, 481.0], [57.0, 482.0], [57.1, 482.0], [57.2, 482.0], [57.3, 483.0], [57.4, 483.0], [57.5, 483.0], [57.6, 484.0], [57.7, 484.0], [57.8, 484.0], [57.9, 485.0], [58.0, 485.0], [58.1, 485.0], [58.2, 486.0], [58.3, 486.0], [58.4, 486.0], [58.5, 486.0], [58.6, 487.0], [58.7, 487.0], [58.8, 487.0], [58.9, 488.0], [59.0, 488.0], [59.1, 488.0], [59.2, 489.0], [59.3, 489.0], [59.4, 489.0], [59.5, 490.0], [59.6, 490.0], [59.7, 490.0], [59.8, 490.0], [59.9, 491.0], [60.0, 491.0], [60.1, 491.0], [60.2, 491.0], [60.3, 492.0], [60.4, 492.0], [60.5, 492.0], [60.6, 492.0], [60.7, 493.0], [60.8, 493.0], [60.9, 493.0], [61.0, 493.0], [61.1, 494.0], [61.2, 494.0], [61.3, 494.0], [61.4, 494.0], [61.5, 495.0], [61.6, 495.0], [61.7, 495.0], [61.8, 495.0], [61.9, 496.0], [62.0, 496.0], [62.1, 496.0], [62.2, 497.0], [62.3, 497.0], [62.4, 498.0], [62.5, 498.0], [62.6, 499.0], [62.7, 499.0], [62.8, 500.0], [62.9, 501.0], [63.0, 501.0], [63.1, 502.0], [63.2, 503.0], [63.3, 503.0], [63.4, 504.0], [63.5, 504.0], [63.6, 505.0], [63.7, 505.0], [63.8, 505.0], [63.9, 505.0], [64.0, 506.0], [64.1, 506.0], [64.2, 506.0], [64.3, 507.0], [64.4, 507.0], [64.5, 507.0], [64.6, 507.0], [64.7, 508.0], [64.8, 508.0], [64.9, 508.0], [65.0, 509.0], [65.1, 509.0], [65.2, 510.0], [65.3, 511.0], [65.4, 513.0], [65.5, 514.0], [65.6, 514.0], [65.7, 515.0], [65.8, 515.0], [65.9, 515.0], [66.0, 516.0], [66.1, 516.0], [66.2, 517.0], [66.3, 517.0], [66.4, 518.0], [66.5, 518.0], [66.6, 519.0], [66.7, 519.0], [66.8, 520.0], [66.9, 520.0], [67.0, 521.0], [67.1, 522.0], [67.2, 523.0], [67.3, 524.0], [67.4, 525.0], [67.5, 526.0], [67.6, 526.0], [67.7, 527.0], [67.8, 527.0], [67.9, 527.0], [68.0, 528.0], [68.1, 528.0], [68.2, 528.0], [68.3, 529.0], [68.4, 529.0], [68.5, 530.0], [68.6, 530.0], [68.7, 531.0], [68.8, 531.0], [68.9, 532.0], [69.0, 533.0], [69.1, 533.0], [69.2, 534.0], [69.3, 534.0], [69.4, 535.0], [69.5, 536.0], [69.6, 537.0], [69.7, 538.0], [69.8, 540.0], [69.9, 541.0], [70.0, 542.0], [70.1, 542.0], [70.2, 543.0], [70.3, 544.0], [70.4, 544.0], [70.5, 545.0], [70.6, 546.0], [70.7, 547.0], [70.8, 548.0], [70.9, 550.0], [71.0, 553.0], [71.1, 555.0], [71.2, 556.0], [71.3, 557.0], [71.4, 558.0], [71.5, 559.0], [71.6, 559.0], [71.7, 560.0], [71.8, 560.0], [71.9, 561.0], [72.0, 562.0], [72.1, 563.0], [72.2, 565.0], [72.3, 567.0], [72.4, 568.0], [72.5, 569.0], [72.6, 570.0], [72.7, 571.0], [72.8, 573.0], [72.9, 575.0], [73.0, 576.0], [73.1, 578.0], [73.2, 579.0], [73.3, 580.0], [73.4, 583.0], [73.5, 584.0], [73.6, 585.0], [73.7, 587.0], [73.8, 588.0], [73.9, 588.0], [74.0, 589.0], [74.1, 590.0], [74.2, 596.0], [74.3, 599.0], [74.4, 600.0], [74.5, 602.0], [74.6, 604.0], [74.7, 605.0], [74.8, 606.0], [74.9, 607.0], [75.0, 608.0], [75.1, 611.0], [75.2, 614.0], [75.3, 616.0], [75.4, 618.0], [75.5, 619.0], [75.6, 620.0], [75.7, 621.0], [75.8, 622.0], [75.9, 623.0], [76.0, 624.0], [76.1, 625.0], [76.2, 626.0], [76.3, 626.0], [76.4, 627.0], [76.5, 628.0], [76.6, 629.0], [76.7, 629.0], [76.8, 630.0], [76.9, 631.0], [77.0, 632.0], [77.1, 633.0], [77.2, 635.0], [77.3, 640.0], [77.4, 643.0], [77.5, 649.0], [77.6, 654.0], [77.7, 656.0], [77.8, 659.0], [77.9, 660.0], [78.0, 661.0], [78.1, 663.0], [78.2, 667.0], [78.3, 670.0], [78.4, 673.0], [78.5, 682.0], [78.6, 695.0], [78.7, 700.0], [78.8, 703.0], [78.9, 704.0], [79.0, 705.0], [79.1, 708.0], [79.2, 714.0], [79.3, 715.0], [79.4, 717.0], [79.5, 718.0], [79.6, 721.0], [79.7, 722.0], [79.8, 723.0], [79.9, 724.0], [80.0, 725.0], [80.1, 726.0], [80.2, 727.0], [80.3, 728.0], [80.4, 738.0], [80.5, 746.0], [80.6, 748.0], [80.7, 750.0], [80.8, 752.0], [80.9, 753.0], [81.0, 754.0], [81.1, 754.0], [81.2, 755.0], [81.3, 756.0], [81.4, 758.0], [81.5, 761.0], [81.6, 762.0], [81.7, 764.0], [81.8, 775.0], [81.9, 786.0], [82.0, 789.0], [82.1, 793.0], [82.2, 795.0], [82.3, 796.0], [82.4, 799.0], [82.5, 804.0], [82.6, 806.0], [82.7, 808.0], [82.8, 809.0], [82.9, 812.0], [83.0, 816.0], [83.1, 817.0], [83.2, 818.0], [83.3, 824.0], [83.4, 827.0], [83.5, 828.0], [83.6, 829.0], [83.7, 830.0], [83.8, 832.0], [83.9, 835.0], [84.0, 838.0], [84.1, 840.0], [84.2, 841.0], [84.3, 848.0], [84.4, 850.0], [84.5, 851.0], [84.6, 852.0], [84.7, 854.0], [84.8, 855.0], [84.9, 861.0], [85.0, 864.0], [85.1, 867.0], [85.2, 868.0], [85.3, 869.0], [85.4, 871.0], [85.5, 876.0], [85.6, 879.0], [85.7, 882.0], [85.8, 885.0], [85.9, 887.0], [86.0, 889.0], [86.1, 894.0], [86.2, 898.0], [86.3, 899.0], [86.4, 900.0], [86.5, 901.0], [86.6, 903.0], [86.7, 904.0], [86.8, 906.0], [86.9, 907.0], [87.0, 911.0], [87.1, 915.0], [87.2, 920.0], [87.3, 922.0], [87.4, 928.0], [87.5, 931.0], [87.6, 935.0], [87.7, 939.0], [87.8, 942.0], [87.9, 945.0], [88.0, 951.0], [88.1, 965.0], [88.2, 975.0], [88.3, 986.0], [88.4, 995.0], [88.5, 1001.0], [88.6, 1003.0], [88.7, 1005.0], [88.8, 1011.0], [88.9, 1020.0], [89.0, 1027.0], [89.1, 1035.0], [89.2, 1041.0], [89.3, 1056.0], [89.4, 1066.0], [89.5, 1070.0], [89.6, 1072.0], [89.7, 1076.0], [89.8, 1077.0], [89.9, 1079.0], [90.0, 1081.0], [90.1, 1083.0], [90.2, 1093.0], [90.3, 1099.0], [90.4, 1102.0], [90.5, 1104.0], [90.6, 1118.0], [90.7, 1123.0], [90.8, 1127.0], [90.9, 1132.0], [91.0, 1142.0], [91.1, 1160.0], [91.2, 1163.0], [91.3, 1168.0], [91.4, 1172.0], [91.5, 1204.0], [91.6, 1219.0], [91.7, 1225.0], [91.8, 1236.0], [91.9, 1242.0], [92.0, 1244.0], [92.1, 1246.0], [92.2, 1269.0], [92.3, 1289.0], [92.4, 1333.0], [92.5, 1350.0], [92.6, 1377.0], [92.7, 1432.0], [92.8, 1552.0], [92.9, 1688.0], [93.0, 1946.0], [93.1, 2188.0], [93.2, 2361.0], [93.3, 2679.0], [93.4, 2903.0], [93.5, 3244.0], [93.6, 3787.0], [93.7, 4165.0], [93.8, 4608.0], [93.9, 5387.0], [94.0, 6392.0], [94.1, 6857.0], [94.2, 7085.0], [94.3, 7394.0], [94.4, 7631.0], [94.5, 7859.0], [94.6, 8386.0], [94.7, 8636.0], [94.8, 8904.0], [94.9, 9086.0], [95.0, 9471.0], [95.1, 9592.0], [95.2, 9837.0], [95.3, 10054.0], [95.4, 10473.0], [95.5, 10549.0], [95.6, 10982.0], [95.7, 11069.0], [95.8, 11126.0], [95.9, 11207.0], [96.0, 11682.0], [96.1, 12059.0], [96.2, 12163.0], [96.3, 12490.0], [96.4, 13381.0], [96.5, 13762.0], [96.6, 14243.0], [96.7, 14533.0], [96.8, 14855.0], [96.9, 15140.0], [97.0, 15678.0], [97.1, 15884.0], [97.2, 16353.0], [97.3, 16805.0], [97.4, 16957.0], [97.5, 17211.0], [97.6, 17759.0], [97.7, 18537.0], [97.8, 18897.0], [97.9, 19706.0], [98.0, 20121.0], [98.1, 23648.0], [98.2, 25598.0], [98.3, 28563.0], [98.4, 31786.0], [98.5, 35564.0], [98.6, 36666.0], [98.7, 38700.0], [98.8, 50182.0], [98.9, 61809.0], [99.0, 68058.0], [99.1, 73652.0], [99.2, 81591.0], [99.3, 90476.0], [99.4, 100348.0], [99.5, 100521.0], [99.6, 101348.0], [99.7, 128997.0], [99.8, 135324.0], [99.9, 148405.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 61507.0, "series": [{"data": [[0.0, 61507.0], [135200.0, 3.0], [66700.0, 1.0], [76300.0, 3.0], [79500.0, 1.0], [85900.0, 16.0], [98700.0, 1.0], [105100.0, 1.0], [108300.0, 1.0], [130700.0, 1.0], [100.0, 50260.0], [32900.0, 57.0], [36100.0, 4.0], [39300.0, 7.0], [42500.0, 6.0], [44100.0, 2.0], [45700.0, 1.0], [200.0, 6373.0], [52100.0, 1.0], [56900.0, 19.0], [55300.0, 2.0], [58500.0, 4.0], [63300.0, 50.0], [61700.0, 4.0], [64900.0, 2.0], [69000.0, 7.0], [65800.0, 1.0], [72200.0, 2.0], [300.0, 6034.0], [75400.0, 2.0], [85000.0, 8.0], [88200.0, 1.0], [91400.0, 4.0], [101000.0, 4.0], [400.0, 51601.0], [107400.0, 18.0], [110600.0, 1.0], [500.0, 32465.0], [132400.0, 1.0], [600.0, 12240.0], [700.0, 10474.0], [800.0, 10944.0], [900.0, 5983.0], [1000.0, 5180.0], [1100.0, 3312.0], [1200.0, 2332.0], [1300.0, 911.0], [1400.0, 261.0], [1500.0, 226.0], [1600.0, 229.0], [1700.0, 129.0], [1800.0, 107.0], [1900.0, 53.0], [2000.0, 136.0], [2100.0, 248.0], [136500.0, 43.0], [2200.0, 81.0], [2300.0, 87.0], [2400.0, 60.0], [2500.0, 91.0], [2600.0, 142.0], [2800.0, 115.0], [2700.0, 116.0], [2900.0, 57.0], [3000.0, 125.0], [3100.0, 62.0], [3200.0, 80.0], [3300.0, 45.0], [3400.0, 64.0], [3500.0, 70.0], [3700.0, 63.0], [3600.0, 26.0], [3800.0, 40.0], [3900.0, 64.0], [4000.0, 49.0], [4200.0, 78.0], [68100.0, 34.0], [4400.0, 40.0], [4600.0, 98.0], [71300.0, 2.0], [74500.0, 14.0], [77700.0, 4.0], [4800.0, 36.0], [5000.0, 36.0], [80900.0, 1.0], [5200.0, 40.0], [84100.0, 1.0], [5400.0, 22.0], [5600.0, 5.0], [5800.0, 34.0], [93700.0, 3.0], [90500.0, 3.0], [6000.0, 37.0], [96900.0, 2.0], [6200.0, 26.0], [100100.0, 10.0], [6400.0, 97.0], [6600.0, 36.0], [6800.0, 28.0], [7000.0, 263.0], [7200.0, 113.0], [7400.0, 121.0], [7600.0, 173.0], [7800.0, 76.0], [128900.0, 23.0], [8000.0, 31.0], [8400.0, 183.0], [8800.0, 151.0], [9200.0, 218.0], [9600.0, 82.0], [10000.0, 110.0], [10400.0, 111.0], [10800.0, 5.0], [11200.0, 256.0], [11600.0, 30.0], [12000.0, 173.0], [12400.0, 214.0], [12800.0, 41.0], [13200.0, 25.0], [13600.0, 57.0], [14000.0, 33.0], [14800.0, 254.0], [14400.0, 44.0], [15200.0, 21.0], [15600.0, 171.0], [16000.0, 67.0], [16800.0, 39.0], [17600.0, 10.0], [18400.0, 57.0], [19200.0, 6.0], [20000.0, 16.0], [20800.0, 3.0], [22400.0, 2.0], [21600.0, 3.0], [23200.0, 3.0], [24000.0, 2.0], [26400.0, 17.0], [25600.0, 5.0], [28000.0, 4.0], [28800.0, 20.0], [31200.0, 8.0], [32000.0, 40.0], [33600.0, 4.0], [36800.0, 5.0], [35200.0, 1.0], [38400.0, 7.0], [40000.0, 1.0], [163900.0, 20.0], [43200.0, 20.0], [48000.0, 32.0], [51200.0, 20.0], [64000.0, 5.0], [70400.0, 1.0], [73600.0, 6.0], [80000.0, 3.0], [83200.0, 2.0], [92800.0, 1.0], [96000.0, 2.0], [105600.0, 2.0], [102400.0, 2.0], [138500.0, 4.0], [176900.0, 157.0], [70300.0, 2.0], [73500.0, 6.0], [76700.0, 3.0], [79900.0, 2.0], [83100.0, 1.0], [95900.0, 1.0], [102300.0, 11.0], [105500.0, 1.0], [111900.0, 3.0], [115100.0, 20.0], [33100.0, 2.0], [36300.0, 6.0], [37900.0, 34.0], [39500.0, 32.0], [44300.0, 2.0], [49100.0, 2.0], [47500.0, 1.0], [52300.0, 1.0], [57100.0, 2.0], [55500.0, 2.0], [61900.0, 5.0], [65100.0, 3.0], [63500.0, 4.0], [66200.0, 4.0], [75800.0, 1.0], [85400.0, 1.0], [88600.0, 15.0], [91800.0, 4.0], [95000.0, 2.0], [98200.0, 2.0], [101400.0, 2.0], [107800.0, 24.0], [130200.0, 1.0], [68500.0, 1.0], [71700.0, 1.0], [74900.0, 2.0], [81300.0, 2.0], [78100.0, 1.0], [90900.0, 2.0], [100500.0, 108.0], [133400.0, 1.0], [16900.0, 384.0], [17700.0, 38.0], [19300.0, 2.0], [18500.0, 53.0], [20100.0, 13.0], [20900.0, 2.0], [21700.0, 5.0], [23300.0, 1.0], [24100.0, 1.0], [24900.0, 2.0], [26500.0, 36.0], [25700.0, 8.0], [27300.0, 1.0], [28900.0, 19.0], [30500.0, 18.0], [29700.0, 6.0], [31300.0, 1.0], [32100.0, 8.0], [33800.0, 3.0], [38600.0, 2.0], [37000.0, 8.0], [40200.0, 1.0], [41800.0, 1.0], [49800.0, 2.0], [53000.0, 2.0], [51400.0, 1.0], [57800.0, 4.0], [61000.0, 3.0], [64200.0, 4.0], [70800.0, 5.0], [74000.0, 17.0], [83600.0, 1.0], [96400.0, 2.0], [102800.0, 2.0], [134500.0, 1.0], [249700.0, 11.0], [70700.0, 2.0], [73900.0, 2.0], [77100.0, 2.0], [80300.0, 3.0], [83500.0, 29.0], [86700.0, 1.0], [105900.0, 1.0], [102700.0, 1.0], [112300.0, 2.0], [138600.0, 2.0], [177000.0, 13.0], [221800.0, 2.0], [33300.0, 1.0], [36500.0, 37.0], [34900.0, 1.0], [38100.0, 49.0], [39700.0, 27.0], [41300.0, 1.0], [42900.0, 3.0], [47700.0, 13.0], [49300.0, 2.0], [50900.0, 3.0], [52500.0, 2.0], [54100.0, 2.0], [57300.0, 1.0], [65300.0, 4.0], [66600.0, 1.0], [69800.0, 41.0], [79400.0, 2.0], [85800.0, 21.0], [89000.0, 1.0], [92200.0, 31.0], [95400.0, 3.0], [101800.0, 3.0], [130600.0, 29.0], [140400.0, 6.0], [131700.0, 6.0], [68900.0, 8.0], [65700.0, 1.0], [72100.0, 5.0], [84900.0, 1.0], [88100.0, 2.0], [100900.0, 3.0], [104100.0, 1.0], [116900.0, 1.0], [8500.0, 59.0], [8900.0, 227.0], [9700.0, 68.0], [148600.0, 1.0], [9300.0, 26.0], [10100.0, 144.0], [10500.0, 292.0], [10900.0, 69.0], [11700.0, 93.0], [11300.0, 20.0], [12100.0, 231.0], [12500.0, 10.0], [13300.0, 46.0], [12900.0, 21.0], [13700.0, 25.0], [14100.0, 21.0], [14500.0, 31.0], [15300.0, 29.0], [14900.0, 69.0], [15700.0, 51.0], [16100.0, 16.0], [17000.0, 8.0], [17800.0, 15.0], [18600.0, 87.0], [19400.0, 4.0], [21000.0, 8.0], [21800.0, 14.0], [23400.0, 11.0], [22600.0, 24.0], [24200.0, 12.0], [25000.0, 20.0], [26600.0, 16.0], [27400.0, 3.0], [28200.0, 3.0], [29000.0, 6.0], [31400.0, 1.0], [32200.0, 2.0], [133500.0, 1.0], [35600.0, 16.0], [37200.0, 4.0], [38800.0, 2.0], [40400.0, 5.0], [45200.0, 2.0], [46800.0, 1.0], [48400.0, 1.0], [51600.0, 3.0], [248700.0, 2.0], [64400.0, 2.0], [68000.0, 38.0], [71200.0, 1.0], [77600.0, 5.0], [80800.0, 13.0], [87200.0, 1.0], [90400.0, 1.0], [100000.0, 37.0], [109600.0, 1.0], [128800.0, 4.0], [165700.0, 2.0], [191300.0, 37.0], [71100.0, 2.0], [80700.0, 23.0], [83900.0, 1.0], [87100.0, 2.0], [90300.0, 6.0], [99900.0, 1.0], [128700.0, 2.0], [131400.0, 2.0], [144200.0, 5.0], [33500.0, 1.0], [35100.0, 4.0], [36700.0, 30.0], [38300.0, 62.0], [148300.0, 28.0], [41500.0, 1.0], [44700.0, 1.0], [47900.0, 5.0], [51100.0, 70.0], [62300.0, 2.0], [63900.0, 46.0], [65500.0, 28.0], [67000.0, 2.0], [70200.0, 1.0], [73400.0, 1.0], [79800.0, 1.0], [89400.0, 19.0], [102200.0, 4.0], [105400.0, 1.0], [108600.0, 1.0], [143700.0, 8.0], [69300.0, 3.0], [66100.0, 4.0], [72500.0, 26.0], [88500.0, 2.0], [94900.0, 2.0], [101300.0, 85.0], [104500.0, 2.0], [107700.0, 4.0], [135000.0, 25.0], [17100.0, 75.0], [17900.0, 7.0], [18700.0, 72.0], [20300.0, 47.0], [19500.0, 46.0], [21100.0, 2.0], [21900.0, 9.0], [22700.0, 2.0], [23500.0, 11.0], [24300.0, 16.0], [25100.0, 33.0], [25900.0, 19.0], [26700.0, 28.0], [28300.0, 5.0], [29100.0, 32.0], [29900.0, 2.0], [30700.0, 14.0], [31500.0, 4.0], [34200.0, 1.0], [35800.0, 88.0], [39000.0, 4.0], [42200.0, 23.0], [50200.0, 2.0], [51800.0, 5.0], [56600.0, 1.0], [61400.0, 1.0], [59800.0, 1.0], [63000.0, 1.0], [64600.0, 3.0], [68400.0, 1.0], [71600.0, 3.0], [81200.0, 1.0], [78000.0, 1.0], [94000.0, 4.0], [100400.0, 198.0], [129200.0, 1.0], [164000.0, 5.0], [176800.0, 9.0], [68300.0, 2.0], [74700.0, 44.0], [84300.0, 4.0], [87500.0, 1.0], [100300.0, 104.0], [129100.0, 25.0], [140200.0, 57.0], [191400.0, 7.0], [33700.0, 64.0], [131500.0, 1.0], [137900.0, 4.0], [35300.0, 17.0], [38500.0, 1.0], [36900.0, 7.0], [44900.0, 1.0], [43300.0, 1.0], [52900.0, 1.0], [56100.0, 2.0], [64100.0, 2.0], [67400.0, 1.0], [70600.0, 7.0], [77000.0, 2.0], [80200.0, 1.0], [83400.0, 69.0], [86600.0, 2.0], [93000.0, 1.0], [112200.0, 2.0], [148400.0, 14.0], [4100.0, 141.0], [4300.0, 69.0], [69700.0, 13.0], [72900.0, 2.0], [4500.0, 21.0], [4700.0, 43.0], [4900.0, 8.0], [5100.0, 34.0], [85700.0, 16.0], [5300.0, 24.0], [5500.0, 18.0], [5700.0, 52.0], [92100.0, 86.0], [5900.0, 22.0], [6100.0, 10.0], [6300.0, 56.0], [6500.0, 119.0], [6900.0, 27.0], [6700.0, 12.0], [7100.0, 82.0], [111300.0, 2.0], [7300.0, 62.0], [117700.0, 2.0], [7500.0, 80.0], [7900.0, 65.0], [7700.0, 122.0], [8100.0, 23.0], [8600.0, 53.0], [8200.0, 71.0], [9000.0, 65.0], [9400.0, 116.0], [9800.0, 204.0], [10200.0, 47.0], [10600.0, 128.0], [11000.0, 432.0], [11400.0, 8.0], [12200.0, 103.0], [11800.0, 18.0], [12600.0, 29.0], [13000.0, 18.0], [13400.0, 86.0], [13800.0, 95.0], [14200.0, 142.0], [14600.0, 4.0], [15000.0, 64.0], [15800.0, 191.0], [15400.0, 7.0], [16200.0, 41.0], [16400.0, 19.0], [17200.0, 132.0], [18000.0, 3.0], [18800.0, 83.0], [20400.0, 24.0], [19600.0, 115.0], [21200.0, 4.0], [22000.0, 5.0], [22800.0, 1.0], [23600.0, 45.0], [24400.0, 19.0], [25200.0, 20.0], [26000.0, 26.0], [26800.0, 2.0], [27600.0, 1.0], [28400.0, 38.0], [30000.0, 15.0], [30800.0, 10.0], [32400.0, 20.0], [32800.0, 6.0], [135100.0, 9.0], [34400.0, 14.0], [36000.0, 3.0], [39200.0, 2.0], [42400.0, 2.0], [44000.0, 1.0], [173500.0, 1.0], [47200.0, 2.0], [48800.0, 2.0], [52000.0, 3.0], [63200.0, 9.0], [61600.0, 1.0], [64800.0, 9.0], [65600.0, 2.0], [78400.0, 3.0], [84800.0, 1.0], [100800.0, 2.0], [104000.0, 2.0], [129600.0, 5.0], [135300.0, 32.0], [68700.0, 2.0], [71900.0, 2.0], [75100.0, 1.0], [81500.0, 16.0], [91100.0, 3.0], [100700.0, 2.0], [129500.0, 7.0], [33900.0, 2.0], [35500.0, 26.0], [38700.0, 7.0], [37100.0, 22.0], [48300.0, 9.0], [49900.0, 1.0], [64300.0, 3.0], [67800.0, 3.0], [71000.0, 1.0], [74200.0, 2.0], [77400.0, 1.0], [80600.0, 18.0], [87000.0, 2.0], [90200.0, 1.0], [99800.0, 1.0], [103000.0, 3.0], [128600.0, 5.0], [147600.0, 23.0], [66900.0, 1.0], [73300.0, 1.0], [70100.0, 2.0], [82900.0, 1.0], [89300.0, 19.0], [86100.0, 1.0], [136600.0, 15.0], [17300.0, 80.0], [16500.0, 23.0], [18100.0, 97.0], [18900.0, 51.0], [19700.0, 154.0], [20500.0, 3.0], [22100.0, 12.0], [22900.0, 2.0], [23700.0, 3.0], [24500.0, 17.0], [25300.0, 2.0], [26100.0, 4.0], [26900.0, 8.0], [28500.0, 3.0], [29300.0, 62.0], [30900.0, 9.0], [31700.0, 9.0], [32500.0, 2.0], [34600.0, 4.0], [33000.0, 2.0], [36200.0, 25.0], [39400.0, 10.0], [45800.0, 2.0], [52200.0, 18.0], [57000.0, 5.0], [55400.0, 7.0], [58600.0, 28.0], [61800.0, 4.0], [65000.0, 15.0], [69200.0, 1.0], [66000.0, 1.0], [72400.0, 15.0], [88400.0, 1.0], [101200.0, 40.0], [107600.0, 37.0], [114000.0, 2.0], [131300.0, 7.0], [65900.0, 2.0], [72300.0, 5.0], [75500.0, 1.0], [85100.0, 5.0], [91500.0, 2.0], [101100.0, 104.0], [107500.0, 1.0], [35700.0, 23.0], [38900.0, 1.0], [40500.0, 1.0], [42100.0, 1.0], [50100.0, 33.0], [51700.0, 4.0], [61300.0, 1.0], [64500.0, 2.0], [68200.0, 12.0], [74600.0, 35.0], [81000.0, 3.0], [84200.0, 2.0], [87400.0, 1.0], [97000.0, 1.0], [100200.0, 15.0], [103400.0, 1.0], [129000.0, 125.0], [194800.0, 1.0], [134900.0, 11.0], [147700.0, 37.0], [67300.0, 2.0], [70500.0, 2.0], [73700.0, 3.0], [76900.0, 1.0], [80100.0, 1.0], [83300.0, 2.0], [86500.0, 5.0], [92900.0, 2.0], [96100.0, 1.0], [115300.0, 3.0], [118500.0, 1.0], [8700.0, 76.0], [8300.0, 105.0], [9100.0, 5.0], [9500.0, 204.0], [9900.0, 132.0], [10300.0, 4.0], [10700.0, 14.0], [11100.0, 355.0], [11500.0, 21.0], [11900.0, 36.0], [12300.0, 5.0], [12700.0, 7.0], [13100.0, 56.0], [13500.0, 100.0], [13900.0, 76.0], [14300.0, 126.0], [14700.0, 92.0], [15100.0, 168.0], [15500.0, 4.0], [15900.0, 126.0], [16300.0, 81.0], [16600.0, 33.0], [17400.0, 39.0], [18200.0, 18.0], [19000.0, 31.0], [19800.0, 101.0], [21400.0, 5.0], [20600.0, 4.0], [22200.0, 10.0], [23000.0, 19.0], [23800.0, 49.0], [24600.0, 3.0], [27000.0, 6.0], [27800.0, 3.0], [29400.0, 5.0], [31000.0, 6.0], [32600.0, 8.0], [31800.0, 1.0], [143100.0, 20.0], [36400.0, 3.0], [38000.0, 9.0], [39600.0, 5.0], [41200.0, 4.0], [44400.0, 2.0], [47600.0, 1.0], [49200.0, 1.0], [52400.0, 1.0], [55600.0, 2.0], [58800.0, 2.0], [65200.0, 5.0], [63600.0, 6.0], [66400.0, 4.0], [69600.0, 14.0], [72800.0, 2.0], [95200.0, 1.0], [130400.0, 1.0], [66300.0, 2.0], [69500.0, 3.0], [75900.0, 1.0], [79100.0, 2.0], [82300.0, 1.0], [85500.0, 1.0], [104700.0, 1.0], [34300.0, 1.0], [35900.0, 3.0], [37500.0, 11.0], [39100.0, 7.0], [43900.0, 2.0], [209100.0, 1.0], [51900.0, 4.0], [55100.0, 2.0], [59900.0, 3.0], [63100.0, 7.0], [64700.0, 2.0], [81400.0, 24.0], [84600.0, 1.0], [94200.0, 1.0], [91000.0, 1.0], [97400.0, 1.0], [100600.0, 13.0], [136400.0, 2.0], [67700.0, 3.0], [70900.0, 2.0], [77300.0, 1.0], [80500.0, 12.0], [83700.0, 1.0], [90100.0, 1.0], [106100.0, 1.0], [128500.0, 17.0], [195800.0, 1.0], [16700.0, 124.0], [17500.0, 61.0], [18300.0, 57.0], [19100.0, 4.0], [19900.0, 11.0], [21500.0, 6.0], [22300.0, 19.0], [23100.0, 2.0], [23900.0, 7.0], [25500.0, 44.0], [26300.0, 40.0], [27100.0, 2.0], [27900.0, 2.0], [28700.0, 13.0], [31100.0, 22.0], [31900.0, 2.0], [135900.0, 3.0], [36600.0, 77.0], [35000.0, 7.0], [38200.0, 1.0], [39800.0, 6.0], [41400.0, 1.0], [46200.0, 2.0], [51000.0, 2.0], [49400.0, 5.0], [54200.0, 1.0], [55800.0, 1.0], [65400.0, 21.0], [66800.0, 1.0], [73200.0, 1.0], [76400.0, 3.0], [79600.0, 1.0], [86000.0, 1.0], [92400.0, 2.0], [98800.0, 1.0], [102000.0, 1.0], [127600.0, 5.0], [130800.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 249700.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 563.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 176178.0, "series": [{"data": [[0.0, 176178.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 83700.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 19759.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 563.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 7.307692307692307, "minX": 1.68287892E12, "maxY": 3000.0, "series": [{"data": [[1.68287916E12, 3000.0], [1.68287898E12, 3000.0], [1.68287928E12, 7.307692307692307], [1.6828791E12, 3000.0], [1.68287892E12, 2999.9661524076655], [1.68287922E12, 2876.837589475718], [1.68287904E12, 3000.0]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68287928E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 477.0, "minX": 2.0, "maxY": 249763.0, "series": [{"data": [[2.0, 249763.0], [4.0, 249761.5], [6.0, 249760.0], [7.0, 249758.0], [8.0, 249756.0], [9.0, 249754.0], [10.0, 249752.0], [11.0, 249752.0], [13.0, 248734.5], [14.0, 36676.0], [15.0, 36676.0], [16.0, 36676.0], [17.0, 36679.0], [18.0, 36676.0], [20.0, 36675.0], [21.0, 36677.5], [22.0, 36674.0], [23.0, 36674.0], [24.0, 36675.0], [26.0, 36674.0], [28.0, 36675.0], [29.0, 36674.0], [30.0, 36671.0], [31.0, 36671.0], [33.0, 36671.0], [32.0, 36670.0], [35.0, 36668.0], [34.0, 36668.0], [37.0, 36667.0], [36.0, 36664.0], [38.0, 36663.0], [41.0, 36664.0], [40.0, 36665.0], [43.0, 36659.0], [42.0, 36660.5], [44.0, 36657.0], [47.0, 36656.0], [46.0, 36657.0], [48.0, 36657.0], [50.0, 36654.0], [52.0, 36653.5], [54.0, 36653.0], [57.0, 36649.0], [59.0, 36636.0], [58.0, 36649.0], [61.0, 36631.0], [60.0, 36632.0], [63.0, 36630.0], [67.0, 36612.0], [66.0, 36614.0], [65.0, 36615.0], [71.0, 36342.0], [70.0, 36346.0], [69.0, 36604.0], [68.0, 36604.0], [75.0, 36285.0], [74.0, 36294.0], [73.0, 36332.0], [72.0, 36336.0], [79.0, 36276.0], [78.0, 36276.0], [77.0, 36281.0], [76.0, 36284.0], [83.0, 36261.0], [82.0, 36262.0], [81.0, 36264.0], [80.0, 36271.0], [87.0, 36241.0], [86.0, 36241.0], [85.0, 36249.0], [84.0, 36253.0], [91.0, 36224.0], [90.0, 36228.0], [89.0, 36232.0], [88.0, 36235.0], [95.0, 36208.0], [94.0, 36212.0], [93.0, 36215.0], [92.0, 36221.0], [99.0, 36194.0], [98.0, 36196.0], [97.0, 36201.0], [96.0, 36204.0], [102.0, 35756.0], [101.0, 35756.0], [100.0, 9011.0], [106.0, 9555.0], [104.0, 22926.0], [111.0, 9554.0], [110.0, 10097.0], [108.0, 22383.0], [115.0, 9010.0], [114.0, 35753.0], [113.0, 14759.0], [119.0, 9006.0], [118.0, 22381.0], [116.0, 9009.0], [123.0, 35750.0], [122.0, 9007.0], [121.0, 35751.0], [120.0, 10093.0], [127.0, 9001.0], [126.0, 9006.0], [125.0, 35750.0], [124.0, 9004.0], [135.0, 35741.0], [134.0, 35743.0], [133.0, 9001.0], [132.0, 9001.0], [131.0, 35745.0], [130.0, 10087.0], [129.0, 9002.0], [128.0, 9003.0], [143.0, 10074.0], [142.0, 8990.0], [141.0, 8991.0], [140.0, 8992.0], [139.0, 8992.0], [138.0, 8995.0], [137.0, 35739.0], [151.0, 8978.0], [150.0, 8978.0], [149.0, 35725.0], [148.0, 8982.0], [146.0, 8984.0], [145.0, 8982.0], [144.0, 8986.0], [159.0, 8968.0], [158.0, 8976.0], [157.0, 8976.5], [155.0, 9337.0], [152.0, 35721.0], [167.0, 35706.0], [166.0, 8960.0], [165.0, 8961.0], [164.0, 8960.0], [163.0, 35709.0], [162.0, 9507.5], [160.0, 35709.0], [175.0, 9496.5], [173.0, 22871.0], [171.0, 35702.0], [170.0, 8959.0], [169.0, 22333.5], [182.0, 35692.0], [181.0, 8948.0], [179.0, 35697.0], [178.0, 8954.0], [177.0, 8955.0], [176.0, 8955.0], [191.0, 8942.0], [190.0, 8943.0], [189.0, 8943.0], [188.0, 8944.0], [187.0, 8945.0], [186.0, 10031.0], [185.0, 35689.5], [184.0, 8945.0], [199.0, 8935.0], [198.0, 8937.0], [197.0, 35681.0], [196.0, 8938.0], [195.0, 8938.0], [194.0, 8941.0], [193.0, 8938.0], [192.0, 8940.0], [207.0, 9191.0], [205.0, 35640.0], [204.0, 22271.5], [202.0, 35645.0], [201.0, 35676.0], [200.0, 8931.0], [215.0, 10057.0], [214.0, 10058.0], [213.0, 10057.5], [211.0, 10057.0], [210.0, 10059.0], [208.0, 10058.0], [223.0, 10054.0], [222.0, 10056.0], [221.0, 8325.0], [220.0, 10055.333333333334], [217.0, 35068.0], [216.0, 10057.0], [230.0, 10049.0], [229.0, 35062.0], [228.0, 10052.0], [227.0, 14206.0], [225.0, 8321.0], [224.0, 19822.0], [239.0, 10047.0], [238.0, 10049.0], [237.0, 8316.0], [235.0, 10047.5], [233.0, 10051.0], [232.0, 10050.5], [247.0, 10042.0], [246.0, 18379.0], [244.0, 10042.0], [242.0, 10042.0], [241.0, 35709.0], [240.0, 10046.0], [255.0, 8301.0], [254.0, 10034.0], [252.0, 35045.0], [251.0, 10035.0], [250.0, 10035.0], [249.0, 10041.0], [248.0, 10039.0], [270.0, 10020.0], [271.0, 13468.0], [269.0, 10021.0], [268.0, 10022.0], [267.0, 18337.0], [266.0, 10031.5], [264.0, 8299.0], [263.0, 8300.0], [256.0, 10033.0], [259.0, 10033.0], [258.0, 10032.0], [262.0, 10031.0], [261.0, 18215.0], [260.0, 10033.0], [285.0, 10006.0], [287.0, 22513.5], [284.0, 10004.0], [275.0, 10015.0], [274.0, 10013.0], [273.0, 8288.0], [272.0, 13468.0], [283.0, 10008.0], [282.0, 10008.0], [281.0, 10010.0], [279.0, 10012.0], [278.0, 10014.0], [277.0, 8281.0], [276.0, 35681.0], [302.0, 35001.0], [301.0, 9990.666666666666], [298.0, 9996.0], [297.0, 9999.0], [296.0, 10003.0], [295.0, 10003.0], [294.0, 10003.0], [292.0, 10005.5], [290.0, 10006.0], [288.0, 35017.0], [312.0, 9987.0], [317.0, 9985.5], [307.0, 19757.0], [306.0, 14871.5], [304.0, 9990.0], [315.0, 9986.0], [314.0, 8253.0], [313.0, 9986.0], [311.0, 9989.0], [310.0, 36548.0], [309.0, 9989.0], [308.0, 8257.0], [334.0, 9963.5], [335.0, 8230.0], [332.0, 8232.0], [321.0, 9985.0], [320.0, 9985.0], [331.0, 9964.0], [330.0, 9976.0], [329.0, 8247.0], [328.0, 9979.0], [327.0, 9981.0], [326.0, 9114.0], [325.0, 9981.0], [324.0, 9981.0], [349.0, 9958.0], [350.0, 34968.0], [348.0, 9959.0], [347.0, 9958.0], [346.0, 9958.0], [344.0, 9960.0], [343.0, 9962.0], [341.0, 11142.0], [337.0, 8229.0], [336.0, 9962.0], [366.0, 9946.0], [365.0, 16586.25], [361.0, 9946.0], [360.0, 9947.0], [359.0, 9953.0], [358.0, 9954.0], [356.0, 9953.0], [355.0, 9956.0], [352.0, 9091.5], [371.0, 9942.0], [381.0, 9915.0], [382.0, 9915.0], [380.0, 9917.0], [379.0, 18472.0], [376.0, 9938.0], [375.0, 9939.0], [373.0, 9939.0], [372.0, 9940.0], [370.0, 9941.0], [369.0, 9942.0], [368.0, 9944.0], [387.0, 35579.0], [397.0, 27016.0], [399.0, 35572.0], [396.0, 35573.5], [392.0, 9908.0], [391.0, 9907.0], [390.0, 9908.0], [389.0, 9911.0], [388.0, 9912.0], [386.0, 9913.0], [385.0, 35578.5], [384.0, 35579.0], [402.0, 9906.0], [415.0, 22736.5], [414.0, 22736.0], [411.0, 35570.0], [409.0, 18460.0], [406.0, 23185.5], [404.0, 9905.0], [401.0, 9904.0], [400.0, 35571.0], [430.0, 35566.0], [431.0, 9900.0], [429.0, 9899.0], [428.0, 18754.666666666668], [425.0, 35565.0], [424.0, 9903.0], [423.0, 22734.75], [419.0, 9902.0], [417.0, 9904.0], [445.0, 9893.0], [446.0, 9895.0], [444.0, 9895.0], [443.0, 9896.0], [442.0, 23176.5], [440.0, 9897.0], [439.0, 9897.666666666666], [436.0, 35564.0], [435.0, 22731.5], [433.0, 35565.0], [432.0, 9900.0], [451.0, 9891.0], [461.0, 9889.0], [462.0, 9889.0], [460.0, 9023.5], [459.0, 9889.5], [456.0, 9890.0], [455.0, 9889.5], [453.0, 9890.5], [450.0, 22726.0], [448.0, 9893.0], [476.0, 9874.0], [478.0, 9875.0], [479.0, 9874.0], [477.0, 9875.0], [474.0, 9874.5], [472.0, 9876.0], [471.0, 9876.0], [465.0, 9886.0], [464.0, 22718.5], [470.0, 9877.0], [469.0, 9886.0], [468.0, 9886.666666666666], [493.0, 8121.0], [494.0, 9851.0], [492.0, 9854.0], [483.0, 9873.666666666666], [480.0, 9873.0], [491.0, 9854.0], [490.0, 9866.0], [489.0, 9001.5], [487.0, 8646.0], [486.0, 9872.5], [485.0, 9873.0], [499.0, 9844.0], [510.0, 9833.5], [511.0, 9834.0], [508.0, 9833.0], [507.0, 9837.333333333334], [506.0, 8616.0], [503.0, 9839.0], [502.0, 9840.0], [501.0, 9839.0], [498.0, 9845.0], [497.0, 9845.0], [496.0, 9849.5], [541.0, 9823.0], [543.0, 8956.5], [528.0, 9826.0], [540.0, 9823.5], [538.0, 9823.0], [537.0, 9823.0], [536.0, 9824.0], [527.0, 8960.0], [514.0, 9832.0], [513.0, 9831.0], [517.0, 9831.0], [516.0, 9831.333333333334], [519.0, 9830.0], [518.0, 9831.0], [525.0, 9827.0], [523.0, 9827.5], [521.0, 9828.0], [520.0, 9828.0], [535.0, 8959.0], [533.0, 9824.5], [531.0, 9826.0], [529.0, 9826.0], [568.0, 9798.0], [574.0, 8064.0], [575.0, 9796.0], [560.0, 9809.0], [562.0, 9807.0], [561.0, 9808.0], [573.0, 8930.0], [571.0, 9796.0], [569.0, 9797.0], [559.0, 9811.0], [545.0, 9821.0], [544.0, 9822.0], [548.0, 9814.0], [547.0, 8955.0], [551.0, 9813.0], [550.0, 9813.5], [558.0, 9810.0], [557.0, 9812.0], [556.0, 9812.0], [555.0, 9811.0], [554.0, 9812.0], [553.0, 9811.0], [552.0, 9814.0], [567.0, 8932.0], [565.0, 9799.0], [564.0, 9152.0], [563.0, 9795.0], [601.0, 9719.0], [593.0, 9722.0], [604.0, 8850.5], [606.0, 9711.5], [592.0, 9723.5], [602.0, 7986.0], [600.0, 9141.0], [583.0, 9732.0], [582.0, 9733.5], [580.0, 9739.0], [579.0, 9753.0], [578.0, 9754.0], [577.0, 9754.0], [576.0, 9754.0], [590.0, 9731.0], [589.0, 9730.0], [588.0, 13017.0], [586.0, 17881.0], [597.0, 9720.0], [596.0, 7989.0], [595.0, 9722.5], [637.0, 17989.0], [638.0, 9687.0], [624.0, 9701.5], [636.0, 9686.0], [635.0, 9687.5], [633.0, 9689.0], [632.0, 9690.0], [622.0, 18010.0], [609.0, 13773.0], [608.0, 9710.5], [615.0, 9710.0], [610.0, 9712.0], [621.0, 14586.0], [619.0, 9706.0], [618.0, 9706.0], [617.0, 9708.0], [616.0, 19477.0], [631.0, 9700.0], [630.0, 12987.0], [628.0, 9701.333333333334], [625.0, 9701.0], [664.0, 22155.0], [669.0, 9638.0], [670.0, 9634.0], [657.0, 9675.0], [656.0, 9675.0], [667.0, 9639.0], [666.0, 9650.0], [665.0, 27686.0], [655.0, 9674.0], [640.0, 14567.5], [643.0, 8816.0], [641.0, 9682.0], [647.0, 26573.333333333336], [646.0, 9681.0], [654.0, 7944.0], [653.0, 9681.0], [652.0, 9681.333333333334], [651.0, 9681.0], [650.0, 7949.0], [662.0, 9650.0], [661.0, 22484.0], [659.0, 9652.0], [658.0, 34664.0], [702.0, 8926.0], [703.0, 8926.0], [689.0, 29172.0], [688.0, 8933.0], [691.0, 8933.0], [690.0, 8933.0], [701.0, 8927.0], [700.0, 8927.0], [698.0, 8928.5], [696.0, 8930.0], [687.0, 8934.0], [673.0, 9629.0], [672.0, 22463.0], [678.0, 8934.0], [676.0, 20287.0], [685.0, 8934.0], [683.0, 8935.0], [682.0, 8934.5], [680.0, 8934.666666666666], [695.0, 8932.0], [694.0, 8932.0], [693.0, 28516.0], [692.0, 8932.0], [711.0, 8918.0], [732.0, 13248.0], [734.0, 15435.0], [730.0, 8906.5], [729.0, 8907.0], [728.0, 13249.0], [710.0, 8920.0], [709.0, 8921.0], [708.0, 8922.0], [707.0, 8923.0], [706.0, 8924.0], [705.0, 8923.0], [704.0, 8923.0], [719.0, 8913.5], [717.0, 15442.666666666666], [715.0, 28498.0], [713.0, 8916.0], [712.0, 8916.0], [726.0, 8907.5], [724.0, 8912.0], [723.0, 8913.0], [721.0, 8913.5], [766.0, 28456.0], [756.0, 8876.0], [767.0, 8872.5], [752.0, 8901.0], [754.0, 28473.0], [753.0, 8890.0], [765.0, 8872.5], [762.0, 18666.0], [760.0, 8874.0], [743.0, 8904.0], [742.0, 8904.0], [741.0, 11075.5], [740.0, 8906.0], [738.0, 8906.0], [737.0, 8906.0], [751.0, 10349.333333333334], [748.0, 13244.0], [747.0, 8903.0], [746.0, 8905.0], [745.0, 11075.5], [759.0, 8877.0], [758.0, 8878.0], [757.0, 8877.0], [797.0, 13186.0], [798.0, 8845.0], [785.0, 8852.0], [784.0, 8853.0], [787.0, 8851.0], [786.0, 8851.0], [796.0, 8846.0], [795.0, 8847.0], [794.0, 13189.0], [793.0, 8849.0], [792.0, 8851.0], [774.0, 8868.333333333334], [771.0, 8869.5], [769.0, 11039.5], [783.0, 8855.5], [781.0, 28441.0], [780.0, 8858.0], [779.0, 8858.0], [777.0, 8865.0], [776.0, 8868.0], [790.0, 13192.0], [789.0, 8850.0], [830.0, 8827.0], [831.0, 13166.0], [817.0, 8831.0], [816.0, 8832.0], [829.0, 10274.666666666666], [828.0, 8829.0], [826.0, 18620.5], [824.0, 28413.0], [815.0, 8832.0], [802.0, 8845.0], [800.0, 8845.0], [804.0, 13184.0], [803.0, 8845.0], [807.0, 8842.0], [806.0, 8842.5], [813.0, 8833.0], [812.0, 18625.0], [810.0, 13174.0], [809.0, 20805.5], [823.0, 8830.0], [822.0, 8830.0], [821.0, 8830.5], [818.0, 8830.0], [862.0, 13147.0], [863.0, 13145.0], [850.0, 8812.0], [848.0, 8812.0], [861.0, 13144.0], [860.0, 8806.5], [858.0, 8810.0], [857.0, 8811.0], [856.0, 13153.0], [839.0, 8817.666666666666], [838.0, 8818.0], [835.0, 8819.0], [834.0, 15347.666666666666], [847.0, 8815.0], [846.0, 8815.0], [845.0, 8814.333333333334], [842.0, 13158.0], [841.0, 13159.0], [840.0, 8818.0], [855.0, 23499.5], [853.0, 8812.0], [889.0, 8768.0], [894.0, 8766.0], [895.0, 8765.0], [881.0, 8790.0], [880.0, 8792.0], [883.0, 13119.0], [882.0, 8778.0], [892.0, 8767.0], [891.0, 8767.0], [890.0, 8767.0], [888.0, 10216.333333333334], [871.0, 8799.0], [869.0, 8801.0], [868.0, 8800.0], [867.0, 8802.5], [866.0, 13143.0], [864.0, 8802.0], [879.0, 8796.0], [878.0, 13692.75], [874.0, 8798.0], [873.0, 13140.0], [872.0, 13139.0], [885.0, 8772.0], [884.0, 8771.0], [926.0, 13041.0], [927.0, 8699.0], [912.0, 20710.5], [915.0, 13066.0], [914.0, 13089.5], [925.0, 8701.0], [923.0, 18493.5], [921.0, 8703.0], [920.0, 13044.0], [910.0, 13091.0], [903.0, 8762.0], [909.0, 13092.0], [908.0, 13096.0], [907.0, 8754.0], [906.0, 8754.0], [905.0, 11242.857142857143], [904.0, 13102.5], [919.0, 8703.0], [918.0, 8704.0], [917.0, 8707.0], [916.0, 13062.0], [952.0, 8663.0], [958.0, 8647.0], [959.0, 8646.0], [946.0, 8666.0], [944.0, 8668.0], [956.0, 8647.0], [955.0, 10822.0], [953.0, 8657.0], [943.0, 8669.0], [931.0, 10143.0], [928.0, 8697.0], [933.0, 8692.0], [932.0, 8694.0], [935.0, 13024.0], [934.0, 13026.0], [941.0, 13011.0], [940.0, 8671.0], [939.0, 13012.0], [938.0, 8671.0], [937.0, 18463.5], [951.0, 8663.0], [950.0, 10836.0], [949.0, 8666.0], [948.0, 8665.0], [964.0, 28228.0], [970.0, 8632.0], [960.0, 8646.0], [969.0, 12976.0], [968.0, 8636.0], [967.0, 8637.0], [966.0, 8637.0], [965.0, 8642.0], [963.0, 8645.0], [962.0, 8646.0], [1534.0, 570.0], [1530.0, 570.0], [1594.0, 568.6666666666666], [1570.0, 569.3333333333334], [1572.0, 570.0], [1574.0, 569.8571428571429], [1576.0, 570.0], [1578.0, 569.3333333333334], [1580.0, 569.75], [1582.0, 570.25], [1596.0, 569.090909090909], [1592.0, 569.0], [1590.0, 568.4285714285714], [1588.0, 568.8666666666667], [1586.0, 570.0], [1584.0, 570.5], [1566.0, 569.0], [1536.0, 570.0], [1544.0, 570.75], [1546.0, 571.0], [1550.0, 570.75], [1564.0, 571.25], [1556.0, 571.0], [1658.0, 567.0], [1632.0, 568.5714285714284], [1634.0, 567.7692307692307], [1636.0, 568.0], [1638.0, 567.8571428571429], [1640.0, 568.0], [1642.0, 568.0], [1646.0, 567.8999999999999], [1660.0, 565.5], [1654.0, 566.6666666666666], [1614.0, 568.75], [1612.0, 569.0], [1610.0, 569.25], [1608.0, 569.1428571428571], [1606.0, 569.1666666666667], [1604.0, 569.0], [1602.0, 569.5], [1600.0, 569.0], [1630.0, 568.5714285714286], [1628.0, 568.75], [1626.0, 568.6], [1624.0, 568.5], [1622.0, 568.9999999999999], [1616.0, 568.4166666666667], [1720.0, 563.0], [1724.0, 564.5], [1696.0, 563.4], [1702.0, 564.4], [1698.0, 563.6666666666666], [1704.0, 564.0], [1706.0, 564.0], [1708.0, 564.5], [1710.0, 563.0], [1726.0, 563.5], [1722.0, 564.0], [1716.0, 563.6666666666666], [1714.0, 564.25], [1712.0, 563.6666666666666], [1674.0, 564.4], [1672.0, 565.0], [1670.0, 564.3333333333333], [1668.0, 565.0], [1666.0, 565.0], [1664.0, 565.0], [1692.0, 564.0], [1690.0, 564.0], [1688.0, 565.0], [1684.0, 565.0], [1680.0, 565.0], [1738.0, 562.25], [1756.0, 562.0], [1786.0, 553.0], [1790.0, 552.5], [1742.0, 562.0], [1736.0, 562.5], [1734.0, 563.0], [1732.0, 563.5555555555555], [1730.0, 562.75], [1728.0, 563.4444444444445], [1760.0, 561.8888888888888], [1758.0, 562.0], [1754.0, 563.0], [1750.0, 563.0], [1746.0, 562.8], [1744.0, 562.5], [1796.0, 552.0], [1824.0, 551.0], [1806.0, 552.0], [1798.0, 552.4285714285714], [1794.0, 552.0], [1792.0, 553.0], [1822.0, 551.75], [1816.0, 551.6666666666666], [1814.0, 552.0], [2684.0, 609.25], [2680.0, 609.5], [2676.0, 610.0], [2796.0, 604.0], [2752.0, 606.0], [2756.0, 605.1428571428572], [2760.0, 605.5714285714286], [2764.0, 604.3333333333334], [2768.0, 604.3333333333334], [2772.0, 605.2], [2776.0, 604.0], [2780.0, 903.7857142857142], [2788.0, 1079.0], [2784.0, 1178.0], [2712.0, 609.0], [2708.0, 608.0], [2704.0, 607.5], [2700.0, 608.25], [2696.0, 608.25], [2692.0, 610.0], [2688.0, 609.25], [2748.0, 606.0], [2728.0, 607.1666666666666], [2732.0, 606.1428571428571], [2736.0, 606.391304347826], [2740.0, 607.0], [2744.0, 695.3076923076923], [2724.0, 607.5], [2720.0, 607.75], [3000.0, 2314.220908392815], [2685.0, 609.3333333333334], [2681.0, 609.0], [2801.0, 1363.5], [2753.0, 605.8461538461539], [2757.0, 749.5], [2761.0, 606.0], [2765.0, 604.8], [2769.0, 652.6666666666665], [2773.0, 657.7222222222222], [2777.0, 603.6666666666666], [2781.0, 604.0], [2789.0, 604.375], [2785.0, 813.9], [2717.0, 607.8571428571428], [2713.0, 607.7142857142857], [2709.0, 608.0], [2705.0, 608.0], [2701.0, 608.0], [2693.0, 607.75], [2689.0, 610.0], [2749.0, 605.625], [2725.0, 607.7058823529412], [2729.0, 606.3333333333334], [2733.0, 606.5625], [2737.0, 606.6], [2741.0, 606.8], [2745.0, 723.4444444444443], [2721.0, 608.0], [1241.0, 10178.449999999999], [1317.0, 580.0], [1535.0, 570.0], [1531.0, 570.0], [1573.0, 570.0], [1575.0, 569.75], [1599.0, 570.0], [1569.0, 569.5], [1571.0, 569.5], [1577.0, 569.8], [1579.0, 570.0], [1583.0, 570.0], [1595.0, 569.5], [1589.0, 569.0], [1587.0, 568.2], [1585.0, 570.0], [1539.0, 570.0], [1541.0, 570.0], [1545.0, 570.6666666666666], [1549.0, 571.0], [1565.0, 569.0], [1563.0, 570.0], [1557.0, 571.0], [1555.0, 571.3333333333334], [1657.0, 566.6666666666666], [1653.0, 566.3333333333334], [1637.0, 567.0], [1663.0, 566.5], [1633.0, 568.0], [1635.0, 568.0], [1639.0, 568.0], [1643.0, 567.5714285714287], [1645.0, 568.0], [1659.0, 567.0], [1655.0, 565.5], [1649.0, 567.2], [1613.0, 568.7], [1609.0, 569.45], [1607.0, 569.5], [1605.0, 568.8000000000001], [1603.0, 569.0], [1601.0, 569.5714285714286], [1629.0, 568.7777777777778], [1627.0, 569.0], [1625.0, 569.0], [1623.0, 568.6666666666667], [1621.0, 568.5714285714286], [1619.0, 568.5555555555555], [1617.0, 568.5], [1721.0, 563.3529411764705], [1703.0, 564.3333333333334], [1727.0, 563.6666666666666], [1697.0, 564.0], [1705.0, 563.5], [1709.0, 563.5], [1711.0, 564.0], [1725.0, 563.0], [1723.0, 563.25], [1717.0, 563.1666666666667], [1713.0, 564.75], [1679.0, 564.5], [1677.0, 565.0], [1675.0, 564.6], [1673.0, 564.0], [1671.0, 565.3333333333334], [1669.0, 565.2], [1667.0, 565.0], [1665.0, 566.0], [1693.0, 564.4], [1687.0, 565.25], [1743.0, 562.6666666666666], [1789.0, 552.0], [1787.0, 552.75], [1783.0, 553.0], [1739.0, 562.6666666666666], [1737.0, 562.3333333333334], [1735.0, 563.0], [1731.0, 563.4444444444445], [1729.0, 563.3333333333334], [1757.0, 562.0], [1755.0, 563.0], [1753.0, 563.0], [1751.0, 562.0], [1749.0, 563.0], [1747.0, 563.25], [1745.0, 562.5], [1795.0, 552.6666666666666], [1819.0, 552.0], [1805.0, 551.6666666666666], [1799.0, 553.0], [1797.0, 553.0], [1821.0, 552.0], [1817.0, 823.5], [1811.0, 551.5], [1809.0, 552.0], [2682.0, 610.0], [2638.0, 477.0], [2686.0, 609.0], [2678.0, 609.375], [2674.0, 623.4999999999999], [2790.0, 676.0], [2786.0, 604.0], [2766.0, 604.8333333333334], [2798.0, 1176.0], [2754.0, 651.047619047619], [2758.0, 606.0], [2762.0, 774.3333333333334], [2770.0, 605.1], [2778.0, 604.1999999999999], [2782.0, 604.0], [2794.0, 603.0], [2718.0, 607.5384615384615], [2714.0, 607.0], [2710.0, 608.5], [2706.0, 608.25], [2702.0, 609.0], [2698.0, 608.0], [2694.0, 607.6666666666666], [2750.0, 606.0], [2726.0, 607.6000000000001], [2730.0, 606.3749999999999], [2734.0, 606.5], [2738.0, 606.7037037037037], [2742.0, 606.8000000000001], [2746.0, 688.8571428571428], [2722.0, 607.4374999999999], [2083.0, 1220.0], [2683.0, 608.75], [2795.0, 1364.5], [2787.0, 604.25], [2807.0, 625.8333333333334], [2759.0, 701.1874999999999], [2763.0, 700.4166666666667], [2767.0, 605.0000000000001], [2775.0, 604.4], [2779.0, 605.0], [2783.0, 605.0], [2799.0, 1177.0], [2791.0, 881.6923076923075], [2719.0, 607.6363636363635], [2711.0, 609.0], [2703.0, 608.0], [2699.0, 609.0], [2695.0, 608.1666666666666], [2691.0, 608.9999999999999], [2751.0, 605.875], [2747.0, 640.9393939393939], [2727.0, 607.5], [2731.0, 606.5000000000001], [2735.0, 606.4999999999999], [2739.0, 606.7272727272725], [2743.0, 606.5], [2723.0, 607.3333333333334]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[2986.2262169878877, 2357.882591006493]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 3000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 109.2, "minX": 1.68287892E12, "maxY": 796804.25, "series": [{"data": [[1.68287916E12, 796804.25], [1.68287898E12, 662710.0], [1.68287928E12, 136.45], [1.6828791E12, 654015.6666666666], [1.68287892E12, 255071.46666666667], [1.68287922E12, 369187.95], [1.68287904E12, 626355.7]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.68287916E12, 557188.8], [1.68287898E12, 463940.4], [1.68287928E12, 109.2], [1.6828791E12, 447627.6], [1.68287892E12, 179676.0], [1.68287922E12, 260517.6], [1.68287904E12, 439891.2]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68287928E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 491.9071996259924, "minX": 1.68287892E12, "maxY": 249600.7692307692, "series": [{"data": [[1.68287916E12, 2215.957576852414], [1.68287898E12, 1646.3223251103134], [1.68287928E12, 249600.7692307692], [1.6828791E12, 3092.723493033276], [1.68287892E12, 491.9071996259924], [1.68287922E12, 1604.0964725607828], [1.68287904E12, 3682.7691147553846]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68287928E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 491.8958859280018, "minX": 1.68287892E12, "maxY": 249600.7692307692, "series": [{"data": [[1.68287916E12, 2090.0732243398365], [1.68287898E12, 1571.1780004340849], [1.68287928E12, 249600.7692307692], [1.6828791E12, 2676.3973250875442], [1.68287892E12, 491.8958859280018], [1.68287922E12, 1604.088637389561], [1.68287904E12, 3677.5005249995174]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68287928E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 25.91129812342819, "minX": 1.68287892E12, "maxY": 128088.23076923077, "series": [{"data": [[1.68287916E12, 600.1957667178456], [1.68287898E12, 330.7948527815981], [1.68287928E12, 128088.23076923077], [1.6828791E12, 1230.6207063557151], [1.68287892E12, 148.1069191210843], [1.68287922E12, 25.91129812342819], [1.68287904E12, 1099.6437066875424]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68287928E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 3.0, "minX": 1.68287892E12, "maxY": 249763.0, "series": [{"data": [[1.68287916E12, 221890.0], [1.68287898E12, 83927.0], [1.68287928E12, 249763.0], [1.6828791E12, 195849.0], [1.68287892E12, 25121.0], [1.68287922E12, 74097.0], [1.68287904E12, 138657.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.68287916E12, 1102.0], [1.68287898E12, 207.0], [1.68287928E12, 249763.0], [1.6828791E12, 832.0], [1.68287892E12, 139.0], [1.68287922E12, 1365.9000000000015], [1.68287904E12, 9473.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.68287916E12, 5306.100000000304], [1.68287898E12, 67781.70000000054], [1.68287928E12, 249763.0], [1.6828791E12, 100423.0], [1.68287892E12, 15111.990000000002], [1.68287922E12, 28395.0], [1.68287904E12, 129059.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.68287916E12, 1245.0], [1.68287898E12, 16955.0], [1.68287928E12, 249763.0], [1.6828791E12, 2504.0], [1.68287892E12, 209.0], [1.68287922E12, 9989.0], [1.68287904E12, 11261.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.68287916E12, 18.0], [1.68287898E12, 6.0], [1.68287928E12, 248734.0], [1.6828791E12, 17.0], [1.68287892E12, 3.0], [1.68287922E12, 37.0], [1.68287904E12, 7.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.68287916E12, 661.0], [1.68287898E12, 91.0], [1.68287928E12, 249758.0], [1.6828791E12, 519.0], [1.68287892E12, 54.0], [1.68287922E12, 705.0], [1.68287904E12, 454.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68287928E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 13.0, "minX": 2.0, "maxY": 249760.0, "series": [{"data": [[2.0, 47251.0], [3.0, 72403.0], [4.0, 65932.0], [5.0, 64329.5], [6.0, 28562.5], [7.0, 9600.0], [8.0, 35838.5], [9.0, 63129.0], [11.0, 249760.0], [15.0, 16773.0], [16.0, 23786.5], [17.0, 30759.0], [22.0, 39980.5], [24.0, 36721.0], [25.0, 1613.0], [39.0, 2616.0], [47.0, 3986.0], [51.0, 1448.0], [50.0, 33.0], [52.0, 2305.0], [55.0, 36568.0], [70.0, 107.0], [73.0, 48.0], [82.0, 19552.0], [81.0, 134965.0], [80.0, 73.0], [85.0, 47784.0], [86.0, 36649.0], [93.0, 8436.0], [98.0, 97.0], [114.0, 13831.5], [112.0, 767.5], [118.0, 9591.0], [117.0, 92214.0], [133.0, 7055.0], [142.0, 116.0], [137.0, 15844.0], [145.0, 111.0], [155.0, 100.0], [164.0, 5087.0], [178.0, 16673.0], [189.0, 133.0], [192.0, 120.0], [221.0, 46.0], [216.0, 152.0], [230.0, 10010.0], [267.0, 143.0], [259.0, 13600.0], [257.0, 402.0], [273.0, 103.0], [294.0, 8872.5], [326.0, 135.0], [334.0, 228.0], [351.0, 8414.0], [347.0, 9850.0], [374.0, 11126.0], [393.0, 41.0], [413.0, 160.0], [450.0, 126.0], [460.0, 287.0], [497.0, 104.0], [515.0, 125.0], [542.0, 61.0], [548.0, 15696.5], [563.0, 116.0], [590.0, 537.0], [624.0, 100533.0], [629.0, 403.0], [668.0, 483.0], [688.0, 124.0], [689.0, 149.0], [723.0, 54.0], [716.0, 14705.0], [715.0, 113.0], [719.0, 284.0], [754.0, 76.0], [767.0, 141.0], [753.0, 10507.0], [761.0, 492.0], [740.0, 482.0], [766.0, 451.0], [781.0, 58.0], [771.0, 464.0], [770.0, 417.0], [824.0, 61.0], [822.0, 151.0], [800.0, 84.0], [831.0, 470.0], [825.0, 530.0], [819.0, 513.0], [849.0, 15.0], [861.0, 117.0], [843.0, 476.0], [860.0, 515.0], [854.0, 568.0], [889.0, 516.0], [874.0, 454.0], [867.0, 131.0], [864.0, 31.0], [881.0, 485.0], [890.0, 498.0], [882.0, 443.0], [895.0, 462.0], [871.0, 503.0], [903.0, 527.0], [923.0, 123.0], [921.0, 116.0], [925.0, 475.0], [924.0, 474.0], [910.0, 519.0], [911.0, 439.0], [897.0, 436.0], [900.0, 459.0], [912.0, 471.0], [919.0, 542.0], [932.0, 141.0], [940.0, 37.0], [936.0, 500.0], [935.0, 391.0], [950.0, 48.0], [944.0, 487.0], [953.0, 580.0], [949.0, 484.0], [931.0, 107.0], [930.0, 470.0], [938.0, 429.0], [934.0, 430.0], [943.0, 750.0], [928.0, 494.0], [929.0, 493.0], [968.0, 101.0], [976.0, 602.0], [980.0, 487.0], [978.0, 471.0], [983.0, 496.0], [1016.0, 509.0], [1009.0, 424.0], [1083.0, 134.0], [1057.0, 55.0], [1027.0, 64.0], [1036.0, 506.0], [1121.0, 46.0], [1127.0, 52.0], [1147.0, 443.0], [1092.0, 505.0], [1090.0, 544.0], [1150.0, 587.0], [1100.0, 491.0], [1166.0, 42.0], [1235.0, 140.0], [1250.0, 132.5], [1241.0, 32.0], [1265.0, 133.0], [1252.0, 177.0], [1317.0, 113.0], [1341.0, 13.0], [1291.0, 63.0], [1328.0, 721.0], [1350.0, 506.0], [1445.0, 116.0], [1458.0, 54.0], [1436.0, 84.0], [1451.0, 129.0], [1434.0, 487.0], [1433.0, 628.0], [1493.0, 114.0], [1503.0, 511.0], [1477.0, 554.0], [1511.0, 1132.0], [1520.0, 524.0], [1545.0, 95.0], [1562.0, 140.0], [1548.0, 437.0], [1554.0, 506.0], [1635.0, 111.0], [1646.0, 42.0], [1609.0, 95.0], [1615.0, 491.0], [1689.0, 40.0], [1673.0, 406.0], [1703.0, 534.0], [1674.0, 433.0], [1684.0, 509.0], [1685.0, 752.0], [1697.0, 853.0], [1686.0, 528.0], [1780.0, 422.0], [1764.0, 540.0], [1743.0, 495.0], [1733.0, 498.0], [1838.0, 55.0], [1795.0, 116.0], [1829.0, 174.0], [1808.0, 478.0], [1870.0, 429.0], [1906.0, 54.0], [1890.0, 137.0], [1914.0, 842.0], [1889.0, 974.0], [1904.0, 127.0], [1861.0, 101.0], [1883.0, 507.0], [1872.0, 456.0], [1865.0, 628.0], [1884.0, 496.0], [1860.0, 650.0], [1857.0, 754.0], [1868.0, 649.0], [1975.0, 47.0], [1931.0, 46.0], [1921.0, 510.0], [1936.0, 518.0], [1948.0, 573.0], [1929.0, 873.0], [1933.0, 701.0], [1999.0, 119.0], [2019.0, 30.0], [2026.0, 56.0], [2003.0, 562.0], [2007.0, 491.0], [2079.0, 92.0], [2054.0, 84.0], [2080.0, 470.5], [2152.0, 112.0], [2164.0, 1010.0], [2057.0, 130.0], [2121.0, 85.0], [2139.0, 100.0], [2140.0, 546.0], [2064.0, 599.0], [2058.0, 984.0], [2199.0, 84.0], [2192.0, 125.0], [2198.0, 92.0], [2188.0, 561.0], [2339.0, 46.0], [2317.0, 89.0], [2440.0, 789.0], [2484.0, 1163.0], [2476.0, 1074.0], [2549.0, 627.0], [2763.0, 816.0], [2843.0, 939.0], [3051.0, 798.0], [2948.0, 1147.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2.0, 17417.0], [563.0, 30859.0], [142.0, 30588.0], [145.0, 100945.5], [50.0, 15606.0], [861.0, 18240.0], [874.0, 68099.5], [911.0, 48308.0], [944.0, 13324.0], [17.0, 30742.0], [1150.0, 41893.0], [85.0, 35814.0], [22.0, 81591.0], [1477.0, 107617.0], [1743.0, 14245.0], [117.0, 92197.0], [1921.0, 39855.0], [2007.0, 176909.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 3051.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 2.0, "maxY": 249760.0, "series": [{"data": [[2.0, 47251.0], [3.0, 72403.0], [4.0, 65932.0], [5.0, 64329.5], [6.0, 28562.5], [7.0, 9600.0], [8.0, 35838.5], [9.0, 63129.0], [11.0, 249760.0], [15.0, 16773.0], [16.0, 23786.5], [17.0, 30759.0], [22.0, 39980.5], [24.0, 36721.0], [25.0, 1613.0], [39.0, 2616.0], [47.0, 3986.0], [51.0, 1448.0], [50.0, 33.0], [52.0, 2305.0], [55.0, 36568.0], [70.0, 107.0], [73.0, 48.0], [82.0, 19552.0], [81.0, 134965.0], [80.0, 73.0], [85.0, 47784.0], [86.0, 36649.0], [93.0, 8436.0], [98.0, 97.0], [114.0, 13831.5], [112.0, 767.5], [118.0, 9591.0], [117.0, 92214.0], [133.0, 7055.0], [142.0, 116.0], [137.0, 15844.0], [145.0, 111.0], [155.0, 100.0], [164.0, 5087.0], [178.0, 16673.0], [189.0, 133.0], [192.0, 120.0], [221.0, 46.0], [216.0, 152.0], [230.0, 10010.0], [267.0, 143.0], [259.0, 13600.0], [257.0, 402.0], [273.0, 103.0], [294.0, 8872.5], [326.0, 135.0], [334.0, 228.0], [351.0, 8414.0], [347.0, 9850.0], [374.0, 11126.0], [393.0, 41.0], [413.0, 160.0], [450.0, 126.0], [460.0, 287.0], [497.0, 104.0], [515.0, 125.0], [542.0, 61.0], [548.0, 15696.5], [563.0, 116.0], [590.0, 537.0], [624.0, 100533.0], [629.0, 403.0], [668.0, 483.0], [688.0, 124.0], [689.0, 149.0], [723.0, 54.0], [716.0, 14705.0], [715.0, 113.0], [719.0, 284.0], [754.0, 76.0], [767.0, 141.0], [753.0, 10507.0], [761.0, 492.0], [740.0, 482.0], [766.0, 451.0], [781.0, 58.0], [771.0, 464.0], [770.0, 417.0], [824.0, 60.5], [822.0, 151.0], [800.0, 84.0], [831.0, 470.0], [825.0, 530.0], [819.0, 513.0], [849.0, 15.0], [861.0, 117.0], [843.0, 476.0], [860.0, 515.0], [854.0, 568.0], [889.0, 516.0], [874.0, 454.0], [867.0, 131.0], [864.0, 31.0], [881.0, 485.0], [890.0, 498.0], [882.0, 443.0], [895.0, 462.0], [871.0, 503.0], [903.0, 527.0], [923.0, 123.0], [921.0, 116.0], [925.0, 475.0], [924.0, 474.0], [910.0, 519.0], [911.0, 439.0], [897.0, 436.0], [900.0, 459.0], [912.0, 471.0], [919.0, 542.0], [932.0, 141.0], [940.0, 37.0], [936.0, 500.0], [935.0, 391.0], [950.0, 48.0], [944.0, 487.0], [953.0, 580.0], [949.0, 484.0], [931.0, 107.0], [930.0, 470.0], [938.0, 429.0], [934.0, 430.0], [943.0, 750.0], [928.0, 494.0], [929.0, 493.0], [968.0, 101.0], [976.0, 602.0], [980.0, 487.0], [978.0, 470.5], [983.0, 496.0], [1016.0, 509.0], [1009.0, 424.0], [1083.0, 134.0], [1057.0, 55.0], [1027.0, 64.0], [1036.0, 506.0], [1121.0, 46.0], [1127.0, 52.0], [1147.0, 443.0], [1092.0, 505.0], [1090.0, 544.0], [1150.0, 587.0], [1100.0, 491.0], [1166.0, 42.0], [1235.0, 140.0], [1250.0, 132.5], [1241.0, 32.0], [1265.0, 133.0], [1252.0, 177.0], [1317.0, 113.0], [1341.0, 13.0], [1291.0, 63.0], [1328.0, 721.0], [1350.0, 506.0], [1445.0, 116.0], [1458.0, 54.0], [1436.0, 84.0], [1451.0, 129.0], [1434.0, 487.0], [1433.0, 628.0], [1493.0, 114.0], [1503.0, 511.0], [1477.0, 554.0], [1511.0, 1132.0], [1520.0, 524.0], [1545.0, 95.0], [1562.0, 140.0], [1548.0, 437.0], [1554.0, 506.0], [1635.0, 111.0], [1646.0, 42.0], [1609.0, 95.0], [1615.0, 491.0], [1689.0, 40.0], [1673.0, 406.0], [1703.0, 534.0], [1674.0, 433.0], [1684.0, 509.0], [1685.0, 752.0], [1697.0, 853.0], [1686.0, 528.0], [1780.0, 421.5], [1764.0, 540.0], [1743.0, 495.0], [1733.0, 498.0], [1838.0, 55.0], [1795.0, 116.0], [1829.0, 174.0], [1808.0, 478.0], [1870.0, 429.0], [1906.0, 54.0], [1890.0, 137.0], [1914.0, 842.0], [1889.0, 974.0], [1904.0, 127.0], [1861.0, 101.0], [1883.0, 507.0], [1872.0, 456.0], [1865.0, 628.0], [1884.0, 496.0], [1860.0, 649.5], [1857.0, 754.0], [1868.0, 649.0], [1975.0, 47.0], [1931.0, 46.0], [1921.0, 510.0], [1936.0, 518.0], [1948.0, 573.0], [1929.0, 873.0], [1933.0, 701.0], [1999.0, 119.0], [2019.0, 30.0], [2026.0, 56.0], [2003.0, 562.0], [2007.0, 491.0], [2079.0, 92.0], [2054.0, 83.0], [2080.0, 470.5], [2152.0, 112.0], [2164.0, 1010.0], [2057.0, 130.0], [2121.0, 85.0], [2139.0, 100.0], [2140.0, 546.0], [2064.0, 599.0], [2058.0, 984.0], [2199.0, 84.0], [2192.0, 125.0], [2198.0, 92.0], [2188.0, 561.0], [2339.0, 46.0], [2317.0, 89.0], [2440.0, 789.0], [2484.0, 1162.5], [2476.0, 1074.0], [2549.0, 627.0], [2763.0, 816.0], [2843.0, 939.0], [3051.0, 798.0], [2948.0, 1147.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2.0, 0.0], [563.0, 0.0], [142.0, 0.0], [145.0, 0.0], [50.0, 0.0], [861.0, 0.0], [874.0, 0.0], [911.0, 0.0], [944.0, 0.0], [17.0, 0.0], [1150.0, 0.0], [85.0, 0.0], [22.0, 0.0], [1477.0, 0.0], [1743.0, 0.0], [117.0, 0.0], [1921.0, 0.0], [2007.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 3051.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 404.73333333333335, "minX": 1.68287892E12, "maxY": 1074.1, "series": [{"data": [[1.68287916E12, 1074.1], [1.68287898E12, 918.4333333333333], [1.6828791E12, 887.3], [1.68287892E12, 404.73333333333335], [1.68287922E12, 513.7], [1.68287904E12, 871.7333333333333]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68287922E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.21666666666666667, "minX": 1.68287892E12, "maxY": 1105.5333333333333, "series": [{"data": [[1.68287916E12, 1105.5333333333333], [1.68287898E12, 920.5166666666667], [1.68287928E12, 0.21666666666666667], [1.6828791E12, 888.15], [1.68287892E12, 356.5], [1.68287922E12, 516.9], [1.68287904E12, 872.8]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.68287916E12, 1.5666666666666667], [1.68287898E12, 1.0166666666666666], [1.6828791E12, 6.583333333333333], [1.68287904E12, 0.21666666666666667]], "isOverall": false, "label": "Non HTTP response code: java.net.SocketException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68287928E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.21666666666666667, "minX": 1.68287892E12, "maxY": 1105.5333333333333, "series": [{"data": [[1.68287916E12, 1105.5333333333333], [1.68287898E12, 920.5166666666667], [1.68287928E12, 0.21666666666666667], [1.6828791E12, 888.15], [1.68287892E12, 356.5], [1.68287922E12, 516.9], [1.68287904E12, 872.8]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.68287916E12, 1.5666666666666667], [1.68287898E12, 1.0166666666666666], [1.6828791E12, 6.583333333333333], [1.68287904E12, 0.21666666666666667]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68287928E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.21666666666666667, "minX": 1.68287892E12, "maxY": 1105.5333333333333, "series": [{"data": [[1.68287916E12, 1105.5333333333333], [1.68287898E12, 920.5166666666667], [1.68287928E12, 0.21666666666666667], [1.6828791E12, 888.15], [1.68287892E12, 356.5], [1.68287922E12, 516.9], [1.68287904E12, 872.8]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.68287916E12, 1.5666666666666667], [1.68287898E12, 1.0166666666666666], [1.6828791E12, 6.583333333333333], [1.68287904E12, 0.21666666666666667]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68287928E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

