/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 7.0, "minX": 0.0, "maxY": 260149.0, "series": [{"data": [[0.0, 7.0], [0.1, 17.0], [0.2, 19.0], [0.3, 20.0], [0.4, 22.0], [0.5, 23.0], [0.6, 24.0], [0.7, 25.0], [0.8, 26.0], [0.9, 27.0], [1.0, 28.0], [1.1, 29.0], [1.2, 29.0], [1.3, 30.0], [1.4, 31.0], [1.5, 32.0], [1.6, 32.0], [1.7, 33.0], [1.8, 34.0], [1.9, 34.0], [2.0, 35.0], [2.1, 36.0], [2.2, 36.0], [2.3, 37.0], [2.4, 38.0], [2.5, 38.0], [2.6, 39.0], [2.7, 39.0], [2.8, 40.0], [2.9, 40.0], [3.0, 41.0], [3.1, 42.0], [3.2, 42.0], [3.3, 42.0], [3.4, 43.0], [3.5, 43.0], [3.6, 44.0], [3.7, 44.0], [3.8, 45.0], [3.9, 45.0], [4.0, 46.0], [4.1, 46.0], [4.2, 47.0], [4.3, 47.0], [4.4, 48.0], [4.5, 48.0], [4.6, 49.0], [4.7, 49.0], [4.8, 50.0], [4.9, 50.0], [5.0, 51.0], [5.1, 51.0], [5.2, 52.0], [5.3, 52.0], [5.4, 53.0], [5.5, 54.0], [5.6, 54.0], [5.7, 55.0], [5.8, 55.0], [5.9, 56.0], [6.0, 57.0], [6.1, 57.0], [6.2, 58.0], [6.3, 58.0], [6.4, 59.0], [6.5, 59.0], [6.6, 60.0], [6.7, 60.0], [6.8, 61.0], [6.9, 61.0], [7.0, 62.0], [7.1, 63.0], [7.2, 63.0], [7.3, 63.0], [7.4, 64.0], [7.5, 65.0], [7.6, 65.0], [7.7, 66.0], [7.8, 66.0], [7.9, 67.0], [8.0, 67.0], [8.1, 67.0], [8.2, 68.0], [8.3, 68.0], [8.4, 69.0], [8.5, 69.0], [8.6, 70.0], [8.7, 70.0], [8.8, 71.0], [8.9, 71.0], [9.0, 71.0], [9.1, 72.0], [9.2, 72.0], [9.3, 73.0], [9.4, 74.0], [9.5, 74.0], [9.6, 74.0], [9.7, 75.0], [9.8, 75.0], [9.9, 76.0], [10.0, 76.0], [10.1, 77.0], [10.2, 77.0], [10.3, 78.0], [10.4, 78.0], [10.5, 78.0], [10.6, 79.0], [10.7, 79.0], [10.8, 79.0], [10.9, 80.0], [11.0, 80.0], [11.1, 81.0], [11.2, 81.0], [11.3, 82.0], [11.4, 82.0], [11.5, 82.0], [11.6, 83.0], [11.7, 83.0], [11.8, 84.0], [11.9, 84.0], [12.0, 84.0], [12.1, 85.0], [12.2, 85.0], [12.3, 85.0], [12.4, 86.0], [12.5, 86.0], [12.6, 86.0], [12.7, 87.0], [12.8, 87.0], [12.9, 87.0], [13.0, 88.0], [13.1, 88.0], [13.2, 89.0], [13.3, 89.0], [13.4, 90.0], [13.5, 90.0], [13.6, 91.0], [13.7, 91.0], [13.8, 91.0], [13.9, 92.0], [14.0, 92.0], [14.1, 92.0], [14.2, 92.0], [14.3, 93.0], [14.4, 93.0], [14.5, 94.0], [14.6, 94.0], [14.7, 94.0], [14.8, 95.0], [14.9, 95.0], [15.0, 95.0], [15.1, 96.0], [15.2, 97.0], [15.3, 97.0], [15.4, 97.0], [15.5, 98.0], [15.6, 98.0], [15.7, 99.0], [15.8, 99.0], [15.9, 99.0], [16.0, 100.0], [16.1, 100.0], [16.2, 100.0], [16.3, 101.0], [16.4, 101.0], [16.5, 101.0], [16.6, 102.0], [16.7, 103.0], [16.8, 103.0], [16.9, 104.0], [17.0, 105.0], [17.1, 105.0], [17.2, 105.0], [17.3, 106.0], [17.4, 106.0], [17.5, 107.0], [17.6, 107.0], [17.7, 108.0], [17.8, 108.0], [17.9, 109.0], [18.0, 109.0], [18.1, 110.0], [18.2, 110.0], [18.3, 111.0], [18.4, 112.0], [18.5, 112.0], [18.6, 112.0], [18.7, 113.0], [18.8, 113.0], [18.9, 114.0], [19.0, 114.0], [19.1, 114.0], [19.2, 115.0], [19.3, 115.0], [19.4, 115.0], [19.5, 115.0], [19.6, 116.0], [19.7, 116.0], [19.8, 116.0], [19.9, 116.0], [20.0, 117.0], [20.1, 118.0], [20.2, 118.0], [20.3, 119.0], [20.4, 119.0], [20.5, 120.0], [20.6, 120.0], [20.7, 121.0], [20.8, 122.0], [20.9, 122.0], [21.0, 122.0], [21.1, 123.0], [21.2, 123.0], [21.3, 124.0], [21.4, 124.0], [21.5, 125.0], [21.6, 125.0], [21.7, 126.0], [21.8, 126.0], [21.9, 126.0], [22.0, 126.0], [22.1, 127.0], [22.2, 127.0], [22.3, 128.0], [22.4, 128.0], [22.5, 128.0], [22.6, 129.0], [22.7, 129.0], [22.8, 129.0], [22.9, 130.0], [23.0, 130.0], [23.1, 130.0], [23.2, 131.0], [23.3, 131.0], [23.4, 132.0], [23.5, 132.0], [23.6, 132.0], [23.7, 133.0], [23.8, 133.0], [23.9, 133.0], [24.0, 133.0], [24.1, 134.0], [24.2, 134.0], [24.3, 134.0], [24.4, 134.0], [24.5, 135.0], [24.6, 135.0], [24.7, 135.0], [24.8, 136.0], [24.9, 136.0], [25.0, 136.0], [25.1, 136.0], [25.2, 137.0], [25.3, 137.0], [25.4, 137.0], [25.5, 138.0], [25.6, 138.0], [25.7, 138.0], [25.8, 139.0], [25.9, 139.0], [26.0, 139.0], [26.1, 140.0], [26.2, 140.0], [26.3, 140.0], [26.4, 141.0], [26.5, 141.0], [26.6, 141.0], [26.7, 142.0], [26.8, 142.0], [26.9, 142.0], [27.0, 142.0], [27.1, 143.0], [27.2, 143.0], [27.3, 143.0], [27.4, 143.0], [27.5, 143.0], [27.6, 143.0], [27.7, 143.0], [27.8, 144.0], [27.9, 144.0], [28.0, 144.0], [28.1, 145.0], [28.2, 145.0], [28.3, 145.0], [28.4, 146.0], [28.5, 146.0], [28.6, 147.0], [28.7, 147.0], [28.8, 147.0], [28.9, 148.0], [29.0, 148.0], [29.1, 148.0], [29.2, 149.0], [29.3, 149.0], [29.4, 149.0], [29.5, 150.0], [29.6, 150.0], [29.7, 150.0], [29.8, 151.0], [29.9, 151.0], [30.0, 152.0], [30.1, 152.0], [30.2, 153.0], [30.3, 153.0], [30.4, 154.0], [30.5, 154.0], [30.6, 154.0], [30.7, 154.0], [30.8, 154.0], [30.9, 155.0], [31.0, 155.0], [31.1, 155.0], [31.2, 156.0], [31.3, 156.0], [31.4, 156.0], [31.5, 157.0], [31.6, 158.0], [31.7, 158.0], [31.8, 158.0], [31.9, 159.0], [32.0, 159.0], [32.1, 160.0], [32.2, 160.0], [32.3, 161.0], [32.4, 161.0], [32.5, 162.0], [32.6, 162.0], [32.7, 162.0], [32.8, 162.0], [32.9, 162.0], [33.0, 163.0], [33.1, 163.0], [33.2, 163.0], [33.3, 164.0], [33.4, 164.0], [33.5, 164.0], [33.6, 165.0], [33.7, 165.0], [33.8, 165.0], [33.9, 166.0], [34.0, 167.0], [34.1, 167.0], [34.2, 168.0], [34.3, 168.0], [34.4, 169.0], [34.5, 169.0], [34.6, 169.0], [34.7, 169.0], [34.8, 170.0], [34.9, 170.0], [35.0, 170.0], [35.1, 170.0], [35.2, 171.0], [35.3, 171.0], [35.4, 171.0], [35.5, 171.0], [35.6, 171.0], [35.7, 171.0], [35.8, 171.0], [35.9, 172.0], [36.0, 172.0], [36.1, 172.0], [36.2, 172.0], [36.3, 172.0], [36.4, 172.0], [36.5, 173.0], [36.6, 173.0], [36.7, 173.0], [36.8, 173.0], [36.9, 173.0], [37.0, 173.0], [37.1, 174.0], [37.2, 174.0], [37.3, 174.0], [37.4, 174.0], [37.5, 174.0], [37.6, 175.0], [37.7, 175.0], [37.8, 175.0], [37.9, 175.0], [38.0, 175.0], [38.1, 175.0], [38.2, 176.0], [38.3, 176.0], [38.4, 176.0], [38.5, 176.0], [38.6, 176.0], [38.7, 176.0], [38.8, 177.0], [38.9, 177.0], [39.0, 177.0], [39.1, 177.0], [39.2, 177.0], [39.3, 177.0], [39.4, 178.0], [39.5, 178.0], [39.6, 178.0], [39.7, 178.0], [39.8, 178.0], [39.9, 179.0], [40.0, 179.0], [40.1, 179.0], [40.2, 179.0], [40.3, 179.0], [40.4, 179.0], [40.5, 179.0], [40.6, 180.0], [40.7, 180.0], [40.8, 180.0], [40.9, 180.0], [41.0, 180.0], [41.1, 180.0], [41.2, 181.0], [41.3, 181.0], [41.4, 181.0], [41.5, 181.0], [41.6, 182.0], [41.7, 182.0], [41.8, 182.0], [41.9, 182.0], [42.0, 183.0], [42.1, 183.0], [42.2, 183.0], [42.3, 183.0], [42.4, 183.0], [42.5, 183.0], [42.6, 183.0], [42.7, 183.0], [42.8, 184.0], [42.9, 184.0], [43.0, 184.0], [43.1, 184.0], [43.2, 184.0], [43.3, 184.0], [43.4, 184.0], [43.5, 184.0], [43.6, 184.0], [43.7, 184.0], [43.8, 185.0], [43.9, 185.0], [44.0, 185.0], [44.1, 185.0], [44.2, 185.0], [44.3, 185.0], [44.4, 185.0], [44.5, 186.0], [44.6, 186.0], [44.7, 186.0], [44.8, 186.0], [44.9, 186.0], [45.0, 186.0], [45.1, 187.0], [45.2, 187.0], [45.3, 187.0], [45.4, 187.0], [45.5, 187.0], [45.6, 187.0], [45.7, 187.0], [45.8, 187.0], [45.9, 188.0], [46.0, 188.0], [46.1, 188.0], [46.2, 188.0], [46.3, 188.0], [46.4, 188.0], [46.5, 188.0], [46.6, 188.0], [46.7, 188.0], [46.8, 189.0], [46.9, 189.0], [47.0, 189.0], [47.1, 189.0], [47.2, 189.0], [47.3, 189.0], [47.4, 189.0], [47.5, 189.0], [47.6, 189.0], [47.7, 189.0], [47.8, 190.0], [47.9, 190.0], [48.0, 190.0], [48.1, 190.0], [48.2, 190.0], [48.3, 190.0], [48.4, 191.0], [48.5, 191.0], [48.6, 191.0], [48.7, 191.0], [48.8, 191.0], [48.9, 191.0], [49.0, 192.0], [49.1, 192.0], [49.2, 192.0], [49.3, 192.0], [49.4, 192.0], [49.5, 192.0], [49.6, 192.0], [49.7, 192.0], [49.8, 193.0], [49.9, 193.0], [50.0, 193.0], [50.1, 193.0], [50.2, 193.0], [50.3, 193.0], [50.4, 193.0], [50.5, 193.0], [50.6, 193.0], [50.7, 194.0], [50.8, 194.0], [50.9, 194.0], [51.0, 194.0], [51.1, 194.0], [51.2, 194.0], [51.3, 194.0], [51.4, 195.0], [51.5, 195.0], [51.6, 195.0], [51.7, 195.0], [51.8, 195.0], [51.9, 195.0], [52.0, 195.0], [52.1, 195.0], [52.2, 195.0], [52.3, 196.0], [52.4, 196.0], [52.5, 196.0], [52.6, 196.0], [52.7, 196.0], [52.8, 196.0], [52.9, 196.0], [53.0, 196.0], [53.1, 196.0], [53.2, 196.0], [53.3, 197.0], [53.4, 197.0], [53.5, 197.0], [53.6, 197.0], [53.7, 197.0], [53.8, 197.0], [53.9, 197.0], [54.0, 197.0], [54.1, 197.0], [54.2, 197.0], [54.3, 198.0], [54.4, 198.0], [54.5, 198.0], [54.6, 198.0], [54.7, 198.0], [54.8, 198.0], [54.9, 198.0], [55.0, 198.0], [55.1, 198.0], [55.2, 198.0], [55.3, 198.0], [55.4, 198.0], [55.5, 199.0], [55.6, 199.0], [55.7, 199.0], [55.8, 199.0], [55.9, 199.0], [56.0, 199.0], [56.1, 199.0], [56.2, 199.0], [56.3, 199.0], [56.4, 199.0], [56.5, 200.0], [56.6, 200.0], [56.7, 200.0], [56.8, 200.0], [56.9, 200.0], [57.0, 200.0], [57.1, 201.0], [57.2, 201.0], [57.3, 201.0], [57.4, 201.0], [57.5, 201.0], [57.6, 201.0], [57.7, 202.0], [57.8, 202.0], [57.9, 202.0], [58.0, 202.0], [58.1, 202.0], [58.2, 202.0], [58.3, 203.0], [58.4, 203.0], [58.5, 203.0], [58.6, 203.0], [58.7, 203.0], [58.8, 203.0], [58.9, 203.0], [59.0, 204.0], [59.1, 204.0], [59.2, 204.0], [59.3, 204.0], [59.4, 204.0], [59.5, 204.0], [59.6, 205.0], [59.7, 205.0], [59.8, 205.0], [59.9, 205.0], [60.0, 205.0], [60.1, 205.0], [60.2, 205.0], [60.3, 205.0], [60.4, 206.0], [60.5, 206.0], [60.6, 206.0], [60.7, 206.0], [60.8, 206.0], [60.9, 206.0], [61.0, 207.0], [61.1, 207.0], [61.2, 207.0], [61.3, 207.0], [61.4, 207.0], [61.5, 207.0], [61.6, 207.0], [61.7, 207.0], [61.8, 208.0], [61.9, 208.0], [62.0, 208.0], [62.1, 208.0], [62.2, 208.0], [62.3, 208.0], [62.4, 208.0], [62.5, 209.0], [62.6, 209.0], [62.7, 209.0], [62.8, 209.0], [62.9, 209.0], [63.0, 210.0], [63.1, 210.0], [63.2, 210.0], [63.3, 210.0], [63.4, 211.0], [63.5, 211.0], [63.6, 211.0], [63.7, 212.0], [63.8, 212.0], [63.9, 212.0], [64.0, 213.0], [64.1, 213.0], [64.2, 213.0], [64.3, 213.0], [64.4, 214.0], [64.5, 214.0], [64.6, 215.0], [64.7, 215.0], [64.8, 216.0], [64.9, 216.0], [65.0, 216.0], [65.1, 216.0], [65.2, 217.0], [65.3, 217.0], [65.4, 217.0], [65.5, 217.0], [65.6, 218.0], [65.7, 218.0], [65.8, 218.0], [65.9, 218.0], [66.0, 219.0], [66.1, 219.0], [66.2, 220.0], [66.3, 220.0], [66.4, 220.0], [66.5, 220.0], [66.6, 221.0], [66.7, 221.0], [66.8, 221.0], [66.9, 222.0], [67.0, 222.0], [67.1, 222.0], [67.2, 223.0], [67.3, 223.0], [67.4, 223.0], [67.5, 223.0], [67.6, 224.0], [67.7, 224.0], [67.8, 224.0], [67.9, 225.0], [68.0, 225.0], [68.1, 225.0], [68.2, 226.0], [68.3, 226.0], [68.4, 227.0], [68.5, 228.0], [68.6, 228.0], [68.7, 229.0], [68.8, 230.0], [68.9, 230.0], [69.0, 230.0], [69.1, 231.0], [69.2, 232.0], [69.3, 233.0], [69.4, 233.0], [69.5, 234.0], [69.6, 234.0], [69.7, 235.0], [69.8, 236.0], [69.9, 238.0], [70.0, 240.0], [70.1, 240.0], [70.2, 241.0], [70.3, 243.0], [70.4, 245.0], [70.5, 247.0], [70.6, 248.0], [70.7, 250.0], [70.8, 253.0], [70.9, 253.0], [71.0, 254.0], [71.1, 258.0], [71.2, 261.0], [71.3, 271.0], [71.4, 274.0], [71.5, 282.0], [71.6, 285.0], [71.7, 287.0], [71.8, 288.0], [71.9, 300.0], [72.0, 302.0], [72.1, 305.0], [72.2, 306.0], [72.3, 307.0], [72.4, 308.0], [72.5, 309.0], [72.6, 310.0], [72.7, 311.0], [72.8, 312.0], [72.9, 314.0], [73.0, 314.0], [73.1, 316.0], [73.2, 322.0], [73.3, 324.0], [73.4, 326.0], [73.5, 328.0], [73.6, 330.0], [73.7, 330.0], [73.8, 331.0], [73.9, 332.0], [74.0, 334.0], [74.1, 335.0], [74.2, 337.0], [74.3, 338.0], [74.4, 339.0], [74.5, 339.0], [74.6, 340.0], [74.7, 343.0], [74.8, 344.0], [74.9, 345.0], [75.0, 345.0], [75.1, 347.0], [75.2, 348.0], [75.3, 348.0], [75.4, 349.0], [75.5, 351.0], [75.6, 351.0], [75.7, 352.0], [75.8, 353.0], [75.9, 357.0], [76.0, 360.0], [76.1, 365.0], [76.2, 371.0], [76.3, 373.0], [76.4, 374.0], [76.5, 374.0], [76.6, 375.0], [76.7, 375.0], [76.8, 376.0], [76.9, 378.0], [77.0, 381.0], [77.1, 389.0], [77.2, 390.0], [77.3, 391.0], [77.4, 397.0], [77.5, 541.0], [77.6, 606.0], [77.7, 748.0], [77.8, 916.0], [77.9, 1025.0], [78.0, 1032.0], [78.1, 1048.0], [78.2, 1065.0], [78.3, 1145.0], [78.4, 1198.0], [78.5, 1278.0], [78.6, 1316.0], [78.7, 1417.0], [78.8, 1494.0], [78.9, 1577.0], [79.0, 1670.0], [79.1, 1833.0], [79.2, 2057.0], [79.3, 2092.0], [79.4, 2176.0], [79.5, 2302.0], [79.6, 2563.0], [79.7, 2788.0], [79.8, 2933.0], [79.9, 3091.0], [80.0, 3343.0], [80.1, 3417.0], [80.2, 3419.0], [80.3, 3513.0], [80.4, 3736.0], [80.5, 4050.0], [80.6, 4277.0], [80.7, 4309.0], [80.8, 4357.0], [80.9, 4482.0], [81.0, 4922.0], [81.1, 5097.0], [81.2, 5424.0], [81.3, 5532.0], [81.4, 5693.0], [81.5, 5864.0], [81.6, 5865.0], [81.7, 5867.0], [81.8, 6028.0], [81.9, 6192.0], [82.0, 6264.0], [82.1, 6270.0], [82.2, 6431.0], [82.3, 6538.0], [82.4, 6576.0], [82.5, 6617.0], [82.6, 6629.0], [82.7, 6630.0], [82.8, 6637.0], [82.9, 6661.0], [83.0, 6663.0], [83.1, 6693.0], [83.2, 6704.0], [83.3, 6729.0], [83.4, 6734.0], [83.5, 6767.0], [83.6, 6773.0], [83.7, 6786.0], [83.8, 6805.0], [83.9, 6815.0], [84.0, 6848.0], [84.1, 6899.0], [84.2, 6914.0], [84.3, 6957.0], [84.4, 7061.0], [84.5, 7087.0], [84.6, 7090.0], [84.7, 7112.0], [84.8, 7133.0], [84.9, 7155.0], [85.0, 7225.0], [85.1, 7249.0], [85.2, 7252.0], [85.3, 7254.0], [85.4, 7268.0], [85.5, 7287.0], [85.6, 7313.0], [85.7, 7323.0], [85.8, 7353.0], [85.9, 7552.0], [86.0, 7587.0], [86.1, 7689.0], [86.2, 7809.0], [86.3, 7810.0], [86.4, 8003.0], [86.5, 8098.0], [86.6, 8105.0], [86.7, 8163.0], [86.8, 8337.0], [86.9, 8343.0], [87.0, 8493.0], [87.1, 8517.0], [87.2, 8556.0], [87.3, 8564.0], [87.4, 8576.0], [87.5, 8581.0], [87.6, 8583.0], [87.7, 8602.0], [87.8, 8614.0], [87.9, 8620.0], [88.0, 8642.0], [88.1, 8963.0], [88.2, 8992.0], [88.3, 9059.0], [88.4, 9061.0], [88.5, 9063.0], [88.6, 9125.0], [88.7, 9271.0], [88.8, 9295.0], [88.9, 9310.0], [89.0, 9517.0], [89.1, 9574.0], [89.2, 9622.0], [89.3, 9796.0], [89.4, 9858.0], [89.5, 9876.0], [89.6, 9914.0], [89.7, 9947.0], [89.8, 9980.0], [89.9, 10002.0], [90.0, 10040.0], [90.1, 10081.0], [90.2, 10120.0], [90.3, 10188.0], [90.4, 10190.0], [90.5, 10327.0], [90.6, 10335.0], [90.7, 10413.0], [90.8, 10493.0], [90.9, 10554.0], [91.0, 10579.0], [91.1, 10597.0], [91.2, 10824.0], [91.3, 10988.0], [91.4, 11061.0], [91.5, 11071.0], [91.6, 11077.0], [91.7, 11081.0], [91.8, 11085.0], [91.9, 11096.0], [92.0, 11099.0], [92.1, 11103.0], [92.2, 11147.0], [92.3, 11176.0], [92.4, 11203.0], [92.5, 11211.0], [92.6, 11215.0], [92.7, 11242.0], [92.8, 11305.0], [92.9, 11537.0], [93.0, 11551.0], [93.1, 11607.0], [93.2, 11741.0], [93.3, 11804.0], [93.4, 11842.0], [93.5, 11846.0], [93.6, 11967.0], [93.7, 12318.0], [93.8, 12428.0], [93.9, 12796.0], [94.0, 13264.0], [94.1, 13629.0], [94.2, 13706.0], [94.3, 13761.0], [94.4, 14249.0], [94.5, 14546.0], [94.6, 14814.0], [94.7, 14907.0], [94.8, 15237.0], [94.9, 15733.0], [95.0, 16291.0], [95.1, 16610.0], [95.2, 17306.0], [95.3, 18585.0], [95.4, 18863.0], [95.5, 19396.0], [95.6, 19894.0], [95.7, 20427.0], [95.8, 21212.0], [95.9, 21375.0], [96.0, 23512.0], [96.1, 24629.0], [96.2, 26034.0], [96.3, 27034.0], [96.4, 27473.0], [96.5, 27972.0], [96.6, 30451.0], [96.7, 31257.0], [96.8, 32142.0], [96.9, 34766.0], [97.0, 38452.0], [97.1, 40905.0], [97.2, 42448.0], [97.3, 45558.0], [97.4, 49164.0], [97.5, 55680.0], [97.6, 63315.0], [97.7, 64933.0], [97.8, 71673.0], [97.9, 73775.0], [98.0, 81633.0], [98.1, 97677.0], [98.2, 100178.0], [98.3, 100195.0], [98.4, 100206.0], [98.5, 100326.0], [98.6, 100454.0], [98.7, 101016.0], [98.8, 101118.0], [98.9, 101144.0], [99.0, 127829.0], [99.1, 130192.0], [99.2, 143966.0], [99.3, 155264.0], [99.4, 155400.0], [99.5, 159306.0], [99.6, 165723.0], [99.7, 170091.0], [99.8, 195674.0], [99.9, 260110.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 40602.0, "series": [{"data": [[0.0, 15940.0], [139300.0, 12.0], [155300.0, 61.0], [254500.0, 15.0], [66700.0, 4.0], [69900.0, 1.0], [73100.0, 1.0], [71500.0, 1.0], [74700.0, 2.0], [77900.0, 9.0], [81100.0, 1.0], [84300.0, 3.0], [85900.0, 3.0], [97100.0, 2.0], [95500.0, 1.0], [98700.0, 1.0], [100300.0, 52.0], [108300.0, 1.0], [129100.0, 2.0], [140200.0, 3.0], [169000.0, 1.0], [191400.0, 15.0], [100.0, 40602.0], [137900.0, 6.0], [34500.0, 8.0], [32900.0, 2.0], [35300.0, 8.0], [36100.0, 1.0], [36900.0, 1.0], [150700.0, 2.0], [37700.0, 3.0], [39300.0, 7.0], [40900.0, 29.0], [169900.0, 3.0], [41700.0, 6.0], [48100.0, 2.0], [195500.0, 2.0], [50500.0, 19.0], [200.0, 15496.0], [52100.0, 7.0], [54500.0, 1.0], [56100.0, 1.0], [55300.0, 2.0], [59300.0, 2.0], [57700.0, 2.0], [63300.0, 94.0], [64100.0, 1.0], [64900.0, 10.0], [65800.0, 2.0], [69000.0, 2.0], [67400.0, 1.0], [72200.0, 1.0], [70600.0, 2.0], [300.0, 5535.0], [73800.0, 4.0], [81800.0, 2.0], [80200.0, 1.0], [85000.0, 2.0], [86600.0, 1.0], [101000.0, 78.0], [99400.0, 1.0], [400.0, 70.0], [500.0, 83.0], [129800.0, 4.0], [128200.0, 5.0], [132400.0, 1.0], [135600.0, 2.0], [138800.0, 1.0], [600.0, 106.0], [148400.0, 1.0], [151600.0, 1.0], [164400.0, 17.0], [167600.0, 2.0], [700.0, 70.0], [800.0, 35.0], [900.0, 73.0], [1000.0, 416.0], [1100.0, 134.0], [1200.0, 181.0], [1300.0, 96.0], [1400.0, 137.0], [1500.0, 97.0], [1600.0, 106.0], [1700.0, 60.0], [1800.0, 30.0], [1900.0, 33.0], [2000.0, 177.0], [2100.0, 98.0], [136500.0, 3.0], [2300.0, 40.0], [2200.0, 66.0], [142900.0, 4.0], [149300.0, 1.0], [152500.0, 1.0], [2400.0, 57.0], [2500.0, 78.0], [2600.0, 39.0], [2800.0, 85.0], [2700.0, 11.0], [2900.0, 73.0], [3000.0, 68.0], [3100.0, 51.0], [3300.0, 71.0], [3200.0, 6.0], [3400.0, 239.0], [3500.0, 69.0], [3700.0, 31.0], [3600.0, 13.0], [3800.0, 33.0], [3900.0, 52.0], [4000.0, 39.0], [4300.0, 172.0], [4200.0, 122.0], [4100.0, 4.0], [68100.0, 2.0], [4600.0, 27.0], [4400.0, 68.0], [72900.0, 1.0], [4500.0, 56.0], [69700.0, 1.0], [76100.0, 1.0], [4700.0, 6.0], [4800.0, 4.0], [74500.0, 3.0], [4900.0, 53.0], [80900.0, 1.0], [5000.0, 55.0], [5100.0, 14.0], [5300.0, 39.0], [5200.0, 24.0], [84100.0, 1.0], [5600.0, 69.0], [5400.0, 101.0], [5500.0, 65.0], [87300.0, 3.0], [5700.0, 34.0], [5800.0, 306.0], [93700.0, 2.0], [90500.0, 2.0], [6100.0, 46.0], [6000.0, 105.0], [95300.0, 2.0], [5900.0, 1.0], [6300.0, 41.0], [100100.0, 232.0], [6200.0, 212.0], [6600.0, 690.0], [6500.0, 246.0], [6400.0, 88.0], [6900.0, 244.0], [6700.0, 590.0], [6800.0, 336.0], [109700.0, 1.0], [7000.0, 281.0], [7100.0, 339.0], [7300.0, 248.0], [7200.0, 604.0], [7400.0, 20.0], [7600.0, 100.0], [7500.0, 182.0], [7800.0, 179.0], [7900.0, 45.0], [7700.0, 55.0], [8000.0, 132.0], [8100.0, 230.0], [127300.0, 6.0], [130500.0, 1.0], [128900.0, 30.0], [8400.0, 124.0], [8600.0, 339.0], [137400.0, 2.0], [8200.0, 21.0], [9200.0, 150.0], [9000.0, 330.0], [8800.0, 2.0], [9400.0, 27.0], [9600.0, 40.0], [10000.0, 242.0], [10200.0, 43.0], [9800.0, 280.0], [159800.0, 20.0], [10400.0, 142.0], [10600.0, 46.0], [11000.0, 711.0], [10800.0, 31.0], [11200.0, 410.0], [11400.0, 13.0], [11600.0, 74.0], [11800.0, 284.0], [12200.0, 12.0], [12000.0, 2.0], [12600.0, 25.0], [12400.0, 46.0], [13200.0, 19.0], [13000.0, 18.0], [12800.0, 29.0], [13600.0, 128.0], [13400.0, 5.0], [13800.0, 3.0], [14200.0, 88.0], [14000.0, 9.0], [14400.0, 15.0], [14800.0, 121.0], [14600.0, 1.0], [15200.0, 14.0], [15000.0, 32.0], [15400.0, 11.0], [15600.0, 22.0], [15800.0, 11.0], [16200.0, 35.0], [16000.0, 2.0], [16400.0, 24.0], [17200.0, 1.0], [16800.0, 5.0], [18000.0, 8.0], [18400.0, 12.0], [19200.0, 21.0], [18800.0, 39.0], [19600.0, 3.0], [20400.0, 42.0], [20000.0, 6.0], [20800.0, 9.0], [21200.0, 99.0], [21600.0, 6.0], [22400.0, 11.0], [23200.0, 5.0], [24400.0, 2.0], [23600.0, 26.0], [25600.0, 13.0], [26000.0, 11.0], [26400.0, 13.0], [27600.0, 2.0], [26800.0, 1.0], [27200.0, 4.0], [28000.0, 2.0], [29200.0, 6.0], [30400.0, 55.0], [30000.0, 2.0], [31600.0, 5.0], [30800.0, 11.0], [31200.0, 38.0], [32000.0, 2.0], [32400.0, 1.0], [138300.0, 1.0], [36800.0, 1.0], [36000.0, 2.0], [37600.0, 5.0], [38400.0, 2.0], [147900.0, 1.0], [160700.0, 3.0], [40000.0, 1.0], [40800.0, 9.0], [42400.0, 10.0], [41600.0, 1.0], [44800.0, 35.0], [46400.0, 24.0], [47200.0, 1.0], [48000.0, 2.0], [50400.0, 18.0], [51200.0, 1.0], [52800.0, 2.0], [53600.0, 2.0], [59200.0, 2.0], [63200.0, 12.0], [64000.0, 18.0], [64800.0, 2.0], [73600.0, 12.0], [76800.0, 1.0], [81600.0, 2.0], [80000.0, 1.0], [78400.0, 1.0], [84800.0, 2.0], [97600.0, 1.0], [99200.0, 1.0], [100800.0, 3.0], [105600.0, 1.0], [118400.0, 1.0], [128000.0, 6.0], [137600.0, 2.0], [140800.0, 1.0], [167300.0, 1.0], [260100.0, 137.0], [68700.0, 5.0], [71900.0, 2.0], [79900.0, 2.0], [83100.0, 1.0], [84700.0, 1.0], [92700.0, 2.0], [94300.0, 2.0], [97500.0, 1.0], [99100.0, 2.0], [126300.0, 1.0], [129500.0, 3.0], [142600.0, 4.0], [149000.0, 3.0], [155400.0, 10.0], [165000.0, 2.0], [168200.0, 2.0], [33100.0, 2.0], [34700.0, 15.0], [35500.0, 6.0], [140300.0, 3.0], [40300.0, 2.0], [156300.0, 2.0], [159500.0, 1.0], [162700.0, 1.0], [42700.0, 13.0], [41100.0, 15.0], [41900.0, 1.0], [45100.0, 1.0], [46700.0, 4.0], [185100.0, 2.0], [49100.0, 2.0], [47500.0, 1.0], [50700.0, 2.0], [53100.0, 5.0], [52300.0, 1.0], [51500.0, 10.0], [53900.0, 1.0], [55500.0, 2.0], [56300.0, 1.0], [57900.0, 1.0], [61100.0, 2.0], [65100.0, 3.0], [71000.0, 2.0], [72600.0, 3.0], [75800.0, 1.0], [77400.0, 2.0], [83800.0, 2.0], [87000.0, 1.0], [91800.0, 2.0], [138000.0, 1.0], [160400.0, 1.0], [170000.0, 7.0], [195600.0, 30.0], [132500.0, 4.0], [151700.0, 3.0], [154900.0, 2.0], [167700.0, 20.0], [68500.0, 2.0], [71700.0, 16.0], [81300.0, 5.0], [87700.0, 2.0], [89300.0, 2.0], [95700.0, 1.0], [100500.0, 28.0], [129300.0, 3.0], [136600.0, 2.0], [139800.0, 2.0], [149400.0, 9.0], [159000.0, 18.0], [194200.0, 6.0], [16500.0, 23.0], [17300.0, 24.0], [16900.0, 3.0], [18100.0, 1.0], [17700.0, 1.0], [18500.0, 54.0], [19300.0, 29.0], [18900.0, 21.0], [20100.0, 20.0], [19700.0, 13.0], [21300.0, 14.0], [20900.0, 3.0], [20500.0, 17.0], [21700.0, 16.0], [22100.0, 9.0], [23300.0, 3.0], [24100.0, 3.0], [24500.0, 1.0], [24900.0, 1.0], [25300.0, 10.0], [25700.0, 8.0], [26900.0, 2.0], [27300.0, 37.0], [27700.0, 1.0], [28900.0, 2.0], [29300.0, 21.0], [31300.0, 2.0], [31700.0, 12.0], [32100.0, 34.0], [32500.0, 2.0], [33000.0, 10.0], [34600.0, 2.0], [35400.0, 1.0], [143900.0, 11.0], [147100.0, 6.0], [38600.0, 31.0], [37800.0, 13.0], [150300.0, 5.0], [39400.0, 5.0], [159900.0, 14.0], [41800.0, 2.0], [42600.0, 3.0], [45800.0, 2.0], [46600.0, 8.0], [49000.0, 8.0], [191900.0, 8.0], [50600.0, 2.0], [51400.0, 2.0], [54600.0, 2.0], [62600.0, 2.0], [65000.0, 2.0], [67600.0, 1.0], [70800.0, 2.0], [80400.0, 1.0], [85200.0, 1.0], [83600.0, 2.0], [82000.0, 1.0], [88400.0, 2.0], [93200.0, 2.0], [94800.0, 1.0], [101200.0, 51.0], [107600.0, 1.0], [118800.0, 2.0], [130000.0, 1.0], [149600.0, 5.0], [159200.0, 14.0], [165600.0, 22.0], [131300.0, 1.0], [147300.0, 1.0], [156900.0, 2.0], [195300.0, 14.0], [67500.0, 1.0], [69100.0, 2.0], [70700.0, 5.0], [75500.0, 1.0], [73900.0, 3.0], [81900.0, 3.0], [96300.0, 2.0], [97900.0, 4.0], [101100.0, 173.0], [102700.0, 1.0], [110700.0, 1.0], [128300.0, 7.0], [138600.0, 1.0], [161000.0, 3.0], [167400.0, 3.0], [34100.0, 2.0], [33300.0, 1.0], [136300.0, 1.0], [36500.0, 2.0], [37300.0, 3.0], [155500.0, 1.0], [158700.0, 10.0], [39700.0, 5.0], [42100.0, 1.0], [168300.0, 1.0], [42900.0, 2.0], [41300.0, 1.0], [43700.0, 2.0], [44500.0, 14.0], [46100.0, 3.0], [45300.0, 2.0], [46900.0, 2.0], [48500.0, 10.0], [50100.0, 2.0], [51700.0, 4.0], [58100.0, 3.0], [66600.0, 14.0], [73000.0, 3.0], [74600.0, 1.0], [76200.0, 1.0], [81000.0, 2.0], [79400.0, 1.0], [82600.0, 2.0], [84200.0, 3.0], [92200.0, 2.0], [100200.0, 124.0], [130600.0, 1.0], [137200.0, 1.0], [140400.0, 8.0], [156400.0, 4.0], [194800.0, 4.0], [170100.0, 14.0], [192500.0, 1.0], [195700.0, 22.0], [65700.0, 1.0], [70500.0, 2.0], [73700.0, 27.0], [72100.0, 1.0], [80100.0, 1.0], [84900.0, 2.0], [86500.0, 2.0], [94500.0, 1.0], [8300.0, 162.0], [8500.0, 624.0], [8700.0, 44.0], [132600.0, 11.0], [8900.0, 139.0], [9100.0, 145.0], [145400.0, 1.0], [9300.0, 124.0], [9700.0, 86.0], [9500.0, 203.0], [9900.0, 289.0], [10100.0, 321.0], [10500.0, 288.0], [10700.0, 47.0], [10300.0, 189.0], [11100.0, 340.0], [10900.0, 98.0], [11700.0, 134.0], [11300.0, 71.0], [11500.0, 224.0], [11900.0, 96.0], [12100.0, 6.0], [12500.0, 14.0], [12300.0, 85.0], [12700.0, 37.0], [13100.0, 8.0], [13300.0, 20.0], [12900.0, 35.0], [13500.0, 36.0], [13700.0, 107.0], [14300.0, 55.0], [14100.0, 12.0], [13900.0, 7.0], [14700.0, 50.0], [14500.0, 28.0], [14900.0, 48.0], [15100.0, 22.0], [15300.0, 3.0], [15700.0, 36.0], [15500.0, 36.0], [16300.0, 29.0], [15900.0, 14.0], [16100.0, 28.0], [17400.0, 16.0], [17000.0, 25.0], [16600.0, 53.0], [18200.0, 3.0], [17800.0, 5.0], [18600.0, 51.0], [19000.0, 7.0], [19400.0, 35.0], [19800.0, 63.0], [20600.0, 35.0], [21400.0, 3.0], [21800.0, 2.0], [22600.0, 5.0], [23400.0, 3.0], [24200.0, 3.0], [25000.0, 1.0], [25400.0, 5.0], [24600.0, 56.0], [26200.0, 20.0], [26600.0, 45.0], [27000.0, 19.0], [27400.0, 45.0], [27800.0, 44.0], [28600.0, 1.0], [29000.0, 8.0], [30600.0, 3.0], [31000.0, 8.0], [31800.0, 60.0], [34800.0, 27.0], [35600.0, 2.0], [37200.0, 1.0], [38000.0, 3.0], [159100.0, 33.0], [42000.0, 1.0], [165500.0, 3.0], [44400.0, 6.0], [46000.0, 8.0], [48400.0, 1.0], [191100.0, 1.0], [194300.0, 2.0], [50000.0, 2.0], [54000.0, 2.0], [219900.0, 1.0], [57200.0, 1.0], [55600.0, 2.0], [58000.0, 2.0], [60400.0, 1.0], [59600.0, 1.0], [61200.0, 2.0], [63600.0, 2.0], [66400.0, 1.0], [68000.0, 1.0], [74400.0, 1.0], [80800.0, 1.0], [82400.0, 1.0], [85600.0, 10.0], [90400.0, 2.0], [100000.0, 4.0], [128800.0, 10.0], [139200.0, 1.0], [145600.0, 4.0], [155200.0, 60.0], [190400.0, 1.0], [152900.0, 4.0], [159300.0, 5.0], [165700.0, 32.0], [69500.0, 2.0], [72700.0, 1.0], [77500.0, 1.0], [80700.0, 2.0], [88700.0, 1.0], [98300.0, 1.0], [96700.0, 3.0], [128700.0, 1.0], [130300.0, 8.0], [169800.0, 3.0], [192200.0, 8.0], [195400.0, 2.0], [33500.0, 4.0], [132300.0, 2.0], [35100.0, 2.0], [36700.0, 4.0], [145100.0, 6.0], [154700.0, 2.0], [40700.0, 20.0], [39900.0, 1.0], [167500.0, 13.0], [43900.0, 10.0], [47100.0, 4.0], [45500.0, 9.0], [48700.0, 13.0], [193100.0, 5.0], [51100.0, 3.0], [59100.0, 2.0], [63100.0, 1.0], [61500.0, 21.0], [64700.0, 2.0], [71800.0, 1.0], [73400.0, 2.0], [81400.0, 1.0], [87800.0, 2.0], [100600.0, 33.0], [108600.0, 1.0], [129400.0, 12.0], [127800.0, 7.0], [139600.0, 2.0], [158800.0, 7.0], [162000.0, 1.0], [153300.0, 1.0], [159700.0, 1.0], [169300.0, 23.0], [67700.0, 4.0], [66100.0, 1.0], [69300.0, 1.0], [78900.0, 1.0], [80500.0, 1.0], [91700.0, 4.0], [98100.0, 2.0], [99700.0, 2.0], [130100.0, 8.0], [16700.0, 12.0], [17100.0, 17.0], [18300.0, 3.0], [17900.0, 2.0], [17500.0, 3.0], [19100.0, 7.0], [20300.0, 1.0], [19900.0, 14.0], [21500.0, 2.0], [20700.0, 12.0], [21100.0, 16.0], [23500.0, 22.0], [22700.0, 22.0], [23100.0, 7.0], [24300.0, 1.0], [23900.0, 5.0], [25500.0, 9.0], [25100.0, 2.0], [24700.0, 21.0], [25900.0, 5.0], [27100.0, 19.0], [26700.0, 10.0], [27500.0, 1.0], [27900.0, 55.0], [29500.0, 2.0], [28700.0, 2.0], [29100.0, 7.0], [30300.0, 1.0], [31100.0, 25.0], [31500.0, 2.0], [32300.0, 20.0], [33400.0, 1.0], [132700.0, 2.0], [36600.0, 7.0], [35000.0, 4.0], [145500.0, 4.0], [37400.0, 2.0], [155100.0, 6.0], [40600.0, 9.0], [39800.0, 1.0], [42200.0, 46.0], [41400.0, 1.0], [47000.0, 2.0], [45400.0, 1.0], [193500.0, 8.0], [50200.0, 2.0], [52600.0, 2.0], [55000.0, 2.0], [56600.0, 2.0], [58200.0, 2.0], [60600.0, 7.0], [61400.0, 4.0], [62200.0, 1.0], [63800.0, 1.0], [65400.0, 2.0], [66800.0, 4.0], [68400.0, 5.0], [70000.0, 2.0], [71600.0, 64.0], [74800.0, 1.0], [78000.0, 1.0], [79600.0, 1.0], [81200.0, 22.0], [86000.0, 4.0], [82800.0, 2.0], [100400.0, 84.0], [103600.0, 6.0], [129200.0, 6.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 260100.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 196.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 77643.0, "series": [{"data": [[0.0, 77643.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 1332.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 21029.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 196.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 2329.0598673044287, "minX": 1.68287436E12, "maxY": 3000.0, "series": [{"data": [[1.68287466E12, 2329.0598673044287], [1.68287448E12, 3000.0], [1.68287454E12, 3000.0], [1.68287436E12, 3000.0], [1.68287442E12, 3000.0], [1.6828746E12, 3000.0]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68287466E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 117.0, "minX": 1.0, "maxY": 185156.5, "series": [{"data": [[3.0, 31297.0], [4.0, 31296.0], [5.0, 31295.0], [6.0, 31294.0], [8.0, 31294.5], [9.0, 31295.0], [10.0, 31293.0], [11.0, 31291.0], [12.0, 31286.0], [13.0, 31283.0], [14.0, 31279.0], [16.0, 31257.0], [18.0, 31257.0], [19.0, 31255.0], [20.0, 31255.0], [22.0, 31250.0], [23.0, 31248.0], [25.0, 185156.5], [27.0, 27197.0], [29.0, 27196.5], [31.0, 27196.0], [33.0, 27194.0], [35.0, 27192.0], [34.0, 27195.0], [37.0, 27187.0], [39.0, 27181.0], [38.0, 27182.0], [41.0, 27178.0], [40.0, 27180.0], [43.0, 27081.0], [42.0, 27177.0], [45.0, 27075.0], [44.0, 27077.0], [47.0, 27067.0], [46.0, 27069.0], [49.0, 27058.0], [48.0, 27063.0], [51.0, 27053.0], [50.0, 27056.0], [53.0, 27046.0], [52.0, 27049.0], [55.0, 27040.0], [54.0, 27043.0], [57.0, 27029.0], [56.0, 27034.0], [59.0, 27021.0], [58.0, 27026.0], [60.0, 27021.0], [67.0, 26276.0], [65.0, 26277.0], [64.0, 26892.5], [70.0, 26684.0], [79.0, 26257.0], [78.0, 26274.0], [77.0, 26399.25], [76.0, 26479.5], [82.0, 26256.0], [81.0, 26258.0], [80.0, 26257.0], [87.0, 26660.0], [86.0, 26253.0], [85.0, 26661.0], [84.0, 26662.0], [91.0, 26657.0], [90.0, 26251.0], [89.0, 26869.0], [95.0, 26242.0], [94.0, 26652.0], [93.0, 26656.0], [92.0, 26657.0], [98.0, 26645.0], [97.0, 26239.0], [96.0, 26647.0], [103.0, 26634.0], [100.0, 26641.0], [107.0, 26633.0], [105.0, 25588.0], [104.0, 26634.0], [109.0, 26633.0], [108.0, 26633.0], [115.0, 26631.0], [114.0, 26632.0], [112.0, 26283.666666666668], [119.0, 27438.0], [118.0, 26089.5], [116.0, 26631.0], [123.0, 26608.5], [121.0, 26609.0], [120.0, 26610.0], [127.0, 26602.0], [125.0, 27429.0], [124.0, 26603.0], [134.0, 26362.5], [132.0, 26485.0], [130.0, 24198.5], [128.0, 27016.0], [143.0, 21635.0], [142.0, 26442.0], [141.0, 26444.5], [139.0, 25398.5], [137.0, 26470.0], [136.0, 24070.0], [150.0, 21620.0], [149.0, 25380.0], [148.0, 26839.0], [146.0, 27263.0], [145.0, 21632.0], [144.0, 27265.0], [158.0, 20808.5], [156.0, 26028.0], [155.0, 20809.0], [153.0, 25616.0], [152.0, 24570.0], [167.0, 25606.0], [166.0, 26434.0], [165.0, 26026.5], [163.0, 20809.0], [162.0, 26027.5], [161.0, 26441.0], [160.0, 26440.0], [175.0, 23181.0], [174.0, 26411.0], [172.0, 20788.0], [171.0, 20791.0], [170.0, 20791.0], [169.0, 20796.0], [168.0, 20799.0], [181.0, 20638.0], [180.0, 20638.0], [179.0, 20640.0], [178.0, 20640.0], [177.0, 20778.0], [190.0, 19906.0], [189.0, 21159.333333333332], [188.0, 19906.0], [185.0, 19906.0], [184.0, 21160.666666666668], [199.0, 19899.5], [197.0, 21781.0], [195.0, 19902.0], [194.0, 24708.0], [193.0, 19904.0], [192.0, 19904.5], [206.0, 21151.666666666668], [205.0, 19898.0], [203.0, 19898.5], [200.0, 19900.0], [215.0, 19895.0], [211.0, 19895.0], [210.0, 19897.0], [209.0, 19897.666666666668], [222.0, 20834.25], [220.0, 23654.0], [216.0, 19894.0], [231.0, 19883.0], [230.0, 22394.666666666668], [227.0, 19889.0], [226.0, 19891.0], [225.0, 19894.85714285714], [239.0, 23635.0], [238.0, 24275.0], [237.0, 19877.0], [236.0, 19878.0], [235.0, 21135.666666666668], [232.0, 19881.0], [247.0, 19869.0], [246.0, 19869.0], [245.0, 19872.0], [244.0, 19872.0], [243.0, 19873.0], [242.0, 23633.0], [241.0, 19875.0], [240.0, 19875.0], [255.0, 19859.0], [254.0, 19861.0], [251.0, 23621.0], [250.0, 21741.5], [248.0, 23622.0], [271.0, 22355.0], [268.0, 23609.0], [267.0, 21732.5], [265.0, 23612.0], [264.0, 21107.0], [262.0, 23613.0], [260.0, 19853.5], [258.0, 23620.0], [257.0, 19860.0], [285.0, 23580.0], [286.0, 23579.0], [284.0, 23582.0], [283.0, 21703.0], [281.0, 23583.0], [280.0, 23585.0], [279.0, 23584.666666666668], [276.0, 23586.0], [275.0, 23587.0], [274.0, 21712.0], [272.0, 23599.0], [301.0, 19799.0], [303.0, 19796.0], [300.0, 19801.5], [291.0, 19814.0], [289.0, 23575.0], [288.0, 23576.0], [298.0, 19801.0], [297.0, 19808.0], [296.0, 19806.0], [295.0, 19810.5], [293.0, 21693.0], [292.0, 23572.0], [317.0, 20633.0], [319.0, 21272.0], [316.0, 20633.333333333332], [313.0, 20634.0], [311.0, 20634.0], [310.0, 19785.0], [309.0, 19788.0], [308.0, 19787.5], [306.0, 19790.0], [305.0, 19794.0], [335.0, 21265.0], [334.0, 20628.0], [333.0, 20948.0], [331.0, 20842.0], [328.0, 20790.75], [324.0, 20632.0], [323.0, 21057.333333333332], [320.0, 21270.0], [350.0, 20614.0], [351.0, 20611.0], [349.0, 21254.0], [348.0, 20616.0], [347.0, 22490.0], [346.0, 21257.0], [345.0, 21258.0], [344.0, 20621.0], [343.0, 20622.0], [336.0, 20625.0], [339.0, 20623.0], [337.0, 21263.0], [342.0, 21260.0], [340.0, 20623.0], [365.0, 21236.0], [367.0, 21233.0], [364.0, 20599.0], [354.0, 21248.0], [352.0, 21249.0], [363.0, 20600.0], [362.0, 20601.0], [361.0, 21243.0], [360.0, 20926.0], [358.0, 21245.5], [356.0, 21247.0], [381.0, 21214.0], [383.0, 21213.0], [380.0, 21217.0], [371.0, 21231.0], [370.0, 21232.0], [369.0, 21233.0], [368.0, 21233.0], [379.0, 21218.0], [377.0, 21218.0], [376.0, 21222.0], [375.0, 21223.0], [374.0, 21226.0], [373.0, 21228.0], [372.0, 21228.0], [397.0, 21204.0], [398.0, 21198.0], [396.0, 20887.5], [394.0, 21506.0], [393.0, 21207.0], [391.0, 20890.0], [389.0, 21209.0], [388.0, 21212.0], [385.0, 21212.0], [384.0, 21213.0], [414.0, 22402.0], [415.0, 20528.0], [413.0, 21171.0], [412.0, 21171.0], [411.0, 21173.0], [409.0, 21176.0], [408.0, 21177.0], [406.0, 21189.0], [402.0, 21190.0], [400.0, 21490.5], [405.0, 20551.0], [404.0, 21190.0], [419.0, 20171.0], [430.0, 20781.5], [431.0, 21389.0], [428.0, 21399.0], [427.0, 20782.5], [425.0, 20169.0], [423.0, 20170.0], [422.0, 20787.5], [421.0, 20788.0], [417.0, 21162.0], [416.0, 21165.0], [445.0, 20041.0], [446.0, 21275.0], [444.0, 21276.0], [435.0, 21385.0], [434.0, 20769.5], [433.0, 21387.0], [443.0, 21276.0], [442.0, 20660.0], [441.0, 21277.0], [440.0, 20043.0], [439.0, 21278.0], [437.0, 20147.0], [462.0, 20425.0], [463.0, 20425.0], [461.0, 20426.0], [451.0, 20034.0], [450.0, 20034.0], [449.0, 21270.0], [448.0, 20656.5], [459.0, 20426.5], [458.0, 19192.0], [457.0, 20427.0], [456.0, 20426.0], [455.0, 20427.0], [453.0, 21262.0], [452.0, 21268.0], [478.0, 20415.5], [479.0, 20415.0], [476.0, 20417.0], [467.0, 20424.0], [465.0, 20425.0], [475.0, 20420.0], [474.0, 20421.0], [473.0, 20421.0], [471.0, 20423.0], [470.0, 20424.0], [468.0, 20424.333333333332], [493.0, 19441.5], [492.0, 19442.0], [490.0, 17249.5], [489.0, 19443.0], [487.0, 19444.0], [486.0, 20400.0], [483.0, 20409.0], [480.0, 20412.0], [509.0, 19434.0], [511.0, 19433.0], [508.0, 19435.0], [497.0, 19441.0], [496.0, 15073.0], [507.0, 19435.0], [506.0, 19438.0], [505.0, 19437.0], [504.0, 19439.0], [503.0, 19440.0], [501.0, 17977.666666666668], [500.0, 19442.0], [539.0, 17187.5], [532.0, 16593.0], [542.0, 13746.0], [543.0, 15010.0], [530.0, 13777.0], [529.0, 16501.666666666668], [540.0, 14991.0], [537.0, 19381.5], [518.0, 19426.333333333332], [515.0, 13795.0], [514.0, 19428.0], [513.0, 19431.0], [512.0, 19431.0], [526.0, 19423.0], [525.0, 16607.0], [523.0, 17239.5], [521.0, 19426.0], [520.0, 17232.0], [535.0, 13755.0], [534.0, 19388.0], [533.0, 15041.0], [568.0, 13633.0], [573.0, 13624.0], [575.0, 13615.5], [562.0, 16458.0], [560.0, 14890.0], [572.0, 13625.0], [571.0, 19259.0], [570.0, 14248.5], [559.0, 19279.0], [544.0, 13746.0], [546.0, 13745.0], [545.0, 14368.0], [548.0, 19373.0], [547.0, 13742.0], [551.0, 14983.5], [549.0, 19372.0], [558.0, 19280.0], [557.0, 14893.0], [556.0, 13649.0], [554.0, 17088.5], [553.0, 14896.0], [567.0, 13635.5], [565.0, 14880.0], [564.0, 19268.0], [563.0, 13639.0], [595.0, 12742.0], [606.0, 11845.0], [605.0, 11845.0], [604.0, 11846.0], [581.0, 15574.0], [579.0, 12760.0], [578.0, 14855.0], [577.0, 19245.0], [576.0, 13615.0], [591.0, 12754.0], [590.0, 12755.5], [588.0, 13377.5], [587.0, 12756.0], [585.0, 13379.5], [584.0, 13379.5], [599.0, 12736.0], [597.0, 13982.0], [596.0, 12741.0], [594.0, 15153.0], [592.0, 12753.0], [634.0, 11826.5], [638.0, 13085.0], [639.0, 11823.0], [625.0, 11835.5], [628.0, 11831.5], [626.0, 11833.0], [637.0, 11824.0], [636.0, 11825.0], [635.0, 11827.0], [632.0, 11826.5], [614.0, 11841.0], [613.0, 11842.0], [612.0, 11843.0], [611.0, 11844.0], [610.0, 11844.5], [608.0, 11845.666666666666], [623.0, 11836.0], [622.0, 12469.0], [620.0, 11839.0], [618.0, 11840.0], [617.0, 11841.0], [616.0, 11841.0], [630.0, 11829.0], [629.0, 11830.0], [664.0, 11805.5], [670.0, 11799.0], [671.0, 11798.0], [657.0, 11810.0], [656.0, 11811.0], [669.0, 11801.0], [668.0, 11802.0], [667.0, 11804.333333333334], [655.0, 11814.333333333334], [641.0, 11823.0], [640.0, 11822.0], [644.0, 11818.0], [643.0, 11820.0], [646.0, 11818.0], [645.0, 11818.0], [652.0, 11816.0], [651.0, 11817.0], [650.0, 11817.0], [649.0, 11817.0], [648.0, 11816.0], [662.0, 11807.0], [661.0, 11808.0], [660.0, 11808.0], [658.0, 11809.0], [699.0, 13016.0], [690.0, 11764.0], [702.0, 11742.0], [703.0, 13005.0], [689.0, 13038.0], [688.0, 11777.0], [701.0, 12383.5], [698.0, 12595.333333333334], [678.0, 13044.0], [677.0, 11782.0], [676.0, 11784.0], [675.0, 11785.0], [674.0, 11791.0], [673.0, 11796.0], [672.0, 13060.0], [687.0, 11779.0], [686.0, 11779.0], [684.0, 12201.0], [683.0, 11781.0], [682.0, 11781.0], [695.0, 11760.0], [694.0, 11760.0], [692.0, 11762.0], [733.0, 11020.5], [734.0, 11019.0], [721.0, 10396.5], [731.0, 11020.0], [730.0, 11022.0], [729.0, 11022.0], [728.0, 11022.0], [719.0, 11029.0], [705.0, 13002.0], [704.0, 13003.0], [708.0, 11358.5], [706.0, 13000.0], [711.0, 11987.5], [709.0, 10726.0], [717.0, 11028.5], [715.0, 11872.0], [714.0, 11873.0], [713.0, 11242.0], [727.0, 11024.0], [725.0, 9763.0], [724.0, 10395.0], [722.0, 11027.5], [766.0, 10042.333333333334], [756.0, 10045.0], [767.0, 10042.0], [752.0, 10991.5], [754.0, 10045.0], [753.0, 10981.0], [764.0, 10042.0], [762.0, 10042.5], [760.0, 10043.5], [743.0, 11004.0], [742.0, 11010.0], [741.0, 11013.0], [740.0, 11014.0], [739.0, 11016.0], [738.0, 11017.0], [737.0, 11018.0], [736.0, 11019.0], [750.0, 10996.0], [749.0, 10995.333333333334], [746.0, 10996.0], [745.0, 10999.0], [744.0, 11003.0], [759.0, 10044.0], [758.0, 10044.0], [757.0, 10044.0], [792.0, 10014.0], [797.0, 10012.0], [798.0, 10011.0], [796.0, 10011.0], [794.0, 10012.0], [793.0, 10010.0], [783.0, 10023.0], [769.0, 10040.0], [768.0, 10042.0], [771.0, 10040.0], [770.0, 10039.0], [773.0, 10039.0], [772.0, 10039.0], [775.0, 10035.0], [774.0, 10036.0], [782.0, 10024.0], [780.0, 10025.0], [779.0, 10028.0], [778.0, 10030.0], [777.0, 10033.0], [776.0, 10034.0], [791.0, 10014.0], [790.0, 10018.5], [788.0, 10018.0], [786.0, 10021.333333333334], [829.0, 10787.5], [819.0, 14240.0], [831.0, 12557.0], [816.0, 8612.0], [818.0, 9875.0], [817.0, 9874.0], [827.0, 9017.0], [826.0, 10583.5], [825.0, 9018.0], [807.0, 14353.0], [805.0, 12169.0], [803.0, 9988.0], [802.0, 9988.0], [800.0, 9988.5], [815.0, 9876.0], [814.0, 9878.0], [813.0, 13420.5], [811.0, 9880.0], [810.0, 9982.0], [809.0, 9983.0], [808.0, 9351.5], [823.0, 10789.0], [821.0, 9018.0], [820.0, 9869.0], [856.0, 8977.0], [860.0, 8975.0], [863.0, 13714.0], [848.0, 11631.0], [859.0, 7712.0], [858.0, 7712.0], [857.0, 12728.5], [846.0, 13364.0], [833.0, 10582.5], [832.0, 9015.0], [835.0, 9014.0], [834.0, 9015.0], [837.0, 9012.0], [836.0, 9012.0], [839.0, 9007.0], [838.0, 12146.0], [844.0, 13365.0], [843.0, 8999.0], [842.0, 8999.0], [841.0, 13368.0], [840.0, 9007.0], [854.0, 8984.0], [853.0, 13356.0], [852.0, 8991.0], [851.0, 11627.333333333334], [893.0, 12852.333333333334], [883.0, 12435.0], [895.0, 13062.5], [880.0, 13703.0], [891.0, 13697.0], [889.0, 13698.0], [878.0, 12437.0], [864.0, 13291.666666666666], [866.0, 12446.0], [865.0, 16906.0], [868.0, 13712.0], [867.0, 13713.0], [871.0, 12443.0], [870.0, 13654.5], [877.0, 13842.0], [875.0, 13283.666666666666], [872.0, 12441.0], [887.0, 12432.0], [886.0, 12433.0], [884.0, 12435.0], [882.0, 12436.0], [881.0, 12436.0], [921.0, 12419.0], [926.0, 13681.0], [927.0, 12411.0], [912.0, 12423.0], [915.0, 13826.5], [913.0, 12423.0], [925.0, 15225.0], [924.0, 12417.0], [923.0, 12418.0], [920.0, 13823.5], [903.0, 13694.0], [902.0, 13694.0], [901.0, 13749.0], [900.0, 12428.0], [898.0, 15237.0], [897.0, 13833.5], [911.0, 12425.0], [910.0, 13269.666666666666], [907.0, 12426.0], [906.0, 12426.0], [905.0, 12426.0], [918.0, 13574.0], [917.0, 13054.5], [954.0, 15179.0], [946.0, 14410.0], [956.0, 14717.0], [959.0, 15716.333333333334], [945.0, 15181.0], [955.0, 14719.0], [953.0, 15206.5], [934.0, 13596.0], [932.0, 13540.0], [931.0, 13673.0], [929.0, 15216.0], [928.0, 12410.0], [943.0, 15182.0], [942.0, 12373.0], [941.0, 15182.0], [940.0, 15187.0], [939.0, 13647.0], [938.0, 14418.0], [936.0, 14363.5], [950.0, 15180.0], [949.0, 15180.0], [948.0, 13638.0], [988.0, 1048.0], [991.0, 9473.0], [977.0, 1059.0], [976.0, 1062.0], [981.0, 1058.3333333333333], [979.0, 1059.0], [990.0, 11125.0], [989.0, 1042.0], [987.0, 1049.0], [986.0, 1050.0], [985.0, 1057.0], [984.0, 1058.0], [975.0, 1064.5], [963.0, 15560.333333333334], [960.0, 15165.0], [967.0, 10422.0], [966.0, 15701.0], [973.0, 1065.5], [971.0, 1066.0], [968.0, 12051.0], [983.0, 1057.0], [982.0, 1058.0], [1020.0, 203.0], [1011.0, 204.0], [1005.0, 205.0], [1002.0, 205.75], [1000.0, 205.5], [998.0, 206.0], [996.0, 207.0], [995.0, 207.5], [1056.0, 181.0], [1078.0, 9861.0], [1058.0, 1065.0], [1060.0, 1063.5], [1062.0, 1063.0], [1066.0, 1061.0], [1076.0, 1046.0], [1072.0, 1055.0], [1054.0, 181.0], [1046.0, 2785.0], [1042.0, 202.0], [1070.0, 1056.0], [1238.0, 396.0], [1232.0, 397.0], [1402.0, 377.3333333333333], [1404.0, 382.81818181818176], [1398.0, 379.0], [1392.0, 379.0], [1416.0, 376.4], [1442.0, 387.5], [1422.0, 374.0], [1418.0, 375.5], [1414.0, 376.5], [1410.0, 388.2], [1408.0, 394.0], [1438.0, 373.0], [1436.0, 374.2666666666667], [1434.0, 383.25], [1432.0, 374.0], [1430.0, 384.6], [1428.0, 373.99999999999994], [1424.0, 374.625], [1592.0, 1336.5], [1594.0, 1335.0], [1570.0, 1297.0], [1572.0, 7621.0], [1576.0, 1354.0], [1590.0, 1344.0], [1588.0, 1349.0], [1586.0, 1349.0], [1584.0, 1351.0], [1548.0, 230.0], [1566.0, 8636.0], [1564.0, 148.33333333333334], [1554.0, 229.21739130434784], [1552.0, 229.16666666666666], [1582.0, 1351.5], [1662.0, 277.0], [1660.0, 276.54545454545456], [1658.0, 1036.5], [1726.0, 232.0], [1720.0, 270.0], [1718.0, 269.75], [1760.0, 209.77419354838705], [1728.0, 215.0], [1826.0, 163.875], [1832.0, 150.0], [1834.0, 149.0], [1828.0, 163.76923076923077], [1822.0, 165.25], [1818.0, 164.8], [1814.0, 165.0], [1812.0, 164.0], [1810.0, 165.66666666666666], [1954.0, 225.0], [1956.0, 225.0], [1982.0, 223.75], [1962.0, 225.0], [1964.0, 225.0], [1966.0, 224.0], [1980.0, 224.0], [1974.0, 224.0], [1972.0, 224.0], [1950.0, 225.33333333333334], [1924.0, 227.0], [1934.0, 226.0], [1944.0, 226.0], [2038.0, 1089.0], [2044.0, 1088.5], [2018.0, 170.0], [2046.0, 1087.0], [2042.0, 1089.0], [2036.0, 1090.0], [2034.0, 1091.0], [2032.0, 129.0], [1988.0, 223.0], [1986.0, 222.94230769230762], [1990.0, 223.14285714285714], [1992.0, 221.8], [1996.0, 221.5], [1994.0, 221.83333333333331], [1998.0, 185.0], [2012.0, 171.0], [2002.0, 184.0], [2000.0, 185.5], [2048.0, 1085.0], [2300.0, 160.0], [2268.0, 221.0769230769231], [2288.0, 217.78947368421052], [2280.0, 219.0], [2276.0, 219.0], [2272.0, 220.75], [2228.0, 5520.0], [2428.0, 1077.0], [2392.0, 186.0], [2424.0, 1077.0], [2416.0, 185.0], [2400.0, 186.0], [2444.0, 1056.0], [2500.0, 1444.75], [2504.0, 2769.0], [2496.0, 1971.0], [2432.0, 1074.0], [2436.0, 5306.0], [2440.0, 1063.0], [2460.0, 319.0], [2760.0, 241.33333333333334], [2752.0, 241.6], [2772.0, 288.57142857142856], [2768.0, 248.06666666666666], [2764.0, 241.0], [2756.0, 240.5], [2788.0, 240.0], [2784.0, 295.5], [2776.0, 353.0], [2940.0, 181.0], [2884.0, 178.0], [2828.0, 236.0], [2836.0, 236.0], [2840.0, 235.0], [2844.0, 235.0], [2852.0, 347.0], [2848.0, 234.0], [2996.0, 178.0], [3000.0, 5248.076690585422], [2972.0, 179.0], [2988.0, 178.25], [2984.0, 178.0], [2980.0, 178.0], [2149.0, 1073.0], [2297.0, 160.0], [2261.0, 223.0], [2265.0, 221.5], [2269.0, 220.7], [2289.0, 217.5294117647059], [2281.0, 220.0], [2277.0, 219.89855072463772], [2273.0, 221.0], [2213.0, 2552.333333333333], [2429.0, 1076.0], [2389.0, 187.0], [2425.0, 1076.0], [2421.0, 184.0], [2409.0, 185.0], [2505.0, 1487.0], [2433.0, 1074.0], [2441.0, 1061.0], [2445.0, 1032.0], [2461.0, 319.0], [2761.0, 241.0], [2777.0, 262.6], [2753.0, 241.0], [2769.0, 240.33333333333334], [2765.0, 241.0], [2757.0, 241.0], [2749.0, 3549.0], [2745.0, 3550.0], [2781.0, 274.20000000000005], [2825.0, 236.0], [2837.0, 235.17857142857144], [2821.0, 237.0], [2829.0, 236.0], [2833.0, 236.0], [2841.0, 235.0], [2845.0, 269.2307692307692], [2853.0, 290.0], [2945.0, 181.0], [2993.0, 178.0], [2981.0, 178.0], [1077.0, 1044.0], [1079.0, 9858.0], [1061.0, 1064.0], [1063.0, 1062.0], [1069.0, 1059.6666666666667], [1075.0, 1052.0], [1073.0, 1054.0], [1031.0, 203.0], [1029.0, 204.0], [1055.0, 181.0], [1053.0, 190.5], [1049.0, 200.5], [1047.0, 202.0], [1043.0, 201.5], [1041.0, 202.55999999999997], [1071.0, 1055.0], [1237.0, 396.9047619047618], [1235.0, 396.6666666666667], [1231.0, 397.0], [1405.0, 377.44444444444446], [1379.0, 381.0], [1403.0, 382.75], [1401.0, 379.9], [1397.0, 378.6666666666667], [1395.0, 379.0], [1415.0, 377.5], [1437.0, 372.75], [1423.0, 374.8571428571429], [1421.0, 377.96], [1419.0, 376.0], [1411.0, 386.5], [1439.0, 381.45454545454544], [1435.0, 378.65217391304355], [1433.0, 373.5], [1431.0, 376.9166666666667], [1429.0, 374.83098591549305], [1427.0, 374.99999999999994], [1425.0, 377.875], [1569.0, 1298.0], [1589.0, 1348.0], [1571.0, 1297.0], [1573.0, 7619.0], [1579.0, 1353.0], [1577.0, 1353.0], [1585.0, 1350.5], [1567.0, 1308.0], [1547.0, 230.10169491525426], [1551.0, 230.14285714285714], [1549.0, 229.99999999999997], [1565.0, 8638.0], [1561.0, 206.00000000000003], [1581.0, 1352.0], [1663.0, 276.0], [1661.0, 276.0], [1659.0, 445.76315789473676], [1657.0, 279.5], [1727.0, 216.0], [1725.0, 232.66666666666666], [1723.0, 233.0], [1721.0, 270.0], [1717.0, 270.82352941176475], [1761.0, 175.0], [1759.0, 210.0], [1835.0, 149.0], [1839.0, 117.0], [1825.0, 163.8125], [1819.0, 164.16666666666666], [1815.0, 164.5], [1813.0, 165.0], [1809.0, 165.0], [1953.0, 225.0], [1977.0, 224.25], [1955.0, 225.0], [1957.0, 225.0], [1961.0, 225.0], [1963.0, 225.0], [1967.0, 224.5], [1979.0, 224.0], [1975.0, 224.0], [1973.0, 224.0], [1971.0, 225.0], [1969.0, 224.0], [1933.0, 226.0], [1949.0, 225.0], [1947.0, 226.0], [1945.0, 226.0], [2045.0, 1088.0], [2047.0, 1086.0], [2017.0, 170.0], [2023.0, 170.0], [2029.0, 130.0], [2025.0, 169.33333333333331], [2043.0, 1088.0], [2041.0, 1090.0], [2037.0, 1090.0], [2015.0, 170.75], [1985.0, 224.0], [1991.0, 223.0], [1993.0, 222.0], [1997.0, 218.0], [2013.0, 171.0], [2005.0, 182.5], [2003.0, 184.0], [2001.0, 185.0], [2262.0, 223.0], [2298.0, 160.0], [2266.0, 222.0], [2270.0, 221.0], [2278.0, 219.9545454545454], [2274.0, 220.80952380952377], [2214.0, 1064.0], [2386.0, 187.0], [2430.0, 1075.6666666666667], [2422.0, 184.0], [2418.0, 185.0], [2410.0, 185.0], [2446.0, 1030.0], [2502.0, 1557.3666666666668], [2506.0, 3572.0], [2498.0, 975.0], [2434.0, 1073.0], [2438.0, 5304.0], [2442.0, 1061.0], [2462.0, 337.91666666666663], [2766.0, 241.0], [2758.0, 241.0], [2790.0, 351.0], [2770.0, 265.55555555555554], [2762.0, 241.11111111111111], [2754.0, 240.875], [2786.0, 252.939393939394], [2782.0, 240.0], [2778.0, 240.0], [2774.0, 240.28571428571428], [2826.0, 236.0], [2830.0, 236.0], [2878.0, 178.0], [2834.0, 236.66666666666666], [2838.0, 235.0], [2854.0, 192.0], [2850.0, 235.0], [2970.0, 180.0], [2974.0, 179.0], [2990.0, 178.2], [2986.0, 178.0], [2982.0, 178.25], [2978.0, 179.0], [2051.0, 1080.0], [2263.0, 221.66666666666666], [2303.0, 159.0], [2267.0, 221.57142857142858], [2271.0, 220.8181818181818], [2299.0, 159.0], [2279.0, 218.85714285714286], [2275.0, 220.0], [2215.0, 236.0], [2431.0, 1075.0], [2391.0, 187.0], [2423.0, 182.9736842105263], [2419.0, 185.0], [2439.0, 5303.0], [2551.0, 3568.0], [2495.0, 1972.0], [2435.0, 1072.0], [2443.0, 1060.0], [2767.0, 241.0], [2771.0, 240.0], [2763.0, 241.22222222222223], [2759.0, 241.0], [2755.0, 241.0], [2751.0, 509.1578947368422], [2879.0, 178.47368421052633], [2823.0, 237.0], [2827.0, 236.0], [2839.0, 234.66666666666666], [2875.0, 180.2], [2959.0, 180.0], [2975.0, 179.0], [2995.0, 178.0], [2983.0, 178.0], [1.0, 31297.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[2956.6030738522973, 5279.9430039920935]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 3000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 54423.6, "minX": 1.68287436E12, "maxY": 271362.26666666666, "series": [{"data": [[1.68287466E12, 76029.43333333333], [1.68287448E12, 267902.9], [1.68287454E12, 226179.83333333334], [1.68287436E12, 138994.18333333332], [1.68287442E12, 217370.96666666667], [1.6828746E12, 271362.26666666666]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.68287466E12, 54423.6], [1.68287448E12, 188798.4], [1.68287454E12, 154778.4], [1.68287436E12, 98086.8], [1.68287442E12, 154240.8], [1.6828746E12, 189705.6]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68287466E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 2622.843624218555, "minX": 1.68287436E12, "maxY": 8908.179952601538, "series": [{"data": [[1.68287466E12, 3225.577071439595], [1.68287448E12, 5556.495575614734], [1.68287454E12, 8908.179952601538], [1.68287436E12, 2622.843624218555], [1.68287442E12, 4741.6439385687545], [1.6828746E12, 4424.442651933724]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68287466E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 2622.800633724414, "minX": 1.68287436E12, "maxY": 7857.390229451626, "series": [{"data": [[1.68287466E12, 3168.4315692022806], [1.68287448E12, 5483.529280981755], [1.68287454E12, 7857.390229451626], [1.68287436E12, 2622.800633724414], [1.68287442E12, 4741.604345931831], [1.6828746E12, 4163.1842651933985]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68287466E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 14.199623190888042, "minX": 1.68287436E12, "maxY": 5615.009318108329, "series": [{"data": [[1.68287466E12, 24.50609473846638], [1.68287448E12, 1383.1563431010604], [1.68287454E12, 5615.009318108329], [1.68287436E12, 14.199623190888042], [1.68287442E12, 259.82262280797204], [1.6828746E12, 1811.283668508298]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68287466E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 7.0, "minX": 1.68287436E12, "maxY": 260149.0, "series": [{"data": [[1.68287466E12, 109769.0], [1.68287448E12, 155568.0], [1.68287454E12, 195721.0], [1.68287436E12, 39348.0], [1.68287442E12, 100122.0], [1.6828746E12, 260149.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.68287466E12, 13615.0], [1.68287448E12, 7253.0], [1.68287454E12, 8771.0], [1.68287436E12, 11100.0], [1.68287442E12, 11032.0], [1.6828746E12, 5080.9000000000015]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.68287466E12, 27040.6], [1.68287448E12, 128917.0], [1.68287454E12, 167758.73], [1.68287436E12, 28995.29999999996], [1.68287442E12, 63318.369999999995], [1.6828746E12, 101206.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.68287466E12, 20631.0], [1.68287448E12, 10333.0], [1.68287454E12, 40906.0], [1.68287436E12, 13753.2], [1.68287442E12, 14573.0], [1.6828746E12, 10580.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.68287466E12, 26.0], [1.68287448E12, 8.0], [1.68287454E12, 18.0], [1.68287436E12, 12.0], [1.68287442E12, 7.0], [1.6828746E12, 16.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.68287466E12, 203.0], [1.68287448E12, 198.0], [1.68287454E12, 195.0], [1.68287436E12, 97.0], [1.68287442E12, 171.0], [1.6828746E12, 196.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68287466E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 36.0, "minX": 2.0, "maxY": 254532.0, "series": [{"data": [[2.0, 55855.5], [3.0, 212.0], [4.0, 38152.5], [5.0, 7890.0], [6.0, 25525.0], [7.0, 1703.0], [8.0, 1370.0], [10.0, 16482.0], [11.0, 55854.0], [12.0, 7655.5], [13.0, 1837.0], [14.0, 38012.5], [16.0, 9617.0], [17.0, 25677.0], [20.0, 20170.5], [21.0, 1031.0], [22.0, 27187.0], [23.0, 1059.0], [24.0, 10001.0], [25.0, 31255.0], [26.0, 9871.0], [30.0, 38654.0], [32.0, 5324.5], [33.0, 1202.0], [36.0, 66.0], [39.0, 157.0], [42.0, 7952.0], [43.0, 25584.0], [44.0, 15088.0], [48.0, 13637.5], [49.0, 20424.0], [50.0, 9443.5], [53.0, 16521.0], [54.0, 46.0], [57.0, 10025.0], [62.0, 156.0], [65.0, 19423.0], [70.0, 75.0], [77.0, 100180.0], [82.0, 3095.5], [87.0, 26634.0], [91.0, 198.0], [88.0, 203.0], [103.0, 126.0], [106.0, 13677.0], [107.0, 16814.5], [109.0, 93.0], [119.0, 133.0], [117.0, 1278.0], [121.0, 83.5], [123.0, 7220.0], [129.0, 153.0], [133.0, 19898.0], [143.0, 184.0], [166.0, 241.0], [163.0, 122.0], [186.0, 155.0], [192.0, 7197.0], [201.0, 41.0], [209.0, 6645.0], [220.0, 44.0], [236.0, 192.0], [268.0, 177.0], [271.0, 220.0], [280.0, 11078.0], [274.0, 185.0], [288.0, 149.0], [301.0, 182.0], [297.0, 180.0], [306.0, 2047.0], [318.0, 7087.0], [308.0, 197.0], [314.0, 189.0], [313.0, 183.0], [317.0, 163.0], [322.0, 163.0], [334.0, 196.0], [328.0, 100.0], [321.0, 6775.0], [332.0, 1290.0], [335.0, 203.0], [325.0, 195.0], [324.0, 202.0], [330.0, 208.0], [326.0, 177.0], [339.0, 197.0], [342.0, 176.0], [338.0, 134.0], [340.0, 227.0], [345.0, 6817.0], [341.0, 174.0], [336.0, 232.0], [346.0, 198.0], [349.0, 197.0], [350.0, 184.0], [353.0, 10750.0], [355.0, 146.0], [356.0, 11031.0], [361.0, 3421.0], [365.0, 204.0], [357.0, 188.0], [374.0, 7134.0], [377.0, 215.0], [390.0, 6729.0], [393.0, 222.0], [395.0, 159.0], [404.0, 10420.0], [402.0, 348.0], [410.0, 287.0], [417.0, 9298.0], [437.0, 67.0], [444.0, 8581.0], [447.0, 6630.0], [446.0, 2166.0], [456.0, 309.0], [461.0, 38.0], [459.0, 223.0], [465.0, 176.0], [491.0, 180.0], [485.0, 374.0], [526.0, 71.0], [543.0, 6663.0], [517.0, 5865.0], [533.0, 7250.0], [541.0, 170.0], [515.0, 11637.0], [573.0, 137.0], [566.0, 7721.0], [597.0, 175.0], [579.0, 190.0], [578.0, 185.0], [588.0, 199.0], [602.0, 203.0], [580.0, 191.0], [631.0, 99.0], [632.0, 11092.5], [636.0, 36.0], [635.0, 4277.0], [622.0, 149.0], [641.0, 186.0], [651.0, 53.0], [671.0, 77.0], [670.0, 190.0], [652.0, 172.0], [640.0, 206.0], [668.0, 178.0], [665.0, 196.0], [659.0, 180.0], [660.0, 172.0], [664.0, 143.0], [645.0, 195.0], [680.0, 41.0], [672.0, 194.0], [676.0, 11088.0], [690.0, 9061.0], [673.0, 165.0], [686.0, 210.0], [689.0, 239.0], [724.0, 119.0], [713.0, 204.0], [718.0, 226.5], [730.0, 195.0], [754.0, 9816.5], [749.0, 193.0], [763.0, 334.0], [769.0, 196.0], [770.0, 185.0], [771.0, 190.0], [772.0, 349.0], [793.0, 301.0], [806.0, 73.0], [807.0, 8099.0], [817.0, 580.0], [879.0, 164.0], [871.0, 374.0], [923.0, 75.0], [909.0, 8639.0], [906.0, 220.0], [910.0, 195.0], [962.0, 193.0], [963.0, 328.0], [978.0, 163.0], [991.0, 195.0], [1003.0, 184.0], [1000.0, 208.0], [1227.0, 188.0], [1437.0, 119.0], [1477.0, 172.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[33.0, 254532.0], [342.0, 103606.5], [686.0, 84894.0], [341.0, 77981.0], [11.0, 145606.0], [365.0, 81247.0], [377.0, 155328.0], [25.0, 185156.5], [53.0, 27872.0], [465.0, 155385.5]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1477.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 2.0, "maxY": 100180.0, "series": [{"data": [[2.0, 55855.5], [3.0, 211.0], [4.0, 38152.5], [5.0, 7890.0], [6.0, 25525.0], [7.0, 1703.0], [8.0, 1370.0], [10.0, 16482.0], [11.0, 55854.0], [12.0, 7655.5], [13.0, 1837.0], [14.0, 38012.5], [16.0, 9617.0], [17.0, 25677.0], [20.0, 20170.5], [21.0, 1031.0], [22.0, 27187.0], [23.0, 1059.0], [24.0, 10001.0], [25.0, 31255.0], [26.0, 9871.0], [30.0, 38654.0], [32.0, 5324.5], [33.0, 1202.0], [36.0, 65.5], [39.0, 157.0], [42.0, 7952.0], [43.0, 25584.0], [44.0, 15088.0], [48.0, 13637.5], [49.0, 20424.0], [50.0, 9443.5], [53.0, 16521.0], [54.0, 46.0], [57.0, 10025.0], [62.0, 156.0], [65.0, 19423.0], [70.0, 75.0], [77.0, 100180.0], [82.0, 3095.5], [87.0, 26634.0], [91.0, 198.0], [88.0, 203.0], [103.0, 126.0], [106.0, 13677.0], [107.0, 16814.5], [109.0, 93.0], [119.0, 133.0], [117.0, 1278.0], [121.0, 83.5], [123.0, 7220.0], [129.0, 153.0], [133.0, 19898.0], [143.0, 184.0], [166.0, 241.0], [163.0, 122.0], [186.0, 155.0], [192.0, 7197.0], [201.0, 41.0], [209.0, 6645.0], [220.0, 44.0], [236.0, 192.0], [268.0, 177.0], [271.0, 220.0], [280.0, 11078.0], [274.0, 185.0], [288.0, 149.0], [301.0, 182.0], [297.0, 180.0], [306.0, 2047.0], [318.0, 7087.0], [308.0, 197.0], [314.0, 189.0], [313.0, 183.0], [317.0, 163.0], [322.0, 163.0], [334.0, 196.0], [328.0, 100.0], [321.0, 6775.0], [332.0, 1290.0], [335.0, 203.0], [325.0, 195.0], [324.0, 202.0], [330.0, 208.0], [326.0, 177.0], [339.0, 197.0], [342.0, 176.0], [338.0, 134.0], [340.0, 227.0], [345.0, 6817.0], [341.0, 174.0], [336.0, 232.0], [346.0, 198.0], [349.0, 197.0], [350.0, 184.0], [353.0, 10750.0], [355.0, 146.0], [356.0, 11031.0], [361.0, 3421.0], [365.0, 204.0], [357.0, 188.0], [374.0, 7134.0], [377.0, 215.0], [390.0, 6729.0], [393.0, 222.0], [395.0, 159.0], [404.0, 10420.0], [402.0, 348.0], [410.0, 287.0], [417.0, 9298.0], [437.0, 67.0], [444.0, 8581.0], [447.0, 6630.0], [446.0, 2166.0], [456.0, 309.0], [461.0, 38.0], [459.0, 223.0], [465.0, 176.0], [491.0, 180.0], [485.0, 374.0], [526.0, 71.0], [543.0, 6663.0], [517.0, 5865.0], [533.0, 7250.0], [541.0, 170.0], [515.0, 11637.0], [573.0, 137.0], [566.0, 7721.0], [597.0, 175.0], [579.0, 190.0], [578.0, 185.0], [588.0, 199.0], [602.0, 203.0], [580.0, 191.0], [631.0, 99.0], [632.0, 11092.5], [636.0, 36.0], [635.0, 4277.0], [622.0, 149.0], [641.0, 186.0], [651.0, 53.0], [671.0, 77.0], [670.0, 190.0], [652.0, 172.0], [640.0, 206.0], [668.0, 178.0], [665.0, 196.0], [659.0, 180.0], [660.0, 172.0], [664.0, 143.0], [645.0, 195.0], [680.0, 41.0], [672.0, 194.0], [676.0, 11088.0], [690.0, 9061.0], [673.0, 165.0], [686.0, 210.0], [689.0, 239.0], [724.0, 119.0], [713.0, 204.0], [718.0, 226.5], [730.0, 195.0], [754.0, 9816.5], [749.0, 193.0], [763.0, 334.0], [769.0, 196.0], [770.0, 185.0], [771.0, 190.0], [772.0, 349.0], [793.0, 301.0], [806.0, 72.5], [807.0, 8099.0], [817.0, 580.0], [879.0, 164.0], [871.0, 374.0], [923.0, 75.0], [909.0, 8639.0], [906.0, 220.0], [910.0, 195.0], [962.0, 193.0], [963.0, 328.0], [978.0, 163.0], [991.0, 195.0], [1003.0, 184.0], [1000.0, 208.0], [1227.0, 188.0], [1437.0, 119.0], [1477.0, 172.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[33.0, 0.0], [342.0, 0.0], [686.0, 0.0], [341.0, 0.0], [11.0, 0.0], [365.0, 0.0], [377.0, 0.0], [25.0, 0.0], [53.0, 0.0], [465.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1477.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 105.76666666666667, "minX": 1.68287436E12, "maxY": 361.8333333333333, "series": [{"data": [[1.68287466E12, 105.76666666666667], [1.68287448E12, 351.15], [1.68287454E12, 300.6], [1.68287436E12, 239.36666666666667], [1.68287442E12, 311.28333333333336], [1.6828746E12, 361.8333333333333]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68287466E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.68287436E12, "maxY": 376.4, "series": [{"data": [[1.68287466E12, 107.98333333333333], [1.68287448E12, 374.6], [1.68287454E12, 307.1], [1.68287436E12, 194.61666666666667], [1.68287442E12, 306.03333333333336], [1.6828746E12, 376.4]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.6828746E12, 0.25]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.conn.HttpHostConnectException", "isController": false}, {"data": [[1.68287466E12, 0.03333333333333333], [1.68287448E12, 0.21666666666666667], [1.68287454E12, 2.3333333333333335], [1.6828746E12, 0.43333333333333335]], "isOverall": false, "label": "Non HTTP response code: java.net.SocketException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68287466E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.68287436E12, "maxY": 376.4, "series": [{"data": [[1.68287466E12, 107.98333333333333], [1.68287448E12, 374.6], [1.68287454E12, 307.1], [1.68287436E12, 194.61666666666667], [1.68287442E12, 306.03333333333336], [1.6828746E12, 376.4]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.68287466E12, 0.03333333333333333], [1.68287448E12, 0.21666666666666667], [1.68287454E12, 2.3333333333333335], [1.6828746E12, 0.6833333333333333]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68287466E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.68287436E12, "maxY": 376.4, "series": [{"data": [[1.68287466E12, 107.98333333333333], [1.68287448E12, 374.6], [1.68287454E12, 307.1], [1.68287436E12, 194.61666666666667], [1.68287442E12, 306.03333333333336], [1.6828746E12, 376.4]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.68287466E12, 0.03333333333333333], [1.68287448E12, 0.21666666666666667], [1.68287454E12, 2.3333333333333335], [1.6828746E12, 0.6833333333333333]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68287466E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

