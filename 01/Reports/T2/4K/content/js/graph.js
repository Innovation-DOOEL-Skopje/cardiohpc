/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 9.0, "minX": 0.0, "maxY": 171347.0, "series": [{"data": [[0.0, 9.0], [0.1, 24.0], [0.2, 31.0], [0.3, 35.0], [0.4, 37.0], [0.5, 39.0], [0.6, 42.0], [0.7, 44.0], [0.8, 46.0], [0.9, 48.0], [1.0, 50.0], [1.1, 52.0], [1.2, 53.0], [1.3, 54.0], [1.4, 55.0], [1.5, 56.0], [1.6, 57.0], [1.7, 57.0], [1.8, 58.0], [1.9, 59.0], [2.0, 60.0], [2.1, 62.0], [2.2, 63.0], [2.3, 63.0], [2.4, 64.0], [2.5, 65.0], [2.6, 66.0], [2.7, 67.0], [2.8, 68.0], [2.9, 69.0], [3.0, 71.0], [3.1, 71.0], [3.2, 73.0], [3.3, 74.0], [3.4, 74.0], [3.5, 75.0], [3.6, 75.0], [3.7, 76.0], [3.8, 77.0], [3.9, 78.0], [4.0, 78.0], [4.1, 79.0], [4.2, 80.0], [4.3, 80.0], [4.4, 80.0], [4.5, 81.0], [4.6, 81.0], [4.7, 82.0], [4.8, 83.0], [4.9, 83.0], [5.0, 84.0], [5.1, 85.0], [5.2, 85.0], [5.3, 86.0], [5.4, 86.0], [5.5, 86.0], [5.6, 87.0], [5.7, 88.0], [5.8, 88.0], [5.9, 89.0], [6.0, 90.0], [6.1, 91.0], [6.2, 92.0], [6.3, 93.0], [6.4, 93.0], [6.5, 94.0], [6.6, 94.0], [6.7, 95.0], [6.8, 95.0], [6.9, 96.0], [7.0, 96.0], [7.1, 96.0], [7.2, 97.0], [7.3, 97.0], [7.4, 98.0], [7.5, 98.0], [7.6, 98.0], [7.7, 99.0], [7.8, 99.0], [7.9, 100.0], [8.0, 101.0], [8.1, 102.0], [8.2, 102.0], [8.3, 103.0], [8.4, 103.0], [8.5, 103.0], [8.6, 104.0], [8.7, 105.0], [8.8, 105.0], [8.9, 105.0], [9.0, 106.0], [9.1, 106.0], [9.2, 107.0], [9.3, 108.0], [9.4, 109.0], [9.5, 109.0], [9.6, 110.0], [9.7, 111.0], [9.8, 111.0], [9.9, 111.0], [10.0, 112.0], [10.1, 112.0], [10.2, 113.0], [10.3, 113.0], [10.4, 113.0], [10.5, 114.0], [10.6, 114.0], [10.7, 115.0], [10.8, 115.0], [10.9, 115.0], [11.0, 116.0], [11.1, 116.0], [11.2, 116.0], [11.3, 117.0], [11.4, 117.0], [11.5, 117.0], [11.6, 117.0], [11.7, 117.0], [11.8, 118.0], [11.9, 118.0], [12.0, 118.0], [12.1, 118.0], [12.2, 119.0], [12.3, 119.0], [12.4, 119.0], [12.5, 119.0], [12.6, 120.0], [12.7, 120.0], [12.8, 120.0], [12.9, 121.0], [13.0, 121.0], [13.1, 121.0], [13.2, 122.0], [13.3, 122.0], [13.4, 122.0], [13.5, 123.0], [13.6, 123.0], [13.7, 123.0], [13.8, 124.0], [13.9, 124.0], [14.0, 124.0], [14.1, 125.0], [14.2, 125.0], [14.3, 125.0], [14.4, 125.0], [14.5, 126.0], [14.6, 126.0], [14.7, 126.0], [14.8, 126.0], [14.9, 126.0], [15.0, 126.0], [15.1, 127.0], [15.2, 127.0], [15.3, 127.0], [15.4, 127.0], [15.5, 127.0], [15.6, 127.0], [15.7, 128.0], [15.8, 128.0], [15.9, 128.0], [16.0, 128.0], [16.1, 128.0], [16.2, 129.0], [16.3, 129.0], [16.4, 129.0], [16.5, 130.0], [16.6, 131.0], [16.7, 131.0], [16.8, 131.0], [16.9, 132.0], [17.0, 132.0], [17.1, 132.0], [17.2, 132.0], [17.3, 133.0], [17.4, 133.0], [17.5, 133.0], [17.6, 133.0], [17.7, 134.0], [17.8, 134.0], [17.9, 134.0], [18.0, 134.0], [18.1, 134.0], [18.2, 134.0], [18.3, 135.0], [18.4, 135.0], [18.5, 135.0], [18.6, 135.0], [18.7, 135.0], [18.8, 135.0], [18.9, 136.0], [19.0, 136.0], [19.1, 136.0], [19.2, 136.0], [19.3, 136.0], [19.4, 137.0], [19.5, 137.0], [19.6, 137.0], [19.7, 138.0], [19.8, 138.0], [19.9, 138.0], [20.0, 138.0], [20.1, 138.0], [20.2, 139.0], [20.3, 139.0], [20.4, 139.0], [20.5, 139.0], [20.6, 139.0], [20.7, 139.0], [20.8, 140.0], [20.9, 140.0], [21.0, 140.0], [21.1, 140.0], [21.2, 140.0], [21.3, 140.0], [21.4, 141.0], [21.5, 141.0], [21.6, 141.0], [21.7, 141.0], [21.8, 141.0], [21.9, 142.0], [22.0, 142.0], [22.1, 142.0], [22.2, 142.0], [22.3, 142.0], [22.4, 142.0], [22.5, 142.0], [22.6, 143.0], [22.7, 143.0], [22.8, 143.0], [22.9, 143.0], [23.0, 143.0], [23.1, 143.0], [23.2, 144.0], [23.3, 144.0], [23.4, 144.0], [23.5, 144.0], [23.6, 144.0], [23.7, 144.0], [23.8, 145.0], [23.9, 145.0], [24.0, 145.0], [24.1, 145.0], [24.2, 145.0], [24.3, 145.0], [24.4, 146.0], [24.5, 146.0], [24.6, 146.0], [24.7, 146.0], [24.8, 146.0], [24.9, 146.0], [25.0, 146.0], [25.1, 146.0], [25.2, 147.0], [25.3, 147.0], [25.4, 147.0], [25.5, 147.0], [25.6, 147.0], [25.7, 147.0], [25.8, 147.0], [25.9, 147.0], [26.0, 147.0], [26.1, 148.0], [26.2, 148.0], [26.3, 148.0], [26.4, 148.0], [26.5, 148.0], [26.6, 148.0], [26.7, 148.0], [26.8, 148.0], [26.9, 149.0], [27.0, 149.0], [27.1, 149.0], [27.2, 149.0], [27.3, 149.0], [27.4, 149.0], [27.5, 150.0], [27.6, 150.0], [27.7, 150.0], [27.8, 150.0], [27.9, 150.0], [28.0, 150.0], [28.1, 150.0], [28.2, 151.0], [28.3, 151.0], [28.4, 151.0], [28.5, 151.0], [28.6, 151.0], [28.7, 152.0], [28.8, 152.0], [28.9, 152.0], [29.0, 152.0], [29.1, 152.0], [29.2, 152.0], [29.3, 153.0], [29.4, 153.0], [29.5, 153.0], [29.6, 153.0], [29.7, 153.0], [29.8, 153.0], [29.9, 153.0], [30.0, 153.0], [30.1, 154.0], [30.2, 154.0], [30.3, 154.0], [30.4, 154.0], [30.5, 154.0], [30.6, 154.0], [30.7, 154.0], [30.8, 154.0], [30.9, 154.0], [31.0, 154.0], [31.1, 155.0], [31.2, 155.0], [31.3, 155.0], [31.4, 155.0], [31.5, 155.0], [31.6, 155.0], [31.7, 155.0], [31.8, 155.0], [31.9, 155.0], [32.0, 155.0], [32.1, 155.0], [32.2, 155.0], [32.3, 156.0], [32.4, 156.0], [32.5, 156.0], [32.6, 156.0], [32.7, 156.0], [32.8, 156.0], [32.9, 156.0], [33.0, 156.0], [33.1, 156.0], [33.2, 156.0], [33.3, 156.0], [33.4, 156.0], [33.5, 156.0], [33.6, 157.0], [33.7, 157.0], [33.8, 157.0], [33.9, 157.0], [34.0, 157.0], [34.1, 157.0], [34.2, 157.0], [34.3, 157.0], [34.4, 157.0], [34.5, 157.0], [34.6, 158.0], [34.7, 158.0], [34.8, 158.0], [34.9, 158.0], [35.0, 158.0], [35.1, 158.0], [35.2, 158.0], [35.3, 158.0], [35.4, 158.0], [35.5, 159.0], [35.6, 159.0], [35.7, 159.0], [35.8, 159.0], [35.9, 159.0], [36.0, 159.0], [36.1, 160.0], [36.2, 160.0], [36.3, 160.0], [36.4, 160.0], [36.5, 160.0], [36.6, 160.0], [36.7, 160.0], [36.8, 160.0], [36.9, 160.0], [37.0, 161.0], [37.1, 161.0], [37.2, 161.0], [37.3, 161.0], [37.4, 161.0], [37.5, 161.0], [37.6, 161.0], [37.7, 161.0], [37.8, 161.0], [37.9, 161.0], [38.0, 161.0], [38.1, 162.0], [38.2, 162.0], [38.3, 162.0], [38.4, 162.0], [38.5, 162.0], [38.6, 162.0], [38.7, 162.0], [38.8, 162.0], [38.9, 162.0], [39.0, 162.0], [39.1, 162.0], [39.2, 162.0], [39.3, 162.0], [39.4, 163.0], [39.5, 163.0], [39.6, 163.0], [39.7, 163.0], [39.8, 163.0], [39.9, 163.0], [40.0, 163.0], [40.1, 163.0], [40.2, 163.0], [40.3, 163.0], [40.4, 164.0], [40.5, 164.0], [40.6, 164.0], [40.7, 164.0], [40.8, 164.0], [40.9, 164.0], [41.0, 164.0], [41.1, 164.0], [41.2, 165.0], [41.3, 165.0], [41.4, 165.0], [41.5, 165.0], [41.6, 165.0], [41.7, 165.0], [41.8, 165.0], [41.9, 165.0], [42.0, 165.0], [42.1, 166.0], [42.2, 166.0], [42.3, 166.0], [42.4, 166.0], [42.5, 166.0], [42.6, 166.0], [42.7, 166.0], [42.8, 166.0], [42.9, 166.0], [43.0, 166.0], [43.1, 167.0], [43.2, 167.0], [43.3, 167.0], [43.4, 167.0], [43.5, 167.0], [43.6, 167.0], [43.7, 167.0], [43.8, 167.0], [43.9, 167.0], [44.0, 167.0], [44.1, 168.0], [44.2, 168.0], [44.3, 168.0], [44.4, 168.0], [44.5, 168.0], [44.6, 168.0], [44.7, 168.0], [44.8, 168.0], [44.9, 168.0], [45.0, 168.0], [45.1, 168.0], [45.2, 168.0], [45.3, 169.0], [45.4, 169.0], [45.5, 169.0], [45.6, 169.0], [45.7, 169.0], [45.8, 169.0], [45.9, 169.0], [46.0, 169.0], [46.1, 169.0], [46.2, 169.0], [46.3, 169.0], [46.4, 169.0], [46.5, 170.0], [46.6, 170.0], [46.7, 170.0], [46.8, 170.0], [46.9, 170.0], [47.0, 170.0], [47.1, 170.0], [47.2, 170.0], [47.3, 170.0], [47.4, 170.0], [47.5, 171.0], [47.6, 171.0], [47.7, 171.0], [47.8, 171.0], [47.9, 171.0], [48.0, 171.0], [48.1, 171.0], [48.2, 171.0], [48.3, 171.0], [48.4, 171.0], [48.5, 172.0], [48.6, 172.0], [48.7, 172.0], [48.8, 172.0], [48.9, 172.0], [49.0, 172.0], [49.1, 172.0], [49.2, 172.0], [49.3, 172.0], [49.4, 172.0], [49.5, 172.0], [49.6, 173.0], [49.7, 173.0], [49.8, 173.0], [49.9, 173.0], [50.0, 173.0], [50.1, 173.0], [50.2, 173.0], [50.3, 173.0], [50.4, 173.0], [50.5, 173.0], [50.6, 174.0], [50.7, 174.0], [50.8, 174.0], [50.9, 174.0], [51.0, 174.0], [51.1, 174.0], [51.2, 175.0], [51.3, 175.0], [51.4, 175.0], [51.5, 175.0], [51.6, 175.0], [51.7, 175.0], [51.8, 175.0], [51.9, 175.0], [52.0, 176.0], [52.1, 176.0], [52.2, 176.0], [52.3, 176.0], [52.4, 176.0], [52.5, 176.0], [52.6, 176.0], [52.7, 176.0], [52.8, 176.0], [52.9, 177.0], [53.0, 177.0], [53.1, 177.0], [53.2, 177.0], [53.3, 177.0], [53.4, 177.0], [53.5, 177.0], [53.6, 177.0], [53.7, 178.0], [53.8, 178.0], [53.9, 178.0], [54.0, 178.0], [54.1, 178.0], [54.2, 178.0], [54.3, 178.0], [54.4, 178.0], [54.5, 179.0], [54.6, 179.0], [54.7, 179.0], [54.8, 179.0], [54.9, 179.0], [55.0, 179.0], [55.1, 180.0], [55.2, 180.0], [55.3, 180.0], [55.4, 180.0], [55.5, 180.0], [55.6, 180.0], [55.7, 181.0], [55.8, 181.0], [55.9, 181.0], [56.0, 181.0], [56.1, 181.0], [56.2, 182.0], [56.3, 182.0], [56.4, 182.0], [56.5, 183.0], [56.6, 183.0], [56.7, 183.0], [56.8, 183.0], [56.9, 184.0], [57.0, 184.0], [57.1, 185.0], [57.2, 185.0], [57.3, 186.0], [57.4, 186.0], [57.5, 186.0], [57.6, 187.0], [57.7, 187.0], [57.8, 187.0], [57.9, 187.0], [58.0, 188.0], [58.1, 188.0], [58.2, 188.0], [58.3, 188.0], [58.4, 189.0], [58.5, 189.0], [58.6, 189.0], [58.7, 189.0], [58.8, 189.0], [58.9, 190.0], [59.0, 190.0], [59.1, 190.0], [59.2, 190.0], [59.3, 190.0], [59.4, 191.0], [59.5, 191.0], [59.6, 191.0], [59.7, 192.0], [59.8, 192.0], [59.9, 192.0], [60.0, 192.0], [60.1, 193.0], [60.2, 193.0], [60.3, 193.0], [60.4, 194.0], [60.5, 195.0], [60.6, 195.0], [60.7, 196.0], [60.8, 197.0], [60.9, 198.0], [61.0, 198.0], [61.1, 198.0], [61.2, 199.0], [61.3, 199.0], [61.4, 199.0], [61.5, 200.0], [61.6, 201.0], [61.7, 201.0], [61.8, 202.0], [61.9, 203.0], [62.0, 203.0], [62.1, 204.0], [62.2, 204.0], [62.3, 205.0], [62.4, 205.0], [62.5, 206.0], [62.6, 206.0], [62.7, 207.0], [62.8, 208.0], [62.9, 208.0], [63.0, 209.0], [63.1, 209.0], [63.2, 210.0], [63.3, 210.0], [63.4, 211.0], [63.5, 211.0], [63.6, 212.0], [63.7, 213.0], [63.8, 213.0], [63.9, 214.0], [64.0, 214.0], [64.1, 214.0], [64.2, 215.0], [64.3, 215.0], [64.4, 217.0], [64.5, 220.0], [64.6, 221.0], [64.7, 223.0], [64.8, 228.0], [64.9, 229.0], [65.0, 231.0], [65.1, 232.0], [65.2, 232.0], [65.3, 233.0], [65.4, 234.0], [65.5, 236.0], [65.6, 236.0], [65.7, 237.0], [65.8, 238.0], [65.9, 238.0], [66.0, 239.0], [66.1, 241.0], [66.2, 243.0], [66.3, 244.0], [66.4, 245.0], [66.5, 246.0], [66.6, 246.0], [66.7, 247.0], [66.8, 254.0], [66.9, 255.0], [67.0, 256.0], [67.1, 258.0], [67.2, 259.0], [67.3, 260.0], [67.4, 262.0], [67.5, 267.0], [67.6, 270.0], [67.7, 271.0], [67.8, 275.0], [67.9, 278.0], [68.0, 281.0], [68.1, 284.0], [68.2, 287.0], [68.3, 291.0], [68.4, 294.0], [68.5, 295.0], [68.6, 295.0], [68.7, 297.0], [68.8, 304.0], [68.9, 309.0], [69.0, 311.0], [69.1, 312.0], [69.2, 312.0], [69.3, 313.0], [69.4, 315.0], [69.5, 317.0], [69.6, 323.0], [69.7, 329.0], [69.8, 344.0], [69.9, 347.0], [70.0, 349.0], [70.1, 353.0], [70.2, 365.0], [70.3, 366.0], [70.4, 367.0], [70.5, 378.0], [70.6, 398.0], [70.7, 420.0], [70.8, 433.0], [70.9, 448.0], [71.0, 495.0], [71.1, 551.0], [71.2, 608.0], [71.3, 639.0], [71.4, 687.0], [71.5, 705.0], [71.6, 733.0], [71.7, 747.0], [71.8, 763.0], [71.9, 783.0], [72.0, 819.0], [72.1, 854.0], [72.2, 896.0], [72.3, 946.0], [72.4, 1003.0], [72.5, 1033.0], [72.6, 1037.0], [72.7, 1042.0], [72.8, 1049.0], [72.9, 1055.0], [73.0, 1066.0], [73.1, 1099.0], [73.2, 1154.0], [73.3, 1214.0], [73.4, 1250.0], [73.5, 1291.0], [73.6, 1348.0], [73.7, 1376.0], [73.8, 1396.0], [73.9, 1425.0], [74.0, 1452.0], [74.1, 1477.0], [74.2, 1520.0], [74.3, 1557.0], [74.4, 1585.0], [74.5, 1680.0], [74.6, 1795.0], [74.7, 1850.0], [74.8, 1930.0], [74.9, 1936.0], [75.0, 1972.0], [75.1, 2029.0], [75.2, 2067.0], [75.3, 2151.0], [75.4, 2180.0], [75.5, 2202.0], [75.6, 2214.0], [75.7, 2222.0], [75.8, 2276.0], [75.9, 2325.0], [76.0, 2413.0], [76.1, 2486.0], [76.2, 2574.0], [76.3, 2676.0], [76.4, 2769.0], [76.5, 2864.0], [76.6, 2891.0], [76.7, 2905.0], [76.8, 2949.0], [76.9, 3035.0], [77.0, 3038.0], [77.1, 3120.0], [77.2, 3179.0], [77.3, 3331.0], [77.4, 3352.0], [77.5, 3398.0], [77.6, 3446.0], [77.7, 3517.0], [77.8, 3531.0], [77.9, 3564.0], [78.0, 3627.0], [78.1, 3662.0], [78.2, 3753.0], [78.3, 3804.0], [78.4, 3864.0], [78.5, 3939.0], [78.6, 3953.0], [78.7, 4112.0], [78.8, 4212.0], [78.9, 4478.0], [79.0, 4574.0], [79.1, 4587.0], [79.2, 4604.0], [79.3, 4614.0], [79.4, 4619.0], [79.5, 4666.0], [79.6, 4667.0], [79.7, 4705.0], [79.8, 4884.0], [79.9, 4897.0], [80.0, 4901.0], [80.1, 4901.0], [80.2, 4911.0], [80.3, 4997.0], [80.4, 5072.0], [80.5, 5077.0], [80.6, 5235.0], [80.7, 5426.0], [80.8, 5481.0], [80.9, 5587.0], [81.0, 5630.0], [81.1, 5643.0], [81.2, 5654.0], [81.3, 5659.0], [81.4, 5667.0], [81.5, 5758.0], [81.6, 5781.0], [81.7, 5823.0], [81.8, 5864.0], [81.9, 5869.0], [82.0, 5888.0], [82.1, 5911.0], [82.2, 6046.0], [82.3, 6051.0], [82.4, 6052.0], [82.5, 6067.0], [82.6, 6088.0], [82.7, 6120.0], [82.8, 6128.0], [82.9, 6187.0], [83.0, 6233.0], [83.1, 6240.0], [83.2, 6285.0], [83.3, 6287.0], [83.4, 6293.0], [83.5, 6357.0], [83.6, 6388.0], [83.7, 6423.0], [83.8, 6441.0], [83.9, 6457.0], [84.0, 6480.0], [84.1, 6490.0], [84.2, 6536.0], [84.3, 6580.0], [84.4, 6640.0], [84.5, 6662.0], [84.6, 6710.0], [84.7, 6732.0], [84.8, 6738.0], [84.9, 6743.0], [85.0, 6761.0], [85.1, 6765.0], [85.2, 6905.0], [85.3, 6935.0], [85.4, 6958.0], [85.5, 6996.0], [85.6, 7018.0], [85.7, 7019.0], [85.8, 7023.0], [85.9, 7058.0], [86.0, 7115.0], [86.1, 7116.0], [86.2, 7164.0], [86.3, 7216.0], [86.4, 7230.0], [86.5, 7232.0], [86.6, 7234.0], [86.7, 7296.0], [86.8, 7338.0], [86.9, 7376.0], [87.0, 7451.0], [87.1, 7485.0], [87.2, 7539.0], [87.3, 7542.0], [87.4, 7544.0], [87.5, 7592.0], [87.6, 7653.0], [87.7, 7710.0], [87.8, 7829.0], [87.9, 7851.0], [88.0, 7885.0], [88.1, 7887.0], [88.2, 7944.0], [88.3, 7990.0], [88.4, 8022.0], [88.5, 8023.0], [88.6, 8090.0], [88.7, 8177.0], [88.8, 8194.0], [88.9, 8199.0], [89.0, 8211.0], [89.1, 8216.0], [89.2, 8374.0], [89.3, 8432.0], [89.4, 8522.0], [89.5, 8678.0], [89.6, 8752.0], [89.7, 8824.0], [89.8, 8851.0], [89.9, 8940.0], [90.0, 8946.0], [90.1, 9039.0], [90.2, 9064.0], [90.3, 9073.0], [90.4, 9099.0], [90.5, 9106.0], [90.6, 9163.0], [90.7, 9168.0], [90.8, 9215.0], [90.9, 9231.0], [91.0, 9246.0], [91.1, 9268.0], [91.2, 9295.0], [91.3, 9397.0], [91.4, 9433.0], [91.5, 9599.0], [91.6, 9624.0], [91.7, 9958.0], [91.8, 9990.0], [91.9, 10019.0], [92.0, 10051.0], [92.1, 10209.0], [92.2, 10500.0], [92.3, 10626.0], [92.4, 10629.0], [92.5, 10738.0], [92.6, 10776.0], [92.7, 10905.0], [92.8, 11071.0], [92.9, 11122.0], [93.0, 11297.0], [93.1, 11990.0], [93.2, 12169.0], [93.3, 12511.0], [93.4, 12590.0], [93.5, 13005.0], [93.6, 13192.0], [93.7, 13628.0], [93.8, 14086.0], [93.9, 14961.0], [94.0, 15024.0], [94.1, 16134.0], [94.2, 17321.0], [94.3, 17716.0], [94.4, 17984.0], [94.5, 18966.0], [94.6, 19615.0], [94.7, 20177.0], [94.8, 20299.0], [94.9, 20886.0], [95.0, 21109.0], [95.1, 22229.0], [95.2, 24019.0], [95.3, 24182.0], [95.4, 24859.0], [95.5, 26110.0], [95.6, 27296.0], [95.7, 28345.0], [95.8, 31372.0], [95.9, 34494.0], [96.0, 35626.0], [96.1, 35749.0], [96.2, 38311.0], [96.3, 38938.0], [96.4, 42486.0], [96.5, 43335.0], [96.6, 44889.0], [96.7, 47314.0], [96.8, 48944.0], [96.9, 56185.0], [97.0, 59156.0], [97.1, 60870.0], [97.2, 63581.0], [97.3, 63791.0], [97.4, 64078.0], [97.5, 65301.0], [97.6, 67599.0], [97.7, 70152.0], [97.8, 70201.0], [97.9, 70502.0], [98.0, 71912.0], [98.1, 71985.0], [98.2, 73079.0], [98.3, 74803.0], [98.4, 87364.0], [98.5, 87461.0], [98.6, 87499.0], [98.7, 100035.0], [98.8, 100068.0], [98.9, 100092.0], [99.0, 100133.0], [99.1, 100230.0], [99.2, 100289.0], [99.3, 100311.0], [99.4, 100478.0], [99.5, 127785.0], [99.6, 132754.0], [99.7, 138254.0], [99.8, 171327.0], [99.9, 171337.0], [100.0, 171347.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 43095.0, "series": [{"data": [[0.0, 6269.0], [164000.0, 2.0], [132900.0, 1.0], [148900.0, 1.0], [152100.0, 1.0], [171300.0, 162.0], [68300.0, 1.0], [66700.0, 25.0], [73100.0, 1.0], [69900.0, 2.0], [71500.0, 2.0], [74700.0, 16.0], [81100.0, 1.0], [87500.0, 10.0], [92300.0, 1.0], [98700.0, 2.0], [100300.0, 111.0], [127500.0, 6.0], [149800.0, 5.0], [156200.0, 1.0], [100.0, 43095.0], [34500.0, 29.0], [32900.0, 1.0], [36100.0, 17.0], [37700.0, 1.0], [38500.0, 19.0], [40100.0, 3.0], [40900.0, 4.0], [43300.0, 84.0], [47300.0, 22.0], [48100.0, 5.0], [48900.0, 24.0], [200.0, 5857.0], [51300.0, 2.0], [53700.0, 3.0], [54500.0, 1.0], [56900.0, 5.0], [56100.0, 2.0], [60100.0, 2.0], [61700.0, 2.0], [63300.0, 13.0], [64100.0, 7.0], [69000.0, 1.0], [65800.0, 1.0], [67400.0, 1.0], [70600.0, 1.0], [300.0, 1518.0], [73800.0, 30.0], [81800.0, 1.0], [83400.0, 2.0], [85000.0, 1.0], [88200.0, 1.0], [86600.0, 1.0], [400.0, 325.0], [500.0, 131.0], [600.0, 216.0], [148400.0, 1.0], [167600.0, 5.0], [700.0, 431.0], [800.0, 172.0], [900.0, 136.0], [1000.0, 587.0], [1100.0, 141.0], [1200.0, 199.0], [1300.0, 231.0], [1400.0, 253.0], [1500.0, 231.0], [1600.0, 76.0], [1700.0, 78.0], [1800.0, 98.0], [1900.0, 256.0], [2000.0, 139.0], [2100.0, 212.0], [2300.0, 121.0], [2200.0, 284.0], [2400.0, 114.0], [152500.0, 2.0], [2500.0, 82.0], [2600.0, 78.0], [2800.0, 212.0], [2700.0, 82.0], [2900.0, 135.0], [3000.0, 170.0], [3100.0, 113.0], [3200.0, 36.0], [3300.0, 199.0], [3400.0, 108.0], [3500.0, 253.0], [3700.0, 120.0], [3600.0, 143.0], [3800.0, 137.0], [3900.0, 157.0], [4000.0, 37.0], [4300.0, 36.0], [4200.0, 53.0], [4100.0, 63.0], [4500.0, 171.0], [4600.0, 452.0], [4400.0, 29.0], [71300.0, 2.0], [69700.0, 7.0], [4800.0, 165.0], [4700.0, 29.0], [74500.0, 1.0], [5000.0, 160.0], [4900.0, 305.0], [5100.0, 21.0], [5200.0, 77.0], [5300.0, 36.0], [85700.0, 1.0], [5600.0, 464.0], [5400.0, 111.0], [5500.0, 65.0], [87300.0, 18.0], [5700.0, 159.0], [5800.0, 274.0], [93700.0, 1.0], [6100.0, 246.0], [6000.0, 355.0], [96900.0, 1.0], [5900.0, 116.0], [6300.0, 164.0], [6200.0, 402.0], [100100.0, 115.0], [6500.0, 132.0], [6400.0, 438.0], [6600.0, 190.0], [6900.0, 250.0], [6700.0, 452.0], [6800.0, 54.0], [7100.0, 249.0], [7000.0, 376.0], [7200.0, 353.0], [7400.0, 120.0], [7300.0, 202.0], [7500.0, 308.0], [7600.0, 146.0], [7900.0, 128.0], [7800.0, 302.0], [7700.0, 65.0], [8100.0, 226.0], [8000.0, 266.0], [127300.0, 4.0], [8200.0, 169.0], [8600.0, 116.0], [8400.0, 119.0], [9200.0, 392.0], [9000.0, 298.0], [8800.0, 179.0], [9600.0, 125.0], [9400.0, 103.0], [9800.0, 3.0], [10000.0, 197.0], [156600.0, 19.0], [10200.0, 29.0], [10400.0, 43.0], [10600.0, 177.0], [11000.0, 76.0], [10800.0, 14.0], [11200.0, 23.0], [11400.0, 1.0], [11600.0, 6.0], [12000.0, 18.0], [12200.0, 15.0], [11800.0, 8.0], [12400.0, 6.0], [12600.0, 10.0], [13000.0, 32.0], [12800.0, 1.0], [13200.0, 2.0], [13400.0, 25.0], [13600.0, 19.0], [13800.0, 24.0], [14000.0, 59.0], [14200.0, 7.0], [14800.0, 11.0], [14600.0, 9.0], [15000.0, 69.0], [15200.0, 6.0], [15600.0, 7.0], [15800.0, 5.0], [16200.0, 3.0], [16400.0, 5.0], [17200.0, 15.0], [18000.0, 6.0], [17600.0, 8.0], [18800.0, 7.0], [19200.0, 7.0], [19600.0, 56.0], [20000.0, 3.0], [21200.0, 2.0], [20800.0, 30.0], [21600.0, 7.0], [22000.0, 2.0], [22400.0, 4.0], [23200.0, 9.0], [22800.0, 10.0], [24000.0, 41.0], [23600.0, 4.0], [24400.0, 2.0], [24800.0, 8.0], [25600.0, 65.0], [27200.0, 57.0], [27600.0, 2.0], [28000.0, 4.0], [29600.0, 12.0], [30400.0, 5.0], [31200.0, 1.0], [31600.0, 2.0], [32400.0, 2.0], [34400.0, 12.0], [138300.0, 1.0], [33600.0, 1.0], [38400.0, 7.0], [42400.0, 20.0], [43200.0, 4.0], [44000.0, 2.0], [44800.0, 21.0], [45600.0, 1.0], [47200.0, 4.0], [52000.0, 1.0], [53600.0, 1.0], [56000.0, 2.0], [56800.0, 1.0], [57600.0, 5.0], [60000.0, 9.0], [60800.0, 17.0], [63200.0, 1.0], [62400.0, 4.0], [61600.0, 2.0], [64800.0, 1.0], [64000.0, 65.0], [65600.0, 1.0], [68800.0, 9.0], [67200.0, 3.0], [73600.0, 2.0], [72000.0, 19.0], [78400.0, 2.0], [88000.0, 1.0], [89600.0, 1.0], [94400.0, 2.0], [96000.0, 3.0], [131200.0, 19.0], [154500.0, 5.0], [68700.0, 1.0], [71900.0, 146.0], [70300.0, 8.0], [73500.0, 1.0], [76700.0, 25.0], [92700.0, 2.0], [94300.0, 1.0], [129500.0, 16.0], [133000.0, 32.0], [155400.0, 1.0], [34700.0, 2.0], [33900.0, 3.0], [35500.0, 28.0], [36300.0, 2.0], [38700.0, 2.0], [153100.0, 1.0], [156300.0, 1.0], [41100.0, 8.0], [46700.0, 16.0], [48300.0, 1.0], [49900.0, 2.0], [52300.0, 8.0], [51500.0, 1.0], [54700.0, 2.0], [55500.0, 3.0], [57100.0, 2.0], [57900.0, 3.0], [61100.0, 5.0], [62700.0, 4.0], [64300.0, 5.0], [63500.0, 16.0], [67800.0, 13.0], [66200.0, 6.0], [71000.0, 10.0], [72600.0, 1.0], [87000.0, 3.0], [95000.0, 1.0], [99800.0, 1.0], [131600.0, 1.0], [66900.0, 9.0], [73300.0, 4.0], [70100.0, 84.0], [76500.0, 2.0], [79700.0, 1.0], [84500.0, 2.0], [92500.0, 1.0], [127700.0, 1.0], [133400.0, 1.0], [17300.0, 15.0], [16900.0, 2.0], [16500.0, 17.0], [17700.0, 77.0], [19300.0, 36.0], [18500.0, 6.0], [18900.0, 55.0], [20100.0, 54.0], [21300.0, 8.0], [20500.0, 3.0], [20900.0, 24.0], [21700.0, 6.0], [22100.0, 2.0], [22900.0, 3.0], [23700.0, 4.0], [24100.0, 88.0], [24500.0, 15.0], [25300.0, 2.0], [24900.0, 2.0], [26100.0, 12.0], [25700.0, 1.0], [26500.0, 14.0], [27300.0, 14.0], [26900.0, 13.0], [27700.0, 4.0], [28100.0, 3.0], [30100.0, 2.0], [31300.0, 18.0], [31700.0, 3.0], [32100.0, 2.0], [33800.0, 2.0], [131100.0, 3.0], [33000.0, 1.0], [38600.0, 11.0], [40200.0, 11.0], [156700.0, 3.0], [39400.0, 13.0], [41800.0, 6.0], [41000.0, 2.0], [43400.0, 3.0], [46600.0, 3.0], [48200.0, 3.0], [47400.0, 40.0], [52200.0, 2.0], [55400.0, 20.0], [63400.0, 10.0], [62600.0, 2.0], [64200.0, 33.0], [67600.0, 4.0], [74000.0, 2.0], [77200.0, 1.0], [78800.0, 2.0], [86800.0, 1.0], [98000.0, 1.0], [99600.0, 1.0], [156000.0, 18.0], [67500.0, 8.0], [70700.0, 1.0], [72300.0, 1.0], [73900.0, 17.0], [78700.0, 1.0], [89900.0, 1.0], [91500.0, 1.0], [101100.0, 24.0], [99500.0, 1.0], [115500.0, 24.0], [33300.0, 2.0], [133100.0, 2.0], [35700.0, 20.0], [37300.0, 2.0], [152300.0, 3.0], [38900.0, 4.0], [39700.0, 2.0], [40500.0, 1.0], [42100.0, 3.0], [42900.0, 4.0], [43700.0, 4.0], [44500.0, 4.0], [45300.0, 4.0], [46100.0, 5.0], [46900.0, 8.0], [54100.0, 1.0], [55700.0, 4.0], [56500.0, 8.0], [57300.0, 3.0], [61300.0, 1.0], [60500.0, 1.0], [62900.0, 2.0], [63700.0, 17.0], [65300.0, 28.0], [68200.0, 1.0], [69800.0, 14.0], [73000.0, 5.0], [77800.0, 1.0], [87400.0, 152.0], [89000.0, 1.0], [95400.0, 2.0], [97000.0, 1.0], [100200.0, 123.0], [169200.0, 2.0], [65700.0, 2.0], [73700.0, 1.0], [70500.0, 2.0], [86500.0, 1.0], [97700.0, 1.0], [8500.0, 54.0], [8300.0, 76.0], [8700.0, 40.0], [9100.0, 249.0], [8900.0, 151.0], [9300.0, 77.0], [9500.0, 59.0], [9700.0, 16.0], [9900.0, 101.0], [10100.0, 37.0], [10500.0, 48.0], [10300.0, 3.0], [10700.0, 163.0], [10900.0, 45.0], [11100.0, 103.0], [11300.0, 9.0], [11500.0, 10.0], [11700.0, 2.0], [11900.0, 58.0], [12100.0, 90.0], [12500.0, 127.0], [12300.0, 13.0], [12700.0, 1.0], [13300.0, 5.0], [12900.0, 25.0], [13100.0, 74.0], [13500.0, 9.0], [13700.0, 8.0], [13900.0, 10.0], [14100.0, 6.0], [14300.0, 4.0], [14500.0, 6.0], [14900.0, 47.0], [15100.0, 23.0], [15700.0, 3.0], [15500.0, 2.0], [15900.0, 2.0], [16100.0, 21.0], [16300.0, 2.0], [17000.0, 7.0], [17400.0, 1.0], [16600.0, 5.0], [17800.0, 16.0], [18200.0, 1.0], [18600.0, 4.0], [19000.0, 5.0], [20200.0, 46.0], [19800.0, 5.0], [20600.0, 19.0], [21000.0, 4.0], [21400.0, 2.0], [22200.0, 2.0], [21800.0, 12.0], [22600.0, 5.0], [23400.0, 4.0], [23000.0, 1.0], [23800.0, 2.0], [24600.0, 28.0], [25400.0, 3.0], [25000.0, 1.0], [26200.0, 6.0], [26600.0, 8.0], [27400.0, 1.0], [28600.0, 4.0], [31000.0, 1.0], [31400.0, 4.0], [32600.0, 5.0], [32200.0, 1.0], [133500.0, 7.0], [35600.0, 87.0], [36400.0, 18.0], [38800.0, 2.0], [39600.0, 1.0], [40400.0, 5.0], [155900.0, 1.0], [42800.0, 9.0], [42000.0, 1.0], [43600.0, 1.0], [44400.0, 2.0], [46800.0, 15.0], [50800.0, 2.0], [53200.0, 1.0], [54000.0, 1.0], [56400.0, 2.0], [57200.0, 1.0], [58000.0, 1.0], [59600.0, 2.0], [60400.0, 2.0], [62800.0, 1.0], [65200.0, 11.0], [64400.0, 2.0], [63600.0, 63.0], [66400.0, 1.0], [69600.0, 1.0], [72800.0, 4.0], [74400.0, 1.0], [77600.0, 7.0], [79200.0, 1.0], [82400.0, 2.0], [88800.0, 2.0], [95200.0, 2.0], [100000.0, 211.0], [98400.0, 1.0], [132800.0, 30.0], [143300.0, 1.0], [69500.0, 1.0], [66300.0, 1.0], [71100.0, 1.0], [75900.0, 2.0], [77500.0, 1.0], [79100.0, 1.0], [80700.0, 2.0], [95100.0, 1.0], [115900.0, 4.0], [147400.0, 1.0], [33500.0, 1.0], [38300.0, 49.0], [39900.0, 5.0], [40700.0, 2.0], [44700.0, 1.0], [43100.0, 1.0], [46300.0, 2.0], [47100.0, 3.0], [49500.0, 2.0], [50300.0, 2.0], [55100.0, 3.0], [56700.0, 1.0], [58300.0, 28.0], [59100.0, 11.0], [60700.0, 11.0], [59900.0, 1.0], [64700.0, 6.0], [63900.0, 7.0], [71800.0, 40.0], [70200.0, 75.0], [79800.0, 1.0], [95800.0, 1.0], [129400.0, 18.0], [143700.0, 2.0], [66100.0, 3.0], [69300.0, 2.0], [67700.0, 14.0], [70900.0, 11.0], [78900.0, 1.0], [82100.0, 1.0], [90100.0, 1.0], [96500.0, 4.0], [114100.0, 1.0], [138200.0, 1.0], [144600.0, 1.0], [154200.0, 1.0], [17100.0, 3.0], [16700.0, 2.0], [17500.0, 3.0], [17900.0, 54.0], [18700.0, 6.0], [20300.0, 9.0], [19500.0, 19.0], [21100.0, 75.0], [21500.0, 4.0], [20700.0, 31.0], [22300.0, 2.0], [23100.0, 3.0], [23500.0, 5.0], [25100.0, 4.0], [24700.0, 3.0], [26300.0, 2.0], [27500.0, 13.0], [28300.0, 51.0], [29100.0, 4.0], [31100.0, 2.0], [31500.0, 27.0], [33400.0, 3.0], [132700.0, 29.0], [36600.0, 14.0], [37400.0, 6.0], [38200.0, 2.0], [39000.0, 2.0], [40600.0, 4.0], [39800.0, 2.0], [41400.0, 2.0], [43800.0, 14.0], [44600.0, 1.0], [45400.0, 1.0], [46200.0, 1.0], [51800.0, 2.0], [55000.0, 2.0], [57400.0, 16.0], [58200.0, 2.0], [59800.0, 40.0], [61400.0, 2.0], [63000.0, 1.0], [62200.0, 2.0], [63800.0, 11.0], [65400.0, 1.0], [66800.0, 2.0], [70000.0, 1.0], [73200.0, 1.0], [74800.0, 3.0], [82800.0, 1.0], [86000.0, 2.0], [87600.0, 2.0], [92400.0, 2.0], [100400.0, 33.0], [127600.0, 9.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 171300.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 135.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 57064.0, "series": [{"data": [[0.0, 57064.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 2497.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 20655.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 135.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 2341.989028910306, "minX": 1.68287358E12, "maxY": 3000.0, "series": [{"data": [[1.6828737E12, 3000.0], [1.68287388E12, 2341.989028910306], [1.68287358E12, 3000.0], [1.68287376E12, 3000.0], [1.68287364E12, 3000.0], [1.68287382E12, 3000.0]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68287388E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 39.0, "minX": 1.0, "maxY": 92390.0, "series": [{"data": [[3.0, 24197.5], [5.0, 24198.0], [6.0, 24195.0], [7.0, 24196.0], [8.0, 24195.5], [11.0, 24194.666666666668], [12.0, 24194.0], [14.0, 24193.0], [15.0, 24193.0], [16.0, 24192.0], [17.0, 24193.0], [18.0, 24189.0], [19.0, 24186.0], [20.0, 24186.0], [21.0, 24187.0], [22.0, 24185.0], [23.0, 24185.0], [24.0, 24184.0], [26.0, 24183.0], [27.0, 24181.0], [30.0, 22905.333333333332], [33.0, 24181.333333333332], [35.0, 24180.0], [34.0, 24180.0], [36.0, 20351.0], [41.0, 24176.0], [40.0, 24177.0], [42.0, 24175.0], [45.0, 24174.25], [47.0, 24173.5], [49.0, 24174.0], [51.0, 24172.0], [50.0, 24173.0], [53.0, 24171.0], [52.0, 24172.0], [55.0, 24172.0], [57.0, 24161.0], [56.0, 24168.0], [59.0, 24161.0], [58.0, 20332.0], [60.0, 24160.0], [63.0, 24158.5], [62.0, 24160.0], [67.0, 24154.0], [66.0, 24155.0], [65.0, 24155.0], [64.0, 24157.0], [70.0, 24150.0], [69.0, 24150.0], [68.0, 20325.0], [75.0, 24140.0], [74.0, 24145.0], [73.0, 24149.0], [72.0, 24149.0], [78.0, 24134.0], [77.0, 22221.0], [83.0, 24133.5], [81.0, 20305.0], [80.0, 22220.0], [87.0, 20299.0], [86.0, 24128.0], [85.0, 24132.0], [84.0, 24132.0], [91.0, 22213.0], [89.0, 24128.0], [95.0, 24122.0], [94.0, 24125.0], [93.0, 20297.0], [92.0, 20298.0], [99.0, 20288.0], [98.0, 20292.0], [97.0, 22206.5], [102.0, 20284.0], [101.0, 20285.0], [100.0, 20287.0], [107.0, 22186.0], [105.0, 20272.0], [104.0, 20283.5], [111.0, 20271.0], [109.0, 24099.5], [115.0, 24089.0], [114.0, 20262.0], [113.0, 20263.0], [112.0, 24099.0], [119.0, 20257.0], [118.0, 20257.0], [117.0, 20257.0], [116.0, 20261.0], [123.0, 25693.0], [122.0, 20247.0], [120.0, 20250.0], [127.0, 19281.0], [126.0, 19281.0], [125.0, 19282.0], [124.0, 25692.0], [135.0, 22644.0], [134.0, 23650.0], [133.0, 23653.0], [132.0, 24698.0], [131.0, 24702.0], [130.0, 19254.0], [129.0, 19254.0], [128.0, 19279.0], [143.0, 22116.0], [142.0, 20890.0], [141.0, 21603.0], [140.0, 21605.0], [139.0, 22396.0], [138.0, 21864.0], [137.0, 21864.0], [136.0, 22639.0], [150.0, 20886.0], [149.0, 21794.0], [148.0, 20995.0], [146.0, 21342.0], [145.0, 20889.0], [159.0, 21100.0], [157.0, 20885.0], [156.0, 21101.0], [155.0, 21500.0], [153.0, 20886.666666666668], [166.0, 20921.0], [165.0, 20921.5], [164.0, 20923.0], [162.0, 20922.0], [161.0, 21085.0], [160.0, 21099.0], [175.0, 20918.0], [174.0, 20919.5], [172.0, 20920.0], [171.0, 20921.0], [169.0, 20921.0], [168.0, 20920.5], [182.0, 20914.0], [181.0, 20915.0], [180.0, 20916.0], [179.0, 20916.0], [178.0, 20918.0], [176.0, 20919.0], [191.0, 20841.0], [190.0, 20852.0], [189.0, 20852.0], [188.0, 20856.0], [187.0, 20887.0], [186.0, 20899.0], [185.0, 20909.0], [184.0, 20909.0], [199.0, 20827.0], [198.0, 20827.5], [196.0, 20828.0], [195.0, 20828.0], [194.0, 20829.0], [193.0, 20832.0], [192.0, 20836.0], [206.0, 20203.0], [205.0, 20204.0], [204.0, 20895.0], [203.0, 20205.0], [201.0, 20598.0], [200.0, 20599.0], [214.0, 20772.0], [213.0, 20203.0], [211.0, 20772.0], [210.0, 20202.666666666668], [208.0, 20203.0], [222.0, 20199.666666666668], [219.0, 20200.0], [218.0, 20201.0], [217.0, 20485.5], [216.0, 20200.0], [231.0, 20198.0], [229.0, 20197.0], [228.0, 20198.0], [227.0, 20198.0], [226.0, 20770.0], [224.0, 20484.5], [239.0, 20194.0], [238.0, 20196.0], [237.0, 20196.0], [236.0, 20197.0], [235.0, 20481.5], [234.0, 20196.0], [233.0, 20196.0], [245.0, 20761.0], [244.0, 20191.0], [243.0, 20192.0], [242.0, 20384.0], [254.0, 20187.5], [252.0, 20188.0], [251.0, 20189.0], [250.0, 20188.5], [248.0, 20570.333333333332], [258.0, 20178.0], [269.0, 20176.666666666668], [271.0, 20746.0], [268.0, 20177.0], [267.0, 20177.0], [264.0, 20408.0], [261.0, 20749.0], [260.0, 20463.5], [257.0, 20464.5], [256.0, 20180.0], [275.0, 20174.0], [287.0, 20599.333333333332], [284.0, 20165.0], [280.0, 20742.0], [279.0, 20173.0], [278.0, 20804.0], [277.0, 20174.0], [274.0, 20460.0], [272.0, 20175.0], [301.0, 20702.0], [303.0, 20414.0], [300.0, 20133.0], [290.0, 20136.0], [288.0, 20709.0], [299.0, 20703.0], [298.0, 20704.0], [296.0, 20134.0], [295.0, 20705.0], [294.0, 20705.0], [293.0, 20136.0], [292.0, 20826.0], [318.0, 20654.0], [319.0, 20655.0], [317.0, 20715.5], [307.0, 20659.0], [306.0, 20659.0], [305.0, 20376.5], [315.0, 20777.0], [314.0, 20777.0], [313.0, 20778.0], [312.0, 20717.5], [310.0, 20718.0], [308.0, 20659.0], [323.0, 19890.5], [333.0, 19659.0], [334.0, 18967.0], [332.0, 19198.333333333332], [321.0, 19891.0], [320.0, 19892.0], [329.0, 18968.0], [328.0, 18969.0], [327.0, 19660.0], [326.0, 19660.0], [325.0, 19662.0], [324.0, 19887.0], [350.0, 18964.0], [351.0, 19653.0], [349.0, 19308.5], [339.0, 18966.0], [338.0, 18966.5], [336.0, 18967.0], [347.0, 19655.0], [346.0, 18964.0], [344.0, 18964.0], [343.0, 18965.0], [342.0, 18965.0], [341.0, 19311.5], [365.0, 19189.666666666668], [362.0, 19651.0], [361.0, 19421.0], [360.0, 19652.0], [358.0, 18962.0], [356.0, 18961.0], [355.0, 18962.0], [352.0, 18962.0], [382.0, 18954.0], [381.0, 18955.0], [379.0, 18956.0], [378.0, 18956.0], [377.0, 18957.0], [376.0, 19302.0], [374.0, 19648.0], [373.0, 19303.0], [370.0, 18958.0], [369.0, 19303.5], [386.0, 18952.0], [398.0, 19294.0], [399.0, 19638.0], [396.0, 19178.333333333332], [393.0, 18950.0], [392.0, 18949.5], [390.0, 19641.0], [389.0, 19641.0], [388.0, 19296.5], [385.0, 18952.0], [384.0, 18953.0], [402.0, 19632.0], [414.0, 19270.5], [415.0, 18924.0], [412.0, 19617.0], [411.0, 19618.0], [409.0, 19391.0], [406.0, 19629.0], [405.0, 19630.0], [404.0, 19285.5], [401.0, 18944.0], [400.0, 19639.0], [419.0, 18916.0], [431.0, 19548.0], [429.0, 19564.0], [427.0, 19218.5], [425.0, 18874.0], [424.0, 19578.5], [422.0, 19588.0], [421.0, 19589.0], [420.0, 18899.0], [418.0, 18921.0], [417.0, 19615.5], [446.0, 18430.5], [447.0, 18085.0], [445.0, 18777.0], [434.0, 19541.0], [432.0, 19543.0], [443.0, 18086.0], [442.0, 18614.0], [441.0, 18617.0], [440.0, 18842.0], [439.0, 19533.0], [437.0, 19533.0], [436.0, 19194.5], [463.0, 15079.75], [459.0, 17987.0], [458.0, 15517.0], [456.0, 17599.0], [455.0, 17601.0], [454.0, 18521.0], [453.0, 18521.0], [452.0, 18521.0], [450.0, 18427.5], [448.0, 18774.0], [467.0, 17984.0], [478.0, 13042.0], [479.0, 11869.0], [477.0, 17981.0], [475.0, 16336.0], [472.0, 12459.5], [471.0, 17984.0], [469.0, 17984.0], [468.0, 13046.0], [466.0, 13047.0], [465.0, 15516.5], [493.0, 17971.0], [494.0, 17971.0], [492.0, 17972.0], [483.0, 17975.5], [481.0, 15349.5], [491.0, 17972.0], [490.0, 11863.0], [489.0, 17972.0], [488.0, 17973.0], [487.0, 14631.0], [485.0, 13037.0], [484.0, 17975.0], [510.0, 13023.0], [511.0, 17960.0], [509.0, 15493.0], [498.0, 17970.0], [497.0, 17970.0], [496.0, 13032.5], [507.0, 13026.0], [506.0, 17965.0], [505.0, 11855.0], [504.0, 11280.0], [503.0, 17966.0], [502.0, 17967.0], [501.0, 17969.0], [500.0, 14913.0], [541.0, 17916.0], [543.0, 14573.0], [540.0, 14236.333333333334], [537.0, 12981.0], [536.0, 12108.5], [519.0, 17948.0], [518.0, 17953.0], [517.0, 17953.0], [516.0, 13016.0], [515.0, 14900.5], [513.0, 17799.0], [527.0, 17940.0], [526.0, 17942.0], [525.0, 17944.0], [522.0, 17945.0], [521.0, 17788.0], [534.0, 17928.5], [533.0, 17929.0], [531.0, 15467.0], [529.0, 15308.5], [568.0, 17896.0], [573.0, 11207.0], [575.0, 17892.0], [561.0, 11212.0], [560.0, 12960.0], [572.0, 17893.0], [571.0, 12082.0], [569.0, 12957.0], [559.0, 17898.0], [545.0, 12972.5], [547.0, 12971.0], [546.0, 17910.0], [549.0, 12964.0], [548.0, 17903.0], [551.0, 11791.0], [550.0, 11216.0], [558.0, 17899.0], [557.0, 12962.0], [556.0, 15431.0], [554.0, 15431.5], [552.0, 11215.0], [567.0, 12372.0], [565.0, 12959.0], [564.0, 12959.0], [563.0, 11211.5], [583.0, 10727.0], [595.0, 10904.0], [605.0, 13577.0], [603.0, 10228.333333333334], [600.0, 10898.0], [582.0, 11900.0], [580.0, 16605.0], [579.0, 16607.0], [578.0, 17860.0], [577.0, 15422.5], [576.0, 17892.0], [598.0, 10898.0], [597.0, 10902.0], [596.0, 10904.0], [594.0, 10905.0], [591.0, 10905.0], [589.0, 15191.0], [588.0, 15192.0], [587.0, 15596.0], [586.0, 15598.0], [585.0, 11896.0], [584.0, 10151.0], [634.0, 10218.0], [627.0, 12300.0], [637.0, 11256.5], [638.0, 14832.0], [625.0, 9749.0], [635.0, 10217.0], [633.0, 9344.0], [615.0, 12306.0], [614.0, 12305.0], [613.0, 10226.0], [611.0, 10226.0], [609.0, 12308.0], [608.0, 10338.0], [622.0, 8472.5], [620.0, 12302.0], [619.0, 12302.0], [618.0, 10222.0], [617.0, 8474.0], [616.0, 10223.0], [631.0, 8471.0], [629.0, 10219.0], [628.0, 8471.5], [664.0, 12261.0], [669.0, 8429.0], [671.0, 8430.0], [668.0, 12259.0], [667.0, 12259.0], [666.0, 10346.0], [655.0, 9324.0], [641.0, 10214.0], [640.0, 11255.0], [645.0, 9339.5], [643.0, 10380.0], [647.0, 10213.0], [646.0, 8465.0], [653.0, 12281.0], [652.0, 8451.0], [651.0, 8452.0], [650.0, 11250.5], [648.0, 10211.0], [662.0, 8436.0], [661.0, 10357.5], [659.0, 9614.333333333334], [657.0, 10197.0], [701.0, 8403.0], [702.0, 8379.0], [700.0, 8408.0], [697.0, 10156.0], [696.0, 8409.0], [679.0, 9300.0], [677.0, 8427.0], [676.0, 9301.0], [674.0, 10175.0], [673.0, 10176.0], [672.0, 9303.0], [687.0, 10160.0], [686.0, 8412.0], [684.0, 8423.0], [683.0, 12253.0], [682.0, 8424.0], [681.0, 10173.0], [680.0, 10174.0], [694.0, 8410.0], [692.0, 8409.5], [690.0, 10324.5], [688.0, 8411.0], [729.0, 7050.0], [722.0, 12149.0], [734.0, 6473.0], [733.0, 7049.0], [731.0, 7056.666666666667], [719.0, 7052.0], [706.0, 7375.0], [704.0, 7375.5], [708.0, 7374.0], [707.0, 7375.0], [711.0, 7373.5], [710.0, 7374.0], [718.0, 7173.0], [716.0, 7358.0], [715.0, 7362.0], [713.0, 7369.0], [712.0, 7369.0], [727.0, 7050.0], [725.0, 7050.0], [724.0, 6763.5], [721.0, 12150.0], [720.0, 6476.0], [761.0, 13145.0], [765.0, 13132.0], [767.0, 12625.5], [752.0, 6753.5], [756.0, 6654.666666666667], [753.0, 7038.0], [764.0, 12122.0], [763.0, 13136.0], [762.0, 7033.0], [760.0, 7036.0], [743.0, 7046.0], [742.0, 7047.0], [741.0, 7047.0], [739.0, 7048.0], [737.0, 9815.5], [736.0, 6472.0], [751.0, 7041.0], [749.0, 8213.0], [748.0, 6466.0], [747.0, 6468.0], [746.0, 6468.0], [745.0, 7045.0], [744.0, 7046.0], [758.0, 6460.0], [757.0, 13147.0], [787.0, 9774.5], [798.0, 8517.25], [799.0, 6988.0], [785.0, 7007.0], [797.0, 6990.0], [793.0, 6416.0], [792.0, 6996.0], [774.0, 6437.0], [773.0, 6726.0], [771.0, 13124.0], [770.0, 8641.5], [768.0, 6442.0], [782.0, 8638.0], [780.0, 10067.0], [777.0, 13122.0], [776.0, 7012.0], [790.0, 13107.0], [789.0, 13109.0], [788.0, 12164.333333333334], [829.0, 11544.0], [831.0, 11542.5], [828.0, 12049.0], [826.0, 11544.0], [824.0, 13051.0], [806.0, 8830.0], [804.0, 6411.0], [802.0, 6700.0], [800.0, 6988.0], [815.0, 11661.0], [813.0, 8825.0], [810.0, 10036.0], [809.0, 10036.0], [822.0, 13053.0], [821.0, 11051.333333333334], [819.0, 12078.0], [817.0, 6979.5], [860.0, 11119.0], [862.0, 11119.0], [858.0, 11121.0], [837.0, 11126.0], [835.0, 12043.0], [833.0, 12047.0], [832.0, 11036.0], [853.0, 11122.0], [852.0, 11123.0], [851.0, 11124.166666666668], [846.0, 11124.0], [844.0, 11125.0], [842.0, 11124.666666666666], [841.0, 11126.0], [840.0, 11126.0], [891.0, 11091.0], [883.0, 11093.0], [895.0, 11090.0], [880.0, 11096.0], [889.0, 11091.0], [888.0, 11091.0], [879.0, 11097.0], [866.0, 11117.0], [864.0, 11119.0], [868.0, 11115.0], [867.0, 11117.0], [871.0, 11113.0], [870.0, 11113.0], [878.0, 11098.0], [877.0, 11099.0], [876.0, 11101.0], [875.0, 11106.0], [874.0, 11109.5], [872.0, 11110.0], [887.0, 11092.0], [885.0, 11093.0], [884.0, 11093.0], [882.0, 11094.0], [881.0, 11094.0], [920.0, 4925.0], [925.0, 3729.0], [926.0, 2911.0], [914.0, 11043.0], [913.0, 11044.5], [923.0, 10027.0], [922.0, 3919.0], [921.0, 10029.0], [911.0, 11049.0], [896.0, 11091.0], [898.0, 11082.0], [897.0, 11082.0], [901.0, 11076.0], [899.0, 11075.0], [903.0, 11059.0], [902.0, 11064.0], [910.0, 11049.0], [909.0, 11053.0], [907.0, 11055.0], [906.0, 8000.0], [904.0, 11059.0], [919.0, 4926.0], [918.0, 4928.0], [916.0, 4931.0], [915.0, 4932.0], [952.0, 2413.0], [947.0, 2517.0], [959.0, 2246.0], [956.0, 2350.5], [954.0, 2412.0], [943.0, 2518.5], [928.0, 2911.0], [930.0, 2718.0], [929.0, 2720.0], [933.0, 2603.0], [931.0, 2709.0], [935.0, 2602.0], [934.0, 2602.0], [941.0, 2589.0], [940.0, 2594.0], [939.0, 2596.0], [938.0, 2599.0], [937.0, 2601.0], [936.0, 2602.0], [950.0, 2479.0], [949.0, 2513.0], [948.0, 2516.0], [946.0, 2517.0], [945.0, 2517.0], [985.0, 2006.5], [978.0, 3182.0], [987.0, 2004.0], [989.0, 2002.0], [977.0, 2791.6666666666665], [976.0, 3182.0], [986.0, 3178.0], [984.0, 2006.0], [967.0, 2122.0], [966.0, 2122.0], [965.0, 2123.0], [964.0, 2240.0], [963.0, 2241.0], [962.0, 2244.5], [960.0, 2246.0], [973.0, 2597.5], [972.0, 2011.0], [970.0, 2401.6666666666665], [982.0, 2006.0], [981.0, 2593.5], [979.0, 2009.0], [1019.0, 2364.0], [1011.0, 3156.0], [1021.0, 3143.5], [1008.0, 3160.0], [1016.0, 2560.5], [999.0, 3169.5], [997.0, 3169.0], [996.0, 3170.0], [995.0, 2000.0], [994.0, 3173.0], [993.0, 2295.0], [1007.0, 1990.0], [1006.0, 1991.5], [1004.0, 1995.0], [1003.0, 1995.0], [1002.0, 3167.0], [1001.0, 3168.0], [1000.0, 3168.0], [1015.0, 3148.0], [1013.0, 1980.0], [1012.0, 3155.0], [1010.0, 1987.0], [1009.0, 3158.0], [1080.0, 177.0], [1084.0, 177.0], [1086.0, 177.0], [1082.0, 177.0], [1078.0, 177.0], [1076.0, 177.0], [1038.0, 3112.0], [1036.0, 1947.0], [1034.0, 3127.0], [1032.0, 3129.0], [1030.0, 3130.3333333333335], [1026.0, 1960.0], [1024.0, 2358.0], [1050.0, 178.0], [1042.0, 7185.0], [1040.0, 8030.0], [1142.0, 174.0], [1122.0, 175.0], [1120.0, 175.0], [1124.0, 175.0], [1126.0, 175.0], [1128.0, 175.0], [1140.0, 175.0], [1096.0, 176.0], [1094.0, 176.0], [1092.0, 176.0], [1090.0, 176.0], [1118.0, 175.33333333333334], [1208.0, 3430.0], [1152.0, 164.0], [1272.0, 174.0], [1266.0, 174.0], [1276.0, 3427.0], [1248.0, 2041.0], [1250.0, 1347.0], [1274.0, 174.0], [1228.0, 1348.0], [1222.0, 1556.2], [1220.0, 1348.1666666666667], [1218.0, 1349.0], [1246.0, 3428.0], [1244.0, 3428.0], [1242.0, 2387.5], [1262.0, 174.0], [1338.0, 1342.0], [1340.0, 1254.6666666666665], [1312.0, 172.0], [1314.0, 985.2500000000001], [1316.0, 173.0], [1320.0, 172.0], [1336.0, 3423.0], [1332.0, 171.0], [1294.0, 173.0], [1292.0, 173.0], [1288.0, 759.5], [1282.0, 174.0], [1280.0, 408.4], [1310.0, 1344.0], [1306.0, 172.0], [1304.0, 173.0], [1302.0, 563.6666666666666], [1300.0, 173.0], [1296.0, 466.5], [1348.0, 3252.0], [1374.0, 2301.0], [1350.0, 2209.5], [1352.0, 1168.5], [1356.0, 2188.5], [1354.0, 1163.0], [1372.0, 2303.0], [1370.0, 2310.0], [1368.0, 2311.0], [1366.0, 2312.0], [1364.0, 2312.0], [1362.0, 5997.0], [1360.0, 3151.0], [1446.0, 204.5], [1448.0, 203.0], [1468.0, 202.0], [1442.0, 204.33333333333334], [1444.0, 204.0], [1450.0, 203.0], [1452.0, 203.25], [1454.0, 203.125], [1470.0, 187.0], [1466.0, 203.0], [1462.0, 203.0], [1460.0, 203.33333333333334], [1422.0, 204.0], [1434.0, 204.0], [1432.0, 204.2], [1430.0, 204.14285714285714], [1428.0, 204.0], [1424.0, 204.0], [1532.0, 3897.0], [1504.0, 3782.0], [1506.0, 3089.0], [1508.0, 3081.0], [1510.0, 3079.0], [1512.0, 4089.0], [1514.0, 4072.0], [1516.0, 3445.0], [1518.0, 3904.0], [1530.0, 3122.0], [1528.0, 3900.0], [1522.0, 3904.0], [1502.0, 3783.0], [1472.0, 186.0], [1474.0, 1589.0], [1478.0, 1585.0], [1480.0, 1271.0], [1484.0, 3068.0], [1500.0, 3107.0], [1498.0, 3801.0], [1496.0, 1265.0], [1494.0, 3110.5], [1492.0, 3110.0], [1490.0, 3458.0], [1488.0, 1268.0], [1550.0, 3102.0], [1598.0, 196.5], [1596.0, 196.33333333333334], [1592.0, 400.92857142857144], [1546.0, 3496.0], [1544.0, 3886.0], [1542.0, 3888.0], [1540.0, 3112.0], [1538.0, 3114.0], [1536.0, 3114.0], [1558.0, 3078.0], [1556.0, 3866.0], [1554.0, 3876.0], [1552.0, 3878.0], [1660.0, 149.0], [1632.0, 159.0], [1634.0, 159.0], [1642.0, 159.0], [1654.0, 157.0], [1652.0, 157.0], [1612.0, 194.75], [1608.0, 196.0], [1602.0, 1623.5], [1600.0, 195.0], [1630.0, 159.0], [1628.0, 160.0], [1626.0, 160.0], [1620.0, 160.0], [1618.0, 160.0], [1678.0, 3670.0], [1716.0, 2060.0], [1696.0, 2882.0], [1700.0, 3312.0], [1698.0, 3312.0], [1702.0, 3632.0], [1704.0, 3630.0], [1706.0, 2955.0], [1714.0, 2941.0], [1712.0, 92390.0], [1674.0, 2950.5], [1672.0, 3290.0], [1670.0, 3242.0], [1668.0, 2906.0], [1666.0, 3290.0], [1664.0, 2953.0], [1692.0, 2979.0], [1690.0, 2980.0], [1688.0, 2981.0], [1682.0, 3566.0], [1680.0, 2990.0], [1710.0, 2951.0], [1790.0, 137.0], [1844.0, 131.25], [1850.0, 113.0], [1854.0, 112.0], [1830.0, 132.0], [1826.0, 132.0], [1846.0, 113.0], [1840.0, 131.81818181818178], [1802.0, 134.0], [1800.0, 133.77777777777774], [1798.0, 135.0], [1794.0, 134.4], [1792.0, 136.0], [1822.0, 133.0], [1820.0, 133.0], [1816.0, 133.0], [1810.0, 133.66666666666666], [1808.0, 134.0], [1888.0, 95.0], [1914.0, 86.0], [1892.0, 94.5], [1890.0, 95.0], [1898.0, 88.0], [1896.0, 94.0], [1918.0, 86.0], [1908.0, 87.0], [1904.0, 87.0], [1886.0, 96.25], [1858.0, 112.0], [1860.0, 112.25], [1862.0, 101.0], [1868.0, 99.5], [1866.0, 99.0], [1870.0, 98.0], [1876.0, 98.16666666666667], [1954.0, 2070.0], [1956.0, 2745.0], [1960.0, 3175.0], [1958.0, 2667.3333333333335], [1952.0, 3190.0], [1932.0, 78.33333333333333], [1926.0, 78.0], [1924.0, 84.66666666666667], [1950.0, 2071.0], [1948.0, 39.666666666666664], [1944.0, 61.0], [1942.0, 75.0], [2008.0, 1176.0], [2002.0, 165.0], [1992.0, 165.0], [2076.0, 201.5], [2072.0, 202.0], [2240.0, 188.0], [2260.0, 187.0], [2252.0, 187.33333333333334], [2248.0, 188.0], [2196.0, 191.96], [2200.0, 190.5], [2236.0, 188.14285714285714], [2232.0, 189.0], [2228.0, 189.75], [2224.0, 189.0], [2220.0, 190.33333333333334], [2216.0, 190.0], [2212.0, 190.0], [2380.0, 172.0], [2376.0, 171.66666666666666], [2428.0, 131.0], [2368.0, 172.0], [2384.0, 171.5], [2388.0, 171.0], [2392.0, 170.5], [2396.0, 170.5], [2420.0, 132.0], [2416.0, 135.0], [2408.0, 136.0], [2400.0, 170.125], [2360.0, 173.0], [2356.0, 174.16666666666666], [2552.0, 670.0], [2556.0, 820.3333333333333], [2504.0, 383.0], [2508.0, 383.0], [2436.0, 2170.0], [2432.0, 2174.0], [2492.0, 335.4117647058824], [2488.0, 949.6], [2572.0, 722.6666666666666], [2560.0, 1160.5], [2752.0, 247.304347826087], [2800.0, 220.0], [2764.0, 230.33333333333334], [2772.0, 221.0], [2768.0, 240.3846153846154], [2780.0, 221.5], [2796.0, 221.33333333333334], [2784.0, 221.0], [2732.0, 375.6666666666667], [2892.0, 173.0], [2888.0, 173.0], [2896.0, 173.0], [2900.0, 173.0], [2904.0, 172.0], [2908.0, 172.66666666666666], [2940.0, 125.0], [2932.0, 169.0], [2928.0, 169.0], [2924.0, 170.2], [2916.0, 171.0], [2912.0, 172.0], [3000.0, 5146.9152619235765], [2968.0, 122.0], [2996.0, 182.0], [2988.0, 389.25], [2984.0, 121.0], [2169.0, 193.0], [2173.0, 194.0], [2157.0, 194.0], [2153.0, 192.0], [2249.0, 188.0], [2245.0, 188.25], [2257.0, 187.33333333333334], [2261.0, 248.0], [2269.0, 276.375], [2265.0, 218.0], [2253.0, 187.0], [2197.0, 191.14285714285714], [2201.0, 190.75], [2205.0, 190.0], [2233.0, 188.5], [2229.0, 189.0], [2225.0, 189.5], [2221.0, 190.0], [2217.0, 191.0], [2213.0, 190.0], [2209.0, 190.0], [2373.0, 172.0], [2429.0, 2175.0], [2377.0, 172.0], [2385.0, 170.8], [2389.0, 170.83333333333334], [2393.0, 171.0], [2425.0, 130.5], [2421.0, 132.0], [2413.0, 134.5], [2409.0, 136.0], [2365.0, 172.5], [2361.0, 173.5], [2357.0, 173.0], [2353.0, 174.83333333333334], [2557.0, 276.0], [2497.0, 158.0], [2501.0, 149.0], [2509.0, 383.0], [2525.0, 362.6666666666667], [2553.0, 913.0], [2549.0, 1457.0], [2445.0, 2152.0], [2437.0, 2170.0], [2489.0, 160.0], [2573.0, 1446.0], [2565.0, 1448.0], [2753.0, 231.0], [2805.0, 220.0], [2777.0, 221.0], [2773.0, 221.0], [2769.0, 228.79999999999998], [2765.0, 238.36363636363637], [2801.0, 220.0], [2789.0, 252.0], [2785.0, 221.0], [2737.0, 295.5], [2733.0, 234.0], [2729.0, 530.0], [2941.0, 124.0], [2897.0, 173.0], [2905.0, 171.5], [2909.0, 172.0], [2933.0, 459.5], [2925.0, 750.0], [2921.0, 170.0], [2917.0, 171.0], [2913.0, 172.16666666666666], [2953.0, 123.0], [2949.0, 123.0], [2961.0, 122.0], [2965.0, 689.3333333333333], [2969.0, 122.0], [2973.0, 122.0], [2993.0, 238.79069767441862], [2989.0, 1516.6923076923078], [2985.0, 121.0], [2977.0, 538.25], [1079.0, 177.0], [1087.0, 176.27272727272725], [1085.0, 177.0], [1083.0, 177.0], [1077.0, 177.5], [1039.0, 8031.0], [1037.0, 3118.0], [1035.0, 1948.0], [1033.0, 1958.0], [1027.0, 1959.0], [1025.0, 1966.0], [1049.0, 178.0], [1041.0, 7188.0], [1143.0, 173.0], [1149.0, 164.0], [1151.0, 164.0], [1123.0, 175.33333333333334], [1125.0, 175.0], [1127.0, 175.0], [1139.0, 175.0], [1137.0, 175.0], [1119.0, 175.0], [1117.0, 176.0], [1115.0, 176.0], [1131.0, 175.0], [1129.0, 175.0], [1199.0, 3431.0], [1159.0, 163.0], [1157.0, 163.33333333333334], [1155.0, 163.0], [1271.0, 174.33333333333334], [1279.0, 174.33333333333334], [1249.0, 1347.0], [1261.0, 174.0], [1259.0, 175.0], [1265.0, 1346.0], [1231.0, 1348.0], [1221.0, 1348.0], [1219.0, 1869.25], [1217.0, 1349.0], [1247.0, 1347.0], [1245.0, 1347.0], [1263.0, 1280.25], [1291.0, 564.0], [1343.0, 169.25], [1313.0, 1799.0], [1315.0, 172.25], [1317.0, 562.6666666666666], [1319.0, 172.0], [1335.0, 169.75], [1329.0, 171.5], [1295.0, 498.3], [1293.0, 173.0], [1289.0, 173.0], [1287.0, 174.0], [1281.0, 174.0], [1311.0, 172.0], [1309.0, 1798.5], [1307.0, 1256.3333333333333], [1305.0, 173.0], [1303.0, 173.0], [1299.0, 173.0], [1297.0, 759.0], [1327.0, 171.0], [1325.0, 984.2500000000001], [1347.0, 169.0], [1371.0, 2310.0], [1353.0, 1164.0], [1359.0, 3151.5], [1357.0, 3152.0], [1373.0, 2301.0], [1367.0, 2311.0], [1365.0, 2311.0], [1361.0, 5999.0], [1447.0, 204.0], [1471.0, 188.0], [1441.0, 204.0], [1443.0, 204.0], [1449.0, 203.0], [1451.0, 203.0], [1453.0, 203.0], [1455.0, 203.1], [1469.0, 3494.3333333333335], [1465.0, 202.0], [1461.0, 203.0], [1459.0, 203.4], [1457.0, 203.0], [1423.0, 204.0], [1431.0, 204.0], [1425.0, 204.0], [1531.0, 3122.0], [1511.0, 3769.0], [1535.0, 3892.0], [1505.0, 3782.0], [1507.0, 3081.0], [1509.0, 4092.0], [1513.0, 3760.0], [1515.0, 4070.0], [1517.0, 3906.0], [1533.0, 3893.0], [1529.0, 3899.0], [1527.0, 3514.0], [1525.0, 3644.0], [1523.0, 3516.0], [1521.0, 3904.0], [1473.0, 1592.0], [1477.0, 1585.0], [1475.0, 1587.0], [1479.0, 3807.0], [1481.0, 3116.0], [1485.0, 1270.0], [1501.0, 3786.0], [1499.0, 3799.0], [1497.0, 3801.0], [1495.0, 3109.0], [1491.0, 3804.0], [1489.0, 1268.0], [1589.0, 195.0], [1587.0, 196.5], [1593.0, 196.66666666666666], [1573.0, 197.6], [1597.0, 196.0], [1591.0, 197.0], [1585.0, 197.0], [1551.0, 3878.0], [1549.0, 3491.0], [1547.0, 3108.0], [1543.0, 3110.0], [1541.0, 3111.0], [1539.0, 3890.0], [1537.0, 3114.0], [1559.0, 3853.0], [1557.0, 3082.0], [1555.0, 3873.0], [1553.0, 3099.0], [1663.0, 2908.0], [1659.0, 149.5], [1633.0, 160.0], [1641.0, 159.0], [1635.0, 160.0], [1643.0, 158.5], [1661.0, 149.0], [1657.0, 156.0], [1655.0, 157.0], [1649.0, 157.5], [1611.0, 194.75], [1607.0, 195.0], [1605.0, 196.5], [1631.0, 159.0], [1625.0, 160.0], [1621.0, 160.0], [1619.0, 161.0], [1717.0, 143.0], [1703.0, 4075.0], [1707.0, 3629.0], [1701.0, 2974.0], [1705.0, 3630.0], [1715.0, 2062.0], [1679.0, 2994.0], [1677.0, 2948.5], [1675.0, 3671.0], [1667.0, 2999.0], [1695.0, 2931.5], [1693.0, 47701.0], [1689.0, 2888.0], [1687.0, 3657.0], [1685.0, 2890.5], [1683.0, 2891.0], [1681.0, 2893.0], [1711.0, 2949.0], [1709.0, 3512.5], [1791.0, 137.0], [1851.0, 113.0], [1839.0, 132.0], [1835.0, 132.0], [1853.0, 112.0], [1847.0, 113.0], [1845.0, 116.0], [1803.0, 134.0], [1801.0, 133.99999999999997], [1797.0, 134.5], [1795.0, 135.0], [1819.0, 133.0], [1817.0, 133.5], [1815.0, 133.0], [1811.0, 133.2], [1809.0, 134.0], [1917.0, 86.0], [1919.0, 85.0], [1895.0, 94.0], [1893.0, 94.0], [1903.0, 87.5], [1901.0, 88.0], [1913.0, 87.0], [1911.0, 87.0], [1909.0, 88.0], [1907.0, 88.0], [1857.0, 113.0], [1859.0, 112.0], [1861.0, 107.0], [1865.0, 100.5], [1863.0, 100.0], [1869.0, 99.0], [1885.0, 96.0], [1877.0, 98.0], [1927.0, 78.0], [1933.0, 77.66666666666667], [1959.0, 3178.0], [1953.0, 2071.0], [1925.0, 83.0], [1921.0, 85.0], [1951.0, 3192.0], [1949.0, 39.0], [1945.0, 59.0], [1943.0, 61.0], [1939.0, 78.0], [1937.0, 77.33333333333333], [2023.0, 160.7413793103448], [2009.0, 1176.0], [1999.0, 165.0], [2158.0, 193.0], [2170.0, 194.0], [2154.0, 195.0], [2078.0, 201.5], [2070.0, 2491.3333333333335], [2246.0, 188.25], [2242.0, 188.0], [2266.0, 248.0], [2258.0, 187.0], [2250.0, 187.66666666666666], [2238.0, 188.33333333333334], [2198.0, 191.0], [2202.0, 190.0], [2206.0, 190.0], [2194.0, 193.0], [2222.0, 195.39999999999998], [2218.0, 190.0], [2214.0, 190.0], [2210.0, 190.0], [2378.0, 171.66666666666666], [2370.0, 173.0], [2382.0, 171.66666666666666], [2386.0, 170.71428571428572], [2394.0, 170.0], [2398.0, 170.7142857142857], [2430.0, 2175.0], [2422.0, 132.0], [2366.0, 172.5], [2358.0, 174.0], [2354.0, 175.5], [2350.0, 174.75], [2502.0, 387.0], [2558.0, 1094.0], [2554.0, 731.0], [2438.0, 2169.0], [2574.0, 266.0], [2570.0, 360.0], [2566.0, 1447.0], [2562.0, 1002.0], [2802.0, 220.0], [2758.0, 278.0], [2814.0, 227.00000000000003], [2770.0, 221.0], [2766.0, 229.77777777777777], [2794.0, 221.0], [2790.0, 222.0], [2786.0, 221.2], [2742.0, 233.0], [2730.0, 234.0], [2894.0, 173.0], [2930.0, 169.0], [2898.0, 173.0], [2902.0, 173.0], [2906.0, 172.0], [2910.0, 172.0], [2918.0, 443.00000000000006], [2994.0, 213.57894736842104], [2958.0, 123.0], [2966.0, 122.0], [2990.0, 214.46666666666667], [2986.0, 296.6136363636364], [2978.0, 122.0], [2159.0, 193.5], [2175.0, 194.0], [2155.0, 193.5], [2079.0, 199.0], [2075.0, 202.0], [2071.0, 1199.0], [2191.0, 193.0], [2259.0, 187.0], [2255.0, 188.0], [2187.0, 193.0], [2203.0, 190.0], [2235.0, 188.0], [2231.0, 189.33333333333334], [2227.0, 189.0], [2223.0, 219.25], [2215.0, 190.0], [2211.0, 190.0], [2379.0, 171.8], [2431.0, 2174.0], [2383.0, 171.33333333333334], [2387.0, 170.5], [2391.0, 170.5], [2395.0, 170.5], [2399.0, 170.5], [2423.0, 132.0], [2419.0, 135.0], [2367.0, 172.0], [2363.0, 173.25], [2359.0, 174.0], [2355.0, 174.0], [2555.0, 1455.0], [2559.0, 368.0], [2499.0, 149.0], [2527.0, 1103.25], [2439.0, 2166.0], [2435.0, 2173.6666666666665], [2495.0, 159.33333333333334], [2491.0, 955.9166666666665], [2575.0, 265.0], [2571.0, 880.75], [2759.0, 231.0], [2775.0, 221.0], [2771.0, 221.0], [2767.0, 228.87500000000003], [2783.0, 221.0], [2811.0, 251.16666666666666], [2807.0, 220.0], [2803.0, 220.0], [2799.0, 220.0], [2791.0, 234.28571428571428], [2787.0, 221.0], [2743.0, 247.08333333333331], [2731.0, 265.0], [2895.0, 173.0], [2939.0, 449.625], [2943.0, 124.0], [2891.0, 173.0], [2899.0, 173.16666666666666], [2903.0, 172.0], [2907.0, 172.0], [2911.0, 172.5], [2935.0, 729.5], [2927.0, 542.6666666666666], [2919.0, 170.0], [2915.0, 254.84615384615384], [2963.0, 122.0], [2975.0, 393.0], [2995.0, 183.0], [2991.0, 207.78260869565216], [2987.0, 479.0], [2983.0, 1240.0], [2979.0, 311.08333333333337], [1.0, 27705.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[2944.7636370424766, 5149.245497878052]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 3000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 49896.0, "minX": 1.68287358E12, "maxY": 241080.7, "series": [{"data": [[1.6828737E12, 200154.0], [1.68287388E12, 78820.65], [1.68287358E12, 70750.56666666667], [1.68287376E12, 208973.61666666667], [1.68287364E12, 158687.15], [1.68287382E12, 241080.7]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.6828737E12, 141229.2], [1.68287388E12, 56658.0], [1.68287358E12, 49896.0], [1.68287376E12, 143438.4], [1.68287364E12, 112896.0], [1.68287382E12, 169696.8]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68287388E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 1631.9744668217184, "minX": 1.68287358E12, "maxY": 7997.877678571447, "series": [{"data": [[1.6828737E12, 7078.427807486633], [1.68287388E12, 3704.966197183103], [1.68287358E12, 2845.240235690237], [1.68287376E12, 6531.350032000922], [1.68287364E12, 7997.877678571447], [1.68287382E12, 1631.9744668217184]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68287388E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 1605.0717502103141, "minX": 1.68287358E12, "maxY": 7997.87165178569, "series": [{"data": [[1.6828737E12, 7041.869459298896], [1.68287388E12, 3704.940696812459], [1.68287358E12, 2845.220538720547], [1.68287376E12, 5966.417292139395], [1.68287364E12, 7997.87165178569], [1.68287382E12, 1605.0717502103141]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68287388E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 18.475908080059344, "minX": 1.68287358E12, "maxY": 2877.9499621807176, "series": [{"data": [[1.6828737E12, 1925.16981580511], [1.68287388E12, 18.475908080059344], [1.68287358E12, 20.042760942760918], [1.68287376E12, 2877.9499621807176], [1.68287364E12, 2127.3354910714265], [1.68287382E12, 53.80602701766519]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68287388E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 9.0, "minX": 1.68287358E12, "maxY": 171347.0, "series": [{"data": [[1.6828737E12, 138371.0], [1.68287388E12, 92422.0], [1.68287358E12, 28399.0], [1.68287376E12, 171347.0], [1.68287364E12, 90119.0], [1.68287382E12, 72885.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.6828737E12, 9038.0], [1.68287388E12, 12976.200000000004], [1.68287358E12, 9229.900000000001], [1.68287376E12, 3279.600000000002], [1.68287364E12, 10776.0], [1.68287382E12, 5071.9000000000015]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.6828737E12, 127628.74], [1.68287388E12, 65302.0], [1.68287358E12, 27300.0], [1.68287376E12, 164061.61], [1.68287364E12, 72019.54000000001], [1.68287382E12, 29620.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.6828737E12, 43827.299999999974], [1.68287388E12, 20249.1], [1.68287358E12, 15029.0], [1.68287376E12, 41033.3], [1.68287364E12, 59839.0], [1.68287382E12, 9599.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.6828737E12, 9.0], [1.68287388E12, 19.0], [1.68287358E12, 12.0], [1.68287376E12, 15.0], [1.68287364E12, 12.0], [1.68287382E12, 19.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.6828737E12, 187.0], [1.68287388E12, 190.0], [1.68287358E12, 173.0], [1.68287376E12, 167.0], [1.68287364E12, 1173.0], [1.68287382E12, 169.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68287388E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 83.0, "minX": 1.0, "maxY": 167672.0, "series": [{"data": [[2.0, 58484.0], [3.0, 59940.5], [4.0, 54249.5], [5.0, 21734.5], [6.0, 1753.0], [7.0, 11900.0], [8.0, 19280.0], [9.0, 167672.0], [10.0, 14584.0], [11.0, 12043.0], [13.0, 15191.0], [14.0, 18521.0], [15.0, 3637.0], [16.0, 7445.5], [17.0, 8503.0], [18.0, 7754.0], [19.0, 19393.0], [21.0, 14885.0], [23.0, 1031.0], [24.0, 32693.0], [26.0, 9846.0], [29.0, 2594.0], [30.0, 3157.0], [33.0, 1064.5], [37.0, 100058.0], [43.0, 3111.0], [46.0, 159.0], [49.0, 1052.0], [55.0, 2979.0], [59.0, 65302.0], [61.0, 83.0], [60.0, 20914.5], [63.0, 8266.0], [66.0, 167.0], [75.0, 19368.0], [74.0, 10780.0], [86.0, 2245.5], [85.0, 11098.0], [93.0, 139.0], [100.0, 7850.0], [102.0, 10175.5], [107.0, 6712.0], [106.0, 7043.0], [110.0, 204.0], [119.0, 175.0], [116.0, 18967.0], [123.0, 24157.0], [127.0, 157.0], [124.0, 7670.0], [125.0, 20200.0], [129.0, 132.0], [128.0, 101.0], [136.0, 8200.0], [137.0, 7959.0], [139.0, 132.0], [146.0, 196.5], [157.0, 112.0], [162.0, 3038.0], [163.0, 136.0], [181.0, 114.0], [182.0, 94.0], [177.0, 170.0], [185.0, 9166.0], [197.0, 156.0], [206.0, 100095.5], [203.0, 174.0], [214.0, 203.0], [211.0, 160.0], [219.0, 145.0], [221.0, 171.0], [223.0, 139.0], [218.0, 148.0], [217.0, 180.0], [224.0, 146.0], [234.0, 164.0], [238.0, 2221.5], [239.0, 2180.0], [235.0, 3701.0], [247.0, 147.0], [242.0, 165.0], [244.0, 2891.0], [249.0, 691.0], [255.0, 168.0], [257.0, 177.0], [256.0, 192.0], [271.0, 155.0], [267.0, 162.0], [266.0, 148.0], [269.0, 178.0], [268.0, 189.0], [259.0, 157.0], [265.0, 150.0], [264.0, 10629.0], [263.0, 154.0], [262.0, 169.0], [260.0, 147.0], [275.0, 168.0], [273.0, 142.0], [281.0, 163.0], [272.0, 160.0], [280.0, 166.0], [296.0, 7217.0], [300.0, 3861.0], [292.0, 128.0], [291.0, 158.0], [289.0, 161.0], [303.0, 143.0], [314.0, 7969.0], [310.0, 160.0], [320.0, 5614.0], [325.0, 178.0], [346.0, 161.0], [338.0, 151.0], [355.0, 8822.0], [359.0, 127.0], [375.0, 4666.0], [371.0, 167.0], [383.0, 160.0], [390.0, 7019.0], [395.0, 6740.0], [403.0, 8206.0], [415.0, 4901.0], [409.0, 177.0], [429.0, 148.0], [420.0, 183.0], [417.0, 168.0], [423.0, 199.0], [432.0, 136.0], [457.0, 5864.0], [456.0, 163.0], [475.0, 125.0], [471.0, 170.0], [474.0, 348.0], [493.0, 151.0], [501.0, 293.0], [508.0, 156.0], [511.0, 140.0], [538.0, 156.0], [537.0, 172.0], [539.0, 176.0], [528.0, 155.5], [521.0, 6442.0], [536.0, 6120.0], [530.0, 187.0], [517.0, 176.0], [514.0, 144.0], [519.0, 152.0], [531.0, 168.0], [534.0, 166.0], [524.0, 170.0], [555.0, 9099.0], [562.0, 8021.0], [559.0, 169.0], [552.0, 170.0], [553.0, 182.0], [578.0, 168.0], [601.0, 5910.0], [599.0, 7230.0], [633.0, 5642.0], [613.0, 237.0], [636.0, 159.0], [669.0, 171.0], [680.0, 10739.0], [687.0, 6245.0], [697.0, 175.0], [700.0, 163.0], [715.0, 169.0], [718.0, 151.0], [730.0, 153.0], [746.0, 4572.0], [762.0, 198.0], [736.0, 146.0], [742.0, 242.0], [744.0, 156.0], [797.0, 164.0], [788.0, 7115.0], [781.0, 7539.0], [798.0, 192.0], [785.0, 173.0], [805.0, 165.0], [806.0, 167.0], [810.0, 205.0], [809.0, 171.0], [801.0, 256.0], [815.0, 233.0], [800.0, 171.0], [864.0, 166.0], [1024.0, 173.0], [1111.0, 365.0], [1.0, 5947.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[17.0, 36144.0], [715.0, 87494.0], [255.0, 77651.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1111.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 167672.0, "series": [{"data": [[2.0, 58484.0], [3.0, 59940.5], [4.0, 54249.0], [5.0, 21734.5], [6.0, 1753.0], [7.0, 11900.0], [8.0, 19280.0], [9.0, 167672.0], [10.0, 14584.0], [11.0, 12043.0], [13.0, 15191.0], [14.0, 18521.0], [15.0, 3637.0], [16.0, 7445.5], [17.0, 8503.0], [18.0, 7754.0], [19.0, 19393.0], [21.0, 14885.0], [23.0, 1031.0], [24.0, 32693.0], [26.0, 9846.0], [29.0, 2594.0], [30.0, 3157.0], [33.0, 1064.5], [37.0, 100058.0], [43.0, 3110.0], [46.0, 159.0], [49.0, 1052.0], [55.0, 2979.0], [59.0, 65302.0], [61.0, 83.0], [60.0, 20914.0], [63.0, 8266.0], [66.0, 167.0], [75.0, 19368.0], [74.0, 10780.0], [86.0, 2245.5], [85.0, 11098.0], [93.0, 139.0], [100.0, 7850.0], [102.0, 10175.5], [107.0, 6712.0], [106.0, 7043.0], [110.0, 204.0], [119.0, 175.0], [116.0, 18967.0], [123.0, 24157.0], [127.0, 157.0], [124.0, 7670.0], [125.0, 20200.0], [129.0, 132.0], [128.0, 101.0], [136.0, 8200.0], [137.0, 7959.0], [139.0, 132.0], [146.0, 196.0], [157.0, 112.0], [162.0, 3038.0], [163.0, 136.0], [181.0, 114.0], [182.0, 94.0], [177.0, 170.0], [185.0, 9166.0], [197.0, 156.0], [206.0, 100095.5], [203.0, 174.0], [214.0, 203.0], [211.0, 160.0], [219.0, 145.0], [221.0, 171.0], [223.0, 139.0], [218.0, 148.0], [217.0, 180.0], [224.0, 146.0], [234.0, 164.0], [238.0, 2221.5], [239.0, 2180.0], [235.0, 3701.0], [247.0, 147.0], [242.0, 165.0], [244.0, 2891.0], [249.0, 691.0], [255.0, 168.0], [257.0, 177.0], [256.0, 192.0], [271.0, 155.0], [267.0, 162.0], [266.0, 147.0], [269.0, 178.0], [268.0, 189.0], [259.0, 157.0], [265.0, 150.0], [264.0, 10629.0], [263.0, 154.0], [262.0, 169.0], [260.0, 147.0], [275.0, 168.0], [273.0, 142.0], [281.0, 163.0], [272.0, 160.0], [280.0, 166.0], [296.0, 7217.0], [300.0, 3861.0], [292.0, 128.0], [291.0, 158.0], [289.0, 161.0], [303.0, 143.0], [314.0, 7969.0], [310.0, 160.0], [320.0, 5614.0], [325.0, 178.0], [346.0, 161.0], [338.0, 151.0], [355.0, 8822.0], [359.0, 127.0], [375.0, 4666.0], [371.0, 166.5], [383.0, 160.0], [390.0, 7019.0], [395.0, 6740.0], [403.0, 8206.0], [415.0, 4901.0], [409.0, 177.0], [429.0, 148.0], [420.0, 183.0], [417.0, 168.0], [423.0, 199.0], [432.0, 136.0], [457.0, 5864.0], [456.0, 163.0], [475.0, 125.0], [471.0, 170.0], [474.0, 348.0], [493.0, 151.0], [501.0, 293.0], [508.0, 156.0], [511.0, 140.0], [538.0, 156.0], [537.0, 172.0], [539.0, 176.0], [528.0, 155.5], [521.0, 6442.0], [536.0, 6120.0], [530.0, 187.0], [517.0, 176.0], [514.0, 144.0], [519.0, 152.0], [531.0, 168.0], [534.0, 166.0], [524.0, 170.0], [555.0, 9099.0], [562.0, 8021.0], [559.0, 169.0], [552.0, 170.0], [553.0, 182.0], [578.0, 168.0], [601.0, 5910.0], [599.0, 7230.0], [633.0, 5642.0], [613.0, 237.0], [636.0, 159.0], [669.0, 171.0], [680.0, 10739.0], [687.0, 6245.0], [697.0, 175.0], [700.0, 163.0], [715.0, 169.0], [718.0, 151.0], [730.0, 153.0], [746.0, 4572.0], [762.0, 198.0], [736.0, 146.0], [742.0, 242.0], [744.0, 156.0], [797.0, 164.0], [788.0, 7115.0], [781.0, 7539.0], [798.0, 192.0], [785.0, 173.0], [805.0, 165.0], [806.0, 167.0], [810.0, 205.0], [809.0, 171.0], [801.0, 256.0], [815.0, 233.0], [800.0, 171.0], [864.0, 166.0], [1024.0, 173.0], [1111.0, 365.0], [1.0, 5947.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[17.0, 0.0], [715.0, 0.0], [255.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1111.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 106.53333333333333, "minX": 1.68287358E12, "maxY": 338.2, "series": [{"data": [[1.6828737E12, 258.1], [1.68287388E12, 106.53333333333333], [1.68287358E12, 142.4], [1.68287376E12, 271.45], [1.68287364E12, 222.5], [1.68287382E12, 338.2]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68287388E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.11666666666666667, "minX": 1.68287358E12, "maxY": 336.7, "series": [{"data": [[1.6828737E12, 280.21666666666664], [1.68287388E12, 112.41666666666667], [1.68287358E12, 99.0], [1.68287376E12, 284.6], [1.68287364E12, 224.0], [1.68287382E12, 336.7]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.6828737E12, 0.2833333333333333], [1.68287376E12, 1.85], [1.68287382E12, 0.11666666666666667]], "isOverall": false, "label": "Non HTTP response code: java.net.SocketException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68287388E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.11666666666666667, "minX": 1.68287358E12, "maxY": 336.7, "series": [{"data": [[1.6828737E12, 280.21666666666664], [1.68287388E12, 112.41666666666667], [1.68287358E12, 99.0], [1.68287376E12, 284.6], [1.68287364E12, 224.0], [1.68287382E12, 336.7]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.6828737E12, 0.2833333333333333], [1.68287376E12, 1.85], [1.68287382E12, 0.11666666666666667]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68287388E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.11666666666666667, "minX": 1.68287358E12, "maxY": 336.7, "series": [{"data": [[1.6828737E12, 280.21666666666664], [1.68287388E12, 112.41666666666667], [1.68287358E12, 99.0], [1.68287376E12, 284.6], [1.68287364E12, 224.0], [1.68287382E12, 336.7]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.6828737E12, 0.2833333333333333], [1.68287376E12, 1.85], [1.68287382E12, 0.11666666666666667]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68287388E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

