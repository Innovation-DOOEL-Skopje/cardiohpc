/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 3.0, "minX": 0.0, "maxY": 234679.0, "series": [{"data": [[0.0, 3.0], [0.1, 4.0], [0.2, 4.0], [0.3, 4.0], [0.4, 5.0], [0.5, 5.0], [0.6, 5.0], [0.7, 5.0], [0.8, 5.0], [0.9, 5.0], [1.0, 5.0], [1.1, 5.0], [1.2, 6.0], [1.3, 6.0], [1.4, 6.0], [1.5, 7.0], [1.6, 7.0], [1.7, 7.0], [1.8, 7.0], [1.9, 8.0], [2.0, 8.0], [2.1, 9.0], [2.2, 9.0], [2.3, 9.0], [2.4, 10.0], [2.5, 10.0], [2.6, 10.0], [2.7, 11.0], [2.8, 11.0], [2.9, 11.0], [3.0, 12.0], [3.1, 12.0], [3.2, 12.0], [3.3, 13.0], [3.4, 13.0], [3.5, 13.0], [3.6, 14.0], [3.7, 14.0], [3.8, 14.0], [3.9, 15.0], [4.0, 15.0], [4.1, 16.0], [4.2, 16.0], [4.3, 17.0], [4.4, 18.0], [4.5, 19.0], [4.6, 19.0], [4.7, 20.0], [4.8, 21.0], [4.9, 22.0], [5.0, 22.0], [5.1, 23.0], [5.2, 24.0], [5.3, 25.0], [5.4, 26.0], [5.5, 27.0], [5.6, 27.0], [5.7, 28.0], [5.8, 29.0], [5.9, 29.0], [6.0, 30.0], [6.1, 31.0], [6.2, 32.0], [6.3, 33.0], [6.4, 33.0], [6.5, 34.0], [6.6, 35.0], [6.7, 35.0], [6.8, 36.0], [6.9, 37.0], [7.0, 38.0], [7.1, 38.0], [7.2, 39.0], [7.3, 40.0], [7.4, 41.0], [7.5, 42.0], [7.6, 43.0], [7.7, 44.0], [7.8, 44.0], [7.9, 45.0], [8.0, 46.0], [8.1, 46.0], [8.2, 47.0], [8.3, 48.0], [8.4, 48.0], [8.5, 49.0], [8.6, 50.0], [8.7, 51.0], [8.8, 52.0], [8.9, 52.0], [9.0, 53.0], [9.1, 54.0], [9.2, 55.0], [9.3, 56.0], [9.4, 57.0], [9.5, 58.0], [9.6, 59.0], [9.7, 60.0], [9.8, 61.0], [9.9, 61.0], [10.0, 62.0], [10.1, 63.0], [10.2, 63.0], [10.3, 64.0], [10.4, 65.0], [10.5, 66.0], [10.6, 67.0], [10.7, 67.0], [10.8, 68.0], [10.9, 69.0], [11.0, 70.0], [11.1, 71.0], [11.2, 72.0], [11.3, 73.0], [11.4, 74.0], [11.5, 74.0], [11.6, 75.0], [11.7, 76.0], [11.8, 76.0], [11.9, 77.0], [12.0, 78.0], [12.1, 79.0], [12.2, 80.0], [12.3, 81.0], [12.4, 82.0], [12.5, 83.0], [12.6, 84.0], [12.7, 85.0], [12.8, 86.0], [12.9, 88.0], [13.0, 89.0], [13.1, 90.0], [13.2, 92.0], [13.3, 93.0], [13.4, 95.0], [13.5, 96.0], [13.6, 97.0], [13.7, 98.0], [13.8, 99.0], [13.9, 100.0], [14.0, 100.0], [14.1, 101.0], [14.2, 103.0], [14.3, 105.0], [14.4, 107.0], [14.5, 109.0], [14.6, 110.0], [14.7, 112.0], [14.8, 113.0], [14.9, 114.0], [15.0, 116.0], [15.1, 118.0], [15.2, 119.0], [15.3, 121.0], [15.4, 123.0], [15.5, 124.0], [15.6, 125.0], [15.7, 127.0], [15.8, 128.0], [15.9, 129.0], [16.0, 131.0], [16.1, 132.0], [16.2, 134.0], [16.3, 135.0], [16.4, 136.0], [16.5, 137.0], [16.6, 139.0], [16.7, 144.0], [16.8, 145.0], [16.9, 146.0], [17.0, 146.0], [17.1, 147.0], [17.2, 148.0], [17.3, 149.0], [17.4, 150.0], [17.5, 150.0], [17.6, 151.0], [17.7, 152.0], [17.8, 153.0], [17.9, 154.0], [18.0, 155.0], [18.1, 156.0], [18.2, 157.0], [18.3, 157.0], [18.4, 158.0], [18.5, 159.0], [18.6, 161.0], [18.7, 162.0], [18.8, 163.0], [18.9, 164.0], [19.0, 165.0], [19.1, 166.0], [19.2, 167.0], [19.3, 168.0], [19.4, 169.0], [19.5, 170.0], [19.6, 171.0], [19.7, 172.0], [19.8, 172.0], [19.9, 173.0], [20.0, 174.0], [20.1, 174.0], [20.2, 175.0], [20.3, 175.0], [20.4, 176.0], [20.5, 177.0], [20.6, 177.0], [20.7, 178.0], [20.8, 179.0], [20.9, 180.0], [21.0, 180.0], [21.1, 181.0], [21.2, 182.0], [21.3, 183.0], [21.4, 184.0], [21.5, 184.0], [21.6, 185.0], [21.7, 186.0], [21.8, 187.0], [21.9, 188.0], [22.0, 189.0], [22.1, 189.0], [22.2, 190.0], [22.3, 191.0], [22.4, 192.0], [22.5, 193.0], [22.6, 194.0], [22.7, 196.0], [22.8, 198.0], [22.9, 199.0], [23.0, 200.0], [23.1, 201.0], [23.2, 201.0], [23.3, 202.0], [23.4, 203.0], [23.5, 204.0], [23.6, 205.0], [23.7, 205.0], [23.8, 206.0], [23.9, 207.0], [24.0, 207.0], [24.1, 208.0], [24.2, 209.0], [24.3, 209.0], [24.4, 210.0], [24.5, 211.0], [24.6, 212.0], [24.7, 213.0], [24.8, 213.0], [24.9, 215.0], [25.0, 217.0], [25.1, 219.0], [25.2, 220.0], [25.3, 221.0], [25.4, 221.0], [25.5, 222.0], [25.6, 224.0], [25.7, 226.0], [25.8, 227.0], [25.9, 227.0], [26.0, 228.0], [26.1, 229.0], [26.2, 230.0], [26.3, 231.0], [26.4, 232.0], [26.5, 234.0], [26.6, 235.0], [26.7, 238.0], [26.8, 240.0], [26.9, 241.0], [27.0, 243.0], [27.1, 244.0], [27.2, 248.0], [27.3, 250.0], [27.4, 252.0], [27.5, 253.0], [27.6, 256.0], [27.7, 260.0], [27.8, 263.0], [27.9, 264.0], [28.0, 266.0], [28.1, 269.0], [28.2, 272.0], [28.3, 276.0], [28.4, 279.0], [28.5, 280.0], [28.6, 281.0], [28.7, 285.0], [28.8, 288.0], [28.9, 289.0], [29.0, 290.0], [29.1, 291.0], [29.2, 294.0], [29.3, 296.0], [29.4, 297.0], [29.5, 298.0], [29.6, 298.0], [29.7, 299.0], [29.8, 299.0], [29.9, 300.0], [30.0, 301.0], [30.1, 306.0], [30.2, 307.0], [30.3, 308.0], [30.4, 309.0], [30.5, 310.0], [30.6, 312.0], [30.7, 313.0], [30.8, 314.0], [30.9, 316.0], [31.0, 319.0], [31.1, 320.0], [31.2, 320.0], [31.3, 321.0], [31.4, 322.0], [31.5, 326.0], [31.6, 329.0], [31.7, 331.0], [31.8, 332.0], [31.9, 333.0], [32.0, 334.0], [32.1, 335.0], [32.2, 336.0], [32.3, 336.0], [32.4, 337.0], [32.5, 338.0], [32.6, 340.0], [32.7, 342.0], [32.8, 344.0], [32.9, 345.0], [33.0, 347.0], [33.1, 348.0], [33.2, 351.0], [33.3, 353.0], [33.4, 359.0], [33.5, 362.0], [33.6, 365.0], [33.7, 369.0], [33.8, 373.0], [33.9, 374.0], [34.0, 375.0], [34.1, 376.0], [34.2, 377.0], [34.3, 379.0], [34.4, 380.0], [34.5, 381.0], [34.6, 382.0], [34.7, 384.0], [34.8, 386.0], [34.9, 388.0], [35.0, 389.0], [35.1, 391.0], [35.2, 392.0], [35.3, 393.0], [35.4, 394.0], [35.5, 394.0], [35.6, 395.0], [35.7, 395.0], [35.8, 396.0], [35.9, 397.0], [36.0, 398.0], [36.1, 400.0], [36.2, 401.0], [36.3, 401.0], [36.4, 402.0], [36.5, 402.0], [36.6, 403.0], [36.7, 404.0], [36.8, 404.0], [36.9, 405.0], [37.0, 406.0], [37.1, 407.0], [37.2, 408.0], [37.3, 408.0], [37.4, 409.0], [37.5, 409.0], [37.6, 410.0], [37.7, 410.0], [37.8, 411.0], [37.9, 411.0], [38.0, 412.0], [38.1, 412.0], [38.2, 413.0], [38.3, 414.0], [38.4, 415.0], [38.5, 416.0], [38.6, 417.0], [38.7, 418.0], [38.8, 418.0], [38.9, 419.0], [39.0, 420.0], [39.1, 420.0], [39.2, 420.0], [39.3, 421.0], [39.4, 421.0], [39.5, 421.0], [39.6, 422.0], [39.7, 422.0], [39.8, 423.0], [39.9, 423.0], [40.0, 423.0], [40.1, 424.0], [40.2, 424.0], [40.3, 425.0], [40.4, 426.0], [40.5, 427.0], [40.6, 427.0], [40.7, 428.0], [40.8, 428.0], [40.9, 428.0], [41.0, 429.0], [41.1, 429.0], [41.2, 430.0], [41.3, 430.0], [41.4, 430.0], [41.5, 431.0], [41.6, 431.0], [41.7, 432.0], [41.8, 432.0], [41.9, 433.0], [42.0, 433.0], [42.1, 434.0], [42.2, 434.0], [42.3, 434.0], [42.4, 435.0], [42.5, 435.0], [42.6, 435.0], [42.7, 436.0], [42.8, 436.0], [42.9, 437.0], [43.0, 437.0], [43.1, 437.0], [43.2, 438.0], [43.3, 438.0], [43.4, 438.0], [43.5, 439.0], [43.6, 439.0], [43.7, 440.0], [43.8, 440.0], [43.9, 441.0], [44.0, 441.0], [44.1, 442.0], [44.2, 442.0], [44.3, 443.0], [44.4, 444.0], [44.5, 444.0], [44.6, 445.0], [44.7, 445.0], [44.8, 446.0], [44.9, 446.0], [45.0, 447.0], [45.1, 447.0], [45.2, 447.0], [45.3, 447.0], [45.4, 448.0], [45.5, 448.0], [45.6, 448.0], [45.7, 448.0], [45.8, 449.0], [45.9, 449.0], [46.0, 449.0], [46.1, 449.0], [46.2, 450.0], [46.3, 450.0], [46.4, 450.0], [46.5, 450.0], [46.6, 450.0], [46.7, 451.0], [46.8, 451.0], [46.9, 451.0], [47.0, 451.0], [47.1, 452.0], [47.2, 452.0], [47.3, 452.0], [47.4, 452.0], [47.5, 452.0], [47.6, 453.0], [47.7, 453.0], [47.8, 453.0], [47.9, 453.0], [48.0, 454.0], [48.1, 454.0], [48.2, 454.0], [48.3, 454.0], [48.4, 455.0], [48.5, 455.0], [48.6, 455.0], [48.7, 455.0], [48.8, 455.0], [48.9, 456.0], [49.0, 456.0], [49.1, 456.0], [49.2, 456.0], [49.3, 456.0], [49.4, 457.0], [49.5, 457.0], [49.6, 457.0], [49.7, 457.0], [49.8, 457.0], [49.9, 458.0], [50.0, 458.0], [50.1, 458.0], [50.2, 458.0], [50.3, 458.0], [50.4, 459.0], [50.5, 459.0], [50.6, 459.0], [50.7, 459.0], [50.8, 459.0], [50.9, 460.0], [51.0, 460.0], [51.1, 460.0], [51.2, 460.0], [51.3, 461.0], [51.4, 461.0], [51.5, 461.0], [51.6, 461.0], [51.7, 461.0], [51.8, 462.0], [51.9, 462.0], [52.0, 462.0], [52.1, 462.0], [52.2, 463.0], [52.3, 463.0], [52.4, 463.0], [52.5, 463.0], [52.6, 464.0], [52.7, 464.0], [52.8, 464.0], [52.9, 464.0], [53.0, 465.0], [53.1, 465.0], [53.2, 465.0], [53.3, 466.0], [53.4, 466.0], [53.5, 466.0], [53.6, 467.0], [53.7, 467.0], [53.8, 467.0], [53.9, 468.0], [54.0, 468.0], [54.1, 468.0], [54.2, 468.0], [54.3, 468.0], [54.4, 469.0], [54.5, 469.0], [54.6, 469.0], [54.7, 469.0], [54.8, 469.0], [54.9, 470.0], [55.0, 470.0], [55.1, 470.0], [55.2, 470.0], [55.3, 471.0], [55.4, 471.0], [55.5, 471.0], [55.6, 471.0], [55.7, 472.0], [55.8, 472.0], [55.9, 472.0], [56.0, 472.0], [56.1, 473.0], [56.2, 473.0], [56.3, 473.0], [56.4, 473.0], [56.5, 474.0], [56.6, 474.0], [56.7, 474.0], [56.8, 475.0], [56.9, 475.0], [57.0, 476.0], [57.1, 476.0], [57.2, 477.0], [57.3, 477.0], [57.4, 477.0], [57.5, 478.0], [57.6, 478.0], [57.7, 478.0], [57.8, 479.0], [57.9, 479.0], [58.0, 479.0], [58.1, 479.0], [58.2, 480.0], [58.3, 480.0], [58.4, 480.0], [58.5, 481.0], [58.6, 481.0], [58.7, 482.0], [58.8, 482.0], [58.9, 483.0], [59.0, 484.0], [59.1, 484.0], [59.2, 485.0], [59.3, 485.0], [59.4, 486.0], [59.5, 486.0], [59.6, 487.0], [59.7, 488.0], [59.8, 489.0], [59.9, 489.0], [60.0, 490.0], [60.1, 491.0], [60.2, 491.0], [60.3, 494.0], [60.4, 496.0], [60.5, 497.0], [60.6, 497.0], [60.7, 498.0], [60.8, 498.0], [60.9, 499.0], [61.0, 500.0], [61.1, 500.0], [61.2, 501.0], [61.3, 502.0], [61.4, 502.0], [61.5, 503.0], [61.6, 503.0], [61.7, 504.0], [61.8, 504.0], [61.9, 505.0], [62.0, 505.0], [62.1, 506.0], [62.2, 506.0], [62.3, 508.0], [62.4, 509.0], [62.5, 510.0], [62.6, 511.0], [62.7, 512.0], [62.8, 512.0], [62.9, 513.0], [63.0, 513.0], [63.1, 514.0], [63.2, 515.0], [63.3, 516.0], [63.4, 517.0], [63.5, 519.0], [63.6, 520.0], [63.7, 521.0], [63.8, 523.0], [63.9, 523.0], [64.0, 524.0], [64.1, 526.0], [64.2, 528.0], [64.3, 531.0], [64.4, 531.0], [64.5, 532.0], [64.6, 533.0], [64.7, 534.0], [64.8, 535.0], [64.9, 536.0], [65.0, 539.0], [65.1, 541.0], [65.2, 543.0], [65.3, 544.0], [65.4, 546.0], [65.5, 547.0], [65.6, 548.0], [65.7, 548.0], [65.8, 549.0], [65.9, 550.0], [66.0, 551.0], [66.1, 555.0], [66.2, 559.0], [66.3, 560.0], [66.4, 561.0], [66.5, 562.0], [66.6, 562.0], [66.7, 563.0], [66.8, 564.0], [66.9, 564.0], [67.0, 565.0], [67.1, 566.0], [67.2, 566.0], [67.3, 567.0], [67.4, 568.0], [67.5, 568.0], [67.6, 569.0], [67.7, 570.0], [67.8, 571.0], [67.9, 571.0], [68.0, 572.0], [68.1, 573.0], [68.2, 573.0], [68.3, 574.0], [68.4, 574.0], [68.5, 575.0], [68.6, 576.0], [68.7, 577.0], [68.8, 578.0], [68.9, 579.0], [69.0, 580.0], [69.1, 581.0], [69.2, 581.0], [69.3, 582.0], [69.4, 582.0], [69.5, 584.0], [69.6, 585.0], [69.7, 586.0], [69.8, 586.0], [69.9, 587.0], [70.0, 588.0], [70.1, 589.0], [70.2, 590.0], [70.3, 592.0], [70.4, 593.0], [70.5, 593.0], [70.6, 594.0], [70.7, 595.0], [70.8, 597.0], [70.9, 599.0], [71.0, 602.0], [71.1, 604.0], [71.2, 604.0], [71.3, 605.0], [71.4, 607.0], [71.5, 609.0], [71.6, 611.0], [71.7, 612.0], [71.8, 612.0], [71.9, 614.0], [72.0, 616.0], [72.1, 617.0], [72.2, 618.0], [72.3, 623.0], [72.4, 628.0], [72.5, 636.0], [72.6, 640.0], [72.7, 641.0], [72.8, 642.0], [72.9, 643.0], [73.0, 645.0], [73.1, 647.0], [73.2, 649.0], [73.3, 653.0], [73.4, 654.0], [73.5, 655.0], [73.6, 657.0], [73.7, 659.0], [73.8, 662.0], [73.9, 664.0], [74.0, 665.0], [74.1, 666.0], [74.2, 667.0], [74.3, 668.0], [74.4, 669.0], [74.5, 670.0], [74.6, 672.0], [74.7, 673.0], [74.8, 676.0], [74.9, 678.0], [75.0, 680.0], [75.1, 682.0], [75.2, 683.0], [75.3, 684.0], [75.4, 685.0], [75.5, 686.0], [75.6, 687.0], [75.7, 690.0], [75.8, 691.0], [75.9, 692.0], [76.0, 693.0], [76.1, 694.0], [76.2, 696.0], [76.3, 697.0], [76.4, 698.0], [76.5, 699.0], [76.6, 699.0], [76.7, 700.0], [76.8, 700.0], [76.9, 701.0], [77.0, 701.0], [77.1, 702.0], [77.2, 702.0], [77.3, 703.0], [77.4, 704.0], [77.5, 705.0], [77.6, 705.0], [77.7, 706.0], [77.8, 706.0], [77.9, 707.0], [78.0, 708.0], [78.1, 708.0], [78.2, 709.0], [78.3, 710.0], [78.4, 711.0], [78.5, 712.0], [78.6, 714.0], [78.7, 715.0], [78.8, 716.0], [78.9, 717.0], [79.0, 717.0], [79.1, 718.0], [79.2, 719.0], [79.3, 721.0], [79.4, 724.0], [79.5, 725.0], [79.6, 728.0], [79.7, 731.0], [79.8, 734.0], [79.9, 740.0], [80.0, 743.0], [80.1, 745.0], [80.2, 748.0], [80.3, 749.0], [80.4, 750.0], [80.5, 752.0], [80.6, 753.0], [80.7, 754.0], [80.8, 754.0], [80.9, 755.0], [81.0, 756.0], [81.1, 756.0], [81.2, 757.0], [81.3, 758.0], [81.4, 758.0], [81.5, 759.0], [81.6, 760.0], [81.7, 768.0], [81.8, 772.0], [81.9, 774.0], [82.0, 777.0], [82.1, 781.0], [82.2, 782.0], [82.3, 783.0], [82.4, 785.0], [82.5, 786.0], [82.6, 789.0], [82.7, 791.0], [82.8, 793.0], [82.9, 795.0], [83.0, 797.0], [83.1, 800.0], [83.2, 801.0], [83.3, 802.0], [83.4, 803.0], [83.5, 803.0], [83.6, 804.0], [83.7, 805.0], [83.8, 805.0], [83.9, 805.0], [84.0, 806.0], [84.1, 807.0], [84.2, 808.0], [84.3, 809.0], [84.4, 810.0], [84.5, 810.0], [84.6, 811.0], [84.7, 812.0], [84.8, 816.0], [84.9, 819.0], [85.0, 825.0], [85.1, 827.0], [85.2, 829.0], [85.3, 830.0], [85.4, 831.0], [85.5, 833.0], [85.6, 834.0], [85.7, 838.0], [85.8, 841.0], [85.9, 843.0], [86.0, 847.0], [86.1, 854.0], [86.2, 855.0], [86.3, 856.0], [86.4, 857.0], [86.5, 858.0], [86.6, 861.0], [86.7, 872.0], [86.8, 874.0], [86.9, 878.0], [87.0, 882.0], [87.1, 893.0], [87.2, 902.0], [87.3, 915.0], [87.4, 921.0], [87.5, 923.0], [87.6, 925.0], [87.7, 927.0], [87.8, 929.0], [87.9, 932.0], [88.0, 934.0], [88.1, 939.0], [88.2, 940.0], [88.3, 941.0], [88.4, 943.0], [88.5, 949.0], [88.6, 963.0], [88.7, 966.0], [88.8, 974.0], [88.9, 981.0], [89.0, 989.0], [89.1, 999.0], [89.2, 1005.0], [89.3, 1011.0], [89.4, 1017.0], [89.5, 1027.0], [89.6, 1050.0], [89.7, 1053.0], [89.8, 1071.0], [89.9, 1126.0], [90.0, 1161.0], [90.1, 1163.0], [90.2, 1164.0], [90.3, 1174.0], [90.4, 1216.0], [90.5, 1238.0], [90.6, 1313.0], [90.7, 1418.0], [90.8, 1618.0], [90.9, 1856.0], [91.0, 2050.0], [91.1, 2229.0], [91.2, 2622.0], [91.3, 2878.0], [91.4, 3273.0], [91.5, 3643.0], [91.6, 3874.0], [91.7, 4346.0], [91.8, 4436.0], [91.9, 4552.0], [92.0, 4682.0], [92.1, 4710.0], [92.2, 4832.0], [92.3, 5119.0], [92.4, 5217.0], [92.5, 5264.0], [92.6, 5403.0], [92.7, 5550.0], [92.8, 5812.0], [92.9, 6014.0], [93.0, 6154.0], [93.1, 6160.0], [93.2, 6188.0], [93.3, 6367.0], [93.4, 6703.0], [93.5, 6842.0], [93.6, 6860.0], [93.7, 6978.0], [93.8, 7060.0], [93.9, 7104.0], [94.0, 7107.0], [94.1, 7120.0], [94.2, 7215.0], [94.3, 7414.0], [94.4, 7421.0], [94.5, 7472.0], [94.6, 7564.0], [94.7, 7746.0], [94.8, 7781.0], [94.9, 7847.0], [95.0, 7948.0], [95.1, 7985.0], [95.2, 8255.0], [95.3, 8646.0], [95.4, 8875.0], [95.5, 9038.0], [95.6, 9217.0], [95.7, 9386.0], [95.8, 9439.0], [95.9, 9724.0], [96.0, 9954.0], [96.1, 10038.0], [96.2, 10112.0], [96.3, 10264.0], [96.4, 10592.0], [96.5, 10975.0], [96.6, 11697.0], [96.7, 12017.0], [96.8, 12291.0], [96.9, 12383.0], [97.0, 13165.0], [97.1, 14215.0], [97.2, 14904.0], [97.3, 16441.0], [97.4, 17818.0], [97.5, 19816.0], [97.6, 22909.0], [97.7, 27241.0], [97.8, 31508.0], [97.9, 33223.0], [98.0, 38994.0], [98.1, 41892.0], [98.2, 47437.0], [98.3, 51196.0], [98.4, 56907.0], [98.5, 63205.0], [98.6, 68005.0], [98.7, 70072.0], [98.8, 74984.0], [98.9, 76596.0], [99.0, 80565.0], [99.1, 90155.0], [99.2, 100165.0], [99.3, 100665.0], [99.4, 101119.0], [99.5, 111442.0], [99.6, 129395.0], [99.7, 131243.0], [99.8, 135033.0], [99.9, 141384.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 64758.0, "series": [{"data": [[0.0, 36146.0], [141600.0, 10.0], [148000.0, 1.0], [139300.0, 1.0], [66700.0, 46.0], [73100.0, 11.0], [79500.0, 1.0], [85900.0, 4.0], [82700.0, 1.0], [95500.0, 1.0], [101900.0, 5.0], [105100.0, 1.0], [124300.0, 2.0], [127500.0, 1.0], [130700.0, 1.0], [100.0, 23628.0], [34500.0, 1.0], [32900.0, 14.0], [134700.0, 2.0], [141100.0, 10.0], [147500.0, 1.0], [39300.0, 1.0], [40900.0, 1.0], [42500.0, 4.0], [44100.0, 1.0], [179500.0, 1.0], [45700.0, 2.0], [48900.0, 40.0], [47300.0, 2.0], [200.0, 17777.0], [52100.0, 7.0], [55300.0, 40.0], [56900.0, 28.0], [58500.0, 8.0], [61700.0, 4.0], [63300.0, 1.0], [64900.0, 6.0], [69000.0, 71.0], [65800.0, 3.0], [72200.0, 5.0], [300.0, 16337.0], [78600.0, 1.0], [81800.0, 3.0], [85000.0, 2.0], [88200.0, 2.0], [400.0, 64758.0], [104200.0, 1.0], [107400.0, 1.0], [120200.0, 1.0], [500.0, 25790.0], [129800.0, 11.0], [600.0, 15000.0], [700.0, 16688.0], [800.0, 10644.0], [900.0, 4985.0], [1000.0, 1921.0], [1100.0, 1402.0], [1200.0, 533.0], [1300.0, 246.0], [1400.0, 215.0], [1500.0, 91.0], [1600.0, 87.0], [1700.0, 123.0], [1800.0, 132.0], [1900.0, 82.0], [2000.0, 184.0], [2100.0, 149.0], [136500.0, 8.0], [2200.0, 147.0], [2300.0, 32.0], [142900.0, 1.0], [2400.0, 26.0], [2500.0, 57.0], [2600.0, 133.0], [2800.0, 148.0], [2700.0, 67.0], [2900.0, 42.0], [3000.0, 71.0], [3100.0, 58.0], [3200.0, 46.0], [3300.0, 20.0], [3400.0, 74.0], [3500.0, 119.0], [3600.0, 157.0], [3700.0, 67.0], [3800.0, 115.0], [3900.0, 43.0], [4000.0, 115.0], [4200.0, 40.0], [68100.0, 6.0], [71300.0, 7.0], [4600.0, 317.0], [4400.0, 163.0], [4800.0, 84.0], [74500.0, 3.0], [77700.0, 6.0], [5000.0, 97.0], [80900.0, 1.0], [5200.0, 422.0], [84100.0, 7.0], [5600.0, 15.0], [5400.0, 239.0], [87300.0, 1.0], [5800.0, 286.0], [6000.0, 250.0], [6200.0, 178.0], [100100.0, 222.0], [6400.0, 55.0], [6600.0, 99.0], [6800.0, 518.0], [7000.0, 357.0], [7200.0, 252.0], [7400.0, 777.0], [116100.0, 1.0], [7600.0, 202.0], [7800.0, 293.0], [8000.0, 92.0], [128900.0, 1.0], [8400.0, 121.0], [134200.0, 2.0], [8800.0, 126.0], [9200.0, 297.0], [140600.0, 14.0], [9600.0, 64.0], [10000.0, 250.0], [159800.0, 11.0], [10400.0, 45.0], [10800.0, 101.0], [11200.0, 51.0], [11600.0, 64.0], [12000.0, 137.0], [12400.0, 17.0], [13200.0, 37.0], [12800.0, 15.0], [13600.0, 15.0], [14000.0, 8.0], [14400.0, 9.0], [14800.0, 32.0], [15200.0, 8.0], [15600.0, 4.0], [16000.0, 52.0], [16800.0, 14.0], [17600.0, 23.0], [18400.0, 9.0], [19200.0, 5.0], [20000.0, 1.0], [20800.0, 6.0], [21600.0, 30.0], [22400.0, 1.0], [23200.0, 25.0], [24000.0, 5.0], [24800.0, 1.0], [26400.0, 5.0], [27200.0, 11.0], [28000.0, 8.0], [29600.0, 1.0], [30400.0, 1.0], [31200.0, 2.0], [32000.0, 3.0], [33600.0, 1.0], [36800.0, 16.0], [35200.0, 1.0], [38400.0, 1.0], [40000.0, 22.0], [41600.0, 2.0], [43200.0, 15.0], [44800.0, 2.0], [46400.0, 4.0], [48000.0, 9.0], [49600.0, 3.0], [51200.0, 2.0], [52800.0, 1.0], [56000.0, 7.0], [57600.0, 6.0], [59200.0, 1.0], [62400.0, 1.0], [64000.0, 8.0], [67200.0, 2.0], [73600.0, 6.0], [76800.0, 1.0], [80000.0, 3.0], [83200.0, 5.0], [92800.0, 1.0], [96000.0, 3.0], [99200.0, 3.0], [121600.0, 1.0], [124800.0, 1.0], [140800.0, 1.0], [147200.0, 6.0], [160000.0, 3.0], [132100.0, 2.0], [67100.0, 1.0], [73500.0, 4.0], [79900.0, 5.0], [83100.0, 4.0], [89500.0, 3.0], [99100.0, 1.0], [118300.0, 1.0], [115100.0, 2.0], [127900.0, 11.0], [149000.0, 1.0], [34700.0, 1.0], [33100.0, 16.0], [140300.0, 1.0], [146700.0, 1.0], [37900.0, 1.0], [42700.0, 4.0], [41100.0, 5.0], [44300.0, 2.0], [45900.0, 4.0], [49100.0, 3.0], [50700.0, 7.0], [52300.0, 7.0], [210700.0, 1.0], [53900.0, 6.0], [55500.0, 2.0], [58700.0, 2.0], [60300.0, 1.0], [61900.0, 1.0], [65100.0, 6.0], [66200.0, 3.0], [69400.0, 5.0], [72600.0, 4.0], [75800.0, 1.0], [85400.0, 1.0], [82200.0, 1.0], [98200.0, 4.0], [95000.0, 4.0], [101400.0, 53.0], [120600.0, 1.0], [123800.0, 1.0], [127000.0, 2.0], [130200.0, 39.0], [138000.0, 10.0], [131600.0, 2.0], [135700.0, 3.0], [154900.0, 1.0], [71700.0, 5.0], [74900.0, 23.0], [78100.0, 1.0], [84500.0, 65.0], [87700.0, 2.0], [90900.0, 2.0], [100500.0, 44.0], [122900.0, 1.0], [126100.0, 3.0], [129300.0, 12.0], [133400.0, 54.0], [159000.0, 1.0], [16900.0, 20.0], [17700.0, 15.0], [18500.0, 15.0], [19300.0, 2.0], [20100.0, 8.0], [20900.0, 1.0], [22500.0, 4.0], [21700.0, 10.0], [23300.0, 5.0], [24100.0, 1.0], [24900.0, 4.0], [25700.0, 4.0], [27300.0, 1.0], [28900.0, 4.0], [29700.0, 3.0], [31300.0, 29.0], [32100.0, 43.0], [131100.0, 20.0], [33800.0, 1.0], [37000.0, 3.0], [38600.0, 1.0], [40200.0, 5.0], [41800.0, 22.0], [45000.0, 3.0], [46600.0, 4.0], [49800.0, 2.0], [51400.0, 2.0], [61000.0, 1.0], [64200.0, 3.0], [67600.0, 4.0], [70800.0, 3.0], [80400.0, 4.0], [86800.0, 2.0], [106000.0, 1.0], [143200.0, 5.0], [140900.0, 4.0], [160100.0, 3.0], [67500.0, 3.0], [70700.0, 2.0], [73900.0, 3.0], [77100.0, 1.0], [83500.0, 4.0], [86700.0, 2.0], [109100.0, 1.0], [128300.0, 11.0], [132200.0, 10.0], [145000.0, 3.0], [234600.0, 1.0], [136300.0, 13.0], [33300.0, 29.0], [34900.0, 2.0], [36500.0, 3.0], [38100.0, 14.0], [44500.0, 1.0], [49300.0, 13.0], [52500.0, 4.0], [54100.0, 1.0], [57300.0, 1.0], [58900.0, 1.0], [60500.0, 2.0], [62100.0, 1.0], [65300.0, 2.0], [63700.0, 12.0], [66600.0, 19.0], [73000.0, 29.0], [69800.0, 23.0], [76200.0, 1.0], [79400.0, 106.0], [85800.0, 1.0], [82600.0, 3.0], [92200.0, 2.0], [101800.0, 4.0], [98600.0, 1.0], [111400.0, 2.0], [130600.0, 11.0], [146800.0, 2.0], [210800.0, 1.0], [138100.0, 53.0], [144500.0, 1.0], [150900.0, 1.0], [68900.0, 6.0], [65700.0, 4.0], [72100.0, 2.0], [78500.0, 2.0], [81700.0, 2.0], [84900.0, 2.0], [88100.0, 2.0], [91300.0, 1.0], [100900.0, 1.0], [104100.0, 2.0], [123300.0, 1.0], [129700.0, 1.0], [8500.0, 5.0], [8900.0, 183.0], [142200.0, 7.0], [9700.0, 106.0], [9300.0, 55.0], [155000.0, 2.0], [10100.0, 332.0], [161400.0, 4.0], [10500.0, 87.0], [10900.0, 155.0], [11700.0, 93.0], [11300.0, 18.0], [12100.0, 174.0], [12500.0, 6.0], [13300.0, 57.0], [12900.0, 12.0], [13700.0, 5.0], [14100.0, 41.0], [14500.0, 1.0], [14900.0, 28.0], [15300.0, 56.0], [15700.0, 18.0], [16100.0, 44.0], [17000.0, 4.0], [17800.0, 63.0], [18600.0, 1.0], [19400.0, 1.0], [20200.0, 2.0], [21000.0, 3.0], [21800.0, 11.0], [23400.0, 32.0], [22600.0, 1.0], [24200.0, 8.0], [25000.0, 12.0], [27400.0, 11.0], [28200.0, 6.0], [29000.0, 3.0], [31400.0, 1.0], [32200.0, 58.0], [34000.0, 7.0], [139900.0, 1.0], [146300.0, 1.0], [38800.0, 5.0], [37200.0, 2.0], [40400.0, 4.0], [159100.0, 1.0], [42000.0, 7.0], [43600.0, 1.0], [45200.0, 19.0], [50000.0, 3.0], [51600.0, 7.0], [54800.0, 3.0], [56400.0, 2.0], [58000.0, 2.0], [61200.0, 1.0], [62800.0, 2.0], [64400.0, 1.0], [68000.0, 2.0], [77600.0, 7.0], [74400.0, 9.0], [80800.0, 3.0], [84000.0, 2.0], [87200.0, 4.0], [96800.0, 1.0], [100000.0, 40.0], [119200.0, 1.0], [128800.0, 6.0], [136000.0, 1.0], [142400.0, 5.0], [148800.0, 5.0], [161600.0, 4.0], [152900.0, 1.0], [67900.0, 15.0], [74300.0, 2.0], [77500.0, 1.0], [80700.0, 14.0], [83900.0, 5.0], [87100.0, 1.0], [99900.0, 1.0], [122300.0, 1.0], [125500.0, 1.0], [128700.0, 43.0], [144200.0, 9.0], [150600.0, 1.0], [201800.0, 1.0], [33500.0, 8.0], [35100.0, 9.0], [141900.0, 7.0], [161100.0, 1.0], [39900.0, 2.0], [41500.0, 5.0], [44700.0, 1.0], [46300.0, 6.0], [47900.0, 9.0], [51100.0, 12.0], [52700.0, 1.0], [54300.0, 24.0], [57500.0, 2.0], [60700.0, 2.0], [62300.0, 1.0], [63900.0, 4.0], [67000.0, 1.0], [73400.0, 2.0], [70200.0, 4.0], [76600.0, 40.0], [79800.0, 3.0], [83000.0, 21.0], [89400.0, 5.0], [95800.0, 3.0], [99000.0, 1.0], [131000.0, 3.0], [127800.0, 14.0], [143700.0, 1.0], [69300.0, 4.0], [66100.0, 3.0], [72500.0, 5.0], [75700.0, 2.0], [78900.0, 5.0], [82100.0, 2.0], [88500.0, 2.0], [91700.0, 1.0], [101300.0, 1.0], [104500.0, 2.0], [117300.0, 2.0], [130100.0, 1.0], [135000.0, 24.0], [141400.0, 37.0], [17100.0, 15.0], [17900.0, 8.0], [18700.0, 10.0], [20300.0, 3.0], [19500.0, 2.0], [21100.0, 5.0], [21900.0, 18.0], [22700.0, 2.0], [23500.0, 6.0], [24300.0, 2.0], [25100.0, 3.0], [25900.0, 7.0], [26700.0, 2.0], [27500.0, 20.0], [28300.0, 5.0], [29100.0, 2.0], [29900.0, 2.0], [30700.0, 11.0], [31500.0, 6.0], [32300.0, 1.0], [35800.0, 2.0], [37400.0, 1.0], [39000.0, 12.0], [40600.0, 5.0], [42200.0, 10.0], [43800.0, 4.0], [45400.0, 4.0], [48600.0, 1.0], [50200.0, 27.0], [55000.0, 1.0], [61400.0, 4.0], [59800.0, 5.0], [63000.0, 1.0], [64600.0, 12.0], [68400.0, 2.0], [71600.0, 1.0], [74800.0, 1.0], [84400.0, 1.0], [87600.0, 2.0], [94000.0, 2.0], [90800.0, 4.0], [97200.0, 3.0], [100400.0, 32.0], [129200.0, 13.0], [132000.0, 11.0], [208800.0, 1.0], [136100.0, 2.0], [142500.0, 10.0], [148900.0, 2.0], [161700.0, 2.0], [68300.0, 3.0], [71500.0, 1.0], [74700.0, 4.0], [77900.0, 5.0], [81100.0, 2.0], [87500.0, 3.0], [93900.0, 2.0], [97100.0, 6.0], [100300.0, 17.0], [133800.0, 1.0], [197800.0, 1.0], [137900.0, 4.0], [33700.0, 8.0], [131500.0, 49.0], [144300.0, 11.0], [35300.0, 2.0], [36900.0, 6.0], [40100.0, 3.0], [41700.0, 32.0], [43300.0, 13.0], [44900.0, 3.0], [46500.0, 1.0], [48100.0, 32.0], [49700.0, 1.0], [54500.0, 24.0], [57700.0, 1.0], [59300.0, 1.0], [60900.0, 3.0], [62500.0, 7.0], [64100.0, 5.0], [67400.0, 3.0], [70600.0, 8.0], [80200.0, 1.0], [83400.0, 2.0], [86600.0, 2.0], [93000.0, 3.0], [96200.0, 1.0], [128200.0, 42.0], [142000.0, 4.0], [133300.0, 20.0], [4300.0, 215.0], [4100.0, 12.0], [66500.0, 5.0], [4500.0, 267.0], [72900.0, 2.0], [69700.0, 24.0], [4700.0, 310.0], [5100.0, 268.0], [4900.0, 100.0], [79300.0, 11.0], [5300.0, 63.0], [82500.0, 1.0], [85700.0, 1.0], [5500.0, 113.0], [5700.0, 54.0], [5900.0, 74.0], [6100.0, 597.0], [6300.0, 85.0], [101700.0, 8.0], [6500.0, 63.0], [6900.0, 219.0], [6700.0, 158.0], [7100.0, 735.0], [7300.0, 89.0], [7500.0, 54.0], [7900.0, 510.0], [7700.0, 332.0], [8100.0, 74.0], [130500.0, 4.0], [127300.0, 20.0], [8600.0, 195.0], [8200.0, 44.0], [137400.0, 2.0], [9000.0, 139.0], [9400.0, 332.0], [10200.0, 73.0], [9800.0, 116.0], [10600.0, 8.0], [11000.0, 20.0], [11400.0, 19.0], [12200.0, 46.0], [11800.0, 63.0], [12600.0, 16.0], [13000.0, 14.0], [13800.0, 21.0], [13400.0, 21.0], [214200.0, 1.0], [14200.0, 207.0], [14600.0, 1.0], [15000.0, 3.0], [15400.0, 2.0], [15800.0, 12.0], [16200.0, 15.0], [16400.0, 6.0], [17200.0, 2.0], [18000.0, 62.0], [18800.0, 19.0], [19600.0, 7.0], [20400.0, 8.0], [22000.0, 5.0], [22800.0, 8.0], [24400.0, 9.0], [25200.0, 11.0], [26000.0, 1.0], [26800.0, 3.0], [27600.0, 1.0], [28400.0, 7.0], [29200.0, 1.0], [30800.0, 34.0], [31600.0, 2.0], [34400.0, 17.0], [135100.0, 1.0], [32800.0, 18.0], [141500.0, 2.0], [40800.0, 9.0], [42400.0, 1.0], [44000.0, 10.0], [48800.0, 37.0], [47200.0, 3.0], [50400.0, 2.0], [52000.0, 15.0], [55200.0, 25.0], [56800.0, 1.0], [58400.0, 6.0], [60000.0, 20.0], [61600.0, 4.0], [63200.0, 26.0], [64800.0, 14.0], [68800.0, 3.0], [72000.0, 3.0], [75200.0, 2.0], [84800.0, 11.0], [91200.0, 5.0], [100800.0, 6.0], [104000.0, 1.0], [129600.0, 17.0], [131200.0, 53.0], [135300.0, 7.0], [141700.0, 5.0], [68700.0, 1.0], [75100.0, 30.0], [81500.0, 1.0], [78300.0, 1.0], [91100.0, 1.0], [94300.0, 2.0], [100700.0, 48.0], [103900.0, 5.0], [129500.0, 11.0], [33900.0, 9.0], [35500.0, 1.0], [37100.0, 1.0], [40300.0, 6.0], [156300.0, 1.0], [41900.0, 23.0], [45100.0, 28.0], [48300.0, 7.0], [53100.0, 3.0], [51500.0, 12.0], [54700.0, 2.0], [56300.0, 3.0], [59500.0, 2.0], [61100.0, 1.0], [62700.0, 4.0], [64300.0, 14.0], [67800.0, 3.0], [71000.0, 3.0], [74200.0, 2.0], [77400.0, 8.0], [80600.0, 4.0], [83800.0, 4.0], [99800.0, 5.0], [128600.0, 4.0], [134800.0, 18.0], [141200.0, 4.0], [138900.0, 1.0], [132500.0, 37.0], [151700.0, 1.0], [66900.0, 4.0], [70100.0, 1.0], [76500.0, 117.0], [79700.0, 4.0], [82900.0, 18.0], [86100.0, 1.0], [89300.0, 2.0], [95700.0, 1.0], [108500.0, 7.0], [114900.0, 6.0], [130900.0, 8.0], [136600.0, 22.0], [213400.0, 1.0], [16500.0, 5.0], [18100.0, 3.0], [18900.0, 24.0], [19700.0, 13.0], [20500.0, 21.0], [21300.0, 4.0], [22100.0, 2.0], [22900.0, 54.0], [23700.0, 2.0], [25300.0, 2.0], [26100.0, 2.0], [26900.0, 12.0], [27700.0, 1.0], [28500.0, 8.0], [29300.0, 2.0], [30900.0, 1.0], [31700.0, 3.0], [33000.0, 58.0], [134300.0, 3.0], [36200.0, 14.0], [140700.0, 13.0], [147100.0, 5.0], [37800.0, 3.0], [39400.0, 1.0], [42600.0, 15.0], [41000.0, 4.0], [44200.0, 2.0], [45800.0, 2.0], [49000.0, 1.0], [47400.0, 10.0], [50600.0, 3.0], [57000.0, 7.0], [63400.0, 1.0], [61800.0, 1.0], [65000.0, 9.0], [69200.0, 1.0], [66000.0, 6.0], [72400.0, 2.0], [78800.0, 5.0], [91600.0, 3.0], [114000.0, 1.0], [150500.0, 2.0], [65900.0, 2.0], [69100.0, 62.0], [72300.0, 5.0], [78700.0, 6.0], [81900.0, 3.0], [85100.0, 2.0], [101100.0, 24.0], [107500.0, 1.0], [135400.0, 9.0], [141800.0, 4.0], [34100.0, 1.0], [35700.0, 1.0], [38900.0, 23.0], [37300.0, 6.0], [40500.0, 2.0], [42100.0, 2.0], [43700.0, 3.0], [45300.0, 2.0], [46900.0, 2.0], [48500.0, 1.0], [50100.0, 9.0], [51700.0, 9.0], [53300.0, 2.0], [59700.0, 3.0], [62900.0, 5.0], [64500.0, 1.0], [68200.0, 6.0], [71400.0, 39.0], [74600.0, 5.0], [81000.0, 5.0], [97000.0, 1.0], [100200.0, 11.0], [103400.0, 2.0], [143600.0, 1.0], [141300.0, 8.0], [211700.0, 1.0], [67300.0, 4.0], [73700.0, 2.0], [76900.0, 2.0], [80100.0, 1.0], [83300.0, 5.0], [96100.0, 1.0], [99300.0, 1.0], [105700.0, 1.0], [121700.0, 4.0], [128100.0, 17.0], [8700.0, 52.0], [8300.0, 38.0], [9100.0, 98.0], [9500.0, 82.0], [9900.0, 199.0], [10300.0, 131.0], [10700.0, 8.0], [11100.0, 5.0], [11500.0, 57.0], [11900.0, 20.0], [12700.0, 63.0], [12300.0, 350.0], [13100.0, 14.0], [13500.0, 3.0], [13900.0, 29.0], [14300.0, 16.0], [14700.0, 12.0], [15100.0, 9.0], [15500.0, 6.0], [16300.0, 3.0], [17400.0, 5.0], [16600.0, 23.0], [18200.0, 3.0], [19000.0, 17.0], [19800.0, 20.0], [20600.0, 9.0], [21400.0, 25.0], [23000.0, 3.0], [23800.0, 6.0], [24600.0, 1.0], [25400.0, 2.0], [26200.0, 1.0], [27000.0, 10.0], [27800.0, 9.0], [28600.0, 45.0], [30200.0, 1.0], [31000.0, 22.0], [32600.0, 9.0], [31800.0, 6.0], [33200.0, 13.0], [36400.0, 11.0], [149500.0, 6.0], [38000.0, 3.0], [42800.0, 1.0], [41200.0, 1.0], [44400.0, 3.0], [46000.0, 1.0], [47600.0, 6.0], [49200.0, 1.0], [52400.0, 2.0], [55600.0, 1.0], [58800.0, 6.0], [62000.0, 2.0], [65200.0, 4.0], [63600.0, 1.0], [66400.0, 3.0], [69600.0, 3.0], [72800.0, 20.0], [76000.0, 1.0], [92000.0, 10.0], [101600.0, 16.0], [98400.0, 1.0], [104800.0, 9.0], [130400.0, 5.0], [139200.0, 1.0], [158400.0, 1.0], [143300.0, 13.0], [69500.0, 2.0], [66300.0, 2.0], [75900.0, 19.0], [79100.0, 21.0], [85500.0, 1.0], [88700.0, 1.0], [91900.0, 4.0], [101500.0, 105.0], [104700.0, 2.0], [111100.0, 8.0], [120700.0, 2.0], [130300.0, 51.0], [141000.0, 6.0], [147400.0, 1.0], [160200.0, 3.0], [132300.0, 10.0], [145100.0, 9.0], [35900.0, 8.0], [37500.0, 18.0], [151500.0, 1.0], [39100.0, 1.0], [40700.0, 17.0], [42300.0, 4.0], [43900.0, 4.0], [45500.0, 3.0], [47100.0, 19.0], [48700.0, 1.0], [50300.0, 4.0], [51900.0, 9.0], [55100.0, 1.0], [53500.0, 4.0], [56700.0, 3.0], [59900.0, 3.0], [61500.0, 3.0], [63100.0, 101.0], [64700.0, 1.0], [68600.0, 3.0], [71800.0, 6.0], [75000.0, 34.0], [78200.0, 1.0], [84600.0, 5.0], [91000.0, 6.0], [97400.0, 1.0], [100600.0, 252.0], [116600.0, 7.0], [129400.0, 54.0], [136400.0, 25.0], [142800.0, 10.0], [155600.0, 1.0], [146900.0, 1.0], [74100.0, 1.0], [80500.0, 2.0], [90100.0, 3.0], [93300.0, 2.0], [102900.0, 3.0], [128500.0, 4.0], [138200.0, 18.0], [151000.0, 1.0], [16700.0, 34.0], [17500.0, 49.0], [18300.0, 4.0], [19100.0, 36.0], [19900.0, 4.0], [21500.0, 40.0], [20700.0, 6.0], [22300.0, 2.0], [23100.0, 1.0], [23900.0, 12.0], [24700.0, 3.0], [25500.0, 3.0], [26300.0, 1.0], [27100.0, 1.0], [28700.0, 8.0], [31100.0, 1.0], [31900.0, 3.0], [32700.0, 14.0], [36600.0, 2.0], [35000.0, 3.0], [142300.0, 5.0], [38200.0, 17.0], [161500.0, 9.0], [39800.0, 88.0], [41400.0, 6.0], [43000.0, 2.0], [46200.0, 5.0], [47800.0, 3.0], [49400.0, 18.0], [52600.0, 7.0], [54200.0, 1.0], [57400.0, 3.0], [59000.0, 1.0], [62200.0, 1.0], [63800.0, 5.0], [66800.0, 2.0], [73200.0, 11.0], [70000.0, 53.0], [76400.0, 48.0], [79600.0, 6.0], [82800.0, 2.0], [86000.0, 1.0], [95600.0, 3.0], [98800.0, 1.0], [130800.0, 1.0], [127600.0, 20.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 234600.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 205.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 159012.0, "series": [{"data": [[0.0, 159012.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 77061.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 23822.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 205.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 496.1595959595958, "minX": 1.6828785E12, "maxY": 3000.0, "series": [{"data": [[1.68287886E12, 496.1595959595958], [1.68287868E12, 3000.0], [1.6828785E12, 3000.0], [1.6828788E12, 2956.4778551492786], [1.68287862E12, 3000.0], [1.68287874E12, 3000.0], [1.68287856E12, 3000.0]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68287886E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 225.25, "minX": 1.0, "maxY": 211790.0, "series": [{"data": [[2.0, 82634.0], [3.0, 77444.0], [5.0, 82293.0], [6.0, 79704.0], [8.0, 77443.0], [9.0, 84145.0], [10.0, 78268.0], [12.0, 84144.0], [14.0, 81922.0], [15.0, 77441.0], [16.0, 80429.0], [17.0, 80428.0], [18.0, 77431.0], [19.0, 77430.0], [20.0, 79686.0], [21.0, 80418.0], [22.0, 84126.0], [23.0, 77418.0], [24.0, 76652.0], [25.0, 83349.0], [27.0, 76622.0], [28.0, 76621.5], [29.0, 76622.0], [32.0, 76621.66666666667], [34.0, 76622.0], [36.0, 77750.5], [38.0, 77033.5], [41.0, 76620.66666666667], [42.0, 76621.0], [45.0, 76619.0], [44.0, 76620.0], [47.0, 76618.0], [46.0, 76618.0], [51.0, 76615.0], [50.0, 77368.66666666667], [53.0, 76614.0], [52.0, 76613.0], [55.0, 76613.0], [54.0, 83317.0], [57.0, 76612.0], [56.0, 76613.0], [59.0, 76613.0], [58.0, 76614.0], [61.0, 79602.0], [60.0, 83314.0], [63.0, 76607.0], [62.0, 76611.0], [67.0, 76605.0], [66.0, 79598.0], [65.0, 83310.0], [64.0, 76606.0], [71.0, 76602.0], [70.0, 76604.0], [69.0, 76602.0], [68.0, 76604.0], [74.0, 76596.0], [73.0, 79950.5], [79.0, 76596.0], [78.0, 76593.0], [77.0, 79581.66666666667], [83.0, 76591.0], [82.0, 76592.66666666667], [86.0, 76589.0], [85.0, 76591.0], [84.0, 76590.0], [89.0, 76588.0], [88.0, 79941.0], [94.0, 76587.0], [93.0, 76587.0], [92.0, 76586.66666666667], [99.0, 76584.0], [97.0, 76586.0], [96.0, 83287.5], [102.0, 76583.0], [101.0, 76583.66666666667], [107.0, 76580.0], [106.0, 76581.0], [105.0, 76582.0], [104.0, 76583.5], [111.0, 76577.0], [110.0, 76579.0], [109.0, 76580.0], [135.0, 76555.0], [134.0, 76553.0], [133.0, 76555.0], [132.0, 76556.0], [131.0, 77327.59999999999], [129.0, 76575.0], [128.0, 76575.66666666667], [143.0, 76549.0], [142.0, 76548.0], [141.0, 76548.0], [139.0, 76548.0], [138.0, 76550.0], [136.0, 76551.0], [151.0, 76544.0], [150.0, 76544.0], [148.0, 76544.0], [147.0, 76546.0], [146.0, 76547.0], [145.0, 76548.0], [144.0, 76548.0], [159.0, 76539.0], [158.0, 76541.33333333333], [157.0, 76540.0], [154.0, 76543.0], [153.0, 76543.0], [152.0, 76543.0], [166.0, 76531.0], [165.0, 76532.0], [164.0, 76533.0], [163.0, 76535.5], [161.0, 76534.0], [160.0, 76537.0], [175.0, 76524.0], [174.0, 76527.0], [173.0, 76528.0], [172.0, 76527.0], [171.0, 76526.0], [170.0, 76530.0], [169.0, 76530.0], [168.0, 76530.0], [183.0, 76521.0], [182.0, 76523.0], [180.0, 76523.5], [178.0, 76524.0], [177.0, 76525.5], [191.0, 76519.0], [189.0, 76521.0], [188.0, 76520.0], [187.0, 76521.0], [185.0, 76523.5], [199.0, 76491.0], [197.0, 76490.0], [196.0, 76518.0], [193.0, 76519.0], [192.0, 76518.0], [206.0, 76486.0], [205.0, 76482.0], [204.0, 76483.0], [203.0, 76484.0], [202.0, 76486.0], [201.0, 89440.0], [200.0, 76491.5], [215.0, 76478.5], [213.0, 76479.0], [212.0, 76479.0], [211.0, 89435.0], [210.0, 76483.0], [209.0, 76484.0], [208.0, 89436.0], [222.0, 76470.0], [220.0, 82949.0], [218.0, 76476.0], [217.0, 76477.5], [231.0, 76464.0], [230.0, 76468.0], [229.0, 89422.0], [228.0, 76468.5], [226.0, 76471.5], [225.0, 76470.0], [239.0, 76433.5], [237.0, 76442.0], [236.0, 76447.0], [235.0, 76449.0], [233.0, 76453.5], [247.0, 76430.0], [246.0, 76430.0], [244.0, 76431.0], [243.0, 76434.5], [242.0, 76433.0], [241.0, 76433.0], [254.0, 74425.0], [253.0, 74427.0], [252.0, 74426.0], [249.0, 76423.0], [248.0, 76425.0], [259.0, 74422.0], [270.0, 83040.0], [271.0, 72534.5], [269.0, 70088.0], [267.0, 83041.0], [265.0, 74986.0], [263.0, 79014.5], [261.0, 83588.0], [260.0, 83591.0], [258.0, 74424.5], [256.0, 80901.0], [286.0, 87444.0], [287.0, 70083.0], [284.0, 79095.33333333333], [282.0, 83037.0], [281.0, 72534.0], [279.0, 83960.0], [277.0, 74984.0], [276.0, 78721.66666666667], [275.0, 83039.0], [272.0, 83040.0], [301.0, 70078.0], [303.0, 83594.5], [300.0, 74975.0], [291.0, 74980.0], [290.0, 70082.0], [288.0, 70084.0], [299.0, 70078.0], [298.0, 70078.0], [297.0, 70081.0], [296.0, 70081.0], [295.0, 84598.5], [293.0, 70082.0], [292.0, 70083.0], [307.0, 76548.0], [317.0, 70068.0], [319.0, 70067.0], [316.0, 70068.0], [314.0, 99889.0], [312.0, 84980.5], [311.0, 70069.0], [308.0, 70070.0], [306.0, 83948.0], [304.0, 99894.0], [334.0, 70051.0], [332.0, 70051.0], [330.0, 70054.0], [329.0, 70055.0], [328.0, 70056.0], [325.0, 70056.0], [324.0, 83936.0], [323.0, 70819.0], [321.0, 98494.0], [350.0, 69121.5], [348.0, 69122.0], [347.0, 69121.0], [345.0, 70015.0], [343.0, 70048.25], [339.0, 70048.66666666667], [337.0, 70050.0], [336.0, 70049.0], [355.0, 69120.0], [366.0, 69116.5], [364.0, 69118.0], [363.0, 69118.0], [361.0, 69117.5], [359.0, 69117.0], [358.0, 69118.0], [356.0, 69120.0], [354.0, 69121.0], [352.0, 69121.0], [383.0, 69113.25], [379.0, 69113.5], [377.0, 69114.5], [375.0, 69114.0], [374.0, 69116.0], [373.0, 69115.0], [370.0, 69115.5], [369.0, 69116.5], [387.0, 69108.0], [399.0, 69104.0], [398.0, 69104.6], [393.0, 69106.0], [392.0, 69105.0], [391.0, 69105.0], [390.0, 69106.5], [388.0, 69107.0], [386.0, 69111.0], [385.0, 69112.0], [384.0, 69114.0], [414.0, 69094.0], [412.0, 69096.0], [410.0, 69099.4], [405.0, 69100.66666666667], [402.0, 69103.0], [401.0, 69103.0], [400.0, 69103.0], [430.0, 69079.5], [431.0, 69080.0], [428.0, 69081.0], [419.0, 69091.0], [418.0, 69090.0], [417.0, 69093.0], [416.0, 69094.0], [427.0, 69080.0], [426.0, 69080.0], [425.0, 69082.0], [424.0, 69082.0], [423.0, 69085.0], [421.0, 69089.0], [420.0, 69090.0], [446.0, 69060.0], [447.0, 69058.0], [445.0, 69061.0], [444.0, 69064.0], [443.0, 69063.0], [442.0, 69066.0], [441.0, 69071.0], [440.0, 69071.0], [439.0, 69073.2], [432.0, 69079.0], [434.0, 69075.0], [433.0, 69076.0], [462.0, 69035.0], [463.0, 69031.0], [461.0, 69038.5], [460.0, 69039.0], [459.0, 69040.0], [457.0, 69043.0], [456.0, 69044.0], [455.0, 69045.0], [450.0, 69055.0], [449.0, 69054.0], [454.0, 69051.0], [453.0, 69051.33333333333], [467.0, 69019.0], [479.0, 82698.0], [477.0, 78380.66666666667], [473.0, 69009.0], [472.0, 69009.0], [470.0, 69010.0], [469.0, 69013.0], [468.0, 69014.0], [466.0, 69027.0], [465.0, 69028.0], [464.0, 69030.0], [494.0, 69031.0], [493.0, 71092.33333333333], [490.0, 66776.0], [489.0, 84274.5], [487.0, 67904.0], [485.0, 67793.66666666667], [482.0, 101775.0], [481.0, 67532.0], [511.0, 67367.0], [507.0, 66768.0], [506.0, 67972.0], [505.0, 66768.5], [503.0, 101954.0], [502.0, 72323.0], [501.0, 67621.6], [496.0, 69397.5], [539.0, 72292.0], [532.0, 67955.0], [540.0, 68247.0], [529.0, 68250.0], [531.0, 68262.0], [530.0, 101938.0], [538.0, 69793.0], [537.0, 66743.0], [536.0, 66743.0], [519.0, 69752.0], [518.0, 84167.5], [516.0, 66764.0], [514.0, 66764.0], [513.0, 66765.0], [512.0, 68287.66666666667], [527.0, 66754.0], [526.0, 69748.0], [525.0, 66758.0], [524.0, 101941.0], [523.0, 69750.0], [522.0, 69811.0], [521.0, 84261.0], [535.0, 66746.0], [534.0, 69738.0], [533.0, 69806.0], [570.0, 74716.5], [562.0, 69775.0], [573.0, 70644.0], [575.0, 66710.0], [561.0, 84975.0], [571.0, 66711.0], [568.0, 84215.0], [551.0, 69505.5], [550.0, 70137.5], [548.0, 101915.0], [546.0, 101917.0], [545.0, 69724.0], [544.0, 67298.5], [559.0, 68218.5], [558.0, 72276.0], [556.0, 66723.0], [555.0, 91013.66666666667], [553.0, 69719.0], [566.0, 69769.0], [565.0, 85617.5], [563.0, 101718.0], [601.0, 101684.0], [606.0, 69731.0], [607.0, 101862.0], [592.0, 66699.0], [594.0, 69748.0], [593.0, 66700.0], [597.0, 88882.0], [595.0, 101691.0], [605.0, 107464.0], [604.0, 70088.0], [602.0, 101683.0], [600.0, 101686.0], [583.0, 71338.0], [582.0, 66709.0], [581.0, 94821.25], [579.0, 69762.0], [578.0, 68969.0], [577.0, 67912.0], [591.0, 72309.0], [590.0, 69506.5], [588.0, 66704.0], [586.0, 101513.0], [585.0, 69698.0], [584.0, 68964.0], [599.0, 69742.0], [598.0, 72240.0], [633.0, 87232.0], [637.0, 100814.0], [638.0, 100808.0], [625.0, 101656.0], [624.0, 101844.0], [627.0, 105176.0], [626.0, 72927.0], [636.0, 87249.0], [635.0, 73523.0], [634.0, 87506.0], [632.0, 87233.5], [615.0, 68196.5], [613.0, 101670.0], [612.0, 68199.5], [610.0, 69728.0], [609.0, 66676.0], [608.0, 69730.0], [623.0, 69652.0], [622.0, 84820.5], [620.0, 69715.0], [619.0, 69658.0], [618.0, 71419.0], [617.0, 66666.0], [616.0, 66668.0], [630.0, 69478.0], [629.0, 104154.0], [659.0, 100783.0], [668.0, 101499.0], [656.0, 100785.0], [667.0, 101499.0], [665.0, 101500.0], [664.0, 101500.0], [654.0, 100787.0], [646.0, 100933.2], [642.0, 101029.33333333333], [653.0, 100787.0], [652.0, 100908.16666666666], [663.0, 100780.5], [661.0, 100783.0], [660.0, 100784.0], [658.0, 100784.0], [657.0, 101145.5], [691.0, 101471.0], [701.0, 90836.0], [702.0, 61626.0], [690.0, 101484.0], [689.0, 101488.0], [700.0, 91027.0], [699.0, 91032.0], [698.0, 80506.33333333333], [674.0, 101494.0], [672.0, 101498.25], [687.0, 101489.0], [686.0, 101490.0], [684.0, 101490.0], [682.0, 101491.0], [681.0, 101492.0], [680.0, 101492.0], [695.0, 76309.5], [694.0, 90843.0], [693.0, 91218.0], [728.0, 54596.0], [732.0, 66109.0], [734.0, 79176.0], [722.0, 73050.0], [720.0, 91901.5], [731.0, 66609.0], [730.0, 57017.0], [729.0, 54596.0], [718.0, 64873.0], [706.0, 64887.0], [704.0, 75224.5], [708.0, 64885.0], [707.0, 64886.0], [711.0, 64885.0], [710.0, 64885.0], [717.0, 74212.0], [716.0, 64878.0], [715.0, 64881.0], [714.0, 64882.0], [713.0, 74219.0], [712.0, 64884.0], [727.0, 54596.0], [726.0, 54597.0], [724.0, 90878.0], [723.0, 90882.0], [763.0, 63165.5], [756.0, 82962.0], [766.0, 63165.333333333336], [753.0, 82779.0], [752.0, 68376.0], [762.0, 63167.0], [761.0, 63167.0], [751.0, 67881.5], [736.0, 72640.5], [739.0, 84489.0], [738.0, 79169.5], [741.0, 57040.0], [740.0, 63237.0], [743.0, 83457.0], [742.0, 83466.0], [749.0, 53580.0], [748.0, 53093.0], [746.0, 68369.0], [745.0, 68379.0], [759.0, 63168.0], [758.0, 86653.0], [757.0, 83144.0], [755.0, 83151.0], [754.0, 53574.0], [792.0, 47129.5], [786.0, 84881.5], [796.0, 47125.0], [795.0, 47125.5], [793.0, 47127.0], [783.0, 84882.0], [768.0, 75197.0], [771.0, 79194.0], [769.0, 79191.0], [774.0, 79178.0], [773.0, 79178.0], [782.0, 87527.0], [781.0, 84883.0], [779.0, 84884.0], [777.0, 78902.0], [776.0, 78902.0], [790.0, 90155.0], [789.0, 84868.0], [788.0, 87523.0], [784.0, 84882.0], [819.0, 73062.0], [830.0, 73056.0], [831.0, 73057.0], [817.0, 73066.0], [816.0, 72883.0], [829.0, 73058.5], [826.0, 73058.0], [824.0, 73058.5], [806.0, 72887.0], [805.0, 72887.0], [804.0, 72887.66666666667], [802.0, 72698.0], [800.0, 72890.0], [814.0, 73068.0], [812.0, 72885.0], [810.0, 72884.5], [808.0, 72886.0], [822.0, 73060.0], [821.0, 73061.0], [820.0, 73062.5], [858.0, 48176.0], [852.0, 56149.333333333336], [861.0, 44061.0], [862.0, 48174.0], [849.0, 48183.0], [848.0, 39955.0], [859.0, 48176.0], [856.0, 48178.0], [839.0, 73029.0], [838.0, 73031.0], [837.0, 73052.0], [836.0, 73052.0], [835.0, 73052.0], [834.0, 73055.0], [833.0, 72872.0], [832.0, 73056.0], [847.0, 50528.0], [845.0, 48183.5], [843.0, 48183.0], [842.0, 72550.0], [841.0, 72551.0], [840.0, 72556.0], [855.0, 48178.0], [854.0, 50774.0], [853.0, 50775.0], [889.0, 71872.0], [883.0, 48158.0], [892.0, 48135.0], [893.0, 47199.0], [882.0, 48158.5], [881.0, 75706.0], [891.0, 56025.5], [888.0, 48154.0], [871.0, 48171.0], [870.0, 49469.0], [868.0, 49470.0], [866.0, 48172.0], [864.0, 48173.0], [879.0, 50758.0], [878.0, 75712.0], [877.0, 48162.5], [876.0, 72070.0], [874.0, 71885.0], [873.0, 48166.0], [872.0, 48170.0], [887.0, 71876.0], [886.0, 60018.0], [885.0, 74671.0], [923.0, 72678.0], [914.0, 59459.5], [925.0, 38163.0], [926.0, 41511.0], [912.0, 47189.0], [924.0, 70653.0], [920.0, 86038.0], [903.0, 69860.0], [899.0, 59518.0], [896.0, 50193.333333333336], [911.0, 44026.0], [910.0, 74740.0], [909.0, 41521.0], [908.0, 41521.0], [907.0, 70725.0], [906.0, 47196.0], [905.0, 51562.5], [919.0, 63969.5], [918.0, 73702.0], [916.0, 64805.5], [952.0, 79904.0], [958.0, 71001.5], [959.0, 47136.0], [944.0, 40626.0], [947.0, 65363.5], [945.0, 80715.0], [956.0, 80703.0], [954.0, 80703.0], [953.0, 70610.0], [943.0, 47158.0], [928.0, 47181.0], [930.0, 80744.0], [929.0, 40655.0], [933.0, 80739.0], [932.0, 53099.333333333336], [935.0, 70639.0], [934.0, 47175.0], [942.0, 59943.666666666664], [939.0, 38142.0], [938.0, 79928.0], [937.0, 47168.0], [936.0, 44003.0], [951.0, 211790.0], [950.0, 47148.0], [949.0, 45441.0], [948.0, 70620.0], [984.0, 84966.0], [988.0, 66907.0], [991.0, 65024.0], [979.0, 66707.0], [977.0, 68875.0], [981.0, 84970.0], [980.0, 69587.0], [990.0, 66011.0], [989.0, 64556.0], [987.0, 66911.0], [986.0, 210761.0], [985.0, 210800.0], [975.0, 85966.0], [960.0, 70605.0], [962.0, 80698.0], [961.0, 56011.0], [964.0, 43965.0], [963.0, 70602.0], [967.0, 64745.0], [965.0, 85983.0], [974.0, 79873.0], [973.0, 80677.0], [972.0, 43949.0], [971.0, 64871.0], [970.0, 71025.0], [969.0, 80684.0], [968.0, 41451.0], [983.0, 67373.0], [982.0, 67375.0], [1021.0, 62728.0], [1022.0, 62153.0], [1020.0, 62729.0], [1019.0, 63157.0], [1016.0, 63128.5], [999.0, 63159.5], [996.0, 63737.0], [995.0, 63739.0], [994.0, 64017.0], [993.0, 64015.0], [992.0, 65021.0], [1015.0, 63128.0], [1011.0, 63138.0], [1010.0, 63139.333333333336], [1007.0, 63140.0], [1006.0, 63150.0], [1005.0, 63149.5], [1004.0, 63150.0], [1003.0, 63150.0], [1001.0, 63158.0], [1000.0, 63159.0], [1078.0, 63137.25], [1082.0, 63124.0], [1056.0, 100505.0], [1062.0, 100486.33333333333], [1064.0, 100418.0], [1076.0, 63139.0], [1054.0, 100507.0], [1026.0, 100518.0], [1024.0, 100536.0], [1028.0, 100515.0], [1052.0, 100508.0], [1050.0, 100506.5], [1048.0, 100505.0], [1044.0, 100508.625], [1066.0, 76091.0], [1092.0, 63121.0], [1138.0, 63204.5], [1144.0, 63203.666666666664], [1146.0, 63204.333333333336], [1120.0, 62358.0], [1090.0, 63122.0], [1118.0, 63369.0], [1116.0, 197844.0], [1114.0, 65383.0], [1112.0, 61733.0], [1110.0, 69065.0], [1108.0, 63116.4], [1132.0, 63207.0], [1212.0, 63984.0], [1184.0, 93052.0], [1186.0, 92043.0], [1188.0, 91034.0], [1190.0, 59989.0], [1214.0, 71328.0], [1210.0, 82997.0], [1208.0, 84005.0], [1206.0, 61802.0], [1202.0, 31065.0], [1166.0, 63196.0], [1164.0, 63197.5], [1160.0, 63197.666666666664], [1182.0, 94062.0], [1180.0, 95074.0], [1178.0, 61998.0], [1176.0, 93085.0], [1174.0, 63195.833333333336], [1170.0, 63196.0], [1224.0, 31078.5], [1264.0, 451.0], [1270.0, 448.0], [1266.0, 450.0], [1216.0, 79964.0], [1218.0, 78957.0], [1220.0, 77948.0], [1222.0, 31089.0], [1226.0, 38037.0], [1228.0, 38275.0], [1230.0, 38275.0], [1246.0, 75929.0], [1236.0, 38258.0], [1234.0, 38266.5], [1232.0, 38267.0], [1260.0, 452.0], [1248.0, 74920.0], [1332.0, 441.0], [1284.0, 448.0], [1346.0, 441.0], [1568.0, 401.6], [1594.0, 399.16666666666663], [1572.0, 401.0], [1570.0, 401.0], [1574.0, 400.8333333333333], [1588.0, 399.20000000000005], [1584.0, 399.8181818181818], [1566.0, 401.2], [1562.0, 400.0], [1582.0, 400.8], [1578.0, 400.5555555555555], [1576.0, 400.8], [1662.0, 393.0], [1658.0, 392.42857142857144], [1656.0, 393.8333333333333], [1654.0, 394.3333333333333], [1652.0, 393.57142857142856], [1650.0, 393.75], [1666.0, 392.92307692307696], [1664.0, 392.5], [2296.0, 12729.0], [2500.0, 563.7647058823528], [2496.0, 564.6666666666666], [2504.0, 564.0], [2508.0, 562.25], [2516.0, 1272.5294117647056], [2540.0, 296.72727272727275], [2520.0, 4601.333333333333], [3000.0, 2483.9309044738197], [2297.0, 600.0], [2501.0, 563.65], [2497.0, 564.6], [2505.0, 562.818181818182], [2509.0, 562.4285714285714], [2513.0, 559.5], [2545.0, 297.0], [2493.0, 565.0], [2489.0, 565.0], [2525.0, 1243.5000000000002], [2521.0, 558.6], [1077.0, 63137.666666666664], [1081.0, 63137.333333333336], [1057.0, 100505.0], [1059.0, 100494.0], [1063.0, 100480.0], [1075.0, 63137.0], [1027.0, 100515.0], [1053.0, 100506.0], [1049.0, 100508.0], [1045.0, 100509.0], [1043.0, 100509.6], [1041.0, 100510.0], [1069.0, 63139.5], [1067.0, 100026.0], [1065.0, 201888.0], [1097.0, 63119.5], [1143.0, 63204.333333333336], [1141.0, 63205.0], [1139.0, 63205.0], [1137.0, 63205.5], [1103.0, 63117.66666666667], [1101.0, 63118.5], [1099.0, 63118.5], [1095.0, 63119.666666666664], [1093.0, 63121.0], [1089.0, 63120.0], [1119.0, 65028.0], [1117.0, 100017.0], [1115.0, 65958.0], [1113.0, 60725.0], [1111.0, 66397.0], [1109.0, 75081.0], [1107.0, 63118.0], [1121.0, 63940.0], [1205.0, 31064.5], [1215.0, 62974.0], [1185.0, 93050.0], [1187.0, 92042.0], [1189.0, 60995.0], [1191.0, 62076.0], [1213.0, 63981.0], [1211.0, 82995.0], [1209.0, 84003.0], [1207.0, 85014.0], [1203.0, 31065.399999999998], [1167.0, 63196.0], [1165.0, 63198.0], [1163.0, 63197.5], [1183.0, 94059.0], [1181.0, 60989.0], [1179.0, 179587.0], [1177.0, 62000.0], [1175.0, 63009.0], [1173.0, 63196.0], [1221.0, 31090.0], [1249.0, 74917.0], [1265.0, 450.6666666666667], [1247.0, 75928.0], [1217.0, 79962.0], [1219.0, 77948.0], [1225.0, 38038.0], [1227.0, 38282.0], [1231.0, 38273.0], [1245.0, 76938.5], [1243.0, 38246.25], [1239.0, 38257.0], [1235.0, 38265.0], [1261.0, 1049.6], [1259.0, 451.0], [1341.0, 441.0], [1339.0, 441.0], [1323.0, 440.0], [1293.0, 445.952380952381], [1289.0, 448.0], [1285.0, 447.0], [1353.0, 439.18], [1347.0, 440.0], [1593.0, 399.0], [1573.0, 401.12500000000006], [1571.0, 402.0], [1569.0, 401.4285714285715], [1575.0, 399.83333333333337], [1591.0, 399.0], [1585.0, 400.16666666666663], [1567.0, 401.0], [1565.0, 400.75], [1579.0, 400.0566037735849], [1581.0, 400.0], [1577.0, 400.0], [1663.0, 392.8], [1657.0, 394.2], [1645.0, 393.0], [1655.0, 395.0], [1653.0, 393.6666666666667], [1651.0, 394.2857142857143], [1649.0, 393.0], [2298.0, 3150.3684210526317], [2498.0, 3060.193548387097], [2514.0, 559.0273972602744], [2558.0, 3445.2500000000005], [2502.0, 563.5714285714287], [2506.0, 563.0], [2510.0, 562.4615384615385], [2518.0, 577.0], [2550.0, 343.625], [2546.0, 296.0], [2494.0, 565.0], [2490.0, 565.0], [2482.0, 568.0], [2187.0, 610.0], [2499.0, 564.3333333333334], [2555.0, 225.25], [2503.0, 563.3333333333334], [2511.0, 560.9844961240308], [2515.0, 559.0], [2547.0, 297.0], [2495.0, 564.5], [2491.0, 565.5], [2487.0, 565.5], [2523.0, 1631.5], [1.0, 81903.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[2984.534471357184, 2815.3372510572713]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 3000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 8316.0, "minX": 1.6828785E12, "maxY": 723713.65, "series": [{"data": [[1.68287886E12, 10504.283333333333], [1.68287868E12, 584412.15], [1.6828785E12, 280752.13333333336], [1.6828788E12, 424777.31666666665], [1.68287862E12, 573725.9], [1.68287874E12, 723713.65], [1.68287856E12, 514867.4]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.68287886E12, 8316.0], [1.68287868E12, 409424.4], [1.6828785E12, 197282.4], [1.6828788E12, 297931.2], [1.68287862E12, 401696.4], [1.68287874E12, 506814.0], [1.68287856E12, 361653.6]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68287886E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 789.9303414800303, "minX": 1.6828785E12, "maxY": 74458.3282828284, "series": [{"data": [[1.68287886E12, 74458.3282828284], [1.68287868E12, 2366.4589229317908], [1.6828785E12, 789.9303414800303], [1.6828788E12, 1806.9687350229767], [1.68287862E12, 4471.223644373975], [1.68287874E12, 2351.5986192967184], [1.68287856E12, 2420.9550053371718]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68287886E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 789.9196116835573, "minX": 1.6828785E12, "maxY": 74458.3161616162, "series": [{"data": [[1.68287886E12, 74458.3161616162], [1.68287868E12, 2343.1192116812176], [1.6828785E12, 789.9196116835573], [1.6828788E12, 1793.3696822756583], [1.68287862E12, 4292.328920719105], [1.68287874E12, 2285.8881531024667], [1.68287856E12, 2370.400171717654]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68287886E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 76.58924465639149, "minX": 1.6828785E12, "maxY": 9345.165656565652, "series": [{"data": [[1.68287886E12, 9345.165656565652], [1.68287868E12, 691.4790820721072], [1.6828785E12, 76.58924465639149], [1.6828788E12, 714.2767049138702], [1.68287862E12, 2059.68732382598], [1.68287874E12, 796.0362558770962], [1.68287856E12, 155.58309741495492]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68287886E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 3.0, "minX": 1.6828785E12, "maxY": 234679.0, "series": [{"data": [[1.68287886E12, 211790.0], [1.68287868E12, 208828.0], [1.6828785E12, 28076.0], [1.6828788E12, 201888.0], [1.68287862E12, 149595.0], [1.68287874E12, 234679.0], [1.68287856E12, 88233.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.68287886E12, 98915.59999999995], [1.68287868E12, 805.0], [1.6828785E12, 315.0], [1.6828788E12, 927.0], [1.68287862E12, 939.0], [1.68287874E12, 978.0], [1.68287856E12, 7752.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.68287886E12, 101942.17], [1.68287868E12, 100686.0], [1.6828785E12, 17819.0], [1.6828788E12, 63139.0], [1.68287862E12, 141351.87000000017], [1.68287874E12, 128278.0], [1.68287856E12, 71434.96]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.68287886E12, 101498.0], [1.68287868E12, 4500.0], [1.6828785E12, 8054.0], [1.6828788E12, 969.0], [1.68287862E12, 5404.0], [1.68287874E12, 2751.9500000000007], [1.68287856E12, 9602.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.68287886E12, 38138.0], [1.68287868E12, 15.0], [1.6828785E12, 4.0], [1.6828788E12, 25.0], [1.68287862E12, 10.0], [1.68287874E12, 19.0], [1.68287856E12, 3.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.68287886E12, 73058.0], [1.68287868E12, 464.0], [1.6828785E12, 201.0], [1.6828788E12, 549.0], [1.68287862E12, 504.0], [1.68287874E12, 484.0], [1.68287856E12, 19.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68287886E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 5.0, "minX": 1.0, "maxY": 179587.0, "series": [{"data": [[2.0, 66424.0], [3.0, 79006.0], [4.0, 44365.5], [5.0, 43829.0], [6.0, 47126.5], [7.0, 14749.5], [8.0, 79169.5], [9.0, 78901.5], [10.0, 38346.5], [11.0, 68875.0], [12.0, 14987.5], [13.0, 84882.0], [15.0, 12352.0], [16.0, 64879.5], [17.0, 64661.0], [18.0, 23889.0], [21.0, 67933.0], [25.0, 62928.5], [30.0, 28461.0], [37.0, 42.0], [42.0, 48.0], [44.0, 88058.5], [46.0, 73030.0], [48.0, 39.0], [50.0, 48177.0], [55.0, 62776.5], [62.0, 91.5], [66.0, 100811.0], [71.0, 100697.0], [73.0, 4611.0], [75.0, 9998.5], [83.0, 64941.0], [84.0, 174.5], [86.0, 70082.0], [91.0, 2880.0], [90.0, 137.0], [99.0, 9063.0], [98.0, 92.0], [100.0, 84.0], [126.0, 135.0], [128.0, 69009.5], [152.0, 69712.0], [164.0, 180.0], [172.0, 101.0], [203.0, 12367.0], [206.0, 161.0], [209.0, 6781.0], [226.0, 76565.0], [236.0, 71354.5], [245.0, 6693.0], [252.0, 2240.0], [253.0, 248.0], [250.0, 7767.0], [255.0, 146.0], [258.0, 170.0], [317.0, 205.0], [320.0, 7958.0], [341.0, 12388.0], [360.0, 6.0], [381.0, 157.0], [420.0, 327.0], [419.0, 401.0], [439.0, 532.0], [440.0, 674.0], [451.0, 5402.0], [476.0, 403.0], [482.0, 7747.0], [492.0, 488.0], [521.0, 9953.0], [516.0, 12113.0], [522.0, 6.0], [542.0, 4709.0], [575.0, 7.0], [560.0, 335.0], [553.0, 8483.5], [557.0, 428.0], [637.0, 331.0], [624.0, 444.0], [615.0, 445.0], [618.0, 345.0], [662.0, 150.0], [652.0, 5263.0], [689.0, 23.0], [676.0, 437.0], [734.0, 186.5], [732.0, 61.0], [767.0, 175.0], [763.0, 276.0], [739.0, 6847.0], [757.0, 999.0], [755.0, 461.0], [792.0, 417.0], [787.0, 461.0], [779.0, 460.0], [806.0, 192.0], [828.0, 1180.0], [827.0, 458.0], [809.0, 479.0], [824.0, 489.0], [850.0, 209.0], [855.0, 6158.0], [849.0, 655.0], [862.0, 458.0], [859.0, 514.0], [847.0, 459.0], [863.0, 420.0], [861.0, 442.0], [871.0, 254.0], [882.0, 316.0], [884.0, 468.0], [870.0, 377.0], [895.0, 7.0], [888.0, 381.0], [880.0, 165.0], [881.0, 490.0], [872.0, 455.5], [873.0, 454.0], [875.0, 457.0], [878.0, 473.0], [869.0, 445.0], [866.0, 457.0], [867.0, 455.0], [900.0, 13.0], [925.0, 394.0], [904.0, 697.0], [916.0, 460.0], [923.0, 682.0], [910.0, 697.0], [931.0, 234.0], [932.0, 469.0], [943.0, 429.0], [948.0, 547.0], [929.0, 461.0], [985.0, 188.0], [991.0, 44.0], [978.0, 4366.0], [961.0, 457.0], [988.0, 480.0], [981.0, 471.0], [1018.0, 941.0], [994.0, 510.0], [1000.0, 335.0], [1002.0, 454.0], [1056.0, 31.0], [1050.0, 563.0], [1084.0, 523.0], [1119.0, 226.0], [1129.0, 298.0], [1133.0, 5.0], [1109.0, 438.0], [1202.0, 31.0], [1175.0, 220.0], [1185.0, 186.0], [1205.0, 931.0], [1153.0, 438.0], [1227.0, 320.0], [1231.0, 486.0], [1326.0, 35.0], [1317.0, 175.0], [1296.0, 594.0], [1457.0, 502.0], [1422.0, 657.0], [1478.0, 319.0], [1527.0, 15.0], [1525.0, 782.0], [1528.0, 450.0], [1481.0, 810.0], [1542.0, 173.0], [1590.0, 468.0], [1588.0, 515.0], [1598.0, 529.0], [1569.0, 411.0], [1620.0, 434.0], [1619.0, 50.0], [1602.0, 452.0], [1658.0, 485.0], [1617.0, 577.0], [1633.0, 419.0], [1607.0, 704.0], [1675.0, 161.0], [1680.0, 226.0], [1712.0, 6.0], [1722.0, 75.0], [1726.0, 579.0], [1706.0, 790.0], [1693.0, 470.0], [1713.0, 470.0], [1715.0, 429.0], [1690.0, 474.0], [1684.0, 699.0], [1735.0, 235.0], [1750.0, 182.0], [1748.0, 516.0], [1739.0, 540.0], [1738.0, 447.0], [1780.0, 645.0], [1743.0, 715.0], [1740.0, 575.0], [1745.0, 471.0], [1763.0, 670.0], [1765.0, 558.0], [1788.0, 831.0], [1747.0, 455.0], [1755.0, 784.0], [1734.0, 921.0], [1821.0, 708.0], [1905.0, 176.0], [1907.0, 207.0], [1896.0, 31.0], [1884.0, 612.0], [1866.0, 643.0], [1876.0, 480.0], [1913.0, 498.0], [1914.0, 881.0], [1975.0, 917.0], [2038.0, 531.0], [2011.0, 693.0], [2002.0, 758.0], [2086.0, 11.0], [2153.0, 755.0], [2194.0, 170.0], [2196.0, 74.0], [2189.0, 12.0], [2177.0, 56.0], [2214.0, 675.0], [2286.0, 717.0], [2179.0, 803.0], [2386.0, 63.0], [2335.0, 507.0], [2365.0, 497.0], [2431.0, 461.0], [2572.0, 577.0], [2560.0, 580.0], [2568.0, 834.0], [2765.0, 567.0], [3462.0, 828.0], [1.0, 70555.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[516.0, 54387.5], [172.0, 7629.0], [755.0, 116604.0], [12.0, 111195.0], [3.0, 179587.0], [923.0, 10099.0], [943.0, 51195.0], [929.0, 71643.0], [988.0, 105750.0], [62.0, 138163.5], [994.0, 27820.5], [75.0, 159810.0], [18.0, 108529.0], [6.0, 124397.0], [1569.0, 150909.0], [1602.0, 135730.0], [1713.0, 77667.0], [2038.0, 10107.0], [2002.0, 150653.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 3462.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 100811.0, "series": [{"data": [[2.0, 66424.0], [3.0, 79006.0], [4.0, 44365.5], [5.0, 43829.0], [6.0, 47126.5], [7.0, 14749.5], [8.0, 79169.5], [9.0, 78901.5], [10.0, 38346.0], [11.0, 68875.0], [12.0, 14987.5], [13.0, 84882.0], [15.0, 12352.0], [16.0, 64879.5], [17.0, 64661.0], [18.0, 23889.0], [21.0, 67933.0], [25.0, 62928.5], [30.0, 28461.0], [37.0, 42.0], [42.0, 48.0], [44.0, 88058.5], [46.0, 73030.0], [48.0, 39.0], [50.0, 48177.0], [55.0, 62776.5], [62.0, 91.5], [66.0, 100811.0], [71.0, 100697.0], [73.0, 4611.0], [75.0, 9998.5], [83.0, 64941.0], [84.0, 174.5], [86.0, 70082.0], [91.0, 2880.0], [90.0, 137.0], [99.0, 9063.0], [98.0, 92.0], [100.0, 84.0], [126.0, 135.0], [128.0, 69009.5], [152.0, 69712.0], [164.0, 180.0], [172.0, 101.0], [203.0, 12367.0], [206.0, 161.0], [209.0, 6781.0], [226.0, 76565.0], [236.0, 71354.5], [245.0, 6693.0], [252.0, 2240.0], [253.0, 248.0], [250.0, 7767.0], [255.0, 146.0], [258.0, 170.0], [317.0, 205.0], [320.0, 7958.0], [341.0, 12388.0], [360.0, 6.0], [381.0, 157.0], [420.0, 327.0], [419.0, 401.0], [439.0, 532.0], [440.0, 674.0], [451.0, 5402.0], [476.0, 403.0], [482.0, 7747.0], [492.0, 488.0], [521.0, 9953.0], [516.0, 12113.0], [522.0, 6.0], [542.0, 4709.0], [575.0, 7.0], [560.0, 335.0], [553.0, 8483.5], [557.0, 428.0], [637.0, 331.0], [624.0, 444.0], [615.0, 445.0], [618.0, 345.0], [662.0, 150.0], [652.0, 5263.0], [689.0, 23.0], [676.0, 437.0], [734.0, 186.5], [732.0, 61.0], [767.0, 175.0], [763.0, 276.0], [739.0, 6847.0], [757.0, 999.0], [755.0, 461.0], [792.0, 417.0], [787.0, 461.0], [779.0, 460.0], [806.0, 192.0], [828.0, 1180.0], [827.0, 458.0], [809.0, 479.0], [824.0, 489.0], [850.0, 209.0], [855.0, 6158.0], [849.0, 655.0], [862.0, 458.0], [859.0, 514.0], [847.0, 459.0], [863.0, 420.0], [861.0, 442.0], [871.0, 254.0], [882.0, 316.0], [884.0, 468.0], [870.0, 377.0], [895.0, 7.0], [888.0, 381.0], [880.0, 165.0], [881.0, 490.0], [872.0, 455.0], [873.0, 454.0], [875.0, 457.0], [878.0, 473.0], [869.0, 445.0], [866.0, 457.0], [867.0, 455.0], [900.0, 13.0], [925.0, 394.0], [904.0, 697.0], [916.0, 460.0], [923.0, 682.0], [910.0, 697.0], [931.0, 234.0], [932.0, 469.0], [943.0, 429.0], [948.0, 547.0], [929.0, 461.0], [985.0, 188.0], [991.0, 44.0], [978.0, 4366.0], [961.0, 457.0], [988.0, 480.0], [981.0, 471.0], [1018.0, 941.0], [994.0, 510.0], [1000.0, 335.0], [1002.0, 454.0], [1056.0, 31.0], [1050.0, 563.0], [1084.0, 523.0], [1119.0, 226.0], [1129.0, 298.0], [1133.0, 5.0], [1109.0, 438.0], [1202.0, 31.0], [1175.0, 220.0], [1185.0, 186.0], [1205.0, 931.0], [1153.0, 438.0], [1227.0, 320.0], [1231.0, 486.0], [1326.0, 35.0], [1317.0, 175.0], [1296.0, 594.0], [1457.0, 502.0], [1422.0, 657.0], [1478.0, 319.0], [1527.0, 15.0], [1525.0, 782.0], [1528.0, 450.0], [1481.0, 810.0], [1542.0, 173.0], [1590.0, 468.0], [1588.0, 515.0], [1598.0, 529.0], [1569.0, 411.0], [1620.0, 434.0], [1619.0, 50.0], [1602.0, 452.0], [1658.0, 485.0], [1617.0, 577.0], [1633.0, 419.0], [1607.0, 704.0], [1675.0, 161.0], [1680.0, 226.0], [1712.0, 6.0], [1722.0, 75.0], [1726.0, 579.0], [1706.0, 790.0], [1693.0, 470.0], [1713.0, 470.0], [1715.0, 429.0], [1690.0, 474.0], [1684.0, 699.0], [1735.0, 235.0], [1750.0, 182.0], [1748.0, 516.0], [1739.0, 540.0], [1738.0, 447.0], [1780.0, 645.0], [1743.0, 715.0], [1740.0, 575.0], [1745.0, 471.0], [1763.0, 670.0], [1765.0, 558.0], [1788.0, 831.0], [1747.0, 455.0], [1755.0, 784.0], [1734.0, 921.0], [1821.0, 708.0], [1905.0, 176.0], [1907.0, 207.0], [1896.0, 31.0], [1884.0, 612.0], [1866.0, 643.0], [1876.0, 480.0], [1913.0, 498.0], [1914.0, 881.0], [1975.0, 916.0], [2038.0, 531.0], [2011.0, 693.0], [2002.0, 758.0], [2086.0, 11.0], [2153.0, 755.0], [2194.0, 170.0], [2196.0, 74.0], [2189.0, 11.0], [2177.0, 56.0], [2214.0, 675.0], [2286.0, 717.0], [2179.0, 803.0], [2386.0, 63.0], [2335.0, 507.0], [2365.0, 497.0], [2431.0, 461.0], [2572.0, 577.0], [2560.0, 580.0], [2568.0, 834.0], [2765.0, 567.0], [3462.0, 828.0], [1.0, 70555.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[516.0, 0.0], [172.0, 0.0], [755.0, 0.0], [12.0, 0.0], [3.0, 0.0], [923.0, 0.0], [943.0, 0.0], [929.0, 0.0], [988.0, 0.0], [62.0, 0.0], [994.0, 0.0], [75.0, 0.0], [18.0, 0.0], [6.0, 0.0], [1569.0, 0.0], [1602.0, 0.0], [1713.0, 0.0], [2038.0, 0.0], [2002.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 3462.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 433.5, "minX": 1.6828785E12, "maxY": 997.05, "series": [{"data": [[1.68287868E12, 809.2], [1.6828785E12, 433.5], [1.6828788E12, 592.45], [1.68287862E12, 780.3], [1.68287874E12, 997.05], [1.68287856E12, 722.5]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6828788E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.05, "minX": 1.6828785E12, "maxY": 1005.5833333333334, "series": [{"data": [[1.68287886E12, 16.5], [1.68287868E12, 812.35], [1.6828785E12, 391.43333333333334], [1.6828788E12, 591.1333333333333], [1.68287862E12, 797.0166666666667], [1.68287874E12, 1005.5833333333334], [1.68287856E12, 717.5666666666667]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.68287868E12, 0.35], [1.6828788E12, 0.05], [1.68287862E12, 1.2], [1.68287874E12, 1.15], [1.68287856E12, 0.6666666666666666]], "isOverall": false, "label": "Non HTTP response code: java.net.SocketException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68287886E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.05, "minX": 1.6828785E12, "maxY": 1005.5833333333334, "series": [{"data": [[1.68287886E12, 16.5], [1.68287868E12, 812.35], [1.6828785E12, 391.43333333333334], [1.6828788E12, 591.1333333333333], [1.68287862E12, 797.0166666666667], [1.68287874E12, 1005.5833333333334], [1.68287856E12, 717.5666666666667]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.68287868E12, 0.35], [1.6828788E12, 0.05], [1.68287862E12, 1.2], [1.68287874E12, 1.15], [1.68287856E12, 0.6666666666666666]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68287886E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.05, "minX": 1.6828785E12, "maxY": 1005.5833333333334, "series": [{"data": [[1.68287886E12, 16.5], [1.68287868E12, 812.35], [1.6828785E12, 391.43333333333334], [1.6828788E12, 591.1333333333333], [1.68287862E12, 797.0166666666667], [1.68287874E12, 1005.5833333333334], [1.68287856E12, 717.5666666666667]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.68287868E12, 0.35], [1.6828788E12, 0.05], [1.68287862E12, 1.2], [1.68287874E12, 1.15], [1.68287856E12, 0.6666666666666666]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68287886E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

