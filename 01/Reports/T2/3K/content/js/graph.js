/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 9.0, "minX": 0.0, "maxY": 195977.0, "series": [{"data": [[0.0, 9.0], [0.1, 22.0], [0.2, 24.0], [0.3, 28.0], [0.4, 32.0], [0.5, 36.0], [0.6, 38.0], [0.7, 42.0], [0.8, 44.0], [0.9, 46.0], [1.0, 48.0], [1.1, 49.0], [1.2, 49.0], [1.3, 50.0], [1.4, 52.0], [1.5, 53.0], [1.6, 54.0], [1.7, 55.0], [1.8, 55.0], [1.9, 56.0], [2.0, 58.0], [2.1, 59.0], [2.2, 60.0], [2.3, 61.0], [2.4, 62.0], [2.5, 63.0], [2.6, 64.0], [2.7, 65.0], [2.8, 65.0], [2.9, 66.0], [3.0, 67.0], [3.1, 68.0], [3.2, 68.0], [3.3, 69.0], [3.4, 69.0], [3.5, 70.0], [3.6, 70.0], [3.7, 70.0], [3.8, 71.0], [3.9, 71.0], [4.0, 71.0], [4.1, 72.0], [4.2, 72.0], [4.3, 73.0], [4.4, 73.0], [4.5, 73.0], [4.6, 74.0], [4.7, 74.0], [4.8, 74.0], [4.9, 75.0], [5.0, 75.0], [5.1, 76.0], [5.2, 77.0], [5.3, 77.0], [5.4, 78.0], [5.5, 78.0], [5.6, 79.0], [5.7, 79.0], [5.8, 79.0], [5.9, 80.0], [6.0, 80.0], [6.1, 80.0], [6.2, 81.0], [6.3, 81.0], [6.4, 82.0], [6.5, 82.0], [6.6, 82.0], [6.7, 83.0], [6.8, 83.0], [6.9, 83.0], [7.0, 84.0], [7.1, 84.0], [7.2, 85.0], [7.3, 85.0], [7.4, 86.0], [7.5, 86.0], [7.6, 86.0], [7.7, 86.0], [7.8, 87.0], [7.9, 87.0], [8.0, 87.0], [8.1, 88.0], [8.2, 88.0], [8.3, 88.0], [8.4, 88.0], [8.5, 88.0], [8.6, 89.0], [8.7, 89.0], [8.8, 89.0], [8.9, 89.0], [9.0, 90.0], [9.1, 90.0], [9.2, 90.0], [9.3, 90.0], [9.4, 91.0], [9.5, 91.0], [9.6, 92.0], [9.7, 92.0], [9.8, 92.0], [9.9, 93.0], [10.0, 93.0], [10.1, 93.0], [10.2, 93.0], [10.3, 93.0], [10.4, 94.0], [10.5, 94.0], [10.6, 94.0], [10.7, 94.0], [10.8, 95.0], [10.9, 95.0], [11.0, 95.0], [11.1, 95.0], [11.2, 96.0], [11.3, 96.0], [11.4, 96.0], [11.5, 96.0], [11.6, 96.0], [11.7, 97.0], [11.8, 97.0], [11.9, 97.0], [12.0, 97.0], [12.1, 97.0], [12.2, 98.0], [12.3, 98.0], [12.4, 98.0], [12.5, 98.0], [12.6, 99.0], [12.7, 99.0], [12.8, 99.0], [12.9, 99.0], [13.0, 100.0], [13.1, 100.0], [13.2, 100.0], [13.3, 100.0], [13.4, 101.0], [13.5, 101.0], [13.6, 101.0], [13.7, 101.0], [13.8, 101.0], [13.9, 102.0], [14.0, 102.0], [14.1, 103.0], [14.2, 103.0], [14.3, 103.0], [14.4, 103.0], [14.5, 103.0], [14.6, 104.0], [14.7, 104.0], [14.8, 104.0], [14.9, 104.0], [15.0, 105.0], [15.1, 105.0], [15.2, 105.0], [15.3, 105.0], [15.4, 105.0], [15.5, 106.0], [15.6, 106.0], [15.7, 106.0], [15.8, 106.0], [15.9, 106.0], [16.0, 107.0], [16.1, 107.0], [16.2, 107.0], [16.3, 107.0], [16.4, 107.0], [16.5, 107.0], [16.6, 108.0], [16.7, 108.0], [16.8, 108.0], [16.9, 108.0], [17.0, 108.0], [17.1, 109.0], [17.2, 109.0], [17.3, 109.0], [17.4, 109.0], [17.5, 109.0], [17.6, 110.0], [17.7, 110.0], [17.8, 110.0], [17.9, 110.0], [18.0, 110.0], [18.1, 111.0], [18.2, 111.0], [18.3, 111.0], [18.4, 111.0], [18.5, 112.0], [18.6, 112.0], [18.7, 112.0], [18.8, 112.0], [18.9, 113.0], [19.0, 113.0], [19.1, 113.0], [19.2, 113.0], [19.3, 113.0], [19.4, 114.0], [19.5, 114.0], [19.6, 114.0], [19.7, 114.0], [19.8, 114.0], [19.9, 114.0], [20.0, 114.0], [20.1, 115.0], [20.2, 115.0], [20.3, 115.0], [20.4, 115.0], [20.5, 115.0], [20.6, 116.0], [20.7, 116.0], [20.8, 116.0], [20.9, 116.0], [21.0, 117.0], [21.1, 117.0], [21.2, 117.0], [21.3, 117.0], [21.4, 117.0], [21.5, 118.0], [21.6, 118.0], [21.7, 118.0], [21.8, 118.0], [21.9, 118.0], [22.0, 118.0], [22.1, 118.0], [22.2, 119.0], [22.3, 119.0], [22.4, 119.0], [22.5, 119.0], [22.6, 119.0], [22.7, 119.0], [22.8, 119.0], [22.9, 119.0], [23.0, 120.0], [23.1, 120.0], [23.2, 120.0], [23.3, 120.0], [23.4, 120.0], [23.5, 120.0], [23.6, 120.0], [23.7, 120.0], [23.8, 120.0], [23.9, 121.0], [24.0, 121.0], [24.1, 121.0], [24.2, 121.0], [24.3, 121.0], [24.4, 121.0], [24.5, 121.0], [24.6, 121.0], [24.7, 121.0], [24.8, 121.0], [24.9, 121.0], [25.0, 121.0], [25.1, 122.0], [25.2, 122.0], [25.3, 122.0], [25.4, 122.0], [25.5, 122.0], [25.6, 122.0], [25.7, 122.0], [25.8, 122.0], [25.9, 122.0], [26.0, 122.0], [26.1, 123.0], [26.2, 123.0], [26.3, 123.0], [26.4, 123.0], [26.5, 123.0], [26.6, 123.0], [26.7, 123.0], [26.8, 123.0], [26.9, 123.0], [27.0, 124.0], [27.1, 124.0], [27.2, 124.0], [27.3, 124.0], [27.4, 124.0], [27.5, 124.0], [27.6, 124.0], [27.7, 124.0], [27.8, 124.0], [27.9, 125.0], [28.0, 125.0], [28.1, 125.0], [28.2, 125.0], [28.3, 125.0], [28.4, 125.0], [28.5, 125.0], [28.6, 125.0], [28.7, 125.0], [28.8, 125.0], [28.9, 126.0], [29.0, 126.0], [29.1, 126.0], [29.2, 126.0], [29.3, 126.0], [29.4, 126.0], [29.5, 126.0], [29.6, 126.0], [29.7, 126.0], [29.8, 127.0], [29.9, 127.0], [30.0, 127.0], [30.1, 127.0], [30.2, 127.0], [30.3, 127.0], [30.4, 127.0], [30.5, 127.0], [30.6, 127.0], [30.7, 128.0], [30.8, 128.0], [30.9, 128.0], [31.0, 128.0], [31.1, 128.0], [31.2, 128.0], [31.3, 128.0], [31.4, 128.0], [31.5, 128.0], [31.6, 128.0], [31.7, 128.0], [31.8, 129.0], [31.9, 129.0], [32.0, 129.0], [32.1, 129.0], [32.2, 129.0], [32.3, 129.0], [32.4, 129.0], [32.5, 129.0], [32.6, 129.0], [32.7, 129.0], [32.8, 129.0], [32.9, 130.0], [33.0, 130.0], [33.1, 130.0], [33.2, 130.0], [33.3, 130.0], [33.4, 130.0], [33.5, 130.0], [33.6, 130.0], [33.7, 130.0], [33.8, 130.0], [33.9, 131.0], [34.0, 131.0], [34.1, 131.0], [34.2, 131.0], [34.3, 131.0], [34.4, 131.0], [34.5, 131.0], [34.6, 131.0], [34.7, 131.0], [34.8, 131.0], [34.9, 132.0], [35.0, 132.0], [35.1, 132.0], [35.2, 132.0], [35.3, 132.0], [35.4, 132.0], [35.5, 132.0], [35.6, 132.0], [35.7, 132.0], [35.8, 133.0], [35.9, 133.0], [36.0, 133.0], [36.1, 133.0], [36.2, 133.0], [36.3, 133.0], [36.4, 133.0], [36.5, 133.0], [36.6, 133.0], [36.7, 133.0], [36.8, 133.0], [36.9, 133.0], [37.0, 134.0], [37.1, 134.0], [37.2, 134.0], [37.3, 134.0], [37.4, 134.0], [37.5, 134.0], [37.6, 134.0], [37.7, 134.0], [37.8, 134.0], [37.9, 134.0], [38.0, 134.0], [38.1, 134.0], [38.2, 135.0], [38.3, 135.0], [38.4, 135.0], [38.5, 135.0], [38.6, 135.0], [38.7, 135.0], [38.8, 135.0], [38.9, 135.0], [39.0, 136.0], [39.1, 136.0], [39.2, 136.0], [39.3, 136.0], [39.4, 136.0], [39.5, 136.0], [39.6, 136.0], [39.7, 136.0], [39.8, 136.0], [39.9, 136.0], [40.0, 137.0], [40.1, 137.0], [40.2, 137.0], [40.3, 137.0], [40.4, 137.0], [40.5, 137.0], [40.6, 138.0], [40.7, 138.0], [40.8, 138.0], [40.9, 138.0], [41.0, 138.0], [41.1, 138.0], [41.2, 138.0], [41.3, 139.0], [41.4, 139.0], [41.5, 139.0], [41.6, 139.0], [41.7, 139.0], [41.8, 139.0], [41.9, 139.0], [42.0, 139.0], [42.1, 139.0], [42.2, 139.0], [42.3, 140.0], [42.4, 140.0], [42.5, 140.0], [42.6, 140.0], [42.7, 140.0], [42.8, 140.0], [42.9, 140.0], [43.0, 140.0], [43.1, 141.0], [43.2, 141.0], [43.3, 141.0], [43.4, 141.0], [43.5, 141.0], [43.6, 141.0], [43.7, 142.0], [43.8, 142.0], [43.9, 142.0], [44.0, 142.0], [44.1, 142.0], [44.2, 142.0], [44.3, 142.0], [44.4, 143.0], [44.5, 143.0], [44.6, 143.0], [44.7, 143.0], [44.8, 143.0], [44.9, 143.0], [45.0, 143.0], [45.1, 144.0], [45.2, 144.0], [45.3, 144.0], [45.4, 144.0], [45.5, 144.0], [45.6, 144.0], [45.7, 144.0], [45.8, 145.0], [45.9, 145.0], [46.0, 145.0], [46.1, 145.0], [46.2, 145.0], [46.3, 146.0], [46.4, 146.0], [46.5, 146.0], [46.6, 146.0], [46.7, 146.0], [46.8, 146.0], [46.9, 147.0], [47.0, 147.0], [47.1, 147.0], [47.2, 147.0], [47.3, 148.0], [47.4, 148.0], [47.5, 148.0], [47.6, 148.0], [47.7, 148.0], [47.8, 149.0], [47.9, 149.0], [48.0, 149.0], [48.1, 149.0], [48.2, 149.0], [48.3, 150.0], [48.4, 150.0], [48.5, 150.0], [48.6, 151.0], [48.7, 151.0], [48.8, 151.0], [48.9, 152.0], [49.0, 152.0], [49.1, 152.0], [49.2, 152.0], [49.3, 153.0], [49.4, 153.0], [49.5, 154.0], [49.6, 154.0], [49.7, 154.0], [49.8, 155.0], [49.9, 155.0], [50.0, 155.0], [50.1, 156.0], [50.2, 156.0], [50.3, 157.0], [50.4, 157.0], [50.5, 158.0], [50.6, 158.0], [50.7, 158.0], [50.8, 159.0], [50.9, 159.0], [51.0, 159.0], [51.1, 160.0], [51.2, 160.0], [51.3, 161.0], [51.4, 161.0], [51.5, 162.0], [51.6, 163.0], [51.7, 164.0], [51.8, 164.0], [51.9, 165.0], [52.0, 166.0], [52.1, 167.0], [52.2, 168.0], [52.3, 169.0], [52.4, 171.0], [52.5, 172.0], [52.6, 172.0], [52.7, 173.0], [52.8, 175.0], [52.9, 176.0], [53.0, 176.0], [53.1, 177.0], [53.2, 178.0], [53.3, 180.0], [53.4, 181.0], [53.5, 183.0], [53.6, 184.0], [53.7, 187.0], [53.8, 189.0], [53.9, 190.0], [54.0, 192.0], [54.1, 194.0], [54.2, 197.0], [54.3, 198.0], [54.4, 199.0], [54.5, 201.0], [54.6, 202.0], [54.7, 203.0], [54.8, 203.0], [54.9, 205.0], [55.0, 206.0], [55.1, 208.0], [55.2, 214.0], [55.3, 217.0], [55.4, 221.0], [55.5, 222.0], [55.6, 223.0], [55.7, 224.0], [55.8, 226.0], [55.9, 228.0], [56.0, 229.0], [56.1, 230.0], [56.2, 236.0], [56.3, 239.0], [56.4, 241.0], [56.5, 244.0], [56.6, 248.0], [56.7, 255.0], [56.8, 260.0], [56.9, 267.0], [57.0, 276.0], [57.1, 277.0], [57.2, 278.0], [57.3, 282.0], [57.4, 294.0], [57.5, 306.0], [57.6, 317.0], [57.7, 319.0], [57.8, 352.0], [57.9, 398.0], [58.0, 478.0], [58.1, 505.0], [58.2, 551.0], [58.3, 596.0], [58.4, 637.0], [58.5, 693.0], [58.6, 730.0], [58.7, 814.0], [58.8, 856.0], [58.9, 889.0], [59.0, 912.0], [59.1, 933.0], [59.2, 1030.0], [59.3, 1045.0], [59.4, 1116.0], [59.5, 1155.0], [59.6, 1159.0], [59.7, 1169.0], [59.8, 1185.0], [59.9, 1191.0], [60.0, 1199.0], [60.1, 1223.0], [60.2, 1237.0], [60.3, 1265.0], [60.4, 1284.0], [60.5, 1294.0], [60.6, 1297.0], [60.7, 1309.0], [60.8, 1321.0], [60.9, 1327.0], [61.0, 1380.0], [61.1, 1470.0], [61.2, 1545.0], [61.3, 1633.0], [61.4, 1690.0], [61.5, 1706.0], [61.6, 1737.0], [61.7, 1768.0], [61.8, 1800.0], [61.9, 1818.0], [62.0, 1888.0], [62.1, 1955.0], [62.2, 2049.0], [62.3, 2073.0], [62.4, 2130.0], [62.5, 2148.0], [62.6, 2159.0], [62.7, 2203.0], [62.8, 2234.0], [62.9, 2304.0], [63.0, 2425.0], [63.1, 2490.0], [63.2, 2515.0], [63.3, 2698.0], [63.4, 2766.0], [63.5, 2795.0], [63.6, 2848.0], [63.7, 2881.0], [63.8, 2892.0], [63.9, 2929.0], [64.0, 2947.0], [64.1, 2993.0], [64.2, 3028.0], [64.3, 3041.0], [64.4, 3066.0], [64.5, 3093.0], [64.6, 3120.0], [64.7, 3150.0], [64.8, 3210.0], [64.9, 3257.0], [65.0, 3274.0], [65.1, 3333.0], [65.2, 3368.0], [65.3, 3404.0], [65.4, 3432.0], [65.5, 3447.0], [65.6, 3470.0], [65.7, 3476.0], [65.8, 3481.0], [65.9, 3497.0], [66.0, 3502.0], [66.1, 3511.0], [66.2, 3542.0], [66.3, 3570.0], [66.4, 3648.0], [66.5, 3704.0], [66.6, 3799.0], [66.7, 3806.0], [66.8, 3836.0], [66.9, 3870.0], [67.0, 3871.0], [67.1, 3882.0], [67.2, 3892.0], [67.3, 3893.0], [67.4, 3931.0], [67.5, 3936.0], [67.6, 3952.0], [67.7, 3994.0], [67.8, 4011.0], [67.9, 4028.0], [68.0, 4059.0], [68.1, 4089.0], [68.2, 4104.0], [68.3, 4125.0], [68.4, 4136.0], [68.5, 4137.0], [68.6, 4158.0], [68.7, 4164.0], [68.8, 4171.0], [68.9, 4183.0], [69.0, 4190.0], [69.1, 4194.0], [69.2, 4220.0], [69.3, 4252.0], [69.4, 4295.0], [69.5, 4341.0], [69.6, 4363.0], [69.7, 4386.0], [69.8, 4420.0], [69.9, 4494.0], [70.0, 4544.0], [70.1, 4572.0], [70.2, 4573.0], [70.3, 4604.0], [70.4, 4650.0], [70.5, 4693.0], [70.6, 4734.0], [70.7, 4735.0], [70.8, 4737.0], [70.9, 4755.0], [71.0, 4797.0], [71.1, 4827.0], [71.2, 4897.0], [71.3, 4921.0], [71.4, 4944.0], [71.5, 4979.0], [71.6, 5000.0], [71.7, 5043.0], [71.8, 5054.0], [71.9, 5090.0], [72.0, 5107.0], [72.1, 5126.0], [72.2, 5136.0], [72.3, 5165.0], [72.4, 5172.0], [72.5, 5179.0], [72.6, 5181.0], [72.7, 5188.0], [72.8, 5194.0], [72.9, 5286.0], [73.0, 5330.0], [73.1, 5355.0], [73.2, 5406.0], [73.3, 5473.0], [73.4, 5566.0], [73.5, 5580.0], [73.6, 5612.0], [73.7, 5620.0], [73.8, 5629.0], [73.9, 5660.0], [74.0, 5665.0], [74.1, 5699.0], [74.2, 5747.0], [74.3, 5759.0], [74.4, 5771.0], [74.5, 5777.0], [74.6, 5786.0], [74.7, 5828.0], [74.8, 5886.0], [74.9, 5914.0], [75.0, 5926.0], [75.1, 5929.0], [75.2, 5934.0], [75.3, 5948.0], [75.4, 5966.0], [75.5, 5984.0], [75.6, 5989.0], [75.7, 5991.0], [75.8, 5994.0], [75.9, 6005.0], [76.0, 6008.0], [76.1, 6027.0], [76.2, 6090.0], [76.3, 6106.0], [76.4, 6109.0], [76.5, 6129.0], [76.6, 6139.0], [76.7, 6160.0], [76.8, 6161.0], [76.9, 6163.0], [77.0, 6167.0], [77.1, 6176.0], [77.2, 6193.0], [77.3, 6209.0], [77.4, 6227.0], [77.5, 6232.0], [77.6, 6235.0], [77.7, 6249.0], [77.8, 6265.0], [77.9, 6278.0], [78.0, 6281.0], [78.1, 6300.0], [78.2, 6350.0], [78.3, 6372.0], [78.4, 6383.0], [78.5, 6407.0], [78.6, 6462.0], [78.7, 6479.0], [78.8, 6517.0], [78.9, 6532.0], [79.0, 6537.0], [79.1, 6550.0], [79.2, 6551.0], [79.3, 6575.0], [79.4, 6585.0], [79.5, 6606.0], [79.6, 6625.0], [79.7, 6741.0], [79.8, 6814.0], [79.9, 6867.0], [80.0, 6888.0], [80.1, 6900.0], [80.2, 6910.0], [80.3, 6914.0], [80.4, 6918.0], [80.5, 6926.0], [80.6, 6941.0], [80.7, 6984.0], [80.8, 6988.0], [80.9, 6996.0], [81.0, 7005.0], [81.1, 7017.0], [81.2, 7052.0], [81.3, 7068.0], [81.4, 7085.0], [81.5, 7106.0], [81.6, 7160.0], [81.7, 7179.0], [81.8, 7195.0], [81.9, 7196.0], [82.0, 7198.0], [82.1, 7200.0], [82.2, 7303.0], [82.3, 7313.0], [82.4, 7334.0], [82.5, 7345.0], [82.6, 7375.0], [82.7, 7396.0], [82.8, 7407.0], [82.9, 7423.0], [83.0, 7428.0], [83.1, 7440.0], [83.2, 7454.0], [83.3, 7458.0], [83.4, 7540.0], [83.5, 7589.0], [83.6, 7641.0], [83.7, 7695.0], [83.8, 7732.0], [83.9, 7747.0], [84.0, 7755.0], [84.1, 7770.0], [84.2, 7816.0], [84.3, 7875.0], [84.4, 7901.0], [84.5, 7901.0], [84.6, 7905.0], [84.7, 7974.0], [84.8, 7984.0], [84.9, 8045.0], [85.0, 8060.0], [85.1, 8094.0], [85.2, 8190.0], [85.3, 8322.0], [85.4, 8430.0], [85.5, 8463.0], [85.6, 8492.0], [85.7, 8543.0], [85.8, 8620.0], [85.9, 8678.0], [86.0, 8693.0], [86.1, 8702.0], [86.2, 8737.0], [86.3, 8774.0], [86.4, 8797.0], [86.5, 8854.0], [86.6, 8977.0], [86.7, 8995.0], [86.8, 9024.0], [86.9, 9036.0], [87.0, 9063.0], [87.1, 9111.0], [87.2, 9142.0], [87.3, 9248.0], [87.4, 9417.0], [87.5, 9434.0], [87.6, 9482.0], [87.7, 9525.0], [87.8, 9635.0], [87.9, 9711.0], [88.0, 9718.0], [88.1, 9723.0], [88.2, 9738.0], [88.3, 9785.0], [88.4, 9794.0], [88.5, 9808.0], [88.6, 9813.0], [88.7, 9815.0], [88.8, 9830.0], [88.9, 9841.0], [89.0, 9946.0], [89.1, 10015.0], [89.2, 10087.0], [89.3, 10113.0], [89.4, 10152.0], [89.5, 10165.0], [89.6, 10185.0], [89.7, 10201.0], [89.8, 10367.0], [89.9, 10397.0], [90.0, 10483.0], [90.1, 10503.0], [90.2, 10536.0], [90.3, 10648.0], [90.4, 10671.0], [90.5, 10680.0], [90.6, 10717.0], [90.7, 10727.0], [90.8, 10767.0], [90.9, 10805.0], [91.0, 10833.0], [91.1, 10982.0], [91.2, 11041.0], [91.3, 11206.0], [91.4, 11454.0], [91.5, 11594.0], [91.6, 11724.0], [91.7, 11948.0], [91.8, 12045.0], [91.9, 12093.0], [92.0, 12415.0], [92.1, 12639.0], [92.2, 12662.0], [92.3, 12730.0], [92.4, 13134.0], [92.5, 13391.0], [92.6, 13661.0], [92.7, 13906.0], [92.8, 14074.0], [92.9, 14343.0], [93.0, 14884.0], [93.1, 15056.0], [93.2, 15119.0], [93.3, 15569.0], [93.4, 15785.0], [93.5, 16309.0], [93.6, 16727.0], [93.7, 17618.0], [93.8, 18375.0], [93.9, 18903.0], [94.0, 20610.0], [94.1, 21067.0], [94.2, 21251.0], [94.3, 22010.0], [94.4, 22223.0], [94.5, 22910.0], [94.6, 24415.0], [94.7, 25808.0], [94.8, 26185.0], [94.9, 26969.0], [95.0, 28059.0], [95.1, 28114.0], [95.2, 29767.0], [95.3, 31821.0], [95.4, 32133.0], [95.5, 32283.0], [95.6, 32987.0], [95.7, 33191.0], [95.8, 33479.0], [95.9, 34652.0], [96.0, 36209.0], [96.1, 37918.0], [96.2, 38112.0], [96.3, 39479.0], [96.4, 42006.0], [96.5, 42974.0], [96.6, 46474.0], [96.7, 49030.0], [96.8, 53205.0], [96.9, 55477.0], [97.0, 57941.0], [97.1, 61945.0], [97.2, 65309.0], [97.3, 65809.0], [97.4, 66948.0], [97.5, 68430.0], [97.6, 69536.0], [97.7, 72563.0], [97.8, 74807.0], [97.9, 74829.0], [98.0, 81044.0], [98.1, 88012.0], [98.2, 92828.0], [98.3, 100017.0], [98.4, 100024.0], [98.5, 100035.0], [98.6, 100046.0], [98.7, 100081.0], [98.8, 100104.0], [98.9, 100126.0], [99.0, 100136.0], [99.1, 100152.0], [99.2, 100178.0], [99.3, 104300.0], [99.4, 127507.0], [99.5, 128785.0], [99.6, 129344.0], [99.7, 130502.0], [99.8, 133008.0], [99.9, 133039.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 24860.0, "series": [{"data": [[0.0, 7783.0], [132000.0, 1.0], [68300.0, 16.0], [66700.0, 4.0], [69900.0, 2.0], [74700.0, 2.0], [77900.0, 2.0], [79500.0, 2.0], [92300.0, 1.0], [97100.0, 1.0], [98700.0, 2.0], [127500.0, 33.0], [129100.0, 37.0], [100.0, 24860.0], [32900.0, 30.0], [34500.0, 1.0], [33700.0, 2.0], [134700.0, 5.0], [36100.0, 3.0], [35300.0, 10.0], [40900.0, 18.0], [40100.0, 4.0], [44900.0, 2.0], [43300.0, 23.0], [44100.0, 2.0], [48100.0, 2.0], [50500.0, 4.0], [49700.0, 2.0], [200.0, 1812.0], [52900.0, 6.0], [52100.0, 2.0], [53700.0, 1.0], [57700.0, 1.0], [61700.0, 9.0], [63300.0, 6.0], [64100.0, 2.0], [64900.0, 7.0], [67400.0, 3.0], [69000.0, 19.0], [65800.0, 4.0], [72200.0, 3.0], [300.0, 298.0], [73800.0, 1.0], [77000.0, 1.0], [86600.0, 4.0], [94600.0, 1.0], [101000.0, 12.0], [400.0, 95.0], [104200.0, 10.0], [112200.0, 2.0], [500.0, 146.0], [132400.0, 1.0], [600.0, 123.0], [700.0, 68.0], [800.0, 162.0], [900.0, 153.0], [1000.0, 123.0], [1100.0, 379.0], [1200.0, 385.0], [1300.0, 232.0], [1400.0, 80.0], [1500.0, 64.0], [1600.0, 131.0], [1700.0, 180.0], [1800.0, 129.0], [1900.0, 82.0], [2000.0, 98.0], [2100.0, 226.0], [2300.0, 60.0], [2200.0, 125.0], [2400.0, 74.0], [2500.0, 81.0], [2600.0, 42.0], [2700.0, 120.0], [2800.0, 185.0], [2900.0, 189.0], [3000.0, 219.0], [3100.0, 165.0], [3200.0, 142.0], [3300.0, 166.0], [3400.0, 418.0], [3500.0, 220.0], [3600.0, 39.0], [3700.0, 108.0], [3800.0, 431.0], [3900.0, 231.0], [4000.0, 285.0], [4100.0, 587.0], [4200.0, 157.0], [4300.0, 193.0], [68100.0, 1.0], [4400.0, 97.0], [4500.0, 227.0], [4600.0, 133.0], [72900.0, 3.0], [4700.0, 306.0], [4800.0, 115.0], [77700.0, 1.0], [76100.0, 1.0], [4900.0, 235.0], [5000.0, 205.0], [5100.0, 530.0], [79300.0, 2.0], [5300.0, 157.0], [5200.0, 64.0], [82500.0, 1.0], [5500.0, 148.0], [5600.0, 329.0], [5400.0, 71.0], [5800.0, 102.0], [5700.0, 332.0], [92100.0, 1.0], [6100.0, 610.0], [5900.0, 601.0], [6000.0, 239.0], [95300.0, 1.0], [6200.0, 512.0], [6300.0, 222.0], [100100.0, 260.0], [6500.0, 425.0], [6600.0, 115.0], [6400.0, 169.0], [6900.0, 490.0], [6800.0, 184.0], [6700.0, 86.0], [109700.0, 3.0], [7100.0, 389.0], [7000.0, 317.0], [7200.0, 46.0], [7300.0, 342.0], [7400.0, 359.0], [7600.0, 113.0], [7500.0, 114.0], [7700.0, 263.0], [7800.0, 96.0], [7900.0, 317.0], [8100.0, 67.0], [8000.0, 163.0], [130500.0, 10.0], [127300.0, 7.0], [8200.0, 29.0], [8600.0, 163.0], [8400.0, 163.0], [9200.0, 29.0], [9000.0, 215.0], [8800.0, 69.0], [9600.0, 49.0], [9400.0, 203.0], [10200.0, 46.0], [10000.0, 102.0], [9800.0, 294.0], [10600.0, 206.0], [10400.0, 113.0], [11000.0, 49.0], [10800.0, 107.0], [11200.0, 12.0], [11600.0, 23.0], [11400.0, 61.0], [12000.0, 92.0], [11800.0, 16.0], [12200.0, 2.0], [195000.0, 1.0], [12400.0, 35.0], [12600.0, 138.0], [13000.0, 15.0], [12800.0, 12.0], [13200.0, 8.0], [13800.0, 14.0], [13400.0, 6.0], [13600.0, 23.0], [14000.0, 60.0], [14200.0, 19.0], [14800.0, 39.0], [14400.0, 3.0], [14600.0, 6.0], [15200.0, 1.0], [15000.0, 41.0], [15800.0, 8.0], [15400.0, 7.0], [15600.0, 29.0], [16200.0, 19.0], [16000.0, 5.0], [16800.0, 13.0], [16400.0, 13.0], [18400.0, 6.0], [17600.0, 17.0], [18800.0, 11.0], [20400.0, 12.0], [21200.0, 57.0], [22000.0, 37.0], [21600.0, 1.0], [22400.0, 3.0], [22800.0, 5.0], [24400.0, 17.0], [25200.0, 2.0], [26000.0, 19.0], [26400.0, 7.0], [26800.0, 8.0], [27600.0, 1.0], [27200.0, 7.0], [28000.0, 64.0], [29200.0, 11.0], [31200.0, 6.0], [31600.0, 2.0], [32000.0, 39.0], [32400.0, 8.0], [32800.0, 1.0], [34400.0, 6.0], [36000.0, 8.0], [36800.0, 2.0], [35200.0, 8.0], [37600.0, 11.0], [40000.0, 4.0], [41600.0, 1.0], [43200.0, 2.0], [45600.0, 3.0], [46400.0, 20.0], [195900.0, 1.0], [52000.0, 1.0], [52800.0, 2.0], [55200.0, 2.0], [56800.0, 2.0], [59200.0, 4.0], [60800.0, 2.0], [63200.0, 1.0], [64800.0, 2.0], [64000.0, 2.0], [65600.0, 4.0], [68800.0, 1.0], [72000.0, 28.0], [76800.0, 1.0], [78400.0, 2.0], [81600.0, 1.0], [80000.0, 1.0], [84800.0, 1.0], [88000.0, 59.0], [92800.0, 4.0], [94400.0, 1.0], [97600.0, 1.0], [128000.0, 19.0], [134400.0, 1.0], [132100.0, 34.0], [67100.0, 1.0], [68700.0, 2.0], [71900.0, 4.0], [81500.0, 2.0], [99100.0, 1.0], [133000.0, 79.0], [33100.0, 37.0], [36300.0, 2.0], [37900.0, 27.0], [39500.0, 5.0], [41900.0, 4.0], [43500.0, 4.0], [45900.0, 2.0], [46700.0, 4.0], [45100.0, 2.0], [49100.0, 2.0], [50700.0, 2.0], [52300.0, 1.0], [54700.0, 1.0], [55500.0, 33.0], [56300.0, 1.0], [57900.0, 3.0], [58700.0, 2.0], [60300.0, 2.0], [61900.0, 2.0], [62700.0, 1.0], [64300.0, 7.0], [65100.0, 4.0], [69400.0, 1.0], [67800.0, 1.0], [79000.0, 1.0], [80600.0, 1.0], [85400.0, 1.0], [83800.0, 1.0], [91800.0, 2.0], [98200.0, 1.0], [96600.0, 1.0], [134800.0, 39.0], [148500.0, 2.0], [68500.0, 1.0], [66900.0, 20.0], [71700.0, 1.0], [74900.0, 3.0], [81300.0, 23.0], [87700.0, 1.0], [97300.0, 1.0], [95700.0, 1.0], [102100.0, 2.0], [129300.0, 14.0], [133400.0, 2.0], [16900.0, 5.0], [17300.0, 5.0], [16500.0, 2.0], [17700.0, 22.0], [18100.0, 5.0], [18900.0, 8.0], [18500.0, 4.0], [20100.0, 3.0], [21300.0, 3.0], [20500.0, 11.0], [22100.0, 18.0], [22500.0, 17.0], [22900.0, 4.0], [23300.0, 1.0], [24500.0, 2.0], [24100.0, 4.0], [25300.0, 1.0], [25700.0, 1.0], [26500.0, 5.0], [26100.0, 2.0], [26900.0, 33.0], [27300.0, 1.0], [28100.0, 16.0], [27700.0, 1.0], [28900.0, 4.0], [29300.0, 1.0], [29700.0, 17.0], [30500.0, 2.0], [30900.0, 3.0], [31700.0, 12.0], [32100.0, 18.0], [33000.0, 13.0], [34600.0, 9.0], [35400.0, 7.0], [36200.0, 32.0], [37800.0, 2.0], [37000.0, 2.0], [39400.0, 19.0], [41000.0, 3.0], [41800.0, 4.0], [42600.0, 2.0], [49000.0, 14.0], [50600.0, 12.0], [53000.0, 2.0], [51400.0, 2.0], [53800.0, 1.0], [55400.0, 14.0], [56200.0, 2.0], [57800.0, 6.0], [60200.0, 4.0], [59400.0, 2.0], [61800.0, 1.0], [63400.0, 1.0], [65000.0, 3.0], [67600.0, 1.0], [66000.0, 1.0], [72400.0, 2.0], [70800.0, 1.0], [74000.0, 1.0], [80400.0, 2.0], [78800.0, 1.0], [82000.0, 2.0], [83600.0, 2.0], [90000.0, 2.0], [96400.0, 1.0], [130000.0, 1.0], [133600.0, 2.0], [69100.0, 15.0], [65900.0, 5.0], [70700.0, 10.0], [72300.0, 1.0], [73900.0, 2.0], [75500.0, 2.0], [86700.0, 2.0], [88300.0, 1.0], [91500.0, 1.0], [96300.0, 4.0], [99500.0, 1.0], [101100.0, 2.0], [104300.0, 38.0], [34100.0, 2.0], [33300.0, 1.0], [38100.0, 14.0], [38900.0, 28.0], [37300.0, 8.0], [39700.0, 4.0], [42900.0, 52.0], [42100.0, 1.0], [46100.0, 2.0], [47700.0, 4.0], [48500.0, 4.0], [50100.0, 2.0], [51700.0, 3.0], [54100.0, 20.0], [54900.0, 1.0], [55700.0, 2.0], [57300.0, 4.0], [58900.0, 6.0], [61300.0, 2.0], [59700.0, 2.0], [62900.0, 2.0], [64500.0, 1.0], [65300.0, 46.0], [68200.0, 2.0], [66600.0, 2.0], [73000.0, 2.0], [74600.0, 6.0], [77800.0, 6.0], [79400.0, 1.0], [81000.0, 2.0], [82600.0, 1.0], [89000.0, 1.0], [98600.0, 2.0], [100200.0, 19.0], [127400.0, 8.0], [129000.0, 2.0], [65700.0, 8.0], [67300.0, 1.0], [68900.0, 2.0], [80100.0, 1.0], [81700.0, 1.0], [84900.0, 1.0], [89700.0, 1.0], [94500.0, 3.0], [97700.0, 1.0], [96100.0, 1.0], [100900.0, 3.0], [128100.0, 6.0], [8700.0, 210.0], [8500.0, 81.0], [8300.0, 64.0], [8900.0, 118.0], [9100.0, 117.0], [9700.0, 365.0], [9500.0, 64.0], [9300.0, 2.0], [9900.0, 89.0], [10100.0, 254.0], [10500.0, 76.0], [10700.0, 188.0], [10300.0, 79.0], [10900.0, 73.0], [11100.0, 22.0], [11500.0, 37.0], [11700.0, 43.0], [11300.0, 19.0], [12100.0, 38.0], [11900.0, 74.0], [12500.0, 3.0], [12700.0, 15.0], [12900.0, 23.0], [13100.0, 17.0], [13300.0, 43.0], [13500.0, 43.0], [13700.0, 25.0], [14100.0, 20.0], [13900.0, 19.0], [14300.0, 24.0], [14500.0, 5.0], [14700.0, 5.0], [14900.0, 35.0], [15100.0, 74.0], [15300.0, 1.0], [15700.0, 30.0], [15500.0, 14.0], [16300.0, 8.0], [16100.0, 20.0], [16600.0, 37.0], [17400.0, 8.0], [17800.0, 18.0], [18600.0, 17.0], [20200.0, 2.0], [21000.0, 83.0], [21400.0, 2.0], [20600.0, 5.0], [21800.0, 4.0], [22200.0, 17.0], [23000.0, 3.0], [22600.0, 14.0], [24200.0, 40.0], [23800.0, 2.0], [25400.0, 1.0], [25000.0, 4.0], [25800.0, 12.0], [26600.0, 4.0], [27000.0, 8.0], [27800.0, 8.0], [28600.0, 2.0], [28200.0, 2.0], [29000.0, 4.0], [30200.0, 10.0], [29800.0, 2.0], [30600.0, 10.0], [31000.0, 4.0], [32200.0, 69.0], [32600.0, 2.0], [31800.0, 18.0], [34000.0, 4.0], [34800.0, 2.0], [38000.0, 29.0], [39600.0, 4.0], [42000.0, 3.0], [42800.0, 6.0], [43600.0, 2.0], [48400.0, 15.0], [52400.0, 2.0], [53200.0, 4.0], [54800.0, 3.0], [54000.0, 10.0], [57200.0, 2.0], [58000.0, 2.0], [58800.0, 1.0], [61200.0, 2.0], [62000.0, 1.0], [65200.0, 1.0], [64400.0, 2.0], [63600.0, 3.0], [66400.0, 8.0], [80800.0, 1.0], [85600.0, 2.0], [95200.0, 1.0], [100000.0, 304.0], [130400.0, 20.0], [128800.0, 2.0], [66300.0, 23.0], [69500.0, 1.0], [67900.0, 3.0], [72700.0, 1.0], [71100.0, 1.0], [77500.0, 1.0], [75900.0, 2.0], [87100.0, 1.0], [93500.0, 1.0], [98300.0, 1.0], [96700.0, 2.0], [130300.0, 24.0], [128700.0, 18.0], [131400.0, 2.0], [35100.0, 3.0], [39900.0, 2.0], [43100.0, 2.0], [46300.0, 1.0], [47100.0, 2.0], [48700.0, 1.0], [49500.0, 2.0], [51100.0, 2.0], [51900.0, 1.0], [52700.0, 4.0], [58300.0, 5.0], [59900.0, 2.0], [60700.0, 2.0], [62300.0, 4.0], [64700.0, 1.0], [65500.0, 1.0], [67000.0, 2.0], [73400.0, 3.0], [79800.0, 1.0], [84600.0, 1.0], [91000.0, 1.0], [99000.0, 1.0], [103800.0, 6.0], [69300.0, 2.0], [66100.0, 1.0], [67700.0, 5.0], [72500.0, 1.0], [70900.0, 3.0], [75700.0, 2.0], [80500.0, 2.0], [98100.0, 4.0], [99700.0, 1.0], [130100.0, 1.0], [16700.0, 8.0], [17100.0, 12.0], [18300.0, 21.0], [17500.0, 4.0], [19100.0, 4.0], [18700.0, 8.0], [19900.0, 5.0], [20300.0, 1.0], [19500.0, 12.0], [20700.0, 2.0], [21100.0, 9.0], [21900.0, 12.0], [22700.0, 12.0], [23100.0, 3.0], [24300.0, 1.0], [25100.0, 32.0], [24700.0, 3.0], [26300.0, 9.0], [25900.0, 29.0], [26700.0, 1.0], [27500.0, 2.0], [27100.0, 8.0], [27900.0, 9.0], [29100.0, 5.0], [29500.0, 3.0], [30700.0, 2.0], [30300.0, 1.0], [31100.0, 2.0], [32300.0, 7.0], [33400.0, 100.0], [35000.0, 10.0], [145500.0, 4.0], [38200.0, 8.0], [39000.0, 4.0], [39800.0, 1.0], [42200.0, 2.0], [44600.0, 6.0], [48600.0, 1.0], [49400.0, 1.0], [54200.0, 9.0], [55800.0, 1.0], [59000.0, 2.0], [58200.0, 2.0], [61400.0, 2.0], [59800.0, 1.0], [63000.0, 2.0], [62200.0, 2.0], [65400.0, 3.0], [64600.0, 1.0], [68400.0, 31.0], [66800.0, 2.0], [71600.0, 3.0], [74800.0, 113.0], [76400.0, 1.0], [79600.0, 2.0], [78000.0, 1.0], [95600.0, 2.0], [105200.0, 2.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 195900.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 40.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 34851.0, "series": [{"data": [[0.0, 34851.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 1848.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 23261.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 40.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 169.9940476190475, "minX": 1.68287316E12, "maxY": 3000.0, "series": [{"data": [[1.68287352E12, 395.5], [1.68287322E12, 3000.0], [1.6828734E12, 3000.0], [1.68287358E12, 169.9940476190475], [1.68287328E12, 3000.0], [1.68287346E12, 2664.5427314620806], [1.68287316E12, 3000.0], [1.68287334E12, 3000.0]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68287358E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 54.0, "minX": 3.0, "maxY": 100177.66666666667, "series": [{"data": [[3.0, 100177.66666666667], [5.0, 100176.0], [9.0, 100171.75], [10.0, 100169.0], [11.0, 100162.0], [12.0, 100153.0], [14.0, 100150.5], [15.0, 100149.0], [16.0, 100148.0], [18.0, 100146.5], [19.0, 100083.0], [21.0, 100035.0], [22.0, 100033.0], [23.0, 100031.0], [24.0, 100030.0], [27.0, 100094.33333333333], [30.0, 100093.0], [33.0, 100092.0], [34.0, 100091.0], [37.0, 100090.0], [41.0, 100087.0], [43.0, 100053.0], [42.0, 100087.33333333333], [44.0, 100053.0], [46.0, 100052.0], [48.0, 100052.0], [53.0, 100052.0], [55.0, 100051.14285714286], [58.0, 100050.33333333333], [63.0, 100048.0], [62.0, 100050.0], [66.0, 100047.0], [64.0, 100047.0], [68.0, 100046.0], [76.0, 100044.875], [83.0, 100044.0], [81.0, 100044.0], [80.0, 100044.0], [87.0, 100037.0], [84.0, 100044.0], [89.0, 100037.0], [93.0, 100036.0], [92.0, 100036.0], [102.0, 100032.0], [100.0, 100033.0], [106.0, 100032.0], [105.0, 100032.0], [104.0, 100032.0], [111.0, 100024.0], [110.0, 100026.0], [109.0, 100031.33333333333], [108.0, 100032.0], [115.0, 100022.0], [114.0, 100022.0], [113.0, 100023.0], [112.0, 100024.0], [117.0, 100021.0], [116.0, 100021.0], [122.0, 100019.5], [120.0, 100019.0], [127.0, 100017.0], [126.0, 100019.0], [125.0, 100018.66666666667], [134.0, 100152.5], [133.0, 100151.66666666667], [130.0, 100152.0], [129.0, 100152.0], [141.0, 100150.66666666667], [137.0, 100151.0], [144.0, 100150.0], [159.0, 100148.33333333333], [158.0, 100149.33333333333], [157.0, 100149.0], [156.0, 100148.66666666667], [155.0, 100150.0], [152.0, 100150.0], [167.0, 100139.0], [163.0, 100143.0], [162.0, 100147.8], [161.0, 100148.0], [175.0, 100130.66666666667], [173.0, 100131.0], [168.0, 100137.0], [183.0, 96189.0], [182.0, 97197.0], [181.0, 99011.0], [180.0, 100019.0], [179.0, 99782.0], [178.0, 100122.0], [177.0, 100127.0], [176.0, 100130.66666666667], [191.0, 100048.0], [190.0, 100050.5], [188.0, 100101.0], [187.0, 100122.0], [186.0, 100120.0], [185.0, 100122.0], [184.0, 97760.0], [198.0, 100045.0], [194.0, 100046.0], [192.0, 100047.0], [206.0, 100040.0], [205.0, 100041.5], [203.0, 100043.0], [200.0, 100044.5], [215.0, 100035.0], [214.0, 100035.5], [208.0, 100039.0], [223.0, 100032.66666666667], [221.0, 100032.0], [218.0, 100033.0], [217.0, 100034.0], [231.0, 100025.14285714286], [224.0, 100028.0], [239.0, 100022.0], [238.0, 100022.0], [236.0, 100023.0], [235.0, 100024.0], [234.0, 100024.0], [233.0, 100024.0], [232.0, 100025.0], [247.0, 100020.0], [245.0, 100020.0], [244.0, 100021.0], [243.0, 100021.5], [242.0, 100023.0], [241.0, 100022.0], [240.0, 100022.0], [255.0, 100011.0], [254.0, 100013.0], [253.0, 100017.0], [252.0, 100017.0], [251.0, 100018.33333333333], [248.0, 100020.0], [259.0, 100116.0], [270.0, 100056.0], [268.0, 100063.0], [267.0, 100065.0], [266.0, 100070.0], [265.0, 100077.0], [263.0, 100078.5], [261.0, 100080.0], [260.0, 100081.0], [258.0, 100124.0], [257.0, 96751.0], [256.0, 96753.0], [280.0, 100038.0], [285.0, 100027.5], [283.0, 100028.0], [282.0, 100029.0], [281.0, 100030.0], [279.0, 100038.0], [278.0, 100040.0], [275.0, 100043.0], [273.0, 100044.66666666667], [303.0, 100017.0], [302.0, 100018.0], [301.0, 100019.5], [299.0, 100019.5], [298.0, 100020.0], [295.0, 100020.0], [294.0, 100020.5], [292.0, 100020.4], [318.0, 96346.0], [319.0, 95339.0], [317.0, 96347.0], [316.0, 97355.0], [315.0, 98637.0], [314.0, 99172.0], [313.0, 95744.0], [312.0, 100033.0], [311.0, 100034.0], [304.0, 100014.0], [307.0, 100010.5], [305.0, 100013.0], [310.0, 100036.0], [309.0, 100156.0], [334.0, 85647.0], [335.0, 84640.0], [333.0, 85649.0], [332.0, 86656.0], [331.0, 86658.0], [330.0, 91568.0], [329.0, 91097.0], [328.0, 92104.0], [327.0, 87104.0], [321.0, 95608.0], [320.0, 96616.0], [323.0, 94599.0], [322.0, 95606.0], [326.0, 93587.0], [325.0, 92308.0], [324.0, 94597.0], [350.0, 75997.0], [351.0, 74989.0], [349.0, 81002.0], [348.0, 82009.0], [347.0, 78821.0], [346.0, 79830.0], [345.0, 78017.0], [344.0, 80598.0], [343.0, 80600.0], [337.0, 83867.0], [336.0, 84877.0], [339.0, 82619.0], [338.0, 83626.0], [342.0, 81608.0], [341.0, 80037.0], [340.0, 81044.0], [366.0, 72923.0], [367.0, 71916.0], [365.0, 67922.0], [364.0, 68930.0], [363.0, 68931.0], [362.0, 69940.0], [361.0, 74945.0], [360.0, 75953.0], [359.0, 70950.0], [353.0, 79456.0], [352.0, 80463.0], [355.0, 72970.0], [354.0, 73978.0], [358.0, 71960.0], [357.0, 71961.0], [356.0, 72967.0], [382.0, 65321.0], [383.0, 64313.0], [381.0, 65323.0], [380.0, 66330.0], [379.0, 65859.0], [378.0, 66866.0], [377.0, 66868.0], [376.0, 67876.0], [375.0, 64688.0], [369.0, 67716.0], [368.0, 68725.0], [371.0, 66707.0], [370.0, 67715.0], [374.0, 65696.0], [373.0, 65697.0], [372.0, 66705.0], [398.0, 57244.0], [399.0, 56236.0], [397.0, 57246.0], [396.0, 58253.0], [395.0, 58256.0], [394.0, 59263.0], [393.0, 59265.0], [392.0, 60273.0], [391.0, 60275.0], [385.0, 63303.0], [384.0, 64311.0], [387.0, 62295.0], [386.0, 63301.0], [390.0, 61282.0], [389.0, 61284.0], [388.0, 62292.0], [414.0, 49167.0], [415.0, 48159.0], [413.0, 49169.0], [412.0, 50177.0], [411.0, 50178.0], [410.0, 51186.0], [409.0, 51188.0], [408.0, 52196.0], [407.0, 52198.0], [401.0, 55226.0], [400.0, 56234.0], [403.0, 54216.0], [402.0, 55224.0], [406.0, 53205.0], [405.0, 53207.0], [404.0, 54215.0], [430.0, 41090.0], [431.0, 40081.0], [429.0, 41091.0], [428.0, 42099.0], [427.0, 42103.0], [426.0, 43110.0], [425.0, 43113.0], [424.0, 44119.0], [423.0, 44122.0], [417.0, 47150.0], [416.0, 48157.0], [419.0, 46140.0], [418.0, 47148.0], [422.0, 45130.0], [421.0, 45131.0], [420.0, 46138.0], [446.0, 33008.0], [447.0, 32000.0], [445.0, 33011.0], [444.0, 34018.0], [443.0, 34020.0], [442.0, 35028.0], [441.0, 35030.0], [440.0, 36038.0], [439.0, 36040.0], [433.0, 39071.0], [432.0, 40079.0], [435.0, 38061.0], [434.0, 39069.0], [438.0, 37049.0], [437.0, 37052.0], [436.0, 38059.0], [462.0, 25177.0], [463.0, 24167.0], [461.0, 25177.0], [460.0, 26185.0], [459.0, 26187.0], [458.0, 27193.0], [457.0, 27196.0], [456.0, 28203.0], [455.0, 28206.0], [449.0, 31235.0], [448.0, 32245.0], [451.0, 30227.0], [450.0, 31234.0], [454.0, 29213.0], [453.0, 29214.0], [452.0, 30224.0], [477.0, 17100.0], [478.0, 17100.0], [476.0, 18108.0], [467.0, 22149.0], [466.0, 23156.0], [465.0, 23158.0], [464.0, 24166.0], [475.0, 18110.0], [474.0, 19118.0], [473.0, 19119.0], [472.0, 20128.0], [471.0, 20131.0], [470.0, 21137.0], [469.0, 21139.0], [468.0, 22147.0], [494.0, 16102.0], [495.0, 16103.0], [493.0, 16103.0], [492.0, 16103.0], [491.0, 16104.0], [490.0, 16105.0], [489.0, 16104.0], [488.0, 16105.0], [487.0, 16106.0], [483.0, 16130.0], [480.0, 16130.0], [486.0, 16108.0], [485.0, 16112.0], [484.0, 16111.0], [510.0, 16655.0], [511.0, 16654.0], [508.0, 16655.0], [498.0, 16095.0], [497.0, 16100.0], [496.0, 16103.0], [507.0, 16655.0], [506.0, 16656.5], [504.0, 16656.0], [503.0, 16657.0], [502.0, 16080.0], [501.0, 16085.0], [500.0, 16094.0], [540.0, 16413.0], [542.0, 16412.0], [528.0, 16624.0], [530.0, 16622.0], [532.0, 16620.0], [536.0, 14793.0], [518.0, 16649.0], [516.0, 16650.0], [514.0, 16652.0], [512.0, 16654.0], [524.0, 16627.0], [522.0, 16628.0], [520.0, 16648.0], [534.0, 16598.0], [568.0, 12178.0], [570.0, 14578.0], [562.0, 14580.0], [572.0, 15145.0], [560.0, 14072.0], [550.0, 16400.0], [548.0, 15747.0], [546.0, 16408.0], [544.0, 16410.0], [558.0, 15486.0], [554.0, 14593.0], [552.0, 14602.0], [604.0, 12162.0], [606.0, 12606.0], [594.0, 15136.0], [596.0, 15136.0], [602.0, 15130.0], [600.0, 15131.0], [582.0, 12175.0], [576.0, 15144.0], [590.0, 12171.0], [588.0, 15140.0], [586.0, 15140.0], [598.0, 10090.0], [608.0, 15122.0], [634.0, 15106.0], [626.0, 15111.0], [638.0, 15104.0], [624.0, 15112.0], [622.0, 12149.0], [620.0, 13633.5], [618.0, 15117.0], [616.0, 15118.0], [630.0, 15110.0], [646.0, 15101.0], [656.0, 15085.0], [668.0, 15079.0], [666.0, 15079.666666666666], [642.0, 15102.0], [640.0, 15103.0], [654.0, 15095.0], [652.0, 12130.0], [648.0, 15100.0], [688.0, 12096.0], [690.0, 12095.0], [702.0, 15387.0], [700.0, 10016.0], [698.0, 11574.25], [686.0, 12097.0], [694.0, 13906.5], [728.0, 12077.0], [720.0, 15709.0], [732.0, 12075.0], [730.0, 12076.0], [708.0, 13901.5], [718.0, 12991.5], [714.0, 12085.0], [712.0, 12086.0], [726.0, 15703.0], [760.0, 12062.0], [766.0, 12058.5], [754.0, 15032.0], [764.0, 15684.0], [736.0, 12073.0], [738.0, 12073.0], [742.0, 13061.0], [748.0, 9992.0], [746.0, 15696.0], [744.0, 12072.0], [758.0, 12063.0], [756.0, 12063.0], [768.0, 15683.0], [798.0, 12045.0], [782.0, 15016.0], [770.0, 12057.0], [772.0, 15681.0], [774.0, 12055.0], [780.0, 12052.0], [778.0, 12053.0], [776.0, 15679.0], [788.0, 12047.333333333334], [784.0, 15344.0], [828.0, 13811.0], [830.0, 11998.0], [816.0, 15626.0], [818.0, 13813.5], [826.0, 9923.0], [806.0, 15633.0], [804.0, 12011.0], [800.0, 15636.0], [814.0, 12002.0], [812.0, 14199.333333333334], [810.0, 13836.0], [808.0, 15628.0], [822.0, 9923.0], [856.0, 9894.0], [850.0, 11975.0], [838.0, 13825.0], [836.0, 13827.0], [842.0, 9912.0], [840.0, 15616.0], [854.0, 10936.0], [866.0, 9888.0], [888.0, 12400.0], [864.0, 11965.0], [868.0, 9887.0], [870.0, 9886.0], [876.0, 13774.0], [874.0, 11962.0], [886.0, 11955.0], [884.0, 11959.0], [900.0, 9868.0], [920.0, 11933.0], [926.0, 11916.0], [924.0, 10533.666666666666], [896.0, 10566.0], [898.0, 11948.0], [902.0, 15569.0], [910.0, 11940.0], [908.0, 11941.0], [906.0, 9867.0], [904.0, 9867.0], [918.0, 15561.0], [916.0, 11937.0], [914.0, 11938.0], [932.0, 11912.0], [958.0, 11889.0], [956.0, 9814.0], [934.0, 10873.0], [930.0, 11912.0], [928.0, 11915.0], [940.0, 15531.0], [938.0, 15533.0], [950.0, 11904.0], [946.0, 9829.0], [984.0, 9800.0], [988.0, 9797.0], [978.0, 12324.0], [976.0, 12324.5], [986.0, 9798.0], [974.0, 9803.0], [962.0, 15184.0], [964.0, 14856.0], [966.0, 11886.0], [972.0, 9804.0], [970.0, 9803.0], [968.0, 15506.0], [982.0, 9800.0], [980.0, 9802.0], [1018.0, 11160.0], [1022.0, 9730.0], [1008.0, 15442.0], [1020.0, 9732.0], [994.0, 9795.0], [996.0, 11871.0], [1004.0, 10791.0], [1002.0, 9778.0], [1000.0, 12313.5], [1014.0, 9736.0], [1010.0, 9740.5], [1080.0, 11032.0], [1056.0, 11049.0], [1060.0, 11047.0], [1064.0, 10008.0], [1084.0, 14657.0], [1076.0, 8960.0], [1072.0, 11041.0], [1052.0, 9674.0], [1024.0, 9730.0], [1028.0, 9725.0], [1032.0, 9713.0], [1036.0, 15414.0], [1048.0, 15399.0], [1044.0, 14742.0], [1040.0, 9712.0], [1068.0, 8969.0], [1120.0, 10812.0], [1140.0, 10809.0], [1124.0, 13569.5], [1092.0, 8932.0], [1096.0, 11866.0], [1100.0, 9846.0], [1112.0, 10833.0], [1104.0, 10816.0], [1132.0, 10818.5], [1208.0, 10791.0], [1184.0, 10798.0], [1192.0, 10816.0], [1212.0, 10808.0], [1204.0, 14078.0], [1164.0, 10823.0], [1156.0, 10806.0], [1152.0, 12510.5], [1180.0, 10800.0], [1176.0, 10801.0], [1172.0, 10821.0], [1252.0, 10762.0], [1248.0, 10473.0], [1256.0, 10760.0], [1276.0, 10745.0], [1268.0, 10750.0], [1220.0, 12475.0], [1244.0, 10772.0], [1340.0, 10689.0], [1312.0, 10705.0], [1316.0, 11912.0], [1320.0, 10701.0], [1324.0, 14088.0], [1336.0, 10691.0], [1328.0, 14086.0], [1292.0, 12403.0], [1288.0, 10712.5], [1284.0, 10723.0], [1308.0, 10706.5], [1304.0, 10709.0], [1300.0, 10701.5], [1296.0, 10714.0], [1396.0, 13935.0], [1404.0, 14044.0], [1376.0, 10677.0], [1380.0, 10675.0], [1384.0, 13106.0], [1400.0, 14047.0], [1392.0, 14058.0], [1352.0, 10677.0], [1348.0, 10686.0], [1344.0, 10687.5], [1372.0, 10679.5], [1364.0, 14070.0], [1360.0, 10682.0], [1460.0, 10602.0], [1464.0, 10524.0], [1468.0, 13906.0], [1440.0, 10639.0], [1444.0, 13676.0], [1452.0, 10630.0], [1408.0, 10654.0], [1412.0, 10653.0], [1420.0, 10650.0], [1436.0, 13686.0], [1432.0, 10628.0], [1428.0, 13914.0], [1424.0, 12214.5], [1512.0, 6313.0], [1500.0, 10206.0], [1516.0, 160.0], [1508.0, 10316.8], [1504.0, 10206.0], [1568.0, 147.37500000000003], [1540.0, 149.25], [1536.0, 152.0], [1644.0, 117.83333333333333], [1660.0, 115.16666666666667], [1648.0, 116.97619047619047], [1672.0, 5028.0], [1668.0, 115.0], [1760.0, 9034.0], [1784.0, 9030.0], [1768.0, 9033.0], [1772.0, 8100.0], [1780.0, 8100.0], [1752.0, 81.0], [1748.0, 81.64000000000001], [1744.0, 82.0], [1848.0, 10145.0], [1852.0, 9017.0], [1828.0, 8090.0], [1832.0, 8089.5], [1836.0, 10862.0], [1844.0, 9019.0], [1840.0, 8088.0], [1804.0, 9026.0], [1800.0, 10154.0], [1820.0, 9023.0], [1816.0, 8092.0], [1808.0, 8559.5], [1912.0, 8994.0], [1888.0, 12691.0], [1892.0, 12696.5], [1896.0, 8998.0], [1900.0, 8997.5], [1916.0, 12678.0], [1908.0, 8529.5], [1904.0, 12706.0], [1856.0, 9016.0], [1860.0, 12701.0], [1864.0, 9014.0], [1868.0, 12699.0], [1884.0, 12694.0], [1880.0, 9010.0], [1876.0, 12695.0], [1980.0, 12666.0], [1960.0, 8982.0], [2040.0, 8295.699999999999], [2020.0, 10063.45945945946], [2008.0, 8979.0], [2024.0, 10817.5], [2120.0, 126.0], [2064.0, 7863.0], [2056.0, 7864.0], [2048.0, 7929.285714285714], [2096.0, 8786.0], [2200.0, 118.0], [2248.0, 157.0], [2216.0, 96.0], [2208.0, 115.0], [2328.0, 144.0], [2360.0, 162.0], [2344.0, 142.0], [2336.0, 143.0555555555556], [2544.0, 148.0], [2552.0, 148.2], [2528.0, 149.99999999999997], [2472.0, 129.0], [2464.0, 130.0], [2656.0, 101.0], [2560.0, 146.625], [2648.0, 102.0], [2728.0, 126.0], [2720.0, 126.6], [2936.0, 201.5], [2888.0, 145.0], [2880.0, 147.0], [2904.0, 144.5], [2840.0, 148.0], [2872.0, 146.0], [2864.0, 147.0], [2848.0, 147.0], [2992.0, 165.0], [3000.0, 5531.817698835862], [2169.0, 121.0], [2065.0, 8793.5], [2057.0, 8796.0], [2201.0, 118.0], [2241.0, 158.0], [2193.0, 117.0], [2185.0, 118.5], [2233.0, 160.0], [2225.0, 160.0], [2409.0, 137.36363636363637], [2361.0, 156.0], [2377.0, 146.0], [2401.0, 139.0], [2345.0, 142.0], [2337.0, 143.1], [2393.0, 145.0], [2545.0, 147.75], [2553.0, 148.0], [2537.0, 148.0], [2529.0, 149.5], [2457.0, 130.0], [2473.0, 129.0], [2465.0, 130.0], [2577.0, 120.16666666666667], [2657.0, 100.72972972972977], [2561.0, 147.0], [2649.0, 102.0], [2737.0, 125.25], [2721.0, 126.0], [2913.0, 89.33333333333333], [2937.0, 321.16666666666663], [2889.0, 145.0], [2905.0, 144.5], [2825.0, 148.0], [2841.0, 148.0], [2873.0, 146.0], [2865.0, 147.0], [2857.0, 147.0], [2993.0, 164.5], [2985.0, 165.66666666666666], [1081.0, 11032.0], [1085.0, 11026.0], [1061.0, 14673.0], [1065.0, 11046.0], [1077.0, 14659.0], [1073.0, 14008.0], [1029.0, 9727.0], [1053.0, 8975.0], [1049.0, 9697.0], [1041.0, 9708.0], [1069.0, 11042.0], [1145.0, 10817.75], [1125.0, 10531.0], [1129.0, 10820.5], [1149.0, 12511.0], [1141.0, 10808.0], [1137.0, 10809.333333333334], [1089.0, 9985.0], [1093.0, 11008.0], [1097.0, 11863.0], [1101.0, 9844.0], [1117.0, 10814.0], [1109.0, 10834.0], [1105.0, 10814.0], [1205.0, 10811.0], [1189.0, 10798.75], [1185.0, 10817.0], [1197.0, 10802.0], [1201.0, 11822.0], [1165.0, 10804.0], [1177.0, 13255.0], [1173.0, 10821.0], [1169.0, 10803.5], [1265.0, 10751.5], [1273.0, 10736.5], [1249.0, 10764.666666666666], [1257.0, 14148.0], [1261.0, 10755.0], [1229.0, 10776.0], [1221.0, 10789.0], [1217.0, 10796.0], [1245.0, 10773.0], [1237.0, 10779.0], [1333.0, 10685.5], [1321.0, 10701.0], [1325.0, 10697.0], [1337.0, 10691.0], [1329.0, 10696.0], [1293.0, 10718.0], [1285.0, 10723.0], [1281.0, 10743.5], [1309.0, 10687.0], [1305.0, 10707.0], [1301.0, 10710.0], [1401.0, 10657.0], [1405.0, 10655.0], [1377.0, 10676.0], [1385.0, 14060.0], [1389.0, 14059.0], [1397.0, 10660.0], [1393.0, 10669.0], [1357.0, 12377.5], [1345.0, 10668.0], [1373.0, 10678.0], [1369.0, 10679.5], [1365.0, 10663.0], [1361.0, 10664.0], [1465.0, 12958.0], [1469.0, 13906.0], [1441.0, 14027.0], [1445.0, 14022.0], [1449.0, 10632.0], [1453.0, 10630.0], [1461.0, 10537.0], [1457.0, 12323.5], [1413.0, 14041.0], [1417.0, 10650.5], [1437.0, 10644.0], [1433.0, 14034.0], [1425.0, 10649.0], [1477.0, 13427.0], [1521.0, 158.0], [1473.0, 13905.5], [1497.0, 9022.0], [1513.0, 6310.0], [1509.0, 10345.125], [1505.0, 10205.0], [1569.0, 147.0], [1565.0, 149.0], [1537.0, 150.6], [1661.0, 115.0], [1645.0, 118.0], [1673.0, 5026.0], [1665.0, 115.0], [1781.0, 9031.0], [1765.0, 9034.0], [1769.0, 9033.0], [1785.0, 9030.0], [1777.0, 9032.0], [1757.0, 4047.0], [1749.0, 80.83333333333333], [1745.0, 82.0], [1849.0, 9017.0], [1825.0, 9022.0], [1833.0, 8089.0], [1837.0, 9020.0], [1853.0, 8085.0], [1845.0, 9018.0], [1841.0, 9019.0], [1805.0, 9026.0], [1801.0, 9027.0], [1797.0, 9025.833333333332], [1821.0, 9023.0], [1817.0, 9024.0], [1813.0, 8559.5], [1809.0, 9025.0], [1905.0, 12682.0], [1889.0, 10126.0], [1913.0, 8994.0], [1893.0, 10126.0], [1897.0, 12684.0], [1901.0, 12683.0], [1857.0, 12180.0], [1865.0, 12700.0], [1869.0, 12698.0], [1885.0, 9009.0], [1881.0, 12694.0], [1873.0, 10853.0], [1933.0, 8984.0], [1949.0, 12667.0], [1965.0, 8982.0], [2017.0, 9354.0], [1993.0, 8514.0], [2013.0, 8978.0], [2009.0, 8980.0], [2025.0, 12652.0], [2066.0, 7861.0], [2170.0, 120.0], [2130.0, 124.33333333333333], [2058.0, 9713.666666666666], [2242.0, 158.0], [2202.0, 118.0], [2186.0, 118.66666666666667], [2378.0, 146.0], [2362.0, 154.0], [2346.0, 142.0], [2386.0, 147.0], [2538.0, 148.0], [2546.0, 148.0], [2530.0, 148.5], [2474.0, 129.14285714285714], [2466.0, 130.0], [2650.0, 102.0], [2730.0, 126.12500000000001], [2722.0, 126.0], [2914.0, 196.0], [2898.0, 144.0], [2938.0, 179.0], [2882.0, 146.0], [2890.0, 145.0], [2818.0, 148.0], [2874.0, 146.0], [2866.0, 147.0], [2858.0, 147.0], [2978.0, 165.0], [2954.0, 165.0], [2067.0, 8327.0], [2131.0, 123.6], [2123.0, 125.0], [2091.0, 8789.0], [2195.0, 117.875], [2259.0, 155.0], [2203.0, 117.0], [2187.0, 119.0], [2179.0, 119.0], [2235.0, 160.0], [2355.0, 141.0], [2347.0, 142.0], [2339.0, 143.0], [2555.0, 147.25], [2523.0, 150.0], [2547.0, 147.66666666666666], [2459.0, 130.2], [2475.0, 129.05000000000004], [2467.0, 130.5], [2571.0, 120.25], [2811.0, 149.0], [2731.0, 126.0], [2883.0, 146.16666666666666], [2891.0, 145.0], [2923.0, 194.75], [2875.0, 146.0], [2867.0, 147.16666666666666], [2859.0, 147.0], [2955.0, 165.0], [539.0, 16415.0], [537.0, 16416.0], [543.0, 16412.0], [529.0, 16624.0], [531.0, 16621.0], [533.0, 16598.0], [541.0, 16413.0], [517.0, 16650.0], [515.0, 16652.0], [513.0, 16653.0], [527.0, 16625.5], [525.0, 16626.0], [521.0, 16638.0], [535.0, 14795.0], [549.0, 16404.0], [575.0, 14155.0], [571.0, 15803.0], [551.0, 14605.0], [547.0, 16407.0], [545.0, 16410.0], [559.0, 14073.0], [553.0, 14599.0], [567.0, 13662.5], [565.0, 13662.5], [563.0, 15146.0], [601.0, 15131.0], [607.0, 15126.0], [593.0, 13653.5], [597.0, 12168.0], [603.0, 15129.0], [583.0, 15141.0], [581.0, 15143.5], [579.0, 13659.5], [577.0, 15143.0], [591.0, 15138.0], [589.0, 12172.0], [585.0, 15140.5], [599.0, 15134.0], [633.0, 13622.5], [639.0, 15103.0], [625.0, 15111.0], [637.0, 13127.0], [615.0, 15118.5], [613.0, 15119.0], [611.0, 15120.0], [609.0, 15121.0], [623.0, 15114.0], [621.0, 12150.0], [631.0, 12141.0], [629.0, 13132.0], [647.0, 15101.0], [667.0, 15079.0], [657.0, 15084.0], [669.0, 15078.0], [671.0, 15406.5], [645.0, 13420.0], [655.0, 15095.0], [651.0, 15097.0], [649.0, 15098.0], [663.0, 13596.5], [661.0, 13597.5], [659.0, 13600.5], [679.0, 13584.0], [703.0, 12090.0], [689.0, 15062.0], [699.0, 12093.0], [677.0, 15397.0], [675.0, 13585.5], [673.0, 15069.0], [685.0, 12097.0], [683.0, 15393.0], [681.0, 13583.5], [693.0, 10018.0], [691.0, 12094.0], [731.0, 12076.0], [733.0, 15699.0], [735.0, 13886.5], [721.0, 15705.0], [725.0, 13561.5], [723.0, 12079.0], [729.0, 15702.0], [711.0, 15385.0], [709.0, 12089.0], [707.0, 15385.0], [719.0, 15051.0], [713.0, 15710.0], [727.0, 12078.0], [761.0, 12061.0], [767.0, 12058.0], [753.0, 13878.5], [763.0, 15684.0], [751.0, 13878.5], [737.0, 12073.0], [741.0, 15040.0], [749.0, 9992.0], [747.0, 12070.0], [745.0, 12071.0], [759.0, 13546.5], [755.0, 12064.0], [793.0, 12046.5], [785.0, 15015.0], [799.0, 12044.0], [797.0, 13693.0], [769.0, 15024.0], [773.0, 12056.0], [775.0, 15680.0], [781.0, 12049.0], [791.0, 12491.5], [789.0, 9971.0], [825.0, 9923.0], [819.0, 15625.0], [831.0, 10959.5], [817.0, 12002.0], [807.0, 12007.0], [805.0, 12009.0], [803.0, 13219.333333333334], [813.0, 9926.0], [823.0, 15624.0], [821.0, 11999.5], [857.0, 11969.0], [851.0, 15600.0], [861.0, 11966.0], [863.0, 13448.5], [849.0, 12750.0], [859.0, 11968.0], [839.0, 11991.0], [837.0, 11993.0], [835.0, 13807.0], [833.0, 10957.5], [847.0, 10948.0], [845.0, 10948.0], [843.0, 11987.0], [841.0, 11989.0], [855.0, 14941.0], [853.0, 15600.0], [889.0, 11953.0], [883.0, 10922.0], [893.0, 12725.5], [891.0, 12727.5], [879.0, 12949.666666666666], [865.0, 9888.0], [867.0, 11964.0], [869.0, 9887.0], [871.0, 11962.0], [873.0, 11962.0], [885.0, 11954.0], [881.0, 11960.5], [897.0, 15575.0], [927.0, 11916.0], [925.0, 9841.0], [921.0, 9856.0], [911.0, 11940.0], [901.0, 13756.5], [909.0, 14908.0], [907.0, 15567.0], [905.0, 10905.0], [919.0, 11935.0], [931.0, 11912.0], [959.0, 11890.0], [957.0, 10505.666666666666], [953.0, 11211.0], [929.0, 15538.0], [943.0, 9830.5], [941.0, 9830.0], [937.0, 11910.333333333334], [947.0, 11904.0], [945.0, 12679.5], [987.0, 9797.0], [991.0, 9796.666666666666], [985.0, 15499.0], [963.0, 9812.0], [965.0, 10849.5], [967.0, 14853.0], [973.0, 9803.0], [969.0, 9804.0], [981.0, 9801.0], [979.0, 14845.0], [999.0, 11869.0], [1023.0, 9729.0], [1021.0, 15435.0], [1019.0, 9734.0], [1007.0, 9751.0], [993.0, 10834.0], [995.0, 14838.0], [997.0, 11869.0], [1005.0, 9752.0], [1001.0, 9791.0], [1013.0, 9735.0], [1011.0, 15437.0], [1082.0, 14328.0], [1086.0, 11027.0], [1058.0, 8972.5], [1062.0, 8971.0], [1078.0, 8957.0], [1074.0, 11036.0], [1026.0, 9727.5], [1030.0, 9726.0], [1034.0, 9714.0], [1050.0, 9697.0], [1046.0, 9699.0], [1042.0, 9707.0], [1066.0, 8969.0], [1138.0, 10528.0], [1150.0, 10825.0], [1122.0, 11203.0], [1130.0, 10810.0], [1090.0, 8936.0], [1094.0, 12815.0], [1098.0, 10855.0], [1102.0, 8837.0], [1114.0, 12040.0], [1110.0, 10833.5], [1134.0, 10809.0], [1210.0, 10810.0], [1206.0, 10792.0], [1190.0, 10797.0], [1194.0, 10806.0], [1198.0, 10795.0], [1214.0, 10798.5], [1202.0, 10792.0], [1162.0, 10810.666666666666], [1158.0, 10805.0], [1154.0, 10825.0], [1182.0, 10800.0], [1174.0, 10802.0], [1170.0, 10812.5], [1274.0, 10745.0], [1278.0, 10744.0], [1250.0, 10771.0], [1258.0, 10739.0], [1270.0, 10747.0], [1226.0, 10767.0], [1222.0, 10788.0], [1218.0, 10804.0], [1242.0, 10772.0], [1338.0, 10690.0], [1334.0, 10692.0], [1318.0, 12389.0], [1342.0, 10688.0], [1314.0, 10704.0], [1326.0, 10696.0], [1330.0, 10696.0], [1294.0, 10696.0], [1290.0, 10719.0], [1286.0, 10722.0], [1310.0, 10687.0], [1306.0, 10707.0], [1302.0, 10710.0], [1298.0, 10714.0], [1398.0, 14049.0], [1382.0, 14002.0], [1406.0, 10654.0], [1402.0, 10656.0], [1358.0, 10683.0], [1354.0, 12379.5], [1350.0, 12380.5], [1370.0, 10679.0], [1366.0, 10680.0], [1466.0, 13907.0], [1442.0, 14025.0], [1450.0, 10631.0], [1470.0, 13906.0], [1458.0, 14015.0], [1410.0, 10653.0], [1414.0, 10633.0], [1422.0, 14038.0], [1438.0, 10643.0], [1430.0, 13908.0], [1426.0, 13083.0], [1502.0, 10206.0], [1474.0, 13905.0], [1494.0, 10207.0], [1518.0, 159.0], [1514.0, 168.0], [1510.0, 7051.0], [1506.0, 10486.0], [1642.0, 117.75], [1646.0, 118.0], [1670.0, 114.33333333333334], [1666.0, 115.0], [1786.0, 9030.0], [1762.0, 9034.5], [1766.0, 9033.0], [1770.0, 8101.0], [1774.0, 8566.0], [1782.0, 9031.0], [1758.0, 3025.0], [1754.0, 80.5], [1750.0, 80.75], [1746.0, 81.83333333333333], [1846.0, 10145.0], [1826.0, 9022.0], [1830.0, 9584.5], [1834.0, 12730.0], [1854.0, 12700.0], [1842.0, 9019.0], [1806.0, 9026.0], [1798.0, 9027.0], [1794.0, 9030.0], [1822.0, 9023.0], [1818.0, 9023.0], [1810.0, 9025.0], [1918.0, 8984.5], [1906.0, 12681.0], [1890.0, 8999.0], [1894.0, 12684.0], [1898.0, 8066.0], [1902.0, 8997.0], [1910.0, 10838.0], [1858.0, 9016.0], [1862.0, 12701.0], [1866.0, 12696.0], [1870.0, 12694.0], [1886.0, 9008.0], [1878.0, 9011.0], [1970.0, 8981.5], [1950.0, 8983.0], [1938.0, 8984.0], [1966.0, 12667.0], [2042.0, 7865.333333333333], [2046.0, 12483.0], [1990.0, 8981.0], [2014.0, 12688.0], [2010.0, 8979.5], [2026.0, 12491.0], [2018.0, 10637.555555555555], [2060.0, 8329.0], [2172.0, 121.0], [2052.0, 1805.0], [2132.0, 122.5], [2244.0, 158.0], [2204.0, 116.85714285714285], [2188.0, 118.33333333333334], [2236.0, 159.33333333333334], [2220.0, 65.25], [2380.0, 146.0], [2356.0, 141.0], [2388.0, 146.0], [2548.0, 148.0], [2524.0, 150.5], [2540.0, 148.5], [2460.0, 130.0], [2452.0, 131.0], [2476.0, 158.0], [2468.0, 129.66666666666666], [2652.0, 101.1], [2580.0, 105.33333333333333], [2564.0, 146.0], [2740.0, 124.56], [2732.0, 125.5], [2724.0, 126.0], [2892.0, 145.0], [2884.0, 146.25000000000003], [2900.0, 144.0], [2828.0, 148.0], [2844.0, 148.0], [2876.0, 146.0], [2868.0, 146.16666666666669], [2956.0, 165.5], [2157.0, 122.0], [2077.0, 8605.0], [2125.0, 125.28571428571429], [2173.0, 119.71428571428571], [2117.0, 126.75], [2061.0, 8795.0], [2053.0, 8330.0], [2085.0, 8790.333333333334], [2205.0, 117.0], [2253.0, 156.25], [2245.0, 157.0], [2197.0, 117.75], [2189.0, 119.0], [2221.0, 783.0], [2333.0, 143.27272727272725], [2389.0, 146.11111111111111], [2325.0, 145.0], [2357.0, 140.0], [2349.0, 142.0], [2341.0, 142.0], [2541.0, 149.0], [2549.0, 147.83333333333331], [2461.0, 130.0], [2453.0, 130.0], [2565.0, 146.33333333333334], [2653.0, 101.0], [2733.0, 125.0], [2725.0, 126.0], [2925.0, 199.5], [2885.0, 146.0], [2893.0, 145.33333333333334], [2901.0, 144.0], [2909.0, 143.79999999999998], [2821.0, 148.0], [2877.0, 146.0], [2869.0, 147.0], [2861.0, 147.5], [2949.0, 251.72727272727272], [2981.0, 164.66666666666666], [1075.0, 8960.0], [1087.0, 11023.0], [1059.0, 8972.0], [1067.0, 11045.0], [1083.0, 8955.0], [1039.0, 9711.666666666666], [1035.0, 9713.5], [1031.0, 9723.0], [1027.0, 14770.0], [1055.0, 8973.0], [1051.0, 14737.0], [1047.0, 9698.5], [1043.0, 15403.0], [1071.0, 10003.5], [1091.0, 15212.0], [1147.0, 12450.0], [1127.0, 10830.0], [1119.0, 10726.0], [1095.0, 12813.0], [1099.0, 10854.0], [1103.0, 8835.0], [1115.0, 10814.0], [1111.0, 10814.0], [1107.0, 10834.0], [1203.0, 10813.0], [1211.0, 10810.0], [1215.0, 10788.0], [1191.0, 13858.0], [1207.0, 10810.0], [1167.0, 10672.0], [1159.0, 10805.0], [1155.0, 10825.0], [1183.0, 10799.0], [1179.0, 10800.0], [1279.0, 10734.5], [1275.0, 10745.0], [1251.0, 10763.0], [1255.0, 10754.666666666666], [1259.0, 10737.0], [1263.0, 12436.0], [1271.0, 10747.5], [1267.0, 10740.5], [1231.0, 10785.5], [1227.0, 10767.5], [1223.0, 10786.0], [1243.0, 13820.0], [1239.0, 10772.666666666666], [1235.0, 10782.0], [1335.0, 10692.0], [1331.0, 10695.0], [1319.0, 10701.0], [1323.0, 10700.0], [1339.0, 10690.0], [1283.0, 12410.0], [1311.0, 10705.0], [1303.0, 10708.0], [1403.0, 10656.0], [1407.0, 10635.0], [1379.0, 11892.5], [1383.0, 10673.0], [1387.0, 12365.5], [1391.0, 11051.5], [1399.0, 14048.0], [1395.0, 12354.0], [1359.0, 14072.0], [1355.0, 10685.0], [1347.0, 10677.5], [1375.0, 12372.5], [1367.0, 14069.0], [1363.0, 12375.5], [1467.0, 10518.0], [1471.0, 10516.0], [1443.0, 14024.0], [1447.0, 12153.5], [1451.0, 10631.0], [1455.0, 12314.5], [1463.0, 12102.5], [1459.0, 10608.0], [1439.0, 13076.0], [1415.0, 10652.0], [1419.0, 11031.5], [1435.0, 12339.5], [1431.0, 14035.0], [1427.0, 14036.0], [1511.0, 7050.0], [1515.0, 165.0], [1535.0, 150.0], [1479.0, 12208.5], [1475.0, 13904.0], [1499.0, 9613.75], [1519.0, 158.5], [1507.0, 10206.0], [1539.0, 149.0], [1567.0, 148.0], [1563.0, 147.70000000000002], [1663.0, 115.5], [1643.0, 117.83333333333333], [1659.0, 116.0], [1647.0, 117.93333333333334], [1671.0, 105.0], [1779.0, 8566.0], [1763.0, 9034.0], [1791.0, 8098.0], [1767.0, 9033.0], [1775.0, 9032.0], [1739.0, 82.0], [1759.0, 3022.0], [1755.0, 54.0], [1751.0, 80.75], [1747.0, 81.75], [1851.0, 9017.0], [1855.0, 9016.0], [1827.0, 9023.0], [1839.0, 10863.0], [1847.0, 9018.0], [1843.0, 9019.0], [1803.0, 9124.0], [1799.0, 9027.0], [1823.0, 9023.0], [1815.0, 8558.0], [1811.0, 9025.0], [1859.0, 9015.0], [1895.0, 8998.0], [1903.0, 8996.0], [1915.0, 8994.0], [1887.0, 12718.0], [1867.0, 9013.0], [1871.0, 9012.0], [1883.0, 9009.0], [1879.0, 9010.0], [1875.0, 10854.0], [1979.0, 8981.0], [1963.0, 12668.0], [1931.0, 8984.0], [1967.0, 8982.0], [1955.0, 12669.0], [1991.0, 8980.0], [2039.0, 7866.0], [2015.0, 8512.0], [2011.0, 10215.666666666666], [2007.0, 8979.0], [2019.0, 10494.529411764706], [2126.0, 124.0], [2054.0, 8796.0], [2094.0, 8789.0], [2086.0, 8603.8], [2206.0, 117.00000000000001], [2262.0, 155.1], [2246.0, 157.0], [2198.0, 118.0], [2222.0, 1027.0], [2406.0, 138.0], [2334.0, 143.1], [2382.0, 146.0], [2326.0, 145.0], [2350.0, 142.0], [2342.0, 142.0], [2390.0, 146.5], [2550.0, 147.33333333333334], [2542.0, 147.83333333333334], [2454.0, 130.5], [2470.0, 129.25], [2654.0, 101.0], [2646.0, 103.0], [2734.0, 125.0], [2918.0, 197.33333333333334], [2926.0, 207.0], [2934.0, 191.5], [2886.0, 145.25], [2894.0, 145.2], [2910.0, 90.0], [2878.0, 146.0], [2822.0, 148.0], [2870.0, 146.25000000000003], [2862.0, 147.0], [2982.0, 164.0], [2958.0, 165.0], [2127.0, 125.0], [2055.0, 12482.0], [2095.0, 8787.0], [2087.0, 8390.57142857143], [2143.0, 122.0], [2135.0, 124.0], [2207.0, 116.0], [2183.0, 119.0], [2231.0, 159.0], [2215.0, 95.71428571428571], [2359.0, 140.0], [2335.0, 143.0], [2351.0, 141.0], [2343.0, 142.5], [2391.0, 146.0], [2543.0, 147.66666666666666], [2567.0, 146.0], [2655.0, 101.0], [2647.0, 102.0], [2735.0, 125.66666666666667], [2719.0, 126.5], [2727.0, 126.09090909090908], [2927.0, 206.0], [2887.0, 145.0], [2895.0, 145.0], [2903.0, 144.0], [2919.0, 191.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[2925.647049999997, 6205.791300000108]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 3000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 991.2, "minX": 1.68287316E12, "maxY": 163361.68333333332, "series": [{"data": [[1.68287352E12, 1446.3166666666666], [1.68287322E12, 132900.46666666667], [1.6828734E12, 132154.13333333333], [1.68287358E12, 4042.0833333333335], [1.68287328E12, 163361.68333333332], [1.68287346E12, 110300.91666666667], [1.68287316E12, 11769.083333333334], [1.68287334E12, 148804.85]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.68287352E12, 991.2], [1.68287322E12, 96339.6], [1.6828734E12, 93450.0], [1.68287358E12, 2822.4], [1.68287328E12, 116508.0], [1.68287346E12, 80203.2], [1.68287316E12, 9021.6], [1.68287334E12, 104328.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68287358E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 3036.9432859967624, "minX": 1.68287316E12, "maxY": 99469.35416666663, "series": [{"data": [[1.68287352E12, 57024.6186440678], [1.68287322E12, 6697.323306303959], [1.6828734E12, 3036.9432859967624], [1.68287358E12, 99469.35416666663], [1.68287328E12, 8252.2448407277], [1.68287346E12, 3169.7645580226213], [1.68287316E12, 6842.454376163864], [1.68287334E12, 5572.255755916881]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68287358E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 3028.9898436095705, "minX": 1.68287316E12, "maxY": 99469.32142857148, "series": [{"data": [[1.68287352E12, 57024.60169491527], [1.68287322E12, 6697.315371872015], [1.6828734E12, 3028.9898436095705], [1.68287358E12, 99469.32142857148], [1.68287328E12, 8051.255051412955], [1.68287346E12, 3169.7567029744337], [1.68287316E12, 6842.337988826812], [1.68287334E12, 5550.722508452761]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68287358E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.05084745762711866, "minX": 1.68287316E12, "maxY": 4003.813073579144, "series": [{"data": [[1.68287352E12, 0.05084745762711866], [1.68287322E12, 498.7834161653155], [1.6828734E12, 416.85403559230923], [1.68287358E12, 0.22916666666666663], [1.68287328E12, 2249.8127561659585], [1.68287346E12, 2.1832844574780053], [1.68287316E12, 74.08845437616388], [1.68287334E12, 4003.813073579144]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68287358E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 9.0, "minX": 1.68287316E12, "maxY": 195977.0, "series": [{"data": [[1.68287352E12, 83867.0], [1.68287322E12, 69536.0], [1.6828734E12, 195977.0], [1.68287358E12, 100178.0], [1.68287328E12, 104328.0], [1.68287346E12, 28206.0], [1.68287316E12, 15773.0], [1.68287334E12, 148508.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.68287352E12, 79850.7], [1.68287322E12, 10649.0], [1.6828734E12, 7750.0], [1.68287358E12, 100149.3], [1.68287328E12, 10748.9], [1.68287346E12, 10786.0], [1.68287316E12, 11714.5], [1.68287334E12, 5795.799999999999]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.68287352E12, 83821.21], [1.68287322E12, 55472.6], [1.6828734E12, 65311.0], [1.68287358E12, 100176.63], [1.68287328E12, 100137.29], [1.68287346E12, 17100.0], [1.68287316E12, 14276.25], [1.68287334E12, 133006.79]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.68287352E12, 81072.2], [1.68287322E12, 30657.5], [1.6828734E12, 12642.0], [1.68287358E12, 100152.0], [1.68287328E12, 66380.25], [1.68287346E12, 13666.0], [1.68287316E12, 13151.75], [1.68287334E12, 28058.04999999998]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.68287352E12, 29213.0], [1.68287322E12, 20.0], [1.6828734E12, 20.0], [1.68287358E12, 84640.0], [1.68287328E12, 16.0], [1.68287346E12, 9.0], [1.68287316E12, 50.0], [1.68287334E12, 20.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.68287352E12, 58254.5], [1.68287322E12, 5285.0], [1.6828734E12, 140.0], [1.68287358E12, 100043.0], [1.68287328E12, 2890.0], [1.68287346E12, 144.0], [1.68287316E12, 6901.5], [1.68287334E12, 129.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68287358E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 52.0, "minX": 1.0, "maxY": 133698.5, "series": [{"data": [[2.0, 53206.0], [3.0, 7184.0], [4.0, 44180.5], [5.0, 1293.0], [6.0, 9975.0], [7.0, 22855.5], [8.0, 8675.0], [9.0, 3972.5], [10.0, 1608.0], [12.0, 2123.5], [15.0, 2157.0], [16.0, 101015.5], [21.0, 12897.5], [22.0, 1040.0], [24.0, 16104.0], [27.0, 7323.0], [28.0, 3806.5], [29.0, 381.0], [30.0, 23327.0], [31.0, 2144.5], [32.0, 3174.5], [33.0, 7178.0], [36.0, 52.0], [38.0, 4763.0], [40.0, 8049.0], [41.0, 6019.0], [43.0, 11027.0], [46.0, 6156.0], [50.0, 5630.0], [51.0, 6166.0], [57.0, 4702.0], [56.0, 16621.5], [63.0, 100020.0], [62.0, 100034.5], [66.0, 7008.0], [65.0, 65.0], [68.0, 3326.5], [75.0, 6104.0], [73.0, 4668.0], [72.0, 144.0], [77.0, 942.0], [76.0, 6607.5], [84.0, 81.0], [90.0, 5035.0], [92.0, 5588.0], [95.0, 6910.0], [97.0, 129.0], [101.0, 6169.0], [132.0, 93.0], [131.0, 676.0], [141.0, 143.0], [139.0, 143.0], [147.0, 1980.5], [146.0, 3404.5], [158.0, 1188.0], [155.0, 132.0], [156.0, 100051.0], [160.0, 149.0], [161.0, 114.0], [162.0, 155.0], [175.0, 2164.0], [168.0, 120.0], [182.0, 3560.5], [176.0, 119.0], [189.0, 1315.0], [188.0, 7181.0], [197.0, 145.0], [196.0, 120.0], [202.0, 2211.5], [204.0, 130.0], [205.0, 136.0], [200.0, 122.0], [206.0, 113.0], [203.0, 143.0], [201.0, 134.0], [214.0, 5016.5], [208.0, 96.0], [210.0, 12638.0], [213.0, 141.0], [220.0, 88.0], [217.0, 123.0], [221.0, 146.0], [224.0, 159.0], [225.0, 120.0], [238.0, 122.0], [237.0, 160.0], [244.0, 140.0], [249.0, 7000.0], [252.0, 7758.0], [257.0, 121.0], [268.0, 3322.0], [261.0, 122.0], [267.0, 132.0], [270.0, 119.5], [269.0, 117.0], [256.0, 145.0], [283.0, 125.0], [275.0, 4871.0], [288.0, 599.0], [314.0, 10473.5], [324.0, 318.0], [337.0, 7902.0], [350.0, 3057.5], [340.0, 132.0], [345.0, 153.0], [360.0, 143.0], [359.0, 9833.0], [382.0, 131.0], [381.0, 4735.0], [373.0, 128.5], [376.0, 107.0], [385.0, 128.0], [384.0, 7428.0], [392.0, 117.0], [394.0, 130.0], [389.0, 122.0], [391.0, 7004.0], [387.0, 3883.0], [396.0, 123.0], [399.0, 3948.0], [398.0, 131.0], [397.0, 143.0], [390.0, 115.0], [401.0, 154.0], [406.0, 10205.0], [400.0, 123.0], [405.0, 136.0], [403.0, 130.0], [402.0, 129.0], [414.0, 135.5], [408.0, 101.0], [404.0, 121.0], [412.0, 146.0], [427.0, 4137.0], [416.0, 3498.0], [423.0, 181.0], [432.0, 6161.0], [444.0, 596.5], [447.0, 277.0], [446.0, 126.0], [452.0, 140.0], [461.0, 8976.0], [474.0, 5936.0], [484.0, 7059.0], [494.0, 12076.0], [505.0, 145.0], [530.0, 6193.0], [543.0, 108.0], [562.0, 3982.5], [557.0, 130.0], [567.0, 5966.0], [605.0, 8679.0], [598.0, 5116.0], [604.0, 130.0], [603.0, 124.0], [592.0, 113.0], [587.0, 173.0], [586.0, 202.0], [639.0, 172.0], [660.0, 5638.0], [666.0, 114.0], [676.0, 6870.0], [678.0, 7197.0], [687.0, 5753.0], [745.0, 152.0], [779.0, 178.0], [815.0, 197.0], [879.0, 3803.0], [1.0, 63302.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[543.0, 72052.0], [204.0, 133698.5], [879.0, 109746.0], [252.0, 88350.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 879.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 101015.5, "series": [{"data": [[2.0, 53206.0], [3.0, 7184.0], [4.0, 44180.5], [5.0, 1293.0], [6.0, 9975.0], [7.0, 22855.5], [8.0, 8675.0], [9.0, 3972.5], [10.0, 1603.0], [12.0, 2123.5], [15.0, 2156.0], [16.0, 101015.5], [21.0, 12897.5], [22.0, 1040.0], [24.0, 16104.0], [27.0, 7323.0], [28.0, 3806.5], [29.0, 381.0], [30.0, 23327.0], [31.0, 2144.5], [32.0, 3174.5], [33.0, 7178.0], [36.0, 52.0], [38.0, 4763.0], [40.0, 8049.0], [41.0, 6019.0], [43.0, 11027.0], [46.0, 6156.0], [50.0, 5630.0], [51.0, 6166.0], [57.0, 4702.0], [56.0, 16621.5], [63.0, 100020.0], [62.0, 100034.5], [66.0, 7008.0], [65.0, 65.0], [68.0, 3326.5], [75.0, 6104.0], [73.0, 4668.0], [72.0, 144.0], [77.0, 942.0], [76.0, 6607.5], [84.0, 81.0], [90.0, 5035.0], [92.0, 5588.0], [95.0, 6910.0], [97.0, 129.0], [101.0, 6169.0], [132.0, 93.0], [131.0, 676.0], [141.0, 143.0], [139.0, 143.0], [147.0, 1980.5], [146.0, 3404.5], [158.0, 1188.0], [155.0, 132.0], [156.0, 100051.0], [160.0, 149.0], [161.0, 114.0], [162.0, 155.0], [175.0, 2164.0], [168.0, 120.0], [182.0, 3560.5], [176.0, 119.0], [189.0, 1315.0], [188.0, 7181.0], [197.0, 145.0], [196.0, 120.0], [202.0, 2211.5], [204.0, 130.0], [205.0, 136.0], [200.0, 122.0], [206.0, 113.0], [203.0, 143.0], [201.0, 134.0], [214.0, 5016.5], [208.0, 96.0], [210.0, 12638.0], [213.0, 141.0], [220.0, 88.0], [217.0, 123.0], [221.0, 146.0], [224.0, 159.0], [225.0, 120.0], [238.0, 122.0], [237.0, 160.0], [244.0, 140.0], [249.0, 7000.0], [252.0, 7758.0], [257.0, 121.0], [268.0, 3322.0], [261.0, 122.0], [267.0, 132.0], [270.0, 119.5], [269.0, 117.0], [256.0, 145.0], [283.0, 125.0], [275.0, 4871.0], [288.0, 599.0], [314.0, 10473.5], [324.0, 318.0], [337.0, 7902.0], [350.0, 3057.5], [340.0, 132.0], [345.0, 153.0], [360.0, 143.0], [359.0, 9833.0], [382.0, 131.0], [381.0, 4735.0], [373.0, 128.5], [376.0, 107.0], [385.0, 128.0], [384.0, 7428.0], [392.0, 117.0], [394.0, 130.0], [389.0, 122.0], [391.0, 7004.0], [387.0, 3883.0], [396.0, 123.0], [399.0, 3948.0], [398.0, 131.0], [397.0, 143.0], [390.0, 115.0], [401.0, 154.0], [406.0, 10205.0], [400.0, 123.0], [405.0, 136.0], [403.0, 130.0], [402.0, 129.0], [414.0, 135.5], [408.0, 101.0], [404.0, 121.0], [412.0, 146.0], [427.0, 4137.0], [416.0, 3498.0], [423.0, 181.0], [432.0, 6161.0], [444.0, 596.5], [447.0, 277.0], [446.0, 126.0], [452.0, 140.0], [461.0, 8976.0], [474.0, 5936.0], [484.0, 7059.0], [494.0, 12076.0], [505.0, 145.0], [530.0, 6193.0], [543.0, 108.0], [562.0, 3982.5], [557.0, 130.0], [567.0, 5966.0], [605.0, 8679.0], [598.0, 5116.0], [604.0, 130.0], [603.0, 124.0], [592.0, 113.0], [587.0, 173.0], [586.0, 202.0], [639.0, 172.0], [660.0, 5638.0], [666.0, 114.0], [676.0, 6870.0], [678.0, 7197.0], [687.0, 5753.0], [745.0, 152.0], [779.0, 178.0], [815.0, 197.0], [879.0, 3803.0], [1.0, 63302.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[543.0, 0.0], [204.0, 0.0], [879.0, 0.0], [252.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 879.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 60.0, "minX": 1.68287316E12, "maxY": 206.66666666666666, "series": [{"data": [[1.68287322E12, 183.33333333333334], [1.6828734E12, 183.33333333333334], [1.68287328E12, 206.66666666666666], [1.68287346E12, 163.33333333333334], [1.68287316E12, 60.0], [1.68287334E12, 203.33333333333334]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68287346E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.68287316E12, "maxY": 231.16666666666666, "series": [{"data": [[1.68287352E12, 1.9666666666666666], [1.68287322E12, 191.15], [1.6828734E12, 185.41666666666666], [1.68287358E12, 5.6], [1.68287328E12, 231.16666666666666], [1.68287346E12, 159.13333333333333], [1.68287316E12, 17.9], [1.68287334E12, 207.0]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.6828734E12, 0.016666666666666666], [1.68287328E12, 0.6166666666666667], [1.68287334E12, 0.03333333333333333]], "isOverall": false, "label": "Non HTTP response code: java.net.SocketException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68287358E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.68287316E12, "maxY": 231.16666666666666, "series": [{"data": [[1.68287352E12, 1.9666666666666666], [1.68287322E12, 191.15], [1.6828734E12, 185.41666666666666], [1.68287358E12, 5.6], [1.68287328E12, 231.16666666666666], [1.68287346E12, 159.13333333333333], [1.68287316E12, 17.9], [1.68287334E12, 207.0]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.6828734E12, 0.016666666666666666], [1.68287328E12, 0.6166666666666667], [1.68287334E12, 0.03333333333333333]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68287358E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.68287316E12, "maxY": 231.16666666666666, "series": [{"data": [[1.68287352E12, 1.9666666666666666], [1.68287322E12, 191.15], [1.6828734E12, 185.41666666666666], [1.68287358E12, 5.6], [1.68287328E12, 231.16666666666666], [1.68287346E12, 159.13333333333333], [1.68287316E12, 17.9], [1.68287334E12, 207.0]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.6828734E12, 0.016666666666666666], [1.68287328E12, 0.6166666666666667], [1.68287334E12, 0.03333333333333333]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68287358E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

