/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 9.0, "minX": 0.0, "maxY": 227329.0, "series": [{"data": [[0.0, 9.0], [0.1, 23.0], [0.2, 26.0], [0.3, 30.0], [0.4, 34.0], [0.5, 37.0], [0.6, 40.0], [0.7, 41.0], [0.8, 44.0], [0.9, 45.0], [1.0, 47.0], [1.1, 48.0], [1.2, 49.0], [1.3, 50.0], [1.4, 52.0], [1.5, 54.0], [1.6, 56.0], [1.7, 57.0], [1.8, 58.0], [1.9, 60.0], [2.0, 61.0], [2.1, 63.0], [2.2, 63.0], [2.3, 65.0], [2.4, 65.0], [2.5, 66.0], [2.6, 67.0], [2.7, 67.0], [2.8, 68.0], [2.9, 68.0], [3.0, 69.0], [3.1, 69.0], [3.2, 70.0], [3.3, 70.0], [3.4, 71.0], [3.5, 71.0], [3.6, 72.0], [3.7, 73.0], [3.8, 73.0], [3.9, 74.0], [4.0, 75.0], [4.1, 75.0], [4.2, 76.0], [4.3, 76.0], [4.4, 77.0], [4.5, 77.0], [4.6, 78.0], [4.7, 78.0], [4.8, 79.0], [4.9, 80.0], [5.0, 80.0], [5.1, 81.0], [5.2, 81.0], [5.3, 81.0], [5.4, 82.0], [5.5, 83.0], [5.6, 84.0], [5.7, 85.0], [5.8, 85.0], [5.9, 86.0], [6.0, 86.0], [6.1, 87.0], [6.2, 87.0], [6.3, 88.0], [6.4, 89.0], [6.5, 89.0], [6.6, 89.0], [6.7, 90.0], [6.8, 90.0], [6.9, 91.0], [7.0, 91.0], [7.1, 92.0], [7.2, 92.0], [7.3, 93.0], [7.4, 94.0], [7.5, 94.0], [7.6, 95.0], [7.7, 96.0], [7.8, 96.0], [7.9, 97.0], [8.0, 97.0], [8.1, 98.0], [8.2, 98.0], [8.3, 99.0], [8.4, 99.0], [8.5, 100.0], [8.6, 100.0], [8.7, 101.0], [8.8, 101.0], [8.9, 102.0], [9.0, 102.0], [9.1, 103.0], [9.2, 103.0], [9.3, 104.0], [9.4, 105.0], [9.5, 105.0], [9.6, 106.0], [9.7, 106.0], [9.8, 106.0], [9.9, 107.0], [10.0, 107.0], [10.1, 107.0], [10.2, 108.0], [10.3, 108.0], [10.4, 108.0], [10.5, 109.0], [10.6, 109.0], [10.7, 110.0], [10.8, 110.0], [10.9, 111.0], [11.0, 111.0], [11.1, 112.0], [11.2, 112.0], [11.3, 113.0], [11.4, 113.0], [11.5, 113.0], [11.6, 114.0], [11.7, 115.0], [11.8, 115.0], [11.9, 116.0], [12.0, 117.0], [12.1, 117.0], [12.2, 117.0], [12.3, 118.0], [12.4, 118.0], [12.5, 119.0], [12.6, 119.0], [12.7, 120.0], [12.8, 121.0], [12.9, 121.0], [13.0, 122.0], [13.1, 123.0], [13.2, 123.0], [13.3, 124.0], [13.4, 124.0], [13.5, 124.0], [13.6, 125.0], [13.7, 125.0], [13.8, 126.0], [13.9, 127.0], [14.0, 127.0], [14.1, 128.0], [14.2, 129.0], [14.3, 129.0], [14.4, 130.0], [14.5, 131.0], [14.6, 131.0], [14.7, 132.0], [14.8, 132.0], [14.9, 133.0], [15.0, 133.0], [15.1, 134.0], [15.2, 134.0], [15.3, 134.0], [15.4, 135.0], [15.5, 135.0], [15.6, 135.0], [15.7, 135.0], [15.8, 136.0], [15.9, 136.0], [16.0, 136.0], [16.1, 136.0], [16.2, 136.0], [16.3, 137.0], [16.4, 137.0], [16.5, 137.0], [16.6, 138.0], [16.7, 138.0], [16.8, 138.0], [16.9, 138.0], [17.0, 139.0], [17.1, 139.0], [17.2, 139.0], [17.3, 140.0], [17.4, 140.0], [17.5, 140.0], [17.6, 141.0], [17.7, 141.0], [17.8, 141.0], [17.9, 141.0], [18.0, 142.0], [18.1, 142.0], [18.2, 142.0], [18.3, 143.0], [18.4, 143.0], [18.5, 144.0], [18.6, 144.0], [18.7, 145.0], [18.8, 145.0], [18.9, 146.0], [19.0, 146.0], [19.1, 146.0], [19.2, 147.0], [19.3, 147.0], [19.4, 147.0], [19.5, 148.0], [19.6, 148.0], [19.7, 148.0], [19.8, 149.0], [19.9, 149.0], [20.0, 150.0], [20.1, 150.0], [20.2, 150.0], [20.3, 151.0], [20.4, 151.0], [20.5, 151.0], [20.6, 152.0], [20.7, 152.0], [20.8, 152.0], [20.9, 153.0], [21.0, 153.0], [21.1, 153.0], [21.2, 154.0], [21.3, 154.0], [21.4, 154.0], [21.5, 155.0], [21.6, 155.0], [21.7, 155.0], [21.8, 156.0], [21.9, 156.0], [22.0, 156.0], [22.1, 157.0], [22.2, 157.0], [22.3, 158.0], [22.4, 158.0], [22.5, 159.0], [22.6, 159.0], [22.7, 159.0], [22.8, 160.0], [22.9, 160.0], [23.0, 160.0], [23.1, 161.0], [23.2, 161.0], [23.3, 162.0], [23.4, 162.0], [23.5, 163.0], [23.6, 163.0], [23.7, 163.0], [23.8, 163.0], [23.9, 163.0], [24.0, 164.0], [24.1, 164.0], [24.2, 164.0], [24.3, 165.0], [24.4, 165.0], [24.5, 166.0], [24.6, 166.0], [24.7, 166.0], [24.8, 166.0], [24.9, 167.0], [25.0, 167.0], [25.1, 167.0], [25.2, 167.0], [25.3, 168.0], [25.4, 168.0], [25.5, 168.0], [25.6, 168.0], [25.7, 169.0], [25.8, 169.0], [25.9, 169.0], [26.0, 170.0], [26.1, 170.0], [26.2, 170.0], [26.3, 171.0], [26.4, 171.0], [26.5, 172.0], [26.6, 172.0], [26.7, 173.0], [26.8, 173.0], [26.9, 174.0], [27.0, 175.0], [27.1, 175.0], [27.2, 176.0], [27.3, 176.0], [27.4, 177.0], [27.5, 178.0], [27.6, 179.0], [27.7, 180.0], [27.8, 180.0], [27.9, 180.0], [28.0, 181.0], [28.1, 181.0], [28.2, 181.0], [28.3, 181.0], [28.4, 182.0], [28.5, 182.0], [28.6, 182.0], [28.7, 182.0], [28.8, 183.0], [28.9, 183.0], [29.0, 183.0], [29.1, 184.0], [29.2, 184.0], [29.3, 185.0], [29.4, 185.0], [29.5, 185.0], [29.6, 185.0], [29.7, 186.0], [29.8, 186.0], [29.9, 186.0], [30.0, 186.0], [30.1, 186.0], [30.2, 186.0], [30.3, 187.0], [30.4, 187.0], [30.5, 187.0], [30.6, 187.0], [30.7, 187.0], [30.8, 188.0], [30.9, 188.0], [31.0, 188.0], [31.1, 188.0], [31.2, 189.0], [31.3, 189.0], [31.4, 189.0], [31.5, 190.0], [31.6, 190.0], [31.7, 190.0], [31.8, 191.0], [31.9, 191.0], [32.0, 191.0], [32.1, 191.0], [32.2, 192.0], [32.3, 192.0], [32.4, 192.0], [32.5, 192.0], [32.6, 193.0], [32.7, 193.0], [32.8, 193.0], [32.9, 194.0], [33.0, 194.0], [33.1, 194.0], [33.2, 194.0], [33.3, 195.0], [33.4, 195.0], [33.5, 195.0], [33.6, 196.0], [33.7, 196.0], [33.8, 196.0], [33.9, 197.0], [34.0, 197.0], [34.1, 197.0], [34.2, 197.0], [34.3, 198.0], [34.4, 198.0], [34.5, 198.0], [34.6, 199.0], [34.7, 199.0], [34.8, 199.0], [34.9, 200.0], [35.0, 200.0], [35.1, 200.0], [35.2, 200.0], [35.3, 200.0], [35.4, 201.0], [35.5, 201.0], [35.6, 201.0], [35.7, 201.0], [35.8, 201.0], [35.9, 202.0], [36.0, 202.0], [36.1, 202.0], [36.2, 202.0], [36.3, 202.0], [36.4, 203.0], [36.5, 203.0], [36.6, 203.0], [36.7, 203.0], [36.8, 203.0], [36.9, 203.0], [37.0, 204.0], [37.1, 204.0], [37.2, 204.0], [37.3, 204.0], [37.4, 205.0], [37.5, 205.0], [37.6, 205.0], [37.7, 205.0], [37.8, 206.0], [37.9, 206.0], [38.0, 206.0], [38.1, 207.0], [38.2, 207.0], [38.3, 207.0], [38.4, 207.0], [38.5, 208.0], [38.6, 208.0], [38.7, 208.0], [38.8, 208.0], [38.9, 208.0], [39.0, 208.0], [39.1, 209.0], [39.2, 209.0], [39.3, 209.0], [39.4, 209.0], [39.5, 209.0], [39.6, 209.0], [39.7, 210.0], [39.8, 210.0], [39.9, 210.0], [40.0, 210.0], [40.1, 210.0], [40.2, 210.0], [40.3, 211.0], [40.4, 211.0], [40.5, 211.0], [40.6, 211.0], [40.7, 211.0], [40.8, 212.0], [40.9, 212.0], [41.0, 212.0], [41.1, 212.0], [41.2, 212.0], [41.3, 212.0], [41.4, 213.0], [41.5, 213.0], [41.6, 213.0], [41.7, 213.0], [41.8, 214.0], [41.9, 214.0], [42.0, 214.0], [42.1, 214.0], [42.2, 214.0], [42.3, 215.0], [42.4, 215.0], [42.5, 215.0], [42.6, 215.0], [42.7, 215.0], [42.8, 216.0], [42.9, 216.0], [43.0, 216.0], [43.1, 216.0], [43.2, 216.0], [43.3, 216.0], [43.4, 217.0], [43.5, 217.0], [43.6, 217.0], [43.7, 217.0], [43.8, 217.0], [43.9, 217.0], [44.0, 217.0], [44.1, 218.0], [44.2, 218.0], [44.3, 218.0], [44.4, 218.0], [44.5, 218.0], [44.6, 218.0], [44.7, 218.0], [44.8, 218.0], [44.9, 218.0], [45.0, 219.0], [45.1, 219.0], [45.2, 219.0], [45.3, 219.0], [45.4, 219.0], [45.5, 219.0], [45.6, 219.0], [45.7, 219.0], [45.8, 219.0], [45.9, 219.0], [46.0, 220.0], [46.1, 220.0], [46.2, 220.0], [46.3, 220.0], [46.4, 220.0], [46.5, 220.0], [46.6, 220.0], [46.7, 220.0], [46.8, 220.0], [46.9, 221.0], [47.0, 221.0], [47.1, 221.0], [47.2, 221.0], [47.3, 221.0], [47.4, 221.0], [47.5, 221.0], [47.6, 221.0], [47.7, 222.0], [47.8, 222.0], [47.9, 222.0], [48.0, 222.0], [48.1, 222.0], [48.2, 222.0], [48.3, 222.0], [48.4, 222.0], [48.5, 223.0], [48.6, 223.0], [48.7, 223.0], [48.8, 223.0], [48.9, 223.0], [49.0, 223.0], [49.1, 223.0], [49.2, 223.0], [49.3, 223.0], [49.4, 223.0], [49.5, 224.0], [49.6, 224.0], [49.7, 224.0], [49.8, 224.0], [49.9, 224.0], [50.0, 224.0], [50.1, 225.0], [50.2, 225.0], [50.3, 225.0], [50.4, 225.0], [50.5, 225.0], [50.6, 225.0], [50.7, 225.0], [50.8, 226.0], [50.9, 226.0], [51.0, 226.0], [51.1, 226.0], [51.2, 226.0], [51.3, 226.0], [51.4, 226.0], [51.5, 226.0], [51.6, 227.0], [51.7, 227.0], [51.8, 227.0], [51.9, 227.0], [52.0, 227.0], [52.1, 227.0], [52.2, 227.0], [52.3, 228.0], [52.4, 228.0], [52.5, 228.0], [52.6, 228.0], [52.7, 228.0], [52.8, 228.0], [52.9, 229.0], [53.0, 229.0], [53.1, 229.0], [53.2, 229.0], [53.3, 229.0], [53.4, 229.0], [53.5, 230.0], [53.6, 230.0], [53.7, 230.0], [53.8, 230.0], [53.9, 230.0], [54.0, 230.0], [54.1, 231.0], [54.2, 231.0], [54.3, 231.0], [54.4, 231.0], [54.5, 231.0], [54.6, 232.0], [54.7, 232.0], [54.8, 232.0], [54.9, 232.0], [55.0, 232.0], [55.1, 232.0], [55.2, 232.0], [55.3, 233.0], [55.4, 233.0], [55.5, 233.0], [55.6, 233.0], [55.7, 233.0], [55.8, 233.0], [55.9, 233.0], [56.0, 234.0], [56.1, 234.0], [56.2, 234.0], [56.3, 234.0], [56.4, 234.0], [56.5, 234.0], [56.6, 235.0], [56.7, 235.0], [56.8, 235.0], [56.9, 235.0], [57.0, 235.0], [57.1, 235.0], [57.2, 235.0], [57.3, 235.0], [57.4, 235.0], [57.5, 236.0], [57.6, 236.0], [57.7, 236.0], [57.8, 236.0], [57.9, 236.0], [58.0, 236.0], [58.1, 236.0], [58.2, 236.0], [58.3, 237.0], [58.4, 237.0], [58.5, 237.0], [58.6, 237.0], [58.7, 237.0], [58.8, 237.0], [58.9, 238.0], [59.0, 238.0], [59.1, 238.0], [59.2, 238.0], [59.3, 238.0], [59.4, 238.0], [59.5, 238.0], [59.6, 239.0], [59.7, 239.0], [59.8, 239.0], [59.9, 239.0], [60.0, 239.0], [60.1, 239.0], [60.2, 240.0], [60.3, 240.0], [60.4, 240.0], [60.5, 240.0], [60.6, 240.0], [60.7, 241.0], [60.8, 241.0], [60.9, 241.0], [61.0, 241.0], [61.1, 241.0], [61.2, 242.0], [61.3, 242.0], [61.4, 243.0], [61.5, 243.0], [61.6, 244.0], [61.7, 244.0], [61.8, 245.0], [61.9, 245.0], [62.0, 246.0], [62.1, 246.0], [62.2, 246.0], [62.3, 247.0], [62.4, 247.0], [62.5, 247.0], [62.6, 248.0], [62.7, 248.0], [62.8, 248.0], [62.9, 248.0], [63.0, 249.0], [63.1, 249.0], [63.2, 249.0], [63.3, 250.0], [63.4, 250.0], [63.5, 250.0], [63.6, 251.0], [63.7, 251.0], [63.8, 251.0], [63.9, 252.0], [64.0, 252.0], [64.1, 252.0], [64.2, 253.0], [64.3, 253.0], [64.4, 253.0], [64.5, 253.0], [64.6, 254.0], [64.7, 254.0], [64.8, 255.0], [64.9, 256.0], [65.0, 258.0], [65.1, 259.0], [65.2, 259.0], [65.3, 260.0], [65.4, 260.0], [65.5, 260.0], [65.6, 261.0], [65.7, 262.0], [65.8, 265.0], [65.9, 266.0], [66.0, 267.0], [66.1, 267.0], [66.2, 269.0], [66.3, 269.0], [66.4, 270.0], [66.5, 271.0], [66.6, 271.0], [66.7, 273.0], [66.8, 274.0], [66.9, 275.0], [67.0, 277.0], [67.1, 278.0], [67.2, 279.0], [67.3, 280.0], [67.4, 286.0], [67.5, 291.0], [67.6, 296.0], [67.7, 298.0], [67.8, 299.0], [67.9, 300.0], [68.0, 300.0], [68.1, 305.0], [68.2, 310.0], [68.3, 311.0], [68.4, 312.0], [68.5, 312.0], [68.6, 313.0], [68.7, 314.0], [68.8, 315.0], [68.9, 315.0], [69.0, 316.0], [69.1, 316.0], [69.2, 317.0], [69.3, 318.0], [69.4, 318.0], [69.5, 319.0], [69.6, 323.0], [69.7, 327.0], [69.8, 328.0], [69.9, 329.0], [70.0, 329.0], [70.1, 331.0], [70.2, 332.0], [70.3, 336.0], [70.4, 337.0], [70.5, 338.0], [70.6, 340.0], [70.7, 343.0], [70.8, 345.0], [70.9, 349.0], [71.0, 351.0], [71.1, 351.0], [71.2, 352.0], [71.3, 352.0], [71.4, 352.0], [71.5, 353.0], [71.6, 354.0], [71.7, 356.0], [71.8, 356.0], [71.9, 357.0], [72.0, 358.0], [72.1, 361.0], [72.2, 362.0], [72.3, 364.0], [72.4, 366.0], [72.5, 367.0], [72.6, 367.0], [72.7, 368.0], [72.8, 371.0], [72.9, 371.0], [73.0, 374.0], [73.1, 376.0], [73.2, 376.0], [73.3, 381.0], [73.4, 383.0], [73.5, 384.0], [73.6, 385.0], [73.7, 387.0], [73.8, 388.0], [73.9, 389.0], [74.0, 390.0], [74.1, 391.0], [74.2, 393.0], [74.3, 394.0], [74.4, 396.0], [74.5, 397.0], [74.6, 398.0], [74.7, 399.0], [74.8, 399.0], [74.9, 402.0], [75.0, 403.0], [75.1, 404.0], [75.2, 405.0], [75.3, 406.0], [75.4, 407.0], [75.5, 409.0], [75.6, 411.0], [75.7, 412.0], [75.8, 413.0], [75.9, 416.0], [76.0, 418.0], [76.1, 420.0], [76.2, 422.0], [76.3, 423.0], [76.4, 424.0], [76.5, 431.0], [76.6, 432.0], [76.7, 434.0], [76.8, 445.0], [76.9, 447.0], [77.0, 448.0], [77.1, 467.0], [77.2, 478.0], [77.3, 479.0], [77.4, 479.0], [77.5, 490.0], [77.6, 493.0], [77.7, 494.0], [77.8, 496.0], [77.9, 498.0], [78.0, 498.0], [78.1, 499.0], [78.2, 500.0], [78.3, 518.0], [78.4, 520.0], [78.5, 522.0], [78.6, 528.0], [78.7, 529.0], [78.8, 530.0], [78.9, 557.0], [79.0, 568.0], [79.1, 582.0], [79.2, 617.0], [79.3, 663.0], [79.4, 728.0], [79.5, 731.0], [79.6, 732.0], [79.7, 739.0], [79.8, 816.0], [79.9, 959.0], [80.0, 1095.0], [80.1, 1205.0], [80.2, 1243.0], [80.3, 1407.0], [80.4, 1494.0], [80.5, 1627.0], [80.6, 1741.0], [80.7, 1773.0], [80.8, 1945.0], [80.9, 2077.0], [81.0, 2128.0], [81.1, 2304.0], [81.2, 2465.0], [81.3, 2610.0], [81.4, 2688.0], [81.5, 2802.0], [81.6, 2865.0], [81.7, 3015.0], [81.8, 3121.0], [81.9, 3346.0], [82.0, 3444.0], [82.1, 3605.0], [82.2, 3680.0], [82.3, 3683.0], [82.4, 3720.0], [82.5, 3766.0], [82.6, 3827.0], [82.7, 3921.0], [82.8, 4097.0], [82.9, 4191.0], [83.0, 4195.0], [83.1, 4287.0], [83.2, 4345.0], [83.3, 4374.0], [83.4, 4592.0], [83.5, 4799.0], [83.6, 4861.0], [83.7, 4865.0], [83.8, 4921.0], [83.9, 5030.0], [84.0, 5033.0], [84.1, 5112.0], [84.2, 5151.0], [84.3, 5301.0], [84.4, 5307.0], [84.5, 5367.0], [84.6, 5369.0], [84.7, 5419.0], [84.8, 5532.0], [84.9, 5566.0], [85.0, 5583.0], [85.1, 5629.0], [85.2, 5660.0], [85.3, 5672.0], [85.4, 5688.0], [85.5, 5696.0], [85.6, 5733.0], [85.7, 5790.0], [85.8, 5924.0], [85.9, 5991.0], [86.0, 6043.0], [86.1, 6128.0], [86.2, 6238.0], [86.3, 6308.0], [86.4, 6563.0], [86.5, 6605.0], [86.6, 6676.0], [86.7, 6678.0], [86.8, 6768.0], [86.9, 6828.0], [87.0, 6899.0], [87.1, 7005.0], [87.2, 7039.0], [87.3, 7052.0], [87.4, 7064.0], [87.5, 7068.0], [87.6, 7077.0], [87.7, 7123.0], [87.8, 7131.0], [87.9, 7160.0], [88.0, 7195.0], [88.1, 7217.0], [88.2, 7227.0], [88.3, 7241.0], [88.4, 7284.0], [88.5, 7291.0], [88.6, 7371.0], [88.7, 7395.0], [88.8, 7448.0], [88.9, 7473.0], [89.0, 7524.0], [89.1, 7526.0], [89.2, 7563.0], [89.3, 7656.0], [89.4, 7755.0], [89.5, 7850.0], [89.6, 7863.0], [89.7, 7927.0], [89.8, 8149.0], [89.9, 8183.0], [90.0, 8279.0], [90.1, 8379.0], [90.2, 8462.0], [90.3, 8528.0], [90.4, 8634.0], [90.5, 8659.0], [90.6, 8710.0], [90.7, 8807.0], [90.8, 8836.0], [90.9, 8853.0], [91.0, 8978.0], [91.1, 8986.0], [91.2, 9265.0], [91.3, 9682.0], [91.4, 9683.0], [91.5, 9685.0], [91.6, 9761.0], [91.7, 9830.0], [91.8, 9964.0], [91.9, 10117.0], [92.0, 10136.0], [92.1, 10150.0], [92.2, 10199.0], [92.3, 10282.0], [92.4, 10287.0], [92.5, 10457.0], [92.6, 10642.0], [92.7, 10799.0], [92.8, 10859.0], [92.9, 10955.0], [93.0, 11023.0], [93.1, 11031.0], [93.2, 11066.0], [93.3, 11207.0], [93.4, 11281.0], [93.5, 11429.0], [93.6, 11652.0], [93.7, 11904.0], [93.8, 12065.0], [93.9, 12759.0], [94.0, 12991.0], [94.1, 13024.0], [94.2, 13211.0], [94.3, 13519.0], [94.4, 14221.0], [94.5, 14955.0], [94.6, 15519.0], [94.7, 15982.0], [94.8, 16225.0], [94.9, 17688.0], [95.0, 19431.0], [95.1, 20202.0], [95.2, 21093.0], [95.3, 21751.0], [95.4, 22102.0], [95.5, 24477.0], [95.6, 26179.0], [95.7, 28686.0], [95.8, 31098.0], [95.9, 32357.0], [96.0, 33432.0], [96.1, 35765.0], [96.2, 37270.0], [96.3, 40014.0], [96.4, 42751.0], [96.5, 43538.0], [96.6, 54644.0], [96.7, 56085.0], [96.8, 63218.0], [96.9, 63807.0], [97.0, 64303.0], [97.1, 65902.0], [97.2, 67104.0], [97.3, 70195.0], [97.4, 72194.0], [97.5, 76040.0], [97.6, 80721.0], [97.7, 92949.0], [97.8, 97903.0], [97.9, 100045.0], [98.0, 100079.0], [98.1, 100099.0], [98.2, 100127.0], [98.3, 100148.0], [98.4, 100180.0], [98.5, 100204.0], [98.6, 100248.0], [98.7, 100301.0], [98.8, 100401.0], [98.9, 101029.0], [99.0, 101249.0], [99.1, 123430.0], [99.2, 128014.0], [99.3, 129082.0], [99.4, 129642.0], [99.5, 131175.0], [99.6, 135321.0], [99.7, 140044.0], [99.8, 152910.0], [99.9, 173178.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 39590.0, "series": [{"data": [[0.0, 10134.0], [158500.0, 2.0], [66700.0, 3.0], [73100.0, 6.0], [79500.0, 1.0], [85900.0, 1.0], [82700.0, 1.0], [98700.0, 2.0], [130700.0, 1.0], [127500.0, 12.0], [100.0, 31724.0], [32900.0, 7.0], [141100.0, 2.0], [36100.0, 2.0], [37700.0, 8.0], [40900.0, 2.0], [173100.0, 114.0], [44100.0, 2.0], [45700.0, 11.0], [50500.0, 2.0], [200.0, 39590.0], [52100.0, 2.0], [56900.0, 3.0], [60100.0, 2.0], [63300.0, 1.0], [61700.0, 1.0], [65800.0, 5.0], [72200.0, 49.0], [300.0, 8313.0], [75400.0, 1.0], [81800.0, 3.0], [78600.0, 3.0], [85000.0, 1.0], [88200.0, 4.0], [94600.0, 2.0], [101000.0, 136.0], [400.0, 4029.0], [120200.0, 2.0], [123400.0, 23.0], [500.0, 1182.0], [129800.0, 22.0], [138800.0, 3.0], [145200.0, 1.0], [600.0, 221.0], [151600.0, 1.0], [700.0, 499.0], [800.0, 171.0], [900.0, 65.0], [1000.0, 92.0], [1100.0, 95.0], [1200.0, 161.0], [1300.0, 80.0], [1400.0, 126.0], [1500.0, 98.0], [1600.0, 72.0], [1700.0, 198.0], [1800.0, 81.0], [1900.0, 49.0], [2000.0, 160.0], [2100.0, 103.0], [136500.0, 13.0], [2200.0, 30.0], [2300.0, 151.0], [142900.0, 1.0], [2400.0, 20.0], [2500.0, 74.0], [2600.0, 210.0], [2800.0, 178.0], [2700.0, 69.0], [2900.0, 53.0], [3000.0, 100.0], [3100.0, 83.0], [3300.0, 126.0], [3200.0, 20.0], [3400.0, 78.0], [3500.0, 63.0], [226100.0, 7.0], [3600.0, 293.0], [3700.0, 251.0], [3800.0, 150.0], [3900.0, 90.0], [4000.0, 88.0], [4200.0, 110.0], [68100.0, 1.0], [4400.0, 18.0], [4600.0, 33.0], [71300.0, 5.0], [4800.0, 337.0], [77700.0, 27.0], [74500.0, 4.0], [5000.0, 252.0], [5200.0, 22.0], [5600.0, 553.0], [5400.0, 111.0], [5800.0, 110.0], [93700.0, 2.0], [6000.0, 179.0], [96900.0, 14.0], [6200.0, 125.0], [100100.0, 446.0], [6600.0, 312.0], [6400.0, 63.0], [6800.0, 218.0], [109700.0, 1.0], [7000.0, 661.0], [7200.0, 604.0], [7400.0, 319.0], [7600.0, 137.0], [7800.0, 280.0], [8000.0, 29.0], [8400.0, 157.0], [134200.0, 21.0], [8800.0, 283.0], [9200.0, 9.0], [9600.0, 365.0], [10000.0, 74.0], [10400.0, 17.0], [11200.0, 172.0], [10800.0, 182.0], [11600.0, 121.0], [12000.0, 92.0], [12400.0, 3.0], [12800.0, 7.0], [13200.0, 61.0], [13600.0, 2.0], [14000.0, 4.0], [14400.0, 10.0], [14800.0, 10.0], [15200.0, 21.0], [15600.0, 13.0], [16000.0, 72.0], [17600.0, 2.0], [18400.0, 1.0], [19200.0, 1.0], [20000.0, 3.0], [20800.0, 4.0], [22400.0, 3.0], [21600.0, 2.0], [23200.0, 3.0], [24000.0, 2.0], [26400.0, 14.0], [27200.0, 4.0], [28000.0, 4.0], [28800.0, 5.0], [29600.0, 8.0], [30400.0, 4.0], [33600.0, 12.0], [131900.0, 8.0], [157500.0, 1.0], [40000.0, 5.0], [44800.0, 2.0], [46400.0, 1.0], [48000.0, 2.0], [195900.0, 1.0], [56000.0, 2.0], [59200.0, 4.0], [60800.0, 4.0], [64000.0, 23.0], [67200.0, 1.0], [73600.0, 2.0], [86400.0, 1.0], [92800.0, 4.0], [99200.0, 2.0], [102400.0, 3.0], [128000.0, 45.0], [147200.0, 7.0], [132100.0, 1.0], [151300.0, 5.0], [157700.0, 19.0], [164100.0, 8.0], [67100.0, 20.0], [70300.0, 6.0], [73500.0, 2.0], [95900.0, 1.0], [102300.0, 3.0], [105500.0, 10.0], [111900.0, 1.0], [115100.0, 26.0], [121500.0, 5.0], [127900.0, 20.0], [36300.0, 8.0], [41100.0, 2.0], [42700.0, 2.0], [47500.0, 2.0], [50700.0, 3.0], [52300.0, 2.0], [55500.0, 17.0], [58700.0, 8.0], [61900.0, 2.0], [63500.0, 2.0], [65100.0, 6.0], [66200.0, 2.0], [69400.0, 2.0], [72600.0, 4.0], [79000.0, 13.0], [82200.0, 3.0], [91800.0, 2.0], [95000.0, 4.0], [130200.0, 2.0], [142100.0, 2.0], [68500.0, 21.0], [71700.0, 9.0], [74900.0, 1.0], [78100.0, 1.0], [81300.0, 1.0], [84500.0, 3.0], [100500.0, 12.0], [129300.0, 7.0], [159000.0, 2.0], [16900.0, 1.0], [17700.0, 1.0], [19300.0, 11.0], [18500.0, 1.0], [20100.0, 12.0], [20900.0, 5.0], [22500.0, 1.0], [21700.0, 119.0], [23300.0, 2.0], [24900.0, 1.0], [25700.0, 1.0], [26500.0, 4.0], [28100.0, 4.0], [28900.0, 2.0], [29700.0, 19.0], [32100.0, 17.0], [131100.0, 46.0], [35400.0, 6.0], [37000.0, 16.0], [38600.0, 1.0], [150300.0, 11.0], [40200.0, 3.0], [43400.0, 11.0], [49800.0, 2.0], [53000.0, 9.0], [54600.0, 2.0], [227100.0, 2.0], [57800.0, 2.0], [59400.0, 4.0], [62600.0, 1.0], [64200.0, 76.0], [67600.0, 5.0], [70800.0, 3.0], [77200.0, 1.0], [90000.0, 3.0], [86800.0, 1.0], [122000.0, 1.0], [128400.0, 2.0], [136800.0, 11.0], [143200.0, 3.0], [149600.0, 1.0], [162400.0, 1.0], [134500.0, 13.0], [67500.0, 3.0], [73900.0, 2.0], [80300.0, 4.0], [86700.0, 3.0], [89900.0, 3.0], [96300.0, 3.0], [128300.0, 3.0], [157800.0, 1.0], [136300.0, 5.0], [33300.0, 7.0], [36500.0, 1.0], [38100.0, 2.0], [39700.0, 2.0], [41300.0, 4.0], [42900.0, 26.0], [44500.0, 1.0], [46100.0, 2.0], [47700.0, 2.0], [52500.0, 2.0], [57300.0, 7.0], [58900.0, 3.0], [65300.0, 12.0], [66600.0, 14.0], [73000.0, 4.0], [76200.0, 1.0], [82600.0, 2.0], [85800.0, 1.0], [98600.0, 1.0], [101800.0, 1.0], [178800.0, 2.0], [150900.0, 10.0], [68900.0, 1.0], [72100.0, 5.0], [75300.0, 2.0], [78500.0, 4.0], [84900.0, 5.0], [88100.0, 1.0], [94500.0, 2.0], [97700.0, 1.0], [100900.0, 1.0], [129700.0, 1.0], [8500.0, 145.0], [8900.0, 224.0], [9300.0, 20.0], [9700.0, 113.0], [155000.0, 2.0], [10100.0, 396.0], [10500.0, 104.0], [10900.0, 151.0], [11700.0, 19.0], [11300.0, 86.0], [12100.0, 29.0], [12500.0, 10.0], [12900.0, 118.0], [13300.0, 20.0], [13700.0, 14.0], [14100.0, 17.0], [14500.0, 18.0], [14900.0, 33.0], [15300.0, 5.0], [15700.0, 14.0], [16100.0, 15.0], [17000.0, 3.0], [19400.0, 56.0], [18600.0, 2.0], [20200.0, 12.0], [21000.0, 23.0], [21800.0, 15.0], [22600.0, 3.0], [23400.0, 7.0], [25800.0, 3.0], [26600.0, 11.0], [28200.0, 5.0], [29000.0, 3.0], [29800.0, 2.0], [31400.0, 5.0], [32200.0, 47.0], [34000.0, 2.0], [35600.0, 9.0], [37200.0, 35.0], [38800.0, 1.0], [152700.0, 9.0], [159100.0, 1.0], [42000.0, 2.0], [43600.0, 2.0], [45200.0, 1.0], [50000.0, 3.0], [54800.0, 2.0], [56400.0, 1.0], [58000.0, 4.0], [64400.0, 2.0], [68000.0, 1.0], [80800.0, 2.0], [84000.0, 1.0], [87200.0, 2.0], [93600.0, 4.0], [100000.0, 347.0], [106400.0, 2.0], [128800.0, 7.0], [142400.0, 8.0], [140100.0, 7.0], [146500.0, 2.0], [152900.0, 9.0], [67900.0, 1.0], [71100.0, 4.0], [77500.0, 2.0], [74300.0, 1.0], [80700.0, 3.0], [93500.0, 1.0], [96700.0, 2.0], [128700.0, 3.0], [144200.0, 1.0], [195400.0, 1.0], [35100.0, 33.0], [38300.0, 1.0], [43100.0, 74.0], [44700.0, 4.0], [51100.0, 2.0], [199500.0, 1.0], [54300.0, 2.0], [55900.0, 78.0], [63900.0, 3.0], [65500.0, 4.0], [67000.0, 14.0], [73400.0, 2.0], [70200.0, 1.0], [76600.0, 1.0], [79800.0, 2.0], [86200.0, 1.0], [92600.0, 3.0], [102200.0, 4.0], [115000.0, 7.0], [121400.0, 12.0], [127800.0, 5.0], [131000.0, 6.0], [137300.0, 1.0], [143700.0, 1.0], [66100.0, 35.0], [69300.0, 1.0], [72500.0, 5.0], [78900.0, 2.0], [85300.0, 2.0], [91700.0, 1.0], [94900.0, 10.0], [130100.0, 11.0], [160600.0, 12.0], [17100.0, 8.0], [17900.0, 62.0], [20300.0, 24.0], [21100.0, 39.0], [21900.0, 15.0], [23500.0, 28.0], [22700.0, 1.0], [24300.0, 8.0], [25100.0, 7.0], [28300.0, 12.0], [29100.0, 6.0], [29900.0, 3.0], [32300.0, 5.0], [34200.0, 6.0], [132700.0, 2.0], [151900.0, 4.0], [37400.0, 1.0], [39000.0, 4.0], [42200.0, 2.0], [47000.0, 3.0], [51800.0, 2.0], [59800.0, 2.0], [64600.0, 2.0], [71600.0, 3.0], [74800.0, 8.0], [81200.0, 6.0], [100400.0, 90.0], [129200.0, 15.0], [138400.0, 4.0], [132000.0, 2.0], [136100.0, 6.0], [68300.0, 12.0], [74700.0, 1.0], [93900.0, 2.0], [97100.0, 3.0], [100300.0, 86.0], [103500.0, 1.0], [109900.0, 1.0], [131500.0, 2.0], [36900.0, 11.0], [40100.0, 9.0], [41700.0, 2.0], [43300.0, 4.0], [46500.0, 2.0], [208300.0, 1.0], [52900.0, 1.0], [57700.0, 2.0], [59300.0, 2.0], [64100.0, 5.0], [67400.0, 7.0], [70600.0, 3.0], [73800.0, 8.0], [80200.0, 4.0], [83400.0, 2.0], [86600.0, 2.0], [96200.0, 1.0], [128200.0, 18.0], [135600.0, 4.0], [154800.0, 2.0], [174000.0, 1.0], [146100.0, 1.0], [4100.0, 254.0], [4300.0, 325.0], [66500.0, 3.0], [4500.0, 7.0], [69700.0, 1.0], [4700.0, 85.0], [76100.0, 3.0], [5100.0, 222.0], [4900.0, 103.0], [79300.0, 1.0], [5300.0, 475.0], [82500.0, 2.0], [5500.0, 330.0], [88900.0, 1.0], [5700.0, 237.0], [5900.0, 160.0], [6100.0, 113.0], [95300.0, 15.0], [6300.0, 55.0], [6500.0, 113.0], [6700.0, 109.0], [6900.0, 116.0], [7100.0, 441.0], [7300.0, 223.0], [7500.0, 302.0], [7700.0, 150.0], [7900.0, 79.0], [8100.0, 169.0], [127300.0, 28.0], [130500.0, 15.0], [8600.0, 272.0], [8200.0, 93.0], [9000.0, 31.0], [9800.0, 179.0], [10200.0, 273.0], [156600.0, 1.0], [10600.0, 107.0], [11000.0, 322.0], [11400.0, 27.0], [11800.0, 12.0], [12200.0, 4.0], [12600.0, 21.0], [13000.0, 181.0], [13800.0, 30.0], [13400.0, 4.0], [14200.0, 9.0], [14600.0, 2.0], [15000.0, 4.0], [15400.0, 14.0], [15800.0, 23.0], [16200.0, 39.0], [16400.0, 2.0], [17200.0, 7.0], [18000.0, 5.0], [18800.0, 1.0], [20400.0, 25.0], [19600.0, 3.0], [21200.0, 11.0], [22000.0, 5.0], [22800.0, 3.0], [23600.0, 3.0], [24400.0, 17.0], [25200.0, 13.0], [26000.0, 1.0], [26800.0, 2.0], [27600.0, 2.0], [28400.0, 6.0], [29200.0, 3.0], [31600.0, 4.0], [32400.0, 10.0], [32800.0, 41.0], [36000.0, 4.0], [37600.0, 2.0], [42400.0, 68.0], [44000.0, 7.0], [45600.0, 2.0], [47200.0, 1.0], [48800.0, 2.0], [50400.0, 1.0], [55200.0, 2.0], [56800.0, 2.0], [60000.0, 2.0], [63200.0, 132.0], [64800.0, 4.0], [65600.0, 41.0], [68800.0, 2.0], [72000.0, 3.0], [78400.0, 7.0], [81600.0, 7.0], [88000.0, 3.0], [97600.0, 1.0], [129600.0, 26.0], [137600.0, 4.0], [131200.0, 1.0], [156800.0, 2.0], [176000.0, 1.0], [220800.0, 2.0], [227200.0, 4.0], [135300.0, 36.0], [192900.0, 1.0], [68700.0, 11.0], [71900.0, 71.0], [75100.0, 2.0], [78300.0, 2.0], [81500.0, 4.0], [87900.0, 1.0], [91100.0, 2.0], [97500.0, 2.0], [94300.0, 18.0], [100700.0, 9.0], [126300.0, 1.0], [123100.0, 1.0], [129500.0, 18.0], [177800.0, 2.0], [35500.0, 8.0], [143500.0, 6.0], [38700.0, 5.0], [37100.0, 31.0], [162700.0, 2.0], [41900.0, 4.0], [43500.0, 3.0], [48300.0, 1.0], [51500.0, 3.0], [54700.0, 1.0], [62700.0, 1.0], [64300.0, 43.0], [71000.0, 3.0], [80600.0, 2.0], [83800.0, 1.0], [87000.0, 1.0], [93400.0, 2.0], [96600.0, 2.0], [103000.0, 7.0], [106200.0, 1.0], [128600.0, 11.0], [173200.0, 1.0], [132500.0, 2.0], [151700.0, 1.0], [209300.0, 4.0], [66900.0, 18.0], [70100.0, 1.0], [73300.0, 1.0], [79700.0, 4.0], [82900.0, 1.0], [95700.0, 3.0], [98900.0, 1.0], [127700.0, 4.0], [130900.0, 3.0], [136600.0, 2.0], [149400.0, 2.0], [175000.0, 1.0], [219800.0, 1.0], [17300.0, 10.0], [16500.0, 16.0], [18100.0, 8.0], [18900.0, 4.0], [19700.0, 14.0], [20500.0, 22.0], [21300.0, 3.0], [22100.0, 31.0], [22900.0, 9.0], [24500.0, 4.0], [23700.0, 1.0], [25300.0, 1.0], [26100.0, 59.0], [30900.0, 2.0], [32500.0, 1.0], [134300.0, 4.0], [33000.0, 2.0], [36200.0, 4.0], [37800.0, 7.0], [42600.0, 7.0], [44200.0, 5.0], [49000.0, 2.0], [53800.0, 2.0], [55400.0, 9.0], [58600.0, 2.0], [60200.0, 2.0], [66000.0, 21.0], [69200.0, 2.0], [75600.0, 2.0], [78800.0, 2.0], [82000.0, 2.0], [94800.0, 1.0], [101200.0, 15.0], [130000.0, 1.0], [140000.0, 7.0], [146400.0, 16.0], [152800.0, 3.0], [137700.0, 4.0], [144100.0, 1.0], [227300.0, 7.0], [69100.0, 1.0], [65900.0, 4.0], [72300.0, 1.0], [75500.0, 1.0], [78700.0, 1.0], [88300.0, 2.0], [94700.0, 1.0], [97900.0, 8.0], [101100.0, 14.0], [135400.0, 1.0], [154600.0, 1.0], [205800.0, 2.0], [34100.0, 17.0], [133100.0, 2.0], [35700.0, 32.0], [139500.0, 2.0], [38900.0, 1.0], [37300.0, 2.0], [43700.0, 5.0], [46900.0, 2.0], [45300.0, 4.0], [50100.0, 1.0], [54900.0, 2.0], [58100.0, 11.0], [59700.0, 1.0], [62900.0, 3.0], [71400.0, 1.0], [74600.0, 2.0], [81000.0, 1.0], [84200.0, 2.0], [93800.0, 1.0], [100200.0, 271.0], [103400.0, 4.0], [129000.0, 51.0], [143600.0, 1.0], [162800.0, 1.0], [67300.0, 20.0], [70500.0, 3.0], [80100.0, 3.0], [83300.0, 1.0], [92900.0, 10.0], [96100.0, 5.0], [128100.0, 2.0], [8300.0, 137.0], [8700.0, 116.0], [139000.0, 12.0], [9100.0, 64.0], [9500.0, 32.0], [9900.0, 30.0], [10700.0, 21.0], [10300.0, 68.0], [11100.0, 35.0], [11500.0, 71.0], [11900.0, 59.0], [12700.0, 38.0], [12300.0, 7.0], [13100.0, 23.0], [13500.0, 89.0], [14300.0, 21.0], [14700.0, 28.0], [15100.0, 16.0], [15500.0, 113.0], [15900.0, 23.0], [17400.0, 8.0], [16600.0, 45.0], [18200.0, 5.0], [19000.0, 4.0], [19800.0, 4.0], [21400.0, 3.0], [20600.0, 4.0], [22200.0, 5.0], [23000.0, 2.0], [23800.0, 11.0], [25400.0, 2.0], [26200.0, 8.0], [27000.0, 4.0], [27800.0, 4.0], [28600.0, 38.0], [29400.0, 16.0], [30200.0, 2.0], [31000.0, 21.0], [31800.0, 28.0], [32600.0, 10.0], [33200.0, 38.0], [136700.0, 12.0], [38000.0, 3.0], [149500.0, 2.0], [162300.0, 2.0], [39600.0, 20.0], [175100.0, 2.0], [50800.0, 2.0], [58800.0, 2.0], [62000.0, 1.0], [63600.0, 2.0], [65200.0, 7.0], [69600.0, 4.0], [66400.0, 3.0], [76000.0, 1.0], [79200.0, 6.0], [82400.0, 1.0], [85600.0, 2.0], [130400.0, 4.0], [127200.0, 23.0], [145600.0, 4.0], [158400.0, 2.0], [177600.0, 5.0], [66300.0, 3.0], [72700.0, 2.0], [85500.0, 5.0], [82300.0, 1.0], [91900.0, 2.0], [98300.0, 1.0], [95100.0, 4.0], [134600.0, 5.0], [141000.0, 2.0], [34300.0, 2.0], [132300.0, 15.0], [40700.0, 2.0], [42300.0, 11.0], [53500.0, 4.0], [55100.0, 6.0], [56700.0, 2.0], [63100.0, 18.0], [68600.0, 2.0], [75000.0, 4.0], [78200.0, 3.0], [87800.0, 2.0], [97400.0, 1.0], [100600.0, 1.0], [107000.0, 4.0], [129400.0, 41.0], [206800.0, 1.0], [159700.0, 1.0], [80500.0, 7.0], [86900.0, 2.0], [90100.0, 1.0], [96500.0, 1.0], [99700.0, 1.0], [115700.0, 1.0], [128500.0, 16.0], [131800.0, 31.0], [157400.0, 3.0], [16700.0, 1.0], [18300.0, 6.0], [17500.0, 3.0], [19100.0, 4.0], [19900.0, 28.0], [20700.0, 24.0], [22300.0, 3.0], [23100.0, 1.0], [24700.0, 8.0], [25500.0, 22.0], [26300.0, 1.0], [27100.0, 1.0], [27900.0, 2.0], [29500.0, 3.0], [30300.0, 9.0], [31100.0, 1.0], [31900.0, 5.0], [33400.0, 1.0], [35000.0, 3.0], [38200.0, 54.0], [43000.0, 2.0], [46200.0, 4.0], [193500.0, 2.0], [55800.0, 2.0], [57400.0, 1.0], [63800.0, 7.0], [65400.0, 1.0], [70000.0, 1.0], [73200.0, 2.0], [76400.0, 7.0], [79600.0, 5.0], [86000.0, 1.0], [95600.0, 2.0], [98800.0, 1.0], [102000.0, 3.0], [121200.0, 2.0], [130800.0, 2.0], [127600.0, 8.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 227300.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 225.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 93877.0, "series": [{"data": [[0.0, 93877.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 2605.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 23293.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 225.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 436.9425947187138, "minX": 1.68287478E12, "maxY": 3000.0, "series": [{"data": [[1.68287514E12, 436.9425947187138], [1.68287496E12, 3000.0], [1.68287502E12, 3000.0], [1.68287484E12, 3000.0], [1.6828749E12, 3000.0], [1.68287478E12, 3000.0], [1.68287508E12, 2330.2803076923024]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68287514E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 30.0, "minX": 1.0, "maxY": 227328.66666666666, "series": [{"data": [[3.0, 131097.5], [4.0, 131095.0], [5.0, 131070.0], [8.0, 100238.0], [12.0, 100238.5], [13.0, 100237.33333333333], [15.0, 100236.5], [17.0, 100233.0], [18.0, 100232.0], [24.0, 100202.0], [26.0, 100202.0], [28.0, 100202.25], [30.0, 100202.5], [33.0, 100200.66666666667], [35.0, 100202.0], [34.0, 100202.0], [37.0, 100199.0], [36.0, 100200.0], [39.0, 100199.5], [43.0, 100198.5], [45.0, 100199.0], [46.0, 100198.5], [51.0, 100198.5], [53.0, 100199.0], [52.0, 100198.33333333333], [56.0, 100197.0], [60.0, 100195.25], [63.0, 100195.0], [67.0, 100193.25], [75.0, 100192.0], [74.0, 100191.0], [77.0, 100188.0], [76.0, 100191.2], [83.0, 100185.0], [81.0, 100186.0], [80.0, 100185.33333333333], [85.0, 100184.0], [90.0, 100184.0], [89.0, 100184.0], [88.0, 100185.0], [95.0, 100180.0], [92.0, 100180.0], [99.0, 100179.0], [98.0, 100179.0], [97.0, 100179.0], [96.0, 100179.5], [102.0, 100176.0], [101.0, 100176.0], [105.0, 100175.66666666667], [111.0, 100176.0], [110.0, 100175.66666666667], [109.0, 100176.0], [115.0, 100174.0], [113.0, 100174.5], [118.0, 100166.0], [117.0, 100166.0], [116.0, 100176.0], [127.0, 100165.0], [126.0, 100164.75], [133.0, 100154.0], [131.0, 100155.0], [128.0, 100162.0], [142.0, 100147.0], [140.0, 100147.33333333333], [138.0, 100148.0], [137.0, 100148.0], [151.0, 100141.0], [150.0, 100144.0], [149.0, 100143.75], [145.0, 100144.0], [144.0, 100145.5], [158.0, 100138.5], [156.0, 100139.0], [155.0, 100139.33333333333], [152.0, 100141.0], [164.0, 100135.0], [163.0, 100136.33333333333], [160.0, 100138.5], [174.0, 100134.0], [173.0, 100135.0], [172.0, 100135.5], [171.0, 100135.5], [170.0, 100137.0], [183.0, 100128.25], [181.0, 100127.0], [178.0, 100131.0], [176.0, 100132.0], [189.0, 100122.0], [187.0, 100125.0], [186.0, 100126.33333333333], [198.0, 100112.0], [197.0, 100113.0], [196.0, 100120.0], [194.0, 100123.0], [193.0, 100122.0], [192.0, 100123.0], [206.0, 100106.33333333333], [205.0, 100106.5], [203.0, 100107.0], [202.0, 100107.0], [201.0, 100107.0], [215.0, 100104.5], [214.0, 100104.0], [212.0, 100106.0], [209.0, 100105.0], [222.0, 100102.5], [220.0, 100102.0], [219.0, 100103.0], [218.0, 100105.0], [217.0, 100104.0], [229.0, 100098.5], [227.0, 100099.0], [226.0, 100100.0], [225.0, 100099.66666666667], [239.0, 100096.0], [237.0, 100097.0], [235.0, 100097.0], [233.0, 100097.66666666667], [232.0, 100097.0], [247.0, 100092.5], [245.0, 100094.0], [241.0, 100094.0], [240.0, 100097.0], [255.0, 100082.5], [254.0, 100083.0], [250.0, 100085.0], [249.0, 100085.0], [248.0, 100086.0], [271.0, 100060.0], [269.0, 100063.0], [267.0, 100064.0], [264.0, 100074.0], [263.0, 100074.0], [262.0, 100075.0], [261.0, 100076.0], [260.0, 100076.0], [259.0, 100077.0], [256.0, 100077.0], [286.0, 100318.0], [287.0, 100318.0], [285.0, 100318.0], [284.0, 100320.0], [283.0, 100022.0], [282.0, 100023.0], [281.0, 100024.0], [280.0, 100045.2], [276.0, 100046.0], [274.0, 100049.0], [273.0, 100057.0], [302.0, 100310.0], [303.0, 100306.0], [300.0, 100312.0], [299.0, 100315.0], [298.0, 100315.0], [297.0, 100315.0], [295.0, 100316.0], [294.0, 100316.2], [289.0, 100317.0], [288.0, 100317.0], [318.0, 100118.0], [319.0, 100110.0], [317.0, 100119.5], [307.0, 100239.0], [306.0, 100252.0], [305.0, 100257.0], [304.0, 100271.0], [315.0, 100130.0], [314.0, 100134.0], [313.0, 100136.0], [312.0, 100153.0], [311.0, 100154.5], [309.0, 100187.0], [328.0, 100049.0], [332.0, 100040.0], [331.0, 100041.0], [330.0, 100041.0], [329.0, 100043.0], [327.0, 100052.0], [326.0, 100059.5], [323.0, 100062.0], [321.0, 100067.0], [320.0, 100104.0], [338.0, 100039.0], [349.0, 100033.0], [348.0, 100034.5], [347.0, 100035.0], [346.0, 100035.0], [345.0, 100035.0], [342.0, 100036.0], [340.0, 100036.0], [337.0, 100040.0], [336.0, 100040.0], [366.0, 100019.0], [365.0, 100020.0], [363.0, 100020.0], [362.0, 100020.0], [357.0, 100031.0], [356.0, 100030.66666666667], [353.0, 100032.0], [352.0, 100034.25], [371.0, 100018.33333333333], [382.0, 100286.0], [381.0, 100285.0], [380.0, 100287.0], [378.0, 100286.66666666667], [375.0, 100014.25], [370.0, 100018.0], [369.0, 100018.0], [368.0, 100018.66666666667], [398.0, 100241.0], [397.0, 100255.0], [395.0, 100257.0], [394.0, 100255.0], [393.0, 100257.0], [392.0, 100257.0], [389.0, 100258.0], [388.0, 100258.0], [387.0, 100266.0], [386.0, 100282.0], [385.0, 100286.0], [384.0, 100285.33333333333], [402.0, 100241.0], [414.0, 100161.0], [413.0, 100190.5], [401.0, 100240.0], [400.0, 100242.0], [411.0, 100191.0], [410.0, 100219.0], [409.0, 100221.5], [407.0, 100224.0], [406.0, 100226.0], [405.0, 100228.0], [404.0, 100239.5], [418.0, 100126.0], [431.0, 100113.0], [430.0, 100112.0], [427.0, 100112.5], [426.0, 100113.0], [425.0, 100113.5], [422.0, 100114.0], [421.0, 100122.33333333333], [417.0, 100130.0], [416.0, 100145.5], [445.0, 100111.0], [443.0, 100110.5], [442.0, 100110.0], [440.0, 100110.0], [439.0, 100111.0], [437.0, 100111.0], [436.0, 100111.33333333333], [433.0, 100113.0], [432.0, 100113.0], [462.0, 100093.0], [463.0, 100091.0], [461.0, 100097.0], [460.0, 100097.0], [458.0, 100098.0], [457.0, 100096.0], [456.0, 100097.0], [454.0, 100106.0], [448.0, 100109.5], [451.0, 100110.0], [450.0, 100109.0], [453.0, 100109.0], [452.0, 100109.0], [478.0, 100090.0], [476.0, 100089.5], [474.0, 100089.25], [469.0, 100091.0], [467.0, 100090.0], [466.0, 100090.0], [494.0, 100081.0], [495.0, 100081.0], [493.0, 100083.0], [492.0, 100086.0], [491.0, 100085.0], [490.0, 100087.0], [488.0, 100087.0], [487.0, 100087.0], [480.0, 100088.5], [486.0, 100088.5], [485.0, 100088.25], [509.0, 100070.0], [511.0, 100062.5], [508.0, 100071.0], [507.0, 100072.0], [506.0, 100077.5], [504.0, 100078.0], [503.0, 100078.5], [501.0, 100079.5], [499.0, 100080.0], [498.0, 100081.5], [496.0, 100080.0], [541.0, 100288.0], [543.0, 100285.5], [528.0, 100014.0], [540.0, 100297.0], [538.0, 100301.0], [537.0, 100011.5], [536.0, 100012.0], [526.0, 100020.0], [514.0, 100042.0], [513.0, 100056.5], [516.0, 100030.0], [515.0, 100032.0], [519.0, 100023.0], [518.0, 100029.5], [525.0, 100022.0], [523.0, 100021.0], [521.0, 100021.0], [534.0, 100013.0], [533.0, 100014.0], [532.0, 100014.0], [531.0, 100014.0], [562.0, 227274.0], [574.0, 184043.66666666666], [575.0, 96150.0], [560.0, 227285.0], [571.0, 97903.0], [569.0, 97903.0], [568.0, 97904.0], [551.0, 100211.5], [549.0, 100224.0], [548.0, 100242.0], [547.0, 100284.33333333333], [544.0, 100286.0], [559.0, 227297.0], [558.0, 227319.0], [557.0, 227327.0], [554.0, 227328.66666666666], [567.0, 97904.0], [565.0, 96243.0], [564.0, 96151.0], [605.0, 101029.0], [604.0, 101029.0], [582.0, 95358.0], [581.0, 96319.0], [580.0, 96144.0], [579.0, 96145.0], [578.0, 121246.0], [577.0, 96634.5], [597.0, 95317.0], [595.0, 95330.0], [594.0, 95331.0], [593.0, 95332.0], [592.0, 95332.5], [590.0, 95335.0], [589.0, 95343.0], [588.0, 95350.0], [587.0, 95354.0], [586.0, 95354.0], [585.0, 96317.0], [584.0, 108296.5], [625.0, 101024.0], [639.0, 101021.0], [615.0, 101026.0], [613.0, 101026.0], [611.0, 101029.0], [610.0, 101029.0], [609.0, 101029.25], [608.0, 101029.0], [630.0, 101023.0], [628.0, 101023.0], [627.0, 101023.5], [620.0, 101024.0], [619.0, 101025.0], [618.0, 101025.0], [617.0, 101026.0], [616.0, 101026.0], [670.0, 115107.0], [671.0, 101251.0], [656.0, 115114.0], [660.0, 115114.0], [658.0, 115114.16666666666], [669.0, 115108.0], [668.0, 101218.0], [667.0, 115110.0], [666.0, 115110.0], [665.0, 115111.0], [647.0, 110269.6], [645.0, 107039.0], [650.0, 115115.0], [648.0, 115115.0], [662.0, 115113.0], [661.0, 115113.0], [702.0, 101223.0], [703.0, 95018.0], [689.0, 101198.0], [688.0, 101219.0], [701.0, 101224.0], [700.0, 101195.0], [699.0, 101195.0], [698.0, 101216.5], [696.0, 101217.0], [678.0, 101243.0], [677.0, 101204.0], [676.0, 111635.75], [672.0, 101207.0], [687.0, 101198.0], [682.0, 115090.5], [680.0, 108166.5], [692.0, 101218.0], [690.0, 105842.66666666667], [729.0, 95169.0], [733.0, 94388.0], [735.0, 108593.0], [722.0, 96923.0], [721.0, 94393.0], [732.0, 96921.0], [731.0, 226134.0], [730.0, 94389.0], [728.0, 95233.0], [711.0, 95240.33333333333], [708.0, 106448.0], [707.0, 106450.0], [706.0, 102066.0], [705.0, 102074.0], [704.0, 102077.0], [719.0, 94394.0], [718.0, 94394.0], [717.0, 94395.0], [716.0, 96928.0], [714.0, 109473.0], [712.0, 94396.0], [726.0, 94390.0], [725.0, 226136.0], [764.0, 220850.0], [767.0, 87870.0], [752.0, 94382.0], [755.0, 161518.0], [753.0, 95159.0], [757.0, 92868.0], [756.0, 96910.0], [766.0, 115721.0], [765.0, 219844.0], [763.0, 220852.0], [762.0, 92645.0], [761.0, 92647.0], [760.0, 93654.0], [751.0, 160644.5], [738.0, 226132.0], [737.0, 95165.0], [741.0, 100447.0], [739.0, 161525.5], [743.0, 94384.0], [742.0, 111039.5], [750.0, 106216.0], [749.0, 96915.0], [748.0, 94382.0], [746.0, 110053.5], [744.0, 226129.0], [759.0, 93655.0], [758.0, 92865.0], [796.0, 205837.0], [799.0, 86210.0], [785.0, 78897.0], [784.0, 81656.0], [787.0, 79643.0], [786.0, 78895.0], [789.0, 78634.0], [788.0, 79641.0], [798.0, 87206.0], [797.0, 87209.0], [795.0, 205839.0], [794.0, 78646.0], [793.0, 206837.0], [792.0, 100972.0], [783.0, 81658.0], [769.0, 86877.0], [768.0, 87868.0], [771.0, 86050.0], [770.0, 111975.0], [773.0, 109969.0], [772.0, 85867.0], [775.0, 85646.0], [774.0, 85051.0], [782.0, 91921.0], [781.0, 91923.0], [780.0, 82058.0], [779.0, 82059.0], [778.0, 96220.0], [777.0, 109728.0], [776.0, 85644.0], [791.0, 103526.0], [790.0, 78632.0], [826.0, 79038.5], [830.0, 66680.0], [831.0, 65108.0], [816.0, 79223.0], [818.0, 65871.0], [817.0, 65872.0], [829.0, 64150.0], [828.0, 66683.0], [827.0, 90030.0], [824.0, 77093.5], [807.0, 93969.0], [806.0, 93970.0], [805.0, 98698.0], [804.0, 94972.0], [803.0, 71053.0], [802.0, 71055.0], [801.0, 96969.0], [800.0, 96971.0], [815.0, 71181.0], [814.0, 66778.0], [812.0, 94739.0], [811.0, 94897.0], [810.0, 67055.0], [809.0, 92971.0], [808.0, 92973.0], [822.0, 110298.0], [819.0, 90035.0], [860.0, 65606.0], [863.0, 71327.0], [849.0, 63894.0], [848.0, 88994.0], [851.0, 64624.0], [850.0, 64627.0], [853.0, 193566.0], [852.0, 193569.0], [862.0, 192908.0], [861.0, 64814.0], [859.0, 79715.0], [858.0, 100055.0], [857.0, 100154.0], [856.0, 100229.0], [847.0, 78225.0], [833.0, 79429.0], [835.0, 92951.0], [834.0, 69239.0], [837.0, 92949.0], [836.0, 65101.0], [839.0, 92947.0], [838.0, 92948.0], [846.0, 91734.0], [845.0, 66653.66666666667], [842.0, 66654.0], [841.0, 92944.0], [840.0, 64135.0], [855.0, 80722.0], [854.0, 80724.0], [892.0, 81631.0], [895.0, 79614.0], [881.0, 69619.0], [880.0, 69620.0], [883.0, 68609.0], [882.0, 98896.0], [885.0, 67600.0], [884.0, 67601.0], [894.0, 80622.0], [893.0, 80624.0], [891.0, 62080.0], [890.0, 70265.0], [889.0, 64013.0], [888.0, 72284.0], [879.0, 100011.5], [865.0, 96775.0], [864.0, 97783.0], [867.0, 95766.0], [866.0, 96773.0], [869.0, 74668.0], [868.0, 75675.0], [871.0, 73658.0], [870.0, 74666.0], [877.0, 100012.0], [876.0, 71164.0], [875.0, 70630.0], [874.0, 71638.0], [873.0, 71639.0], [872.0, 72648.0], [887.0, 65581.0], [886.0, 66592.0], [903.0, 74568.0], [914.0, 100225.66666666667], [925.0, 100216.5], [923.0, 100220.0], [920.0, 100222.0], [902.0, 76040.0], [901.0, 75578.0], [900.0, 86779.0], [899.0, 86781.0], [898.0, 80587.0], [897.0, 81598.0], [896.0, 82605.0], [919.0, 100224.5], [918.0, 100224.0], [916.0, 100224.5], [912.0, 100226.0], [911.0, 100225.66666666667], [910.0, 100225.0], [907.0, 100228.0], [905.0, 100239.0], [904.0, 74564.0], [948.0, 72548.0], [955.0, 65941.0], [945.0, 100435.0], [944.0, 100449.5], [954.0, 79715.0], [953.0, 80721.0], [952.0, 65956.0], [942.0, 160606.0], [928.0, 100215.33333333333], [930.0, 100209.0], [929.0, 100211.0], [938.0, 160606.5], [937.0, 160607.1666666667], [951.0, 97439.0], [950.0, 72003.0], [949.0, 72546.0], [947.0, 73553.0], [946.0, 73558.0], [988.0, 67416.0], [991.0, 82301.0], [977.0, 66069.0], [976.0, 73657.0], [979.0, 72647.0], [978.0, 90157.0], [981.0, 88306.0], [980.0, 88356.0], [990.0, 66735.0], [989.0, 66539.0], [987.0, 67549.0], [986.0, 68754.0], [985.0, 68758.0], [984.0, 70627.0], [975.0, 89967.33333333333], [961.0, 94962.33333333333], [963.0, 68976.0], [962.0, 94962.0], [965.0, 67502.0], [964.0, 68509.0], [967.0, 66491.0], [966.0, 67499.0], [972.0, 66000.0], [971.0, 66002.0], [970.0, 65945.0], [969.0, 75677.0], [968.0, 69482.0], [983.0, 69441.0], [982.0, 70557.0], [1019.0, 66642.0], [1012.0, 73161.0], [1020.0, 68164.0], [1009.0, 73213.0], [1008.0, 75179.0], [1011.0, 73163.0], [1010.0, 73211.0], [1018.0, 65168.0], [1017.0, 67651.0], [1016.0, 71142.0], [999.0, 79219.0], [998.0, 80246.0], [997.0, 80230.0], [996.0, 81237.0], [995.0, 81238.0], [994.0, 81287.0], [993.0, 149608.0], [992.0, 82297.0], [1007.0, 75182.0], [1006.0, 76190.0], [1005.0, 76190.0], [1004.0, 76240.0], [1003.0, 77220.0], [1002.0, 78208.0], [1001.0, 78210.0], [1000.0, 79237.0], [1015.0, 71144.0], [1014.0, 72152.0], [1013.0, 72154.0], [1030.0, 31097.666666666668], [1026.0, 31099.0], [1034.0, 31098.0], [1038.0, 31097.0], [1050.0, 237.33333333333334], [1044.0, 61771.0], [1042.0, 65855.0], [1040.0, 31096.5], [1122.0, 231.5], [1120.0, 231.05882352941177], [1128.0, 231.0], [1130.0, 64210.0], [1124.0, 229.0], [1118.0, 232.30769230769232], [1116.0, 233.0], [1112.0, 232.69230769230768], [1106.0, 233.0], [1104.0, 234.0], [1404.0, 313.29166666666674], [1406.0, 312.3076923076923], [1400.0, 314.0], [1398.0, 313.9259259259259], [1394.0, 315.0], [1392.0, 315.0], [1456.0, 305.0], [1458.0, 305.0], [1446.0, 304.5], [1460.0, 305.25], [1444.0, 306.0], [1422.0, 311.0], [1420.0, 312.0], [1418.0, 310.9285714285714], [1416.0, 312.3333333333333], [1414.0, 311.75], [1412.0, 322.8125], [1410.0, 312.0], [1408.0, 312.6363636363636], [1436.0, 309.0], [1434.0, 310.0], [1432.0, 311.0], [1430.0, 310.5], [1428.0, 310.0], [1448.0, 305.5], [1474.0, 291.75], [1494.0, 201.0], [1484.0, 292.0], [1482.0, 292.4], [1492.0, 201.0], [1490.0, 201.0], [1488.0, 292.0], [1662.0, 272.0], [1678.0, 273.0], [1718.0, 268.0], [1720.0, 267.5], [1698.0, 269.0], [1676.0, 272.0], [1674.0, 271.5], [1670.0, 271.25], [1666.0, 273.75], [1664.0, 274.0], [1694.0, 269.6666666666667], [1690.0, 269.5], [1688.0, 270.5], [1684.0, 271.23076923076917], [1682.0, 271.0], [1710.0, 268.0], [1706.0, 268.0], [1782.0, 148.0], [1776.0, 226.5], [1786.0, 133.0], [1764.0, 232.25], [1762.0, 231.0], [1784.0, 145.5], [1738.0, 241.0], [1740.0, 242.2857142857143], [1758.0, 231.0], [1756.0, 232.0], [1752.0, 233.0], [1750.0, 234.0], [1772.0, 228.0], [1806.0, 60127.0], [1804.0, 91.0], [1802.0, 92.0], [1800.0, 94.0], [1798.0, 102.0], [1794.0, 107.0], [1908.0, 254.0], [1892.0, 254.0], [1898.0, 253.0], [1912.0, 253.0], [1894.0, 254.0], [1886.0, 253.5], [1880.0, 254.75], [1876.0, 256.6], [1882.0, 255.3], [1902.0, 255.0], [1900.0, 254.1764705882353], [1980.0, 218.75], [1982.0, 218.0], [1966.0, 220.77777777777777], [1964.0, 220.4], [1974.0, 220.0], [1972.0, 219.2], [1936.0, 239.21428571428575], [1932.0, 240.0], [1984.0, 218.33333333333334], [2006.0, 63326.0], [1988.0, 219.0], [1992.0, 218.42857142857144], [1994.0, 190.0], [2004.0, 64334.0], [2002.0, 187.5], [2000.0, 189.0], [1998.0, 190.0], [1996.0, 190.0], [2120.0, 284.0], [2140.0, 280.0370370370371], [2128.0, 282.0], [2144.0, 278.8333333333333], [2276.0, 203.0], [2240.0, 207.5], [2244.0, 207.0], [2280.0, 203.0], [2272.0, 204.0], [2200.0, 220.0], [2196.0, 220.75], [2204.0, 219.0], [2228.0, 217.0], [2216.0, 218.0], [2212.0, 219.0], [2208.0, 219.2], [2368.0, 163.2], [2416.0, 127309.0], [2372.0, 162.72], [2376.0, 64.0], [2392.0, 127333.0], [2396.0, 127332.0], [2412.0, 127308.0], [2404.0, 3015.0], [2332.0, 169.0], [2328.0, 170.0], [2324.0, 181.0], [2320.0, 183.33333333333334], [2304.0, 185.33333333333334], [2492.0, 1231.0], [2580.0, 256.0], [2676.0, 238.66666666666666], [2632.0, 251.33333333333334], [2648.0, 731.0], [2616.0, 734.0], [2608.0, 253.0], [2600.0, 252.73333333333335], [2604.0, 252.7142857142857], [2788.0, 144.0], [2808.0, 142.08333333333334], [2768.0, 149.0], [2804.0, 143.0], [2712.0, 204.0], [2708.0, 203.33333333333334], [2692.0, 212.28571428571428], [2724.0, 161.0], [2932.0, 10791.666666666666], [2940.0, 8710.0], [2880.0, 2061.0], [2892.0, 6454.0], [2896.0, 6453.0], [2908.0, 8734.0], [2924.0, 8711.0], [2920.0, 8730.333333333334], [2912.0, 7591.5], [2836.0, 123.0], [2828.0, 140.0], [2824.0, 141.0], [2820.0, 141.20000000000005], [2872.0, 705.0], [2868.0, 818.0], [2856.0, 88.0], [3000.0, 4365.212177153273], [2992.0, 43156.66666666667], [2948.0, 390.0], [2968.0, 14947.0], [2125.0, 283.0], [2149.0, 278.4], [2137.0, 281.5], [2145.0, 280.0], [2141.0, 279.20000000000005], [2281.0, 202.0], [2241.0, 207.0], [2269.0, 204.0], [2285.0, 204.0], [2273.0, 203.0], [2229.0, 210.0], [2193.0, 222.0], [2201.0, 220.08333333333334], [2225.0, 217.0], [2217.0, 218.42857142857142], [2377.0, 65.0], [2421.0, 127306.5], [2381.0, 63.0], [2385.0, 63.0], [2389.0, 59.5], [2397.0, 127331.33333333333], [2413.0, 127309.0], [2409.0, 127309.5], [2333.0, 169.0], [2325.0, 183.25000000000003], [2317.0, 183.0], [2313.0, 184.5], [2305.0, 186.0], [2445.0, 127297.20000000001], [2441.0, 127298.66666666667], [2437.0, 127298.75], [2677.0, 239.0], [2577.0, 1222.0], [2637.0, 249.33333333333334], [2649.0, 249.0], [2685.0, 237.99999999999997], [2629.0, 250.0], [2657.0, 247.71428571428572], [2621.0, 572.3333333333333], [2613.0, 252.0], [2609.0, 252.66666666666666], [2605.0, 252.8], [2597.0, 367.41176470588226], [2601.0, 252.5], [2653.0, 247.5], [2789.0, 144.0], [2757.0, 148.0], [2761.0, 148.6], [2793.0, 144.0], [2713.0, 203.0625], [2693.0, 212.0], [2733.0, 159.0], [2721.0, 160.5], [2929.0, 11622.666666666666], [2933.0, 14955.0], [2889.0, 6456.0], [2897.0, 12145.0], [2901.0, 8735.0], [2905.0, 7592.5], [2917.0, 8731.0], [2913.0, 8732.0], [2841.0, 122.0], [2837.0, 123.0], [2829.0, 139.0], [2825.0, 140.66666666666666], [2817.0, 141.0], [2877.0, 694.0], [2869.0, 706.0], [2861.0, 612.25], [2857.0, 87.0], [2853.0, 91.0], [2949.0, 14947.0], [2953.0, 7667.500000000001], [2993.0, 128751.0], [2989.0, 387.0], [2985.0, 71875.0], [2973.0, 16409.571428571428], [2969.0, 389.0], [1055.0, 236.25], [1045.0, 238.0], [1025.0, 31099.0], [1029.0, 31098.0], [1031.0, 31098.0], [1035.0, 31098.0], [1053.0, 237.0], [1043.0, 65854.0], [1041.0, 31096.666666666668], [1119.0, 230.75], [1131.0, 126374.0], [1129.0, 229.25], [1127.0, 230.5], [1117.0, 231.0], [1115.0, 233.0], [1113.0, 231.0], [1111.0, 232.0], [1399.0, 314.0], [1407.0, 313.0], [1405.0, 312.6666666666667], [1403.0, 313.3333333333333], [1397.0, 314.6666666666667], [1395.0, 315.0], [1393.0, 315.0], [1361.0, 316.0], [1419.0, 310.6666666666667], [1461.0, 484.0], [1459.0, 305.0], [1423.0, 321.81249999999994], [1417.0, 311.0769230769231], [1415.0, 311.68181818181813], [1411.0, 311.3333333333333], [1409.0, 312.71428571428567], [1435.0, 324.53846153846155], [1433.0, 310.3333333333333], [1431.0, 310.0], [1429.0, 310.3333333333333], [1427.0, 400.0], [1425.0, 310.0], [1455.0, 305.0], [1447.0, 305.0], [1473.0, 291.8], [1499.0, 380.5], [1481.0, 292.6666666666667], [1477.0, 292.0], [1497.0, 200.0], [1495.0, 201.0], [1491.0, 201.0], [1489.0, 202.0], [1661.0, 272.0], [1659.0, 274.0], [1677.0, 273.0], [1703.0, 269.3333333333333], [1717.0, 267.3333333333333], [1679.0, 271.5161290322581], [1675.0, 272.75], [1673.0, 273.0], [1671.0, 273.0], [1667.0, 272.60937499999994], [1693.0, 270.0], [1691.0, 269.75], [1685.0, 270.83333333333337], [1683.0, 271.3333333333333], [1681.0, 271.0], [1711.0, 267.25], [1701.0, 268.0], [1699.0, 268.0], [1737.0, 243.0], [1785.0, 133.0], [1781.0, 147.0], [1759.0, 234.0], [1739.0, 241.66666666666666], [1743.0, 240.0], [1741.0, 241.0], [1757.0, 232.0], [1755.0, 233.33333333333334], [1747.0, 241.50000000000003], [1771.0, 231.6], [1769.0, 233.0], [1765.0, 232.0], [1803.0, 91.0], [1805.0, 60129.0], [1801.0, 93.0], [1799.0, 95.0], [1797.0, 102.0], [1795.0, 107.37500000000001], [1909.0, 253.23076923076923], [1911.0, 253.5], [1891.0, 254.0], [1889.0, 254.0], [1893.0, 255.0], [1897.0, 254.42857142857142], [1905.0, 254.66666666666666], [1887.0, 254.0], [1881.0, 255.09090909090912], [1877.0, 256.0], [1883.0, 255.0], [1901.0, 255.0], [1973.0, 219.16666666666669], [1977.0, 220.0], [1963.0, 221.0], [1979.0, 219.0], [1971.0, 218.8], [1969.0, 220.0], [1923.0, 239.0], [1921.0, 239.75], [1931.0, 239.0], [1929.0, 239.0], [1985.0, 219.0], [2007.0, 60822.0], [1989.0, 218.0], [1993.0, 194.0], [1995.0, 190.0], [2005.0, 60835.0], [2003.0, 58987.0], [2150.0, 279.0], [2122.0, 284.0], [2138.0, 280.404761904762], [2142.0, 279.0], [2286.0, 203.0], [2242.0, 207.0], [2270.0, 204.0], [2290.0, 201.91666666666666], [2282.0, 202.5], [2278.0, 203.0], [2206.0, 219.0], [2214.0, 219.0], [2210.0, 219.25], [2418.0, 127308.0], [2370.0, 163.0], [2378.0, 63.0], [2382.0, 62.0], [2390.0, 37.0], [2410.0, 127310.0], [2406.0, 127312.5], [2334.0, 168.0], [2330.0, 168.0], [2306.0, 185.9090909090909], [2314.0, 185.0], [2450.0, 606.6666666666666], [2446.0, 59808.0], [2442.0, 127299.0], [2662.0, 247.6], [2626.0, 251.0], [2634.0, 249.75], [2646.0, 249.0], [2578.0, 1222.0], [2574.0, 258.0], [2618.0, 252.0], [2610.0, 252.5], [2598.0, 254.0], [2654.0, 247.75], [2650.0, 248.75], [2810.0, 142.33333333333334], [2758.0, 149.0], [2814.0, 141.53846153846155], [2798.0, 144.5], [2786.0, 144.0], [2726.0, 159.875], [2922.0, 8730.0], [2882.0, 8747.5], [2890.0, 6456.0], [2898.0, 6453.0], [2902.0, 7593.5], [2910.0, 15486.5], [2846.0, 105.33333333333333], [2842.0, 121.0], [2818.0, 141.0], [2878.0, 3580.0], [2854.0, 90.0], [2850.0, 104.75], [2958.0, 14946.5], [2994.0, 386.5], [2986.0, 57472.857142857145], [2139.0, 279.5], [2147.0, 278.5], [2143.0, 279.2], [2287.0, 202.0], [2291.0, 202.0], [2243.0, 207.0], [2263.0, 205.5], [2271.0, 204.0], [2279.0, 203.0], [2275.0, 203.5], [2195.0, 220.5], [2207.0, 220.0], [2227.0, 217.8], [2223.0, 217.33333333333334], [2215.0, 218.75], [2211.0, 219.33333333333334], [2375.0, 64.5], [2387.0, 61.0], [2371.0, 163.0], [2383.0, 63.0], [2391.0, 30.0], [2395.0, 127333.0], [2419.0, 127308.0], [2407.0, 127312.0], [2403.0, 77605.6], [2335.0, 168.0], [2323.0, 183.0], [2315.0, 184.5], [2495.0, 265.0], [2447.0, 59806.0], [2443.0, 127299.0], [2435.0, 127299.0], [2575.0, 257.0], [2627.0, 251.0], [2639.0, 249.57142857142858], [2579.0, 257.0], [2623.0, 250.0], [2619.0, 251.07692307692307], [2615.0, 251.59183673469386], [2611.0, 1218.0], [2607.0, 252.0], [2599.0, 253.0], [2603.0, 252.7142857142857], [2759.0, 149.0], [2815.0, 141.0], [2763.0, 148.25], [2807.0, 142.0], [2783.0, 144.625], [2771.0, 147.5], [2723.0, 160.5], [2787.0, 144.5], [2887.0, 5933.25], [2943.0, 8978.142857142857], [2899.0, 6452.0], [2883.0, 8747.0], [2895.0, 7594.5], [2903.0, 8735.0], [2907.0, 4249.0], [2935.0, 8710.5], [2915.0, 14342.5], [2843.0, 120.0], [2839.0, 122.0], [2835.0, 132.33333333333334], [2827.0, 140.5], [2819.0, 141.0], [2875.0, 2072.3333333333335], [2871.0, 1261.5], [2863.0, 4714.0], [2855.0, 89.0], [2947.0, 7668.75], [2987.0, 38039.0], [2971.0, 64597.0], [1.0, 131098.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[2963.2581166666696, 5201.399524999957]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 3000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 7316.4, "minX": 1.68287478E12, "maxY": 333499.43333333335, "series": [{"data": [[1.68287514E12, 10305.183333333332], [1.68287496E12, 333499.43333333335], [1.68287502E12, 261744.2], [1.68287484E12, 244219.5], [1.6828749E12, 287102.4166666667], [1.68287478E12, 256912.66666666666], [1.68287508E12, 38930.5]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.68287514E12, 7316.4], [1.68287496E12, 231856.8], [1.68287502E12, 183716.4], [1.68287484E12, 173670.0], [1.6828749E12, 201180.0], [1.68287478E12, 181070.4], [1.68287508E12, 27300.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68287514E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 2079.4015587307676, "minX": 1.68287478E12, "maxY": 102939.32261768082, "series": [{"data": [[1.68287514E12, 102939.32261768082], [1.68287496E12, 4630.902394971629], [1.68287502E12, 3654.6460561191875], [1.68287484E12, 7613.208359446542], [1.6828749E12, 4022.8361857172536], [1.68287478E12, 2079.4015587307676], [1.68287508E12, 8303.626153846153]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68287514E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 2079.3878734459004, "minX": 1.68287478E12, "maxY": 102939.3157290471, "series": [{"data": [[1.68287514E12, 102939.3157290471], [1.68287496E12, 4308.16772026153], [1.68287502E12, 3602.071611370102], [1.68287484E12, 7510.109820180322], [1.6828749E12, 3902.2653758067945], [1.68287478E12, 2079.3878734459004], [1.68287508E12, 8303.621538461533]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68287514E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 40.7126090183706, "minX": 1.68287478E12, "maxY": 6106.948335246824, "series": [{"data": [[1.68287514E12, 6106.948335246824], [1.68287496E12, 1687.4615467976835], [1.68287502E12, 1588.4146787313728], [1.68287484E12, 1374.775249481748], [1.6828749E12, 2640.568436393916], [1.68287478E12, 40.7126090183706], [1.68287508E12, 3427.404307692317]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68287514E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 9.0, "minX": 1.68287478E12, "maxY": 227329.0, "series": [{"data": [[1.68287514E12, 227329.0], [1.68287496E12, 209394.0], [1.68287502E12, 132747.0], [1.68287484E12, 101074.0], [1.6828749E12, 162814.0], [1.68287478E12, 48013.0], [1.68287508E12, 160608.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.68287514E12, 102076.4], [1.68287496E12, 3853.0], [1.68287502E12, 5802.000000000029], [1.68287484E12, 10164.0], [1.6828749E12, 1384.0], [1.68287478E12, 9683.0], [1.68287508E12, 8711.9]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.68287514E12, 227288.36], [1.68287496E12, 100407.0], [1.68287502E12, 127613.98000000001], [1.68287484E12, 100204.99], [1.6828749E12, 136808.99], [1.68287478E12, 35035.91000000114], [1.68287508E12, 128300.10999999999]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.68287514E12, 115115.0], [1.68287496E12, 15520.0], [1.68287502E12, 12070.95], [1.68287484E12, 60212.9], [1.6828749E12, 7517.0], [1.68287478E12, 11030.0], [1.68287508E12, 77664.59999999982]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.68287514E12, 63894.0], [1.68287496E12, 11.0], [1.68287502E12, 16.0], [1.68287484E12, 9.0], [1.6828749E12, 17.0], [1.68287478E12, 12.0], [1.68287508E12, 25.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.68287514E12, 100123.0], [1.68287496E12, 221.0], [1.68287502E12, 241.0], [1.68287484E12, 222.0], [1.6828749E12, 223.0], [1.68287478E12, 174.0], [1.68287508E12, 281.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68287514E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 74.0, "minX": 1.0, "maxY": 173125.5, "series": [{"data": [[2.0, 76215.0], [3.0, 73657.0], [4.0, 38879.5], [5.0, 89967.0], [6.0, 8522.5], [7.0, 65902.0], [8.0, 7083.0], [9.0, 79715.0], [10.0, 124247.0], [11.0, 7333.0], [12.0, 190.0], [14.0, 66070.0], [21.0, 7362.0], [22.0, 7557.5], [23.0, 31096.5], [26.0, 1761.0], [29.0, 68306.0], [30.0, 173125.5], [35.0, 100257.0], [38.0, 234.0], [40.0, 100215.0], [42.0, 57226.5], [44.0, 67584.0], [48.0, 95414.5], [53.0, 96919.0], [56.0, 7038.0], [72.0, 98.5], [84.0, 186.0], [86.0, 232.0], [91.0, 5791.0], [93.0, 133.0], [92.0, 100042.0], [114.0, 6293.5], [118.0, 101034.0], [125.0, 6688.0], [127.0, 100089.0], [132.0, 99.0], [138.0, 5695.5], [145.0, 5429.0], [152.0, 101195.5], [167.0, 63220.0], [185.0, 225.0], [188.0, 253.0], [203.0, 137.0], [209.0, 8144.0], [216.0, 8423.0], [240.0, 200.0], [245.0, 5369.0], [248.0, 210.0], [256.0, 3681.0], [279.0, 10132.0], [276.0, 219.0], [273.0, 5305.0], [280.0, 211.0], [287.0, 1219.0], [281.0, 250.0], [278.0, 100145.0], [289.0, 154.0], [319.0, 141.0], [315.0, 211.0], [323.0, 6190.0], [334.0, 1863.0], [325.0, 217.0], [328.0, 11652.0], [351.0, 7171.0], [348.0, 159.0], [342.0, 220.0], [338.0, 220.0], [362.0, 7069.0], [360.0, 221.0], [367.0, 210.0], [358.0, 13024.0], [361.0, 223.0], [365.0, 344.0], [383.0, 6561.0], [373.0, 226.0], [378.0, 184.0], [382.0, 251.0], [380.0, 222.0], [377.0, 238.0], [397.0, 223.0], [386.0, 201.0], [398.0, 215.0], [391.0, 190.0], [392.0, 170.5], [387.0, 236.0], [401.0, 205.0], [404.0, 185.0], [406.0, 209.0], [403.0, 240.0], [405.0, 220.0], [410.0, 3725.0], [415.0, 219.0], [411.0, 202.0], [414.0, 231.0], [400.0, 208.0], [407.0, 235.0], [402.0, 219.0], [423.0, 222.0], [422.0, 246.0], [428.0, 168.0], [424.0, 194.0], [421.0, 227.0], [420.0, 195.0], [436.0, 167.0], [443.0, 207.0], [462.0, 225.0], [454.0, 213.0], [470.0, 29634.0], [474.0, 190.0], [466.0, 250.0], [493.0, 236.0], [481.0, 8524.0], [483.0, 7060.0], [486.0, 187.0], [494.0, 232.0], [500.0, 196.0], [510.0, 207.0], [527.0, 220.0], [534.0, 166.0], [546.0, 160.0], [556.0, 371.0], [575.0, 9850.0], [594.0, 74.0], [598.0, 198.0], [589.0, 255.0], [577.0, 167.0], [606.0, 191.0], [639.0, 199.0], [636.0, 215.0], [669.0, 212.0], [658.0, 218.0], [680.0, 135.0], [700.0, 219.0], [696.0, 5112.0], [701.0, 230.0], [688.0, 208.0], [675.0, 293.0], [732.0, 203.0], [721.0, 181.0], [723.0, 289.0], [712.0, 221.0], [757.0, 383.0], [743.0, 205.0], [758.0, 316.0], [790.0, 218.0], [785.0, 163.0], [798.0, 217.0], [799.0, 228.0], [783.0, 329.0], [794.0, 223.0], [804.0, 142.0], [813.0, 9681.0], [823.0, 236.0], [830.0, 220.0], [822.0, 190.0], [824.0, 272.0], [814.0, 2329.5], [800.0, 234.0], [812.0, 238.0], [811.0, 336.0], [806.0, 206.0], [803.0, 205.0], [863.0, 194.0], [843.0, 413.0], [848.0, 446.0], [881.0, 5033.0], [901.0, 214.0], [938.0, 142.0], [964.0, 134.0], [979.0, 184.0], [976.0, 318.0], [982.0, 559.5], [1037.0, 115.0], [1026.0, 7214.5], [1043.0, 118.0], [1039.0, 415.0], [1040.0, 227.0], [1138.0, 396.0], [1109.0, 245.0], [1204.0, 156.0], [1234.0, 233.0], [1231.0, 300.0], [1239.0, 352.0], [1264.0, 376.0], [1375.0, 243.0], [1504.0, 252.0], [1533.0, 497.0], [1548.0, 401.0], [1763.0, 137.0], [1.0, 72466.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[8.0, 73836.0], [40.0, 32692.0], [10.0, 17176.0], [701.0, 44576.0], [42.0, 28686.0], [723.0, 28866.0], [44.0, 135322.0], [743.0, 36379.0], [48.0, 123428.0], [811.0, 9004.0], [830.0, 79052.0], [881.0, 32821.0], [56.0, 21892.0], [273.0, 29475.0], [280.0, 32410.0], [5.0, 95013.0], [21.0, 105531.0], [382.0, 151992.0], [405.0, 145684.0], [410.0, 28214.0], [421.0, 65294.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1763.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 173125.5, "series": [{"data": [[2.0, 76215.0], [3.0, 73657.0], [4.0, 38879.5], [5.0, 89967.0], [6.0, 8522.5], [7.0, 65902.0], [8.0, 7083.0], [9.0, 79715.0], [10.0, 124247.0], [11.0, 7333.0], [12.0, 190.0], [14.0, 66070.0], [21.0, 7362.0], [22.0, 7557.5], [23.0, 31096.5], [26.0, 1761.0], [29.0, 68306.0], [30.0, 173125.5], [35.0, 100257.0], [38.0, 234.0], [40.0, 100215.0], [42.0, 57226.5], [44.0, 67584.0], [48.0, 95414.5], [53.0, 96919.0], [56.0, 7038.0], [72.0, 98.5], [84.0, 186.0], [86.0, 232.0], [91.0, 5791.0], [93.0, 133.0], [92.0, 100042.0], [114.0, 6293.5], [118.0, 101034.0], [125.0, 6688.0], [127.0, 100089.0], [132.0, 99.0], [138.0, 5695.5], [145.0, 5429.0], [152.0, 101195.5], [167.0, 63220.0], [185.0, 225.0], [188.0, 253.0], [203.0, 137.0], [209.0, 8144.0], [216.0, 8423.0], [240.0, 200.0], [245.0, 5369.0], [248.0, 210.0], [256.0, 3681.0], [279.0, 10132.0], [276.0, 219.0], [273.0, 5305.0], [280.0, 211.0], [287.0, 1219.0], [281.0, 250.0], [278.0, 100145.0], [289.0, 154.0], [319.0, 141.0], [315.0, 211.0], [323.0, 6190.0], [334.0, 1863.0], [325.0, 217.0], [328.0, 11652.0], [351.0, 7171.0], [348.0, 159.0], [342.0, 220.0], [338.0, 220.0], [362.0, 7069.0], [360.0, 221.0], [367.0, 210.0], [358.0, 13024.0], [361.0, 223.0], [365.0, 344.0], [383.0, 6561.0], [373.0, 226.0], [378.0, 184.0], [382.0, 251.0], [380.0, 222.0], [377.0, 238.0], [397.0, 223.0], [386.0, 201.0], [398.0, 215.0], [391.0, 190.0], [392.0, 170.5], [387.0, 236.0], [401.0, 205.0], [404.0, 185.0], [406.0, 209.0], [403.0, 240.0], [405.0, 220.0], [410.0, 3725.0], [415.0, 219.0], [411.0, 202.0], [414.0, 231.0], [400.0, 208.0], [407.0, 235.0], [402.0, 219.0], [423.0, 222.0], [422.0, 246.0], [428.0, 168.0], [424.0, 194.0], [421.0, 227.0], [420.0, 195.0], [436.0, 167.0], [443.0, 207.0], [462.0, 225.0], [454.0, 213.0], [470.0, 29634.0], [474.0, 190.0], [466.0, 250.0], [493.0, 236.0], [481.0, 8524.0], [483.0, 7060.0], [486.0, 187.0], [494.0, 232.0], [500.0, 196.0], [510.0, 207.0], [527.0, 220.0], [534.0, 166.0], [546.0, 160.0], [556.0, 371.0], [575.0, 9850.0], [594.0, 74.0], [598.0, 198.0], [589.0, 255.0], [577.0, 167.0], [606.0, 191.0], [639.0, 199.0], [636.0, 215.0], [669.0, 212.0], [658.0, 218.0], [680.0, 135.0], [700.0, 219.0], [696.0, 5112.0], [701.0, 230.0], [688.0, 208.0], [675.0, 293.0], [732.0, 203.0], [721.0, 181.0], [723.0, 289.0], [712.0, 221.0], [757.0, 383.0], [743.0, 205.0], [758.0, 316.0], [790.0, 218.0], [785.0, 163.0], [798.0, 217.0], [799.0, 228.0], [783.0, 329.0], [794.0, 223.0], [804.0, 142.0], [813.0, 9681.0], [823.0, 236.0], [830.0, 220.0], [822.0, 190.0], [824.0, 272.0], [814.0, 2329.5], [800.0, 234.0], [812.0, 238.0], [811.0, 335.5], [806.0, 206.0], [803.0, 205.0], [863.0, 194.0], [843.0, 413.0], [848.0, 446.0], [881.0, 5033.0], [901.0, 214.0], [938.0, 142.0], [964.0, 134.0], [979.0, 184.0], [976.0, 318.0], [982.0, 559.5], [1037.0, 115.0], [1026.0, 7214.5], [1043.0, 118.0], [1039.0, 415.0], [1040.0, 227.0], [1138.0, 396.0], [1109.0, 245.0], [1204.0, 156.0], [1234.0, 233.0], [1231.0, 300.0], [1239.0, 352.0], [1264.0, 376.0], [1375.0, 243.0], [1504.0, 252.0], [1533.0, 497.0], [1548.0, 401.0], [1763.0, 137.0], [1.0, 72466.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[8.0, 0.0], [40.0, 0.0], [10.0, 0.0], [701.0, 0.0], [42.0, 0.0], [723.0, 0.0], [44.0, 0.0], [743.0, 0.0], [48.0, 0.0], [811.0, 0.0], [830.0, 0.0], [881.0, 0.0], [56.0, 0.0], [273.0, 0.0], [280.0, 0.0], [5.0, 0.0], [21.0, 0.0], [382.0, 0.0], [405.0, 0.0], [410.0, 0.0], [421.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1763.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 60.0, "minX": 1.68287478E12, "maxY": 453.3333333333333, "series": [{"data": [[1.68287496E12, 453.3333333333333], [1.68287502E12, 346.6666666666667], [1.68287484E12, 340.0], [1.6828749E12, 393.3333333333333], [1.68287478E12, 406.6666666666667], [1.68287508E12, 60.0]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68287508E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.18333333333333332, "minX": 1.68287478E12, "maxY": 460.03333333333336, "series": [{"data": [[1.68287514E12, 14.516666666666667], [1.68287496E12, 460.03333333333336], [1.68287502E12, 364.51666666666665], [1.68287484E12, 344.5833333333333], [1.6828749E12, 399.1666666666667], [1.68287478E12, 359.26666666666665], [1.68287508E12, 54.166666666666664]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.68287496E12, 1.35], [1.68287502E12, 0.18333333333333332], [1.68287484E12, 1.1333333333333333], [1.6828749E12, 1.0833333333333333]], "isOverall": false, "label": "Non HTTP response code: java.net.SocketException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68287514E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.18333333333333332, "minX": 1.68287478E12, "maxY": 460.03333333333336, "series": [{"data": [[1.68287514E12, 14.516666666666667], [1.68287496E12, 460.03333333333336], [1.68287502E12, 364.51666666666665], [1.68287484E12, 344.5833333333333], [1.6828749E12, 399.1666666666667], [1.68287478E12, 359.26666666666665], [1.68287508E12, 54.166666666666664]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.68287496E12, 1.35], [1.68287502E12, 0.18333333333333332], [1.68287484E12, 1.1333333333333333], [1.6828749E12, 1.0833333333333333]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68287514E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.18333333333333332, "minX": 1.68287478E12, "maxY": 460.03333333333336, "series": [{"data": [[1.68287514E12, 14.516666666666667], [1.68287496E12, 460.03333333333336], [1.68287502E12, 364.51666666666665], [1.68287484E12, 344.5833333333333], [1.6828749E12, 399.1666666666667], [1.68287478E12, 359.26666666666665], [1.68287508E12, 54.166666666666664]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.68287496E12, 1.35], [1.68287502E12, 0.18333333333333332], [1.68287484E12, 1.1333333333333333], [1.6828749E12, 1.0833333333333333]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68287514E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

