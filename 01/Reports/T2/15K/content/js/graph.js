/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 6.0, "minX": 0.0, "maxY": 194126.0, "series": [{"data": [[0.0, 6.0], [0.1, 21.0], [0.2, 24.0], [0.3, 26.0], [0.4, 27.0], [0.5, 28.0], [0.6, 29.0], [0.7, 31.0], [0.8, 32.0], [0.9, 32.0], [1.0, 33.0], [1.1, 34.0], [1.2, 35.0], [1.3, 36.0], [1.4, 37.0], [1.5, 38.0], [1.6, 40.0], [1.7, 41.0], [1.8, 41.0], [1.9, 42.0], [2.0, 43.0], [2.1, 44.0], [2.2, 45.0], [2.3, 45.0], [2.4, 46.0], [2.5, 47.0], [2.6, 48.0], [2.7, 49.0], [2.8, 49.0], [2.9, 50.0], [3.0, 51.0], [3.1, 51.0], [3.2, 52.0], [3.3, 52.0], [3.4, 53.0], [3.5, 53.0], [3.6, 54.0], [3.7, 55.0], [3.8, 55.0], [3.9, 56.0], [4.0, 56.0], [4.1, 57.0], [4.2, 57.0], [4.3, 58.0], [4.4, 58.0], [4.5, 58.0], [4.6, 59.0], [4.7, 59.0], [4.8, 60.0], [4.9, 60.0], [5.0, 60.0], [5.1, 61.0], [5.2, 61.0], [5.3, 62.0], [5.4, 62.0], [5.5, 63.0], [5.6, 63.0], [5.7, 64.0], [5.8, 65.0], [5.9, 65.0], [6.0, 66.0], [6.1, 67.0], [6.2, 68.0], [6.3, 68.0], [6.4, 69.0], [6.5, 69.0], [6.6, 70.0], [6.7, 70.0], [6.8, 71.0], [6.9, 71.0], [7.0, 72.0], [7.1, 72.0], [7.2, 73.0], [7.3, 73.0], [7.4, 74.0], [7.5, 75.0], [7.6, 75.0], [7.7, 76.0], [7.8, 77.0], [7.9, 77.0], [8.0, 78.0], [8.1, 78.0], [8.2, 79.0], [8.3, 79.0], [8.4, 80.0], [8.5, 80.0], [8.6, 81.0], [8.7, 81.0], [8.8, 82.0], [8.9, 82.0], [9.0, 83.0], [9.1, 84.0], [9.2, 84.0], [9.3, 85.0], [9.4, 85.0], [9.5, 86.0], [9.6, 87.0], [9.7, 87.0], [9.8, 88.0], [9.9, 88.0], [10.0, 89.0], [10.1, 90.0], [10.2, 90.0], [10.3, 91.0], [10.4, 92.0], [10.5, 92.0], [10.6, 93.0], [10.7, 94.0], [10.8, 95.0], [10.9, 95.0], [11.0, 96.0], [11.1, 96.0], [11.2, 97.0], [11.3, 98.0], [11.4, 98.0], [11.5, 99.0], [11.6, 99.0], [11.7, 100.0], [11.8, 101.0], [11.9, 101.0], [12.0, 102.0], [12.1, 103.0], [12.2, 103.0], [12.3, 104.0], [12.4, 105.0], [12.5, 106.0], [12.6, 106.0], [12.7, 107.0], [12.8, 107.0], [12.9, 108.0], [13.0, 109.0], [13.1, 109.0], [13.2, 110.0], [13.3, 111.0], [13.4, 112.0], [13.5, 113.0], [13.6, 113.0], [13.7, 114.0], [13.8, 115.0], [13.9, 115.0], [14.0, 116.0], [14.1, 117.0], [14.2, 117.0], [14.3, 118.0], [14.4, 119.0], [14.5, 119.0], [14.6, 120.0], [14.7, 120.0], [14.8, 120.0], [14.9, 121.0], [15.0, 121.0], [15.1, 122.0], [15.2, 122.0], [15.3, 123.0], [15.4, 123.0], [15.5, 124.0], [15.6, 124.0], [15.7, 125.0], [15.8, 125.0], [15.9, 126.0], [16.0, 126.0], [16.1, 127.0], [16.2, 128.0], [16.3, 129.0], [16.4, 129.0], [16.5, 130.0], [16.6, 131.0], [16.7, 132.0], [16.8, 132.0], [16.9, 133.0], [17.0, 134.0], [17.1, 134.0], [17.2, 135.0], [17.3, 135.0], [17.4, 136.0], [17.5, 138.0], [17.6, 139.0], [17.7, 139.0], [17.8, 140.0], [17.9, 141.0], [18.0, 141.0], [18.1, 142.0], [18.2, 143.0], [18.3, 144.0], [18.4, 146.0], [18.5, 147.0], [18.6, 148.0], [18.7, 150.0], [18.8, 151.0], [18.9, 153.0], [19.0, 154.0], [19.1, 155.0], [19.2, 155.0], [19.3, 156.0], [19.4, 157.0], [19.5, 157.0], [19.6, 157.0], [19.7, 158.0], [19.8, 158.0], [19.9, 159.0], [20.0, 160.0], [20.1, 161.0], [20.2, 161.0], [20.3, 162.0], [20.4, 163.0], [20.5, 164.0], [20.6, 165.0], [20.7, 166.0], [20.8, 167.0], [20.9, 168.0], [21.0, 168.0], [21.1, 169.0], [21.2, 169.0], [21.3, 170.0], [21.4, 171.0], [21.5, 172.0], [21.6, 173.0], [21.7, 174.0], [21.8, 175.0], [21.9, 177.0], [22.0, 178.0], [22.1, 180.0], [22.2, 181.0], [22.3, 182.0], [22.4, 183.0], [22.5, 185.0], [22.6, 186.0], [22.7, 187.0], [22.8, 189.0], [22.9, 190.0], [23.0, 191.0], [23.1, 193.0], [23.2, 194.0], [23.3, 195.0], [23.4, 196.0], [23.5, 197.0], [23.6, 198.0], [23.7, 200.0], [23.8, 201.0], [23.9, 203.0], [24.0, 204.0], [24.1, 205.0], [24.2, 206.0], [24.3, 207.0], [24.4, 208.0], [24.5, 209.0], [24.6, 210.0], [24.7, 210.0], [24.8, 211.0], [24.9, 211.0], [25.0, 212.0], [25.1, 212.0], [25.2, 213.0], [25.3, 214.0], [25.4, 215.0], [25.5, 217.0], [25.6, 219.0], [25.7, 221.0], [25.8, 224.0], [25.9, 226.0], [26.0, 228.0], [26.1, 229.0], [26.2, 229.0], [26.3, 230.0], [26.4, 231.0], [26.5, 232.0], [26.6, 233.0], [26.7, 234.0], [26.8, 235.0], [26.9, 237.0], [27.0, 238.0], [27.1, 239.0], [27.2, 240.0], [27.3, 240.0], [27.4, 241.0], [27.5, 242.0], [27.6, 243.0], [27.7, 244.0], [27.8, 245.0], [27.9, 247.0], [28.0, 248.0], [28.1, 249.0], [28.2, 249.0], [28.3, 251.0], [28.4, 252.0], [28.5, 253.0], [28.6, 255.0], [28.7, 256.0], [28.8, 258.0], [28.9, 259.0], [29.0, 260.0], [29.1, 261.0], [29.2, 262.0], [29.3, 263.0], [29.4, 264.0], [29.5, 265.0], [29.6, 266.0], [29.7, 267.0], [29.8, 268.0], [29.9, 269.0], [30.0, 270.0], [30.1, 271.0], [30.2, 273.0], [30.3, 275.0], [30.4, 275.0], [30.5, 276.0], [30.6, 277.0], [30.7, 278.0], [30.8, 280.0], [30.9, 281.0], [31.0, 282.0], [31.1, 283.0], [31.2, 285.0], [31.3, 286.0], [31.4, 288.0], [31.5, 290.0], [31.6, 291.0], [31.7, 292.0], [31.8, 293.0], [31.9, 293.0], [32.0, 294.0], [32.1, 295.0], [32.2, 295.0], [32.3, 296.0], [32.4, 296.0], [32.5, 297.0], [32.6, 298.0], [32.7, 299.0], [32.8, 301.0], [32.9, 302.0], [33.0, 303.0], [33.1, 304.0], [33.2, 307.0], [33.3, 308.0], [33.4, 310.0], [33.5, 311.0], [33.6, 312.0], [33.7, 313.0], [33.8, 314.0], [33.9, 315.0], [34.0, 317.0], [34.1, 320.0], [34.2, 321.0], [34.3, 323.0], [34.4, 325.0], [34.5, 327.0], [34.6, 328.0], [34.7, 329.0], [34.8, 330.0], [34.9, 331.0], [35.0, 332.0], [35.1, 333.0], [35.2, 335.0], [35.3, 336.0], [35.4, 337.0], [35.5, 338.0], [35.6, 339.0], [35.7, 340.0], [35.8, 341.0], [35.9, 341.0], [36.0, 342.0], [36.1, 343.0], [36.2, 344.0], [36.3, 345.0], [36.4, 346.0], [36.5, 348.0], [36.6, 349.0], [36.7, 350.0], [36.8, 351.0], [36.9, 352.0], [37.0, 352.0], [37.1, 353.0], [37.2, 353.0], [37.3, 354.0], [37.4, 354.0], [37.5, 355.0], [37.6, 356.0], [37.7, 357.0], [37.8, 358.0], [37.9, 359.0], [38.0, 360.0], [38.1, 361.0], [38.2, 362.0], [38.3, 364.0], [38.4, 366.0], [38.5, 366.0], [38.6, 367.0], [38.7, 368.0], [38.8, 368.0], [38.9, 369.0], [39.0, 370.0], [39.1, 371.0], [39.2, 371.0], [39.3, 372.0], [39.4, 372.0], [39.5, 373.0], [39.6, 373.0], [39.7, 373.0], [39.8, 374.0], [39.9, 374.0], [40.0, 375.0], [40.1, 375.0], [40.2, 376.0], [40.3, 377.0], [40.4, 378.0], [40.5, 379.0], [40.6, 380.0], [40.7, 381.0], [40.8, 381.0], [40.9, 382.0], [41.0, 382.0], [41.1, 383.0], [41.2, 383.0], [41.3, 384.0], [41.4, 384.0], [41.5, 385.0], [41.6, 386.0], [41.7, 387.0], [41.8, 388.0], [41.9, 389.0], [42.0, 390.0], [42.1, 390.0], [42.2, 391.0], [42.3, 392.0], [42.4, 393.0], [42.5, 393.0], [42.6, 394.0], [42.7, 395.0], [42.8, 395.0], [42.9, 396.0], [43.0, 397.0], [43.1, 399.0], [43.2, 400.0], [43.3, 400.0], [43.4, 401.0], [43.5, 402.0], [43.6, 403.0], [43.7, 403.0], [43.8, 404.0], [43.9, 405.0], [44.0, 405.0], [44.1, 406.0], [44.2, 407.0], [44.3, 407.0], [44.4, 408.0], [44.5, 408.0], [44.6, 409.0], [44.7, 410.0], [44.8, 411.0], [44.9, 412.0], [45.0, 413.0], [45.1, 414.0], [45.2, 415.0], [45.3, 416.0], [45.4, 417.0], [45.5, 418.0], [45.6, 418.0], [45.7, 419.0], [45.8, 420.0], [45.9, 420.0], [46.0, 421.0], [46.1, 422.0], [46.2, 422.0], [46.3, 423.0], [46.4, 423.0], [46.5, 424.0], [46.6, 424.0], [46.7, 425.0], [46.8, 426.0], [46.9, 426.0], [47.0, 427.0], [47.1, 427.0], [47.2, 428.0], [47.3, 429.0], [47.4, 430.0], [47.5, 430.0], [47.6, 431.0], [47.7, 431.0], [47.8, 432.0], [47.9, 433.0], [48.0, 433.0], [48.1, 434.0], [48.2, 435.0], [48.3, 436.0], [48.4, 436.0], [48.5, 437.0], [48.6, 438.0], [48.7, 439.0], [48.8, 441.0], [48.9, 443.0], [49.0, 444.0], [49.1, 444.0], [49.2, 445.0], [49.3, 445.0], [49.4, 446.0], [49.5, 446.0], [49.6, 447.0], [49.7, 447.0], [49.8, 448.0], [49.9, 449.0], [50.0, 449.0], [50.1, 450.0], [50.2, 450.0], [50.3, 451.0], [50.4, 451.0], [50.5, 452.0], [50.6, 452.0], [50.7, 453.0], [50.8, 454.0], [50.9, 455.0], [51.0, 455.0], [51.1, 456.0], [51.2, 456.0], [51.3, 457.0], [51.4, 457.0], [51.5, 458.0], [51.6, 458.0], [51.7, 458.0], [51.8, 459.0], [51.9, 459.0], [52.0, 460.0], [52.1, 460.0], [52.2, 460.0], [52.3, 460.0], [52.4, 461.0], [52.5, 461.0], [52.6, 462.0], [52.7, 462.0], [52.8, 462.0], [52.9, 463.0], [53.0, 463.0], [53.1, 464.0], [53.2, 464.0], [53.3, 465.0], [53.4, 465.0], [53.5, 466.0], [53.6, 466.0], [53.7, 467.0], [53.8, 467.0], [53.9, 467.0], [54.0, 468.0], [54.1, 468.0], [54.2, 468.0], [54.3, 468.0], [54.4, 469.0], [54.5, 469.0], [54.6, 469.0], [54.7, 470.0], [54.8, 470.0], [54.9, 470.0], [55.0, 471.0], [55.1, 471.0], [55.2, 472.0], [55.3, 472.0], [55.4, 473.0], [55.5, 473.0], [55.6, 474.0], [55.7, 474.0], [55.8, 475.0], [55.9, 475.0], [56.0, 476.0], [56.1, 476.0], [56.2, 476.0], [56.3, 477.0], [56.4, 477.0], [56.5, 477.0], [56.6, 478.0], [56.7, 478.0], [56.8, 479.0], [56.9, 479.0], [57.0, 479.0], [57.1, 480.0], [57.2, 480.0], [57.3, 481.0], [57.4, 481.0], [57.5, 481.0], [57.6, 482.0], [57.7, 482.0], [57.8, 482.0], [57.9, 483.0], [58.0, 483.0], [58.1, 484.0], [58.2, 484.0], [58.3, 484.0], [58.4, 485.0], [58.5, 485.0], [58.6, 486.0], [58.7, 486.0], [58.8, 487.0], [58.9, 487.0], [59.0, 488.0], [59.1, 488.0], [59.2, 488.0], [59.3, 489.0], [59.4, 489.0], [59.5, 489.0], [59.6, 490.0], [59.7, 490.0], [59.8, 491.0], [59.9, 491.0], [60.0, 491.0], [60.1, 492.0], [60.2, 492.0], [60.3, 493.0], [60.4, 493.0], [60.5, 493.0], [60.6, 494.0], [60.7, 494.0], [60.8, 495.0], [60.9, 495.0], [61.0, 495.0], [61.1, 496.0], [61.2, 496.0], [61.3, 496.0], [61.4, 496.0], [61.5, 497.0], [61.6, 497.0], [61.7, 497.0], [61.8, 498.0], [61.9, 498.0], [62.0, 498.0], [62.1, 499.0], [62.2, 500.0], [62.3, 500.0], [62.4, 501.0], [62.5, 501.0], [62.6, 502.0], [62.7, 503.0], [62.8, 504.0], [62.9, 504.0], [63.0, 505.0], [63.1, 506.0], [63.2, 508.0], [63.3, 508.0], [63.4, 509.0], [63.5, 509.0], [63.6, 510.0], [63.7, 510.0], [63.8, 510.0], [63.9, 511.0], [64.0, 511.0], [64.1, 512.0], [64.2, 512.0], [64.3, 512.0], [64.4, 513.0], [64.5, 513.0], [64.6, 513.0], [64.7, 514.0], [64.8, 514.0], [64.9, 514.0], [65.0, 515.0], [65.1, 515.0], [65.2, 515.0], [65.3, 515.0], [65.4, 516.0], [65.5, 516.0], [65.6, 516.0], [65.7, 517.0], [65.8, 517.0], [65.9, 517.0], [66.0, 518.0], [66.1, 518.0], [66.2, 518.0], [66.3, 519.0], [66.4, 519.0], [66.5, 519.0], [66.6, 520.0], [66.7, 520.0], [66.8, 521.0], [66.9, 521.0], [67.0, 522.0], [67.1, 522.0], [67.2, 522.0], [67.3, 522.0], [67.4, 523.0], [67.5, 523.0], [67.6, 524.0], [67.7, 524.0], [67.8, 524.0], [67.9, 525.0], [68.0, 525.0], [68.1, 525.0], [68.2, 526.0], [68.3, 526.0], [68.4, 527.0], [68.5, 527.0], [68.6, 527.0], [68.7, 528.0], [68.8, 528.0], [68.9, 528.0], [69.0, 529.0], [69.1, 529.0], [69.2, 529.0], [69.3, 529.0], [69.4, 530.0], [69.5, 530.0], [69.6, 530.0], [69.7, 531.0], [69.8, 531.0], [69.9, 531.0], [70.0, 532.0], [70.1, 532.0], [70.2, 532.0], [70.3, 533.0], [70.4, 533.0], [70.5, 533.0], [70.6, 534.0], [70.7, 534.0], [70.8, 535.0], [70.9, 535.0], [71.0, 536.0], [71.1, 537.0], [71.2, 538.0], [71.3, 539.0], [71.4, 540.0], [71.5, 541.0], [71.6, 542.0], [71.7, 543.0], [71.8, 544.0], [71.9, 544.0], [72.0, 545.0], [72.1, 545.0], [72.2, 546.0], [72.3, 546.0], [72.4, 547.0], [72.5, 547.0], [72.6, 548.0], [72.7, 548.0], [72.8, 549.0], [72.9, 549.0], [73.0, 549.0], [73.1, 550.0], [73.2, 550.0], [73.3, 551.0], [73.4, 551.0], [73.5, 551.0], [73.6, 552.0], [73.7, 552.0], [73.8, 553.0], [73.9, 553.0], [74.0, 553.0], [74.1, 554.0], [74.2, 554.0], [74.3, 555.0], [74.4, 555.0], [74.5, 556.0], [74.6, 556.0], [74.7, 557.0], [74.8, 557.0], [74.9, 558.0], [75.0, 559.0], [75.1, 560.0], [75.2, 560.0], [75.3, 561.0], [75.4, 562.0], [75.5, 562.0], [75.6, 563.0], [75.7, 563.0], [75.8, 564.0], [75.9, 564.0], [76.0, 565.0], [76.1, 565.0], [76.2, 566.0], [76.3, 566.0], [76.4, 567.0], [76.5, 568.0], [76.6, 568.0], [76.7, 569.0], [76.8, 570.0], [76.9, 570.0], [77.0, 571.0], [77.1, 571.0], [77.2, 571.0], [77.3, 572.0], [77.4, 572.0], [77.5, 573.0], [77.6, 573.0], [77.7, 574.0], [77.8, 575.0], [77.9, 576.0], [78.0, 577.0], [78.1, 578.0], [78.2, 578.0], [78.3, 580.0], [78.4, 581.0], [78.5, 582.0], [78.6, 583.0], [78.7, 583.0], [78.8, 584.0], [78.9, 584.0], [79.0, 585.0], [79.1, 585.0], [79.2, 586.0], [79.3, 586.0], [79.4, 587.0], [79.5, 589.0], [79.6, 590.0], [79.7, 592.0], [79.8, 593.0], [79.9, 597.0], [80.0, 601.0], [80.1, 603.0], [80.2, 606.0], [80.3, 607.0], [80.4, 608.0], [80.5, 609.0], [80.6, 612.0], [80.7, 613.0], [80.8, 614.0], [80.9, 620.0], [81.0, 624.0], [81.1, 629.0], [81.2, 631.0], [81.3, 632.0], [81.4, 633.0], [81.5, 635.0], [81.6, 638.0], [81.7, 640.0], [81.8, 642.0], [81.9, 643.0], [82.0, 645.0], [82.1, 648.0], [82.2, 651.0], [82.3, 653.0], [82.4, 654.0], [82.5, 655.0], [82.6, 656.0], [82.7, 657.0], [82.8, 659.0], [82.9, 662.0], [83.0, 666.0], [83.1, 668.0], [83.2, 671.0], [83.3, 675.0], [83.4, 676.0], [83.5, 681.0], [83.6, 688.0], [83.7, 693.0], [83.8, 694.0], [83.9, 696.0], [84.0, 698.0], [84.1, 705.0], [84.2, 710.0], [84.3, 712.0], [84.4, 717.0], [84.5, 723.0], [84.6, 726.0], [84.7, 732.0], [84.8, 736.0], [84.9, 738.0], [85.0, 740.0], [85.1, 741.0], [85.2, 742.0], [85.3, 743.0], [85.4, 748.0], [85.5, 751.0], [85.6, 752.0], [85.7, 754.0], [85.8, 759.0], [85.9, 768.0], [86.0, 770.0], [86.1, 772.0], [86.2, 774.0], [86.3, 779.0], [86.4, 785.0], [86.5, 794.0], [86.6, 796.0], [86.7, 797.0], [86.8, 807.0], [86.9, 813.0], [87.0, 820.0], [87.1, 822.0], [87.2, 823.0], [87.3, 825.0], [87.4, 826.0], [87.5, 827.0], [87.6, 828.0], [87.7, 829.0], [87.8, 831.0], [87.9, 833.0], [88.0, 834.0], [88.1, 839.0], [88.2, 843.0], [88.3, 846.0], [88.4, 848.0], [88.5, 850.0], [88.6, 852.0], [88.7, 856.0], [88.8, 859.0], [88.9, 861.0], [89.0, 865.0], [89.1, 872.0], [89.2, 879.0], [89.3, 888.0], [89.4, 892.0], [89.5, 893.0], [89.6, 897.0], [89.7, 910.0], [89.8, 913.0], [89.9, 915.0], [90.0, 938.0], [90.1, 950.0], [90.2, 952.0], [90.3, 953.0], [90.4, 955.0], [90.5, 968.0], [90.6, 979.0], [90.7, 986.0], [90.8, 989.0], [90.9, 991.0], [91.0, 995.0], [91.1, 998.0], [91.2, 1002.0], [91.3, 1005.0], [91.4, 1008.0], [91.5, 1012.0], [91.6, 1017.0], [91.7, 1024.0], [91.8, 1032.0], [91.9, 1035.0], [92.0, 1039.0], [92.1, 1047.0], [92.2, 1056.0], [92.3, 1066.0], [92.4, 1079.0], [92.5, 1083.0], [92.6, 1085.0], [92.7, 1112.0], [92.8, 1125.0], [92.9, 1127.0], [93.0, 1133.0], [93.1, 1182.0], [93.2, 1192.0], [93.3, 1194.0], [93.4, 1255.0], [93.5, 1433.0], [93.6, 1571.0], [93.7, 1922.0], [93.8, 2312.0], [93.9, 2991.0], [94.0, 3382.0], [94.1, 3685.0], [94.2, 4132.0], [94.3, 4527.0], [94.4, 5553.0], [94.5, 6455.0], [94.6, 6730.0], [94.7, 7048.0], [94.8, 7240.0], [94.9, 7680.0], [95.0, 8092.0], [95.1, 8345.0], [95.2, 8351.0], [95.3, 9099.0], [95.4, 9297.0], [95.5, 9674.0], [95.6, 10375.0], [95.7, 10417.0], [95.8, 10695.0], [95.9, 11617.0], [96.0, 12775.0], [96.1, 12897.0], [96.2, 13338.0], [96.3, 14507.0], [96.4, 15135.0], [96.5, 15768.0], [96.6, 15853.0], [96.7, 17218.0], [96.8, 17531.0], [96.9, 18759.0], [97.0, 20353.0], [97.1, 21216.0], [97.2, 21518.0], [97.3, 22185.0], [97.4, 22407.0], [97.5, 22618.0], [97.6, 23257.0], [97.7, 23673.0], [97.8, 24004.0], [97.9, 26228.0], [98.0, 26286.0], [98.1, 28182.0], [98.2, 30370.0], [98.3, 33597.0], [98.4, 34657.0], [98.5, 35794.0], [98.6, 38389.0], [98.7, 44614.0], [98.8, 47113.0], [98.9, 52679.0], [99.0, 61590.0], [99.1, 66832.0], [99.2, 72412.0], [99.3, 79670.0], [99.4, 87433.0], [99.5, 100474.0], [99.6, 106662.0], [99.7, 129006.0], [99.8, 133260.0], [99.9, 135923.0], [100.0, 194126.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 57223.0, "series": [{"data": [[0.0, 35029.0], [135200.0, 1.0], [132900.0, 8.0], [66700.0, 1.0], [73100.0, 3.0], [69900.0, 11.0], [76300.0, 4.0], [85900.0, 2.0], [111500.0, 1.0], [130700.0, 2.0], [127500.0, 2.0], [137000.0, 7.0], [143400.0, 1.0], [100.0, 36255.0], [32900.0, 2.0], [34500.0, 28.0], [134700.0, 14.0], [36100.0, 7.0], [141100.0, 1.0], [37700.0, 2.0], [40900.0, 1.0], [42500.0, 4.0], [44100.0, 3.0], [45700.0, 26.0], [200.0, 27234.0], [56900.0, 1.0], [55300.0, 2.0], [58500.0, 1.0], [60100.0, 7.0], [61700.0, 7.0], [63300.0, 8.0], [64900.0, 5.0], [65800.0, 5.0], [69000.0, 1.0], [72200.0, 1.0], [300.0, 31476.0], [75400.0, 1.0], [85000.0, 1.0], [88200.0, 1.0], [97800.0, 2.0], [101000.0, 73.0], [400.0, 57223.0], [107400.0, 2.0], [500.0, 53425.0], [129800.0, 14.0], [132400.0, 1.0], [600.0, 12248.0], [700.0, 8246.0], [800.0, 8590.0], [900.0, 4639.0], [1000.0, 4608.0], [1100.0, 2013.0], [1200.0, 309.0], [1300.0, 106.0], [1400.0, 210.0], [1500.0, 135.0], [1600.0, 54.0], [1700.0, 136.0], [1800.0, 54.0], [1900.0, 84.0], [2000.0, 26.0], [2100.0, 99.0], [2200.0, 111.0], [2300.0, 139.0], [2400.0, 18.0], [2500.0, 20.0], [2600.0, 46.0], [2700.0, 19.0], [2800.0, 66.0], [2900.0, 29.0], [3000.0, 65.0], [194100.0, 2.0], [3100.0, 51.0], [3200.0, 71.0], [3300.0, 180.0], [3400.0, 119.0], [3500.0, 55.0], [3600.0, 57.0], [3700.0, 36.0], [3800.0, 72.0], [3900.0, 73.0], [4000.0, 91.0], [4200.0, 95.0], [68100.0, 3.0], [4400.0, 112.0], [4600.0, 17.0], [71300.0, 3.0], [4800.0, 84.0], [74500.0, 2.0], [77700.0, 1.0], [5000.0, 27.0], [80900.0, 1.0], [5200.0, 22.0], [5600.0, 20.0], [5400.0, 40.0], [87300.0, 2.0], [5800.0, 51.0], [93700.0, 1.0], [6000.0, 14.0], [96900.0, 2.0], [6200.0, 10.0], [100100.0, 3.0], [6600.0, 114.0], [6400.0, 82.0], [6800.0, 66.0], [109700.0, 2.0], [7000.0, 33.0], [7400.0, 63.0], [7200.0, 241.0], [116100.0, 1.0], [7600.0, 66.0], [7800.0, 20.0], [8000.0, 94.0], [128900.0, 5.0], [8400.0, 12.0], [134200.0, 38.0], [8800.0, 12.0], [9200.0, 50.0], [9600.0, 88.0], [10000.0, 17.0], [10400.0, 310.0], [10800.0, 17.0], [11200.0, 39.0], [11600.0, 43.0], [12000.0, 2.0], [12400.0, 111.0], [12800.0, 355.0], [13200.0, 60.0], [13600.0, 15.0], [14000.0, 30.0], [14400.0, 14.0], [14800.0, 5.0], [15200.0, 108.0], [15600.0, 14.0], [16000.0, 5.0], [16800.0, 9.0], [17600.0, 22.0], [19200.0, 7.0], [20000.0, 56.0], [20800.0, 30.0], [22400.0, 132.0], [23200.0, 97.0], [24000.0, 8.0], [24800.0, 5.0], [25600.0, 19.0], [26400.0, 34.0], [28000.0, 2.0], [28800.0, 5.0], [30400.0, 1.0], [31200.0, 4.0], [32000.0, 3.0], [33600.0, 26.0], [36800.0, 1.0], [38400.0, 3.0], [40000.0, 3.0], [43200.0, 2.0], [44800.0, 1.0], [46400.0, 1.0], [48000.0, 5.0], [51200.0, 1.0], [52800.0, 1.0], [54400.0, 8.0], [57600.0, 13.0], [59200.0, 2.0], [60800.0, 1.0], [64000.0, 6.0], [67200.0, 3.0], [70400.0, 1.0], [73600.0, 1.0], [76800.0, 4.0], [80000.0, 1.0], [102400.0, 1.0], [105600.0, 32.0], [115200.0, 1.0], [192000.0, 1.0], [138500.0, 21.0], [183300.0, 5.0], [70300.0, 1.0], [73500.0, 4.0], [76700.0, 10.0], [79900.0, 1.0], [83100.0, 1.0], [95900.0, 4.0], [99100.0, 1.0], [105500.0, 1.0], [108700.0, 1.0], [115100.0, 1.0], [142600.0, 2.0], [33100.0, 45.0], [42700.0, 3.0], [44300.0, 13.0], [45900.0, 1.0], [49100.0, 2.0], [47500.0, 14.0], [57100.0, 3.0], [55500.0, 2.0], [58700.0, 1.0], [60300.0, 10.0], [61900.0, 17.0], [63500.0, 2.0], [65100.0, 1.0], [69400.0, 7.0], [75800.0, 4.0], [82200.0, 1.0], [88600.0, 4.0], [91800.0, 3.0], [95000.0, 2.0], [98200.0, 1.0], [101400.0, 1.0], [123800.0, 1.0], [130200.0, 5.0], [131600.0, 11.0], [135700.0, 36.0], [142100.0, 1.0], [148500.0, 8.0], [71700.0, 1.0], [74900.0, 1.0], [81300.0, 1.0], [87700.0, 3.0], [90900.0, 1.0], [94100.0, 1.0], [97300.0, 6.0], [100500.0, 66.0], [103700.0, 2.0], [129300.0, 28.0], [191000.0, 7.0], [16900.0, 72.0], [17700.0, 31.0], [19300.0, 25.0], [20100.0, 41.0], [20900.0, 15.0], [21700.0, 15.0], [22500.0, 177.0], [23300.0, 162.0], [24100.0, 5.0], [24900.0, 1.0], [25700.0, 5.0], [26500.0, 22.0], [27300.0, 1.0], [28100.0, 68.0], [28900.0, 3.0], [30500.0, 1.0], [31300.0, 39.0], [32100.0, 33.0], [33800.0, 15.0], [137500.0, 22.0], [37000.0, 55.0], [38600.0, 8.0], [40200.0, 2.0], [163100.0, 1.0], [41800.0, 1.0], [45000.0, 28.0], [43400.0, 2.0], [46600.0, 1.0], [48200.0, 60.0], [53000.0, 4.0], [51400.0, 2.0], [56200.0, 1.0], [57800.0, 1.0], [59400.0, 1.0], [64200.0, 7.0], [74000.0, 20.0], [77200.0, 1.0], [83600.0, 3.0], [86800.0, 2.0], [109200.0, 4.0], [112400.0, 2.0], [136800.0, 1.0], [149600.0, 1.0], [67500.0, 2.0], [70700.0, 2.0], [73900.0, 3.0], [77100.0, 3.0], [80300.0, 2.0], [89900.0, 2.0], [93100.0, 3.0], [96300.0, 8.0], [105900.0, 1.0], [128300.0, 16.0], [132200.0, 1.0], [33300.0, 3.0], [36500.0, 10.0], [38100.0, 8.0], [149100.0, 2.0], [39700.0, 1.0], [42900.0, 2.0], [44500.0, 40.0], [50900.0, 2.0], [52500.0, 1.0], [57300.0, 1.0], [58900.0, 3.0], [60500.0, 11.0], [62100.0, 4.0], [65300.0, 19.0], [63700.0, 4.0], [66600.0, 1.0], [73000.0, 3.0], [69800.0, 7.0], [79400.0, 1.0], [82600.0, 69.0], [98600.0, 2.0], [101800.0, 3.0], [105000.0, 4.0], [108200.0, 1.0], [130600.0, 2.0], [134000.0, 2.0], [140400.0, 1.0], [131700.0, 1.0], [138100.0, 1.0], [144500.0, 2.0], [68900.0, 1.0], [65700.0, 9.0], [75300.0, 1.0], [81700.0, 1.0], [84900.0, 3.0], [88100.0, 1.0], [100900.0, 12.0], [116900.0, 1.0], [8500.0, 16.0], [135800.0, 5.0], [8900.0, 14.0], [9300.0, 98.0], [9700.0, 12.0], [148600.0, 24.0], [10100.0, 91.0], [161400.0, 2.0], [10500.0, 108.0], [10900.0, 16.0], [11700.0, 8.0], [11300.0, 4.0], [12100.0, 10.0], [12500.0, 13.0], [13300.0, 107.0], [12900.0, 30.0], [13700.0, 19.0], [14100.0, 45.0], [14500.0, 185.0], [15300.0, 73.0], [14900.0, 4.0], [15700.0, 163.0], [16100.0, 6.0], [17000.0, 7.0], [17800.0, 6.0], [18600.0, 52.0], [19400.0, 20.0], [20200.0, 8.0], [21000.0, 23.0], [21800.0, 12.0], [22600.0, 183.0], [23400.0, 5.0], [24200.0, 6.0], [25000.0, 18.0], [25800.0, 46.0], [26600.0, 73.0], [28200.0, 31.0], [29000.0, 5.0], [29800.0, 2.0], [30600.0, 6.0], [32200.0, 8.0], [34000.0, 6.0], [35600.0, 3.0], [38800.0, 1.0], [40400.0, 11.0], [43600.0, 2.0], [45200.0, 3.0], [48400.0, 4.0], [50000.0, 2.0], [53200.0, 2.0], [51600.0, 1.0], [54800.0, 2.0], [56400.0, 3.0], [58000.0, 2.0], [59600.0, 2.0], [61200.0, 1.0], [62800.0, 1.0], [64400.0, 8.0], [68000.0, 4.0], [71200.0, 4.0], [77600.0, 3.0], [80800.0, 1.0], [84000.0, 1.0], [87200.0, 2.0], [90400.0, 1.0], [93600.0, 4.0], [100000.0, 23.0], [106400.0, 1.0], [116000.0, 28.0], [128800.0, 25.0], [67900.0, 2.0], [71100.0, 4.0], [77500.0, 2.0], [74300.0, 1.0], [80700.0, 2.0], [83900.0, 3.0], [87100.0, 2.0], [96700.0, 2.0], [99900.0, 1.0], [128700.0, 28.0], [33500.0, 8.0], [135500.0, 1.0], [35100.0, 7.0], [36700.0, 2.0], [38300.0, 40.0], [41500.0, 1.0], [43100.0, 1.0], [46300.0, 1.0], [47900.0, 40.0], [51100.0, 1.0], [52700.0, 2.0], [54300.0, 1.0], [57500.0, 1.0], [60700.0, 2.0], [62300.0, 1.0], [63900.0, 4.0], [65500.0, 2.0], [67000.0, 6.0], [73400.0, 14.0], [70200.0, 5.0], [76600.0, 22.0], [79800.0, 2.0], [86200.0, 3.0], [89400.0, 2.0], [99000.0, 4.0], [108600.0, 4.0], [121400.0, 11.0], [127800.0, 3.0], [131000.0, 66.0], [133200.0, 39.0], [156500.0, 9.0], [69300.0, 10.0], [66100.0, 4.0], [72500.0, 3.0], [78900.0, 3.0], [85300.0, 3.0], [82100.0, 5.0], [88500.0, 2.0], [98100.0, 1.0], [110900.0, 1.0], [123700.0, 15.0], [17100.0, 3.0], [17900.0, 20.0], [18700.0, 227.0], [19500.0, 6.0], [20300.0, 26.0], [21100.0, 96.0], [21900.0, 20.0], [22700.0, 2.0], [23500.0, 33.0], [24300.0, 3.0], [25100.0, 5.0], [25900.0, 5.0], [27500.0, 22.0], [29100.0, 12.0], [29900.0, 87.0], [31500.0, 3.0], [32300.0, 5.0], [34200.0, 2.0], [132700.0, 4.0], [139100.0, 6.0], [35800.0, 18.0], [40600.0, 1.0], [171100.0, 3.0], [43800.0, 4.0], [45400.0, 90.0], [47000.0, 7.0], [48600.0, 1.0], [56600.0, 1.0], [59800.0, 3.0], [61400.0, 3.0], [64600.0, 1.0], [68400.0, 29.0], [71600.0, 1.0], [74800.0, 21.0], [81200.0, 1.0], [78000.0, 2.0], [84400.0, 3.0], [90800.0, 2.0], [97200.0, 17.0], [100400.0, 85.0], [103600.0, 1.0], [138400.0, 15.0], [132000.0, 1.0], [144800.0, 2.0], [68300.0, 20.0], [74700.0, 6.0], [93900.0, 2.0], [97100.0, 2.0], [100300.0, 8.0], [103500.0, 1.0], [109900.0, 2.0], [129100.0, 3.0], [33700.0, 29.0], [36900.0, 6.0], [38500.0, 2.0], [40100.0, 3.0], [41700.0, 3.0], [43300.0, 3.0], [44900.0, 8.0], [46500.0, 5.0], [48100.0, 4.0], [51300.0, 2.0], [54500.0, 2.0], [57700.0, 37.0], [59300.0, 1.0], [62500.0, 1.0], [64100.0, 14.0], [70600.0, 3.0], [73800.0, 9.0], [77000.0, 2.0], [83400.0, 2.0], [93000.0, 2.0], [128200.0, 3.0], [142000.0, 9.0], [148400.0, 1.0], [133300.0, 50.0], [178100.0, 11.0], [4300.0, 61.0], [4100.0, 53.0], [66500.0, 2.0], [4500.0, 17.0], [69700.0, 11.0], [72900.0, 8.0], [76100.0, 3.0], [4700.0, 30.0], [5100.0, 42.0], [4900.0, 13.0], [79300.0, 2.0], [5300.0, 5.0], [82500.0, 6.0], [88900.0, 1.0], [5500.0, 17.0], [5700.0, 47.0], [5900.0, 35.0], [6100.0, 69.0], [6300.0, 29.0], [98500.0, 2.0], [6500.0, 77.0], [6700.0, 186.0], [6900.0, 73.0], [7100.0, 107.0], [111300.0, 1.0], [7300.0, 62.0], [7500.0, 77.0], [120900.0, 1.0], [7700.0, 97.0], [7900.0, 71.0], [8100.0, 69.0], [130500.0, 8.0], [127300.0, 1.0], [8200.0, 120.0], [8600.0, 96.0], [137400.0, 3.0], [9000.0, 84.0], [143800.0, 1.0], [9400.0, 90.0], [9800.0, 36.0], [10200.0, 19.0], [10600.0, 51.0], [11000.0, 8.0], [11400.0, 28.0], [11800.0, 41.0], [12200.0, 6.0], [12600.0, 16.0], [13800.0, 5.0], [13400.0, 41.0], [14200.0, 9.0], [14600.0, 3.0], [15000.0, 61.0], [15400.0, 19.0], [15800.0, 183.0], [16200.0, 69.0], [17200.0, 74.0], [16400.0, 22.0], [18000.0, 4.0], [18800.0, 2.0], [20400.0, 10.0], [21200.0, 242.0], [22000.0, 10.0], [22800.0, 7.0], [23600.0, 47.0], [24400.0, 18.0], [25200.0, 1.0], [26000.0, 1.0], [26800.0, 2.0], [30000.0, 2.0], [30800.0, 30.0], [31600.0, 17.0], [34400.0, 32.0], [32800.0, 3.0], [36000.0, 6.0], [37600.0, 6.0], [40800.0, 13.0], [39200.0, 2.0], [44000.0, 2.0], [45600.0, 1.0], [47200.0, 1.0], [50400.0, 14.0], [52000.0, 2.0], [55200.0, 5.0], [58400.0, 1.0], [60000.0, 2.0], [63200.0, 10.0], [61600.0, 2.0], [64800.0, 27.0], [65600.0, 4.0], [68800.0, 3.0], [72000.0, 4.0], [75200.0, 2.0], [81600.0, 1.0], [84800.0, 1.0], [100800.0, 15.0], [129600.0, 2.0], [131200.0, 1.0], [173700.0, 7.0], [68700.0, 5.0], [71900.0, 4.0], [75100.0, 4.0], [78300.0, 17.0], [84700.0, 1.0], [87900.0, 19.0], [103900.0, 1.0], [107100.0, 1.0], [133000.0, 6.0], [145800.0, 1.0], [139400.0, 3.0], [158600.0, 1.0], [33900.0, 3.0], [137100.0, 5.0], [143500.0, 2.0], [38700.0, 5.0], [37100.0, 86.0], [40300.0, 3.0], [41900.0, 6.0], [45100.0, 1.0], [46700.0, 1.0], [48300.0, 5.0], [56300.0, 2.0], [57900.0, 5.0], [61100.0, 27.0], [64300.0, 21.0], [67800.0, 2.0], [71000.0, 3.0], [74200.0, 15.0], [77400.0, 2.0], [83800.0, 41.0], [90200.0, 1.0], [93400.0, 1.0], [96600.0, 1.0], [106200.0, 2.0], [103000.0, 2.0], [109400.0, 1.0], [122200.0, 1.0], [128600.0, 10.0], [134800.0, 2.0], [141200.0, 4.0], [132500.0, 9.0], [66900.0, 1.0], [70100.0, 2.0], [76500.0, 13.0], [79700.0, 2.0], [86100.0, 2.0], [92500.0, 2.0], [102100.0, 1.0], [121300.0, 2.0], [124500.0, 1.0], [130900.0, 11.0], [149400.0, 1.0], [16500.0, 3.0], [17300.0, 101.0], [18100.0, 1.0], [18900.0, 3.0], [19700.0, 5.0], [21300.0, 113.0], [20500.0, 1.0], [22100.0, 359.0], [22900.0, 5.0], [23700.0, 7.0], [24500.0, 7.0], [25300.0, 11.0], [26100.0, 72.0], [26900.0, 26.0], [27700.0, 6.0], [28500.0, 2.0], [29300.0, 2.0], [30900.0, 10.0], [34600.0, 408.0], [33000.0, 12.0], [134300.0, 40.0], [36200.0, 3.0], [42600.0, 7.0], [44200.0, 6.0], [49000.0, 3.0], [47400.0, 1.0], [53800.0, 1.0], [55400.0, 1.0], [58600.0, 4.0], [60200.0, 30.0], [63400.0, 18.0], [61800.0, 1.0], [65000.0, 3.0], [69200.0, 2.0], [66000.0, 6.0], [72400.0, 19.0], [85200.0, 41.0], [88400.0, 1.0], [98000.0, 1.0], [101200.0, 1.0], [104400.0, 2.0], [107600.0, 2.0], [114000.0, 9.0], [137700.0, 2.0], [69100.0, 2.0], [65900.0, 1.0], [72300.0, 9.0], [81900.0, 1.0], [78700.0, 3.0], [85100.0, 7.0], [88300.0, 2.0], [94700.0, 1.0], [107500.0, 10.0], [113900.0, 5.0], [129900.0, 11.0], [173800.0, 17.0], [34100.0, 1.0], [133100.0, 11.0], [35700.0, 12.0], [37300.0, 1.0], [40500.0, 9.0], [42100.0, 1.0], [43700.0, 8.0], [45300.0, 20.0], [46900.0, 6.0], [48500.0, 23.0], [50100.0, 3.0], [51700.0, 4.0], [53300.0, 2.0], [56500.0, 2.0], [58100.0, 3.0], [59700.0, 5.0], [61300.0, 1.0], [62900.0, 1.0], [64500.0, 12.0], [71400.0, 1.0], [77800.0, 3.0], [74600.0, 8.0], [81000.0, 2.0], [84200.0, 2.0], [87400.0, 14.0], [97000.0, 2.0], [100200.0, 56.0], [103400.0, 7.0], [106600.0, 36.0], [129000.0, 23.0], [134900.0, 69.0], [67300.0, 32.0], [70500.0, 11.0], [76900.0, 2.0], [80100.0, 4.0], [92900.0, 3.0], [99300.0, 2.0], [108900.0, 6.0], [115300.0, 1.0], [8300.0, 485.0], [8700.0, 29.0], [132600.0, 3.0], [9100.0, 213.0], [9500.0, 38.0], [9900.0, 28.0], [10700.0, 108.0], [10300.0, 226.0], [11100.0, 18.0], [11500.0, 17.0], [11900.0, 28.0], [12700.0, 68.0], [12300.0, 21.0], [13100.0, 63.0], [13500.0, 2.0], [13900.0, 4.0], [14300.0, 64.0], [15100.0, 80.0], [15500.0, 36.0], [16300.0, 50.0], [15900.0, 2.0], [17400.0, 136.0], [19000.0, 7.0], [20600.0, 2.0], [21400.0, 30.0], [22200.0, 27.0], [23000.0, 53.0], [23800.0, 15.0], [25400.0, 4.0], [24600.0, 19.0], [26200.0, 350.0], [27000.0, 4.0], [27800.0, 23.0], [29400.0, 3.0], [30200.0, 51.0], [31000.0, 4.0], [31800.0, 18.0], [32600.0, 4.0], [34800.0, 3.0], [33200.0, 2.0], [38000.0, 1.0], [39600.0, 1.0], [42800.0, 20.0], [41200.0, 5.0], [44400.0, 2.0], [50800.0, 1.0], [52400.0, 2.0], [57200.0, 2.0], [60400.0, 7.0], [62000.0, 10.0], [63600.0, 2.0], [65200.0, 1.0], [66400.0, 3.0], [69600.0, 4.0], [72800.0, 10.0], [76000.0, 4.0], [88800.0, 12.0], [92000.0, 2.0], [98400.0, 2.0], [101600.0, 2.0], [108000.0, 1.0], [117600.0, 8.0], [124000.0, 6.0], [132800.0, 45.0], [145600.0, 2.0], [171200.0, 17.0], [136900.0, 16.0], [175300.0, 1.0], [69500.0, 49.0], [75900.0, 1.0], [82300.0, 1.0], [95100.0, 2.0], [101500.0, 1.0], [104700.0, 1.0], [107900.0, 12.0], [117500.0, 2.0], [123900.0, 14.0], [130300.0, 2.0], [34300.0, 1.0], [138700.0, 10.0], [35900.0, 6.0], [37500.0, 1.0], [40700.0, 17.0], [39100.0, 3.0], [43900.0, 13.0], [47100.0, 82.0], [48700.0, 1.0], [50300.0, 2.0], [55100.0, 2.0], [56700.0, 1.0], [58300.0, 1.0], [61500.0, 59.0], [64700.0, 16.0], [68600.0, 6.0], [71800.0, 2.0], [75000.0, 6.0], [81400.0, 1.0], [78200.0, 5.0], [87800.0, 2.0], [91000.0, 1.0], [100600.0, 18.0], [107000.0, 1.0], [194000.0, 1.0], [146900.0, 2.0], [67700.0, 8.0], [70900.0, 2.0], [74100.0, 22.0], [83700.0, 27.0], [86900.0, 26.0], [96500.0, 1.0], [102900.0, 2.0], [131800.0, 2.0], [138200.0, 8.0], [151000.0, 10.0], [16700.0, 10.0], [17500.0, 25.0], [18300.0, 4.0], [19100.0, 30.0], [19900.0, 6.0], [21500.0, 36.0], [20700.0, 1.0], [22300.0, 50.0], [23100.0, 94.0], [23900.0, 276.0], [25500.0, 20.0], [24700.0, 1.0], [26300.0, 9.0], [27100.0, 19.0], [27900.0, 19.0], [28700.0, 1.0], [30300.0, 63.0], [31900.0, 13.0], [32700.0, 3.0], [33400.0, 1.0], [135900.0, 49.0], [35000.0, 27.0], [142300.0, 1.0], [38200.0, 41.0], [39800.0, 2.0], [43000.0, 1.0], [44600.0, 146.0], [47800.0, 14.0], [51000.0, 7.0], [52600.0, 4.0], [55800.0, 2.0], [59000.0, 2.0], [60600.0, 2.0], [62200.0, 5.0], [65400.0, 12.0], [63800.0, 1.0], [66800.0, 2.0], [70000.0, 1.0], [79600.0, 7.0], [86000.0, 2.0], [82800.0, 3.0], [89200.0, 3.0], [95600.0, 1.0], [108400.0, 3.0], [127600.0, 2.0], [130800.0, 3.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 194100.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 1157.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 187670.0, "series": [{"data": [[0.0, 187670.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 93945.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 18228.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 1157.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 16.400000000000002, "minX": 1.68287928E12, "maxY": 3000.0, "series": [{"data": [[1.68287934E12, 3000.0], [1.68287964E12, 385.54583921015507], [1.68287946E12, 3000.0], [1.68287928E12, 3000.0], [1.68287958E12, 2954.269900580505], [1.6828794E12, 3000.0], [1.6828797E12, 16.400000000000002], [1.68287952E12, 3000.0]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6828797E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 632.6250000000001, "minX": 1.0, "maxY": 191051.66666666666, "series": [{"data": [[2.0, 132096.0], [7.0, 121405.6], [11.0, 121401.75], [12.0, 121401.0], [14.0, 121398.0], [15.0, 121400.0], [18.0, 131055.0], [21.0, 191051.66666666666], [22.0, 191050.0], [25.0, 191050.0], [26.0, 163183.0], [27.0, 106440.0], [28.0, 93050.0], [29.0, 93105.0], [30.0, 83192.0], [33.0, 79703.66666666667], [35.0, 93119.0], [34.0, 94145.0], [37.0, 77607.0], [36.0, 92097.0], [38.0, 93777.0], [40.0, 88877.5], [43.0, 88877.0], [42.0, 93361.0], [45.0, 88874.5], [47.0, 88873.0], [46.0, 88874.0], [49.0, 88871.0], [48.0, 88871.0], [51.0, 88616.0], [50.0, 88869.0], [53.0, 88608.0], [52.0, 88612.0], [55.0, 112459.0], [54.0, 88604.0], [57.0, 112451.0], [56.0, 88594.0], [59.0, 87932.0], [58.0, 88586.0], [60.0, 87931.0], [63.0, 87933.0], [67.0, 87930.0], [66.0, 87932.0], [65.0, 87931.0], [64.0, 87932.5], [71.0, 87925.0], [70.0, 87930.0], [68.0, 87930.0], [74.0, 80166.5], [72.0, 87927.0], [78.0, 73142.0], [77.0, 72412.0], [76.0, 87921.0], [82.0, 116950.0], [80.0, 73816.5], [87.0, 73454.0], [86.0, 72408.0], [85.0, 72409.0], [84.0, 72412.5], [91.0, 73862.0], [90.0, 87911.0], [89.0, 72404.5], [95.0, 72398.0], [94.0, 73857.0], [93.0, 72399.0], [92.0, 73502.0], [99.0, 73853.0], [98.0, 72394.0], [97.0, 87902.0], [96.0, 73855.0], [103.0, 80142.5], [101.0, 75197.0], [100.0, 108047.0], [107.0, 72374.0], [106.0, 161448.0], [105.0, 78742.0], [104.0, 72389.0], [110.0, 71854.0], [109.0, 72363.0], [108.0, 72368.0], [115.0, 97506.75], [112.0, 133266.0], [118.0, 104993.5], [116.0, 72922.0], [123.0, 103092.5], [122.0, 133264.0], [120.0, 103766.0], [127.0, 76718.0], [126.0, 133263.0], [125.0, 72714.0], [134.0, 104985.5], [132.0, 133258.0], [131.0, 72914.0], [130.0, 133260.0], [129.0, 133260.0], [143.0, 133253.0], [142.0, 74259.0], [141.0, 76710.0], [140.0, 77806.0], [139.0, 133257.0], [138.0, 103758.0], [136.0, 74813.0], [151.0, 102869.0], [149.0, 133248.0], [148.0, 76704.0], [147.0, 133251.0], [146.0, 133252.0], [145.0, 133252.0], [144.0, 74254.0], [159.0, 103745.0], [158.0, 76699.0], [157.0, 107092.0], [155.0, 133245.0], [154.0, 104972.5], [152.0, 133246.0], [166.0, 104962.0], [164.0, 72483.0], [162.0, 103068.0], [161.0, 72896.0], [175.0, 76676.0], [174.0, 104951.5], [173.0, 74226.0], [171.0, 102847.5], [169.0, 72886.0], [168.0, 102880.5], [183.0, 74206.0], [182.0, 104932.5], [180.0, 73099.33333333333], [177.0, 76668.0], [176.0, 76672.0], [191.0, 133185.0], [190.0, 133188.0], [189.0, 133189.0], [188.0, 102814.5], [186.0, 133197.0], [185.0, 72494.0], [184.0, 74203.0], [198.0, 68471.0], [197.0, 74169.0], [196.0, 74170.0], [195.0, 73292.5], [194.0, 133169.0], [192.0, 72835.0], [207.0, 69517.0], [204.0, 69753.0], [202.0, 81255.0], [200.0, 70423.0], [214.0, 69016.0], [212.0, 69017.0], [210.0, 70279.5], [208.0, 71319.33333333333], [222.0, 70201.0], [221.0, 77087.5], [219.0, 68465.0], [218.0, 69565.0], [217.0, 69767.33333333333], [231.0, 69718.5], [230.0, 69561.0], [228.0, 70415.0], [226.0, 68987.0], [224.0, 68986.0], [238.0, 76212.0], [237.0, 68459.0], [235.0, 69743.0], [233.0, 69508.0], [232.0, 69508.0], [246.0, 69738.0], [244.0, 69556.0], [243.0, 69007.0], [242.0, 69557.0], [240.0, 68457.0], [255.0, 69539.0], [254.0, 105048.0], [253.0, 68997.0], [251.0, 69550.0], [250.0, 69734.5], [248.0, 69190.0], [269.0, 68421.0], [271.0, 69702.5], [268.0, 68972.0], [266.0, 68422.0], [265.0, 68972.0], [263.0, 77443.33333333333], [260.0, 68430.0], [259.0, 69653.33333333333], [256.0, 69907.0], [284.0, 68954.5], [286.0, 69500.0], [287.0, 69870.0], [285.0, 71212.0], [283.0, 76709.5], [280.0, 69506.5], [278.0, 68935.0], [277.0, 69879.0], [275.0, 68412.0], [274.0, 69518.0], [273.0, 69519.0], [302.0, 68374.0], [303.0, 69844.0], [301.0, 70113.0], [291.0, 68397.0], [290.0, 68398.66666666667], [299.0, 68378.0], [298.0, 68380.0], [297.0, 68937.0], [296.0, 68388.0], [294.0, 69492.0], [293.0, 69494.0], [292.0, 68395.0], [306.0, 70087.0], [319.0, 67360.0], [318.0, 67727.0], [315.0, 68829.5], [314.0, 82869.0], [312.0, 69079.5], [310.0, 68346.0], [309.0, 76103.0], [308.0, 68350.0], [305.0, 69460.0], [304.0, 68924.5], [333.0, 68442.0], [335.0, 65329.5], [332.0, 67343.0], [322.0, 85660.0], [321.0, 68458.0], [331.0, 67346.0], [330.0, 67347.0], [329.0, 67348.0], [328.0, 68952.5], [326.0, 67900.5], [324.0, 68431.0], [350.0, 64345.0], [351.0, 64345.0], [349.0, 64346.333333333336], [347.0, 64346.0], [346.0, 64346.5], [344.0, 64347.0], [342.0, 65077.0], [340.0, 65322.0], [339.0, 65324.0], [338.0, 65325.0], [337.0, 65325.0], [336.0, 65328.0], [354.0, 64340.0], [367.0, 78021.66666666667], [364.0, 64327.0], [363.0, 64328.0], [361.0, 64337.0], [360.0, 103703.0], [359.0, 64338.0], [358.0, 65207.5], [356.0, 65208.0], [353.0, 66079.0], [352.0, 103708.0], [371.0, 109228.0], [382.0, 86979.0], [381.0, 93677.0], [379.0, 98547.0], [378.0, 110518.5], [376.0, 103447.0], [375.0, 103447.0], [372.0, 109227.0], [370.0, 109231.0], [369.0, 109232.0], [368.0, 64319.0], [387.0, 149664.0], [399.0, 67715.0], [397.0, 67718.5], [386.0, 103051.0], [385.0, 98214.0], [384.0, 100638.0], [395.0, 67718.5], [393.0, 67720.0], [392.0, 54445.0], [391.0, 143472.0], [390.0, 104455.0], [389.0, 149155.0], [388.0, 149156.0], [413.0, 86978.0], [414.0, 86971.0], [412.0, 86980.0], [402.0, 139489.0], [400.0, 67711.0], [411.0, 86981.0], [410.0, 86986.0], [409.0, 86989.0], [408.0, 86990.0], [407.0, 86992.0], [406.0, 86993.5], [404.0, 86994.5], [419.0, 86908.5], [430.0, 138509.0], [428.0, 138510.0], [427.0, 86895.0], [426.0, 86897.0], [425.0, 86903.0], [422.0, 86908.66666666667], [420.0, 86910.0], [417.0, 86909.0], [416.0, 86912.0], [446.0, 138504.0], [447.0, 138503.0], [445.0, 138505.0], [444.0, 138506.0], [443.0, 138506.0], [442.0, 138506.0], [441.0, 138506.0], [439.0, 138507.0], [435.0, 138508.0], [434.0, 138508.0], [438.0, 138507.0], [437.0, 138508.0], [451.0, 138495.0], [461.0, 138483.0], [462.0, 138463.0], [460.0, 138484.5], [450.0, 138496.0], [449.0, 138498.0], [448.0, 138501.0], [458.0, 138485.0], [456.0, 138488.0], [455.0, 138490.0], [454.0, 138491.0], [453.0, 138492.0], [452.0, 138495.0], [476.0, 134327.0], [478.0, 134325.0], [479.0, 134324.0], [477.0, 134327.0], [474.0, 134328.0], [472.0, 134327.0], [471.0, 134328.0], [466.0, 134326.0], [464.0, 136826.0], [469.0, 134328.0], [468.0, 134328.0], [482.0, 134323.0], [493.0, 134317.0], [492.0, 134318.0], [490.0, 134320.0], [489.0, 134320.0], [488.0, 100166.5], [486.0, 134321.0], [485.0, 134323.0], [484.0, 134323.5], [481.0, 134324.0], [480.0, 134326.0], [509.0, 134298.0], [508.0, 134297.0], [499.0, 134313.0], [498.0, 134315.0], [497.0, 134317.0], [496.0, 134316.0], [507.0, 134299.0], [506.0, 134301.0], [505.0, 134301.0], [504.0, 79389.0], [503.0, 134303.0], [502.0, 134304.0], [501.0, 134309.0], [500.0, 134311.0], [542.0, 50167.0], [543.0, 134252.0], [529.0, 134285.0], [528.0, 134283.66666666666], [531.0, 75420.0], [530.0, 134280.0], [541.0, 48428.0], [540.0, 134257.0], [539.0, 134262.0], [538.0, 134262.5], [536.0, 134263.0], [519.0, 134288.0], [518.0, 134290.0], [517.0, 117885.33333333333], [514.0, 134296.2], [525.0, 134285.0], [524.0, 135369.33333333334], [522.0, 48460.0], [520.0, 134288.0], [535.0, 68436.5], [533.0, 134277.0], [571.0, 47568.0], [573.0, 56511.333333333336], [570.0, 53078.0], [569.0, 55592.0], [568.0, 47516.0], [551.0, 72892.0], [550.0, 87787.0], [549.0, 134248.0], [548.0, 103576.5], [546.0, 134252.0], [545.0, 134253.0], [567.0, 55303.0], [563.0, 48447.5], [561.0, 134223.5], [559.0, 72616.5], [558.0, 72874.0], [556.0, 75369.0], [555.0, 87778.0], [554.0, 63922.0], [553.0, 134245.0], [552.0, 134243.0], [603.0, 61965.0], [607.0, 78545.25], [602.0, 63562.75], [600.0, 48057.5], [597.0, 55442.0], [596.0, 61967.0], [593.0, 53832.333333333336], [590.0, 62574.5], [577.0, 47565.0], [581.0, 54768.0], [578.0, 56335.666666666664], [583.0, 61970.5], [582.0, 47512.0], [588.0, 47562.0], [587.0, 82115.0], [586.0, 55299.0], [584.0, 47537.5], [634.0, 82146.0], [638.0, 68314.0], [639.0, 76623.0], [625.0, 61919.0], [624.0, 73992.0], [628.0, 56779.0], [626.0, 47500.0], [637.0, 68371.0], [636.0, 69982.0], [635.0, 71327.0], [633.0, 63333.5], [615.0, 47553.0], [614.0, 58204.0], [612.0, 65622.0], [611.0, 61961.0], [610.0, 51714.0], [609.0, 54760.5], [623.0, 98464.0], [622.0, 78186.5], [620.0, 55254.0], [619.0, 47877.0], [618.0, 47547.0], [617.0, 84004.0], [616.0, 61958.0], [631.0, 72013.0], [630.0, 66959.5], [669.0, 106662.5], [671.0, 106661.0], [656.0, 106665.0], [668.0, 106662.0], [667.0, 106663.0], [666.0, 106664.0], [665.0, 106664.0], [664.0, 106663.5], [647.0, 106667.0], [641.0, 84795.0], [640.0, 66592.0], [654.0, 106665.5], [653.0, 105856.0], [652.0, 106666.0], [650.0, 106666.0], [649.0, 106665.66666666667], [648.0, 106667.0], [661.0, 106663.75], [657.0, 106664.5], [697.0, 70299.0], [702.0, 73715.5], [703.0, 64902.0], [689.0, 86169.0], [688.0, 86171.0], [691.0, 100864.0], [690.0, 72316.0], [693.0, 100100.0], [692.0, 101642.0], [700.0, 66525.0], [699.0, 69288.0], [698.0, 70297.0], [696.0, 108602.0], [679.0, 106660.6], [676.0, 100433.0], [675.0, 106661.0], [672.0, 106662.0], [687.0, 87182.0], [686.0, 87163.0], [685.0, 88191.0], [684.0, 81767.0], [683.0, 89200.0], [682.0, 76356.0], [681.0, 105912.0], [680.0, 74604.0], [695.0, 67589.0], [694.0, 77726.0], [728.0, 100691.25], [732.0, 59854.0], [735.0, 90871.0], [720.0, 100480.0], [734.0, 90875.0], [733.0, 68641.0], [731.0, 101836.0], [730.0, 101834.0], [729.0, 101837.0], [719.0, 100512.0], [705.0, 64451.0], [704.0, 73689.0], [707.0, 63441.0], [706.0, 64449.0], [709.0, 61479.0], [708.0, 63439.0], [711.0, 60472.0], [710.0, 69333.0], [717.0, 100538.0], [715.0, 100545.0], [712.0, 69652.0], [724.0, 100462.0], [723.0, 100480.0], [761.0, 100884.0], [765.0, 108667.0], [767.0, 108122.5], [753.0, 63800.0], [752.0, 66101.0], [755.0, 100445.0], [754.0, 71066.0], [764.0, 100679.0], [763.0, 108728.0], [762.0, 100687.0], [760.0, 100542.0], [743.0, 69855.0], [742.0, 77125.0], [741.0, 63276.0], [740.0, 59310.0], [739.0, 65611.0], [738.0, 64288.0], [737.0, 73046.0], [736.0, 66623.0], [751.0, 64970.0], [750.0, 60004.0], [749.0, 60006.0], [748.0, 82691.0], [747.0, 81070.0], [746.0, 61575.0], [745.0, 58687.0], [744.0, 58691.0], [758.0, 100545.0], [757.0, 100546.5], [796.0, 59039.0], [799.0, 65360.0], [785.0, 79768.0], [784.0, 100597.0], [787.0, 77645.0], [786.0, 72426.0], [789.0, 60771.0], [788.0, 61779.0], [798.0, 58024.0], [797.0, 58026.0], [795.0, 59035.0], [794.0, 59206.0], [793.0, 59210.0], [792.0, 67028.0], [783.0, 107571.0], [771.0, 104381.0], [773.0, 100632.0], [772.0, 100635.0], [782.0, 101777.5], [781.0, 100620.0], [778.0, 107576.0], [791.0, 67030.0], [790.0, 60770.0], [804.0, 63760.0], [803.0, 63759.0], [802.0, 70578.0], [801.0, 64351.0], [800.0, 65358.0], [1502.0, 62511.0], [1596.0, 754.4583333333331], [1598.0, 694.0], [1568.0, 695.0], [1570.0, 696.0], [1572.0, 696.2], [1574.0, 695.0], [1576.0, 695.3333333333334], [1578.0, 694.6363636363636], [1580.0, 695.0], [1582.0, 695.1578947368422], [1594.0, 693.6666666666666], [1592.0, 693.0], [1564.0, 695.8214285714286], [1566.0, 710.0657894736843], [1584.0, 695.1499999999999], [1586.0, 807.0], [1588.0, 738.8292682926829], [1590.0, 761.6250000000001], [1560.0, 696.6999999999999], [1558.0, 1063.25], [1556.0, 697.5], [1554.0, 698.25], [1552.0, 1187.3333333333333], [1660.0, 675.5], [1636.0, 675.0], [1634.0, 678.0], [1638.0, 676.0], [1656.0, 676.0], [1610.0, 692.0], [1608.0, 693.6], [1606.0, 693.5833333333333], [1604.0, 693.684210526316], [1602.0, 693.75], [1600.0, 693.1999999999998], [1630.0, 969.8], [1628.0, 1780.0], [1644.0, 676.0], [1722.0, 637.0], [1704.0, 654.5], [1724.0, 633.0], [1698.0, 655.0], [1700.0, 654.3333333333334], [1716.0, 653.5], [1674.0, 672.0], [1670.0, 674.0], [1668.0, 673.6666666666666], [1666.0, 673.6666666666666], [1694.0, 655.0], [1690.0, 655.0], [1710.0, 653.3333333333334], [1708.0, 653.5], [1732.0, 632.6250000000001], [2116.0, 1044.0], [2172.0, 1045.0], [2104.0, 1912.0], [2120.0, 1330.3333333333333], [2240.0, 1044.0], [2300.0, 6832.166666666666], [2244.0, 1043.0], [2252.0, 1034.0], [2256.0, 2832.2999999999997], [2264.0, 1035.2], [2268.0, 1035.3333333333333], [2296.0, 1037.6], [2284.0, 3063.5], [2288.0, 1520.3333333333333], [2280.0, 1266.8333333333335], [2276.0, 1324.8], [2184.0, 1759.0], [2200.0, 1043.0], [2400.0, 1939.3333333333335], [2380.0, 6498.0], [2384.0, 1025.0], [2388.0, 1028.0], [2392.0, 1028.0], [2316.0, 1948.3333333333333], [2312.0, 1038.0], [2308.0, 3772.0], [2304.0, 1037.0], [2452.0, 1006.0], [2444.0, 1005.3333333333334], [2532.0, 863.0], [2536.0, 31240.5], [2440.0, 1005.25], [2448.0, 1005.0], [2472.0, 1010.0], [2468.0, 1009.875], [2652.0, 899.0], [2648.0, 4085.5000000000014], [2756.0, 887.0], [2796.0, 884.0], [2760.0, 887.0], [2768.0, 13006.2], [2772.0, 3406.5], [2776.0, 813.6666666666666], [2780.0, 12952.2], [2812.0, 884.0], [2808.0, 883.0], [2784.0, 21120.0], [2712.0, 893.0], [2716.0, 6805.916666666667], [2748.0, 2327.4285714285716], [2740.0, 888.0], [2736.0, 887.5], [2732.0, 888.5], [2728.0, 887.8888888888889], [2724.0, 888.6666666666666], [2720.0, 889.1428571428571], [2836.0, 801.5], [2844.0, 828.6666666666666], [2832.0, 7297.454545454545], [2828.0, 883.0], [2824.0, 12716.0], [2820.0, 11041.285714285712], [2816.0, 883.0], [3000.0, 2115.8603910151087], [2121.0, 1047.0], [2297.0, 1035.0], [2253.0, 7989.2], [2261.0, 1034.8], [2301.0, 1038.5], [2293.0, 1517.2651933701666], [2285.0, 1033.5714285714287], [2289.0, 2683.5], [2281.0, 1034.0], [2277.0, 1035.0], [2273.0, 1035.8], [2185.0, 1898.0], [2237.0, 1044.0], [2221.0, 1897.0], [2405.0, 1808.857142857143], [2409.0, 1027.0], [2373.0, 1027.5], [2377.0, 1030.4], [2381.0, 4600.75], [2401.0, 1028.0], [2333.0, 1032.0], [2325.0, 2143.8571428571427], [2321.0, 1037.5], [2317.0, 1037.6], [2313.0, 1039.0], [2309.0, 1037.5], [2441.0, 1005.0], [2541.0, 697.0], [2445.0, 1005.0], [2461.0, 1005.0], [2473.0, 1010.0], [2465.0, 1005.0], [2649.0, 848.0], [2765.0, 869.3333333333334], [2757.0, 834.0], [2769.0, 6141.0], [2773.0, 833.5], [2777.0, 884.0], [2781.0, 884.0], [2793.0, 883.5], [2797.0, 883.0], [2805.0, 883.5], [2789.0, 858.5], [2785.0, 833.0], [2713.0, 828.0], [2717.0, 888.0], [2749.0, 21051.0], [2745.0, 744.6666666666666], [2737.0, 887.0], [2725.0, 887.25], [2853.0, 853.4000000000001], [2837.0, 880.0], [2849.0, 854.5], [2845.0, 862.0], [2833.0, 748.0], [2829.0, 9073.625], [2821.0, 883.0], [1569.0, 696.0], [1591.0, 693.8333333333334], [1595.0, 693.25], [1599.0, 693.1818181818181], [1571.0, 695.4444444444445], [1573.0, 695.2], [1575.0, 695.3333333333334], [1577.0, 696.0], [1579.0, 695.5], [1581.0, 697.0], [1583.0, 695.25], [1597.0, 693.4545454545454], [1593.0, 693.0833333333334], [1565.0, 940.8333333333334], [1567.0, 695.3636363636363], [1585.0, 694.3], [1587.0, 694.0], [1589.0, 746.1276595744677], [1563.0, 695.3333333333334], [1561.0, 697.5], [1559.0, 696.4285714285713], [1557.0, 698.0], [1555.0, 697.5], [1553.0, 698.6666666666666], [1661.0, 675.0], [1655.0, 675.5], [1663.0, 857.8333333333333], [1639.0, 676.0], [1643.0, 677.0], [1641.0, 677.0], [1659.0, 674.0], [1653.0, 675.6666666666666], [1613.0, 692.4285714285716], [1611.0, 692.0], [1609.0, 692.9000000000001], [1607.0, 693.5], [1605.0, 693.5], [1603.0, 693.1111111111111], [1601.0, 693.0], [1631.0, 676.5], [1629.0, 1780.0], [1647.0, 676.6666666666666], [1673.0, 671.5], [1723.0, 635.0], [1703.0, 654.3333333333334], [1721.0, 1091.8], [1669.0, 674.0], [1665.0, 674.0], [1695.0, 655.25], [1693.0, 655.3333333333334], [1707.0, 653.5], [1733.0, 3140.0], [2122.0, 1043.0], [2114.0, 5430.0], [2298.0, 1088.5454545454547], [2254.0, 1698.8571428571427], [2258.0, 1034.5714285714287], [2262.0, 1033.0], [2266.0, 1035.5], [2270.0, 1034.5], [2294.0, 1039.0], [2286.0, 1034.0], [2290.0, 1035.0], [2282.0, 1432.2727272727275], [2202.0, 1040.0], [2370.0, 1032.0], [2406.0, 1028.0], [2386.0, 1025.3333333333333], [2378.0, 1025.0], [2382.0, 1024.0], [2394.0, 1028.0], [2398.0, 1027.0], [2330.0, 1036.0], [2326.0, 1032.0], [2322.0, 1037.8], [2318.0, 1038.5], [2314.0, 1038.0], [2310.0, 1038.5], [2306.0, 1036.7272727272727], [2446.0, 1005.0], [2542.0, 6165.0], [2482.0, 3743.5], [2438.0, 1006.0], [2442.0, 1005.6666666666666], [2450.0, 1006.8571428571429], [2454.0, 1004.0], [2462.0, 1005.0], [2474.0, 2226.222222222222], [2466.0, 1006.3333333333334], [2686.0, 6150.0], [2650.0, 848.2], [2754.0, 887.0], [2810.0, 884.0], [2762.0, 835.0], [2770.0, 2161.0], [2774.0, 672.0], [2778.0, 31237.0], [2794.0, 883.5], [2802.0, 883.2], [2806.0, 884.0], [2790.0, 884.5], [2786.0, 886.0], [2694.0, 11878.333333333334], [2698.0, 31244.333333333332], [2750.0, 834.0], [2746.0, 888.0], [2734.0, 888.3333333333334], [2722.0, 890.0], [2838.0, 14305.888888888887], [2846.0, 880.0], [2842.0, 829.0], [2818.0, 884.0], [2123.0, 1043.0], [2119.0, 1138.4444444444443], [2115.0, 6392.0952380952385], [2251.0, 9310.53846153846], [2295.0, 1036.25], [2299.0, 2495.0], [2303.0, 1035.666666666667], [2255.0, 6871.999999999998], [2259.0, 6089.0], [2267.0, 1035.3333333333333], [2271.0, 1033.0], [2283.0, 1033.5], [2287.0, 1033.875], [2291.0, 1035.75], [2279.0, 3740.333333333333], [2275.0, 1034.25], [2239.0, 1039.0], [2375.0, 1030.0], [2407.0, 1028.0], [2431.0, 1006.0], [2371.0, 1030.3333333333333], [2379.0, 1029.0], [2391.0, 1027.0], [2395.0, 1029.0], [2399.0, 1027.0], [2411.0, 3759.5], [2403.0, 1028.0], [2327.0, 1032.6666666666665], [2319.0, 2402.7428571428572], [2311.0, 1036.6666666666667], [2307.0, 1038.0], [2439.0, 1005.3333333333334], [2471.0, 1010.0], [2655.0, 898.0], [2651.0, 873.75], [2815.0, 883.5], [2811.0, 884.0], [2755.0, 887.0], [2759.0, 834.0], [2763.0, 859.5], [2771.0, 711.75], [2783.0, 833.0], [2807.0, 2719.6666666666665], [2791.0, 1124.9545454545455], [2799.0, 883.0], [2803.0, 883.0], [2751.0, 834.0], [2691.0, 893.75], [2695.0, 787.0], [2699.0, 840.0], [2719.0, 888.5], [2739.0, 887.5], [2731.0, 888.0], [2727.0, 888.0], [2723.0, 888.6666666666666], [2843.0, 880.0], [2847.0, 867.5], [2835.0, 668.0], [2831.0, 880.0], [2827.0, 10304.857142857143], [2823.0, 882.8000000000001], [2819.0, 6139.0], [1.0, 140453.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[2986.7134750830587, 2352.935382059749]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 3000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 252.0, "minX": 1.68287928E12, "maxY": 831031.3166666667, "series": [{"data": [[1.68287934E12, 809722.85], [1.68287964E12, 7653.05], [1.68287946E12, 642724.65], [1.68287928E12, 195948.78333333333], [1.68287958E12, 538293.5333333333], [1.6828794E12, 831031.3166666667], [1.6828797E12, 359.45], [1.68287952E12, 607745.7833333333]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.68287934E12, 547419.6], [1.68287964E12, 5955.6], [1.68287946E12, 445561.2], [1.68287928E12, 137482.8], [1.68287958E12, 377672.4], [1.6828794E12, 577567.2], [1.6828797E12, 252.0], [1.68287952E12, 426770.4]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6828797E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 614.7285391336261, "minX": 1.68287928E12, "maxY": 137342.43333333326, "series": [{"data": [[1.68287934E12, 1753.7256285371918], [1.68287964E12, 90326.5669957686], [1.68287946E12, 2665.989555547214], [1.68287928E12, 614.7285391336261], [1.68287958E12, 1161.4808611908054], [1.6828794E12, 2315.8461259641595], [1.6828797E12, 137342.43333333326], [1.68287952E12, 3159.3175127902455]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6828797E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 613.6218610618935, "minX": 1.68287928E12, "maxY": 137342.43333333326, "series": [{"data": [[1.68287934E12, 1353.7671567511752], [1.68287964E12, 90326.5585331453], [1.68287946E12, 2536.295600556031], [1.68287928E12, 613.6218610618935], [1.68287958E12, 1161.4693400947517], [1.6828794E12, 2190.942266426959], [1.6828797E12, 137342.43333333326], [1.68287952E12, 3135.2244391971903]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6828797E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 80.71900775951636, "minX": 1.68287928E12, "maxY": 27587.51480959103, "series": [{"data": [[1.68287934E12, 333.7506789870585], [1.68287964E12, 27587.51480959103], [1.68287946E12, 1056.1305744449048], [1.68287928E12, 80.71900775951636], [1.68287958E12, 151.0836280331828], [1.6828794E12, 394.0558487502165], [1.6828797E12, 14095.966666666665], [1.68287952E12, 906.860291223936]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6828797E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 6.0, "minX": 1.68287928E12, "maxY": 194126.0, "series": [{"data": [[1.68287934E12, 77147.0], [1.68287964E12, 161488.0], [1.68287946E12, 194126.0], [1.68287928E12, 17053.0], [1.68287958E12, 192007.0], [1.6828794E12, 137119.0], [1.6828797E12, 191052.0], [1.68287952E12, 183321.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.68287934E12, 427.0], [1.68287964E12, 134320.0], [1.68287946E12, 821.0], [1.68287928E12, 574.0], [1.68287958E12, 1071.0], [1.6828794E12, 7549.0], [1.6828797E12, 191050.9], [1.68287952E12, 915.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.68287934E12, 26287.0], [1.68287964E12, 139489.0], [1.68287946E12, 131031.0], [1.68287928E12, 8212.32], [1.68287958E12, 10769.580000000067], [1.6828794E12, 100527.0], [1.6828797E12, 191052.0], [1.68287952E12, 23357.310000003792]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.68287934E12, 15258.95], [1.68287964E12, 138490.5], [1.68287946E12, 852.0], [1.68287928E12, 997.0], [1.68287958E12, 1200.0], [1.6828794E12, 21192.0], [1.6828797E12, 191052.0], [1.68287952E12, 8348.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.68287934E12, 15.0], [1.68287964E12, 46460.0], [1.68287946E12, 24.0], [1.68287928E12, 84.0], [1.68287958E12, 27.0], [1.6828794E12, 6.0], [1.6828797E12, 83192.0], [1.68287952E12, 22.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.68287934E12, 114.0], [1.68287964E12, 76721.0], [1.68287946E12, 527.0], [1.68287928E12, 309.0], [1.68287958E12, 696.0], [1.6828794E12, 326.0], [1.6828797E12, 121406.0], [1.68287952E12, 610.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6828797E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 36.0, "minX": 1.0, "maxY": 138499.5, "series": [{"data": [[2.0, 67029.0], [3.0, 67325.5], [4.0, 30967.5], [5.0, 49077.0], [6.0, 15382.0], [7.0, 13718.0], [8.0, 67718.0], [9.0, 65328.5], [10.0, 93606.5], [12.0, 7297.5], [13.0, 10255.0], [14.0, 13291.0], [15.0, 23730.5], [20.0, 88599.0], [21.0, 76260.5], [26.0, 64320.5], [27.0, 86971.0], [32.0, 100628.0], [37.0, 138499.5], [40.0, 106663.5], [43.0, 73573.0], [51.0, 72412.0], [50.0, 69.0], [53.0, 2188.0], [54.0, 47152.5], [61.0, 69.0], [70.0, 109.0], [69.0, 161.0], [75.0, 87.0], [78.0, 71.0], [90.0, 85.0], [88.0, 76711.5], [95.0, 86.0], [97.0, 134294.0], [115.0, 69519.0], [118.0, 76.0], [117.0, 73933.5], [128.0, 11880.5], [138.0, 9370.0], [155.0, 139.0], [163.0, 859.0], [170.0, 359.0], [183.0, 159.0], [181.0, 161.0], [185.0, 150.0], [201.0, 188.0], [228.0, 157.0], [235.0, 356.0], [232.0, 171.0], [241.0, 157.0], [262.0, 178.0], [269.0, 174.0], [281.0, 164.0], [306.0, 22620.0], [359.0, 14595.0], [353.0, 7238.0], [380.0, 258.0], [402.0, 22223.5], [405.0, 173.0], [460.0, 296.0], [451.0, 10379.0], [465.0, 23989.0], [466.0, 489.0], [483.0, 12897.0], [522.0, 15790.0], [513.0, 436.0], [561.0, 104.0], [548.0, 482.0], [564.0, 461.0], [595.0, 240.0], [621.0, 371.0], [628.0, 282.0], [632.0, 564.0], [649.0, 483.0], [773.0, 403.0], [780.0, 477.0], [779.0, 126.0], [797.0, 496.0], [784.0, 498.0], [771.0, 545.0], [800.0, 419.0], [805.0, 98.0], [808.0, 530.0], [801.0, 529.0], [835.0, 949.0], [862.0, 447.0], [848.0, 142.0], [842.0, 197.0], [861.0, 576.0], [863.0, 403.0], [857.0, 489.0], [870.0, 330.0], [874.0, 282.0], [890.0, 90.0], [869.0, 681.0], [868.0, 476.0], [885.0, 512.0], [913.0, 393.0], [908.0, 278.0], [923.0, 432.0], [907.0, 513.0], [902.0, 525.0], [957.0, 26186.0], [947.0, 149.0], [959.0, 552.0], [951.0, 548.0], [934.0, 524.0], [941.0, 546.0], [954.0, 524.0], [987.0, 454.0], [984.0, 456.0], [988.0, 70.0], [969.0, 573.0], [962.0, 535.0], [977.0, 515.0], [983.0, 532.0], [965.0, 487.0], [974.0, 557.0], [972.0, 528.0], [999.0, 349.0], [1004.0, 168.0], [1005.0, 569.0], [1017.0, 418.0], [998.0, 494.0], [997.0, 528.0], [995.0, 571.0], [1023.0, 458.0], [1009.0, 373.0], [992.0, 443.0], [1006.0, 512.0], [1007.0, 552.0], [1010.0, 481.0], [1012.0, 625.0], [1027.0, 244.0], [1087.0, 349.0], [1025.0, 465.0], [1047.0, 80.0], [1082.0, 253.0], [1073.0, 226.0], [1034.0, 578.0], [1061.0, 607.0], [1062.0, 439.0], [1077.0, 506.0], [1146.0, 458.0], [1115.0, 51.0], [1098.0, 568.0], [1108.0, 521.0], [1188.0, 244.0], [1161.0, 517.0], [1157.0, 515.0], [1175.0, 402.0], [1169.0, 451.0], [1223.0, 97.0], [1225.0, 536.0], [1292.0, 357.0], [1309.0, 556.0], [1314.0, 510.0], [1377.0, 134.0], [1359.0, 258.0], [1367.0, 516.0], [1461.0, 409.0], [1452.0, 458.0], [1427.0, 422.0], [1449.0, 103.0], [1463.0, 73.0], [1415.0, 136.0], [1409.0, 496.0], [1460.0, 426.0], [1433.0, 827.0], [1508.0, 460.0], [1476.0, 73.0], [1489.0, 516.0], [1562.0, 653.0], [1542.0, 72.0], [1570.0, 154.0], [1551.0, 477.0], [1606.0, 55.0], [1634.0, 631.0], [1664.0, 128.0], [1720.0, 587.0], [1715.0, 593.0], [1687.0, 512.0], [1678.0, 696.0], [1773.0, 505.0], [1738.0, 513.0], [1789.0, 771.0], [1813.0, 465.0], [1843.0, 230.0], [1841.0, 182.0], [1849.0, 430.0], [1801.0, 556.0], [1872.0, 259.0], [1874.0, 315.0], [1904.0, 129.0], [1860.0, 119.0], [1892.0, 515.0], [1919.0, 552.0], [1878.0, 572.0], [1875.0, 482.0], [1974.0, 213.5], [1964.0, 281.0], [1921.0, 351.0], [1958.0, 68.0], [1966.0, 90.0], [1959.0, 434.0], [1949.0, 503.0], [1930.0, 611.0], [1946.0, 822.5], [2010.0, 345.0], [2004.0, 372.0], [2002.0, 689.0], [2030.0, 572.0], [1990.0, 546.0], [2031.0, 871.0], [2012.0, 470.0], [2174.0, 385.0], [2071.0, 318.0], [2104.0, 308.5], [2048.0, 562.0], [2097.0, 239.0], [2086.0, 545.0], [2142.0, 374.0], [2149.0, 36.0], [2169.0, 38.0], [2147.0, 65.0], [2139.0, 67.0], [2117.0, 208.0], [2131.0, 497.0], [2120.0, 950.0], [2258.0, 303.0], [2182.0, 64.0], [2268.0, 73.0], [2257.0, 666.0], [2267.0, 1049.0], [2269.0, 848.0], [2385.0, 376.0], [2387.0, 413.0], [2310.0, 40.0], [2325.0, 213.0], [2486.0, 394.0], [2458.0, 383.0], [2509.0, 420.0], [2529.0, 594.0], [2526.0, 492.0], [2823.0, 526.0], [2817.0, 614.0], [2900.0, 985.0], [3038.0, 773.0], [2980.0, 990.0], [1.0, 93050.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[37.0, 105654.0], [797.0, 13335.0], [51.0, 87433.0], [861.0, 26426.0], [61.0, 21878.5], [1023.0, 44612.0], [1009.0, 48547.0], [1007.0, 11134.0], [1034.0, 19418.0], [1098.0, 29962.0], [1508.0, 34660.0], [1542.0, 61166.0], [1664.0, 17773.5], [117.0, 33816.0], [1966.0, 53857.0], [1949.0, 57878.0], [2004.0, 7731.0], [2002.0, 29918.0], [2030.0, 30675.0], [2174.0, 6388.0], [2169.0, 85209.0], [2097.0, 115312.0], [2048.0, 30681.0], [2310.0, 28182.0], [170.0, 15391.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 3038.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 138499.5, "series": [{"data": [[2.0, 67029.0], [3.0, 67325.5], [4.0, 30967.5], [5.0, 49077.0], [6.0, 15382.0], [7.0, 13718.0], [8.0, 67718.0], [9.0, 65328.5], [10.0, 93606.5], [12.0, 7297.5], [13.0, 10255.0], [14.0, 13291.0], [15.0, 23730.5], [20.0, 88599.0], [21.0, 76260.5], [26.0, 64320.5], [27.0, 86971.0], [32.0, 100628.0], [37.0, 138499.5], [40.0, 106663.5], [43.0, 73573.0], [51.0, 72412.0], [50.0, 69.0], [53.0, 2188.0], [54.0, 47152.5], [61.0, 69.0], [70.0, 109.0], [69.0, 161.0], [75.0, 87.0], [78.0, 71.0], [90.0, 85.0], [88.0, 76711.5], [95.0, 86.0], [97.0, 134294.0], [115.0, 69519.0], [118.0, 76.0], [117.0, 73933.5], [128.0, 11880.5], [138.0, 9370.0], [155.0, 139.0], [163.0, 859.0], [170.0, 358.0], [183.0, 159.0], [181.0, 161.0], [185.0, 150.0], [201.0, 188.0], [228.0, 157.0], [235.0, 356.0], [232.0, 171.0], [241.0, 157.0], [262.0, 178.0], [269.0, 174.0], [281.0, 164.0], [306.0, 22620.0], [359.0, 14595.0], [353.0, 7238.0], [380.0, 258.0], [402.0, 22223.5], [405.0, 173.0], [460.0, 296.0], [451.0, 10379.0], [465.0, 23989.0], [466.0, 489.0], [483.0, 12897.0], [522.0, 15790.0], [513.0, 436.0], [561.0, 104.0], [548.0, 482.0], [564.0, 461.0], [595.0, 240.0], [621.0, 371.0], [628.0, 282.0], [632.0, 564.0], [649.0, 483.0], [773.0, 403.0], [780.0, 477.0], [779.0, 126.0], [797.0, 496.0], [784.0, 498.0], [771.0, 545.0], [800.0, 419.0], [805.0, 98.0], [808.0, 530.0], [801.0, 529.0], [835.0, 932.0], [862.0, 447.0], [848.0, 142.0], [842.0, 197.0], [861.0, 576.0], [863.0, 403.0], [857.0, 489.0], [870.0, 330.0], [874.0, 282.0], [890.0, 90.0], [869.0, 681.0], [868.0, 476.0], [885.0, 512.0], [913.0, 393.0], [908.0, 278.0], [923.0, 432.0], [907.0, 513.0], [902.0, 525.0], [957.0, 26186.0], [947.0, 149.0], [959.0, 552.0], [951.0, 548.0], [934.0, 524.0], [941.0, 546.0], [954.0, 524.0], [987.0, 454.0], [984.0, 456.0], [988.0, 70.0], [969.0, 573.0], [962.0, 535.0], [977.0, 515.0], [983.0, 532.0], [965.0, 487.0], [974.0, 557.0], [972.0, 528.0], [999.0, 349.0], [1004.0, 168.0], [1005.0, 569.0], [1017.0, 418.0], [998.0, 494.0], [997.0, 528.0], [995.0, 571.0], [1023.0, 458.0], [1009.0, 373.0], [992.0, 443.0], [1006.0, 512.0], [1007.0, 552.0], [1010.0, 481.0], [1012.0, 625.0], [1027.0, 244.0], [1087.0, 349.0], [1025.0, 465.0], [1047.0, 80.0], [1082.0, 253.0], [1073.0, 226.0], [1034.0, 578.0], [1061.0, 607.0], [1062.0, 439.0], [1077.0, 506.0], [1146.0, 458.0], [1115.0, 51.0], [1098.0, 568.0], [1108.0, 521.0], [1188.0, 244.0], [1161.0, 517.0], [1157.0, 515.0], [1175.0, 402.0], [1169.0, 451.0], [1223.0, 97.0], [1225.0, 536.0], [1292.0, 357.0], [1309.0, 556.0], [1314.0, 510.0], [1377.0, 134.0], [1359.0, 258.0], [1367.0, 516.0], [1461.0, 409.0], [1452.0, 458.0], [1427.0, 422.0], [1449.0, 103.0], [1463.0, 73.0], [1415.0, 136.0], [1409.0, 496.0], [1460.0, 426.0], [1433.0, 827.0], [1508.0, 460.0], [1476.0, 73.0], [1489.0, 516.0], [1562.0, 652.0], [1542.0, 72.0], [1570.0, 154.0], [1551.0, 477.0], [1606.0, 55.0], [1634.0, 631.0], [1664.0, 128.0], [1720.0, 587.0], [1715.0, 593.0], [1687.0, 512.0], [1678.0, 696.0], [1773.0, 505.0], [1738.0, 513.0], [1789.0, 771.0], [1813.0, 465.0], [1843.0, 230.0], [1841.0, 182.0], [1849.0, 430.0], [1801.0, 556.0], [1872.0, 259.0], [1874.0, 315.0], [1904.0, 129.0], [1860.0, 119.0], [1892.0, 515.0], [1919.0, 552.0], [1878.0, 572.0], [1875.0, 482.0], [1974.0, 213.5], [1964.0, 281.0], [1921.0, 351.0], [1958.0, 68.0], [1966.0, 90.0], [1959.0, 434.0], [1949.0, 503.0], [1930.0, 611.0], [1946.0, 822.5], [2010.0, 345.0], [2004.0, 372.0], [2002.0, 689.0], [2030.0, 572.0], [1990.0, 546.0], [2031.0, 871.0], [2012.0, 470.0], [2174.0, 385.0], [2071.0, 318.0], [2104.0, 308.5], [2048.0, 562.0], [2097.0, 239.0], [2086.0, 545.0], [2142.0, 374.0], [2149.0, 36.0], [2169.0, 38.0], [2147.0, 65.0], [2139.0, 67.0], [2117.0, 208.0], [2131.0, 497.0], [2120.0, 950.0], [2258.0, 303.0], [2182.0, 64.0], [2268.0, 73.0], [2257.0, 666.0], [2267.0, 1049.0], [2269.0, 848.0], [2385.0, 376.0], [2387.0, 413.0], [2310.0, 40.0], [2325.0, 213.0], [2486.0, 394.0], [2458.0, 383.0], [2509.0, 420.0], [2529.0, 594.0], [2526.0, 492.0], [2823.0, 526.0], [2817.0, 614.0], [2900.0, 985.0], [3038.0, 773.0], [2980.0, 990.0], [1.0, 93050.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[37.0, 0.0], [797.0, 0.0], [51.0, 0.0], [861.0, 0.0], [61.0, 0.0], [1023.0, 0.0], [1009.0, 0.0], [1007.0, 0.0], [1034.0, 0.0], [1098.0, 0.0], [1508.0, 0.0], [1542.0, 0.0], [1664.0, 0.0], [117.0, 0.0], [1966.0, 0.0], [1949.0, 0.0], [2004.0, 0.0], [2002.0, 0.0], [2030.0, 0.0], [2174.0, 0.0], [2169.0, 0.0], [2097.0, 0.0], [2048.0, 0.0], [2310.0, 0.0], [170.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 3038.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 322.78333333333336, "minX": 1.68287928E12, "maxY": 1133.3333333333333, "series": [{"data": [[1.68287934E12, 1093.8833333333334], [1.68287946E12, 883.3333333333334], [1.68287928E12, 322.78333333333336], [1.68287958E12, 750.0], [1.6828794E12, 1133.3333333333333], [1.68287952E12, 833.3333333333334]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68287958E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.23333333333333334, "minX": 1.68287928E12, "maxY": 1145.9666666666667, "series": [{"data": [[1.68287934E12, 1086.15], [1.68287964E12, 11.816666666666666], [1.68287946E12, 884.05], [1.68287928E12, 272.78333333333336], [1.68287958E12, 749.35], [1.6828794E12, 1145.9666666666667], [1.6828797E12, 0.5], [1.68287952E12, 846.7666666666667]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.68287934E12, 12.3], [1.68287946E12, 3.183333333333333], [1.6828794E12, 3.566666666666667], [1.68287952E12, 0.23333333333333334]], "isOverall": false, "label": "Non HTTP response code: java.net.SocketException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6828797E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.23333333333333334, "minX": 1.68287928E12, "maxY": 1145.9666666666667, "series": [{"data": [[1.68287934E12, 1086.15], [1.68287964E12, 11.816666666666666], [1.68287946E12, 884.05], [1.68287928E12, 272.78333333333336], [1.68287958E12, 749.35], [1.6828794E12, 1145.9666666666667], [1.6828797E12, 0.5], [1.68287952E12, 846.7666666666667]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.68287934E12, 12.3], [1.68287946E12, 3.183333333333333], [1.6828794E12, 3.566666666666667], [1.68287952E12, 0.23333333333333334]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6828797E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.23333333333333334, "minX": 1.68287928E12, "maxY": 1145.9666666666667, "series": [{"data": [[1.68287934E12, 1086.15], [1.68287964E12, 11.816666666666666], [1.68287946E12, 884.05], [1.68287928E12, 272.78333333333336], [1.68287958E12, 749.35], [1.6828794E12, 1145.9666666666667], [1.6828797E12, 0.5], [1.68287952E12, 846.7666666666667]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.68287934E12, 12.3], [1.68287946E12, 3.183333333333333], [1.6828794E12, 3.566666666666667], [1.68287952E12, 0.23333333333333334]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6828797E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

