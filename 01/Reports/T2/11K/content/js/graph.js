/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 3.0, "minX": 0.0, "maxY": 249003.0, "series": [{"data": [[0.0, 3.0], [0.1, 4.0], [0.2, 4.0], [0.3, 4.0], [0.4, 4.0], [0.5, 4.0], [0.6, 4.0], [0.7, 5.0], [0.8, 5.0], [0.9, 5.0], [1.0, 5.0], [1.1, 5.0], [1.2, 5.0], [1.3, 5.0], [1.4, 5.0], [1.5, 6.0], [1.6, 6.0], [1.7, 6.0], [1.8, 6.0], [1.9, 7.0], [2.0, 7.0], [2.1, 8.0], [2.2, 8.0], [2.3, 8.0], [2.4, 9.0], [2.5, 9.0], [2.6, 9.0], [2.7, 10.0], [2.8, 10.0], [2.9, 10.0], [3.0, 11.0], [3.1, 11.0], [3.2, 11.0], [3.3, 11.0], [3.4, 12.0], [3.5, 12.0], [3.6, 12.0], [3.7, 13.0], [3.8, 13.0], [3.9, 13.0], [4.0, 14.0], [4.1, 14.0], [4.2, 14.0], [4.3, 15.0], [4.4, 15.0], [4.5, 15.0], [4.6, 16.0], [4.7, 16.0], [4.8, 16.0], [4.9, 17.0], [5.0, 17.0], [5.1, 17.0], [5.2, 18.0], [5.3, 18.0], [5.4, 18.0], [5.5, 19.0], [5.6, 19.0], [5.7, 20.0], [5.8, 20.0], [5.9, 20.0], [6.0, 21.0], [6.1, 21.0], [6.2, 21.0], [6.3, 22.0], [6.4, 22.0], [6.5, 23.0], [6.6, 23.0], [6.7, 23.0], [6.8, 24.0], [6.9, 24.0], [7.0, 24.0], [7.1, 25.0], [7.2, 25.0], [7.3, 25.0], [7.4, 26.0], [7.5, 26.0], [7.6, 27.0], [7.7, 27.0], [7.8, 27.0], [7.9, 28.0], [8.0, 28.0], [8.1, 29.0], [8.2, 29.0], [8.3, 29.0], [8.4, 30.0], [8.5, 30.0], [8.6, 30.0], [8.7, 31.0], [8.8, 31.0], [8.9, 32.0], [9.0, 32.0], [9.1, 32.0], [9.2, 33.0], [9.3, 33.0], [9.4, 33.0], [9.5, 34.0], [9.6, 34.0], [9.7, 34.0], [9.8, 35.0], [9.9, 35.0], [10.0, 36.0], [10.1, 36.0], [10.2, 36.0], [10.3, 37.0], [10.4, 37.0], [10.5, 37.0], [10.6, 38.0], [10.7, 38.0], [10.8, 39.0], [10.9, 39.0], [11.0, 39.0], [11.1, 40.0], [11.2, 40.0], [11.3, 41.0], [11.4, 41.0], [11.5, 42.0], [11.6, 42.0], [11.7, 42.0], [11.8, 43.0], [11.9, 43.0], [12.0, 44.0], [12.1, 44.0], [12.2, 44.0], [12.3, 45.0], [12.4, 45.0], [12.5, 46.0], [12.6, 46.0], [12.7, 47.0], [12.8, 47.0], [12.9, 48.0], [13.0, 48.0], [13.1, 48.0], [13.2, 49.0], [13.3, 49.0], [13.4, 49.0], [13.5, 50.0], [13.6, 50.0], [13.7, 51.0], [13.8, 51.0], [13.9, 52.0], [14.0, 52.0], [14.1, 53.0], [14.2, 53.0], [14.3, 54.0], [14.4, 54.0], [14.5, 55.0], [14.6, 55.0], [14.7, 55.0], [14.8, 56.0], [14.9, 56.0], [15.0, 57.0], [15.1, 58.0], [15.2, 58.0], [15.3, 59.0], [15.4, 59.0], [15.5, 60.0], [15.6, 60.0], [15.7, 61.0], [15.8, 61.0], [15.9, 62.0], [16.0, 63.0], [16.1, 63.0], [16.2, 64.0], [16.3, 65.0], [16.4, 65.0], [16.5, 66.0], [16.6, 67.0], [16.7, 67.0], [16.8, 68.0], [16.9, 68.0], [17.0, 69.0], [17.1, 69.0], [17.2, 70.0], [17.3, 70.0], [17.4, 71.0], [17.5, 72.0], [17.6, 72.0], [17.7, 73.0], [17.8, 74.0], [17.9, 75.0], [18.0, 75.0], [18.1, 76.0], [18.2, 77.0], [18.3, 77.0], [18.4, 78.0], [18.5, 78.0], [18.6, 79.0], [18.7, 80.0], [18.8, 81.0], [18.9, 82.0], [19.0, 82.0], [19.1, 83.0], [19.2, 84.0], [19.3, 84.0], [19.4, 85.0], [19.5, 86.0], [19.6, 87.0], [19.7, 88.0], [19.8, 88.0], [19.9, 89.0], [20.0, 90.0], [20.1, 91.0], [20.2, 92.0], [20.3, 92.0], [20.4, 93.0], [20.5, 94.0], [20.6, 94.0], [20.7, 95.0], [20.8, 95.0], [20.9, 96.0], [21.0, 97.0], [21.1, 98.0], [21.2, 98.0], [21.3, 99.0], [21.4, 100.0], [21.5, 100.0], [21.6, 101.0], [21.7, 102.0], [21.8, 103.0], [21.9, 104.0], [22.0, 105.0], [22.1, 106.0], [22.2, 107.0], [22.3, 107.0], [22.4, 108.0], [22.5, 108.0], [22.6, 109.0], [22.7, 109.0], [22.8, 110.0], [22.9, 110.0], [23.0, 111.0], [23.1, 112.0], [23.2, 112.0], [23.3, 113.0], [23.4, 113.0], [23.5, 114.0], [23.6, 115.0], [23.7, 116.0], [23.8, 117.0], [23.9, 119.0], [24.0, 120.0], [24.1, 121.0], [24.2, 122.0], [24.3, 123.0], [24.4, 123.0], [24.5, 125.0], [24.6, 126.0], [24.7, 127.0], [24.8, 127.0], [24.9, 128.0], [25.0, 129.0], [25.1, 130.0], [25.2, 131.0], [25.3, 132.0], [25.4, 133.0], [25.5, 134.0], [25.6, 134.0], [25.7, 135.0], [25.8, 136.0], [25.9, 137.0], [26.0, 138.0], [26.1, 139.0], [26.2, 139.0], [26.3, 140.0], [26.4, 140.0], [26.5, 141.0], [26.6, 141.0], [26.7, 142.0], [26.8, 143.0], [26.9, 143.0], [27.0, 143.0], [27.1, 144.0], [27.2, 144.0], [27.3, 145.0], [27.4, 146.0], [27.5, 146.0], [27.6, 147.0], [27.7, 148.0], [27.8, 149.0], [27.9, 150.0], [28.0, 150.0], [28.1, 151.0], [28.2, 152.0], [28.3, 153.0], [28.4, 153.0], [28.5, 154.0], [28.6, 154.0], [28.7, 155.0], [28.8, 155.0], [28.9, 155.0], [29.0, 156.0], [29.1, 156.0], [29.2, 157.0], [29.3, 158.0], [29.4, 159.0], [29.5, 159.0], [29.6, 161.0], [29.7, 161.0], [29.8, 162.0], [29.9, 163.0], [30.0, 163.0], [30.1, 164.0], [30.2, 165.0], [30.3, 165.0], [30.4, 165.0], [30.5, 166.0], [30.6, 166.0], [30.7, 167.0], [30.8, 167.0], [30.9, 168.0], [31.0, 168.0], [31.1, 169.0], [31.2, 169.0], [31.3, 170.0], [31.4, 170.0], [31.5, 171.0], [31.6, 171.0], [31.7, 172.0], [31.8, 172.0], [31.9, 172.0], [32.0, 173.0], [32.1, 173.0], [32.2, 174.0], [32.3, 175.0], [32.4, 176.0], [32.5, 176.0], [32.6, 177.0], [32.7, 177.0], [32.8, 178.0], [32.9, 179.0], [33.0, 179.0], [33.1, 180.0], [33.2, 180.0], [33.3, 181.0], [33.4, 181.0], [33.5, 182.0], [33.6, 182.0], [33.7, 183.0], [33.8, 184.0], [33.9, 184.0], [34.0, 185.0], [34.1, 186.0], [34.2, 187.0], [34.3, 188.0], [34.4, 189.0], [34.5, 190.0], [34.6, 191.0], [34.7, 192.0], [34.8, 193.0], [34.9, 193.0], [35.0, 194.0], [35.1, 194.0], [35.2, 195.0], [35.3, 196.0], [35.4, 196.0], [35.5, 197.0], [35.6, 197.0], [35.7, 198.0], [35.8, 199.0], [35.9, 200.0], [36.0, 200.0], [36.1, 201.0], [36.2, 202.0], [36.3, 203.0], [36.4, 204.0], [36.5, 205.0], [36.6, 205.0], [36.7, 206.0], [36.8, 207.0], [36.9, 207.0], [37.0, 208.0], [37.1, 209.0], [37.2, 210.0], [37.3, 211.0], [37.4, 212.0], [37.5, 212.0], [37.6, 213.0], [37.7, 213.0], [37.8, 214.0], [37.9, 215.0], [38.0, 216.0], [38.1, 217.0], [38.2, 219.0], [38.3, 220.0], [38.4, 222.0], [38.5, 223.0], [38.6, 225.0], [38.7, 226.0], [38.8, 227.0], [38.9, 229.0], [39.0, 230.0], [39.1, 231.0], [39.2, 233.0], [39.3, 234.0], [39.4, 236.0], [39.5, 238.0], [39.6, 239.0], [39.7, 240.0], [39.8, 241.0], [39.9, 244.0], [40.0, 247.0], [40.1, 249.0], [40.2, 250.0], [40.3, 251.0], [40.4, 253.0], [40.5, 254.0], [40.6, 257.0], [40.7, 260.0], [40.8, 261.0], [40.9, 262.0], [41.0, 263.0], [41.1, 264.0], [41.2, 265.0], [41.3, 267.0], [41.4, 269.0], [41.5, 271.0], [41.6, 272.0], [41.7, 273.0], [41.8, 275.0], [41.9, 276.0], [42.0, 276.0], [42.1, 278.0], [42.2, 280.0], [42.3, 282.0], [42.4, 283.0], [42.5, 283.0], [42.6, 285.0], [42.7, 287.0], [42.8, 288.0], [42.9, 290.0], [43.0, 292.0], [43.1, 294.0], [43.2, 295.0], [43.3, 296.0], [43.4, 297.0], [43.5, 298.0], [43.6, 299.0], [43.7, 299.0], [43.8, 300.0], [43.9, 300.0], [44.0, 301.0], [44.1, 301.0], [44.2, 302.0], [44.3, 303.0], [44.4, 303.0], [44.5, 304.0], [44.6, 304.0], [44.7, 305.0], [44.8, 305.0], [44.9, 306.0], [45.0, 307.0], [45.1, 309.0], [45.2, 310.0], [45.3, 310.0], [45.4, 311.0], [45.5, 312.0], [45.6, 314.0], [45.7, 315.0], [45.8, 316.0], [45.9, 317.0], [46.0, 320.0], [46.1, 322.0], [46.2, 323.0], [46.3, 325.0], [46.4, 326.0], [46.5, 326.0], [46.6, 327.0], [46.7, 328.0], [46.8, 329.0], [46.9, 329.0], [47.0, 330.0], [47.1, 331.0], [47.2, 331.0], [47.3, 332.0], [47.4, 332.0], [47.5, 333.0], [47.6, 333.0], [47.7, 334.0], [47.8, 334.0], [47.9, 335.0], [48.0, 335.0], [48.1, 335.0], [48.2, 336.0], [48.3, 336.0], [48.4, 337.0], [48.5, 337.0], [48.6, 338.0], [48.7, 339.0], [48.8, 340.0], [48.9, 341.0], [49.0, 342.0], [49.1, 342.0], [49.2, 343.0], [49.3, 343.0], [49.4, 343.0], [49.5, 344.0], [49.6, 344.0], [49.7, 345.0], [49.8, 346.0], [49.9, 347.0], [50.0, 348.0], [50.1, 348.0], [50.2, 349.0], [50.3, 349.0], [50.4, 350.0], [50.5, 351.0], [50.6, 352.0], [50.7, 353.0], [50.8, 354.0], [50.9, 354.0], [51.0, 355.0], [51.1, 355.0], [51.2, 355.0], [51.3, 356.0], [51.4, 356.0], [51.5, 356.0], [51.6, 357.0], [51.7, 357.0], [51.8, 357.0], [51.9, 358.0], [52.0, 358.0], [52.1, 358.0], [52.2, 358.0], [52.3, 359.0], [52.4, 359.0], [52.5, 359.0], [52.6, 360.0], [52.7, 360.0], [52.8, 361.0], [52.9, 361.0], [53.0, 361.0], [53.1, 362.0], [53.2, 362.0], [53.3, 363.0], [53.4, 363.0], [53.5, 364.0], [53.6, 365.0], [53.7, 366.0], [53.8, 366.0], [53.9, 367.0], [54.0, 367.0], [54.1, 368.0], [54.2, 368.0], [54.3, 368.0], [54.4, 369.0], [54.5, 369.0], [54.6, 370.0], [54.7, 370.0], [54.8, 371.0], [54.9, 371.0], [55.0, 371.0], [55.1, 372.0], [55.2, 372.0], [55.3, 373.0], [55.4, 373.0], [55.5, 373.0], [55.6, 374.0], [55.7, 374.0], [55.8, 375.0], [55.9, 375.0], [56.0, 375.0], [56.1, 376.0], [56.2, 376.0], [56.3, 376.0], [56.4, 376.0], [56.5, 377.0], [56.6, 377.0], [56.7, 377.0], [56.8, 378.0], [56.9, 378.0], [57.0, 379.0], [57.1, 379.0], [57.2, 379.0], [57.3, 380.0], [57.4, 380.0], [57.5, 381.0], [57.6, 381.0], [57.7, 381.0], [57.8, 382.0], [57.9, 382.0], [58.0, 382.0], [58.1, 382.0], [58.2, 383.0], [58.3, 383.0], [58.4, 383.0], [58.5, 384.0], [58.6, 384.0], [58.7, 384.0], [58.8, 384.0], [58.9, 385.0], [59.0, 385.0], [59.1, 385.0], [59.2, 386.0], [59.3, 387.0], [59.4, 387.0], [59.5, 388.0], [59.6, 388.0], [59.7, 388.0], [59.8, 389.0], [59.9, 389.0], [60.0, 389.0], [60.1, 389.0], [60.2, 390.0], [60.3, 390.0], [60.4, 391.0], [60.5, 391.0], [60.6, 392.0], [60.7, 392.0], [60.8, 392.0], [60.9, 393.0], [61.0, 393.0], [61.1, 394.0], [61.2, 394.0], [61.3, 395.0], [61.4, 395.0], [61.5, 396.0], [61.6, 396.0], [61.7, 397.0], [61.8, 397.0], [61.9, 397.0], [62.0, 398.0], [62.1, 398.0], [62.2, 399.0], [62.3, 399.0], [62.4, 400.0], [62.5, 400.0], [62.6, 400.0], [62.7, 400.0], [62.8, 401.0], [62.9, 401.0], [63.0, 401.0], [63.1, 402.0], [63.2, 402.0], [63.3, 402.0], [63.4, 403.0], [63.5, 403.0], [63.6, 403.0], [63.7, 404.0], [63.8, 404.0], [63.9, 404.0], [64.0, 404.0], [64.1, 405.0], [64.2, 405.0], [64.3, 405.0], [64.4, 406.0], [64.5, 406.0], [64.6, 406.0], [64.7, 406.0], [64.8, 406.0], [64.9, 407.0], [65.0, 407.0], [65.1, 407.0], [65.2, 407.0], [65.3, 408.0], [65.4, 408.0], [65.5, 408.0], [65.6, 408.0], [65.7, 408.0], [65.8, 409.0], [65.9, 409.0], [66.0, 409.0], [66.1, 409.0], [66.2, 409.0], [66.3, 410.0], [66.4, 410.0], [66.5, 410.0], [66.6, 410.0], [66.7, 410.0], [66.8, 411.0], [66.9, 411.0], [67.0, 411.0], [67.1, 412.0], [67.2, 412.0], [67.3, 412.0], [67.4, 413.0], [67.5, 413.0], [67.6, 413.0], [67.7, 413.0], [67.8, 414.0], [67.9, 414.0], [68.0, 414.0], [68.1, 414.0], [68.2, 415.0], [68.3, 415.0], [68.4, 415.0], [68.5, 415.0], [68.6, 415.0], [68.7, 415.0], [68.8, 416.0], [68.9, 416.0], [69.0, 416.0], [69.1, 416.0], [69.2, 416.0], [69.3, 416.0], [69.4, 417.0], [69.5, 417.0], [69.6, 417.0], [69.7, 417.0], [69.8, 417.0], [69.9, 417.0], [70.0, 417.0], [70.1, 418.0], [70.2, 418.0], [70.3, 418.0], [70.4, 418.0], [70.5, 418.0], [70.6, 419.0], [70.7, 419.0], [70.8, 419.0], [70.9, 419.0], [71.0, 419.0], [71.1, 420.0], [71.2, 420.0], [71.3, 420.0], [71.4, 420.0], [71.5, 421.0], [71.6, 421.0], [71.7, 421.0], [71.8, 422.0], [71.9, 422.0], [72.0, 423.0], [72.1, 423.0], [72.2, 424.0], [72.3, 425.0], [72.4, 425.0], [72.5, 426.0], [72.6, 427.0], [72.7, 428.0], [72.8, 429.0], [72.9, 429.0], [73.0, 430.0], [73.1, 430.0], [73.2, 431.0], [73.3, 432.0], [73.4, 432.0], [73.5, 433.0], [73.6, 434.0], [73.7, 435.0], [73.8, 436.0], [73.9, 436.0], [74.0, 437.0], [74.1, 437.0], [74.2, 438.0], [74.3, 439.0], [74.4, 439.0], [74.5, 440.0], [74.6, 441.0], [74.7, 442.0], [74.8, 443.0], [74.9, 443.0], [75.0, 444.0], [75.1, 445.0], [75.2, 446.0], [75.3, 446.0], [75.4, 447.0], [75.5, 448.0], [75.6, 449.0], [75.7, 454.0], [75.8, 460.0], [75.9, 462.0], [76.0, 463.0], [76.1, 464.0], [76.2, 468.0], [76.3, 469.0], [76.4, 472.0], [76.5, 474.0], [76.6, 479.0], [76.7, 484.0], [76.8, 486.0], [76.9, 487.0], [77.0, 490.0], [77.1, 492.0], [77.2, 493.0], [77.3, 493.0], [77.4, 494.0], [77.5, 495.0], [77.6, 496.0], [77.7, 500.0], [77.8, 502.0], [77.9, 506.0], [78.0, 509.0], [78.1, 512.0], [78.2, 515.0], [78.3, 517.0], [78.4, 518.0], [78.5, 520.0], [78.6, 522.0], [78.7, 524.0], [78.8, 526.0], [78.9, 535.0], [79.0, 537.0], [79.1, 539.0], [79.2, 545.0], [79.3, 550.0], [79.4, 552.0], [79.5, 554.0], [79.6, 556.0], [79.7, 557.0], [79.8, 557.0], [79.9, 558.0], [80.0, 559.0], [80.1, 562.0], [80.2, 563.0], [80.3, 563.0], [80.4, 564.0], [80.5, 564.0], [80.6, 565.0], [80.7, 566.0], [80.8, 567.0], [80.9, 570.0], [81.0, 571.0], [81.1, 574.0], [81.2, 591.0], [81.3, 608.0], [81.4, 609.0], [81.5, 610.0], [81.6, 612.0], [81.7, 618.0], [81.8, 621.0], [81.9, 622.0], [82.0, 623.0], [82.1, 626.0], [82.2, 630.0], [82.3, 653.0], [82.4, 656.0], [82.5, 663.0], [82.6, 669.0], [82.7, 671.0], [82.8, 672.0], [82.9, 680.0], [83.0, 702.0], [83.1, 708.0], [83.2, 710.0], [83.3, 712.0], [83.4, 713.0], [83.5, 714.0], [83.6, 715.0], [83.7, 715.0], [83.8, 718.0], [83.9, 723.0], [84.0, 751.0], [84.1, 753.0], [84.2, 755.0], [84.3, 758.0], [84.4, 762.0], [84.5, 766.0], [84.6, 768.0], [84.7, 771.0], [84.8, 775.0], [84.9, 787.0], [85.0, 792.0], [85.1, 794.0], [85.2, 798.0], [85.3, 809.0], [85.4, 810.0], [85.5, 811.0], [85.6, 812.0], [85.7, 814.0], [85.8, 815.0], [85.9, 823.0], [86.0, 853.0], [86.1, 862.0], [86.2, 864.0], [86.3, 865.0], [86.4, 866.0], [86.5, 867.0], [86.6, 868.0], [86.7, 870.0], [86.8, 878.0], [86.9, 888.0], [87.0, 892.0], [87.1, 894.0], [87.2, 903.0], [87.3, 916.0], [87.4, 917.0], [87.5, 919.0], [87.6, 961.0], [87.7, 991.0], [87.8, 1030.0], [87.9, 1039.0], [88.0, 1043.0], [88.1, 1055.0], [88.2, 1061.0], [88.3, 1064.0], [88.4, 1068.0], [88.5, 1072.0], [88.6, 1074.0], [88.7, 1133.0], [88.8, 1148.0], [88.9, 1174.0], [89.0, 1195.0], [89.1, 1201.0], [89.2, 1214.0], [89.3, 1246.0], [89.4, 1265.0], [89.5, 1267.0], [89.6, 1269.0], [89.7, 1276.0], [89.8, 1342.0], [89.9, 1367.0], [90.0, 1481.0], [90.1, 1642.0], [90.2, 1882.0], [90.3, 2177.0], [90.4, 2761.0], [90.5, 3227.0], [90.6, 3641.0], [90.7, 4077.0], [90.8, 4400.0], [90.9, 4827.0], [91.0, 5341.0], [91.1, 5840.0], [91.2, 6159.0], [91.3, 6858.0], [91.4, 7534.0], [91.5, 8399.0], [91.6, 8490.0], [91.7, 8513.0], [91.8, 8743.0], [91.9, 8825.0], [92.0, 8854.0], [92.1, 8888.0], [92.2, 8897.0], [92.3, 8938.0], [92.4, 9094.0], [92.5, 9109.0], [92.6, 9150.0], [92.7, 9508.0], [92.8, 9666.0], [92.9, 9860.0], [93.0, 9918.0], [93.1, 9997.0], [93.2, 10005.0], [93.3, 10254.0], [93.4, 10384.0], [93.5, 10536.0], [93.6, 10662.0], [93.7, 10693.0], [93.8, 10860.0], [93.9, 10914.0], [94.0, 10917.0], [94.1, 11030.0], [94.2, 11090.0], [94.3, 11152.0], [94.4, 11214.0], [94.5, 11270.0], [94.6, 11443.0], [94.7, 11460.0], [94.8, 11509.0], [94.9, 11542.0], [95.0, 11546.0], [95.1, 11822.0], [95.2, 12369.0], [95.3, 12891.0], [95.4, 13089.0], [95.5, 13387.0], [95.6, 13656.0], [95.7, 13784.0], [95.8, 13873.0], [95.9, 14284.0], [96.0, 14484.0], [96.1, 14764.0], [96.2, 15039.0], [96.3, 15126.0], [96.4, 15402.0], [96.5, 15584.0], [96.6, 15793.0], [96.7, 16013.0], [96.8, 16539.0], [96.9, 17363.0], [97.0, 19681.0], [97.1, 21654.0], [97.2, 24240.0], [97.3, 26853.0], [97.4, 29352.0], [97.5, 31927.0], [97.6, 32530.0], [97.7, 33821.0], [97.8, 37900.0], [97.9, 40695.0], [98.0, 45446.0], [98.1, 51694.0], [98.2, 60315.0], [98.3, 63673.0], [98.4, 65360.0], [98.5, 67316.0], [98.6, 73878.0], [98.7, 74031.0], [98.8, 85380.0], [98.9, 93563.0], [99.0, 100218.0], [99.1, 100256.0], [99.2, 100413.0], [99.3, 100447.0], [99.4, 111194.0], [99.5, 128636.0], [99.6, 129863.0], [99.7, 130524.0], [99.8, 131288.0], [99.9, 136479.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 46923.0, "series": [{"data": [[0.0, 46923.0], [132900.0, 4.0], [171300.0, 2.0], [177700.0, 3.0], [66700.0, 23.0], [73100.0, 13.0], [76300.0, 3.0], [79500.0, 2.0], [92300.0, 1.0], [95500.0, 12.0], [105100.0, 39.0], [130700.0, 52.0], [100.0, 31939.0], [32900.0, 20.0], [34500.0, 1.0], [36100.0, 2.0], [37700.0, 1.0], [39300.0, 5.0], [42500.0, 1.0], [44100.0, 2.0], [173100.0, 1.0], [45700.0, 2.0], [50500.0, 2.0], [200.0, 17285.0], [52100.0, 3.0], [53700.0, 3.0], [56900.0, 1.0], [55300.0, 1.0], [58500.0, 13.0], [60100.0, 5.0], [63300.0, 14.0], [65800.0, 4.0], [69000.0, 4.0], [300.0, 40827.0], [75400.0, 8.0], [88200.0, 1.0], [91400.0, 1.0], [400.0, 33679.0], [123400.0, 1.0], [500.0, 7877.0], [129800.0, 92.0], [132400.0, 52.0], [600.0, 3729.0], [158000.0, 1.0], [700.0, 4982.0], [183600.0, 1.0], [800.0, 4281.0], [900.0, 1158.0], [1000.0, 2144.0], [1100.0, 851.0], [1200.0, 1483.0], [1300.0, 475.0], [1400.0, 177.0], [1500.0, 87.0], [1600.0, 100.0], [1700.0, 29.0], [1800.0, 151.0], [1900.0, 45.0], [2000.0, 80.0], [2100.0, 92.0], [136500.0, 27.0], [2300.0, 52.0], [2200.0, 28.0], [2400.0, 42.0], [2500.0, 38.0], [2600.0, 43.0], [168500.0, 4.0], [2700.0, 19.0], [2800.0, 43.0], [2900.0, 91.0], [3000.0, 51.0], [3100.0, 17.0], [3200.0, 45.0], [3300.0, 32.0], [3400.0, 52.0], [3500.0, 68.0], [3700.0, 30.0], [3600.0, 58.0], [3800.0, 79.0], [3900.0, 45.0], [4000.0, 102.0], [68100.0, 1.0], [4200.0, 28.0], [4400.0, 24.0], [4600.0, 15.0], [4800.0, 59.0], [74500.0, 1.0], [5000.0, 44.0], [5200.0, 14.0], [84100.0, 1.0], [5600.0, 47.0], [5400.0, 9.0], [93700.0, 2.0], [5800.0, 84.0], [6000.0, 27.0], [6200.0, 14.0], [100100.0, 63.0], [6400.0, 35.0], [6600.0, 15.0], [103300.0, 1.0], [6800.0, 136.0], [7000.0, 52.0], [7400.0, 10.0], [7200.0, 17.0], [7600.0, 13.0], [7800.0, 88.0], [8000.0, 22.0], [128900.0, 63.0], [8400.0, 246.0], [8800.0, 806.0], [9200.0, 82.0], [140600.0, 2.0], [9600.0, 242.0], [10000.0, 134.0], [10400.0, 195.0], [11200.0, 387.0], [10800.0, 177.0], [11600.0, 59.0], [12000.0, 4.0], [12400.0, 1.0], [13200.0, 61.0], [12800.0, 162.0], [13600.0, 109.0], [14000.0, 3.0], [14800.0, 120.0], [14400.0, 106.0], [15200.0, 40.0], [15600.0, 151.0], [16000.0, 53.0], [16800.0, 27.0], [17600.0, 17.0], [18400.0, 1.0], [19200.0, 12.0], [20000.0, 84.0], [20800.0, 6.0], [21600.0, 18.0], [22400.0, 18.0], [23200.0, 38.0], [24000.0, 2.0], [24800.0, 65.0], [26400.0, 5.0], [28000.0, 1.0], [28800.0, 65.0], [29600.0, 2.0], [31200.0, 2.0], [32000.0, 18.0], [131900.0, 5.0], [33600.0, 6.0], [36800.0, 4.0], [35200.0, 5.0], [38400.0, 2.0], [40000.0, 1.0], [44800.0, 2.0], [43200.0, 1.0], [46400.0, 8.0], [183100.0, 1.0], [52800.0, 4.0], [56000.0, 1.0], [57600.0, 2.0], [60800.0, 2.0], [62400.0, 1.0], [64000.0, 2.0], [67200.0, 1.0], [70400.0, 5.0], [147200.0, 20.0], [164100.0, 1.0], [73500.0, 11.0], [76700.0, 2.0], [79900.0, 1.0], [89500.0, 2.0], [92700.0, 7.0], [105500.0, 1.0], [168200.0, 2.0], [174600.0, 1.0], [181000.0, 1.0], [33100.0, 1.0], [37900.0, 8.0], [39500.0, 8.0], [41100.0, 2.0], [42700.0, 5.0], [45900.0, 1.0], [185100.0, 1.0], [49100.0, 2.0], [50700.0, 5.0], [53900.0, 3.0], [55500.0, 3.0], [57100.0, 1.0], [58700.0, 1.0], [229900.0, 1.0], [60300.0, 40.0], [61900.0, 19.0], [65100.0, 3.0], [69400.0, 2.0], [66200.0, 19.0], [72600.0, 2.0], [79000.0, 4.0], [85400.0, 2.0], [98200.0, 1.0], [111000.0, 1.0], [130200.0, 21.0], [131600.0, 47.0], [170000.0, 1.0], [68500.0, 3.0], [81300.0, 2.0], [78100.0, 1.0], [87700.0, 2.0], [97300.0, 1.0], [100500.0, 3.0], [106900.0, 1.0], [113300.0, 1.0], [129300.0, 14.0], [159000.0, 1.0], [16900.0, 70.0], [17700.0, 21.0], [18500.0, 1.0], [19300.0, 1.0], [20100.0, 5.0], [20900.0, 13.0], [21700.0, 12.0], [22500.0, 3.0], [23300.0, 21.0], [24100.0, 9.0], [24900.0, 17.0], [25700.0, 2.0], [26500.0, 4.0], [27300.0, 1.0], [28100.0, 22.0], [28900.0, 2.0], [30500.0, 15.0], [31300.0, 12.0], [32100.0, 61.0], [131100.0, 2.0], [33800.0, 16.0], [35400.0, 5.0], [38600.0, 2.0], [40200.0, 1.0], [41800.0, 3.0], [43400.0, 1.0], [45000.0, 1.0], [48200.0, 3.0], [49800.0, 2.0], [53000.0, 7.0], [56200.0, 2.0], [57800.0, 5.0], [62600.0, 11.0], [67600.0, 4.0], [70800.0, 2.0], [74000.0, 27.0], [83600.0, 2.0], [86800.0, 1.0], [96400.0, 4.0], [99600.0, 12.0], [102800.0, 1.0], [125200.0, 1.0], [128400.0, 7.0], [134500.0, 2.0], [67500.0, 3.0], [73900.0, 193.0], [77100.0, 2.0], [80300.0, 2.0], [109100.0, 22.0], [112300.0, 1.0], [128300.0, 7.0], [132200.0, 1.0], [138600.0, 3.0], [228200.0, 2.0], [33300.0, 10.0], [36500.0, 1.0], [38100.0, 13.0], [161900.0, 2.0], [39700.0, 2.0], [42900.0, 12.0], [44500.0, 1.0], [46100.0, 1.0], [181100.0, 2.0], [47700.0, 1.0], [50900.0, 11.0], [52500.0, 1.0], [213100.0, 2.0], [58900.0, 2.0], [60500.0, 2.0], [65300.0, 80.0], [63700.0, 4.0], [66600.0, 22.0], [73000.0, 3.0], [82600.0, 4.0], [101800.0, 59.0], [105000.0, 1.0], [108200.0, 2.0], [130600.0, 16.0], [127400.0, 1.0], [134000.0, 1.0], [172400.0, 2.0], [138100.0, 9.0], [208500.0, 44.0], [68900.0, 1.0], [65700.0, 49.0], [72100.0, 4.0], [75300.0, 1.0], [81700.0, 2.0], [94500.0, 3.0], [110500.0, 2.0], [116900.0, 1.0], [129700.0, 9.0], [8500.0, 230.0], [8900.0, 256.0], [9700.0, 83.0], [9300.0, 18.0], [10100.0, 89.0], [161400.0, 4.0], [10500.0, 28.0], [10900.0, 406.0], [11300.0, 57.0], [11700.0, 16.0], [12100.0, 45.0], [12500.0, 37.0], [12900.0, 17.0], [13300.0, 79.0], [13700.0, 181.0], [14100.0, 53.0], [14500.0, 47.0], [14900.0, 18.0], [15300.0, 98.0], [15700.0, 54.0], [16100.0, 95.0], [17000.0, 5.0], [17800.0, 7.0], [18600.0, 37.0], [20200.0, 7.0], [21000.0, 5.0], [23400.0, 5.0], [24200.0, 27.0], [25000.0, 7.0], [25800.0, 31.0], [28200.0, 1.0], [29800.0, 4.0], [30600.0, 4.0], [31400.0, 4.0], [32200.0, 101.0], [133500.0, 11.0], [139900.0, 10.0], [38800.0, 16.0], [37200.0, 2.0], [40400.0, 2.0], [159100.0, 1.0], [45200.0, 1.0], [46800.0, 39.0], [50000.0, 6.0], [51600.0, 5.0], [54800.0, 3.0], [61200.0, 2.0], [68000.0, 1.0], [74400.0, 3.0], [77600.0, 4.0], [84000.0, 1.0], [87200.0, 1.0], [90400.0, 1.0], [100000.0, 11.0], [103200.0, 3.0], [128800.0, 41.0], [174400.0, 2.0], [77500.0, 20.0], [74300.0, 2.0], [80700.0, 1.0], [87100.0, 2.0], [90300.0, 3.0], [93500.0, 3.0], [99900.0, 1.0], [112700.0, 1.0], [128700.0, 9.0], [131400.0, 2.0], [33500.0, 1.0], [35100.0, 28.0], [38300.0, 8.0], [39900.0, 36.0], [44700.0, 4.0], [43100.0, 2.0], [46300.0, 2.0], [180300.0, 1.0], [49500.0, 3.0], [51100.0, 2.0], [52700.0, 1.0], [55900.0, 2.0], [57500.0, 2.0], [59100.0, 1.0], [60700.0, 2.0], [73400.0, 6.0], [79800.0, 1.0], [131000.0, 48.0], [137300.0, 4.0], [66100.0, 17.0], [69300.0, 5.0], [72500.0, 2.0], [75700.0, 2.0], [85300.0, 59.0], [91700.0, 3.0], [101300.0, 3.0], [104500.0, 1.0], [107700.0, 2.0], [130100.0, 16.0], [173400.0, 2.0], [17100.0, 6.0], [17900.0, 5.0], [18700.0, 41.0], [20300.0, 6.0], [19500.0, 2.0], [21100.0, 3.0], [21900.0, 5.0], [22700.0, 2.0], [23500.0, 1.0], [24300.0, 32.0], [25900.0, 12.0], [27500.0, 2.0], [26700.0, 5.0], [28300.0, 5.0], [30700.0, 3.0], [31500.0, 5.0], [35800.0, 5.0], [145500.0, 1.0], [158300.0, 1.0], [40600.0, 73.0], [42200.0, 3.0], [45400.0, 81.0], [47000.0, 2.0], [56600.0, 3.0], [58200.0, 3.0], [61400.0, 4.0], [64600.0, 18.0], [68400.0, 1.0], [100400.0, 321.0], [129200.0, 19.0], [132000.0, 9.0], [183200.0, 1.0], [215200.0, 1.0], [142500.0, 1.0], [155300.0, 2.0], [148900.0, 1.0], [68300.0, 2.0], [71500.0, 4.0], [81100.0, 1.0], [87500.0, 2.0], [90700.0, 2.0], [97100.0, 1.0], [100300.0, 35.0], [129100.0, 4.0], [146600.0, 1.0], [249000.0, 4.0], [35300.0, 4.0], [150700.0, 1.0], [40100.0, 1.0], [176300.0, 2.0], [43300.0, 11.0], [44900.0, 2.0], [46500.0, 6.0], [49700.0, 1.0], [52900.0, 1.0], [54500.0, 3.0], [56100.0, 1.0], [59300.0, 1.0], [62500.0, 5.0], [64100.0, 58.0], [67400.0, 2.0], [70600.0, 1.0], [73800.0, 65.0], [86600.0, 2.0], [102600.0, 3.0], [109000.0, 1.0], [128200.0, 3.0], [161200.0, 1.0], [4300.0, 61.0], [66500.0, 8.0], [4100.0, 62.0], [4500.0, 60.0], [4700.0, 92.0], [4900.0, 70.0], [5100.0, 48.0], [79300.0, 2.0], [5300.0, 27.0], [82500.0, 2.0], [85700.0, 3.0], [5500.0, 92.0], [5700.0, 41.0], [5900.0, 6.0], [6100.0, 144.0], [95300.0, 2.0], [6300.0, 64.0], [101700.0, 7.0], [6500.0, 17.0], [104900.0, 10.0], [6900.0, 30.0], [6700.0, 3.0], [7100.0, 11.0], [111300.0, 8.0], [7300.0, 4.0], [7500.0, 26.0], [7900.0, 16.0], [7700.0, 8.0], [8100.0, 15.0], [130500.0, 19.0], [127300.0, 1.0], [8200.0, 13.0], [8600.0, 34.0], [9000.0, 190.0], [9400.0, 51.0], [10200.0, 155.0], [9800.0, 96.0], [10600.0, 457.0], [11000.0, 537.0], [11400.0, 474.0], [12200.0, 65.0], [11800.0, 38.0], [12600.0, 6.0], [13000.0, 208.0], [13800.0, 259.0], [14200.0, 76.0], [14600.0, 61.0], [15000.0, 219.0], [15400.0, 224.0], [15800.0, 78.0], [16200.0, 3.0], [17200.0, 56.0], [16400.0, 27.0], [18000.0, 1.0], [18800.0, 27.0], [19600.0, 8.0], [20400.0, 5.0], [21200.0, 12.0], [22000.0, 6.0], [22800.0, 30.0], [23600.0, 2.0], [24400.0, 18.0], [26000.0, 1.0], [26800.0, 4.0], [28400.0, 40.0], [29200.0, 2.0], [30800.0, 40.0], [31600.0, 2.0], [32400.0, 7.0], [32800.0, 6.0], [135100.0, 1.0], [34400.0, 57.0], [39200.0, 1.0], [44000.0, 1.0], [179900.0, 2.0], [48800.0, 2.0], [47200.0, 15.0], [50400.0, 1.0], [52000.0, 8.0], [55200.0, 1.0], [53600.0, 2.0], [56800.0, 2.0], [58400.0, 2.0], [60000.0, 5.0], [63200.0, 77.0], [61600.0, 9.0], [64800.0, 1.0], [65600.0, 23.0], [81600.0, 2.0], [94400.0, 4.0], [129600.0, 7.0], [131200.0, 79.0], [212100.0, 1.0], [81500.0, 3.0], [94300.0, 2.0], [97500.0, 1.0], [100700.0, 22.0], [123100.0, 1.0], [129500.0, 5.0], [133000.0, 2.0], [165000.0, 1.0], [33900.0, 2.0], [35500.0, 28.0], [37100.0, 6.0], [156300.0, 1.0], [40300.0, 2.0], [41900.0, 1.0], [43500.0, 11.0], [175500.0, 2.0], [45100.0, 1.0], [48300.0, 3.0], [49900.0, 3.0], [53100.0, 2.0], [51500.0, 2.0], [54700.0, 4.0], [56300.0, 1.0], [61100.0, 1.0], [62700.0, 1.0], [64300.0, 2.0], [67800.0, 1.0], [74200.0, 17.0], [77400.0, 37.0], [80600.0, 1.0], [90200.0, 95.0], [93400.0, 2.0], [96600.0, 1.0], [99800.0, 2.0], [128600.0, 37.0], [179600.0, 1.0], [183700.0, 2.0], [196500.0, 1.0], [66900.0, 4.0], [70100.0, 7.0], [76500.0, 2.0], [82900.0, 2.0], [127700.0, 9.0], [130900.0, 22.0], [136600.0, 4.0], [16500.0, 49.0], [17300.0, 33.0], [18900.0, 29.0], [19700.0, 6.0], [20500.0, 23.0], [21300.0, 9.0], [22100.0, 6.0], [22900.0, 3.0], [23700.0, 2.0], [25300.0, 2.0], [26900.0, 6.0], [27700.0, 6.0], [28500.0, 7.0], [29300.0, 39.0], [30100.0, 3.0], [31700.0, 2.0], [30900.0, 10.0], [32500.0, 90.0], [134300.0, 1.0], [33000.0, 58.0], [36200.0, 2.0], [37800.0, 35.0], [45800.0, 4.0], [53800.0, 2.0], [55400.0, 1.0], [60200.0, 50.0], [63400.0, 1.0], [66000.0, 6.0], [69200.0, 1.0], [72400.0, 2.0], [75600.0, 2.0], [82000.0, 5.0], [101200.0, 2.0], [117200.0, 66.0], [126800.0, 4.0], [133600.0, 1.0], [140000.0, 1.0], [165600.0, 1.0], [184800.0, 2.0], [131300.0, 9.0], [182500.0, 1.0], [69100.0, 1.0], [65900.0, 3.0], [78700.0, 2.0], [88300.0, 5.0], [101100.0, 1.0], [117100.0, 1.0], [123500.0, 17.0], [129900.0, 2.0], [34100.0, 1.0], [35700.0, 1.0], [38900.0, 4.0], [42100.0, 3.0], [43700.0, 3.0], [45300.0, 3.0], [46900.0, 1.0], [48500.0, 5.0], [50100.0, 2.0], [51700.0, 1.0], [54900.0, 7.0], [59700.0, 3.0], [64500.0, 2.0], [71400.0, 2.0], [74600.0, 2.0], [81000.0, 2.0], [87400.0, 2.0], [100200.0, 403.0], [113000.0, 2.0], [129000.0, 2.0], [169200.0, 2.0], [182000.0, 1.0], [134900.0, 18.0], [186100.0, 1.0], [67300.0, 3.0], [70500.0, 3.0], [73700.0, 2.0], [76900.0, 1.0], [80100.0, 10.0], [89700.0, 3.0], [96100.0, 2.0], [99300.0, 2.0], [105700.0, 1.0], [8700.0, 275.0], [8300.0, 29.0], [132600.0, 10.0], [9100.0, 438.0], [145400.0, 3.0], [9500.0, 93.0], [9900.0, 500.0], [10700.0, 150.0], [10300.0, 162.0], [11100.0, 140.0], [11500.0, 633.0], [183800.0, 3.0], [11900.0, 10.0], [12700.0, 33.0], [12300.0, 86.0], [13100.0, 48.0], [13500.0, 148.0], [13900.0, 56.0], [14300.0, 131.0], [14700.0, 113.0], [15100.0, 94.0], [15500.0, 48.0], [15900.0, 96.0], [16300.0, 62.0], [16600.0, 3.0], [18200.0, 1.0], [19000.0, 1.0], [19800.0, 4.0], [20600.0, 12.0], [21400.0, 2.0], [22200.0, 11.0], [23000.0, 10.0], [25400.0, 1.0], [26200.0, 2.0], [27000.0, 1.0], [28600.0, 12.0], [27800.0, 5.0], [29400.0, 8.0], [30200.0, 2.0], [31000.0, 2.0], [31800.0, 20.0], [32600.0, 13.0], [34800.0, 7.0], [33200.0, 8.0], [39600.0, 32.0], [42800.0, 5.0], [44400.0, 6.0], [46000.0, 1.0], [181500.0, 1.0], [47600.0, 23.0], [49200.0, 1.0], [50800.0, 5.0], [52400.0, 3.0], [54000.0, 6.0], [57200.0, 2.0], [55600.0, 1.0], [62000.0, 8.0], [65200.0, 10.0], [63600.0, 42.0], [69600.0, 56.0], [72800.0, 1.0], [85600.0, 1.0], [82400.0, 1.0], [98400.0, 1.0], [130400.0, 7.0], [132800.0, 2.0], [171200.0, 1.0], [66300.0, 6.0], [88700.0, 4.0], [98300.0, 2.0], [111100.0, 2.0], [120700.0, 12.0], [130300.0, 87.0], [34300.0, 4.0], [132300.0, 3.0], [35900.0, 2.0], [151500.0, 1.0], [37500.0, 1.0], [40700.0, 33.0], [39100.0, 1.0], [42300.0, 1.0], [43900.0, 3.0], [45500.0, 4.0], [51900.0, 4.0], [55100.0, 2.0], [53500.0, 2.0], [58300.0, 2.0], [59900.0, 3.0], [61500.0, 8.0], [63100.0, 2.0], [64700.0, 17.0], [71800.0, 16.0], [75000.0, 1.0], [84600.0, 3.0], [94200.0, 1.0], [97400.0, 9.0], [100600.0, 1.0], [119800.0, 2.0], [129400.0, 22.0], [136400.0, 7.0], [174800.0, 1.0], [159700.0, 4.0], [67700.0, 3.0], [77300.0, 7.0], [74100.0, 2.0], [90100.0, 20.0], [106100.0, 2.0], [112500.0, 1.0], [128500.0, 21.0], [170200.0, 2.0], [208600.0, 1.0], [16700.0, 2.0], [18300.0, 2.0], [20700.0, 1.0], [21500.0, 3.0], [22300.0, 8.0], [23100.0, 4.0], [24700.0, 3.0], [27900.0, 3.0], [28700.0, 14.0], [30300.0, 3.0], [31900.0, 85.0], [32700.0, 2.0], [35000.0, 8.0], [39800.0, 34.0], [44600.0, 27.0], [46200.0, 1.0], [47800.0, 1.0], [51000.0, 2.0], [55800.0, 2.0], [57400.0, 5.0], [59000.0, 1.0], [60600.0, 1.0], [63800.0, 35.0], [66800.0, 5.0], [73200.0, 1.0], [76400.0, 1.0], [79600.0, 4.0], [89200.0, 1.0], [92400.0, 1.0], [95600.0, 1.0], [98800.0, 2.0], [130800.0, 27.0], [127600.0, 20.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 249000.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 659.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 170712.0, "series": [{"data": [[0.0, 170712.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 27098.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 21226.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 659.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 102.29064039408864, "minX": 1.68287766E12, "maxY": 3000.0, "series": [{"data": [[1.68287772E12, 3000.0], [1.6828779E12, 3000.0], [1.68287784E12, 3000.0], [1.68287802E12, 102.29064039408864], [1.68287796E12, 2866.999928083412], [1.68287766E12, 3000.0], [1.68287778E12, 3000.0]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68287802E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 345.0, "minX": 1.0, "maxY": 249001.5, "series": [{"data": [[3.0, 88309.0], [4.0, 228206.0], [6.0, 164713.5], [7.0, 100427.0], [9.0, 45526.0], [10.0, 45455.0], [11.0, 49152.0], [12.0, 140072.0], [14.0, 78766.0], [16.0, 78786.0], [17.0, 80142.0], [18.0, 80140.0], [19.0, 80140.0], [20.0, 80137.0], [22.0, 80136.0], [24.0, 80134.0], [25.0, 77161.0], [26.0, 76991.0], [27.0, 46953.0], [29.0, 64710.0], [31.0, 46494.0], [33.0, 64710.0], [32.0, 66214.5], [35.0, 64708.0], [34.0, 66652.0], [37.0, 64707.0], [36.0, 66650.0], [39.0, 65677.5], [40.0, 46489.0], [42.0, 67039.0], [44.0, 65674.0], [47.0, 64701.0], [46.0, 65673.5], [49.0, 66637.0], [48.0, 64701.0], [51.0, 66632.0], [50.0, 66633.0], [53.0, 66628.5], [55.0, 66625.0], [54.0, 66625.0], [57.0, 66618.0], [56.0, 66620.0], [59.0, 66618.0], [58.0, 66619.0], [61.0, 66614.0], [60.0, 66616.0], [63.0, 66118.0], [67.0, 66117.0], [66.0, 66115.0], [65.0, 66118.0], [64.0, 66117.0], [71.0, 66108.0], [70.0, 66110.0], [69.0, 66115.0], [68.0, 66116.0], [75.0, 65907.0], [73.0, 66108.0], [72.0, 66107.0], [79.0, 65727.0], [78.0, 81774.0], [77.0, 66795.0], [76.0, 65905.0], [83.0, 65727.0], [81.0, 65727.0], [87.0, 66343.5], [85.0, 65726.0], [84.0, 65726.0], [91.0, 66258.0], [89.0, 65725.0], [95.0, 66256.5], [93.0, 66257.0], [98.0, 73746.5], [96.0, 65724.0], [103.0, 65722.0], [102.0, 65722.0], [100.0, 65722.5], [107.0, 65720.5], [106.0, 65720.5], [110.0, 65720.0], [115.0, 65718.5], [113.0, 66784.0], [112.0, 67534.5], [117.0, 68066.0], [121.0, 65716.0], [120.0, 66627.33333333333], [127.0, 65716.0], [126.0, 69346.0], [124.0, 66073.0], [135.0, 65709.0], [134.0, 66774.0], [133.0, 65711.5], [131.0, 66781.0], [130.0, 65713.0], [129.0, 65713.0], [128.0, 65715.5], [142.0, 66766.0], [141.0, 65701.0], [140.0, 66770.0], [139.0, 65705.0], [138.0, 65708.0], [137.0, 65707.0], [136.0, 65708.0], [151.0, 65689.0], [150.0, 66759.0], [149.0, 65696.0], [147.0, 65697.0], [146.0, 65697.0], [145.0, 65697.0], [144.0, 65699.5], [159.0, 65660.0], [158.0, 65663.0], [157.0, 65664.0], [156.0, 66900.0], [155.0, 65671.0], [154.0, 66739.0], [153.0, 65680.0], [152.0, 65685.0], [167.0, 69278.0], [166.0, 65649.0], [165.0, 66718.0], [164.0, 81697.0], [163.0, 73674.5], [161.0, 65653.0], [160.0, 65657.0], [175.0, 65838.0], [174.0, 65627.0], [173.0, 66697.0], [172.0, 66164.0], [170.0, 66699.0], [169.0, 66701.0], [168.0, 65650.0], [183.0, 29636.0], [182.0, 64698.0], [181.0, 64698.0], [180.0, 64696.5], [178.0, 66829.0], [177.0, 65165.0], [176.0, 65671.0], [191.0, 64691.0], [190.0, 64694.0], [189.0, 64692.0], [188.0, 64778.0], [186.0, 65526.5], [184.0, 66359.0], [199.0, 64671.5], [198.0, 64673.0], [195.0, 64678.0], [194.0, 64687.0], [193.0, 64688.0], [192.0, 64691.0], [207.0, 66273.0], [206.0, 65847.0], [204.0, 69032.0], [203.0, 27875.0], [201.0, 28889.0], [200.0, 28895.0], [215.0, 66255.0], [214.0, 97730.0], [212.0, 69018.0], [211.0, 66256.0], [210.0, 66259.0], [209.0, 66260.0], [208.0, 66260.0], [223.0, 66249.0], [222.0, 66294.0], [221.0, 66251.0], [220.0, 66256.0], [219.0, 66253.0], [218.0, 69015.0], [217.0, 66254.0], [216.0, 65833.0], [231.0, 66098.0], [230.0, 66102.0], [229.0, 66146.0], [228.0, 66233.0], [227.0, 66239.0], [226.0, 69004.0], [225.0, 66247.0], [224.0, 66245.0], [239.0, 65368.5], [237.0, 65368.0], [235.0, 65369.0], [234.0, 65369.5], [232.0, 65370.0], [247.0, 65365.0], [246.0, 65366.0], [244.0, 65366.0], [242.0, 65367.0], [240.0, 65368.0], [254.0, 65363.0], [252.0, 65364.0], [251.0, 65365.0], [249.0, 65365.0], [270.0, 65355.0], [271.0, 65353.0], [269.0, 65355.0], [259.0, 65362.0], [258.0, 65362.0], [257.0, 65364.0], [256.0, 65364.0], [267.0, 65357.0], [266.0, 65358.0], [265.0, 65358.0], [264.0, 65360.0], [263.0, 65360.0], [262.0, 65359.0], [261.0, 65360.0], [260.0, 65361.0], [286.0, 65338.0], [287.0, 65338.0], [285.0, 65338.0], [275.0, 65350.0], [273.0, 65351.0], [272.0, 65352.0], [283.0, 65340.0], [282.0, 65341.0], [281.0, 65343.0], [280.0, 65344.0], [279.0, 65343.0], [278.0, 65346.0], [277.0, 65347.0], [276.0, 65349.0], [302.0, 65311.0], [303.0, 65312.0], [301.0, 65313.0], [300.0, 65316.5], [298.0, 65318.0], [297.0, 65318.0], [296.0, 65329.0], [295.0, 65329.0], [290.0, 65334.5], [288.0, 65336.0], [294.0, 65330.0], [293.0, 65331.0], [292.0, 65334.5], [318.0, 65281.0], [319.0, 64760.0], [317.0, 65283.0], [316.0, 65283.0], [315.0, 65288.0], [314.0, 65289.0], [312.0, 65291.0], [311.0, 65295.0], [305.0, 65309.5], [307.0, 65306.0], [306.0, 65351.0], [310.0, 65295.0], [309.0, 65300.0], [308.0, 65305.0], [334.0, 64134.0], [335.0, 64128.0], [333.0, 64140.0], [332.0, 64142.0], [331.0, 64143.0], [330.0, 64143.0], [328.0, 64143.0], [327.0, 64144.0], [323.0, 64145.0], [322.0, 64145.0], [321.0, 64146.0], [320.0, 64146.0], [325.0, 64144.5], [351.0, 141945.5], [349.0, 249001.5], [347.0, 50915.0], [346.0, 50920.6], [341.0, 50921.5], [337.0, 64124.0], [336.0, 64126.0], [364.0, 23136.5], [366.0, 11404.0], [367.0, 16444.0], [365.0, 11391.0], [362.0, 34883.0], [361.0, 45410.0], [359.0, 11397.0], [355.0, 11399.5], [353.0, 141944.0], [358.0, 11398.0], [356.0, 11413.0], [382.0, 16431.0], [383.0, 16431.0], [381.0, 16431.0], [370.0, 16438.0], [369.0, 16443.0], [379.0, 16433.0], [377.0, 16434.5], [375.0, 16435.0], [374.0, 16434.0], [373.0, 16434.0], [372.0, 16435.5], [398.0, 15542.0], [399.0, 10304.0], [397.0, 10510.5], [387.0, 16425.0], [386.0, 16427.0], [385.0, 16429.0], [384.0, 16429.0], [395.0, 16394.0], [394.0, 16395.0], [393.0, 16404.0], [392.0, 16406.0], [391.0, 16407.0], [390.0, 16414.0], [389.0, 16417.0], [388.0, 16419.0], [413.0, 10917.0], [415.0, 13172.0], [412.0, 15538.0], [411.0, 10807.0], [410.0, 10920.0], [409.0, 12817.5], [407.0, 10740.333333333334], [404.0, 15539.5], [402.0, 15540.0], [401.0, 10920.5], [429.0, 15530.0], [430.0, 15530.0], [428.0, 10913.0], [419.0, 10089.0], [418.0, 10805.0], [417.0, 10805.5], [427.0, 15531.0], [426.0, 10089.0], [425.0, 10802.0], [424.0, 10501.5], [422.0, 10803.0], [421.0, 10913.0], [420.0, 10914.0], [434.0, 10908.0], [445.0, 15521.0], [446.0, 10896.0], [444.0, 10900.0], [433.0, 10908.0], [432.0, 10797.0], [443.0, 10900.0], [442.0, 12022.0], [439.0, 10906.0], [438.0, 10792.0], [437.0, 15525.0], [436.0, 10499.5], [461.0, 15502.0], [463.0, 13193.0], [460.0, 10062.0], [450.0, 10785.0], [449.0, 10784.0], [448.0, 10785.0], [459.0, 10415.5], [457.0, 10886.0], [456.0, 10419.0], [454.0, 10062.0], [453.0, 10068.0], [452.0, 10838.5], [466.0, 10066.0], [477.0, 10876.0], [479.0, 12967.0], [476.0, 29979.5], [474.0, 10878.0], [473.0, 12775.5], [471.0, 12975.5], [470.0, 15499.0], [469.0, 13189.5], [465.0, 10064.0], [464.0, 10882.0], [494.0, 9966.0], [495.0, 15413.0], [493.0, 10197.0], [483.0, 10851.5], [481.0, 15471.0], [480.0, 10853.0], [491.0, 10723.0], [490.0, 10836.0], [489.0, 10056.5], [488.0, 10421.0], [486.0, 9207.0], [485.0, 10637.5], [509.0, 34841.0], [507.0, 96635.0], [506.0, 52067.0], [504.0, 8322.0], [503.0, 54062.0], [496.0, 9969.0], [502.0, 54062.0], [501.0, 40260.5], [499.0, 40373.0], [498.0, 42474.5], [540.0, 9957.0], [543.0, 24844.666666666664], [539.0, 41381.333333333336], [538.0, 40367.0], [535.0, 27034.0], [532.0, 9531.0], [531.0, 9332.5], [529.0, 24468.666666666668], [527.0, 9532.0], [512.0, 24405.333333333332], [514.0, 9135.0], [513.0, 8319.0], [516.0, 9534.0], [515.0, 9134.0], [519.0, 25923.5], [518.0, 8318.0], [525.0, 33845.333333333336], [522.0, 43544.0], [521.0, 9334.5], [572.0, 61607.0], [575.0, 62619.0], [571.0, 26446.0], [569.0, 35465.0], [567.0, 58423.0], [564.0, 47796.0], [563.0, 9953.0], [561.0, 32946.0], [559.0, 60873.0], [546.0, 49204.5], [544.0, 8313.0], [551.0, 9432.5], [549.0, 93707.0], [557.0, 62624.0], [556.0, 9526.0], [555.0, 51679.0], [554.0, 43373.0], [606.0, 43520.0], [607.0, 52083.0], [593.0, 62109.0], [596.0, 47727.5], [594.0, 9119.0], [605.0, 61593.0], [604.0, 9113.0], [603.0, 96405.0], [601.0, 8298.0], [600.0, 62611.0], [582.0, 34220.0], [580.0, 8818.5], [578.0, 50650.666666666664], [576.0, 48511.5], [591.0, 43532.0], [589.0, 30585.5], [587.0, 54872.0], [586.0, 30807.5], [584.0, 9320.0], [599.0, 40811.5], [597.0, 9829.0], [632.0, 9915.0], [636.0, 9796.0], [639.0, 61561.0], [625.0, 9099.0], [624.0, 43343.0], [629.0, 26316.333333333332], [626.0, 54785.0], [638.0, 61564.0], [637.0, 9480.0], [635.0, 39298.0], [634.0, 55471.0], [633.0, 8270.0], [623.0, 42281.0], [608.0, 62604.0], [610.0, 36521.0], [609.0, 54794.0], [612.0, 62604.0], [611.0, 43518.0], [614.0, 43517.0], [613.0, 9821.0], [622.0, 41325.0], [620.0, 26637.5], [618.0, 43348.0], [617.0, 8288.0], [616.0, 26510.0], [631.0, 54002.0], [630.0, 43339.0], [669.0, 61440.0], [659.0, 62468.0], [671.0, 41709.0], [656.0, 62511.0], [658.0, 60020.0], [657.0, 60021.0], [668.0, 32359.0], [666.0, 31431.5], [665.0, 51942.0], [646.0, 15025.5], [644.0, 9074.0], [643.0, 44982.0], [642.0, 52003.0], [641.0, 9476.0], [640.0, 9477.0], [655.0, 61518.0], [654.0, 9441.0], [653.0, 60063.0], [652.0, 42237.0], [651.0, 174833.0], [650.0, 56619.0], [649.0, 9460.0], [648.0, 27434.0], [663.0, 61453.0], [662.0, 43382.0], [661.0, 42768.0], [699.0, 394.0], [703.0, 394.5], [698.0, 355.0], [697.0, 375.0], [695.0, 387.2], [691.0, 355.0], [690.0, 394.0], [689.0, 384.75], [687.0, 357.0], [673.0, 57665.5], [675.0, 53056.0], [674.0, 55544.0], [685.0, 396.0], [681.0, 377.8333333333333], [722.0, 397.0], [735.0, 29581.2], [733.0, 35572.0], [730.0, 35571.0], [729.0, 35572.0], [714.0, 35573.0], [705.0, 403.0], [704.0, 367.0], [709.0, 352.5], [706.0, 403.0], [711.0, 356.0], [710.0, 352.0], [713.0, 35574.0], [712.0, 359.0], [727.0, 401.6], [726.0, 410.0], [724.0, 9198.0], [721.0, 398.5], [763.0, 392.3333333333333], [767.0, 396.0], [766.0, 397.6666666666667], [765.0, 400.125], [762.0, 393.0], [744.0, 25586.0], [741.0, 345.0], [740.0, 345.5], [738.0, 25587.333333333332], [795.0, 377.0], [797.0, 377.0], [798.0, 376.0], [796.0, 377.0], [794.0, 375.5], [773.0, 394.5], [772.0, 397.8], [770.0, 404.0], [769.0, 399.0], [790.0, 13161.25], [786.0, 20545.5], [782.0, 25583.0], [779.0, 407.0], [778.0, 407.0], [776.0, 394.6666666666667], [827.0, 27260.0], [820.0, 3483.0], [818.0, 20575.5], [816.0, 35550.0], [815.0, 5766.0], [802.0, 376.0], [801.0, 375.0], [805.0, 375.5], [803.0, 375.3333333333333], [812.0, 25576.0], [811.0, 35558.0], [808.0, 35558.0], [807.0, 387.0], [806.0, 376.0], [923.0, 1083.0], [922.0, 1083.5], [918.0, 1087.5], [916.0, 1087.0], [911.0, 1087.0], [910.0, 1665.857142857143], [909.0, 1087.0], [902.0, 1088.0], [907.0, 1087.0], [947.0, 2567.0], [959.0, 1078.3333333333335], [958.0, 1716.2857142857142], [957.0, 1078.0], [956.0, 2252.5], [942.0, 1078.0], [929.0, 35491.0], [932.0, 2537.0], [930.0, 35491.0], [935.0, 1079.0], [933.0, 1079.0], [940.0, 1078.0], [937.0, 1079.0], [936.0, 2606.166666666667], [951.0, 1078.5], [949.0, 5937.875], [948.0, 5776.0], [946.0, 1078.0], [944.0, 1078.0], [991.0, 6213.272727272726], [990.0, 1074.111111111111], [989.0, 1075.142857142857], [987.0, 1076.0], [963.0, 1079.0], [962.0, 1078.0], [961.0, 1078.5], [960.0, 1078.0], [1009.0, 1072.0], [1022.0, 1069.0], [1023.0, 1069.0], [1008.0, 1071.75], [1021.0, 1071.25], [1020.0, 1070.0], [1016.0, 1070.6666666666667], [996.0, 1073.0], [992.0, 2246.75], [1007.0, 1071.0], [1005.0, 1071.6666666666667], [1002.0, 1071.5], [1001.0, 1072.0], [1000.0, 2010.8], [1015.0, 1070.0], [1013.0, 1072.0], [1011.0, 1070.0], [1034.0, 1069.0], [1076.0, 1067.0], [1084.0, 1066.0], [1054.0, 1068.0], [1028.0, 1069.0], [1032.0, 5534.0], [1036.0, 1069.0], [1038.0, 1069.0], [1044.0, 1068.0], [1040.0, 1068.4615384615386], [1064.0, 1067.5], [1062.0, 1067.0], [1142.0, 1056.0], [1144.0, 1055.0], [1134.0, 11555.199999999999], [1148.0, 1055.2], [1140.0, 1056.0], [1136.0, 1058.5], [1116.0, 1062.0], [1088.0, 1066.0], [1094.0, 1064.0], [1092.0, 1064.25], [1098.0, 1063.0], [1114.0, 1063.0], [1112.0, 1063.0], [1108.0, 1063.0], [1104.0, 1064.0], [1156.0, 1055.0], [1188.0, 1052.0], [1166.0, 1054.0], [1162.0, 1055.0], [1178.0, 1053.0], [1176.0, 1053.0], [1170.0, 1054.0], [1168.0, 2227.25], [1580.0, 989.3650793650795], [1592.0, 1381.5], [1582.0, 1213.3636363636365], [1590.0, 1382.0], [1588.0, 1374.0909090909092], [1586.0, 1373.181818181818], [1584.0, 1309.5238095238096], [1720.0, 1473.5879120879117], [1718.0, 1370.0000000000002], [1716.0, 1291.3333333333333], [1764.0, 1172.7142857142858], [1770.0, 1350.0], [1776.0, 1349.5833333333333], [1758.0, 955.5714285714286], [1756.0, 956.2857142857142], [1754.0, 957.0], [1772.0, 1349.0], [1768.0, 1334.5], [1762.0, 956.0], [1760.0, 956.0], [1800.0, 1342.0], [1798.0, 1343.0], [1794.0, 1343.0], [1914.0, 1273.3333333333333], [1918.0, 1286.5], [1888.0, 1274.0], [1898.0, 1273.0], [1916.0, 1287.0], [1912.0, 1271.0], [1910.0, 1272.0], [1906.0, 1271.0], [1904.0, 1271.4], [1884.0, 1273.3333333333333], [1880.0, 1276.0], [1876.0, 905.0], [1902.0, 1272.0], [1922.0, 1284.0], [1946.0, 1284.0], [1954.0, 5244.142857142858], [1928.0, 1286.0], [1924.0, 1285.6666666666667], [1948.0, 1284.0], [1944.0, 1285.0], [1940.0, 1285.0], [1938.0, 1284.6666666666665], [2068.0, 1257.3333333333333], [2056.0, 878.0], [2060.0, 879.0], [2072.0, 1258.5333333333333], [2076.0, 1258.6111111111113], [2084.0, 1273.0], [2308.0, 852.0], [2312.0, 853.0], [2304.0, 852.0], [2320.0, 1232.0], [2324.0, 1231.2857142857144], [2336.0, 1245.2727272727273], [2328.0, 1238.0], [2624.0, 1214.0], [2680.0, 1201.5], [2632.0, 1068.1612903225807], [2636.0, 1197.3333333333333], [2644.0, 1202.8513513513515], [2652.0, 4075.75], [2656.0, 7749.333333333334], [2580.0, 1204.75], [2576.0, 1205.5], [2568.0, 1206.0], [2564.0, 1207.0], [2560.0, 827.0], [2616.0, 1215.2], [2612.0, 1216.5], [2748.0, 1135.2727272727273], [2692.0, 1199.0], [2688.0, 1201.0], [2756.0, 1132.0], [2744.0, 1146.0], [2740.0, 1152.0], [2736.0, 1146.0], [2732.0, 1145.6666666666667], [2720.0, 1087.6666666666667], [2928.0, 1134.0], [2936.0, 1134.0], [2880.0, 1160.5], [2932.0, 1134.0], [2924.0, 1135.5], [2916.0, 1136.5], [2844.0, 1145.5], [2840.0, 1145.7777777777776], [2832.0, 1142.5833333333333], [2824.0, 973.0], [2876.0, 1161.0], [2864.0, 1159.0], [2856.0, 1153.8181818181818], [3000.0, 3101.0293239018897], [2992.0, 1147.6666666666667], [2944.0, 754.0], [2948.0, 1134.0], [2952.0, 1133.0], [2956.0, 1133.0], [2968.0, 1132.5], [2988.0, 1148.0], [2980.0, 1147.6666666666667], [2057.0, 878.0], [2053.0, 878.0], [2061.0, 879.0], [2065.0, 878.25], [2073.0, 1259.0], [2085.0, 1273.0], [2077.0, 1258.0], [2317.0, 956.0], [2309.0, 852.0], [2321.0, 1230.0], [2341.0, 1245.0], [2313.0, 852.3333333333334], [2325.0, 1231.1666666666667], [2337.0, 2404.142857142857], [2333.0, 1242.8], [2329.0, 1233.142857142857], [2557.0, 827.0], [2549.0, 829.0], [2545.0, 829.0], [2633.0, 987.0], [2625.0, 1092.8076923076926], [2637.0, 1201.2499999999998], [2645.0, 1194.0], [2649.0, 1208.3333333333333], [2653.0, 1195.0], [2685.0, 1200.6666666666665], [2669.0, 1202.0], [2657.0, 3229.5], [2585.0, 1211.25], [2577.0, 1206.0], [2569.0, 1206.0], [2621.0, 1215.0], [2617.0, 1215.0], [2717.0, 1088.6666666666667], [2745.0, 1147.0], [2805.0, 1136.0], [2697.0, 8872.0], [2689.0, 1201.0], [2753.0, 1156.142857142857], [2729.0, 1145.5], [2725.0, 973.0], [2833.0, 1145.25], [2881.0, 1160.0], [2905.0, 1142.0], [2837.0, 1145.3333333333333], [2829.0, 1081.8181818181818], [2825.0, 973.0], [2821.0, 869.5], [2877.0, 1150.75], [2873.0, 1160.0], [2869.0, 1151.6666666666667], [2857.0, 1160.0], [2945.0, 1140.0], [2953.0, 1132.0], [2961.0, 1132.0], [2949.0, 1134.0], [2957.0, 1132.5], [2993.0, 1147.0], [2989.0, 1148.0], [2985.0, 1147.5], [2981.0, 1147.75], [2977.0, 1148.0], [1031.0, 1068.0], [1063.0, 1067.3333333333333], [1085.0, 1065.4], [1083.0, 1653.75], [1025.0, 2185.75], [1027.0, 1069.6666666666667], [1029.0, 1068.0], [1035.0, 1068.0], [1037.0, 1068.0], [1045.0, 1068.0], [1071.0, 1067.0], [1065.0, 1067.0], [1059.0, 1068.25], [1143.0, 1057.0], [1139.0, 1056.0], [1151.0, 1056.0], [1127.0, 1060.0], [1135.0, 1058.0], [1149.0, 1055.5], [1137.0, 1059.0], [1091.0, 1064.1111111111113], [1089.0, 1065.0], [1097.0, 1063.0], [1095.0, 1063.4285714285716], [1099.0, 1063.0], [1103.0, 1063.3333333333333], [1101.0, 1063.0], [1115.0, 1062.0], [1111.0, 1063.0], [1109.0, 1063.0], [1107.0, 1062.5], [1105.0, 1063.6], [1161.0, 1055.0], [1181.0, 1052.3333333333333], [1187.0, 1052.4444444444443], [1185.0, 1052.0], [1165.0, 1054.0], [1159.0, 1055.0], [1155.0, 1055.0], [1175.0, 1053.0], [1173.0, 1053.0], [1595.0, 1380.75], [1599.0, 1380.6], [1579.0, 986.0], [1581.0, 1324.5], [1583.0, 1308.5], [1593.0, 1959.9999999999998], [1591.0, 1372.2], [1589.0, 3016.714285714286], [1587.0, 2238.4], [1585.0, 1349.0277777777776], [1603.0, 4492.900000000001], [1719.0, 1003.3333333333335], [1717.0, 962.0], [1715.0, 1280.5], [1713.0, 1171.0], [1767.0, 1334.3333333333333], [1789.0, 1343.3076923076926], [1759.0, 956.0], [1757.0, 955.8461538461539], [1755.0, 957.0], [1773.0, 1349.6666666666665], [1771.0, 1351.0], [1769.0, 1339.3], [1765.0, 1334.0], [1811.0, 5788.0], [1807.0, 1342.0], [1805.0, 1342.0], [1801.0, 1341.0], [1797.0, 1343.0], [1793.0, 1342.5], [1889.0, 1272.7500000000002], [1891.0, 1273.0], [1915.0, 1275.0], [1887.0, 1272.0], [1881.0, 912.7297297297296], [1899.0, 1272.5], [1927.0, 1285.75], [1935.0, 1284.5], [1933.0, 1284.0], [1931.0, 1285.3333333333333], [1925.0, 1286.0], [1947.0, 1284.0], [1945.0, 1284.0], [1943.0, 1285.0], [1941.0, 1285.0], [1939.0, 1285.0], [2062.0, 879.0], [2054.0, 878.0], [2066.0, 878.0], [2070.0, 1258.5], [2074.0, 1258.25], [2090.0, 1273.6666666666667], [2086.0, 1272.5], [2310.0, 852.6666666666666], [2314.0, 852.0], [2318.0, 1058.0], [2326.0, 1231.909090909091], [2338.0, 1245.0], [2330.0, 1229.5], [2558.0, 827.0], [2554.0, 828.0], [2550.0, 829.0], [2638.0, 1202.6666666666667], [2686.0, 1200.0], [2626.0, 1214.6666666666667], [2634.0, 1214.0], [2642.0, 1189.5319148936169], [2646.0, 1207.2], [2650.0, 1199.4285714285716], [2654.0, 1194.75], [2674.0, 1201.0], [2670.0, 1202.5], [2666.0, 1204.25], [2662.0, 1208.8], [2658.0, 1210.0], [2586.0, 1219.888888888889], [2582.0, 1204.0], [2570.0, 1206.3333333333333], [2562.0, 1017.0], [2614.0, 1216.0], [2694.0, 1200.0], [2814.0, 1133.0], [2710.0, 1096.3333333333333], [2698.0, 9305.0], [2754.0, 1534.45], [2726.0, 1076.4], [2922.0, 1136.0], [2846.0, 1139.0], [2882.0, 1160.5], [2886.0, 6901.0], [2906.0, 1148.0], [2942.0, 754.0], [2838.0, 1146.0], [2834.0, 1145.0], [2830.0, 1144.0], [2826.0, 973.0], [2822.0, 904.3333333333334], [2878.0, 1148.0], [2870.0, 1161.0], [2866.0, 1160.3333333333335], [2950.0, 1132.3333333333333], [2946.0, 1133.6666666666665], [2954.0, 1133.0], [2962.0, 1134.0], [2966.0, 1132.0], [2974.0, 1148.0], [2994.0, 1147.1333333333334], [2990.0, 1148.0], [2978.0, 1148.0], [2091.0, 1273.2222222222222], [2095.0, 5411.5], [2059.0, 878.5], [2067.0, 987.8181818181818], [2083.0, 1273.0], [2079.0, 1261.3157894736842], [2343.0, 2682.2727272727275], [2307.0, 852.0], [2315.0, 852.0], [2319.0, 1230.0], [2339.0, 1245.1666666666667], [2555.0, 828.0], [2559.0, 827.0], [2551.0, 828.0], [2547.0, 829.0], [2627.0, 1214.3333333333333], [2679.0, 1202.0], [2635.0, 1402.3043478260872], [2639.0, 1204.5], [2647.0, 1202.625], [2651.0, 12719.0], [2655.0, 3118.5], [2675.0, 1201.0], [2667.0, 1202.5], [2659.0, 1209.0], [2587.0, 1220.0], [2567.0, 1205.0], [2563.0, 1206.5], [2619.0, 1215.0], [2695.0, 1200.0], [2715.0, 1145.3333333333335], [2815.0, 943.0], [2711.0, 1141.2222222222222], [2691.0, 1200.5], [2755.0, 1160.25], [2747.0, 1160.0], [2743.0, 12670.0], [2735.0, 1146.0], [2731.0, 1145.3333333333333], [2727.0, 1147.0], [2931.0, 1135.0], [2919.0, 1135.4], [2943.0, 754.0], [2883.0, 12668.0], [2887.0, 1635.3125], [2907.0, 1101.4761904761904], [2939.0, 1132.0], [2839.0, 1146.0], [2835.0, 1146.0], [2827.0, 1053.5], [2879.0, 1160.0], [2875.0, 1160.6666666666667], [2871.0, 1160.0], [2867.0, 1160.5], [2863.0, 1160.0], [2859.0, 1154.0], [2851.0, 1145.0], [2951.0, 1132.5], [2967.0, 1133.0], [2971.0, 1132.6], [2975.0, 1134.0], [1.0, 100014.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[2980.486624638695, 3228.4047156284773]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 3000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 1705.2, "minX": 1.68287766E12, "maxY": 592194.9833333333, "series": [{"data": [[1.68287772E12, 477486.98333333334], [1.6828779E12, 514408.7], [1.68287784E12, 586416.65], [1.68287802E12, 2139.15], [1.68287796E12, 332292.01666666666], [1.68287766E12, 138173.88333333333], [1.68287778E12, 592194.9833333333]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.68287772E12, 333732.0], [1.6828779E12, 357134.4], [1.68287784E12, 406753.2], [1.68287802E12, 1705.2], [1.68287796E12, 233595.6], [1.68287766E12, 97070.4], [1.68287778E12, 409911.6]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68287802E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 967.1381966078226, "minX": 1.68287766E12, "maxY": 68278.18226600983, "series": [{"data": [[1.68287772E12, 3022.9521464995178], [1.6828779E12, 3914.990256926719], [1.68287784E12, 3359.5848889620543], [1.68287802E12, 68278.18226600983], [1.68287796E12, 2241.12740021574], [1.68287766E12, 967.1381966078226], [1.68287778E12, 3490.9287418676804]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68287802E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 967.0923329871931, "minX": 1.68287766E12, "maxY": 68278.17241379307, "series": [{"data": [[1.68287772E12, 3000.940566203625], [1.6828779E12, 3614.7808979553483], [1.68287784E12, 3214.9132483997746], [1.68287802E12, 68278.17241379307], [1.68287796E12, 2236.3346637900017], [1.68287766E12, 967.0923329871931], [1.68287778E12, 3089.1547325270544]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68287802E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 10.603322949117285, "minX": 1.68287766E12, "maxY": 41293.15763546798, "series": [{"data": [[1.68287772E12, 875.0945263633876], [1.6828779E12, 1551.013513830002], [1.68287784E12, 1319.3286064173546], [1.68287802E12, 41293.15763546798], [1.68287796E12, 879.745595109676], [1.68287766E12, 10.603322949117285], [1.68287778E12, 962.0863907980271]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68287802E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 3.0, "minX": 1.68287766E12, "maxY": 249003.0, "series": [{"data": [[1.68287772E12, 81346.0], [1.6828779E12, 215205.0], [1.68287784E12, 196569.0], [1.68287802E12, 228244.0], [1.68287796E12, 249003.0], [1.68287766E12, 21684.0], [1.68287778E12, 142544.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.68287772E12, 10264.0], [1.6828779E12, 1588.9000000000015], [1.68287784E12, 623.9000000000015], [1.68287802E12, 80135.6], [1.68287796E12, 1215.0], [1.68287766E12, 196.0], [1.68287778E12, 447.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.68287772E12, 73929.0], [1.6828779E12, 120788.95000000001], [1.68287784E12, 131205.0], [1.68287802E12, 224680.6400000007], [1.68287796E12, 58265.94000000001], [1.68287766E12, 15999.0], [1.68287778E12, 130335.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.68287772E12, 14886.95], [1.6828779E12, 8942.95], [1.68287784E12, 32157.0], [1.68287802E12, 81754.6], [1.68287796E12, 5775.9000000000015], [1.68287766E12, 13549.15], [1.68287778E12, 11370.900000000001]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.68287772E12, 3.0], [1.6828779E12, 19.0], [1.68287784E12, 14.0], [1.68287802E12, 27874.0], [1.68287796E12, 21.0], [1.68287766E12, 12.0], [1.68287778E12, 3.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.68287772E12, 41.0], [1.6828779E12, 753.0], [1.68287784E12, 406.0], [1.68287802E12, 65724.0], [1.68287796E12, 428.0], [1.68287766E12, 84.0], [1.68287778E12, 272.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68287802E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 4.0, "minX": 1.0, "maxY": 147266.0, "series": [{"data": [[2.0, 27875.0], [3.0, 69151.0], [4.0, 49831.0], [5.0, 6667.5], [6.0, 80879.0], [7.0, 13639.5], [8.0, 28562.0], [9.0, 9783.0], [10.0, 33236.0], [12.0, 64441.5], [13.0, 10104.0], [16.0, 80136.0], [17.0, 7516.0], [18.0, 64143.0], [21.0, 20213.5], [24.0, 9467.0], [27.0, 43689.0], [28.0, 66255.5], [30.0, 3950.0], [48.0, 6682.0], [49.0, 66117.0], [65.0, 69.0], [74.0, 60.0], [73.0, 79.0], [77.0, 144.0], [79.0, 109.0], [83.0, 110.0], [87.0, 65351.0], [98.0, 65722.0], [101.0, 10852.0], [104.0, 10629.0], [108.0, 5.0], [114.0, 89.0], [120.0, 99.5], [133.0, 123.0], [162.0, 16002.0], [172.0, 56.0], [170.0, 14343.5], [177.0, 43363.0], [190.0, 25.5], [230.0, 310.0], [247.0, 27.0], [253.0, 216.0], [271.0, 7183.5], [281.0, 179.0], [286.0, 8899.0], [349.0, 55.0], [337.0, 200.0], [354.0, 123.0], [371.0, 10192.5], [370.0, 13408.0], [373.0, 1594.0], [399.0, 8779.0], [393.0, 8897.0], [405.0, 380.0], [426.0, 68.0], [416.0, 109.0], [422.0, 9999.0], [423.0, 283.0], [451.0, 302.0], [464.0, 7.0], [484.0, 196.0], [497.0, 20.0], [507.0, 10687.0], [513.0, 11489.0], [520.0, 310.0], [537.0, 393.0], [573.0, 11273.0], [571.0, 100413.0], [569.0, 384.0], [548.0, 383.0], [582.0, 13.0], [593.0, 51.0], [607.0, 372.0], [600.0, 364.0], [638.0, 197.0], [626.0, 6.0], [625.0, 360.0], [619.0, 392.0], [611.0, 360.0], [631.0, 325.0], [629.0, 342.0], [652.0, 125.0], [663.0, 16960.0], [642.0, 73.5], [661.0, 395.0], [667.0, 337.0], [654.0, 417.0], [645.0, 405.0], [669.0, 416.0], [692.0, 149.0], [683.0, 206.0], [677.0, 383.0], [693.0, 389.0], [689.0, 356.0], [678.0, 401.0], [710.0, 103.0], [706.0, 122.0], [734.0, 15.0], [731.0, 385.0], [718.0, 413.0], [719.0, 420.0], [724.0, 359.0], [735.0, 380.0], [725.0, 383.0], [738.0, 169.0], [740.0, 398.0], [756.0, 325.0], [739.0, 399.0], [737.0, 411.0], [744.0, 402.0], [745.0, 435.0], [736.0, 415.0], [746.0, 713.0], [773.0, 52.0], [784.0, 15677.5], [771.0, 7.0], [790.0, 8761.5], [777.0, 303.0], [778.0, 355.0], [779.0, 263.0], [794.0, 333.0], [791.0, 807.0], [780.0, 565.0], [828.0, 113.0], [827.0, 361.0], [814.0, 19.0], [863.0, 10894.0], [857.0, 9572.0], [845.0, 443.0], [832.0, 299.0], [842.0, 389.0], [870.0, 25.0], [871.0, 60.0], [922.0, 177.0], [896.0, 406.0], [957.0, 59.0], [936.0, 442.0], [932.0, 388.0], [968.0, 5.0], [982.0, 374.0], [994.0, 219.5], [1010.0, 272.0], [1000.0, 376.0], [1060.0, 23.0], [1040.0, 51.0], [1049.0, 100.0], [1057.0, 92.0], [1043.0, 4.0], [1041.0, 296.0], [1128.0, 70.0], [1134.0, 408.0], [1099.0, 609.0], [1098.0, 518.0], [1177.0, 213.0], [1165.0, 11449.0], [1223.0, 556.0], [1332.0, 105.0], [1318.0, 73.0], [1290.0, 209.0], [1334.0, 443.0], [1282.0, 342.0], [1312.0, 491.0], [1287.0, 386.0], [1351.0, 27.0], [1387.0, 369.0], [1404.0, 417.0], [1381.0, 371.0], [1396.0, 554.0], [1460.0, 376.0], [1423.0, 31.0], [1449.0, 13.0], [1437.0, 335.0], [1436.0, 388.5], [1421.0, 411.0], [1459.0, 1265.0], [1445.0, 382.0], [1468.0, 356.0], [1471.0, 620.0], [1486.0, 409.0], [1476.0, 357.0], [1472.0, 68.0], [1525.0, 492.0], [1531.0, 150.0], [1504.0, 52.0], [1513.0, 514.0], [1483.0, 15.0], [1484.0, 418.0], [1474.0, 333.0], [1488.0, 364.0], [1563.0, 47.0], [1571.0, 401.0], [1631.0, 227.0], [1649.0, 7.0], [1611.0, 304.0], [1698.0, 403.0], [1711.0, 473.0], [1761.0, 173.0], [1816.0, 762.0], [1907.0, 317.0], [1914.0, 389.0], [1938.0, 82.0], [1936.0, 865.0], [2027.0, 57.0], [2087.0, 177.0], [2072.0, 353.0], [2130.0, 864.0], [2197.0, 155.0], [2235.0, 208.0], [2259.0, 48.0], [2236.0, 437.5], [2251.0, 462.0], [2303.0, 772.0], [2262.0, 793.0], [2448.0, 1193.0], [2672.0, 430.0], [2612.0, 805.0], [1.0, 45455.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[571.0, 34166.0], [548.0, 85380.0], [611.0, 35797.0], [663.0, 5163.0], [661.0, 30592.0], [645.0, 5297.0], [738.0, 12350.0], [756.0, 138192.0], [739.0, 14765.5], [794.0, 74031.0], [857.0, 117276.0], [936.0, 60224.0], [1134.0, 63673.0], [1099.0, 147266.0], [1318.0, 7316.0], [1472.0, 7008.0], [1488.0, 24237.0], [1571.0, 40695.0], [1611.0, 6405.5], [104.0, 35205.0], [1698.0, 74239.0], [7.0, 11335.0], [8.0, 19237.0], [2259.0, 22415.0], [2251.0, 95566.5], [172.0, 90205.0], [337.0, 74038.0], [422.0, 66511.0], [27.0, 12526.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 2672.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 100413.0, "series": [{"data": [[2.0, 27875.0], [3.0, 69151.0], [4.0, 49831.0], [5.0, 6667.5], [6.0, 80879.0], [7.0, 13639.5], [8.0, 28562.0], [9.0, 9783.0], [10.0, 33236.0], [12.0, 64441.5], [13.0, 10104.0], [16.0, 80136.0], [17.0, 7516.0], [18.0, 64143.0], [21.0, 20213.5], [24.0, 9467.0], [27.0, 43689.0], [28.0, 66255.5], [30.0, 3950.0], [48.0, 6682.0], [49.0, 66117.0], [65.0, 69.0], [74.0, 60.0], [73.0, 79.0], [77.0, 144.0], [79.0, 109.0], [83.0, 110.0], [87.0, 65351.0], [98.0, 65722.0], [101.0, 10852.0], [104.0, 10628.5], [108.0, 5.0], [114.0, 89.0], [120.0, 99.5], [133.0, 123.0], [162.0, 16002.0], [172.0, 56.0], [170.0, 14343.5], [177.0, 43363.0], [190.0, 25.0], [230.0, 310.0], [247.0, 27.0], [253.0, 216.0], [271.0, 7183.5], [281.0, 179.0], [286.0, 8899.0], [349.0, 55.0], [337.0, 200.0], [354.0, 123.0], [371.0, 10192.5], [370.0, 13407.5], [373.0, 1594.0], [399.0, 8779.0], [393.0, 8897.0], [405.0, 380.0], [426.0, 68.0], [416.0, 109.0], [422.0, 9999.0], [423.0, 283.0], [451.0, 302.0], [464.0, 7.0], [484.0, 196.0], [497.0, 20.0], [507.0, 10687.0], [513.0, 11489.0], [520.0, 310.0], [537.0, 393.0], [573.0, 11273.0], [571.0, 100413.0], [569.0, 384.0], [548.0, 383.0], [582.0, 13.0], [593.0, 51.0], [607.0, 372.0], [600.0, 364.0], [638.0, 197.0], [626.0, 6.0], [625.0, 360.0], [619.0, 392.0], [611.0, 360.0], [631.0, 325.0], [629.0, 342.0], [652.0, 125.0], [663.0, 16960.0], [642.0, 73.5], [661.0, 395.0], [667.0, 337.0], [654.0, 417.0], [645.0, 405.0], [669.0, 416.0], [692.0, 148.5], [683.0, 206.0], [677.0, 383.0], [693.0, 389.0], [689.0, 356.0], [678.0, 401.0], [710.0, 103.0], [706.0, 122.0], [734.0, 15.0], [731.0, 385.0], [718.0, 413.0], [719.0, 420.0], [724.0, 359.0], [735.0, 380.0], [725.0, 383.0], [738.0, 169.0], [740.0, 398.0], [756.0, 325.0], [739.0, 399.0], [737.0, 411.0], [744.0, 402.0], [745.0, 435.0], [736.0, 415.0], [746.0, 713.0], [773.0, 51.0], [784.0, 15677.5], [771.0, 7.0], [790.0, 8761.5], [777.0, 303.0], [778.0, 355.0], [779.0, 263.0], [794.0, 333.0], [791.0, 807.0], [780.0, 565.0], [828.0, 113.0], [827.0, 361.0], [814.0, 19.0], [863.0, 10894.0], [857.0, 9572.0], [845.0, 443.0], [832.0, 299.0], [842.0, 389.0], [870.0, 25.0], [871.0, 60.0], [922.0, 177.0], [896.0, 406.0], [957.0, 59.0], [936.0, 442.0], [932.0, 388.0], [968.0, 5.0], [982.0, 374.0], [994.0, 219.5], [1010.0, 272.0], [1000.0, 376.0], [1060.0, 23.0], [1040.0, 51.0], [1049.0, 100.0], [1057.0, 92.0], [1043.0, 4.0], [1041.0, 296.0], [1128.0, 70.0], [1134.0, 408.0], [1099.0, 609.0], [1098.0, 518.0], [1177.0, 213.0], [1165.0, 11449.0], [1223.0, 556.0], [1332.0, 105.0], [1318.0, 73.0], [1290.0, 209.0], [1334.0, 443.0], [1282.0, 342.0], [1312.0, 491.0], [1287.0, 386.0], [1351.0, 27.0], [1387.0, 369.0], [1404.0, 417.0], [1381.0, 371.0], [1396.0, 554.0], [1460.0, 376.0], [1423.0, 31.0], [1449.0, 13.0], [1437.0, 335.0], [1436.0, 388.5], [1421.0, 411.0], [1459.0, 1265.0], [1445.0, 382.0], [1468.0, 356.0], [1471.0, 620.0], [1486.0, 409.0], [1476.0, 357.0], [1472.0, 68.0], [1525.0, 492.0], [1531.0, 150.0], [1504.0, 52.0], [1513.0, 514.0], [1483.0, 15.0], [1484.0, 418.0], [1474.0, 333.0], [1488.0, 364.0], [1563.0, 47.0], [1571.0, 401.0], [1631.0, 227.0], [1649.0, 7.0], [1611.0, 304.0], [1698.0, 403.0], [1711.0, 473.0], [1761.0, 173.0], [1816.0, 762.0], [1907.0, 317.0], [1914.0, 389.0], [1938.0, 82.0], [1936.0, 865.0], [2027.0, 57.0], [2087.0, 177.0], [2072.0, 353.0], [2130.0, 864.0], [2197.0, 155.0], [2235.0, 208.0], [2259.0, 48.0], [2236.0, 437.5], [2251.0, 462.0], [2303.0, 772.0], [2262.0, 793.0], [2448.0, 1193.0], [2672.0, 430.0], [2612.0, 805.0], [1.0, 45455.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[571.0, 0.0], [548.0, 0.0], [611.0, 0.0], [663.0, 0.0], [661.0, 0.0], [645.0, 0.0], [738.0, 0.0], [756.0, 0.0], [739.0, 0.0], [794.0, 0.0], [857.0, 0.0], [936.0, 0.0], [1134.0, 0.0], [1099.0, 0.0], [1318.0, 0.0], [1472.0, 0.0], [1488.0, 0.0], [1571.0, 0.0], [1611.0, 0.0], [104.0, 0.0], [1698.0, 0.0], [7.0, 0.0], [8.0, 0.0], [2259.0, 0.0], [2251.0, 0.0], [172.0, 0.0], [337.0, 0.0], [422.0, 0.0], [27.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 2672.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 242.6, "minX": 1.68287766E12, "maxY": 807.4, "series": [{"data": [[1.68287772E12, 663.4833333333333], [1.6828779E12, 685.0666666666667], [1.68287784E12, 807.4], [1.68287796E12, 456.45], [1.68287766E12, 242.6], [1.68287778E12, 806.5833333333334]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68287796E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.68287766E12, "maxY": 813.3166666666667, "series": [{"data": [[1.68287772E12, 662.1666666666666], [1.6828779E12, 708.6], [1.68287784E12, 807.05], [1.68287802E12, 3.3833333333333333], [1.68287796E12, 463.48333333333335], [1.68287766E12, 192.6], [1.68287778E12, 813.3166666666667]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.68287772E12, 1.3166666666666667], [1.6828779E12, 3.0166666666666666], [1.68287784E12, 2.7333333333333334], [1.68287796E12, 0.016666666666666666], [1.68287778E12, 3.9]], "isOverall": false, "label": "Non HTTP response code: java.net.SocketException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68287802E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.68287766E12, "maxY": 813.3166666666667, "series": [{"data": [[1.68287772E12, 662.1666666666666], [1.6828779E12, 708.6], [1.68287784E12, 807.05], [1.68287802E12, 3.3833333333333333], [1.68287796E12, 463.48333333333335], [1.68287766E12, 192.6], [1.68287778E12, 813.3166666666667]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.68287772E12, 1.3166666666666667], [1.6828779E12, 3.0166666666666666], [1.68287784E12, 2.7333333333333334], [1.68287796E12, 0.016666666666666666], [1.68287778E12, 3.9]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68287802E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.68287766E12, "maxY": 813.3166666666667, "series": [{"data": [[1.68287772E12, 662.1666666666666], [1.6828779E12, 708.6], [1.68287784E12, 807.05], [1.68287802E12, 3.3833333333333333], [1.68287796E12, 463.48333333333335], [1.68287766E12, 192.6], [1.68287778E12, 813.3166666666667]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.68287772E12, 1.3166666666666667], [1.6828779E12, 3.0166666666666666], [1.68287784E12, 2.7333333333333334], [1.68287796E12, 0.016666666666666666], [1.68287778E12, 3.9]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68287802E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

