/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 3.0, "minX": 0.0, "maxY": 248125.0, "series": [{"data": [[0.0, 3.0], [0.1, 6.0], [0.2, 7.0], [0.3, 9.0], [0.4, 11.0], [0.5, 13.0], [0.6, 14.0], [0.7, 16.0], [0.8, 17.0], [0.9, 18.0], [1.0, 19.0], [1.1, 20.0], [1.2, 21.0], [1.3, 21.0], [1.4, 22.0], [1.5, 23.0], [1.6, 24.0], [1.7, 24.0], [1.8, 25.0], [1.9, 26.0], [2.0, 27.0], [2.1, 27.0], [2.2, 28.0], [2.3, 29.0], [2.4, 29.0], [2.5, 30.0], [2.6, 31.0], [2.7, 31.0], [2.8, 32.0], [2.9, 32.0], [3.0, 33.0], [3.1, 33.0], [3.2, 34.0], [3.3, 34.0], [3.4, 35.0], [3.5, 35.0], [3.6, 36.0], [3.7, 36.0], [3.8, 37.0], [3.9, 37.0], [4.0, 38.0], [4.1, 39.0], [4.2, 39.0], [4.3, 40.0], [4.4, 40.0], [4.5, 41.0], [4.6, 41.0], [4.7, 42.0], [4.8, 42.0], [4.9, 43.0], [5.0, 43.0], [5.1, 44.0], [5.2, 44.0], [5.3, 44.0], [5.4, 45.0], [5.5, 45.0], [5.6, 46.0], [5.7, 47.0], [5.8, 47.0], [5.9, 47.0], [6.0, 48.0], [6.1, 49.0], [6.2, 49.0], [6.3, 50.0], [6.4, 50.0], [6.5, 51.0], [6.6, 51.0], [6.7, 52.0], [6.8, 52.0], [6.9, 52.0], [7.0, 53.0], [7.1, 53.0], [7.2, 54.0], [7.3, 54.0], [7.4, 54.0], [7.5, 55.0], [7.6, 55.0], [7.7, 56.0], [7.8, 56.0], [7.9, 57.0], [8.0, 57.0], [8.1, 57.0], [8.2, 58.0], [8.3, 58.0], [8.4, 59.0], [8.5, 59.0], [8.6, 59.0], [8.7, 60.0], [8.8, 60.0], [8.9, 61.0], [9.0, 61.0], [9.1, 62.0], [9.2, 62.0], [9.3, 63.0], [9.4, 63.0], [9.5, 64.0], [9.6, 65.0], [9.7, 65.0], [9.8, 66.0], [9.9, 66.0], [10.0, 67.0], [10.1, 68.0], [10.2, 68.0], [10.3, 69.0], [10.4, 69.0], [10.5, 70.0], [10.6, 70.0], [10.7, 71.0], [10.8, 71.0], [10.9, 71.0], [11.0, 72.0], [11.1, 72.0], [11.2, 73.0], [11.3, 73.0], [11.4, 74.0], [11.5, 75.0], [11.6, 75.0], [11.7, 76.0], [11.8, 77.0], [11.9, 77.0], [12.0, 78.0], [12.1, 78.0], [12.2, 78.0], [12.3, 79.0], [12.4, 79.0], [12.5, 80.0], [12.6, 80.0], [12.7, 81.0], [12.8, 81.0], [12.9, 82.0], [13.0, 82.0], [13.1, 83.0], [13.2, 84.0], [13.3, 84.0], [13.4, 85.0], [13.5, 85.0], [13.6, 86.0], [13.7, 86.0], [13.8, 87.0], [13.9, 87.0], [14.0, 88.0], [14.1, 88.0], [14.2, 89.0], [14.3, 89.0], [14.4, 90.0], [14.5, 91.0], [14.6, 91.0], [14.7, 92.0], [14.8, 92.0], [14.9, 92.0], [15.0, 93.0], [15.1, 93.0], [15.2, 94.0], [15.3, 94.0], [15.4, 94.0], [15.5, 95.0], [15.6, 95.0], [15.7, 95.0], [15.8, 96.0], [15.9, 96.0], [16.0, 97.0], [16.1, 97.0], [16.2, 98.0], [16.3, 98.0], [16.4, 98.0], [16.5, 99.0], [16.6, 100.0], [16.7, 100.0], [16.8, 101.0], [16.9, 101.0], [17.0, 102.0], [17.1, 103.0], [17.2, 103.0], [17.3, 104.0], [17.4, 104.0], [17.5, 105.0], [17.6, 105.0], [17.7, 106.0], [17.8, 106.0], [17.9, 106.0], [18.0, 107.0], [18.1, 108.0], [18.2, 108.0], [18.3, 109.0], [18.4, 110.0], [18.5, 110.0], [18.6, 110.0], [18.7, 111.0], [18.8, 111.0], [18.9, 112.0], [19.0, 112.0], [19.1, 112.0], [19.2, 113.0], [19.3, 113.0], [19.4, 114.0], [19.5, 114.0], [19.6, 114.0], [19.7, 115.0], [19.8, 116.0], [19.9, 116.0], [20.0, 117.0], [20.1, 118.0], [20.2, 119.0], [20.3, 119.0], [20.4, 120.0], [20.5, 120.0], [20.6, 121.0], [20.7, 122.0], [20.8, 123.0], [20.9, 123.0], [21.0, 124.0], [21.1, 124.0], [21.2, 125.0], [21.3, 126.0], [21.4, 126.0], [21.5, 127.0], [21.6, 127.0], [21.7, 128.0], [21.8, 128.0], [21.9, 129.0], [22.0, 129.0], [22.1, 130.0], [22.2, 130.0], [22.3, 131.0], [22.4, 131.0], [22.5, 132.0], [22.6, 133.0], [22.7, 133.0], [22.8, 134.0], [22.9, 134.0], [23.0, 135.0], [23.1, 135.0], [23.2, 136.0], [23.3, 136.0], [23.4, 136.0], [23.5, 137.0], [23.6, 137.0], [23.7, 138.0], [23.8, 138.0], [23.9, 139.0], [24.0, 139.0], [24.1, 139.0], [24.2, 140.0], [24.3, 140.0], [24.4, 141.0], [24.5, 141.0], [24.6, 142.0], [24.7, 143.0], [24.8, 143.0], [24.9, 144.0], [25.0, 145.0], [25.1, 145.0], [25.2, 146.0], [25.3, 146.0], [25.4, 147.0], [25.5, 148.0], [25.6, 149.0], [25.7, 149.0], [25.8, 150.0], [25.9, 151.0], [26.0, 151.0], [26.1, 151.0], [26.2, 152.0], [26.3, 152.0], [26.4, 153.0], [26.5, 153.0], [26.6, 154.0], [26.7, 154.0], [26.8, 155.0], [26.9, 156.0], [27.0, 156.0], [27.1, 157.0], [27.2, 158.0], [27.3, 159.0], [27.4, 160.0], [27.5, 160.0], [27.6, 161.0], [27.7, 161.0], [27.8, 161.0], [27.9, 162.0], [28.0, 163.0], [28.1, 163.0], [28.2, 165.0], [28.3, 166.0], [28.4, 168.0], [28.5, 168.0], [28.6, 169.0], [28.7, 170.0], [28.8, 170.0], [28.9, 170.0], [29.0, 171.0], [29.1, 172.0], [29.2, 172.0], [29.3, 173.0], [29.4, 174.0], [29.5, 175.0], [29.6, 175.0], [29.7, 175.0], [29.8, 176.0], [29.9, 176.0], [30.0, 177.0], [30.1, 178.0], [30.2, 178.0], [30.3, 179.0], [30.4, 179.0], [30.5, 180.0], [30.6, 180.0], [30.7, 182.0], [30.8, 183.0], [30.9, 184.0], [31.0, 184.0], [31.1, 185.0], [31.2, 186.0], [31.3, 187.0], [31.4, 187.0], [31.5, 188.0], [31.6, 189.0], [31.7, 190.0], [31.8, 191.0], [31.9, 192.0], [32.0, 192.0], [32.1, 193.0], [32.2, 193.0], [32.3, 193.0], [32.4, 194.0], [32.5, 194.0], [32.6, 195.0], [32.7, 195.0], [32.8, 196.0], [32.9, 197.0], [33.0, 198.0], [33.1, 200.0], [33.2, 201.0], [33.3, 203.0], [33.4, 204.0], [33.5, 205.0], [33.6, 206.0], [33.7, 207.0], [33.8, 207.0], [33.9, 208.0], [34.0, 209.0], [34.1, 210.0], [34.2, 211.0], [34.3, 212.0], [34.4, 213.0], [34.5, 214.0], [34.6, 214.0], [34.7, 215.0], [34.8, 215.0], [34.9, 216.0], [35.0, 217.0], [35.1, 218.0], [35.2, 219.0], [35.3, 221.0], [35.4, 223.0], [35.5, 226.0], [35.6, 227.0], [35.7, 229.0], [35.8, 229.0], [35.9, 230.0], [36.0, 231.0], [36.1, 232.0], [36.2, 233.0], [36.3, 233.0], [36.4, 234.0], [36.5, 236.0], [36.6, 237.0], [36.7, 238.0], [36.8, 240.0], [36.9, 241.0], [37.0, 243.0], [37.1, 244.0], [37.2, 245.0], [37.3, 246.0], [37.4, 247.0], [37.5, 248.0], [37.6, 249.0], [37.7, 249.0], [37.8, 250.0], [37.9, 251.0], [38.0, 252.0], [38.1, 253.0], [38.2, 254.0], [38.3, 254.0], [38.4, 255.0], [38.5, 255.0], [38.6, 256.0], [38.7, 257.0], [38.8, 258.0], [38.9, 258.0], [39.0, 259.0], [39.1, 259.0], [39.2, 260.0], [39.3, 261.0], [39.4, 261.0], [39.5, 262.0], [39.6, 262.0], [39.7, 263.0], [39.8, 264.0], [39.9, 264.0], [40.0, 265.0], [40.1, 265.0], [40.2, 266.0], [40.3, 266.0], [40.4, 267.0], [40.5, 267.0], [40.6, 269.0], [40.7, 270.0], [40.8, 271.0], [40.9, 272.0], [41.0, 272.0], [41.1, 273.0], [41.2, 273.0], [41.3, 273.0], [41.4, 274.0], [41.5, 274.0], [41.6, 275.0], [41.7, 276.0], [41.8, 276.0], [41.9, 277.0], [42.0, 277.0], [42.1, 278.0], [42.2, 279.0], [42.3, 279.0], [42.4, 280.0], [42.5, 280.0], [42.6, 280.0], [42.7, 281.0], [42.8, 281.0], [42.9, 282.0], [43.0, 282.0], [43.1, 282.0], [43.2, 283.0], [43.3, 283.0], [43.4, 284.0], [43.5, 284.0], [43.6, 284.0], [43.7, 285.0], [43.8, 286.0], [43.9, 287.0], [44.0, 288.0], [44.1, 289.0], [44.2, 289.0], [44.3, 290.0], [44.4, 290.0], [44.5, 290.0], [44.6, 291.0], [44.7, 291.0], [44.8, 291.0], [44.9, 292.0], [45.0, 292.0], [45.1, 293.0], [45.2, 293.0], [45.3, 293.0], [45.4, 294.0], [45.5, 294.0], [45.6, 295.0], [45.7, 295.0], [45.8, 295.0], [45.9, 296.0], [46.0, 297.0], [46.1, 297.0], [46.2, 298.0], [46.3, 298.0], [46.4, 299.0], [46.5, 299.0], [46.6, 299.0], [46.7, 300.0], [46.8, 300.0], [46.9, 300.0], [47.0, 301.0], [47.1, 301.0], [47.2, 301.0], [47.3, 301.0], [47.4, 302.0], [47.5, 302.0], [47.6, 302.0], [47.7, 303.0], [47.8, 303.0], [47.9, 304.0], [48.0, 304.0], [48.1, 304.0], [48.2, 305.0], [48.3, 305.0], [48.4, 306.0], [48.5, 306.0], [48.6, 306.0], [48.7, 306.0], [48.8, 307.0], [48.9, 307.0], [49.0, 307.0], [49.1, 308.0], [49.2, 308.0], [49.3, 309.0], [49.4, 310.0], [49.5, 311.0], [49.6, 311.0], [49.7, 312.0], [49.8, 312.0], [49.9, 313.0], [50.0, 313.0], [50.1, 313.0], [50.2, 314.0], [50.3, 314.0], [50.4, 315.0], [50.5, 316.0], [50.6, 316.0], [50.7, 317.0], [50.8, 318.0], [50.9, 318.0], [51.0, 318.0], [51.1, 319.0], [51.2, 319.0], [51.3, 319.0], [51.4, 320.0], [51.5, 320.0], [51.6, 320.0], [51.7, 320.0], [51.8, 320.0], [51.9, 321.0], [52.0, 321.0], [52.1, 321.0], [52.2, 321.0], [52.3, 321.0], [52.4, 322.0], [52.5, 322.0], [52.6, 322.0], [52.7, 322.0], [52.8, 322.0], [52.9, 323.0], [53.0, 323.0], [53.1, 323.0], [53.2, 323.0], [53.3, 323.0], [53.4, 324.0], [53.5, 324.0], [53.6, 324.0], [53.7, 324.0], [53.8, 324.0], [53.9, 325.0], [54.0, 325.0], [54.1, 325.0], [54.2, 325.0], [54.3, 325.0], [54.4, 326.0], [54.5, 326.0], [54.6, 326.0], [54.7, 326.0], [54.8, 326.0], [54.9, 326.0], [55.0, 327.0], [55.1, 327.0], [55.2, 327.0], [55.3, 327.0], [55.4, 327.0], [55.5, 327.0], [55.6, 327.0], [55.7, 327.0], [55.8, 328.0], [55.9, 328.0], [56.0, 328.0], [56.1, 328.0], [56.2, 328.0], [56.3, 328.0], [56.4, 329.0], [56.5, 329.0], [56.6, 329.0], [56.7, 329.0], [56.8, 329.0], [56.9, 329.0], [57.0, 330.0], [57.1, 330.0], [57.2, 330.0], [57.3, 330.0], [57.4, 330.0], [57.5, 331.0], [57.6, 331.0], [57.7, 331.0], [57.8, 331.0], [57.9, 332.0], [58.0, 332.0], [58.1, 332.0], [58.2, 332.0], [58.3, 332.0], [58.4, 332.0], [58.5, 333.0], [58.6, 333.0], [58.7, 333.0], [58.8, 333.0], [58.9, 333.0], [59.0, 334.0], [59.1, 334.0], [59.2, 334.0], [59.3, 334.0], [59.4, 334.0], [59.5, 334.0], [59.6, 335.0], [59.7, 335.0], [59.8, 335.0], [59.9, 335.0], [60.0, 335.0], [60.1, 336.0], [60.2, 336.0], [60.3, 336.0], [60.4, 336.0], [60.5, 336.0], [60.6, 336.0], [60.7, 337.0], [60.8, 337.0], [60.9, 337.0], [61.0, 337.0], [61.1, 337.0], [61.2, 338.0], [61.3, 338.0], [61.4, 338.0], [61.5, 338.0], [61.6, 338.0], [61.7, 338.0], [61.8, 339.0], [61.9, 339.0], [62.0, 339.0], [62.1, 339.0], [62.2, 339.0], [62.3, 340.0], [62.4, 340.0], [62.5, 340.0], [62.6, 340.0], [62.7, 341.0], [62.8, 341.0], [62.9, 341.0], [63.0, 341.0], [63.1, 342.0], [63.2, 342.0], [63.3, 342.0], [63.4, 342.0], [63.5, 342.0], [63.6, 343.0], [63.7, 343.0], [63.8, 343.0], [63.9, 343.0], [64.0, 344.0], [64.1, 344.0], [64.2, 344.0], [64.3, 345.0], [64.4, 345.0], [64.5, 345.0], [64.6, 346.0], [64.7, 346.0], [64.8, 346.0], [64.9, 347.0], [65.0, 347.0], [65.1, 347.0], [65.2, 348.0], [65.3, 348.0], [65.4, 348.0], [65.5, 349.0], [65.6, 349.0], [65.7, 350.0], [65.8, 350.0], [65.9, 350.0], [66.0, 351.0], [66.1, 351.0], [66.2, 351.0], [66.3, 351.0], [66.4, 352.0], [66.5, 352.0], [66.6, 352.0], [66.7, 352.0], [66.8, 353.0], [66.9, 353.0], [67.0, 353.0], [67.1, 354.0], [67.2, 354.0], [67.3, 354.0], [67.4, 355.0], [67.5, 355.0], [67.6, 355.0], [67.7, 356.0], [67.8, 356.0], [67.9, 356.0], [68.0, 357.0], [68.1, 357.0], [68.2, 358.0], [68.3, 359.0], [68.4, 359.0], [68.5, 360.0], [68.6, 361.0], [68.7, 362.0], [68.8, 364.0], [68.9, 366.0], [69.0, 367.0], [69.1, 367.0], [69.2, 368.0], [69.3, 369.0], [69.4, 369.0], [69.5, 370.0], [69.6, 371.0], [69.7, 372.0], [69.8, 373.0], [69.9, 376.0], [70.0, 377.0], [70.1, 378.0], [70.2, 379.0], [70.3, 379.0], [70.4, 380.0], [70.5, 380.0], [70.6, 381.0], [70.7, 382.0], [70.8, 382.0], [70.9, 383.0], [71.0, 384.0], [71.1, 385.0], [71.2, 386.0], [71.3, 387.0], [71.4, 388.0], [71.5, 388.0], [71.6, 389.0], [71.7, 392.0], [71.8, 393.0], [71.9, 396.0], [72.0, 400.0], [72.1, 402.0], [72.2, 403.0], [72.3, 405.0], [72.4, 406.0], [72.5, 407.0], [72.6, 407.0], [72.7, 408.0], [72.8, 408.0], [72.9, 409.0], [73.0, 410.0], [73.1, 411.0], [73.2, 416.0], [73.3, 418.0], [73.4, 419.0], [73.5, 422.0], [73.6, 423.0], [73.7, 424.0], [73.8, 425.0], [73.9, 426.0], [74.0, 427.0], [74.1, 429.0], [74.2, 432.0], [74.3, 433.0], [74.4, 435.0], [74.5, 435.0], [74.6, 436.0], [74.7, 436.0], [74.8, 437.0], [74.9, 437.0], [75.0, 438.0], [75.1, 439.0], [75.2, 441.0], [75.3, 442.0], [75.4, 443.0], [75.5, 449.0], [75.6, 463.0], [75.7, 471.0], [75.8, 472.0], [75.9, 476.0], [76.0, 487.0], [76.1, 491.0], [76.2, 493.0], [76.3, 499.0], [76.4, 500.0], [76.5, 501.0], [76.6, 504.0], [76.7, 506.0], [76.8, 507.0], [76.9, 508.0], [77.0, 516.0], [77.1, 518.0], [77.2, 519.0], [77.3, 520.0], [77.4, 521.0], [77.5, 522.0], [77.6, 529.0], [77.7, 532.0], [77.8, 533.0], [77.9, 535.0], [78.0, 557.0], [78.1, 563.0], [78.2, 564.0], [78.3, 567.0], [78.4, 577.0], [78.5, 591.0], [78.6, 591.0], [78.7, 592.0], [78.8, 598.0], [78.9, 603.0], [79.0, 607.0], [79.1, 607.0], [79.2, 609.0], [79.3, 609.0], [79.4, 610.0], [79.5, 614.0], [79.6, 616.0], [79.7, 620.0], [79.8, 629.0], [79.9, 633.0], [80.0, 635.0], [80.1, 637.0], [80.2, 638.0], [80.3, 640.0], [80.4, 641.0], [80.5, 644.0], [80.6, 645.0], [80.7, 647.0], [80.8, 652.0], [80.9, 658.0], [81.0, 662.0], [81.1, 667.0], [81.2, 670.0], [81.3, 671.0], [81.4, 672.0], [81.5, 673.0], [81.6, 674.0], [81.7, 674.0], [81.8, 675.0], [81.9, 678.0], [82.0, 680.0], [82.1, 682.0], [82.2, 684.0], [82.3, 697.0], [82.4, 699.0], [82.5, 706.0], [82.6, 711.0], [82.7, 713.0], [82.8, 716.0], [82.9, 717.0], [83.0, 718.0], [83.1, 719.0], [83.2, 720.0], [83.3, 721.0], [83.4, 725.0], [83.5, 730.0], [83.6, 753.0], [83.7, 758.0], [83.8, 765.0], [83.9, 797.0], [84.0, 821.0], [84.1, 822.0], [84.2, 825.0], [84.3, 833.0], [84.4, 835.0], [84.5, 841.0], [84.6, 872.0], [84.7, 999.0], [84.8, 1000.0], [84.9, 1001.0], [85.0, 1042.0], [85.1, 1070.0], [85.2, 1074.0], [85.3, 1077.0], [85.4, 1100.0], [85.5, 1359.0], [85.6, 1476.0], [85.7, 1775.0], [85.8, 1933.0], [85.9, 2228.0], [86.0, 2525.0], [86.1, 2678.0], [86.2, 2927.0], [86.3, 3194.0], [86.4, 3444.0], [86.5, 3686.0], [86.6, 3959.0], [86.7, 4292.0], [86.8, 4451.0], [86.9, 4681.0], [87.0, 4747.0], [87.1, 4826.0], [87.2, 4981.0], [87.3, 5029.0], [87.4, 5031.0], [87.5, 5206.0], [87.6, 5310.0], [87.7, 5346.0], [87.8, 5632.0], [87.9, 5658.0], [88.0, 5695.0], [88.1, 5886.0], [88.2, 6130.0], [88.3, 6180.0], [88.4, 6237.0], [88.5, 6259.0], [88.6, 6261.0], [88.7, 6265.0], [88.8, 6458.0], [88.9, 6498.0], [89.0, 6526.0], [89.1, 6744.0], [89.2, 6788.0], [89.3, 6834.0], [89.4, 6936.0], [89.5, 6985.0], [89.6, 6997.0], [89.7, 7011.0], [89.8, 7013.0], [89.9, 7038.0], [90.0, 7041.0], [90.1, 7055.0], [90.2, 7099.0], [90.3, 7112.0], [90.4, 7131.0], [90.5, 7163.0], [90.6, 7191.0], [90.7, 7259.0], [90.8, 7303.0], [90.9, 7324.0], [91.0, 7368.0], [91.1, 7374.0], [91.2, 7518.0], [91.3, 7633.0], [91.4, 7646.0], [91.5, 7679.0], [91.6, 7718.0], [91.7, 7723.0], [91.8, 7857.0], [91.9, 8009.0], [92.0, 8081.0], [92.1, 8194.0], [92.2, 8298.0], [92.3, 8324.0], [92.4, 8352.0], [92.5, 8361.0], [92.6, 8370.0], [92.7, 8413.0], [92.8, 8529.0], [92.9, 8696.0], [93.0, 8698.0], [93.1, 8945.0], [93.2, 9042.0], [93.3, 9045.0], [93.4, 9157.0], [93.5, 9348.0], [93.6, 9388.0], [93.7, 9545.0], [93.8, 9683.0], [93.9, 9757.0], [94.0, 9892.0], [94.1, 9943.0], [94.2, 10029.0], [94.3, 10100.0], [94.4, 10165.0], [94.5, 10319.0], [94.6, 10403.0], [94.7, 10548.0], [94.8, 10721.0], [94.9, 10869.0], [95.0, 11009.0], [95.1, 11120.0], [95.2, 11350.0], [95.3, 11581.0], [95.4, 11983.0], [95.5, 12522.0], [95.6, 12719.0], [95.7, 14037.0], [95.8, 14458.0], [95.9, 15182.0], [96.0, 16237.0], [96.1, 17126.0], [96.2, 17950.0], [96.3, 19148.0], [96.4, 20383.0], [96.5, 21049.0], [96.6, 22248.0], [96.7, 24768.0], [96.8, 26044.0], [96.9, 28128.0], [97.0, 28515.0], [97.1, 32044.0], [97.2, 33091.0], [97.3, 33556.0], [97.4, 34516.0], [97.5, 35243.0], [97.6, 36646.0], [97.7, 37696.0], [97.8, 41241.0], [97.9, 41468.0], [98.0, 46027.0], [98.1, 51484.0], [98.2, 56932.0], [98.3, 63175.0], [98.4, 64789.0], [98.5, 68242.0], [98.6, 72420.0], [98.7, 73343.0], [98.8, 77789.0], [98.9, 88745.0], [99.0, 96571.0], [99.1, 100109.0], [99.2, 100156.0], [99.3, 100401.0], [99.4, 100479.0], [99.5, 103224.0], [99.6, 127491.0], [99.7, 129158.0], [99.8, 131062.0], [99.9, 137343.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 45562.0, "series": [{"data": [[0.0, 29836.0], [248100.0, 2.0], [66700.0, 7.0], [73100.0, 20.0], [69900.0, 3.0], [79500.0, 1.0], [82700.0, 3.0], [101900.0, 3.0], [108300.0, 19.0], [130700.0, 50.0], [127500.0, 2.0], [149800.0, 3.0], [100.0, 29696.0], [32900.0, 7.0], [34500.0, 30.0], [36100.0, 9.0], [147500.0, 2.0], [37700.0, 31.0], [39300.0, 25.0], [40900.0, 4.0], [42500.0, 3.0], [44100.0, 52.0], [47300.0, 1.0], [200.0, 24453.0], [52100.0, 2.0], [53700.0, 2.0], [55300.0, 1.0], [56900.0, 2.0], [58500.0, 2.0], [60100.0, 2.0], [63300.0, 2.0], [64900.0, 1.0], [65800.0, 2.0], [69000.0, 1.0], [72200.0, 2.0], [300.0, 45562.0], [75400.0, 1.0], [85000.0, 1.0], [88200.0, 4.0], [91400.0, 4.0], [101000.0, 9.0], [400.0, 7902.0], [500.0, 4440.0], [129800.0, 29.0], [600.0, 6512.0], [700.0, 2620.0], [800.0, 1293.0], [900.0, 219.0], [1000.0, 1185.0], [1100.0, 67.0], [1200.0, 67.0], [1300.0, 100.0], [1400.0, 171.0], [1500.0, 26.0], [1600.0, 65.0], [1700.0, 88.0], [1800.0, 114.0], [1900.0, 46.0], [2000.0, 67.0], [2100.0, 24.0], [2300.0, 20.0], [2200.0, 120.0], [2400.0, 68.0], [2500.0, 90.0], [2600.0, 138.0], [2800.0, 125.0], [2700.0, 20.0], [2900.0, 71.0], [3000.0, 87.0], [3100.0, 77.0], [3200.0, 77.0], [3300.0, 60.0], [3400.0, 78.0], [3500.0, 72.0], [3600.0, 57.0], [3700.0, 100.0], [3800.0, 5.0], [3900.0, 74.0], [4000.0, 62.0], [4200.0, 40.0], [68100.0, 12.0], [4400.0, 81.0], [4600.0, 94.0], [71300.0, 1.0], [4800.0, 113.0], [77700.0, 8.0], [5000.0, 396.0], [5200.0, 174.0], [5600.0, 463.0], [5400.0, 13.0], [5800.0, 23.0], [6000.0, 23.0], [96900.0, 2.0], [6200.0, 681.0], [100100.0, 287.0], [6400.0, 284.0], [6600.0, 35.0], [103300.0, 4.0], [6800.0, 188.0], [7000.0, 1078.0], [7400.0, 68.0], [7200.0, 302.0], [116100.0, 1.0], [7600.0, 493.0], [7800.0, 84.0], [8000.0, 270.0], [128900.0, 6.0], [8400.0, 246.0], [8800.0, 34.0], [9200.0, 93.0], [147000.0, 3.0], [9600.0, 179.0], [10000.0, 255.0], [10400.0, 21.0], [11200.0, 25.0], [10800.0, 119.0], [11600.0, 13.0], [12000.0, 9.0], [12400.0, 6.0], [13200.0, 3.0], [12800.0, 2.0], [13600.0, 18.0], [14000.0, 99.0], [14800.0, 30.0], [14400.0, 71.0], [15200.0, 6.0], [15600.0, 61.0], [16000.0, 10.0], [16800.0, 76.0], [18400.0, 5.0], [17600.0, 17.0], [19200.0, 14.0], [20000.0, 20.0], [20800.0, 33.0], [21600.0, 1.0], [23200.0, 4.0], [24000.0, 29.0], [24800.0, 15.0], [25600.0, 2.0], [27200.0, 1.0], [28000.0, 10.0], [28800.0, 11.0], [30400.0, 3.0], [32000.0, 78.0], [33600.0, 9.0], [35200.0, 78.0], [36800.0, 93.0], [144700.0, 3.0], [38400.0, 3.0], [40000.0, 3.0], [41600.0, 2.0], [44800.0, 2.0], [46400.0, 6.0], [49600.0, 2.0], [52800.0, 10.0], [54400.0, 21.0], [59200.0, 1.0], [60800.0, 2.0], [62400.0, 1.0], [64000.0, 12.0], [67200.0, 9.0], [70400.0, 2.0], [73600.0, 2.0], [80000.0, 1.0], [86400.0, 1.0], [92800.0, 2.0], [96000.0, 1.0], [99200.0, 2.0], [128000.0, 9.0], [144900.0, 1.0], [67100.0, 2.0], [73500.0, 14.0], [70300.0, 1.0], [76700.0, 1.0], [79900.0, 4.0], [83100.0, 6.0], [86300.0, 1.0], [99100.0, 1.0], [108700.0, 2.0], [118300.0, 1.0], [127900.0, 1.0], [136200.0, 1.0], [149000.0, 2.0], [33100.0, 92.0], [34700.0, 4.0], [36300.0, 2.0], [37900.0, 2.0], [41100.0, 13.0], [42700.0, 1.0], [45900.0, 2.0], [47500.0, 7.0], [50700.0, 1.0], [55500.0, 2.0], [57100.0, 1.0], [58700.0, 2.0], [61900.0, 2.0], [65100.0, 2.0], [66200.0, 2.0], [72600.0, 6.0], [75800.0, 7.0], [79000.0, 1.0], [82200.0, 1.0], [91800.0, 1.0], [130200.0, 38.0], [135700.0, 20.0], [142100.0, 1.0], [68500.0, 5.0], [71700.0, 17.0], [78100.0, 2.0], [81300.0, 3.0], [87700.0, 1.0], [94100.0, 2.0], [100500.0, 52.0], [119700.0, 91.0], [129300.0, 1.0], [16900.0, 33.0], [17700.0, 19.0], [19300.0, 1.0], [18500.0, 45.0], [20100.0, 66.0], [20900.0, 13.0], [21700.0, 5.0], [22500.0, 19.0], [23300.0, 1.0], [24100.0, 2.0], [24900.0, 13.0], [26500.0, 7.0], [28100.0, 148.0], [29700.0, 7.0], [31300.0, 5.0], [32100.0, 71.0], [131100.0, 7.0], [143900.0, 1.0], [35400.0, 3.0], [40200.0, 18.0], [163100.0, 4.0], [41800.0, 2.0], [43400.0, 1.0], [46600.0, 6.0], [49800.0, 3.0], [53000.0, 1.0], [51400.0, 4.0], [54600.0, 6.0], [56200.0, 6.0], [59400.0, 2.0], [61000.0, 1.0], [62600.0, 1.0], [64200.0, 2.0], [77200.0, 1.0], [80400.0, 3.0], [83600.0, 1.0], [86800.0, 1.0], [96400.0, 1.0], [99600.0, 2.0], [102800.0, 1.0], [128400.0, 37.0], [143200.0, 1.0], [67500.0, 8.0], [70700.0, 1.0], [80300.0, 2.0], [86700.0, 2.0], [93100.0, 2.0], [105900.0, 1.0], [102700.0, 3.0], [115500.0, 3.0], [128300.0, 1.0], [145000.0, 3.0], [36500.0, 30.0], [34900.0, 31.0], [39700.0, 2.0], [161900.0, 2.0], [42900.0, 1.0], [41300.0, 69.0], [44500.0, 4.0], [46100.0, 14.0], [47700.0, 1.0], [50900.0, 2.0], [49300.0, 1.0], [57300.0, 3.0], [58900.0, 5.0], [60500.0, 1.0], [65300.0, 1.0], [63700.0, 67.0], [73000.0, 13.0], [69800.0, 1.0], [76200.0, 1.0], [79400.0, 6.0], [82600.0, 2.0], [92200.0, 1.0], [108200.0, 1.0], [114600.0, 1.0], [127400.0, 13.0], [170100.0, 4.0], [68900.0, 1.0], [65700.0, 1.0], [72100.0, 1.0], [78500.0, 3.0], [84900.0, 1.0], [91300.0, 3.0], [97700.0, 2.0], [100900.0, 1.0], [129700.0, 1.0], [8500.0, 65.0], [135800.0, 1.0], [8900.0, 137.0], [9300.0, 344.0], [9700.0, 211.0], [10100.0, 249.0], [10500.0, 224.0], [10900.0, 165.0], [11300.0, 187.0], [11700.0, 15.0], [12100.0, 47.0], [12500.0, 40.0], [13300.0, 11.0], [12900.0, 12.0], [13700.0, 25.0], [14100.0, 6.0], [14500.0, 5.0], [14900.0, 31.0], [15300.0, 16.0], [15700.0, 10.0], [16100.0, 12.0], [17000.0, 11.0], [17800.0, 5.0], [18600.0, 12.0], [19400.0, 6.0], [20200.0, 14.0], [21000.0, 17.0], [21800.0, 24.0], [23400.0, 4.0], [22600.0, 4.0], [24200.0, 4.0], [25000.0, 31.0], [25800.0, 7.0], [26600.0, 25.0], [27400.0, 2.0], [28200.0, 13.0], [29000.0, 6.0], [29800.0, 2.0], [30600.0, 3.0], [31400.0, 4.0], [32200.0, 1.0], [34000.0, 73.0], [139900.0, 1.0], [37200.0, 3.0], [40400.0, 1.0], [43600.0, 5.0], [46800.0, 1.0], [48400.0, 5.0], [53200.0, 2.0], [51600.0, 4.0], [54800.0, 4.0], [56400.0, 15.0], [58000.0, 1.0], [59600.0, 1.0], [64400.0, 9.0], [68000.0, 1.0], [71200.0, 2.0], [77600.0, 2.0], [84000.0, 1.0], [90400.0, 8.0], [96800.0, 5.0], [100000.0, 120.0], [103200.0, 11.0], [112800.0, 1.0], [128800.0, 1.0], [71100.0, 2.0], [77500.0, 6.0], [74300.0, 1.0], [80700.0, 2.0], [87100.0, 1.0], [90300.0, 71.0], [99900.0, 1.0], [103100.0, 15.0], [128700.0, 10.0], [144200.0, 11.0], [33500.0, 115.0], [141900.0, 2.0], [35100.0, 23.0], [36700.0, 8.0], [38300.0, 1.0], [39900.0, 2.0], [41500.0, 15.0], [43100.0, 2.0], [46300.0, 2.0], [49500.0, 2.0], [52700.0, 1.0], [54300.0, 6.0], [55900.0, 2.0], [57500.0, 4.0], [59100.0, 2.0], [60700.0, 4.0], [63900.0, 13.0], [65500.0, 10.0], [67000.0, 2.0], [73400.0, 1.0], [76600.0, 1.0], [79800.0, 9.0], [95800.0, 2.0], [99000.0, 2.0], [102200.0, 13.0], [105400.0, 1.0], [111800.0, 1.0], [127800.0, 3.0], [131000.0, 10.0], [133200.0, 1.0], [152400.0, 1.0], [137300.0, 13.0], [69300.0, 1.0], [66100.0, 3.0], [72500.0, 3.0], [75700.0, 2.0], [78900.0, 5.0], [82100.0, 2.0], [94900.0, 2.0], [110900.0, 1.0], [141400.0, 17.0], [17100.0, 30.0], [17900.0, 51.0], [18700.0, 2.0], [20300.0, 29.0], [19500.0, 1.0], [21100.0, 69.0], [21900.0, 8.0], [23500.0, 1.0], [22700.0, 1.0], [24300.0, 2.0], [25100.0, 4.0], [25900.0, 38.0], [26700.0, 2.0], [28300.0, 18.0], [29100.0, 12.0], [29900.0, 1.0], [30700.0, 15.0], [31500.0, 2.0], [32300.0, 16.0], [34200.0, 27.0], [35800.0, 5.0], [37400.0, 3.0], [42200.0, 1.0], [43800.0, 5.0], [45400.0, 1.0], [50200.0, 3.0], [203100.0, 1.0], [51800.0, 11.0], [56600.0, 5.0], [61400.0, 2.0], [64600.0, 2.0], [68400.0, 2.0], [71600.0, 18.0], [74800.0, 16.0], [84400.0, 6.0], [100400.0, 217.0], [110000.0, 2.0], [116400.0, 1.0], [129200.0, 13.0], [132000.0, 24.0], [138400.0, 1.0], [68300.0, 4.0], [71500.0, 6.0], [74700.0, 19.0], [87500.0, 1.0], [100300.0, 33.0], [109900.0, 1.0], [129100.0, 29.0], [133800.0, 1.0], [185000.0, 1.0], [236200.0, 20.0], [33700.0, 2.0], [137900.0, 20.0], [35300.0, 11.0], [144300.0, 9.0], [36900.0, 11.0], [150700.0, 4.0], [40100.0, 3.0], [41700.0, 5.0], [46500.0, 11.0], [48100.0, 4.0], [208300.0, 1.0], [54500.0, 40.0], [56100.0, 1.0], [57700.0, 2.0], [62500.0, 1.0], [67400.0, 2.0], [73800.0, 4.0], [80200.0, 4.0], [83400.0, 5.0], [96200.0, 4.0], [102600.0, 15.0], [109000.0, 8.0], [128200.0, 5.0], [178100.0, 1.0], [4300.0, 149.0], [66500.0, 57.0], [4100.0, 71.0], [4500.0, 45.0], [72900.0, 73.0], [69700.0, 1.0], [4700.0, 309.0], [5100.0, 97.0], [4900.0, 129.0], [5300.0, 273.0], [5500.0, 55.0], [5700.0, 105.0], [6100.0, 387.0], [5900.0, 44.0], [95300.0, 1.0], [6300.0, 47.0], [98500.0, 2.0], [101700.0, 1.0], [6500.0, 256.0], [6700.0, 288.0], [6900.0, 479.0], [7100.0, 736.0], [111300.0, 1.0], [7300.0, 652.0], [7500.0, 168.0], [120900.0, 1.0], [7700.0, 387.0], [7900.0, 97.0], [8100.0, 201.0], [8200.0, 145.0], [8600.0, 350.0], [9000.0, 460.0], [9400.0, 79.0], [9800.0, 144.0], [10200.0, 62.0], [163000.0, 3.0], [10600.0, 20.0], [11000.0, 74.0], [11400.0, 30.0], [11800.0, 31.0], [12200.0, 28.0], [12600.0, 151.0], [13000.0, 8.0], [13800.0, 13.0], [13400.0, 21.0], [14200.0, 23.0], [14600.0, 12.0], [15000.0, 66.0], [15800.0, 14.0], [15400.0, 16.0], [16200.0, 24.0], [17200.0, 77.0], [16400.0, 19.0], [18000.0, 2.0], [18800.0, 14.0], [19600.0, 16.0], [20400.0, 24.0], [21200.0, 2.0], [22000.0, 14.0], [23600.0, 2.0], [24400.0, 9.0], [25200.0, 2.0], [26000.0, 43.0], [26800.0, 27.0], [27600.0, 15.0], [28400.0, 25.0], [29200.0, 1.0], [30000.0, 1.0], [30800.0, 3.0], [32400.0, 7.0], [141500.0, 5.0], [36000.0, 6.0], [37600.0, 2.0], [40800.0, 3.0], [39200.0, 2.0], [42400.0, 2.0], [55200.0, 6.0], [53600.0, 4.0], [60000.0, 2.0], [63200.0, 15.0], [64800.0, 1.0], [75200.0, 3.0], [81600.0, 4.0], [78400.0, 1.0], [84800.0, 3.0], [91200.0, 2.0], [97600.0, 2.0], [100800.0, 22.0], [113600.0, 1.0], [129600.0, 1.0], [131200.0, 23.0], [154500.0, 1.0], [68700.0, 1.0], [75100.0, 4.0], [81500.0, 2.0], [87900.0, 2.0], [100700.0, 7.0], [103900.0, 1.0], [133000.0, 16.0], [33900.0, 17.0], [35500.0, 3.0], [37100.0, 42.0], [40300.0, 14.0], [41900.0, 9.0], [46700.0, 4.0], [49900.0, 28.0], [53100.0, 1.0], [56300.0, 1.0], [59500.0, 1.0], [61100.0, 4.0], [64300.0, 2.0], [71000.0, 1.0], [74200.0, 4.0], [83800.0, 2.0], [109400.0, 5.0], [128600.0, 4.0], [141200.0, 2.0], [147600.0, 4.0], [132500.0, 2.0], [247700.0, 8.0], [73300.0, 50.0], [70100.0, 3.0], [79700.0, 3.0], [82900.0, 1.0], [127700.0, 17.0], [200600.0, 1.0], [16500.0, 8.0], [17300.0, 17.0], [18100.0, 11.0], [18900.0, 8.0], [19700.0, 9.0], [20500.0, 69.0], [21300.0, 2.0], [22100.0, 6.0], [22900.0, 2.0], [24500.0, 1.0], [25300.0, 3.0], [26900.0, 14.0], [28500.0, 4.0], [30100.0, 2.0], [30900.0, 1.0], [32500.0, 18.0], [33000.0, 6.0], [34600.0, 42.0], [36200.0, 4.0], [37800.0, 15.0], [39400.0, 10.0], [41000.0, 5.0], [42600.0, 9.0], [44200.0, 2.0], [45800.0, 3.0], [47400.0, 2.0], [50600.0, 2.0], [52200.0, 4.0], [53800.0, 2.0], [55400.0, 1.0], [60200.0, 1.0], [61800.0, 1.0], [65000.0, 1.0], [69200.0, 2.0], [66000.0, 5.0], [72400.0, 15.0], [88400.0, 2.0], [94800.0, 1.0], [101200.0, 2.0], [130000.0, 1.0], [131300.0, 35.0], [69100.0, 50.0], [72300.0, 1.0], [75500.0, 2.0], [78700.0, 2.0], [85100.0, 9.0], [97900.0, 1.0], [129900.0, 3.0], [193000.0, 3.0], [133100.0, 18.0], [34100.0, 7.0], [35700.0, 2.0], [38900.0, 10.0], [37300.0, 1.0], [40500.0, 2.0], [42100.0, 2.0], [43700.0, 4.0], [45300.0, 3.0], [48500.0, 4.0], [51700.0, 1.0], [56500.0, 3.0], [62900.0, 3.0], [68200.0, 2.0], [74600.0, 2.0], [87400.0, 3.0], [93800.0, 2.0], [100200.0, 71.0], [141300.0, 7.0], [67300.0, 1.0], [73700.0, 12.0], [70500.0, 2.0], [76900.0, 1.0], [80100.0, 2.0], [83300.0, 12.0], [128100.0, 44.0], [8300.0, 793.0], [8700.0, 41.0], [9100.0, 25.0], [9500.0, 89.0], [9900.0, 218.0], [10300.0, 226.0], [10700.0, 166.0], [11100.0, 210.0], [11500.0, 29.0], [11900.0, 163.0], [12700.0, 47.0], [12300.0, 22.0], [13100.0, 5.0], [13500.0, 6.0], [14300.0, 13.0], [13900.0, 5.0], [14700.0, 10.0], [15100.0, 8.0], [15500.0, 5.0], [16300.0, 5.0], [15900.0, 13.0], [17400.0, 2.0], [16600.0, 4.0], [18200.0, 16.0], [19000.0, 9.0], [19800.0, 4.0], [21400.0, 16.0], [20600.0, 13.0], [22200.0, 68.0], [23000.0, 3.0], [23800.0, 2.0], [25400.0, 18.0], [26200.0, 22.0], [27000.0, 7.0], [27800.0, 3.0], [28600.0, 1.0], [29400.0, 1.0], [30200.0, 2.0], [31000.0, 35.0], [33200.0, 6.0], [34800.0, 6.0], [143100.0, 1.0], [36400.0, 1.0], [38000.0, 2.0], [42800.0, 1.0], [41200.0, 9.0], [46000.0, 3.0], [47600.0, 3.0], [50800.0, 2.0], [52400.0, 2.0], [57200.0, 5.0], [55600.0, 2.0], [58800.0, 2.0], [60400.0, 2.0], [65200.0, 28.0], [63600.0, 24.0], [66400.0, 4.0], [69600.0, 1.0], [72800.0, 6.0], [79200.0, 3.0], [85600.0, 4.0], [82400.0, 2.0], [95200.0, 1.0], [98400.0, 1.0], [132800.0, 2.0], [171200.0, 1.0], [184000.0, 1.0], [136900.0, 16.0], [66300.0, 2.0], [69500.0, 3.0], [72700.0, 4.0], [75900.0, 12.0], [88700.0, 92.0], [91900.0, 2.0], [95100.0, 1.0], [101500.0, 1.0], [130300.0, 5.0], [34300.0, 1.0], [35900.0, 50.0], [37500.0, 15.0], [40700.0, 4.0], [42300.0, 18.0], [43900.0, 1.0], [45500.0, 3.0], [47100.0, 7.0], [50300.0, 1.0], [55100.0, 2.0], [56700.0, 7.0], [63100.0, 128.0], [64700.0, 2.0], [71800.0, 38.0], [75000.0, 5.0], [81400.0, 1.0], [84600.0, 1.0], [87800.0, 4.0], [100600.0, 1.0], [119800.0, 2.0], [126200.0, 2.0], [129400.0, 19.0], [146900.0, 10.0], [67700.0, 3.0], [70900.0, 3.0], [74100.0, 28.0], [90100.0, 1.0], [96500.0, 2.0], [109300.0, 2.0], [112500.0, 1.0], [128500.0, 22.0], [131800.0, 1.0], [144600.0, 1.0], [16700.0, 13.0], [18300.0, 16.0], [17500.0, 3.0], [19100.0, 3.0], [19900.0, 9.0], [21500.0, 11.0], [20700.0, 12.0], [23100.0, 4.0], [23900.0, 11.0], [24700.0, 18.0], [25500.0, 5.0], [27100.0, 17.0], [27900.0, 2.0], [28700.0, 6.0], [30300.0, 8.0], [31100.0, 18.0], [31900.0, 3.0], [33400.0, 7.0], [35000.0, 4.0], [36600.0, 23.0], [41400.0, 123.0], [43000.0, 1.0], [46200.0, 44.0], [47800.0, 2.0], [49400.0, 3.0], [54200.0, 1.0], [57400.0, 1.0], [60600.0, 1.0], [62200.0, 2.0], [65400.0, 9.0], [63800.0, 13.0], [66800.0, 2.0], [73200.0, 12.0], [70000.0, 1.0], [76400.0, 1.0], [95600.0, 1.0], [102000.0, 1.0], [114800.0, 1.0], [130800.0, 4.0], [127600.0, 2.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 248100.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 775.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 137634.0, "series": [{"data": [[0.0, 137634.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 16489.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 25102.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 775.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 17.36363636363637, "minX": 1.68287646E12, "maxY": 3000.0, "series": [{"data": [[1.68287676E12, 527.2058823529417], [1.68287646E12, 3000.0], [1.68287658E12, 3000.0], [1.68287652E12, 3000.0], [1.6828767E12, 2950.502136449808], [1.68287664E12, 3000.0], [1.68287682E12, 17.36363636363637]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68287682E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 37.0, "minX": 2.0, "maxY": 200630.0, "series": [{"data": [[2.0, 131111.0], [3.0, 131064.0], [6.0, 131064.0], [7.0, 126277.0], [8.0, 126275.0], [9.0, 109902.0], [10.0, 110928.0], [13.0, 163115.0], [14.0, 163114.33333333334], [15.0, 129817.0], [17.0, 137406.5], [18.0, 116115.0], [19.0, 111351.0], [20.0, 100150.0], [21.0, 100014.0], [22.0, 100160.0], [23.0, 100388.0], [25.0, 109028.5], [26.0, 109028.0], [27.0, 109027.0], [28.0, 109024.0], [30.0, 109023.0], [31.0, 109020.0], [33.0, 114878.0], [32.0, 84851.0], [34.0, 200630.0], [37.0, 72532.0], [36.0, 49574.5], [39.0, 64455.5], [41.0, 64458.0], [40.0, 64456.0], [43.0, 64452.0], [42.0, 64457.0], [45.0, 64389.0], [44.0, 64450.0], [47.0, 57318.0], [46.0, 57319.0], [49.0, 57220.0], [48.0, 57227.0], [50.0, 57218.0], [53.0, 46452.333333333336], [55.0, 41445.0], [57.0, 41447.0], [58.0, 46451.666666666664], [62.0, 41444.0], [67.0, 48954.5], [66.0, 45199.5], [64.0, 41444.5], [71.0, 46448.333333333336], [69.0, 41444.0], [74.0, 56461.5], [73.0, 41442.0], [78.0, 41444.0], [77.0, 41442.0], [76.0, 41440.0], [83.0, 41439.333333333336], [80.0, 46445.666666666664], [87.0, 41437.0], [86.0, 41439.0], [84.0, 56458.0], [91.0, 56456.0], [89.0, 41437.5], [88.0, 41437.0], [93.0, 46442.333333333336], [99.0, 41436.0], [98.0, 48946.0], [97.0, 56456.0], [96.0, 41435.5], [102.0, 48945.5], [100.0, 41435.0], [107.0, 56453.0], [106.0, 41434.25], [111.0, 41428.0], [110.0, 41432.0], [109.0, 41433.0], [115.0, 41426.0], [113.0, 41430.0], [119.0, 41425.5], [117.0, 41427.0], [116.0, 41426.0], [122.0, 41422.0], [121.0, 41426.5], [127.0, 41419.0], [126.0, 41421.0], [125.0, 41421.333333333336], [135.0, 41411.0], [133.0, 41413.0], [132.0, 41414.0], [129.0, 41415.0], [128.0, 41418.0], [143.0, 41384.5], [141.0, 41387.0], [140.0, 41385.0], [139.0, 41409.0], [138.0, 41411.0], [136.0, 41412.5], [151.0, 41380.5], [150.0, 41382.0], [146.0, 41381.0], [145.0, 41384.0], [158.0, 41376.0], [157.0, 41380.0], [156.0, 41379.666666666664], [153.0, 41382.666666666664], [167.0, 41362.0], [166.0, 41364.0], [164.0, 41365.0], [163.0, 41365.0], [162.0, 41367.0], [161.0, 41369.0], [160.0, 41371.0], [175.0, 41354.0], [174.0, 41354.5], [172.0, 41353.0], [171.0, 41352.0], [170.0, 41354.0], [169.0, 41353.0], [168.0, 41355.0], [182.0, 41349.5], [180.0, 41353.333333333336], [177.0, 41352.0], [190.0, 41343.666666666664], [189.0, 41346.0], [186.0, 41346.5], [184.0, 41346.5], [199.0, 41333.0], [198.0, 41334.0], [197.0, 41338.5], [195.0, 41338.0], [194.0, 41341.0], [193.0, 41342.0], [192.0, 41344.0], [207.0, 41306.0], [206.0, 41317.0], [205.0, 41324.0], [204.0, 41327.0], [203.0, 41329.333333333336], [200.0, 41333.0], [215.0, 39334.0], [214.0, 39336.0], [213.0, 39338.0], [211.0, 39339.5], [210.0, 39338.0], [208.0, 41303.0], [222.0, 39321.5], [220.0, 39325.0], [219.0, 39326.0], [218.0, 39329.0], [217.0, 39331.0], [216.0, 39331.0], [231.0, 37750.0], [230.0, 37751.0], [229.0, 37753.0], [228.0, 37754.5], [227.0, 37754.5], [224.0, 39288.5], [238.0, 37739.0], [237.0, 37741.0], [236.0, 37741.0], [235.0, 37746.0], [234.0, 37746.0], [232.0, 37749.0], [247.0, 37725.0], [246.0, 37725.0], [245.0, 37727.0], [244.0, 37729.0], [243.0, 37731.0], [242.0, 37732.0], [240.0, 37738.5], [255.0, 37701.0], [254.0, 37707.0], [253.0, 37707.0], [252.0, 37712.0], [251.0, 37715.0], [250.0, 37723.0], [249.0, 37724.0], [259.0, 37169.0], [271.0, 37166.333333333336], [270.0, 37166.0], [267.0, 37169.0], [266.0, 37168.5], [264.0, 37170.5], [262.0, 37168.0], [260.0, 37169.5], [257.0, 37696.0], [256.0, 37699.0], [275.0, 37158.0], [285.0, 37151.0], [287.0, 37148.0], [284.0, 37151.0], [282.0, 37151.0], [281.0, 37152.5], [278.0, 37154.0], [277.0, 37156.0], [276.0, 37156.0], [274.0, 37161.0], [273.0, 37162.0], [272.0, 37165.0], [302.0, 50473.0], [301.0, 64066.0], [291.0, 37147.0], [290.0, 37147.333333333336], [299.0, 37122.0], [298.0, 37131.0], [297.0, 37132.0], [296.0, 37140.0], [295.0, 37144.0], [294.0, 37142.0], [293.0, 37146.0], [317.0, 42231.5], [319.0, 50469.5], [316.0, 36876.0], [315.0, 62324.333333333336], [314.0, 36878.0], [312.0, 51897.0], [310.0, 64066.0], [309.0, 51896.5], [306.0, 44388.0], [305.0, 51898.0], [304.0, 51898.0], [335.0, 40624.25], [331.0, 64058.0], [330.0, 36872.0], [329.0, 36871.5], [327.0, 47581.0], [325.0, 36873.5], [323.0, 36874.0], [321.0, 36875.0], [320.0, 36875.0], [350.0, 36861.5], [351.0, 64049.0], [349.0, 36863.0], [347.0, 36861.5], [345.0, 36862.0], [344.0, 36864.0], [341.0, 51883.0], [340.0, 64053.0], [339.0, 64054.0], [338.0, 36866.0], [337.0, 64056.0], [336.0, 36869.0], [366.0, 36855.666666666664], [363.0, 36855.0], [362.0, 36858.0], [359.0, 36859.5], [357.0, 36860.0], [356.0, 36860.0], [355.0, 70996.0], [353.0, 36860.0], [381.0, 36819.0], [383.0, 36818.0], [380.0, 36830.0], [379.0, 36835.5], [377.0, 36847.0], [376.0, 36848.0], [375.0, 36847.666666666664], [374.0, 36848.0], [371.0, 36847.666666666664], [368.0, 36849.0], [398.0, 36814.0], [395.0, 36815.0], [393.0, 36815.0], [392.0, 36815.0], [391.0, 36816.0], [384.0, 36817.0], [390.0, 36818.0], [389.0, 36815.0], [387.0, 36817.0], [386.0, 36816.5], [414.0, 36807.0], [415.0, 36780.0], [412.0, 44317.5], [410.0, 36808.0], [409.0, 36808.0], [408.0, 50403.5], [406.0, 50404.5], [404.0, 36812.0], [403.0, 36812.0], [402.0, 36812.0], [400.0, 44322.0], [418.0, 36777.0], [427.0, 36119.0], [425.0, 36120.0], [423.0, 36772.5], [421.0, 63959.0], [420.0, 36774.0], [419.0, 36777.0], [417.0, 36778.0], [416.0, 36775.0], [446.0, 35239.0], [445.0, 36180.0], [444.0, 35242.73333333333], [461.0, 35934.5], [462.0, 35934.0], [460.0, 35230.0], [449.0, 36646.0], [448.0, 35238.0], [457.0, 36640.0], [456.0, 36638.0], [455.0, 35232.0], [454.0, 35236.0], [453.0, 36643.0], [452.0, 36174.0], [478.0, 35220.0], [479.0, 36627.0], [477.0, 36630.0], [476.0, 36633.0], [475.0, 35224.0], [473.0, 35225.0], [472.0, 35225.5], [470.0, 35226.0], [467.0, 35228.333333333336], [465.0, 69910.0], [464.0, 35229.0], [469.0, 35228.0], [493.0, 35208.0], [494.0, 35203.0], [492.0, 35910.0], [482.0, 36623.0], [481.0, 35218.0], [490.0, 36617.0], [489.0, 36615.0], [488.0, 35210.0], [487.0, 35213.0], [486.0, 36623.0], [485.0, 35215.0], [484.0, 35919.5], [510.0, 35193.0], [511.0, 35192.0], [509.0, 36599.0], [498.0, 52170.5], [496.0, 35204.5], [507.0, 35194.0], [506.0, 35897.5], [504.0, 52538.0], [502.0, 35202.0], [501.0, 36608.0], [500.0, 35201.0], [531.0, 36577.5], [543.0, 36573.0], [540.0, 36572.0], [538.0, 36572.0], [537.0, 35870.5], [525.0, 35170.0], [514.0, 35890.5], [512.0, 35187.0], [517.0, 52147.5], [515.0, 35182.0], [519.0, 35177.0], [518.0, 36589.0], [524.0, 36578.0], [523.0, 35878.5], [521.0, 35178.0], [520.0, 36584.0], [535.0, 36578.0], [534.0, 35873.0], [532.0, 36578.0], [529.0, 36577.5], [528.0, 35873.5], [573.0, 34455.5], [575.0, 34274.0], [571.0, 34276.0], [570.0, 62838.0], [568.0, 48571.0], [549.0, 36555.0], [547.0, 36555.0], [545.0, 36557.0], [544.0, 36572.666666666664], [556.0, 34641.0], [555.0, 35606.0], [552.0, 35615.333333333336], [567.0, 34640.0], [564.0, 34461.0], [561.0, 34279.0], [560.0, 34280.0], [605.0, 34615.5], [606.0, 34617.0], [593.0, 34622.666666666664], [592.0, 34503.333333333336], [604.0, 34616.0], [602.0, 34617.0], [601.0, 34618.0], [600.0, 41249.0], [587.0, 34270.0], [583.0, 34632.0], [582.0, 48642.0], [580.0, 34633.0], [578.0, 34454.0], [586.0, 34632.0], [599.0, 34619.5], [598.0, 34619.0], [596.0, 34440.0], [594.0, 34620.0], [633.0, 34413.5], [638.0, 34584.0], [639.0, 34582.0], [624.0, 34603.0], [626.0, 34601.0], [625.0, 34241.0], [637.0, 34585.0], [636.0, 34586.5], [634.0, 34229.0], [623.0, 34606.0], [609.0, 34613.0], [611.0, 34612.0], [610.0, 34612.333333333336], [615.0, 34429.0], [613.0, 37926.0], [622.0, 41235.0], [621.0, 34425.5], [619.0, 34426.0], [618.0, 34608.0], [616.0, 34610.0], [631.0, 34595.0], [629.0, 34595.0], [628.0, 34236.0], [627.0, 34599.0], [665.0, 33534.0], [669.0, 33529.0], [670.0, 33515.0], [658.0, 34511.5], [656.0, 34515.5], [661.0, 33762.0], [660.0, 34124.5], [668.0, 33530.0], [667.0, 33532.0], [666.0, 33532.0], [664.0, 33534.0], [646.0, 34568.0], [645.0, 34568.0], [643.0, 34570.0], [642.0, 34579.0], [641.0, 34579.0], [640.0, 34580.0], [654.0, 34516.0], [653.0, 34547.0], [652.0, 34373.0], [650.0, 34556.0], [649.0, 34565.5], [648.0, 34205.0], [663.0, 34122.0], [662.0, 34124.0], [699.0, 33185.0], [690.0, 33191.0], [702.0, 33184.5], [703.0, 33184.0], [689.0, 33193.0], [700.0, 33185.5], [697.0, 33186.333333333336], [679.0, 33195.0], [678.0, 33504.5], [676.0, 33510.0], [675.0, 33513.0], [674.0, 33515.0], [673.0, 33514.0], [672.0, 33513.0], [685.0, 33192.0], [684.0, 33193.5], [683.0, 33194.0], [682.0, 33193.0], [681.0, 33194.0], [694.0, 33187.0], [692.0, 33189.0], [691.0, 33190.0], [734.0, 33157.333333333336], [735.0, 33150.0], [720.0, 33176.0], [722.0, 33175.0], [721.0, 33176.0], [731.0, 33159.0], [730.0, 33160.0], [729.0, 33161.0], [728.0, 33162.0], [719.0, 33177.0], [705.0, 33184.0], [708.0, 33181.0], [707.0, 33183.5], [711.0, 33180.5], [710.0, 33180.0], [718.0, 33177.5], [716.0, 33178.0], [713.0, 33179.0], [712.0, 33179.0], [727.0, 33163.0], [726.0, 33164.0], [725.0, 33165.0], [723.0, 33172.0], [761.0, 32507.0], [766.0, 32499.0], [767.0, 41795.0], [752.0, 32513.0], [764.0, 33479.0], [763.0, 33482.0], [762.0, 32502.0], [760.0, 32508.5], [742.0, 33474.0], [740.0, 33147.0], [738.0, 33149.0], [737.0, 33150.0], [751.0, 33122.5], [749.0, 33133.0], [748.0, 33134.0], [747.0, 33135.0], [746.0, 33145.0], [745.0, 33146.0], [744.0, 33145.5], [758.0, 33489.333333333336], [755.0, 33164.333333333336], [798.0, 33082.0], [799.0, 32511.0], [785.0, 33109.0], [784.0, 33112.0], [797.0, 33084.5], [795.0, 41407.0], [794.0, 33090.5], [792.0, 41414.0], [783.0, 33111.0], [768.0, 33119.0], [774.0, 37277.0], [772.0, 32139.25], [782.0, 35787.0], [781.0, 32133.0], [780.0, 32625.0], [778.0, 32136.0], [777.0, 32137.0], [776.0, 32138.0], [791.0, 35774.0], [790.0, 37263.5], [788.0, 33105.5], [786.0, 41424.0], [826.0, 33681.0], [819.0, 33687.0], [828.0, 43630.0], [829.0, 43626.0], [818.0, 34959.0], [817.0, 33685.0], [827.0, 39295.0], [824.0, 34954.0], [806.0, 32508.0], [805.0, 32508.0], [804.0, 32511.0], [803.0, 32513.0], [802.0, 32510.0], [801.0, 32512.0], [800.0, 40831.0], [815.0, 35108.0], [813.0, 63153.0], [812.0, 63154.0], [810.0, 32473.0], [808.0, 32477.0], [823.0, 34958.0], [822.0, 43640.5], [820.0, 34959.0], [861.0, 96188.5], [852.0, 47577.0], [863.0, 54644.5], [849.0, 23070.0], [848.0, 21791.0], [851.0, 68584.0], [850.0, 68583.0], [859.0, 145053.0], [857.0, 54646.0], [856.0, 54648.0], [838.0, 41743.0], [836.0, 34915.0], [835.0, 34916.0], [834.0, 34920.0], [833.0, 34921.0], [832.0, 34921.333333333336], [847.0, 38088.0], [846.0, 47127.0], [845.0, 47129.0], [844.0, 47131.0], [843.0, 47131.0], [842.0, 47132.0], [841.0, 47131.0], [840.0, 41742.0], [855.0, 54647.0], [854.0, 54650.0], [853.0, 39945.0], [892.0, 42601.0], [895.0, 42589.0], [880.0, 30712.666666666668], [884.0, 35938.0], [882.0, 42535.0], [894.0, 19981.0], [893.0, 19991.0], [891.0, 19994.0], [890.0, 42603.0], [889.0, 42453.0], [888.0, 25878.5], [879.0, 21054.0], [865.0, 31409.0], [864.0, 39936.0], [867.0, 31404.0], [866.0, 31408.0], [869.0, 31396.0], [868.0, 31400.0], [876.0, 30713.0], [875.0, 30714.5], [873.0, 30714.333333333332], [872.0, 30716.0], [886.0, 47190.0], [885.0, 79748.0], [921.0, 43375.0], [915.0, 31004.0], [926.0, 54445.5], [924.0, 44164.5], [922.0, 56233.0], [911.0, 32970.0], [897.0, 30670.0], [896.0, 30688.0], [899.0, 21009.0], [898.0, 34981.0], [901.0, 19958.0], [900.0, 21008.0], [903.0, 30662.0], [902.0, 19958.0], [909.0, 21007.0], [907.0, 49027.0], [906.0, 30673.0], [918.0, 170194.0], [917.0, 48177.0], [916.0, 54455.0], [913.0, 20478.5], [912.0, 30931.0], [953.0, 34776.0], [947.0, 39223.0], [957.0, 35760.0], [959.0, 170176.0], [946.0, 40925.0], [945.0, 26309.0], [955.0, 52101.0], [952.0, 56223.5], [935.0, 42370.0], [934.0, 34783.0], [933.0, 33725.5], [931.0, 38581.0], [930.0, 40929.0], [929.0, 42374.0], [928.0, 41556.0], [942.0, 61132.0], [941.0, 47044.0], [939.0, 46037.5], [937.0, 48117.0], [951.0, 171208.0], [950.0, 57526.0], [949.0, 53893.0], [988.0, 56970.0], [989.0, 31120.0], [976.0, 57213.0], [979.0, 56556.0], [978.0, 111922.5], [987.0, 56932.0], [986.0, 55131.0], [985.0, 55132.0], [984.0, 56141.0], [975.0, 57512.0], [961.0, 57407.5], [960.0, 32947.0], [965.0, 53887.0], [963.0, 52933.0], [967.0, 51765.0], [966.0, 54432.0], [974.0, 108264.5], [971.0, 41534.0], [970.0, 60007.0], [969.0, 49101.5], [983.0, 184004.0], [982.0, 185011.0], [981.0, 56788.0], [980.0, 56553.0], [1018.0, 63955.0], [1012.0, 66088.0], [1019.0, 63956.0], [1009.0, 59161.0], [1008.0, 59162.0], [1017.0, 64964.0], [1016.0, 65150.0], [1007.0, 60173.0], [997.0, 31119.5], [999.0, 31119.0], [998.0, 31119.75], [1006.0, 60174.0], [1005.0, 61180.0], [1004.0, 56365.0], [1003.0, 55960.0], [1002.0, 55963.0], [1001.0, 31117.5], [1000.0, 31119.0], [1015.0, 65151.0], [1014.0, 66720.0], [1013.0, 66722.0], [1011.0, 67731.0], [1010.0, 68739.0], [1126.0, 358.0], [1144.0, 356.25], [1146.0, 357.0], [1120.0, 15377.0], [1128.0, 356.6], [1124.0, 4112.5], [1130.0, 4111.75], [1138.0, 358.0], [1136.0, 2501.1428571428573], [1134.0, 356.952380952381], [1132.0, 358.2], [1212.0, 291.8333333333333], [1184.0, 351.3333333333333], [1186.0, 348.0], [1192.0, 351.0], [1196.0, 349.6666666666667], [1214.0, 293.0], [1204.0, 347.0], [1154.0, 356.0], [1156.0, 353.0], [1170.0, 350.3333333333333], [1168.0, 351.0], [1198.0, 350.6666666666667], [1216.0, 79579.0], [1590.0, 2331.3529411764703], [1592.0, 355.8], [1594.0, 355.0], [1596.0, 356.4], [1598.0, 355.5], [1570.0, 358.5], [1656.0, 354.0], [1654.0, 34475.66666666667], [1662.0, 353.0], [1634.0, 354.0], [1632.0, 353.6666666666667], [1636.0, 354.0], [1642.0, 354.0], [1644.0, 354.6666666666667], [1646.0, 354.0], [1660.0, 353.0], [1652.0, 353.8], [1650.0, 355.0], [1648.0, 353.6666666666667], [1614.0, 2126.4356435643567], [1612.0, 355.6], [1610.0, 354.8571428571429], [1608.0, 355.5], [1606.0, 355.6666666666667], [1604.0, 356.3333333333333], [1602.0, 355.3333333333333], [1600.0, 355.375], [1630.0, 355.0], [1628.0, 354.0], [1626.0, 355.0], [1624.0, 355.0], [1622.0, 354.2], [1620.0, 354.625], [1618.0, 354.42857142857144], [1616.0, 354.4], [1674.0, 50952.00000000001], [1726.0, 343.0], [1670.0, 352.0], [1668.0, 353.3333333333333], [1776.0, 339.0], [1778.0, 338.0], [1766.0, 338.4], [1782.0, 30513.400000000005], [1760.0, 339.0], [1740.0, 341.0], [1736.0, 33914.0], [1734.0, 342.2], [1732.0, 342.0], [1742.0, 343.0], [1758.0, 339.5], [1756.0, 339.0], [1752.0, 339.0], [1748.0, 341.0], [1744.0, 341.8], [1774.0, 339.0], [1764.0, 338.6], [1762.0, 338.0], [1802.0, 9192.049999999997], [1942.0, 398.6666666666667], [1950.0, 397.3333333333333], [1954.0, 67172.33333333333], [1960.0, 398.0], [1958.0, 397.0], [2022.0, 100752.0], [2044.0, 394.0], [2116.0, 366.2], [2128.0, 364.2], [2136.0, 365.5], [2112.0, 366.4166666666667], [2120.0, 366.33333333333337], [2124.0, 366.0], [2132.0, 364.5], [2140.0, 364.0], [2148.0, 365.0], [2144.0, 364.7142857142857], [2108.0, 366.1428571428571], [2100.0, 368.92307692307685], [2104.0, 366.6818181818181], [2180.0, 101950.0], [2416.0, 385.0], [2556.0, 377.0], [2504.0, 380.125], [2508.0, 379.85714285714283], [2516.0, 379.83333333333337], [2520.0, 379.75], [2524.0, 379.3333333333333], [2552.0, 377.92307692307696], [2544.0, 379.0], [2540.0, 377.43749999999994], [2536.0, 378.0], [2532.0, 379.0], [2528.0, 379.25000000000006], [2444.0, 385.0], [2680.0, 147.0], [2676.0, 146.0], [2644.0, 152.66666666666666], [2672.0, 147.5], [2560.0, 379.0], [2804.0, 4863.333333333333], [2752.0, 31079.0], [2756.0, 31078.75], [2768.0, 31078.0], [2772.0, 31076.0], [2776.0, 31076.0], [2800.0, 7538.6], [2792.0, 4542.0], [2692.0, 145.0], [2740.0, 143.0], [2732.0, 144.85714285714286], [2728.0, 145.16666666666666], [2872.0, 9649.0], [2816.0, 7297.4], [2868.0, 7959.6], [2856.0, 8040.25], [2852.0, 9681.0], [2848.0, 7644.0], [3000.0, 3233.5502645203924], [2984.0, 343.0], [2980.0, 345.0], [2976.0, 347.0], [2125.0, 364.85714285714283], [2117.0, 366.7142857142857], [2113.0, 366.4444444444445], [2121.0, 365.27777777777777], [2129.0, 364.0], [2133.0, 365.0], [2137.0, 366.0], [2141.0, 364.0], [2173.0, 254.6], [2157.0, 255.16666666666666], [2149.0, 364.6], [2145.0, 366.0], [2109.0, 367.37500000000006], [2105.0, 366.0], [2101.0, 367.0], [2181.0, 101577.0], [2177.0, 187.0], [2421.0, 388.0], [2501.0, 379.5], [2553.0, 377.77777777777777], [2549.0, 379.3333333333333], [2557.0, 378.25], [2505.0, 380.5], [2509.0, 379.83333333333337], [2513.0, 379.625], [2521.0, 378.8461538461539], [2525.0, 379.14285714285717], [2545.0, 377.75], [2541.0, 378.5], [2537.0, 377.3333333333333], [2533.0, 379.1428571428571], [2529.0, 378.0], [2441.0, 383.3333333333333], [2449.0, 384.0], [2461.0, 384.0], [2465.0, 382.0], [2577.0, 183.57142857142856], [2573.0, 183.0], [2801.0, 4541.0], [2805.0, 12516.166666666666], [2769.0, 31077.5], [2761.0, 31078.0], [2777.0, 31074.0], [2797.0, 7655.0], [2717.0, 146.0], [2705.0, 146.0], [2693.0, 148.0], [2689.0, 145.0], [2745.0, 143.2], [2741.0, 143.0], [2737.0, 143.33333333333334], [2733.0, 144.57142857142856], [2729.0, 144.66666666666666], [2721.0, 145.33333333333334], [2821.0, 4540.0], [2829.0, 7207.0], [2817.0, 9973.0], [2837.0, 8467.2], [2841.0, 7205.0], [2845.0, 8670.5], [2865.0, 8660.5], [2981.0, 1671.4285714285713], [2945.0, 348.0], [1075.0, 359.0], [1127.0, 357.3333333333333], [1131.0, 356.5], [1121.0, 7866.5], [1125.0, 2860.5], [1123.0, 6794.0], [1129.0, 356.75000000000006], [1141.0, 357.0], [1139.0, 355.6666666666667], [1133.0, 356.8], [1135.0, 355.0], [1187.0, 349.0], [1189.0, 350.0], [1215.0, 62654.0], [1195.0, 351.0], [1193.0, 351.0], [1197.0, 351.0], [1213.0, 290.0], [1211.0, 293.0], [1205.0, 348.9411764705882], [1201.0, 351.0], [1179.0, 353.0], [1153.0, 353.0], [1161.0, 354.0], [1177.0, 350.0], [1173.0, 352.0], [1199.0, 350.0], [1323.0, 376.0], [1591.0, 356.0], [1593.0, 355.6666666666667], [1563.0, 361.0], [1595.0, 356.0], [1597.0, 356.1666666666667], [1599.0, 356.0], [1569.0, 359.3333333333333], [1655.0, 354.0], [1639.0, 353.6], [1659.0, 354.3333333333333], [1637.0, 353.4], [1641.0, 354.0], [1643.0, 17139.166666666668], [1645.0, 353.0], [1647.0, 354.0], [1661.0, 8776.145833333336], [1657.0, 354.14285714285717], [1651.0, 354.0], [1649.0, 353.5], [1615.0, 356.0], [1613.0, 354.5], [1611.0, 355.5], [1609.0, 355.0], [1607.0, 355.5], [1605.0, 356.8], [1603.0, 356.0], [1601.0, 356.0], [1629.0, 354.0], [1625.0, 354.0], [1623.0, 354.75], [1619.0, 354.3333333333333], [1617.0, 354.35714285714283], [1727.0, 343.0], [1675.0, 708.0], [1673.0, 352.5], [1669.0, 352.6666666666667], [1667.0, 353.0], [1731.0, 344.0], [1761.0, 339.0], [1743.0, 341.0], [1733.0, 342.0], [1729.0, 343.5], [1741.0, 341.5], [1759.0, 339.0], [1757.0, 339.24999999999994], [1755.0, 338.6666666666667], [1747.0, 340.2857142857143], [1745.0, 340.0], [1771.0, 339.0], [1767.0, 101053.0], [1949.0, 400.0], [1945.0, 398.0], [1947.0, 398.0], [1953.0, 100560.0], [1957.0, 50576.0], [1959.0, 86390.42857142858], [2037.0, 37.0], [2039.0, 37.0], [2122.0, 366.0], [2170.0, 257.0], [2114.0, 366.8333333333333], [2118.0, 368.0], [2126.0, 364.6666666666667], [2130.0, 364.75], [2134.0, 364.0], [2138.0, 364.0], [2142.0, 365.0], [2166.0, 255.0], [2150.0, 363.93750000000006], [2146.0, 365.5], [2110.0, 366.72727272727275], [2106.0, 367.3333333333333], [2102.0, 368.0], [2178.0, 101953.0], [2430.0, 77599.0], [2422.0, 386.0], [2418.0, 386.3333333333333], [2410.0, 388.0], [2510.0, 379.8888888888889], [2554.0, 378.0], [2502.0, 379.5], [2506.0, 379.0], [2514.0, 380.3333333333333], [2518.0, 379.0714285714286], [2522.0, 379.0], [2526.0, 379.0], [2546.0, 378.68749999999994], [2542.0, 378.08333333333326], [2538.0, 377.0], [2534.0, 377.75], [2530.0, 379.0], [2474.0, 381.0], [2442.0, 384.4], [2686.0, 146.0], [2646.0, 152.0], [2682.0, 149.0], [2670.0, 148.0], [2662.0, 148.0], [2562.0, 377.42105263157896], [2702.0, 147.0], [2814.0, 4539.0], [2762.0, 31079.0], [2770.0, 31077.0], [2774.0, 31078.0], [2778.0, 161910.0], [2694.0, 146.5], [2746.0, 64.0], [2738.0, 143.5], [2734.0, 144.77777777777777], [2722.0, 145.0], [2818.0, 8081.125000000001], [2834.0, 7206.0], [2866.0, 7639.0], [2822.0, 7653.666666666667], [2830.0, 8379.2], [2846.0, 4530.0], [2870.0, 9676.0], [2862.0, 9681.0], [2850.0, 9682.0], [2990.0, 344.0], [2982.0, 345.0], [2123.0, 365.7142857142857], [2175.0, 190.5], [2115.0, 365.0], [2119.0, 366.2], [2127.0, 363.0], [2131.0, 364.0], [2135.0, 363.0], [2139.0, 363.0], [2143.0, 365.0], [2171.0, 257.0], [2163.0, 255.0], [2111.0, 366.6666666666667], [2107.0, 365.5], [2087.0, 374.35714285714283], [2103.0, 368.0], [2179.0, 101952.0], [2555.0, 377.8666666666667], [2507.0, 9988.125], [2511.0, 380.3333333333333], [2523.0, 379.125], [2551.0, 377.74999999999994], [2547.0, 378.0], [2543.0, 377.55555555555554], [2539.0, 378.0], [2535.0, 378.1], [2531.0, 379.0833333333333], [2443.0, 385.0], [2451.0, 384.0], [2471.0, 381.0], [2667.0, 148.0], [2659.0, 149.0], [2755.0, 31079.0], [2815.0, 7208.0], [2759.0, 31078.0], [2763.0, 31077.0], [2767.0, 31077.25], [2775.0, 31075.0], [2811.0, 4541.0], [2719.0, 145.5], [2715.0, 146.0], [2711.0, 145.0], [2707.0, 145.5], [2747.0, 63.0], [2743.0, 145.0], [2739.0, 143.87096774193543], [2735.0, 144.0], [2731.0, 145.5], [2727.0, 144.62499999999997], [2723.0, 145.0], [2827.0, 9013.0], [2839.0, 7652.0], [2843.0, 8288.4], [2847.0, 7643.0], [2859.0, 8321.333333333334], [2851.0, 7643.0], [2967.0, 346.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[2976.1898833333285, 3463.852977777774]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 3000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 277.2, "minX": 1.68287646E12, "maxY": 498786.11666666664, "series": [{"data": [[1.68287676E12, 10444.933333333332], [1.68287646E12, 292184.86666666664], [1.68287658E12, 454773.5833333333], [1.68287652E12, 491231.3333333333], [1.6828767E12, 422388.86666666664], [1.68287664E12, 498786.11666666664], [1.68287682E12, 372.3333333333333]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.68287676E12, 8282.4], [1.68287646E12, 202272.0], [1.68287658E12, 311362.8], [1.68287652E12, 340393.2], [1.6828767E12, 296830.8], [1.68287664E12, 346071.6], [1.68287682E12, 277.2]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68287682E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 2404.1814087998505, "minX": 1.68287646E12, "maxY": 121729.0, "series": [{"data": [[1.68287676E12, 41042.75557809335], [1.68287646E12, 2404.1814087998505], [1.68287658E12, 3196.7107862822204], [1.68287652E12, 4190.027620918253], [1.6828767E12, 2584.707971363067], [1.68287664E12, 3371.0778401121797], [1.68287682E12, 121729.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68287682E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 2223.1108861805474, "minX": 1.68287646E12, "maxY": 121729.0, "series": [{"data": [[1.68287676E12, 41042.74036511157], [1.68287646E12, 2223.1108861805474], [1.68287658E12, 2779.9295371188446], [1.68287652E12, 3813.659096489089], [1.6828767E12, 2578.473046775539], [1.68287664E12, 3164.3202108623086], [1.68287682E12, 121729.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68287682E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 142.02846519314178, "minX": 1.68287646E12, "maxY": 27262.606060606064, "series": [{"data": [[1.68287676E12, 3346.7647058823563], [1.68287646E12, 142.02846519314178], [1.68287658E12, 1490.3682167429492], [1.68287652E12, 959.2982322612165], [1.6828767E12, 967.9980757802973], [1.68287664E12, 1187.684214344438], [1.68287682E12, 27262.606060606064]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68287682E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 3.0, "minX": 1.68287646E12, "maxY": 248125.0, "series": [{"data": [[1.68287676E12, 200630.0], [1.68287646E12, 53100.0], [1.68287658E12, 154513.0], [1.68287652E12, 103226.0], [1.6828767E12, 248125.0], [1.68287664E12, 208301.0], [1.68287682E12, 163115.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.68287676E12, 56233.0], [1.68287646E12, 9278.0], [1.68287658E12, 666.0], [1.68287652E12, 7160.0], [1.6828767E12, 1003.0], [1.68287664E12, 6368.0], [1.68287682E12, 163114.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.68287676E12, 145053.13], [1.68287646E12, 41127.990000000005], [1.68287658E12, 100139.0], [1.68287652E12, 100147.99], [1.6828767E12, 59672.91000000018], [1.68287664E12, 100460.0], [1.68287682E12, 163115.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.68287676E12, 64051.6], [1.68287646E12, 12641.0], [1.68287658E12, 4106.0], [1.68287652E12, 10703.0], [1.6828767E12, 3569.0], [1.68287664E12, 16764.0], [1.68287682E12, 163115.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.68287676E12, 19774.0], [1.68287646E12, 16.0], [1.68287658E12, 7.0], [1.68287652E12, 3.0], [1.6828767E12, 24.0], [1.68287664E12, 15.0], [1.68287682E12, 84851.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.68287676E12, 36847.0], [1.68287646E12, 144.0], [1.68287658E12, 336.0], [1.68287652E12, 147.0], [1.6828767E12, 342.0], [1.68287664E12, 332.0], [1.68287682E12, 112886.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68287682E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 13.0, "minX": 1.0, "maxY": 144384.0, "series": [{"data": [[2.0, 62264.0], [3.0, 37330.0], [4.0, 59455.5], [5.0, 4216.0], [6.0, 30110.0], [7.0, 20922.0], [8.0, 84347.0], [9.0, 22272.0], [10.0, 7166.0], [11.0, 64455.0], [12.0, 32512.5], [14.0, 11625.0], [15.0, 31119.0], [16.0, 11760.5], [17.0, 9300.0], [18.0, 51110.5], [19.0, 46972.5], [20.0, 1185.5], [23.0, 6367.0], [25.0, 8956.0], [27.0, 8495.5], [30.0, 53397.0], [31.0, 141.0], [32.0, 3705.5], [33.0, 37732.0], [47.0, 32137.5], [53.0, 7960.0], [61.0, 7617.0], [63.0, 35923.0], [65.0, 66536.0], [76.0, 172.0], [78.0, 72.0], [81.0, 35300.0], [88.0, 33183.5], [98.0, 8595.5], [110.0, 264.0], [109.0, 42453.0], [108.0, 34595.0], [128.0, 35243.0], [136.0, 86.0], [155.0, 1099.0], [166.0, 36872.5], [161.0, 41418.0], [173.0, 26283.0], [169.0, 5205.0], [190.0, 272.0], [196.0, 36.5], [195.0, 356.0], [205.0, 81.0], [201.0, 91.0], [202.0, 100142.5], [229.0, 143.0], [237.0, 13.0], [246.0, 10099.0], [284.0, 194.0], [296.0, 160.0], [291.0, 339.0], [318.0, 139.0], [313.0, 151.0], [335.0, 129.0], [325.0, 194.0], [328.0, 204.0], [358.0, 194.0], [374.0, 79.0], [399.0, 366.0], [412.0, 8135.5], [407.0, 100096.0], [403.0, 8323.0], [420.0, 112.5], [416.0, 11326.0], [438.0, 85.5], [454.0, 7718.0], [476.0, 68.0], [471.0, 304.0], [477.0, 290.0], [484.0, 9258.0], [498.0, 7114.5], [510.0, 290.0], [520.0, 238.0], [543.0, 610.0], [540.0, 326.0], [521.0, 265.0], [546.0, 8342.0], [566.0, 378.0], [569.0, 327.0], [573.0, 268.0], [554.0, 345.0], [568.0, 354.0], [602.0, 178.0], [604.0, 137.0], [603.0, 321.0], [578.0, 309.0], [590.0, 284.0], [605.0, 55.0], [600.0, 339.0], [581.0, 337.0], [580.0, 314.0], [583.0, 292.0], [579.0, 317.0], [601.0, 323.0], [592.0, 281.0], [606.0, 329.0], [607.0, 321.0], [599.0, 329.0], [595.0, 347.0], [594.0, 291.5], [596.0, 266.0], [613.0, 306.0], [611.0, 8696.0], [635.0, 107.0], [608.0, 9042.0], [623.0, 139.0], [624.0, 258.0], [612.0, 351.0], [639.0, 392.0], [618.0, 402.0], [632.0, 323.0], [633.0, 336.0], [666.0, 49.0], [670.0, 52.0], [653.0, 341.0], [650.0, 342.0], [687.0, 85.0], [696.0, 324.0], [676.0, 491.0], [703.0, 303.0], [698.0, 276.0], [731.0, 5658.0], [728.0, 324.0], [712.0, 431.0], [751.0, 8297.0], [754.0, 204.0], [763.0, 7038.0], [759.0, 333.0], [750.0, 298.0], [746.0, 412.0], [788.0, 88.0], [794.0, 122.0], [782.0, 6193.0], [769.0, 6787.0], [768.0, 519.0], [808.0, 350.0], [828.0, 309.0], [803.0, 333.0], [850.0, 140.0], [844.0, 84.0], [840.0, 6758.0], [852.0, 349.0], [842.0, 372.0], [885.0, 63.0], [878.0, 194.0], [886.0, 291.0], [891.0, 60.0], [876.0, 6853.5], [909.0, 184.0], [955.0, 64.0], [948.0, 284.0], [952.0, 362.0], [947.0, 331.0], [962.0, 161.0], [986.0, 290.5], [961.0, 317.0], [985.0, 329.0], [1020.0, 118.0], [1022.0, 78.0], [1010.0, 171.0], [1009.0, 353.0], [1042.0, 164.0], [1067.0, 346.0], [1026.0, 292.0], [1058.0, 334.5], [1064.0, 590.0], [1048.0, 307.0], [1125.0, 193.0], [1147.0, 275.0], [1140.0, 462.0], [1151.0, 438.0], [1206.0, 406.0], [1208.0, 123.0], [1212.0, 97.0], [1191.0, 285.0], [1210.0, 169.0], [1173.0, 345.0], [1192.0, 342.0], [1194.0, 608.0], [1203.0, 313.0], [1169.0, 407.0], [1168.0, 285.0], [1177.0, 234.0], [1166.0, 298.0], [1269.0, 712.0], [1220.0, 24.0], [1276.0, 57.0], [1225.0, 640.0], [1248.0, 681.0], [1229.0, 482.0], [1255.0, 382.0], [1245.0, 346.0], [1259.0, 673.0], [1282.0, 31.0], [1285.0, 327.0], [1367.0, 42.0], [1373.0, 49.0], [1360.0, 307.0], [1397.0, 329.0], [1418.0, 154.0], [1490.0, 154.0], [1522.0, 175.0], [1510.0, 29.0], [1562.0, 105.0], [1547.0, 160.0], [1654.0, 40.0], [1644.0, 615.0], [1697.0, 196.0], [1710.0, 327.0], [1739.0, 338.0], [1776.0, 636.0], [1802.0, 633.0], [1804.0, 334.0], [1854.0, 302.0], [1859.0, 334.0], [2132.0, 138.0], [2434.0, 998.5], [1.0, 100160.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[578.0, 13084.0], [635.0, 28174.0], [611.0, 44131.5], [623.0, 88747.0], [624.0, 9475.0], [613.0, 144384.0], [632.0, 28374.5], [612.0, 36963.0], [653.0, 69171.0], [728.0, 85684.0], [759.0, 26663.0], [746.0, 100843.0], [828.0, 10843.0], [850.0, 14096.0], [840.0, 28414.5], [852.0, 8196.0], [891.0, 83394.0], [909.0, 28113.0], [61.0, 16091.0], [1009.0, 37992.0], [1212.0, 90367.0], [1192.0, 23991.0], [1225.0, 26865.0], [1259.0, 119776.0], [5.0, 100281.0], [1367.0, 14851.0], [1360.0, 41216.5], [1490.0, 33168.0], [1644.0, 27183.0], [10.0, 16342.0], [14.0, 65209.0], [284.0, 11190.0], [19.0, 12238.0], [20.0, 38935.0], [471.0, 119733.0], [477.0, 91448.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 2434.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 100160.0, "series": [{"data": [[2.0, 62264.0], [3.0, 37330.0], [4.0, 59455.5], [5.0, 4216.0], [6.0, 30110.0], [7.0, 20922.0], [8.0, 84347.0], [9.0, 22272.0], [10.0, 7166.0], [11.0, 64455.0], [12.0, 32512.5], [14.0, 11625.0], [15.0, 31119.0], [16.0, 11760.5], [17.0, 9300.0], [18.0, 51110.5], [19.0, 46972.5], [20.0, 1185.5], [23.0, 6367.0], [25.0, 8956.0], [27.0, 8495.5], [30.0, 53397.0], [31.0, 141.0], [32.0, 3705.5], [33.0, 37732.0], [47.0, 32137.5], [53.0, 7960.0], [61.0, 7617.0], [63.0, 35923.0], [65.0, 66536.0], [76.0, 172.0], [78.0, 72.0], [81.0, 35300.0], [88.0, 33183.5], [98.0, 8595.5], [110.0, 264.0], [109.0, 42453.0], [108.0, 34595.0], [128.0, 35243.0], [136.0, 86.0], [155.0, 1099.0], [166.0, 36872.5], [161.0, 41418.0], [173.0, 26283.0], [169.0, 5205.0], [190.0, 272.0], [196.0, 36.5], [195.0, 356.0], [205.0, 81.0], [201.0, 91.0], [202.0, 100142.5], [229.0, 143.0], [237.0, 13.0], [246.0, 10099.0], [284.0, 194.0], [296.0, 160.0], [291.0, 339.0], [318.0, 139.0], [313.0, 151.0], [335.0, 129.0], [325.0, 194.0], [328.0, 204.0], [358.0, 193.5], [374.0, 79.0], [399.0, 366.0], [412.0, 8135.5], [407.0, 100096.0], [403.0, 8323.0], [420.0, 112.5], [416.0, 11326.0], [438.0, 85.5], [454.0, 7718.0], [476.0, 68.0], [471.0, 304.0], [477.0, 290.0], [484.0, 9258.0], [498.0, 7114.5], [510.0, 290.0], [520.0, 238.0], [543.0, 610.0], [540.0, 326.0], [521.0, 265.0], [546.0, 8342.0], [566.0, 378.0], [569.0, 327.0], [573.0, 268.0], [554.0, 345.0], [568.0, 354.0], [602.0, 178.0], [604.0, 137.0], [603.0, 321.0], [578.0, 309.0], [590.0, 284.0], [605.0, 55.0], [600.0, 339.0], [581.0, 337.0], [580.0, 314.0], [583.0, 292.0], [579.0, 317.0], [601.0, 323.0], [592.0, 281.0], [606.0, 329.0], [607.0, 321.0], [599.0, 329.0], [595.0, 347.0], [594.0, 291.5], [596.0, 266.0], [613.0, 306.0], [611.0, 8696.0], [635.0, 107.0], [608.0, 9042.0], [623.0, 139.0], [624.0, 258.0], [612.0, 351.0], [639.0, 392.0], [618.0, 402.0], [632.0, 323.0], [633.0, 336.0], [666.0, 49.0], [670.0, 52.0], [653.0, 341.0], [650.0, 342.0], [687.0, 85.0], [696.0, 324.0], [676.0, 491.0], [703.0, 303.0], [698.0, 276.0], [731.0, 5658.0], [728.0, 324.0], [712.0, 431.0], [751.0, 8297.0], [754.0, 204.0], [763.0, 7038.0], [759.0, 333.0], [750.0, 298.0], [746.0, 412.0], [788.0, 88.0], [794.0, 122.0], [782.0, 6193.0], [769.0, 6787.0], [768.0, 519.0], [808.0, 350.0], [828.0, 309.0], [803.0, 333.0], [850.0, 140.0], [844.0, 84.0], [840.0, 6758.0], [852.0, 349.0], [842.0, 372.0], [885.0, 63.0], [878.0, 194.0], [886.0, 291.0], [891.0, 60.0], [876.0, 6853.0], [909.0, 184.0], [955.0, 64.0], [948.0, 284.0], [952.0, 362.0], [947.0, 331.0], [962.0, 161.0], [986.0, 290.5], [961.0, 317.0], [985.0, 329.0], [1020.0, 118.0], [1022.0, 78.0], [1010.0, 171.0], [1009.0, 353.0], [1042.0, 164.0], [1067.0, 346.0], [1026.0, 292.0], [1058.0, 334.5], [1064.0, 590.0], [1048.0, 307.0], [1125.0, 193.0], [1147.0, 275.0], [1140.0, 462.0], [1151.0, 438.0], [1206.0, 406.0], [1208.0, 123.0], [1212.0, 93.0], [1191.0, 285.0], [1210.0, 169.0], [1173.0, 345.0], [1192.0, 342.0], [1194.0, 608.0], [1203.0, 313.0], [1169.0, 407.0], [1168.0, 285.0], [1177.0, 234.0], [1166.0, 298.0], [1269.0, 712.0], [1220.0, 24.0], [1276.0, 57.0], [1225.0, 640.0], [1248.0, 681.0], [1229.0, 482.0], [1255.0, 382.0], [1245.0, 346.0], [1259.0, 673.0], [1282.0, 31.0], [1285.0, 327.0], [1367.0, 42.0], [1373.0, 49.0], [1360.0, 307.0], [1397.0, 329.0], [1418.0, 154.0], [1490.0, 154.0], [1522.0, 175.0], [1510.0, 28.0], [1562.0, 105.0], [1547.0, 160.0], [1654.0, 40.0], [1644.0, 615.0], [1697.0, 196.0], [1710.0, 327.0], [1739.0, 338.0], [1776.0, 636.0], [1802.0, 633.0], [1804.0, 334.0], [1854.0, 302.0], [1859.0, 334.0], [2132.0, 138.0], [2434.0, 998.0], [1.0, 100160.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[578.0, 0.0], [635.0, 0.0], [611.0, 0.0], [623.0, 0.0], [624.0, 0.0], [613.0, 0.0], [632.0, 0.0], [612.0, 0.0], [653.0, 0.0], [728.0, 0.0], [759.0, 0.0], [746.0, 0.0], [828.0, 0.0], [850.0, 0.0], [840.0, 0.0], [852.0, 0.0], [891.0, 0.0], [909.0, 0.0], [61.0, 0.0], [1009.0, 0.0], [1212.0, 0.0], [1192.0, 0.0], [1225.0, 0.0], [1259.0, 0.0], [5.0, 0.0], [1367.0, 0.0], [1360.0, 0.0], [1490.0, 0.0], [1644.0, 0.0], [10.0, 0.0], [14.0, 0.0], [284.0, 0.0], [19.0, 0.0], [20.0, 0.0], [471.0, 0.0], [477.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 2434.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 440.0, "minX": 1.68287646E12, "maxY": 690.0, "series": [{"data": [[1.68287646E12, 440.0], [1.68287658E12, 600.0], [1.68287652E12, 690.0], [1.6828767E12, 580.0], [1.68287664E12, 690.0]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6828767E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.68287646E12, "maxY": 686.65, "series": [{"data": [[1.68287676E12, 16.433333333333334], [1.68287646E12, 401.3333333333333], [1.68287658E12, 617.7833333333333], [1.68287652E12, 675.3833333333333], [1.6828767E12, 588.95], [1.68287664E12, 686.65], [1.68287682E12, 0.55]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.68287646E12, 2.0833333333333335], [1.68287658E12, 4.766666666666667], [1.68287652E12, 3.45], [1.6828767E12, 0.03333333333333333], [1.68287664E12, 2.5833333333333335]], "isOverall": false, "label": "Non HTTP response code: java.net.SocketException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68287682E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.68287646E12, "maxY": 686.65, "series": [{"data": [[1.68287676E12, 16.433333333333334], [1.68287646E12, 401.3333333333333], [1.68287658E12, 617.7833333333333], [1.68287652E12, 675.3833333333333], [1.6828767E12, 588.95], [1.68287664E12, 686.65], [1.68287682E12, 0.55]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.68287646E12, 2.0833333333333335], [1.68287658E12, 4.766666666666667], [1.68287652E12, 3.45], [1.6828767E12, 0.03333333333333333], [1.68287664E12, 2.5833333333333335]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68287682E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.68287646E12, "maxY": 686.65, "series": [{"data": [[1.68287676E12, 16.433333333333334], [1.68287646E12, 401.3333333333333], [1.68287658E12, 617.7833333333333], [1.68287652E12, 675.3833333333333], [1.6828767E12, 588.95], [1.68287664E12, 686.65], [1.68287682E12, 0.55]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.68287646E12, 2.0833333333333335], [1.68287658E12, 4.766666666666667], [1.68287652E12, 3.45], [1.6828767E12, 0.03333333333333333], [1.68287664E12, 2.5833333333333335]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68287682E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

