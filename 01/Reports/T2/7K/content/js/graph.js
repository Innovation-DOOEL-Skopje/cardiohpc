/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 5.0, "minX": 0.0, "maxY": 210911.0, "series": [{"data": [[0.0, 5.0], [0.1, 26.0], [0.2, 30.0], [0.3, 33.0], [0.4, 37.0], [0.5, 39.0], [0.6, 41.0], [0.7, 45.0], [0.8, 47.0], [0.9, 48.0], [1.0, 48.0], [1.1, 49.0], [1.2, 51.0], [1.3, 51.0], [1.4, 52.0], [1.5, 53.0], [1.6, 54.0], [1.7, 55.0], [1.8, 56.0], [1.9, 57.0], [2.0, 58.0], [2.1, 58.0], [2.2, 59.0], [2.3, 60.0], [2.4, 61.0], [2.5, 62.0], [2.6, 63.0], [2.7, 63.0], [2.8, 64.0], [2.9, 65.0], [3.0, 66.0], [3.1, 67.0], [3.2, 68.0], [3.3, 69.0], [3.4, 69.0], [3.5, 71.0], [3.6, 72.0], [3.7, 73.0], [3.8, 74.0], [3.9, 74.0], [4.0, 75.0], [4.1, 75.0], [4.2, 76.0], [4.3, 76.0], [4.4, 77.0], [4.5, 77.0], [4.6, 78.0], [4.7, 79.0], [4.8, 79.0], [4.9, 80.0], [5.0, 81.0], [5.1, 81.0], [5.2, 82.0], [5.3, 82.0], [5.4, 83.0], [5.5, 84.0], [5.6, 85.0], [5.7, 86.0], [5.8, 86.0], [5.9, 87.0], [6.0, 87.0], [6.1, 88.0], [6.2, 88.0], [6.3, 89.0], [6.4, 89.0], [6.5, 90.0], [6.6, 90.0], [6.7, 91.0], [6.8, 91.0], [6.9, 91.0], [7.0, 92.0], [7.1, 92.0], [7.2, 93.0], [7.3, 93.0], [7.4, 94.0], [7.5, 95.0], [7.6, 95.0], [7.7, 95.0], [7.8, 96.0], [7.9, 96.0], [8.0, 97.0], [8.1, 97.0], [8.2, 98.0], [8.3, 98.0], [8.4, 99.0], [8.5, 99.0], [8.6, 99.0], [8.7, 100.0], [8.8, 100.0], [8.9, 101.0], [9.0, 101.0], [9.1, 102.0], [9.2, 102.0], [9.3, 103.0], [9.4, 103.0], [9.5, 103.0], [9.6, 104.0], [9.7, 104.0], [9.8, 105.0], [9.9, 105.0], [10.0, 106.0], [10.1, 106.0], [10.2, 107.0], [10.3, 107.0], [10.4, 108.0], [10.5, 109.0], [10.6, 109.0], [10.7, 109.0], [10.8, 110.0], [10.9, 111.0], [11.0, 111.0], [11.1, 112.0], [11.2, 112.0], [11.3, 113.0], [11.4, 113.0], [11.5, 114.0], [11.6, 114.0], [11.7, 115.0], [11.8, 115.0], [11.9, 116.0], [12.0, 116.0], [12.1, 117.0], [12.2, 117.0], [12.3, 118.0], [12.4, 118.0], [12.5, 119.0], [12.6, 119.0], [12.7, 119.0], [12.8, 120.0], [12.9, 120.0], [13.0, 120.0], [13.1, 120.0], [13.2, 121.0], [13.3, 121.0], [13.4, 121.0], [13.5, 122.0], [13.6, 122.0], [13.7, 122.0], [13.8, 123.0], [13.9, 124.0], [14.0, 124.0], [14.1, 124.0], [14.2, 125.0], [14.3, 125.0], [14.4, 126.0], [14.5, 126.0], [14.6, 127.0], [14.7, 127.0], [14.8, 127.0], [14.9, 128.0], [15.0, 128.0], [15.1, 129.0], [15.2, 129.0], [15.3, 130.0], [15.4, 130.0], [15.5, 131.0], [15.6, 131.0], [15.7, 131.0], [15.8, 132.0], [15.9, 132.0], [16.0, 133.0], [16.1, 133.0], [16.2, 133.0], [16.3, 133.0], [16.4, 134.0], [16.5, 134.0], [16.6, 134.0], [16.7, 134.0], [16.8, 135.0], [16.9, 135.0], [17.0, 135.0], [17.1, 136.0], [17.2, 136.0], [17.3, 136.0], [17.4, 137.0], [17.5, 137.0], [17.6, 137.0], [17.7, 138.0], [17.8, 139.0], [17.9, 139.0], [18.0, 140.0], [18.1, 140.0], [18.2, 141.0], [18.3, 141.0], [18.4, 141.0], [18.5, 142.0], [18.6, 142.0], [18.7, 143.0], [18.8, 143.0], [18.9, 144.0], [19.0, 145.0], [19.1, 146.0], [19.2, 146.0], [19.3, 146.0], [19.4, 147.0], [19.5, 147.0], [19.6, 147.0], [19.7, 147.0], [19.8, 148.0], [19.9, 148.0], [20.0, 148.0], [20.1, 149.0], [20.2, 149.0], [20.3, 150.0], [20.4, 151.0], [20.5, 151.0], [20.6, 152.0], [20.7, 153.0], [20.8, 154.0], [20.9, 154.0], [21.0, 155.0], [21.1, 156.0], [21.2, 156.0], [21.3, 157.0], [21.4, 157.0], [21.5, 157.0], [21.6, 158.0], [21.7, 158.0], [21.8, 158.0], [21.9, 159.0], [22.0, 159.0], [22.1, 160.0], [22.2, 160.0], [22.3, 161.0], [22.4, 161.0], [22.5, 161.0], [22.6, 162.0], [22.7, 162.0], [22.8, 162.0], [22.9, 163.0], [23.0, 163.0], [23.1, 163.0], [23.2, 163.0], [23.3, 163.0], [23.4, 164.0], [23.5, 164.0], [23.6, 164.0], [23.7, 165.0], [23.8, 165.0], [23.9, 165.0], [24.0, 166.0], [24.1, 166.0], [24.2, 166.0], [24.3, 167.0], [24.4, 167.0], [24.5, 167.0], [24.6, 168.0], [24.7, 168.0], [24.8, 169.0], [24.9, 169.0], [25.0, 170.0], [25.1, 170.0], [25.2, 171.0], [25.3, 171.0], [25.4, 172.0], [25.5, 172.0], [25.6, 173.0], [25.7, 173.0], [25.8, 174.0], [25.9, 174.0], [26.0, 174.0], [26.1, 175.0], [26.2, 175.0], [26.3, 175.0], [26.4, 176.0], [26.5, 176.0], [26.6, 177.0], [26.7, 177.0], [26.8, 177.0], [26.9, 178.0], [27.0, 178.0], [27.1, 178.0], [27.2, 179.0], [27.3, 180.0], [27.4, 181.0], [27.5, 181.0], [27.6, 182.0], [27.7, 182.0], [27.8, 183.0], [27.9, 183.0], [28.0, 184.0], [28.1, 185.0], [28.2, 185.0], [28.3, 186.0], [28.4, 186.0], [28.5, 188.0], [28.6, 189.0], [28.7, 190.0], [28.8, 190.0], [28.9, 190.0], [29.0, 191.0], [29.1, 191.0], [29.2, 192.0], [29.3, 192.0], [29.4, 193.0], [29.5, 194.0], [29.6, 194.0], [29.7, 195.0], [29.8, 195.0], [29.9, 196.0], [30.0, 196.0], [30.1, 196.0], [30.2, 196.0], [30.3, 197.0], [30.4, 197.0], [30.5, 197.0], [30.6, 197.0], [30.7, 197.0], [30.8, 198.0], [30.9, 198.0], [31.0, 199.0], [31.1, 199.0], [31.2, 200.0], [31.3, 200.0], [31.4, 201.0], [31.5, 202.0], [31.6, 203.0], [31.7, 203.0], [31.8, 204.0], [31.9, 205.0], [32.0, 205.0], [32.1, 206.0], [32.2, 207.0], [32.3, 207.0], [32.4, 208.0], [32.5, 208.0], [32.6, 209.0], [32.7, 209.0], [32.8, 209.0], [32.9, 209.0], [33.0, 210.0], [33.1, 210.0], [33.2, 210.0], [33.3, 210.0], [33.4, 210.0], [33.5, 211.0], [33.6, 211.0], [33.7, 211.0], [33.8, 212.0], [33.9, 212.0], [34.0, 212.0], [34.1, 213.0], [34.2, 214.0], [34.3, 214.0], [34.4, 215.0], [34.5, 216.0], [34.6, 216.0], [34.7, 216.0], [34.8, 217.0], [34.9, 217.0], [35.0, 217.0], [35.1, 218.0], [35.2, 218.0], [35.3, 219.0], [35.4, 219.0], [35.5, 219.0], [35.6, 220.0], [35.7, 220.0], [35.8, 220.0], [35.9, 220.0], [36.0, 221.0], [36.1, 221.0], [36.2, 221.0], [36.3, 221.0], [36.4, 222.0], [36.5, 222.0], [36.6, 222.0], [36.7, 223.0], [36.8, 224.0], [36.9, 225.0], [37.0, 225.0], [37.1, 226.0], [37.2, 226.0], [37.3, 227.0], [37.4, 227.0], [37.5, 228.0], [37.6, 228.0], [37.7, 229.0], [37.8, 230.0], [37.9, 230.0], [38.0, 230.0], [38.1, 231.0], [38.2, 231.0], [38.3, 231.0], [38.4, 231.0], [38.5, 231.0], [38.6, 232.0], [38.7, 232.0], [38.8, 232.0], [38.9, 232.0], [39.0, 232.0], [39.1, 233.0], [39.2, 233.0], [39.3, 233.0], [39.4, 233.0], [39.5, 233.0], [39.6, 233.0], [39.7, 234.0], [39.8, 234.0], [39.9, 234.0], [40.0, 234.0], [40.1, 235.0], [40.2, 235.0], [40.3, 235.0], [40.4, 236.0], [40.5, 236.0], [40.6, 236.0], [40.7, 236.0], [40.8, 237.0], [40.9, 237.0], [41.0, 237.0], [41.1, 238.0], [41.2, 238.0], [41.3, 239.0], [41.4, 239.0], [41.5, 240.0], [41.6, 240.0], [41.7, 240.0], [41.8, 240.0], [41.9, 241.0], [42.0, 241.0], [42.1, 241.0], [42.2, 241.0], [42.3, 242.0], [42.4, 242.0], [42.5, 242.0], [42.6, 243.0], [42.7, 243.0], [42.8, 244.0], [42.9, 244.0], [43.0, 244.0], [43.1, 245.0], [43.2, 245.0], [43.3, 245.0], [43.4, 246.0], [43.5, 246.0], [43.6, 246.0], [43.7, 246.0], [43.8, 246.0], [43.9, 246.0], [44.0, 247.0], [44.1, 247.0], [44.2, 247.0], [44.3, 247.0], [44.4, 247.0], [44.5, 247.0], [44.6, 247.0], [44.7, 248.0], [44.8, 248.0], [44.9, 248.0], [45.0, 248.0], [45.1, 248.0], [45.2, 248.0], [45.3, 249.0], [45.4, 249.0], [45.5, 249.0], [45.6, 249.0], [45.7, 249.0], [45.8, 249.0], [45.9, 249.0], [46.0, 250.0], [46.1, 250.0], [46.2, 250.0], [46.3, 250.0], [46.4, 250.0], [46.5, 250.0], [46.6, 250.0], [46.7, 250.0], [46.8, 251.0], [46.9, 251.0], [47.0, 251.0], [47.1, 251.0], [47.2, 251.0], [47.3, 251.0], [47.4, 252.0], [47.5, 252.0], [47.6, 252.0], [47.7, 252.0], [47.8, 252.0], [47.9, 253.0], [48.0, 253.0], [48.1, 253.0], [48.2, 253.0], [48.3, 253.0], [48.4, 253.0], [48.5, 254.0], [48.6, 254.0], [48.7, 254.0], [48.8, 254.0], [48.9, 254.0], [49.0, 255.0], [49.1, 255.0], [49.2, 255.0], [49.3, 255.0], [49.4, 255.0], [49.5, 255.0], [49.6, 256.0], [49.7, 256.0], [49.8, 256.0], [49.9, 256.0], [50.0, 257.0], [50.1, 257.0], [50.2, 257.0], [50.3, 257.0], [50.4, 257.0], [50.5, 258.0], [50.6, 258.0], [50.7, 258.0], [50.8, 258.0], [50.9, 258.0], [51.0, 258.0], [51.1, 258.0], [51.2, 259.0], [51.3, 259.0], [51.4, 259.0], [51.5, 259.0], [51.6, 259.0], [51.7, 259.0], [51.8, 259.0], [51.9, 259.0], [52.0, 260.0], [52.1, 260.0], [52.2, 260.0], [52.3, 260.0], [52.4, 260.0], [52.5, 260.0], [52.6, 261.0], [52.7, 261.0], [52.8, 261.0], [52.9, 261.0], [53.0, 262.0], [53.1, 262.0], [53.2, 262.0], [53.3, 263.0], [53.4, 263.0], [53.5, 263.0], [53.6, 264.0], [53.7, 264.0], [53.8, 264.0], [53.9, 265.0], [54.0, 265.0], [54.1, 265.0], [54.2, 265.0], [54.3, 265.0], [54.4, 265.0], [54.5, 266.0], [54.6, 266.0], [54.7, 266.0], [54.8, 266.0], [54.9, 266.0], [55.0, 266.0], [55.1, 266.0], [55.2, 267.0], [55.3, 267.0], [55.4, 267.0], [55.5, 267.0], [55.6, 267.0], [55.7, 267.0], [55.8, 267.0], [55.9, 268.0], [56.0, 268.0], [56.1, 268.0], [56.2, 268.0], [56.3, 268.0], [56.4, 269.0], [56.5, 269.0], [56.6, 269.0], [56.7, 269.0], [56.8, 269.0], [56.9, 269.0], [57.0, 270.0], [57.1, 270.0], [57.2, 270.0], [57.3, 270.0], [57.4, 270.0], [57.5, 270.0], [57.6, 270.0], [57.7, 270.0], [57.8, 271.0], [57.9, 271.0], [58.0, 271.0], [58.1, 271.0], [58.2, 271.0], [58.3, 271.0], [58.4, 271.0], [58.5, 271.0], [58.6, 272.0], [58.7, 272.0], [58.8, 272.0], [58.9, 272.0], [59.0, 272.0], [59.1, 272.0], [59.2, 272.0], [59.3, 272.0], [59.4, 273.0], [59.5, 273.0], [59.6, 273.0], [59.7, 273.0], [59.8, 273.0], [59.9, 273.0], [60.0, 274.0], [60.1, 274.0], [60.2, 274.0], [60.3, 274.0], [60.4, 274.0], [60.5, 274.0], [60.6, 274.0], [60.7, 275.0], [60.8, 275.0], [60.9, 275.0], [61.0, 275.0], [61.1, 275.0], [61.2, 276.0], [61.3, 276.0], [61.4, 276.0], [61.5, 276.0], [61.6, 276.0], [61.7, 276.0], [61.8, 277.0], [61.9, 277.0], [62.0, 277.0], [62.1, 277.0], [62.2, 278.0], [62.3, 278.0], [62.4, 278.0], [62.5, 279.0], [62.6, 279.0], [62.7, 279.0], [62.8, 280.0], [62.9, 280.0], [63.0, 280.0], [63.1, 281.0], [63.2, 281.0], [63.3, 281.0], [63.4, 281.0], [63.5, 282.0], [63.6, 282.0], [63.7, 282.0], [63.8, 283.0], [63.9, 283.0], [64.0, 284.0], [64.1, 284.0], [64.2, 284.0], [64.3, 285.0], [64.4, 286.0], [64.5, 287.0], [64.6, 287.0], [64.7, 288.0], [64.8, 289.0], [64.9, 290.0], [65.0, 290.0], [65.1, 290.0], [65.2, 291.0], [65.3, 291.0], [65.4, 291.0], [65.5, 291.0], [65.6, 292.0], [65.7, 292.0], [65.8, 292.0], [65.9, 292.0], [66.0, 292.0], [66.1, 293.0], [66.2, 293.0], [66.3, 293.0], [66.4, 293.0], [66.5, 294.0], [66.6, 294.0], [66.7, 295.0], [66.8, 295.0], [66.9, 296.0], [67.0, 296.0], [67.1, 296.0], [67.2, 297.0], [67.3, 298.0], [67.4, 298.0], [67.5, 298.0], [67.6, 299.0], [67.7, 299.0], [67.8, 299.0], [67.9, 300.0], [68.0, 300.0], [68.1, 301.0], [68.2, 302.0], [68.3, 302.0], [68.4, 303.0], [68.5, 304.0], [68.6, 304.0], [68.7, 305.0], [68.8, 306.0], [68.9, 307.0], [69.0, 308.0], [69.1, 310.0], [69.2, 311.0], [69.3, 313.0], [69.4, 315.0], [69.5, 319.0], [69.6, 320.0], [69.7, 321.0], [69.8, 321.0], [69.9, 322.0], [70.0, 326.0], [70.1, 326.0], [70.2, 327.0], [70.3, 328.0], [70.4, 329.0], [70.5, 330.0], [70.6, 331.0], [70.7, 331.0], [70.8, 332.0], [70.9, 333.0], [71.0, 334.0], [71.1, 335.0], [71.2, 337.0], [71.3, 338.0], [71.4, 339.0], [71.5, 342.0], [71.6, 345.0], [71.7, 347.0], [71.8, 349.0], [71.9, 353.0], [72.0, 354.0], [72.1, 355.0], [72.2, 356.0], [72.3, 357.0], [72.4, 360.0], [72.5, 361.0], [72.6, 361.0], [72.7, 362.0], [72.8, 362.0], [72.9, 364.0], [73.0, 364.0], [73.1, 365.0], [73.2, 366.0], [73.3, 372.0], [73.4, 375.0], [73.5, 378.0], [73.6, 379.0], [73.7, 381.0], [73.8, 387.0], [73.9, 394.0], [74.0, 399.0], [74.1, 400.0], [74.2, 402.0], [74.3, 403.0], [74.4, 405.0], [74.5, 408.0], [74.6, 409.0], [74.7, 409.0], [74.8, 410.0], [74.9, 411.0], [75.0, 415.0], [75.1, 416.0], [75.2, 417.0], [75.3, 417.0], [75.4, 422.0], [75.5, 426.0], [75.6, 427.0], [75.7, 428.0], [75.8, 428.0], [75.9, 429.0], [76.0, 430.0], [76.1, 431.0], [76.2, 432.0], [76.3, 436.0], [76.4, 438.0], [76.5, 439.0], [76.6, 441.0], [76.7, 444.0], [76.8, 446.0], [76.9, 447.0], [77.0, 449.0], [77.1, 455.0], [77.2, 461.0], [77.3, 463.0], [77.4, 468.0], [77.5, 470.0], [77.6, 472.0], [77.7, 477.0], [77.8, 479.0], [77.9, 480.0], [78.0, 481.0], [78.1, 481.0], [78.2, 482.0], [78.3, 484.0], [78.4, 490.0], [78.5, 493.0], [78.6, 497.0], [78.7, 501.0], [78.8, 502.0], [78.9, 503.0], [79.0, 504.0], [79.1, 504.0], [79.2, 505.0], [79.3, 506.0], [79.4, 507.0], [79.5, 507.0], [79.6, 508.0], [79.7, 508.0], [79.8, 509.0], [79.9, 510.0], [80.0, 511.0], [80.1, 511.0], [80.2, 513.0], [80.3, 514.0], [80.4, 516.0], [80.5, 517.0], [80.6, 518.0], [80.7, 522.0], [80.8, 525.0], [80.9, 526.0], [81.0, 529.0], [81.1, 536.0], [81.2, 545.0], [81.3, 558.0], [81.4, 562.0], [81.5, 564.0], [81.6, 566.0], [81.7, 567.0], [81.8, 568.0], [81.9, 570.0], [82.0, 577.0], [82.1, 579.0], [82.2, 580.0], [82.3, 582.0], [82.4, 587.0], [82.5, 590.0], [82.6, 590.0], [82.7, 604.0], [82.8, 614.0], [82.9, 615.0], [83.0, 616.0], [83.1, 625.0], [83.2, 627.0], [83.3, 627.0], [83.4, 645.0], [83.5, 646.0], [83.6, 647.0], [83.7, 649.0], [83.8, 657.0], [83.9, 660.0], [84.0, 664.0], [84.1, 685.0], [84.2, 704.0], [84.3, 706.0], [84.4, 709.0], [84.5, 712.0], [84.6, 751.0], [84.7, 776.0], [84.8, 780.0], [84.9, 785.0], [85.0, 789.0], [85.1, 806.0], [85.2, 887.0], [85.3, 1013.0], [85.4, 1074.0], [85.5, 1140.0], [85.6, 1283.0], [85.7, 1316.0], [85.8, 1482.0], [85.9, 1563.0], [86.0, 1647.0], [86.1, 1744.0], [86.2, 1809.0], [86.3, 2031.0], [86.4, 2211.0], [86.5, 2516.0], [86.6, 2774.0], [86.7, 2930.0], [86.8, 3066.0], [86.9, 3117.0], [87.0, 3221.0], [87.1, 3413.0], [87.2, 3582.0], [87.3, 3695.0], [87.4, 3813.0], [87.5, 4008.0], [87.6, 4171.0], [87.7, 4411.0], [87.8, 4690.0], [87.9, 4948.0], [88.0, 5198.0], [88.1, 5442.0], [88.2, 5799.0], [88.3, 6214.0], [88.4, 6494.0], [88.5, 6550.0], [88.6, 6602.0], [88.7, 6604.0], [88.8, 6768.0], [88.9, 7191.0], [89.0, 7411.0], [89.1, 7706.0], [89.2, 8037.0], [89.3, 8132.0], [89.4, 8195.0], [89.5, 8252.0], [89.6, 8291.0], [89.7, 8372.0], [89.8, 8388.0], [89.9, 8389.0], [90.0, 8404.0], [90.1, 8451.0], [90.2, 8500.0], [90.3, 8501.0], [90.4, 8619.0], [90.5, 8787.0], [90.6, 9012.0], [90.7, 9038.0], [90.8, 9084.0], [90.9, 9155.0], [91.0, 9157.0], [91.1, 9159.0], [91.2, 9336.0], [91.3, 9457.0], [91.4, 9465.0], [91.5, 9595.0], [91.6, 9598.0], [91.7, 9726.0], [91.8, 9811.0], [91.9, 9883.0], [92.0, 9920.0], [92.1, 9953.0], [92.2, 10021.0], [92.3, 10136.0], [92.4, 10503.0], [92.5, 10897.0], [92.6, 11127.0], [92.7, 11561.0], [92.8, 11889.0], [92.9, 12170.0], [93.0, 12776.0], [93.1, 13059.0], [93.2, 13286.0], [93.3, 13470.0], [93.4, 13926.0], [93.5, 14412.0], [93.6, 14530.0], [93.7, 14938.0], [93.8, 15118.0], [93.9, 15631.0], [94.0, 15935.0], [94.1, 16192.0], [94.2, 16445.0], [94.3, 16475.0], [94.4, 16865.0], [94.5, 17092.0], [94.6, 17261.0], [94.7, 17268.0], [94.8, 17284.0], [94.9, 17661.0], [95.0, 17741.0], [95.1, 17765.0], [95.2, 17981.0], [95.3, 18141.0], [95.4, 18232.0], [95.5, 18255.0], [95.6, 18371.0], [95.7, 19034.0], [95.8, 19820.0], [95.9, 19931.0], [96.0, 20623.0], [96.1, 22705.0], [96.2, 24164.0], [96.3, 27054.0], [96.4, 28619.0], [96.5, 29397.0], [96.6, 30831.0], [96.7, 30954.0], [96.8, 31176.0], [96.9, 32473.0], [97.0, 34054.0], [97.1, 35447.0], [97.2, 37611.0], [97.3, 40140.0], [97.4, 47037.0], [97.5, 49207.0], [97.6, 55577.0], [97.7, 59066.0], [97.8, 63608.0], [97.9, 64509.0], [98.0, 65089.0], [98.1, 66122.0], [98.2, 67417.0], [98.3, 71833.0], [98.4, 76266.0], [98.5, 83744.0], [98.6, 88192.0], [98.7, 92703.0], [98.8, 99563.0], [98.9, 100080.0], [99.0, 100120.0], [99.1, 100163.0], [99.2, 100225.0], [99.3, 100611.0], [99.4, 103043.0], [99.5, 115270.0], [99.6, 127541.0], [99.7, 127831.0], [99.8, 128759.0], [99.9, 130477.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 51385.0, "series": [{"data": [[0.0, 12179.0], [68300.0, 5.0], [66700.0, 1.0], [71500.0, 16.0], [79500.0, 3.0], [81100.0, 3.0], [84300.0, 15.0], [82700.0, 1.0], [89100.0, 1.0], [92300.0, 1.0], [97100.0, 2.0], [95500.0, 1.0], [100300.0, 35.0], [101900.0, 2.0], [127500.0, 94.0], [129100.0, 69.0], [100.0, 31530.0], [32900.0, 1.0], [35300.0, 51.0], [36100.0, 64.0], [36900.0, 2.0], [37700.0, 19.0], [40900.0, 14.0], [39300.0, 2.0], [40100.0, 8.0], [44900.0, 4.0], [46500.0, 5.0], [47300.0, 2.0], [48100.0, 6.0], [48900.0, 2.0], [50500.0, 5.0], [200.0, 51385.0], [52100.0, 17.0], [53700.0, 2.0], [54500.0, 4.0], [56900.0, 1.0], [58500.0, 1.0], [60100.0, 2.0], [61700.0, 3.0], [63300.0, 2.0], [64900.0, 3.0], [64100.0, 7.0], [65800.0, 4.0], [69000.0, 3.0], [67400.0, 3.0], [70600.0, 1.0], [300.0, 8617.0], [75400.0, 3.0], [73800.0, 1.0], [77000.0, 1.0], [81800.0, 3.0], [78600.0, 2.0], [88200.0, 56.0], [93000.0, 1.0], [94600.0, 2.0], [97800.0, 5.0], [101000.0, 46.0], [99400.0, 1.0], [400.0, 6525.0], [102600.0, 8.0], [115400.0, 2.0], [500.0, 5616.0], [128200.0, 51.0], [600.0, 2086.0], [700.0, 1255.0], [800.0, 183.0], [900.0, 111.0], [1000.0, 205.0], [1100.0, 105.0], [1200.0, 188.0], [1300.0, 141.0], [1400.0, 115.0], [1500.0, 157.0], [1600.0, 179.0], [1700.0, 181.0], [1800.0, 61.0], [1900.0, 31.0], [2000.0, 75.0], [2100.0, 116.0], [2200.0, 44.0], [2300.0, 21.0], [2400.0, 73.0], [2500.0, 28.0], [2600.0, 65.0], [2700.0, 71.0], [2800.0, 74.0], [2900.0, 136.0], [3000.0, 78.0], [3100.0, 197.0], [3200.0, 158.0], [3300.0, 36.0], [3400.0, 85.0], [3500.0, 98.0], [3600.0, 113.0], [3700.0, 89.0], [3800.0, 93.0], [3900.0, 55.0], [4000.0, 100.0], [4100.0, 97.0], [4200.0, 45.0], [66500.0, 22.0], [4300.0, 66.0], [68100.0, 3.0], [4600.0, 57.0], [4500.0, 14.0], [4400.0, 78.0], [72900.0, 1.0], [69700.0, 1.0], [4700.0, 24.0], [4800.0, 50.0], [5100.0, 35.0], [5000.0, 29.0], [4900.0, 143.0], [80900.0, 1.0], [5200.0, 49.0], [5300.0, 66.0], [82500.0, 1.0], [84100.0, 2.0], [5400.0, 67.0], [5600.0, 11.0], [5500.0, 64.0], [5800.0, 32.0], [5700.0, 21.0], [6100.0, 48.0], [6000.0, 18.0], [5900.0, 8.0], [6200.0, 117.0], [6300.0, 27.0], [100100.0, 286.0], [98500.0, 6.0], [6500.0, 195.0], [6600.0, 241.0], [6400.0, 59.0], [104900.0, 5.0], [6700.0, 97.0], [6800.0, 9.0], [6900.0, 10.0], [106500.0, 1.0], [7100.0, 164.0], [7000.0, 12.0], [7300.0, 30.0], [7400.0, 94.0], [7200.0, 32.0], [116100.0, 1.0], [7500.0, 44.0], [7600.0, 9.0], [7700.0, 53.0], [7900.0, 58.0], [7800.0, 5.0], [8100.0, 188.0], [8000.0, 156.0], [128900.0, 12.0], [130500.0, 14.0], [127300.0, 2.0], [8400.0, 355.0], [8200.0, 278.0], [8600.0, 87.0], [8800.0, 76.0], [9000.0, 376.0], [9200.0, 39.0], [9400.0, 279.0], [9600.0, 40.0], [10000.0, 116.0], [10200.0, 7.0], [9800.0, 252.0], [10600.0, 10.0], [11200.0, 30.0], [11000.0, 82.0], [10800.0, 54.0], [11600.0, 29.0], [11400.0, 2.0], [12200.0, 26.0], [12000.0, 16.0], [11800.0, 101.0], [12400.0, 78.0], [12600.0, 4.0], [13200.0, 138.0], [12800.0, 32.0], [13000.0, 77.0], [13400.0, 37.0], [13800.0, 22.0], [13600.0, 8.0], [14200.0, 4.0], [14000.0, 48.0], [14600.0, 35.0], [14800.0, 12.0], [14400.0, 97.0], [15200.0, 86.0], [15000.0, 23.0], [15800.0, 74.0], [15600.0, 15.0], [15400.0, 8.0], [16200.0, 33.0], [16000.0, 5.0], [16800.0, 89.0], [16400.0, 230.0], [17200.0, 331.0], [18400.0, 3.0], [18000.0, 82.0], [17600.0, 149.0], [18800.0, 31.0], [19200.0, 1.0], [20000.0, 24.0], [19600.0, 36.0], [20400.0, 2.0], [20800.0, 2.0], [22000.0, 1.0], [22400.0, 2.0], [23200.0, 2.0], [22800.0, 40.0], [24000.0, 4.0], [24400.0, 44.0], [23600.0, 1.0], [24800.0, 2.0], [25600.0, 1.0], [26400.0, 2.0], [26000.0, 2.0], [27200.0, 96.0], [29600.0, 4.0], [29200.0, 34.0], [28800.0, 10.0], [30400.0, 4.0], [30000.0, 8.0], [31200.0, 7.0], [30800.0, 17.0], [32400.0, 43.0], [32000.0, 1.0], [34400.0, 5.0], [32800.0, 17.0], [33600.0, 30.0], [36000.0, 1.0], [37600.0, 61.0], [39200.0, 11.0], [40000.0, 1.0], [42400.0, 3.0], [43200.0, 6.0], [46400.0, 2.0], [48000.0, 5.0], [48800.0, 7.0], [49600.0, 12.0], [50400.0, 10.0], [52000.0, 6.0], [52800.0, 1.0], [53600.0, 2.0], [56800.0, 1.0], [58400.0, 2.0], [60000.0, 3.0], [63200.0, 19.0], [61600.0, 2.0], [64000.0, 7.0], [64800.0, 6.0], [65600.0, 23.0], [67200.0, 4.0], [75200.0, 1.0], [78400.0, 3.0], [80000.0, 2.0], [83200.0, 1.0], [96000.0, 1.0], [97600.0, 1.0], [100800.0, 7.0], [99200.0, 4.0], [105600.0, 1.0], [115200.0, 37.0], [126400.0, 22.0], [128000.0, 22.0], [131200.0, 1.0], [163200.0, 2.0], [67100.0, 7.0], [68700.0, 3.0], [75100.0, 33.0], [81500.0, 3.0], [78300.0, 2.0], [86300.0, 2.0], [91100.0, 3.0], [92700.0, 57.0], [94300.0, 1.0], [100700.0, 4.0], [103900.0, 4.0], [105500.0, 2.0], [115100.0, 10.0], [126300.0, 15.0], [129500.0, 1.0], [127900.0, 5.0], [177800.0, 1.0], [33900.0, 10.0], [35500.0, 28.0], [38700.0, 3.0], [37900.0, 16.0], [39500.0, 4.0], [42700.0, 3.0], [41900.0, 1.0], [41100.0, 1.0], [43500.0, 3.0], [45900.0, 6.0], [45100.0, 20.0], [46700.0, 4.0], [49100.0, 18.0], [48300.0, 2.0], [49900.0, 2.0], [51500.0, 6.0], [55500.0, 4.0], [58700.0, 3.0], [57900.0, 1.0], [59500.0, 4.0], [63500.0, 26.0], [65100.0, 5.0], [64300.0, 1.0], [66200.0, 19.0], [67800.0, 1.0], [69400.0, 1.0], [71000.0, 4.0], [72600.0, 1.0], [77400.0, 2.0], [74200.0, 1.0], [80600.0, 9.0], [79000.0, 3.0], [83800.0, 70.0], [82200.0, 1.0], [95000.0, 5.0], [98200.0, 2.0], [101400.0, 3.0], [104600.0, 12.0], [103000.0, 51.0], [114200.0, 1.0], [127000.0, 8.0], [163600.0, 1.0], [66900.0, 4.0], [68500.0, 2.0], [70100.0, 2.0], [71700.0, 6.0], [73300.0, 1.0], [81300.0, 3.0], [82900.0, 1.0], [86100.0, 4.0], [87700.0, 1.0], [89300.0, 1.0], [92500.0, 1.0], [95700.0, 2.0], [98900.0, 1.0], [100500.0, 33.0], [103700.0, 2.0], [105300.0, 2.0], [111700.0, 2.0], [116500.0, 1.0], [130900.0, 10.0], [129300.0, 1.0], [16500.0, 7.0], [17300.0, 17.0], [16900.0, 25.0], [17700.0, 295.0], [18100.0, 135.0], [18900.0, 58.0], [19300.0, 1.0], [18500.0, 1.0], [20100.0, 12.0], [19700.0, 9.0], [20900.0, 9.0], [21300.0, 11.0], [20500.0, 1.0], [22100.0, 3.0], [21700.0, 10.0], [23300.0, 8.0], [24500.0, 2.0], [24100.0, 32.0], [23700.0, 1.0], [26100.0, 8.0], [25700.0, 6.0], [27300.0, 1.0], [27700.0, 4.0], [28100.0, 2.0], [29300.0, 73.0], [28900.0, 2.0], [30500.0, 10.0], [30900.0, 149.0], [31300.0, 15.0], [32500.0, 1.0], [32100.0, 5.0], [33800.0, 2.0], [33000.0, 9.0], [131100.0, 5.0], [35400.0, 2.0], [37000.0, 1.0], [37800.0, 2.0], [39400.0, 5.0], [41000.0, 2.0], [42600.0, 2.0], [45000.0, 1.0], [44200.0, 1.0], [46600.0, 2.0], [49000.0, 3.0], [51400.0, 2.0], [55400.0, 2.0], [57000.0, 2.0], [57800.0, 4.0], [59400.0, 2.0], [61000.0, 2.0], [63400.0, 2.0], [62600.0, 4.0], [65000.0, 122.0], [64200.0, 12.0], [66000.0, 20.0], [67600.0, 7.0], [70800.0, 3.0], [77200.0, 1.0], [74000.0, 1.0], [80400.0, 2.0], [78800.0, 3.0], [83600.0, 9.0], [85200.0, 2.0], [82000.0, 2.0], [93200.0, 2.0], [96400.0, 3.0], [98000.0, 1.0], [101200.0, 30.0], [99600.0, 1.0], [109200.0, 1.0], [118800.0, 1.0], [126800.0, 12.0], [131300.0, 3.0], [65900.0, 8.0], [67500.0, 6.0], [72300.0, 26.0], [70700.0, 3.0], [73900.0, 1.0], [88300.0, 2.0], [86700.0, 1.0], [101100.0, 3.0], [99500.0, 18.0], [104300.0, 5.0], [112300.0, 2.0], [117100.0, 1.0], [126700.0, 2.0], [154600.0, 2.0], [34100.0, 57.0], [35700.0, 4.0], [34900.0, 8.0], [36500.0, 4.0], [38100.0, 2.0], [42900.0, 4.0], [42100.0, 1.0], [43700.0, 2.0], [46900.0, 4.0], [48500.0, 42.0], [49300.0, 5.0], [50900.0, 22.0], [51700.0, 1.0], [52500.0, 2.0], [54900.0, 1.0], [53300.0, 2.0], [56500.0, 4.0], [58900.0, 49.0], [58100.0, 12.0], [61300.0, 2.0], [62100.0, 2.0], [64500.0, 23.0], [65300.0, 16.0], [63700.0, 4.0], [66600.0, 33.0], [68200.0, 1.0], [69800.0, 5.0], [71400.0, 3.0], [73000.0, 2.0], [76200.0, 54.0], [74600.0, 11.0], [77800.0, 2.0], [81000.0, 3.0], [84200.0, 5.0], [82600.0, 1.0], [87400.0, 2.0], [95400.0, 1.0], [97000.0, 1.0], [100200.0, 76.0], [98600.0, 1.0], [106600.0, 2.0], [109800.0, 1.0], [113000.0, 1.0], [129000.0, 5.0], [130600.0, 77.0], [176500.0, 1.0], [65700.0, 4.0], [70500.0, 2.0], [73700.0, 5.0], [72100.0, 1.0], [76900.0, 2.0], [75300.0, 1.0], [81700.0, 1.0], [83300.0, 4.0], [88100.0, 59.0], [91300.0, 2.0], [97700.0, 2.0], [102500.0, 5.0], [115300.0, 33.0], [128100.0, 8.0], [129700.0, 1.0], [8300.0, 449.0], [8500.0, 287.0], [8700.0, 78.0], [132600.0, 1.0], [139000.0, 1.0], [9100.0, 421.0], [8900.0, 23.0], [9300.0, 76.0], [9500.0, 324.0], [9700.0, 85.0], [10100.0, 148.0], [9900.0, 326.0], [10300.0, 4.0], [10700.0, 6.0], [10500.0, 126.0], [11100.0, 92.0], [10900.0, 14.0], [11500.0, 70.0], [11700.0, 41.0], [11300.0, 17.0], [12100.0, 43.0], [11900.0, 22.0], [12300.0, 4.0], [12700.0, 28.0], [12500.0, 13.0], [13300.0, 89.0], [12900.0, 30.0], [13100.0, 1.0], [13700.0, 47.0], [13500.0, 44.0], [14100.0, 9.0], [13900.0, 37.0], [14300.0, 41.0], [14700.0, 5.0], [14500.0, 74.0], [14900.0, 180.0], [15300.0, 19.0], [15100.0, 32.0], [15700.0, 9.0], [15500.0, 5.0], [16300.0, 35.0], [15900.0, 97.0], [16100.0, 93.0], [17000.0, 172.0], [17400.0, 13.0], [16600.0, 1.0], [17800.0, 7.0], [18200.0, 301.0], [19000.0, 59.0], [19400.0, 13.0], [18600.0, 2.0], [19800.0, 62.0], [20600.0, 20.0], [21000.0, 11.0], [21400.0, 4.0], [22200.0, 3.0], [22600.0, 4.0], [23400.0, 2.0], [24200.0, 4.0], [25000.0, 3.0], [24600.0, 1.0], [26600.0, 7.0], [26200.0, 15.0], [25800.0, 2.0], [27000.0, 5.0], [27400.0, 5.0], [28600.0, 2.0], [28200.0, 2.0], [29400.0, 29.0], [29000.0, 1.0], [29800.0, 18.0], [30600.0, 2.0], [31000.0, 38.0], [31400.0, 11.0], [32200.0, 7.0], [32600.0, 5.0], [34800.0, 2.0], [33200.0, 2.0], [34000.0, 5.0], [35600.0, 1.0], [36400.0, 5.0], [37200.0, 4.0], [38000.0, 3.0], [38800.0, 3.0], [40400.0, 7.0], [41200.0, 2.0], [43600.0, 1.0], [44400.0, 2.0], [47600.0, 1.0], [48400.0, 1.0], [49200.0, 9.0], [51600.0, 5.0], [52400.0, 2.0], [56400.0, 2.0], [58800.0, 36.0], [58000.0, 1.0], [60400.0, 5.0], [59600.0, 2.0], [62000.0, 2.0], [62800.0, 2.0], [63600.0, 40.0], [65200.0, 5.0], [64400.0, 6.0], [66400.0, 30.0], [68000.0, 3.0], [69600.0, 2.0], [71200.0, 1.0], [74400.0, 2.0], [77600.0, 1.0], [79200.0, 1.0], [80800.0, 1.0], [82400.0, 5.0], [84000.0, 1.0], [85600.0, 2.0], [93600.0, 1.0], [96800.0, 8.0], [100000.0, 229.0], [108000.0, 2.0], [130400.0, 4.0], [127200.0, 12.0], [69500.0, 2.0], [66300.0, 1.0], [71100.0, 1.0], [72700.0, 1.0], [75900.0, 3.0], [80700.0, 2.0], [82300.0, 1.0], [90300.0, 1.0], [96700.0, 2.0], [98300.0, 28.0], [101500.0, 3.0], [128700.0, 67.0], [34300.0, 2.0], [35100.0, 4.0], [35900.0, 11.0], [36700.0, 2.0], [38300.0, 1.0], [37500.0, 2.0], [39100.0, 4.0], [42300.0, 3.0], [43900.0, 4.0], [44700.0, 1.0], [47100.0, 2.0], [48700.0, 6.0], [47900.0, 2.0], [49500.0, 3.0], [50300.0, 1.0], [51100.0, 9.0], [54300.0, 3.0], [53500.0, 3.0], [57500.0, 3.0], [58300.0, 3.0], [60700.0, 6.0], [59900.0, 2.0], [62300.0, 2.0], [63100.0, 5.0], [64700.0, 3.0], [63900.0, 51.0], [65500.0, 8.0], [67000.0, 7.0], [68600.0, 1.0], [71800.0, 60.0], [70200.0, 1.0], [75000.0, 1.0], [78200.0, 1.0], [79800.0, 1.0], [84600.0, 2.0], [89400.0, 2.0], [87800.0, 2.0], [86200.0, 1.0], [91000.0, 1.0], [99000.0, 5.0], [100600.0, 26.0], [105400.0, 1.0], [107000.0, 10.0], [115000.0, 1.0], [127800.0, 32.0], [131000.0, 12.0], [134100.0, 1.0], [210900.0, 5.0], [66100.0, 39.0], [67700.0, 4.0], [74100.0, 2.0], [83700.0, 3.0], [82100.0, 1.0], [85300.0, 1.0], [93300.0, 1.0], [102900.0, 3.0], [109300.0, 1.0], [112500.0, 2.0], [16700.0, 50.0], [17100.0, 45.0], [18300.0, 26.0], [17900.0, 69.0], [17500.0, 4.0], [19100.0, 3.0], [18700.0, 3.0], [19500.0, 6.0], [19900.0, 206.0], [20300.0, 1.0], [21500.0, 2.0], [20700.0, 43.0], [21900.0, 11.0], [23500.0, 1.0], [23100.0, 28.0], [22700.0, 39.0], [23900.0, 1.0], [24300.0, 4.0], [25500.0, 2.0], [25100.0, 12.0], [24700.0, 3.0], [26300.0, 1.0], [27100.0, 23.0], [26700.0, 6.0], [28300.0, 2.0], [29100.0, 21.0], [29500.0, 5.0], [28700.0, 3.0], [29900.0, 2.0], [30300.0, 18.0], [30700.0, 28.0], [31100.0, 100.0], [32300.0, 3.0], [31900.0, 41.0], [32700.0, 40.0], [34200.0, 10.0], [33400.0, 9.0], [36600.0, 2.0], [35800.0, 6.0], [39000.0, 2.0], [41400.0, 2.0], [42200.0, 4.0], [45400.0, 17.0], [47000.0, 2.0], [48600.0, 31.0], [51000.0, 4.0], [49400.0, 4.0], [55800.0, 1.0], [57400.0, 7.0], [59000.0, 15.0], [60600.0, 1.0], [65400.0, 1.0], [64600.0, 3.0], [63800.0, 38.0], [66800.0, 1.0], [71600.0, 3.0], [73200.0, 2.0], [76400.0, 5.0], [74800.0, 1.0], [81200.0, 1.0], [79600.0, 5.0], [82800.0, 3.0], [84400.0, 3.0], [92400.0, 2.0], [94000.0, 1.0], [95600.0, 6.0], [97200.0, 1.0], [102000.0, 2.0], [100400.0, 20.0], [103600.0, 12.0], [113200.0, 1.0], [127600.0, 39.0], [129200.0, 25.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 210900.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 480.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 110240.0, "series": [{"data": [[0.0, 110240.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 10001.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 19379.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 480.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 245.29774127310108, "minX": 1.6828752E12, "maxY": 3000.0, "series": [{"data": [[1.68287544E12, 2999.6571741511493], [1.6828755E12, 1754.3280783979556], [1.68287532E12, 3000.0], [1.68287538E12, 3000.0], [1.6828752E12, 3000.0], [1.68287526E12, 3000.0], [1.68287556E12, 245.29774127310108]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68287556E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 45.0, "minX": 2.0, "maxY": 210911.0, "series": [{"data": [[2.0, 100610.0], [4.0, 100611.0], [5.0, 100610.5], [6.0, 100610.5], [8.0, 100609.5], [11.0, 100609.0], [12.0, 100609.0], [14.0, 100607.66666666667], [15.0, 100605.0], [17.0, 100601.0], [20.0, 100592.0], [24.0, 100587.0], [27.0, 100587.0], [29.0, 100585.33333333333], [31.0, 100586.0], [35.0, 100585.0], [37.0, 100584.0], [36.0, 100584.66666666667], [38.0, 100580.0], [40.0, 100579.5], [42.0, 100577.5], [45.0, 100090.0], [44.0, 100101.0], [55.0, 100077.77777777778], [54.0, 100077.0], [56.0, 100076.0], [59.0, 100075.33333333333], [61.0, 100075.0], [62.0, 100074.5], [66.0, 100073.0], [71.0, 100072.0], [70.0, 100072.0], [69.0, 100073.0], [68.0, 100073.0], [72.0, 100072.0], [79.0, 100070.0], [78.0, 100070.0], [76.0, 100071.0], [83.0, 100057.0], [82.0, 100070.0], [80.0, 100070.0], [85.0, 100054.0], [89.0, 100028.0], [88.0, 100031.0], [111.0, 100270.0], [110.0, 100270.75], [109.0, 100271.14285714286], [108.0, 100270.5], [115.0, 100269.6], [114.0, 100270.5], [113.0, 100270.5], [112.0, 100269.0], [118.0, 100251.0], [117.0, 100258.0], [116.0, 100262.0], [123.0, 100203.0], [121.0, 100211.0], [126.0, 100159.0], [125.0, 100199.0], [124.0, 100204.0], [134.0, 100143.33333333333], [133.0, 100143.0], [132.0, 100143.0], [131.0, 100143.0], [142.0, 100140.0], [139.0, 100140.0], [138.0, 100142.0], [137.0, 100141.0], [136.0, 100142.0], [151.0, 100138.0], [150.0, 100139.0], [147.0, 100140.0], [145.0, 100141.0], [144.0, 100139.66666666667], [159.0, 100138.5], [158.0, 100139.0], [156.0, 100139.0], [154.0, 100139.0], [167.0, 100135.5], [166.0, 100135.0], [164.0, 100135.0], [163.0, 100137.0], [162.0, 100137.0], [160.0, 100138.0], [175.0, 100131.5], [173.0, 100133.0], [172.0, 100135.0], [170.0, 100134.0], [183.0, 100125.0], [182.0, 100127.0], [181.0, 100128.0], [179.0, 100130.0], [178.0, 100129.0], [177.0, 100129.5], [190.0, 100121.5], [188.0, 100123.0], [186.0, 100122.0], [185.0, 100123.5], [199.0, 100120.75], [198.0, 100120.0], [194.0, 100121.25], [207.0, 100105.33333333333], [206.0, 100106.0], [204.0, 100106.0], [202.0, 100109.5], [200.0, 100120.0], [212.0, 100097.0], [211.0, 100102.0], [223.0, 100093.0], [222.0, 100092.0], [221.0, 100092.5], [220.0, 100092.83333333334], [228.0, 100090.5], [226.0, 100091.66666666667], [239.0, 100086.0], [237.0, 100086.0], [236.0, 100089.66666666667], [235.0, 100090.0], [233.0, 100090.0], [246.0, 100078.0], [244.0, 100080.0], [242.0, 100080.0], [240.0, 100086.0], [255.0, 100074.0], [253.0, 100073.0], [252.0, 100074.0], [251.0, 100075.0], [250.0, 100075.75], [268.0, 100036.66666666667], [271.0, 100032.0], [270.0, 100033.0], [269.0, 100036.0], [265.0, 100038.0], [263.0, 100048.0], [258.0, 100070.66666666667], [262.0, 100050.0], [261.0, 100057.0], [260.0, 100060.5], [274.0, 100026.0], [285.0, 99097.0], [286.0, 100306.0], [284.0, 99099.0], [283.0, 99270.0], [281.0, 99287.0], [279.0, 100023.0], [278.0, 100025.0], [276.0, 100026.0], [273.0, 100028.0], [272.0, 100032.0], [291.0, 98345.0], [302.0, 98341.5], [300.0, 98341.0], [299.0, 98343.0], [297.0, 98344.0], [295.0, 98343.5], [293.0, 98344.5], [289.0, 98346.0], [288.0, 100305.5], [317.0, 98321.0], [319.0, 98939.0], [316.0, 98941.0], [306.0, 98334.0], [305.0, 99573.0], [304.0, 98339.5], [315.0, 99560.0], [313.0, 99560.0], [312.0, 98324.0], [311.0, 98326.0], [310.0, 98945.0], [308.0, 98947.0], [323.0, 99548.0], [333.0, 99536.0], [335.0, 98916.0], [332.0, 99537.5], [331.0, 99537.0], [329.0, 98094.5], [327.0, 97883.0], [326.0, 98928.0], [324.0, 98312.0], [322.0, 99550.0], [321.0, 98937.5], [339.0, 131150.0], [349.0, 96898.0], [351.0, 97987.66666666667], [348.0, 96882.0], [347.0, 96889.5], [344.0, 97436.0], [341.0, 97875.0], [340.0, 99522.0], [338.0, 98085.5], [336.0, 97887.0], [367.0, 100346.0], [366.0, 100346.0], [364.0, 100349.0], [363.0, 100351.0], [360.0, 107026.5], [357.0, 107027.0], [355.0, 107029.0], [352.0, 101084.0], [382.0, 104615.0], [383.0, 113230.0], [381.0, 105620.0], [380.0, 103046.0], [379.0, 115455.0], [378.0, 100329.0], [377.0, 107901.0], [375.0, 100339.0], [371.0, 100344.0], [369.0, 100345.0], [368.0, 100346.0], [374.0, 100341.0], [398.0, 84685.0], [399.0, 112595.0], [397.0, 84687.0], [396.0, 85311.0], [395.0, 85693.0], [394.0, 85694.0], [393.0, 86700.0], [392.0, 93057.0], [391.0, 109200.0], [385.0, 103605.0], [384.0, 97088.0], [387.0, 102597.0], [386.0, 102600.0], [390.0, 94065.0], [389.0, 95071.0], [388.0, 101592.0], [414.0, 105586.0], [415.0, 82027.0], [413.0, 105588.0], [412.0, 106595.0], [411.0, 77678.0], [410.0, 78684.0], [409.0, 78686.0], [408.0, 79691.0], [407.0, 79693.0], [401.0, 84316.0], [400.0, 112593.0], [403.0, 81710.0], [402.0, 82668.0], [406.0, 80699.0], [405.0, 82347.0], [404.0, 83353.0], [430.0, 101944.0], [431.0, 74027.0], [429.0, 101945.0], [428.0, 98588.0], [427.0, 102944.0], [426.0, 103943.0], [425.0, 70673.0], [424.0, 71671.0], [423.0, 71672.0], [417.0, 75083.0], [416.0, 82025.0], [419.0, 80028.0], [418.0, 81026.0], [422.0, 72671.0], [421.0, 79028.0], [420.0, 80026.0], [447.0, 100385.0], [446.0, 100386.33333333333], [443.0, 100391.0], [442.0, 100395.0], [441.0, 100432.0], [440.0, 100615.33333333333], [437.0, 100617.0], [435.0, 100700.0], [433.0, 100619.0], [432.0, 89162.0], [460.0, 66656.0], [462.0, 66437.0], [463.0, 68081.0], [461.0, 95591.0], [459.0, 101388.33333333333], [456.0, 100375.0], [453.0, 100382.0], [452.0, 102957.0], [451.0, 100383.0], [450.0, 100384.0], [478.0, 71236.0], [479.0, 79851.0], [477.0, 66055.0], [476.0, 66058.0], [475.0, 81870.0], [474.0, 93651.0], [473.0, 94659.0], [472.0, 94661.0], [471.0, 95668.0], [465.0, 65836.0], [464.0, 65185.0], [467.0, 64174.0], [466.0, 64828.0], [470.0, 62809.0], [469.0, 63816.0], [468.0, 63165.0], [494.0, 57064.0], [495.0, 77244.0], [493.0, 57981.0], [492.0, 58073.0], [491.0, 58990.0], [490.0, 58991.0], [489.0, 59998.0], [488.0, 60000.0], [487.0, 61008.0], [481.0, 66465.0], [480.0, 78844.0], [483.0, 62695.0], [482.0, 62697.0], [486.0, 61010.0], [485.0, 64447.0], [484.0, 64447.0], [510.0, 72196.0], [511.0, 67293.0], [509.0, 66730.0], [508.0, 67738.0], [507.0, 73208.0], [506.0, 210907.0], [505.0, 210907.0], [504.0, 210908.0], [503.0, 210911.0], [497.0, 76234.0], [496.0, 76236.0], [499.0, 60138.0], [498.0, 60140.0], [502.0, 210910.0], [501.0, 74216.0], [500.0, 70210.0], [540.0, 63663.0], [543.0, 61646.0], [529.0, 71054.0], [528.0, 69486.0], [531.0, 63161.0], [530.0, 64170.0], [533.0, 66931.0], [532.0, 63160.0], [542.0, 62653.0], [541.0, 62655.0], [539.0, 63665.0], [538.0, 67014.0], [537.0, 64441.0], [536.0, 65681.0], [527.0, 69723.0], [513.0, 64822.0], [512.0, 65936.0], [515.0, 67417.0], [514.0, 64818.0], [517.0, 62804.0], [516.0, 63811.0], [519.0, 67262.0], [518.0, 68269.0], [526.0, 64385.0], [525.0, 70731.0], [524.0, 62084.0], [523.0, 62086.0], [522.0, 66250.0], [521.0, 66252.0], [520.0, 67260.0], [535.0, 65684.0], [534.0, 69034.0], [572.0, 49462.0], [575.0, 49982.0], [561.0, 52560.0], [560.0, 53382.0], [563.0, 51551.0], [562.0, 52559.0], [565.0, 52492.0], [564.0, 53502.0], [574.0, 177863.0], [573.0, 48453.0], [571.0, 49465.0], [570.0, 50473.0], [569.0, 50475.0], [568.0, 51481.0], [559.0, 53383.0], [545.0, 60403.0], [544.0, 61644.0], [547.0, 59628.0], [546.0, 60634.0], [549.0, 58384.0], [548.0, 59625.0], [551.0, 57845.0], [550.0, 58857.0], [558.0, 54390.0], [557.0, 56921.0], [556.0, 57537.0], [555.0, 55827.0], [554.0, 58547.0], [553.0, 56837.0], [552.0, 57844.0], [567.0, 51484.0], [566.0, 52491.0], [604.0, 39583.0], [607.0, 39574.0], [592.0, 43746.0], [594.0, 42138.0], [593.0, 100206.0], [596.0, 42736.0], [595.0, 42739.0], [606.0, 39576.0], [605.0, 39584.0], [603.0, 1623.0], [602.0, 100133.0], [601.0, 41946.0], [600.0, 41113.0], [591.0, 42914.0], [576.0, 49977.0], [578.0, 48967.0], [577.0, 48972.0], [580.0, 47959.0], [579.0, 47960.0], [583.0, 45943.0], [582.0, 46950.0], [590.0, 32089.0], [589.0, 44756.0], [588.0, 43923.0], [587.0, 43938.0], [586.0, 44931.0], [585.0, 44933.0], [584.0, 45940.0], [599.0, 32100.0], [598.0, 32101.5], [608.0, 1261.0], [688.0, 38791.0], [780.0, 596.0], [826.0, 594.4], [819.0, 595.0], [818.0, 594.0], [803.0, 38788.0], [863.0, 590.0], [861.0, 591.0], [858.0, 590.5], [854.0, 590.0], [853.0, 589.6666666666666], [852.0, 590.2222222222223], [851.0, 590.6874999999999], [882.0, 646.0], [892.0, 586.0], [886.0, 586.5], [885.0, 588.2413793103449], [884.0, 589.2], [881.0, 589.0], [875.0, 590.0], [874.0, 590.0], [871.0, 590.0], [870.0, 590.0], [869.0, 590.0], [866.0, 590.0], [865.0, 590.0], [864.0, 590.0], [908.0, 584.0], [950.0, 584.0], [943.0, 584.0], [942.0, 584.0], [986.0, 582.0], [990.0, 671.4], [991.0, 581.5], [977.0, 582.2], [976.0, 583.0], [979.0, 582.0], [978.0, 582.0], [981.0, 582.2], [980.0, 582.0], [989.0, 582.5], [988.0, 582.0], [987.0, 582.0], [985.0, 582.0], [967.0, 582.0], [966.0, 582.25], [962.0, 582.3333333333334], [961.0, 583.0], [975.0, 583.0], [974.0, 583.0], [973.0, 583.0], [972.0, 583.0], [971.0, 582.5], [970.0, 583.3333333333334], [969.0, 582.6666666666666], [968.0, 582.6666666666666], [983.0, 581.8], [982.0, 582.0], [1016.0, 581.0], [1021.0, 580.5], [1022.0, 579.8], [1008.0, 806.0], [1011.0, 581.0], [1010.0, 580.0], [1020.0, 581.0], [1018.0, 582.0], [1017.0, 580.5], [1006.0, 656.6666666666666], [992.0, 581.3333333333334], [995.0, 582.0], [993.0, 583.0], [997.0, 580.5], [996.0, 671.4], [999.0, 580.6666666666667], [998.0, 581.0], [1005.0, 581.0], [1004.0, 637.25], [1003.0, 581.2], [1002.0, 618.3333333333333], [1001.0, 581.1666666666666], [1000.0, 580.7777777777777], [1015.0, 581.0], [1014.0, 637.25], [1013.0, 581.0], [1012.0, 580.0], [1030.0, 580.0], [1056.0, 580.0], [1068.0, 582.0], [1062.0, 433.0], [1060.0, 434.0], [1058.0, 608.4782608695652], [1054.0, 579.5], [1024.0, 580.0], [1026.0, 579.8749999999999], [1032.0, 580.0], [1034.0, 580.0], [1036.0, 580.25], [1038.0, 644.1428571428572], [1052.0, 579.0], [1050.0, 767.1666666666667], [1048.0, 649.25], [1046.0, 579.2857142857143], [1044.0, 579.7777777777777], [1042.0, 636.125], [1040.0, 693.0], [1380.0, 579.0], [1398.0, 577.0], [1394.0, 578.0], [1396.0, 578.0], [1442.0, 569.8333333333333], [1456.0, 568.5], [1440.0, 586.0], [1444.0, 575.3333333333334], [1448.0, 570.0], [1524.0, 565.0], [1510.0, 569.6666666666666], [1518.0, 562.0], [1502.0, 569.0], [1498.0, 572.0], [1496.0, 584.0], [1516.0, 581.0], [1514.0, 570.2], [1526.0, 563.0], [1504.0, 583.0], [1532.0, 580.0], [1534.0, 563.0], [1530.0, 571.5], [1506.0, 581.5], [1512.0, 573.5], [1588.0, 560.0], [1568.0, 577.0], [1570.0, 577.0], [1578.0, 578.0], [1580.0, 572.0], [1582.0, 576.0], [1598.0, 570.25], [1594.0, 565.0], [1592.0, 571.4], [1590.0, 575.0], [1586.0, 578.0], [1584.0, 573.6], [1550.0, 575.0], [1548.0, 570.5], [1546.0, 563.6], [1544.0, 562.0], [1542.0, 569.3333333333334], [1536.0, 563.0], [1538.0, 571.6363636363637], [1540.0, 562.25], [1566.0, 564.7368421052631], [1564.0, 563.0], [1562.0, 573.1250000000001], [1558.0, 563.5], [1556.0, 565.0], [1552.0, 562.0], [1650.0, 546.0], [1658.0, 545.0], [1662.0, 545.5], [1652.0, 546.3333333333334], [1612.0, 573.7], [1610.0, 557.0], [1608.0, 574.0], [1606.0, 573.0], [1604.0, 574.0], [1602.0, 562.5], [1600.0, 558.0], [1628.0, 573.6666666666666], [1626.0, 573.3333333333334], [1620.0, 574.0], [1616.0, 574.0], [1700.0, 541.5], [1698.0, 540.0], [1704.0, 541.5], [1710.0, 539.0], [1706.0, 540.5], [1702.0, 541.4], [1696.0, 543.0], [1690.0, 542.0], [1666.0, 545.0], [1672.0, 545.2], [1676.0, 543.0], [1688.0, 541.8], [1686.0, 541.0], [1756.0, 531.8], [1776.0, 546.0], [1752.0, 532.0], [1748.0, 533.0], [1746.0, 535.0], [1766.0, 546.5], [1764.0, 547.5], [1762.0, 545.6], [1846.0, 321.5], [1848.0, 319.0], [1824.0, 390.5714285714286], [1834.0, 323.0], [1836.0, 323.0], [1844.0, 321.0], [1842.0, 322.3333333333333], [1840.0, 321.0], [1800.0, 387.5714285714286], [1798.0, 377.0], [1812.0, 390.7142857142857], [1810.0, 390.0], [1808.0, 389.0], [1888.0, 247.0], [1886.0, 90.0], [1884.0, 299.0], [1874.0, 301.8571428571429], [1870.0, 301.75], [1858.0, 318.0], [1976.0, 238.0], [1980.0, 239.16666666666669], [1982.0, 238.83333333333334], [1978.0, 240.0], [1974.0, 238.5], [1972.0, 239.31249999999997], [1966.0, 239.0], [1970.0, 240.0], [1946.0, 241.5], [2044.0, 205.0], [2024.0, 208.0], [2022.0, 206.0], [2026.0, 209.0], [2028.0, 207.0], [2046.0, 206.0], [2042.0, 206.5], [2040.0, 206.5], [2034.0, 207.0], [2032.0, 207.66666666666666], [1984.0, 240.0], [2014.0, 211.83333333333334], [2052.0, 202.0], [2128.0, 36770.0], [2108.0, 156.66666666666666], [2056.0, 201.0], [2076.0, 198.0], [2096.0, 194.0], [2092.0, 194.0], [2388.0, 291.5], [2368.0, 295.0], [2392.0, 291.0], [2396.0, 290.42105263157896], [2424.0, 222.0], [2420.0, 221.0], [2404.0, 289.45454545454544], [2400.0, 290.40000000000003], [2556.0, 69.0], [2508.0, 103.0], [2512.0, 104.0], [2520.0, 102.0], [2544.0, 91.0], [2528.0, 102.0], [2460.0, 171.0], [2448.0, 215.0], [2444.0, 216.0], [2440.0, 216.0], [2436.0, 219.0], [2484.0, 147.0], [2464.0, 153.0], [2680.0, 31092.0], [2632.0, 31127.0], [2636.0, 31126.5], [2640.0, 31122.0], [2648.0, 31118.0], [2672.0, 31093.0], [2664.0, 31113.0], [2660.0, 31114.0], [2656.0, 31115.0], [2588.0, 31176.0], [2584.0, 31176.0], [2576.0, 31180.25], [2568.0, 45.0], [2620.0, 31144.0], [2616.0, 31158.0], [2608.0, 31162.0], [2592.0, 31169.75], [2716.0, 1041.0], [2752.0, 1053.0], [2756.0, 1052.0], [2760.0, 1047.5], [2764.0, 1045.0], [2776.0, 1029.0], [2804.0, 1095.0], [2796.0, 1013.0], [2792.0, 1044.0], [2784.0, 1022.0], [2712.0, 15073.0], [2708.0, 15084.0], [2704.0, 15101.0], [2700.0, 32889.0], [2696.0, 33900.0], [2692.0, 31090.0], [2688.0, 31091.0], [2748.0, 1058.0], [2744.0, 1061.0], [2740.0, 1077.0], [2728.0, 3027.0], [2724.0, 1021.6666666666666], [2720.0, 1031.0], [2936.0, 310.0], [2928.0, 310.6], [2880.0, 2261.7], [2896.0, 316.0], [2900.0, 316.0], [2908.0, 315.0], [2932.0, 309.0], [2920.0, 2481.0], [2916.0, 312.0], [2912.0, 312.0], [2816.0, 1062.0], [2820.0, 1055.0], [2824.0, 1054.0], [2828.0, 1025.0], [2840.0, 1013.0], [2844.0, 1012.5714285714286], [2876.0, 9858.5], [3000.0, 3631.208567845801], [2061.0, 200.5], [2121.0, 132.14285714285714], [2125.0, 105336.0], [2057.0, 202.0], [2069.0, 200.625], [2105.0, 156.66666666666666], [2101.0, 157.0], [2097.0, 193.0], [2093.0, 194.5], [2089.0, 194.5], [2381.0, 293.0], [2425.0, 221.5], [2429.0, 220.0], [2369.0, 294.2857142857143], [2385.0, 292.04285714285714], [2389.0, 291.6666666666667], [2393.0, 291.2], [2397.0, 290.4], [2413.0, 289.125], [2409.0, 289.5], [2405.0, 289.8], [2401.0, 290.0], [2553.0, 68.0], [2541.0, 99.25], [2501.0, 103.0], [2509.0, 103.25], [2517.0, 102.66666666666667], [2521.0, 102.0], [2525.0, 102.0], [2537.0, 101.0], [2461.0, 171.0], [2445.0, 216.0], [2441.0, 215.0], [2437.0, 218.0], [2433.0, 221.0], [2485.0, 147.0], [2481.0, 149.0], [2473.0, 149.33333333333334], [2469.0, 151.5], [2465.0, 153.0], [2677.0, 35766.0], [2681.0, 31092.0], [2625.0, 31141.0], [2629.0, 31127.0], [2633.0, 31127.0], [2649.0, 31118.0], [2665.0, 31112.0], [2657.0, 31115.0], [2581.0, 31178.666666666668], [2573.0, 31180.0], [2569.0, 31291.0], [2621.0, 31143.0], [2617.0, 31158.0], [2609.0, 31161.5], [2605.0, 31163.0], [2601.0, 31163.0], [2593.0, 31169.0], [2793.0, 1060.0], [2785.0, 1021.0], [2753.0, 1053.0], [2757.0, 1051.0], [2761.0, 1047.0], [2765.0, 1043.0], [2769.0, 1041.0], [2777.0, 1028.0], [2805.0, 1095.0], [2801.0, 1096.0], [2797.0, 1097.0], [2713.0, 1050.0], [2709.0, 15083.0], [2705.0, 15099.0], [2701.0, 15109.0], [2697.0, 33899.0], [2693.0, 31089.8], [2689.0, 31091.0], [2749.0, 1057.0], [2745.0, 1061.0], [2741.0, 1074.0], [2721.0, 1032.0], [2917.0, 312.0], [2889.0, 318.0], [2893.0, 317.75], [2909.0, 314.0], [2817.0, 1060.0], [2821.0, 1056.0], [2825.0, 1054.0], [2833.0, 1024.0], [2841.0, 1013.0], [2845.0, 3091.0], [2877.0, 16924.0], [2869.0, 2497.0], [2861.0, 9274.5], [2853.0, 749.0], [1033.0, 617.5], [1061.0, 434.0], [1065.0, 433.0], [1059.0, 434.0], [1025.0, 579.6], [1027.0, 580.5], [1031.0, 692.0], [1035.0, 580.2], [1037.0, 692.0], [1039.0, 580.5], [1053.0, 579.0], [1051.0, 580.0], [1049.0, 653.8333333333333], [1047.0, 578.8571428571428], [1045.0, 579.5], [1043.0, 579.75], [1041.0, 580.0], [1399.0, 574.3333333333334], [1401.0, 578.6666666666666], [1469.0, 577.5], [1443.0, 570.6666666666666], [1439.0, 588.0], [1413.0, 570.0], [1409.0, 572.0], [1437.0, 586.0], [1447.0, 586.0], [1525.0, 577.25], [1515.0, 571.5], [1519.0, 562.0], [1523.0, 563.6666666666666], [1503.0, 565.0], [1501.0, 567.1203703703704], [1497.0, 568.0], [1513.0, 581.0], [1509.0, 565.0], [1529.0, 569.8], [1505.0, 582.0], [1531.0, 576.2500000000001], [1533.0, 567.3333333333334], [1535.0, 573.8], [1593.0, 576.0], [1589.0, 572.5531914893616], [1599.0, 566.5], [1569.0, 578.0], [1573.0, 578.0], [1571.0, 561.0], [1577.0, 570.0], [1579.0, 562.0], [1581.0, 570.6], [1597.0, 570.0], [1591.0, 571.5], [1587.0, 578.0], [1585.0, 577.0], [1551.0, 563.0], [1547.0, 566.75], [1537.0, 571.0], [1539.0, 563.0], [1541.0, 580.0], [1567.0, 568.5084745762713], [1565.0, 572.2], [1563.0, 562.25], [1561.0, 563.0], [1559.0, 570.0], [1557.0, 579.0], [1555.0, 574.25], [1553.0, 562.0], [1615.0, 574.0], [1663.0, 546.0], [1661.0, 545.5], [1653.0, 546.0], [1613.0, 574.6666666666666], [1611.0, 566.5], [1609.0, 574.2222222222222], [1605.0, 573.5], [1603.0, 561.8], [1601.0, 575.0], [1647.0, 547.0], [1621.0, 573.0], [1619.0, 572.125], [1671.0, 543.5], [1709.0, 540.6666666666666], [1701.0, 540.0], [1697.0, 541.5], [1669.0, 543.4], [1673.0, 562.0], [1677.0, 561.4285714285714], [1687.0, 544.0], [1685.0, 543.0], [1681.0, 560.5], [1757.0, 532.0], [1765.0, 547.3333333333334], [1779.0, 546.7], [1759.0, 541.8888888888889], [1755.0, 532.0], [1753.0, 530.0], [1751.0, 534.5], [1747.0, 540.5], [1775.0, 547.5], [1771.0, 546.0], [1761.0, 541.3333333333334], [1851.0, 321.0], [1855.0, 320.25], [1831.0, 323.5], [1829.0, 316.0], [1833.0, 324.0], [1837.0, 322.0], [1849.0, 320.0], [1847.0, 321.0], [1805.0, 389.0], [1799.0, 377.5], [1817.0, 391.0], [1813.0, 391.0], [1811.0, 389.0], [1809.0, 390.0], [1885.0, 300.0], [1887.0, 89.0], [1883.0, 300.75], [1881.0, 300.0], [1869.0, 293.0], [1861.0, 318.6666666666667], [1857.0, 319.5], [1979.0, 239.0], [1983.0, 239.5], [1953.0, 242.0], [1981.0, 237.0], [1977.0, 239.0], [1975.0, 239.12500000000003], [1973.0, 239.71428571428572], [1963.0, 240.33333333333334], [1947.0, 241.44444444444446], [1945.0, 242.0], [1943.0, 242.0], [1971.0, 239.16666666666669], [2019.0, 209.5], [2047.0, 204.0], [2021.0, 208.0], [2025.0, 208.33333333333334], [2027.0, 207.75], [2031.0, 208.25], [2029.0, 210.0], [2045.0, 206.0], [2043.0, 206.0], [2037.0, 207.0], [2035.0, 207.5], [2033.0, 207.4], [2015.0, 212.0], [1987.0, 237.53846153846155], [2114.0, 148.5], [2126.0, 32106.0], [2122.0, 37507.0], [2090.0, 195.0], [2426.0, 220.33333333333334], [2370.0, 294.0], [2386.0, 291.5], [2390.0, 291.25], [2394.0, 290.54545454545456], [2398.0, 290.5], [2418.0, 221.5], [2414.0, 289.0], [2410.0, 290.0], [2406.0, 291.0], [2546.0, 89.5], [2518.0, 102.33333333333333], [2498.0, 104.0], [2510.0, 103.0], [2526.0, 102.0], [2554.0, 68.0], [2542.0, 99.0], [2534.0, 101.0], [2530.0, 102.0], [2446.0, 215.0], [2442.0, 216.0], [2438.0, 219.0], [2434.0, 220.0], [2486.0, 146.0], [2482.0, 148.5], [2478.0, 148.0], [2686.0, 31091.0], [2682.0, 31092.0], [2626.0, 31140.0], [2630.0, 31128.0], [2638.0, 31125.0], [2642.0, 31121.0], [2654.0, 31118.0], [2670.0, 31096.0], [2666.0, 31110.0], [2662.0, 31112.5], [2586.0, 31176.0], [2578.0, 31179.0], [2622.0, 31142.0], [2618.0, 31147.0], [2614.0, 31160.25], [2606.0, 31161.5], [2602.0, 31163.0], [2594.0, 31165.0], [2802.0, 1096.5], [2714.0, 1049.0], [2806.0, 1090.0], [2758.0, 1049.0], [2762.0, 1047.0], [2774.0, 1030.0], [2778.0, 1028.0], [2814.0, 1074.0], [2798.0, 1097.0], [2794.0, 1059.0], [2718.0, 1039.5], [2710.0, 15076.0], [2706.0, 15099.0], [2702.0, 15107.0], [2698.0, 4077.0], [2694.0, 34910.0], [2750.0, 1057.0], [2746.0, 1059.0], [2738.0, 1080.6666666666667], [2734.0, 1080.0], [2918.0, 313.0], [2926.0, 312.0], [2898.0, 1237.3333333333335], [2882.0, 31910.0], [2886.0, 12688.333333333332], [2906.0, 315.2], [2914.0, 313.0], [2818.0, 1060.0], [2826.0, 1053.0], [2834.0, 1023.0], [2846.0, 3088.0], [2874.0, 660.0], [2854.0, 3088.0], [2850.0, 2891.3333333333335], [2059.0, 201.8], [2127.0, 36772.0], [2123.0, 37507.0], [2051.0, 201.33333333333334], [2071.0, 198.0], [2075.0, 198.25], [2103.0, 157.5], [2095.0, 194.0], [2087.0, 195.0], [2387.0, 291.25], [2375.0, 294.0], [2391.0, 291.16666666666663], [2395.0, 290.83333333333337], [2399.0, 290.3125], [2427.0, 220.0], [2407.0, 289.6666666666667], [2403.0, 289.8666666666666], [2507.0, 103.0], [2559.0, 67.0], [2515.0, 103.0], [2519.0, 101.5], [2523.0, 102.0], [2527.0, 102.0], [2531.0, 101.4], [2463.0, 170.6], [2443.0, 217.0], [2439.0, 216.0], [2435.0, 220.0], [2483.0, 148.0], [2479.0, 148.5], [2475.0, 148.0], [2467.0, 153.0], [2587.0, 31176.0], [2671.0, 33428.0], [2627.0, 31128.0], [2643.0, 31120.0], [2651.0, 31117.0], [2655.0, 31115.333333333332], [2683.0, 31091.5], [2667.0, 31107.0], [2663.0, 31113.0], [2659.0, 31112.0], [2583.0, 31178.5], [2579.0, 31179.0], [2571.0, 31282.0], [2567.0, 46.0], [2563.0, 62.25], [2619.0, 31147.0], [2615.0, 31161.0], [2611.0, 31161.0], [2607.0, 31161.0], [2603.0, 31163.0], [2595.0, 31165.0], [2795.0, 1103.0], [2815.0, 1063.0], [2755.0, 1052.5], [2763.0, 1046.0], [2767.0, 1041.0], [2771.0, 1037.5], [2775.0, 1029.0], [2783.0, 1023.0], [2807.0, 1081.0], [2803.0, 1097.0], [2787.0, 1020.5], [2719.0, 1032.0], [2715.0, 1048.0], [2711.0, 15074.0], [2707.0, 15086.0], [2703.0, 15107.0], [2699.0, 32891.0], [2695.0, 34910.0], [2691.0, 31090.333333333332], [2751.0, 1055.0], [2747.0, 1059.0], [2743.0, 1073.5], [2739.0, 1078.0], [2735.0, 1080.6666666666667], [2731.0, 3018.0], [2727.0, 1011.6666666666666], [2883.0, 1699.0], [2923.0, 311.0], [2887.0, 318.0], [2899.0, 1236.3333333333335], [2903.0, 316.0], [2911.0, 313.0], [2915.0, 312.0], [2879.0, 1969.0], [2819.0, 1059.0], [2823.0, 1055.0], [2835.0, 1020.0], [2847.0, 2499.0], [2875.0, 8486.0], [2871.0, 3087.0], [2867.0, 3087.0], [2859.0, 660.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[2969.4759172019826, 3992.228115631704]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 3000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 4090.8, "minX": 1.6828752E12, "maxY": 392834.1, "series": [{"data": [[1.68287544E12, 392834.1], [1.6828755E12, 28097.316666666666], [1.68287532E12, 329477.98333333334], [1.68287538E12, 320235.65], [1.6828752E12, 261211.63333333333], [1.68287526E12, 349454.7166666667], [1.68287556E12, 5764.3]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.68287544E12, 276091.2], [1.6828755E12, 19714.8], [1.68287532E12, 228261.6], [1.68287538E12, 223356.0], [1.6828752E12, 183834.0], [1.68287526E12, 237459.6], [1.68287556E12, 4090.8]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68287556E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 1479.0201507882014, "minX": 1.6828752E12, "maxY": 97534.88090349072, "series": [{"data": [[1.68287544E12, 2187.693410003655], [1.6828755E12, 5744.127822752451], [1.68287532E12, 4749.072985747263], [1.68287538E12, 3198.2028746200367], [1.6828752E12, 1479.0201507882014], [1.68287526E12, 6272.277324747154], [1.68287556E12, 97534.88090349072]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68287556E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 1479.000868174558, "minX": 1.6828752E12, "maxY": 97534.86447638612, "series": [{"data": [[1.68287544E12, 2187.6799014238745], [1.6828755E12, 5744.1077971879], [1.68287532E12, 4372.848312754197], [1.68287538E12, 2999.8348406950113], [1.6828752E12, 1479.000868174558], [1.68287526E12, 5859.0643614601095], [1.68287556E12, 97534.86447638612]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68287556E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 110.51199451679231, "minX": 1.6828752E12, "maxY": 2497.16403473419, "series": [{"data": [[1.68287544E12, 796.195904831452], [1.6828755E12, 2161.0366425223706], [1.68287532E12, 2497.16403473419], [1.68287538E12, 997.1197508162278], [1.6828752E12, 110.51199451679231], [1.68287526E12, 1139.2488013159393], [1.68287556E12, 1500.2648870636554]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68287556E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 5.0, "minX": 1.6828752E12, "maxY": 210911.0, "series": [{"data": [[1.68287544E12, 176580.0], [1.6828755E12, 210911.0], [1.68287532E12, 163668.0], [1.68287538E12, 139098.0], [1.6828752E12, 47357.0], [1.68287526E12, 101273.0], [1.68287556E12, 131150.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.68287544E12, 615.0], [1.6828755E12, 31107.600000000002], [1.68287532E12, 5412.0], [1.68287538E12, 4690.9000000000015], [1.6828752E12, 348.0], [1.68287526E12, 14938.0], [1.68287556E12, 100609.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.68287544E12, 64520.0], [1.6828755E12, 68014.12], [1.68287532E12, 127833.0], [1.68287538E12, 100191.0], [1.6828752E12, 30947.0], [1.68287526E12, 100114.0], [1.68287556E12, 112671.2]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.68287544E12, 4005.0], [1.6828755E12, 39260.79999999993], [1.68287532E12, 18007.0], [1.68287538E12, 11020.0], [1.6828752E12, 13283.0], [1.68287526E12, 19030.0], [1.68287556E12, 102953.8]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.68287544E12, 10.0], [1.6828755E12, 45.0], [1.68287532E12, 7.0], [1.68287538E12, 27.0], [1.6828752E12, 13.0], [1.68287526E12, 5.0], [1.68287556E12, 61008.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.68287544E12, 254.0], [1.6828755E12, 566.0], [1.68287532E12, 271.0], [1.68287538E12, 271.0], [1.6828752E12, 196.0], [1.68287526E12, 135.0], [1.68287556E12, 100097.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68287556E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 52.0, "minX": 1.0, "maxY": 126814.0, "series": [{"data": [[2.0, 63738.0], [3.0, 43938.0], [4.0, 30297.5], [5.0, 41529.5], [6.0, 8231.0], [7.0, 14084.5], [8.0, 48450.0], [9.0, 99287.0], [10.0, 10126.0], [12.0, 76.0], [13.0, 42385.0], [14.0, 8265.0], [15.0, 1139.0], [17.0, 13878.0], [18.0, 15660.0], [21.0, 9970.0], [23.0, 84470.5], [27.0, 6740.0], [28.0, 100350.0], [29.0, 12784.0], [30.0, 2161.0], [31.0, 241.0], [42.0, 100580.0], [50.0, 54.0], [53.0, 98343.0], [56.0, 16176.0], [60.0, 9872.0], [61.0, 11126.0], [62.0, 69.0], [64.0, 83.0], [69.0, 78.0], [68.0, 52.0], [71.0, 35155.0], [74.0, 1101.0], [73.0, 87.0], [75.0, 7695.0], [81.0, 8785.0], [82.0, 54.0], [90.0, 3204.0], [100.0, 150.0], [111.0, 117.0], [123.0, 89.0], [121.0, 411.0], [125.0, 31128.0], [133.0, 7987.0], [142.0, 7103.0], [137.0, 1055.0], [149.0, 272.0], [160.0, 124.0], [176.0, 139.5], [185.0, 118.0], [199.0, 136.0], [206.0, 233.0], [223.0, 304.0], [218.0, 10824.5], [217.0, 174.0], [225.0, 185.0], [232.0, 258.0], [235.0, 14952.0], [234.0, 243.0], [237.0, 100102.0], [243.0, 240.0], [242.0, 252.0], [240.0, 209.0], [270.0, 74.0], [256.0, 13224.0], [257.0, 4968.0], [267.0, 243.0], [281.0, 177.0], [284.0, 9173.0], [295.0, 246.0], [308.0, 196.0], [320.0, 187.0], [359.0, 246.0], [373.0, 19929.0], [383.0, 259.0], [381.0, 250.0], [402.0, 168.0], [415.0, 236.0], [420.0, 109.0], [423.0, 211.0], [445.0, 297.0], [437.0, 210.0], [440.0, 193.0], [434.0, 275.5], [439.0, 211.0], [443.0, 290.0], [460.0, 8251.0], [457.0, 235.0], [463.0, 275.0], [462.0, 232.0], [448.0, 217.0], [455.0, 219.0], [453.0, 269.0], [454.0, 271.0], [467.0, 237.0], [473.0, 194.0], [474.0, 231.0], [469.0, 208.0], [471.0, 242.0], [477.0, 197.0], [478.0, 220.0], [472.0, 206.5], [470.0, 119.0], [464.0, 158.0], [465.0, 257.0], [466.0, 217.0], [476.0, 266.0], [484.0, 6603.0], [490.0, 258.0], [493.0, 249.0], [481.0, 240.0], [487.0, 274.0], [485.0, 257.0], [502.0, 160.0], [497.0, 294.0], [509.0, 510.0], [501.0, 336.0], [528.0, 276.0], [517.0, 246.0], [557.0, 270.0], [571.0, 271.0], [567.0, 615.0], [569.0, 246.0], [605.0, 193.0], [590.0, 271.0], [585.0, 256.0], [576.0, 199.0], [607.0, 247.0], [618.0, 343.0], [634.0, 131.0], [627.0, 227.0], [610.0, 288.0], [661.0, 158.0], [667.0, 223.0], [641.0, 29191.0], [660.0, 269.0], [644.0, 222.0], [694.0, 58.0], [730.0, 9596.0], [737.0, 291.0], [748.0, 18254.0], [741.0, 9728.0], [776.0, 180.0], [789.0, 233.0], [773.0, 219.0], [813.0, 12954.0], [826.0, 323.5], [811.0, 233.0], [807.0, 258.0], [852.0, 494.5], [844.0, 251.0], [871.0, 58.0], [880.0, 776.0], [887.0, 292.0], [867.0, 198.0], [889.0, 289.0], [878.0, 250.0], [900.0, 431.0], [915.0, 246.0], [904.0, 292.0], [918.0, 363.0], [941.0, 121.0], [939.0, 148.0], [938.0, 236.0], [940.0, 92.0], [936.0, 109.5], [928.0, 9048.0], [932.0, 229.0], [934.0, 506.0], [950.0, 217.0], [960.0, 175.0], [963.0, 266.0], [981.0, 265.0], [1041.0, 147.0], [1066.0, 104.0], [1065.0, 193.0], [1151.0, 446.0], [1199.0, 117.0], [1162.0, 514.0], [1214.0, 438.0], [1255.0, 260.0], [1260.0, 298.0], [1225.0, 626.0], [1278.0, 575.0], [1336.0, 298.0], [1286.0, 147.0], [1285.0, 364.0], [1405.0, 120.0], [1393.0, 232.0], [1384.0, 129.0], [1370.0, 327.0], [1407.0, 488.0], [1381.0, 493.0], [1365.0, 361.0], [1403.0, 251.0], [1380.0, 284.0], [1438.0, 329.0], [1445.0, 270.0], [1483.0, 243.0], [1484.0, 472.0], [1608.0, 174.0], [1616.0, 400.0], [1682.0, 170.0], [1692.0, 425.0], [1679.0, 658.0], [1734.0, 234.0], [1778.0, 508.0], [1795.0, 160.0], [1.0, 103352.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[585.0, 88193.0], [42.0, 39209.5], [748.0, 67601.0], [813.0, 25589.0], [940.0, 11255.0], [938.0, 54903.0], [60.0, 76267.0], [1065.0, 19848.0], [68.0, 40939.0], [1286.0, 95631.0], [1608.0, 17093.0], [111.0, 80642.0], [7.0, 93229.0], [142.0, 92703.0], [10.0, 12857.0], [267.0, 95643.0], [17.0, 9911.0], [308.0, 65634.0], [21.0, 30825.0], [373.0, 71582.0], [402.0, 126814.0], [477.0, 71606.5], [470.0, 79586.0], [30.0, 67577.0], [490.0, 58127.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1795.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 103352.0, "series": [{"data": [[2.0, 63738.0], [3.0, 43938.0], [4.0, 30297.5], [5.0, 41529.5], [6.0, 8231.0], [7.0, 14084.5], [8.0, 48450.0], [9.0, 99287.0], [10.0, 10126.0], [12.0, 76.0], [13.0, 42385.0], [14.0, 8265.0], [15.0, 1134.0], [17.0, 13878.0], [18.0, 15660.0], [21.0, 9970.0], [23.0, 84470.0], [27.0, 6740.0], [28.0, 100350.0], [29.0, 12784.0], [30.0, 2161.0], [31.0, 241.0], [42.0, 100580.0], [50.0, 54.0], [53.0, 98343.0], [56.0, 16176.0], [60.0, 9872.0], [61.0, 11126.0], [62.0, 69.0], [64.0, 83.0], [69.0, 78.0], [68.0, 52.0], [71.0, 35155.0], [74.0, 1101.0], [73.0, 87.0], [75.0, 7695.0], [81.0, 8785.0], [82.0, 54.0], [90.0, 3204.0], [100.0, 150.0], [111.0, 117.0], [123.0, 89.0], [121.0, 411.0], [125.0, 31128.0], [133.0, 7987.0], [142.0, 7103.0], [137.0, 1055.0], [149.0, 272.0], [160.0, 124.0], [176.0, 139.5], [185.0, 118.0], [199.0, 136.0], [206.0, 233.0], [223.0, 304.0], [218.0, 10824.5], [217.0, 174.0], [225.0, 185.0], [232.0, 258.0], [235.0, 14952.0], [234.0, 243.0], [237.0, 100102.0], [243.0, 240.0], [242.0, 252.0], [240.0, 209.0], [270.0, 74.0], [256.0, 13224.0], [257.0, 4968.0], [267.0, 243.0], [281.0, 177.0], [284.0, 9173.0], [295.0, 246.0], [308.0, 196.0], [320.0, 187.0], [359.0, 246.0], [373.0, 19929.0], [383.0, 259.0], [381.0, 250.0], [402.0, 168.0], [415.0, 236.0], [420.0, 109.0], [423.0, 211.0], [445.0, 297.0], [437.0, 210.0], [440.0, 193.0], [434.0, 275.5], [439.0, 211.0], [443.0, 290.0], [460.0, 8251.0], [457.0, 235.0], [463.0, 275.0], [462.0, 232.0], [448.0, 217.0], [455.0, 219.0], [453.0, 269.0], [454.0, 271.0], [467.0, 237.0], [473.0, 194.0], [474.0, 231.0], [469.0, 208.0], [471.0, 242.0], [477.0, 196.5], [478.0, 220.0], [472.0, 206.5], [470.0, 119.0], [464.0, 158.0], [465.0, 257.0], [466.0, 217.0], [476.0, 266.0], [484.0, 6603.0], [490.0, 258.0], [493.0, 249.0], [481.0, 240.0], [487.0, 274.0], [485.0, 257.0], [502.0, 160.0], [497.0, 294.0], [509.0, 510.0], [501.0, 336.0], [528.0, 276.0], [517.0, 246.0], [557.0, 270.0], [571.0, 271.0], [567.0, 615.0], [569.0, 246.0], [605.0, 193.0], [590.0, 271.0], [585.0, 256.0], [576.0, 199.0], [607.0, 247.0], [618.0, 343.0], [634.0, 131.0], [627.0, 227.0], [610.0, 288.0], [661.0, 158.0], [667.0, 223.0], [641.0, 29191.0], [660.0, 269.0], [644.0, 222.0], [694.0, 58.0], [730.0, 9596.0], [737.0, 291.0], [748.0, 18254.0], [741.0, 9727.0], [776.0, 180.0], [789.0, 233.0], [773.0, 219.0], [813.0, 12954.0], [826.0, 323.5], [811.0, 233.0], [807.0, 258.0], [852.0, 494.5], [844.0, 251.0], [871.0, 58.0], [880.0, 776.0], [887.0, 292.0], [867.0, 198.0], [889.0, 289.0], [878.0, 250.0], [900.0, 431.0], [915.0, 246.0], [904.0, 292.0], [918.0, 363.0], [941.0, 121.0], [939.0, 148.0], [938.0, 236.0], [940.0, 92.0], [936.0, 109.5], [928.0, 9048.0], [932.0, 229.0], [934.0, 506.0], [950.0, 217.0], [960.0, 175.0], [963.0, 266.0], [981.0, 265.0], [1041.0, 147.0], [1066.0, 104.0], [1065.0, 193.0], [1151.0, 446.0], [1199.0, 117.0], [1162.0, 514.0], [1214.0, 438.0], [1255.0, 260.0], [1260.0, 298.0], [1225.0, 626.0], [1278.0, 575.0], [1336.0, 298.0], [1286.0, 147.0], [1285.0, 364.0], [1405.0, 120.0], [1393.0, 232.0], [1384.0, 129.0], [1370.0, 327.0], [1407.0, 488.0], [1381.0, 493.0], [1365.0, 361.0], [1403.0, 251.0], [1380.0, 284.0], [1438.0, 329.0], [1445.0, 270.0], [1483.0, 243.0], [1484.0, 472.0], [1608.0, 174.0], [1616.0, 400.0], [1682.0, 170.0], [1692.0, 425.0], [1679.0, 658.0], [1734.0, 234.0], [1778.0, 508.0], [1795.0, 160.0], [1.0, 103352.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[585.0, 0.0], [42.0, 0.0], [748.0, 0.0], [813.0, 0.0], [940.0, 0.0], [938.0, 0.0], [60.0, 0.0], [1065.0, 0.0], [68.0, 0.0], [1286.0, 0.0], [1608.0, 0.0], [111.0, 0.0], [7.0, 0.0], [142.0, 0.0], [10.0, 0.0], [267.0, 0.0], [17.0, 0.0], [308.0, 0.0], [21.0, 0.0], [373.0, 0.0], [402.0, 0.0], [477.0, 0.0], [470.0, 0.0], [30.0, 0.0], [490.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1795.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 38.916666666666664, "minX": 1.6828752E12, "maxY": 537.05, "series": [{"data": [[1.68287544E12, 537.05], [1.6828755E12, 38.916666666666664], [1.68287532E12, 435.8666666666667], [1.68287538E12, 443.65], [1.6828752E12, 404.73333333333335], [1.68287526E12, 474.78333333333336]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6828755E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.95, "minX": 1.6828752E12, "maxY": 547.8, "series": [{"data": [[1.68287544E12, 547.8], [1.6828755E12, 39.11666666666667], [1.68287532E12, 452.9], [1.68287538E12, 443.1666666666667], [1.6828752E12, 364.75], [1.68287526E12, 471.15], [1.68287556E12, 8.116666666666667]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.68287532E12, 1.9833333333333334], [1.68287538E12, 0.95], [1.68287526E12, 5.066666666666666]], "isOverall": false, "label": "Non HTTP response code: java.net.SocketException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68287556E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.95, "minX": 1.6828752E12, "maxY": 547.8, "series": [{"data": [[1.68287544E12, 547.8], [1.6828755E12, 39.11666666666667], [1.68287532E12, 452.9], [1.68287538E12, 443.1666666666667], [1.6828752E12, 364.75], [1.68287526E12, 471.15], [1.68287556E12, 8.116666666666667]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.68287532E12, 1.9833333333333334], [1.68287538E12, 0.95], [1.68287526E12, 5.066666666666666]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68287556E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.95, "minX": 1.6828752E12, "maxY": 547.8, "series": [{"data": [[1.68287544E12, 547.8], [1.6828755E12, 39.11666666666667], [1.68287532E12, 452.9], [1.68287538E12, 443.1666666666667], [1.6828752E12, 364.75], [1.68287526E12, 471.15], [1.68287556E12, 8.116666666666667]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.68287532E12, 1.9833333333333334], [1.68287538E12, 0.95], [1.68287526E12, 5.066666666666666]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68287556E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

