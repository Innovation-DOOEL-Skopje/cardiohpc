/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 8.0, "minX": 0.0, "maxY": 210034.0, "series": [{"data": [[0.0, 8.0], [0.1, 21.0], [0.2, 23.0], [0.3, 25.0], [0.4, 26.0], [0.5, 27.0], [0.6, 29.0], [0.7, 31.0], [0.8, 32.0], [0.9, 34.0], [1.0, 35.0], [1.1, 36.0], [1.2, 37.0], [1.3, 38.0], [1.4, 38.0], [1.5, 40.0], [1.6, 41.0], [1.7, 43.0], [1.8, 43.0], [1.9, 44.0], [2.0, 45.0], [2.1, 45.0], [2.2, 47.0], [2.3, 47.0], [2.4, 48.0], [2.5, 48.0], [2.6, 49.0], [2.7, 49.0], [2.8, 50.0], [2.9, 51.0], [3.0, 52.0], [3.1, 52.0], [3.2, 53.0], [3.3, 53.0], [3.4, 54.0], [3.5, 54.0], [3.6, 54.0], [3.7, 55.0], [3.8, 55.0], [3.9, 56.0], [4.0, 56.0], [4.1, 56.0], [4.2, 56.0], [4.3, 56.0], [4.4, 57.0], [4.5, 57.0], [4.6, 57.0], [4.7, 58.0], [4.8, 58.0], [4.9, 59.0], [5.0, 59.0], [5.1, 59.0], [5.2, 60.0], [5.3, 60.0], [5.4, 60.0], [5.5, 61.0], [5.6, 61.0], [5.7, 61.0], [5.8, 62.0], [5.9, 62.0], [6.0, 62.0], [6.1, 62.0], [6.2, 63.0], [6.3, 63.0], [6.4, 63.0], [6.5, 63.0], [6.6, 64.0], [6.7, 64.0], [6.8, 64.0], [6.9, 65.0], [7.0, 65.0], [7.1, 66.0], [7.2, 66.0], [7.3, 66.0], [7.4, 67.0], [7.5, 67.0], [7.6, 67.0], [7.7, 68.0], [7.8, 68.0], [7.9, 68.0], [8.0, 69.0], [8.1, 69.0], [8.2, 70.0], [8.3, 70.0], [8.4, 70.0], [8.5, 70.0], [8.6, 70.0], [8.7, 71.0], [8.8, 71.0], [8.9, 71.0], [9.0, 71.0], [9.1, 71.0], [9.2, 71.0], [9.3, 72.0], [9.4, 72.0], [9.5, 72.0], [9.6, 72.0], [9.7, 72.0], [9.8, 73.0], [9.9, 73.0], [10.0, 73.0], [10.1, 73.0], [10.2, 73.0], [10.3, 73.0], [10.4, 73.0], [10.5, 74.0], [10.6, 74.0], [10.7, 74.0], [10.8, 74.0], [10.9, 74.0], [11.0, 75.0], [11.1, 75.0], [11.2, 75.0], [11.3, 75.0], [11.4, 75.0], [11.5, 75.0], [11.6, 76.0], [11.7, 76.0], [11.8, 76.0], [11.9, 76.0], [12.0, 76.0], [12.1, 76.0], [12.2, 76.0], [12.3, 76.0], [12.4, 76.0], [12.5, 77.0], [12.6, 77.0], [12.7, 77.0], [12.8, 77.0], [12.9, 77.0], [13.0, 77.0], [13.1, 77.0], [13.2, 77.0], [13.3, 77.0], [13.4, 78.0], [13.5, 78.0], [13.6, 78.0], [13.7, 78.0], [13.8, 78.0], [13.9, 78.0], [14.0, 78.0], [14.1, 78.0], [14.2, 79.0], [14.3, 79.0], [14.4, 79.0], [14.5, 79.0], [14.6, 79.0], [14.7, 79.0], [14.8, 79.0], [14.9, 79.0], [15.0, 80.0], [15.1, 80.0], [15.2, 80.0], [15.3, 80.0], [15.4, 80.0], [15.5, 80.0], [15.6, 80.0], [15.7, 81.0], [15.8, 81.0], [15.9, 81.0], [16.0, 81.0], [16.1, 81.0], [16.2, 81.0], [16.3, 82.0], [16.4, 82.0], [16.5, 82.0], [16.6, 82.0], [16.7, 83.0], [16.8, 83.0], [16.9, 83.0], [17.0, 83.0], [17.1, 83.0], [17.2, 83.0], [17.3, 84.0], [17.4, 84.0], [17.5, 84.0], [17.6, 84.0], [17.7, 84.0], [17.8, 84.0], [17.9, 84.0], [18.0, 84.0], [18.1, 85.0], [18.2, 85.0], [18.3, 85.0], [18.4, 85.0], [18.5, 85.0], [18.6, 85.0], [18.7, 85.0], [18.8, 85.0], [18.9, 86.0], [19.0, 86.0], [19.1, 86.0], [19.2, 86.0], [19.3, 86.0], [19.4, 86.0], [19.5, 86.0], [19.6, 86.0], [19.7, 86.0], [19.8, 86.0], [19.9, 86.0], [20.0, 87.0], [20.1, 87.0], [20.2, 87.0], [20.3, 87.0], [20.4, 87.0], [20.5, 87.0], [20.6, 87.0], [20.7, 87.0], [20.8, 87.0], [20.9, 87.0], [21.0, 87.0], [21.1, 87.0], [21.2, 88.0], [21.3, 88.0], [21.4, 88.0], [21.5, 88.0], [21.6, 88.0], [21.7, 88.0], [21.8, 88.0], [21.9, 88.0], [22.0, 88.0], [22.1, 88.0], [22.2, 88.0], [22.3, 88.0], [22.4, 88.0], [22.5, 88.0], [22.6, 88.0], [22.7, 88.0], [22.8, 89.0], [22.9, 89.0], [23.0, 89.0], [23.1, 89.0], [23.2, 89.0], [23.3, 89.0], [23.4, 89.0], [23.5, 89.0], [23.6, 89.0], [23.7, 89.0], [23.8, 89.0], [23.9, 89.0], [24.0, 90.0], [24.1, 90.0], [24.2, 90.0], [24.3, 90.0], [24.4, 90.0], [24.5, 90.0], [24.6, 90.0], [24.7, 90.0], [24.8, 90.0], [24.9, 90.0], [25.0, 90.0], [25.1, 90.0], [25.2, 91.0], [25.3, 91.0], [25.4, 91.0], [25.5, 91.0], [25.6, 91.0], [25.7, 91.0], [25.8, 91.0], [25.9, 91.0], [26.0, 91.0], [26.1, 91.0], [26.2, 91.0], [26.3, 91.0], [26.4, 92.0], [26.5, 92.0], [26.6, 92.0], [26.7, 92.0], [26.8, 92.0], [26.9, 92.0], [27.0, 92.0], [27.1, 92.0], [27.2, 92.0], [27.3, 92.0], [27.4, 92.0], [27.5, 93.0], [27.6, 93.0], [27.7, 93.0], [27.8, 93.0], [27.9, 93.0], [28.0, 93.0], [28.1, 93.0], [28.2, 93.0], [28.3, 93.0], [28.4, 93.0], [28.5, 93.0], [28.6, 94.0], [28.7, 94.0], [28.8, 94.0], [28.9, 94.0], [29.0, 94.0], [29.1, 94.0], [29.2, 94.0], [29.3, 94.0], [29.4, 94.0], [29.5, 94.0], [29.6, 94.0], [29.7, 94.0], [29.8, 95.0], [29.9, 95.0], [30.0, 95.0], [30.1, 95.0], [30.2, 95.0], [30.3, 95.0], [30.4, 95.0], [30.5, 95.0], [30.6, 95.0], [30.7, 96.0], [30.8, 96.0], [30.9, 96.0], [31.0, 96.0], [31.1, 96.0], [31.2, 96.0], [31.3, 96.0], [31.4, 96.0], [31.5, 96.0], [31.6, 96.0], [31.7, 97.0], [31.8, 97.0], [31.9, 97.0], [32.0, 97.0], [32.1, 97.0], [32.2, 97.0], [32.3, 97.0], [32.4, 97.0], [32.5, 97.0], [32.6, 98.0], [32.7, 98.0], [32.8, 98.0], [32.9, 98.0], [33.0, 98.0], [33.1, 98.0], [33.2, 98.0], [33.3, 98.0], [33.4, 98.0], [33.5, 99.0], [33.6, 99.0], [33.7, 99.0], [33.8, 99.0], [33.9, 99.0], [34.0, 99.0], [34.1, 99.0], [34.2, 99.0], [34.3, 99.0], [34.4, 99.0], [34.5, 99.0], [34.6, 99.0], [34.7, 99.0], [34.8, 99.0], [34.9, 99.0], [35.0, 99.0], [35.1, 100.0], [35.2, 100.0], [35.3, 100.0], [35.4, 100.0], [35.5, 100.0], [35.6, 100.0], [35.7, 100.0], [35.8, 100.0], [35.9, 100.0], [36.0, 100.0], [36.1, 100.0], [36.2, 101.0], [36.3, 101.0], [36.4, 101.0], [36.5, 101.0], [36.6, 101.0], [36.7, 101.0], [36.8, 101.0], [36.9, 101.0], [37.0, 101.0], [37.1, 102.0], [37.2, 102.0], [37.3, 102.0], [37.4, 102.0], [37.5, 102.0], [37.6, 102.0], [37.7, 102.0], [37.8, 102.0], [37.9, 102.0], [38.0, 102.0], [38.1, 102.0], [38.2, 103.0], [38.3, 103.0], [38.4, 103.0], [38.5, 103.0], [38.6, 103.0], [38.7, 103.0], [38.8, 103.0], [38.9, 103.0], [39.0, 103.0], [39.1, 103.0], [39.2, 103.0], [39.3, 103.0], [39.4, 103.0], [39.5, 104.0], [39.6, 104.0], [39.7, 104.0], [39.8, 104.0], [39.9, 104.0], [40.0, 104.0], [40.1, 104.0], [40.2, 104.0], [40.3, 104.0], [40.4, 104.0], [40.5, 105.0], [40.6, 105.0], [40.7, 105.0], [40.8, 105.0], [40.9, 105.0], [41.0, 105.0], [41.1, 105.0], [41.2, 106.0], [41.3, 106.0], [41.4, 106.0], [41.5, 106.0], [41.6, 106.0], [41.7, 106.0], [41.8, 107.0], [41.9, 107.0], [42.0, 107.0], [42.1, 107.0], [42.2, 107.0], [42.3, 107.0], [42.4, 107.0], [42.5, 108.0], [42.6, 108.0], [42.7, 108.0], [42.8, 108.0], [42.9, 108.0], [43.0, 109.0], [43.1, 109.0], [43.2, 109.0], [43.3, 109.0], [43.4, 110.0], [43.5, 110.0], [43.6, 110.0], [43.7, 111.0], [43.8, 111.0], [43.9, 111.0], [44.0, 111.0], [44.1, 112.0], [44.2, 112.0], [44.3, 112.0], [44.4, 112.0], [44.5, 113.0], [44.6, 113.0], [44.7, 113.0], [44.8, 114.0], [44.9, 114.0], [45.0, 114.0], [45.1, 115.0], [45.2, 115.0], [45.3, 115.0], [45.4, 116.0], [45.5, 116.0], [45.6, 116.0], [45.7, 117.0], [45.8, 117.0], [45.9, 117.0], [46.0, 117.0], [46.1, 118.0], [46.2, 118.0], [46.3, 118.0], [46.4, 119.0], [46.5, 120.0], [46.6, 121.0], [46.7, 123.0], [46.8, 125.0], [46.9, 126.0], [47.0, 127.0], [47.1, 128.0], [47.2, 129.0], [47.3, 130.0], [47.4, 130.0], [47.5, 131.0], [47.6, 133.0], [47.7, 135.0], [47.8, 137.0], [47.9, 138.0], [48.0, 139.0], [48.1, 141.0], [48.2, 142.0], [48.3, 143.0], [48.4, 143.0], [48.5, 144.0], [48.6, 145.0], [48.7, 150.0], [48.8, 151.0], [48.9, 151.0], [49.0, 152.0], [49.1, 152.0], [49.2, 154.0], [49.3, 157.0], [49.4, 157.0], [49.5, 157.0], [49.6, 158.0], [49.7, 158.0], [49.8, 159.0], [49.9, 160.0], [50.0, 161.0], [50.1, 162.0], [50.2, 164.0], [50.3, 165.0], [50.4, 166.0], [50.5, 167.0], [50.6, 170.0], [50.7, 171.0], [50.8, 172.0], [50.9, 174.0], [51.0, 179.0], [51.1, 182.0], [51.2, 188.0], [51.3, 188.0], [51.4, 189.0], [51.5, 191.0], [51.6, 191.0], [51.7, 194.0], [51.8, 195.0], [51.9, 197.0], [52.0, 200.0], [52.1, 201.0], [52.2, 215.0], [52.3, 227.0], [52.4, 257.0], [52.5, 279.0], [52.6, 319.0], [52.7, 346.0], [52.8, 376.0], [52.9, 394.0], [53.0, 471.0], [53.1, 484.0], [53.2, 511.0], [53.3, 553.0], [53.4, 642.0], [53.5, 766.0], [53.6, 847.0], [53.7, 911.0], [53.8, 1029.0], [53.9, 1055.0], [54.0, 1067.0], [54.1, 1079.0], [54.2, 1089.0], [54.3, 1097.0], [54.4, 1105.0], [54.5, 1111.0], [54.6, 1114.0], [54.7, 1119.0], [54.8, 1125.0], [54.9, 1129.0], [55.0, 1134.0], [55.1, 1137.0], [55.2, 1140.0], [55.3, 1143.0], [55.4, 1155.0], [55.5, 1164.0], [55.6, 1169.0], [55.7, 1182.0], [55.8, 1186.0], [55.9, 1192.0], [56.0, 1200.0], [56.1, 1208.0], [56.2, 1225.0], [56.3, 1236.0], [56.4, 1243.0], [56.5, 1269.0], [56.6, 1304.0], [56.7, 1315.0], [56.8, 1342.0], [56.9, 1361.0], [57.0, 1394.0], [57.1, 1427.0], [57.2, 1454.0], [57.3, 1474.0], [57.4, 1512.0], [57.5, 1549.0], [57.6, 1559.0], [57.7, 1567.0], [57.8, 1610.0], [57.9, 1665.0], [58.0, 1678.0], [58.1, 1697.0], [58.2, 1722.0], [58.3, 1734.0], [58.4, 1754.0], [58.5, 1762.0], [58.6, 1775.0], [58.7, 1779.0], [58.8, 1823.0], [58.9, 1896.0], [59.0, 1972.0], [59.1, 2010.0], [59.2, 2027.0], [59.3, 2047.0], [59.4, 2063.0], [59.5, 2088.0], [59.6, 2104.0], [59.7, 2123.0], [59.8, 2148.0], [59.9, 2160.0], [60.0, 2168.0], [60.1, 2184.0], [60.2, 2194.0], [60.3, 2213.0], [60.4, 2220.0], [60.5, 2238.0], [60.6, 2249.0], [60.7, 2301.0], [60.8, 2314.0], [60.9, 2323.0], [61.0, 2334.0], [61.1, 2345.0], [61.2, 2384.0], [61.3, 2402.0], [61.4, 2433.0], [61.5, 2441.0], [61.6, 2447.0], [61.7, 2453.0], [61.8, 2465.0], [61.9, 2471.0], [62.0, 2539.0], [62.1, 2649.0], [62.2, 2704.0], [62.3, 2718.0], [62.4, 2825.0], [62.5, 2854.0], [62.6, 2947.0], [62.7, 2965.0], [62.8, 3021.0], [62.9, 3085.0], [63.0, 3120.0], [63.1, 3158.0], [63.2, 3181.0], [63.3, 3194.0], [63.4, 3213.0], [63.5, 3231.0], [63.6, 3245.0], [63.7, 3256.0], [63.8, 3273.0], [63.9, 3300.0], [64.0, 3311.0], [64.1, 3315.0], [64.2, 3372.0], [64.3, 3565.0], [64.4, 3620.0], [64.5, 3659.0], [64.6, 3685.0], [64.7, 3694.0], [64.8, 3725.0], [64.9, 3791.0], [65.0, 3967.0], [65.1, 4022.0], [65.2, 4116.0], [65.3, 4203.0], [65.4, 4233.0], [65.5, 4246.0], [65.6, 4276.0], [65.7, 4287.0], [65.8, 4318.0], [65.9, 4333.0], [66.0, 4346.0], [66.1, 4361.0], [66.2, 4371.0], [66.3, 4420.0], [66.4, 4427.0], [66.5, 4459.0], [66.6, 4623.0], [66.7, 4746.0], [66.8, 4829.0], [66.9, 4855.0], [67.0, 4906.0], [67.1, 5047.0], [67.2, 5093.0], [67.3, 5165.0], [67.4, 5288.0], [67.5, 5312.0], [67.6, 5339.0], [67.7, 5405.0], [67.8, 5448.0], [67.9, 5517.0], [68.0, 5564.0], [68.1, 5598.0], [68.2, 5630.0], [68.3, 5648.0], [68.4, 5697.0], [68.5, 5719.0], [68.6, 5722.0], [68.7, 5790.0], [68.8, 5819.0], [68.9, 5820.0], [69.0, 5832.0], [69.1, 5892.0], [69.2, 5894.0], [69.3, 5922.0], [69.4, 5930.0], [69.5, 5943.0], [69.6, 5945.0], [69.7, 5956.0], [69.8, 5964.0], [69.9, 5976.0], [70.0, 5994.0], [70.1, 6007.0], [70.2, 6017.0], [70.3, 6027.0], [70.4, 6035.0], [70.5, 6039.0], [70.6, 6046.0], [70.7, 6061.0], [70.8, 6062.0], [70.9, 6081.0], [71.0, 6121.0], [71.1, 6133.0], [71.2, 6148.0], [71.3, 6153.0], [71.4, 6159.0], [71.5, 6170.0], [71.6, 6188.0], [71.7, 6204.0], [71.8, 6220.0], [71.9, 6240.0], [72.0, 6247.0], [72.1, 6266.0], [72.2, 6276.0], [72.3, 6285.0], [72.4, 6301.0], [72.5, 6331.0], [72.6, 6349.0], [72.7, 6351.0], [72.8, 6386.0], [72.9, 6475.0], [73.0, 6510.0], [73.1, 6511.0], [73.2, 6512.0], [73.3, 6538.0], [73.4, 6562.0], [73.5, 6572.0], [73.6, 6580.0], [73.7, 6589.0], [73.8, 6612.0], [73.9, 6636.0], [74.0, 6642.0], [74.1, 6654.0], [74.2, 6678.0], [74.3, 6695.0], [74.4, 6724.0], [74.5, 6726.0], [74.6, 6730.0], [74.7, 6737.0], [74.8, 6746.0], [74.9, 6781.0], [75.0, 6809.0], [75.1, 6866.0], [75.2, 6884.0], [75.3, 6903.0], [75.4, 7009.0], [75.5, 7040.0], [75.6, 7041.0], [75.7, 7045.0], [75.8, 7054.0], [75.9, 7108.0], [76.0, 7137.0], [76.1, 7203.0], [76.2, 7205.0], [76.3, 7217.0], [76.4, 7270.0], [76.5, 7298.0], [76.6, 7337.0], [76.7, 7404.0], [76.8, 7456.0], [76.9, 7458.0], [77.0, 7466.0], [77.1, 7530.0], [77.2, 7599.0], [77.3, 7604.0], [77.4, 7656.0], [77.5, 7665.0], [77.6, 7673.0], [77.7, 7687.0], [77.8, 7693.0], [77.9, 7694.0], [78.0, 7724.0], [78.1, 7752.0], [78.2, 7759.0], [78.3, 7803.0], [78.4, 7808.0], [78.5, 7813.0], [78.6, 8201.0], [78.7, 8235.0], [78.8, 8328.0], [78.9, 8347.0], [79.0, 8401.0], [79.1, 8461.0], [79.2, 8598.0], [79.3, 8624.0], [79.4, 8631.0], [79.5, 8643.0], [79.6, 8645.0], [79.7, 8646.0], [79.8, 8674.0], [79.9, 8712.0], [80.0, 8770.0], [80.1, 8812.0], [80.2, 8838.0], [80.3, 8934.0], [80.4, 8943.0], [80.5, 8965.0], [80.6, 9042.0], [80.7, 9069.0], [80.8, 9086.0], [80.9, 9305.0], [81.0, 9442.0], [81.1, 9504.0], [81.2, 9507.0], [81.3, 9519.0], [81.4, 9621.0], [81.5, 9703.0], [81.6, 9903.0], [81.7, 9932.0], [81.8, 10017.0], [81.9, 10018.0], [82.0, 10051.0], [82.1, 10123.0], [82.2, 10240.0], [82.3, 10412.0], [82.4, 10472.0], [82.5, 10500.0], [82.6, 10502.0], [82.7, 10547.0], [82.8, 10671.0], [82.9, 10734.0], [83.0, 10749.0], [83.1, 10774.0], [83.2, 10786.0], [83.3, 10873.0], [83.4, 10971.0], [83.5, 11200.0], [83.6, 11293.0], [83.7, 11330.0], [83.8, 11340.0], [83.9, 11399.0], [84.0, 11423.0], [84.1, 11476.0], [84.2, 11509.0], [84.3, 11550.0], [84.4, 11735.0], [84.5, 11740.0], [84.6, 11799.0], [84.7, 11869.0], [84.8, 11884.0], [84.9, 11896.0], [85.0, 11907.0], [85.1, 11927.0], [85.2, 11945.0], [85.3, 11951.0], [85.4, 11957.0], [85.5, 11984.0], [85.6, 12051.0], [85.7, 12085.0], [85.8, 12174.0], [85.9, 12244.0], [86.0, 12360.0], [86.1, 12374.0], [86.2, 12376.0], [86.3, 12455.0], [86.4, 12651.0], [86.5, 12695.0], [86.6, 12722.0], [86.7, 12785.0], [86.8, 12797.0], [86.9, 12811.0], [87.0, 12828.0], [87.1, 12852.0], [87.2, 12861.0], [87.3, 12874.0], [87.4, 12885.0], [87.5, 12897.0], [87.6, 12902.0], [87.7, 12946.0], [87.8, 12974.0], [87.9, 13016.0], [88.0, 13027.0], [88.1, 13045.0], [88.2, 13055.0], [88.3, 13085.0], [88.4, 13098.0], [88.5, 13110.0], [88.6, 13164.0], [88.7, 13187.0], [88.8, 13313.0], [88.9, 13446.0], [89.0, 13530.0], [89.1, 13566.0], [89.2, 13591.0], [89.3, 13609.0], [89.4, 13849.0], [89.5, 13904.0], [89.6, 13959.0], [89.7, 14099.0], [89.8, 14411.0], [89.9, 14462.0], [90.0, 14540.0], [90.1, 14686.0], [90.2, 14716.0], [90.3, 14963.0], [90.4, 15094.0], [90.5, 15255.0], [90.6, 15551.0], [90.7, 15809.0], [90.8, 16212.0], [90.9, 16730.0], [91.0, 16830.0], [91.1, 16889.0], [91.2, 16892.0], [91.3, 17073.0], [91.4, 17641.0], [91.5, 18025.0], [91.6, 18107.0], [91.7, 18138.0], [91.8, 18462.0], [91.9, 18526.0], [92.0, 18546.0], [92.1, 19735.0], [92.2, 20666.0], [92.3, 20807.0], [92.4, 21834.0], [92.5, 21928.0], [92.6, 22113.0], [92.7, 22923.0], [92.8, 23098.0], [92.9, 23216.0], [93.0, 23782.0], [93.1, 23955.0], [93.2, 24072.0], [93.3, 24935.0], [93.4, 25832.0], [93.5, 26386.0], [93.6, 27306.0], [93.7, 29107.0], [93.8, 30857.0], [93.9, 31209.0], [94.0, 31603.0], [94.1, 33069.0], [94.2, 33407.0], [94.3, 34127.0], [94.4, 34130.0], [94.5, 34269.0], [94.6, 34270.0], [94.7, 34900.0], [94.8, 35060.0], [94.9, 37897.0], [95.0, 38571.0], [95.1, 39182.0], [95.2, 40943.0], [95.3, 43228.0], [95.4, 44507.0], [95.5, 46665.0], [95.6, 48068.0], [95.7, 50033.0], [95.8, 50734.0], [95.9, 51382.0], [96.0, 53339.0], [96.1, 58747.0], [96.2, 61478.0], [96.3, 64101.0], [96.4, 65683.0], [96.5, 68242.0], [96.6, 71214.0], [96.7, 73507.0], [96.8, 76317.0], [96.9, 79749.0], [97.0, 82107.0], [97.1, 90619.0], [97.2, 93219.0], [97.3, 95645.0], [97.4, 98102.0], [97.5, 100012.0], [97.6, 100019.0], [97.7, 100026.0], [97.8, 100039.0], [97.9, 100057.0], [98.0, 100075.0], [98.1, 100094.0], [98.2, 100118.0], [98.3, 100141.0], [98.4, 100158.0], [98.5, 128452.0], [98.6, 136389.0], [98.7, 141826.0], [98.8, 145373.0], [98.9, 146861.0], [99.0, 148120.0], [99.1, 149754.0], [99.2, 154792.0], [99.3, 158350.0], [99.4, 164679.0], [99.5, 165485.0], [99.6, 170481.0], [99.7, 170721.0], [99.8, 174519.0], [99.9, 198809.0], [100.0, 210034.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 14085.0, "series": [{"data": [[0.0, 14085.0], [138400.0, 1.0], [141600.0, 1.0], [148000.0, 6.0], [170400.0, 1.0], [142500.0, 10.0], [171300.0, 7.0], [174500.0, 38.0], [76300.0, 1.0], [74700.0, 1.0], [81100.0, 2.0], [77900.0, 2.0], [82700.0, 1.0], [90700.0, 2.0], [140200.0, 2.0], [146600.0, 6.0], [100.0, 6788.0], [36100.0, 2.0], [38500.0, 11.0], [147500.0, 15.0], [40900.0, 5.0], [39300.0, 2.0], [41700.0, 1.0], [43300.0, 1.0], [48900.0, 2.0], [48100.0, 2.0], [51300.0, 10.0], [52900.0, 11.0], [200.0, 253.0], [55300.0, 2.0], [59300.0, 1.0], [60900.0, 2.0], [61700.0, 2.0], [64100.0, 18.0], [65800.0, 1.0], [67400.0, 2.0], [72200.0, 1.0], [300.0, 151.0], [73800.0, 2.0], [78600.0, 1.0], [81800.0, 1.0], [93000.0, 2.0], [94600.0, 2.0], [400.0, 104.0], [500.0, 81.0], [142000.0, 3.0], [600.0, 26.0], [170800.0, 2.0], [700.0, 34.0], [800.0, 60.0], [900.0, 18.0], [1000.0, 242.0], [1100.0, 666.0], [1200.0, 242.0], [1300.0, 177.0], [1400.0, 134.0], [1500.0, 168.0], [1600.0, 128.0], [1700.0, 265.0], [1800.0, 62.0], [1900.0, 57.0], [2000.0, 203.0], [2100.0, 267.0], [136500.0, 4.0], [2200.0, 182.0], [2300.0, 242.0], [146100.0, 10.0], [2400.0, 280.0], [2500.0, 31.0], [2600.0, 51.0], [2700.0, 83.0], [2800.0, 71.0], [2900.0, 75.0], [3000.0, 69.0], [190900.0, 3.0], [3100.0, 180.0], [3200.0, 212.0], [3300.0, 129.0], [3400.0, 22.0], [3500.0, 31.0], [3700.0, 70.0], [3600.0, 153.0], [3800.0, 18.0], [3900.0, 48.0], [4000.0, 47.0], [4100.0, 40.0], [4200.0, 181.0], [4300.0, 205.0], [68100.0, 1.0], [66500.0, 1.0], [72900.0, 4.0], [4400.0, 107.0], [4600.0, 34.0], [4500.0, 27.0], [69700.0, 1.0], [4700.0, 32.0], [4800.0, 103.0], [77700.0, 2.0], [4900.0, 22.0], [5000.0, 74.0], [79300.0, 5.0], [80900.0, 2.0], [5100.0, 50.0], [5300.0, 112.0], [84100.0, 2.0], [5200.0, 18.0], [82500.0, 1.0], [5500.0, 106.0], [5600.0, 116.0], [5400.0, 68.0], [5700.0, 124.0], [5800.0, 204.0], [90500.0, 1.0], [93700.0, 19.0], [6100.0, 284.0], [6000.0, 359.0], [5900.0, 335.0], [95300.0, 1.0], [6200.0, 296.0], [6300.0, 171.0], [98500.0, 1.0], [100100.0, 150.0], [6600.0, 234.0], [6400.0, 55.0], [6500.0, 318.0], [6800.0, 137.0], [6900.0, 39.0], [6700.0, 252.0], [7100.0, 88.0], [7000.0, 188.0], [7200.0, 170.0], [7300.0, 75.0], [7400.0, 153.0], [7500.0, 71.0], [7600.0, 294.0], [7700.0, 103.0], [7800.0, 111.0], [7900.0, 4.0], [8100.0, 27.0], [8200.0, 59.0], [8400.0, 55.0], [8600.0, 259.0], [8800.0, 76.0], [9200.0, 13.0], [9000.0, 103.0], [9600.0, 45.0], [9400.0, 31.0], [9800.0, 13.0], [10000.0, 108.0], [10200.0, 10.0], [159800.0, 2.0], [10600.0, 55.0], [10400.0, 85.0], [11000.0, 10.0], [10800.0, 40.0], [11200.0, 60.0], [11400.0, 107.0], [11600.0, 9.0], [12200.0, 58.0], [11800.0, 142.0], [12000.0, 91.0], [12400.0, 11.0], [12600.0, 110.0], [13000.0, 242.0], [12800.0, 294.0], [13200.0, 11.0], [13800.0, 53.0], [13400.0, 29.0], [13600.0, 23.0], [14000.0, 22.0], [14200.0, 8.0], [14400.0, 54.0], [14600.0, 37.0], [14800.0, 8.0], [15000.0, 51.0], [15200.0, 23.0], [15800.0, 8.0], [15400.0, 4.0], [15600.0, 5.0], [16000.0, 7.0], [16200.0, 17.0], [16400.0, 2.0], [17200.0, 10.0], [16800.0, 95.0], [18000.0, 47.0], [18400.0, 36.0], [17600.0, 19.0], [19200.0, 3.0], [18800.0, 3.0], [20000.0, 5.0], [20400.0, 5.0], [19600.0, 5.0], [20800.0, 8.0], [21200.0, 7.0], [22000.0, 25.0], [21600.0, 5.0], [22800.0, 6.0], [23200.0, 60.0], [24000.0, 29.0], [24400.0, 1.0], [24800.0, 10.0], [26000.0, 2.0], [26400.0, 1.0], [27200.0, 1.0], [26800.0, 1.0], [28000.0, 2.0], [29200.0, 2.0], [29600.0, 1.0], [30000.0, 10.0], [30400.0, 2.0], [31200.0, 41.0], [30800.0, 2.0], [31600.0, 7.0], [32400.0, 2.0], [34400.0, 16.0], [33600.0, 2.0], [36000.0, 2.0], [36800.0, 1.0], [40800.0, 2.0], [39200.0, 2.0], [41600.0, 2.0], [43200.0, 18.0], [44000.0, 3.0], [48000.0, 10.0], [47200.0, 2.0], [52800.0, 13.0], [52000.0, 2.0], [53600.0, 2.0], [56800.0, 2.0], [60000.0, 2.0], [60800.0, 2.0], [62400.0, 2.0], [64800.0, 2.0], [64000.0, 8.0], [65600.0, 4.0], [67200.0, 2.0], [68800.0, 1.0], [73600.0, 3.0], [75200.0, 7.0], [78400.0, 2.0], [84800.0, 1.0], [88000.0, 1.0], [92800.0, 13.0], [96000.0, 1.0], [134400.0, 2.0], [150400.0, 10.0], [156800.0, 1.0], [172800.0, 2.0], [135300.0, 1.0], [144900.0, 2.0], [148100.0, 5.0], [170500.0, 4.0], [67100.0, 1.0], [68700.0, 1.0], [71900.0, 4.0], [73500.0, 7.0], [76700.0, 1.0], [75100.0, 7.0], [79900.0, 2.0], [83100.0, 1.0], [99100.0, 2.0], [145800.0, 1.0], [171400.0, 5.0], [34700.0, 3.0], [33900.0, 1.0], [33100.0, 2.0], [146700.0, 7.0], [38700.0, 17.0], [149900.0, 2.0], [37100.0, 2.0], [39500.0, 9.0], [41900.0, 4.0], [41100.0, 2.0], [42700.0, 11.0], [45900.0, 2.0], [50700.0, 34.0], [49900.0, 3.0], [52300.0, 4.0], [54700.0, 2.0], [56300.0, 2.0], [58700.0, 3.0], [62700.0, 2.0], [66200.0, 4.0], [69400.0, 1.0], [72600.0, 4.0], [75800.0, 2.0], [77400.0, 2.0], [79000.0, 2.0], [83800.0, 3.0], [87000.0, 1.0], [93400.0, 3.0], [96600.0, 1.0], [170000.0, 1.0], [166800.0, 6.0], [173200.0, 14.0], [198800.0, 24.0], [138900.0, 5.0], [142100.0, 3.0], [145300.0, 5.0], [148500.0, 10.0], [151700.0, 1.0], [158100.0, 2.0], [164500.0, 8.0], [66900.0, 1.0], [68500.0, 1.0], [71700.0, 3.0], [79700.0, 1.0], [129300.0, 1.0], [130900.0, 2.0], [139800.0, 4.0], [149400.0, 16.0], [155800.0, 1.0], [171800.0, 1.0], [165400.0, 26.0], [16500.0, 6.0], [16900.0, 25.0], [17300.0, 2.0], [18100.0, 52.0], [17700.0, 7.0], [18500.0, 66.0], [19300.0, 5.0], [20100.0, 1.0], [19700.0, 1.0], [21700.0, 1.0], [22100.0, 24.0], [22500.0, 1.0], [22900.0, 21.0], [23300.0, 3.0], [23700.0, 15.0], [24500.0, 4.0], [24100.0, 6.0], [24900.0, 21.0], [25300.0, 2.0], [25700.0, 1.0], [26500.0, 4.0], [27300.0, 13.0], [26900.0, 2.0], [28100.0, 4.0], [27700.0, 2.0], [28900.0, 3.0], [29300.0, 1.0], [30100.0, 2.0], [29700.0, 1.0], [30500.0, 2.0], [31300.0, 4.0], [32100.0, 28.0], [33800.0, 3.0], [33000.0, 7.0], [34600.0, 2.0], [140700.0, 3.0], [143900.0, 1.0], [147100.0, 10.0], [37000.0, 2.0], [37800.0, 22.0], [40200.0, 2.0], [43400.0, 5.0], [44200.0, 2.0], [46600.0, 1.0], [47400.0, 21.0], [49000.0, 2.0], [48200.0, 2.0], [50600.0, 25.0], [51400.0, 3.0], [53000.0, 2.0], [57800.0, 2.0], [58600.0, 9.0], [59400.0, 4.0], [61800.0, 1.0], [63400.0, 10.0], [65000.0, 1.0], [64200.0, 2.0], [66000.0, 2.0], [69200.0, 3.0], [67600.0, 1.0], [70800.0, 3.0], [78800.0, 2.0], [82000.0, 21.0], [88400.0, 1.0], [93200.0, 2.0], [91600.0, 2.0], [96400.0, 1.0], [98000.0, 21.0], [128400.0, 22.0], [133600.0, 3.0], [146400.0, 1.0], [147300.0, 2.0], [67500.0, 8.0], [69100.0, 1.0], [70700.0, 1.0], [73900.0, 3.0], [75500.0, 1.0], [77100.0, 1.0], [80300.0, 1.0], [85100.0, 2.0], [97900.0, 2.0], [141800.0, 7.0], [170600.0, 14.0], [33300.0, 13.0], [34100.0, 81.0], [136300.0, 2.0], [34900.0, 16.0], [142700.0, 4.0], [145900.0, 2.0], [38900.0, 1.0], [38100.0, 2.0], [42900.0, 2.0], [165100.0, 2.0], [44500.0, 41.0], [43700.0, 6.0], [46900.0, 1.0], [50900.0, 2.0], [49300.0, 2.0], [53300.0, 2.0], [57300.0, 2.0], [61300.0, 9.0], [59700.0, 2.0], [60500.0, 1.0], [63700.0, 2.0], [64500.0, 1.0], [68200.0, 2.0], [66600.0, 2.0], [69800.0, 2.0], [77800.0, 1.0], [76200.0, 1.0], [74600.0, 1.0], [79400.0, 3.0], [87400.0, 1.0], [90600.0, 10.0], [93800.0, 11.0], [137200.0, 10.0], [146800.0, 2.0], [131700.0, 1.0], [144500.0, 1.0], [150900.0, 2.0], [154100.0, 7.0], [170100.0, 8.0], [68900.0, 10.0], [70500.0, 9.0], [73700.0, 1.0], [76900.0, 1.0], [75300.0, 2.0], [80100.0, 2.0], [86500.0, 2.0], [89700.0, 1.0], [92900.0, 1.0], [97700.0, 4.0], [8700.0, 80.0], [8500.0, 38.0], [8300.0, 105.0], [9100.0, 19.0], [8900.0, 117.0], [9700.0, 28.0], [9300.0, 31.0], [9500.0, 139.0], [155000.0, 7.0], [9900.0, 75.0], [10100.0, 55.0], [158200.0, 1.0], [10700.0, 143.0], [10300.0, 22.0], [10500.0, 98.0], [164600.0, 33.0], [11100.0, 13.0], [10900.0, 40.0], [11300.0, 111.0], [11500.0, 66.0], [11700.0, 101.0], [12100.0, 38.0], [11900.0, 224.0], [12700.0, 97.0], [12500.0, 1.0], [12300.0, 122.0], [12900.0, 115.0], [13300.0, 30.0], [13100.0, 119.0], [13500.0, 145.0], [13700.0, 4.0], [13900.0, 69.0], [14300.0, 26.0], [14100.0, 3.0], [14700.0, 58.0], [14500.0, 42.0], [15100.0, 16.0], [15300.0, 24.0], [14900.0, 6.0], [15700.0, 32.0], [15500.0, 1.0], [16100.0, 10.0], [15900.0, 16.0], [16300.0, 11.0], [17000.0, 21.0], [16600.0, 1.0], [17800.0, 2.0], [18200.0, 7.0], [19000.0, 2.0], [19800.0, 4.0], [20200.0, 2.0], [21000.0, 2.0], [20600.0, 58.0], [21400.0, 9.0], [21800.0, 27.0], [22200.0, 5.0], [23000.0, 22.0], [23800.0, 13.0], [24200.0, 3.0], [24600.0, 1.0], [25400.0, 14.0], [25800.0, 4.0], [27000.0, 4.0], [27800.0, 1.0], [28600.0, 1.0], [29400.0, 4.0], [29000.0, 6.0], [29800.0, 7.0], [30200.0, 1.0], [31000.0, 6.0], [31400.0, 2.0], [32200.0, 2.0], [31800.0, 2.0], [33200.0, 19.0], [34800.0, 1.0], [146300.0, 9.0], [38800.0, 12.0], [152700.0, 1.0], [38000.0, 18.0], [40400.0, 2.0], [42800.0, 2.0], [165500.0, 22.0], [41200.0, 2.0], [44400.0, 2.0], [46800.0, 2.0], [46000.0, 2.0], [45200.0, 2.0], [50800.0, 6.0], [50000.0, 3.0], [52400.0, 1.0], [54000.0, 2.0], [56400.0, 1.0], [60400.0, 2.0], [62800.0, 2.0], [63600.0, 7.0], [65200.0, 3.0], [64400.0, 2.0], [68000.0, 2.0], [66400.0, 5.0], [72800.0, 2.0], [71200.0, 5.0], [76000.0, 1.0], [88800.0, 4.0], [87200.0, 2.0], [90400.0, 1.0], [95200.0, 1.0], [100000.0, 267.0], [148800.0, 1.0], [155200.0, 16.0], [161600.0, 2.0], [206400.0, 3.0], [140100.0, 4.0], [149700.0, 9.0], [72700.0, 2.0], [75900.0, 1.0], [128700.0, 6.0], [130300.0, 1.0], [192200.0, 1.0], [34300.0, 5.0], [132300.0, 1.0], [33500.0, 2.0], [141900.0, 1.0], [35100.0, 2.0], [37500.0, 4.0], [151500.0, 5.0], [148300.0, 2.0], [154700.0, 1.0], [39900.0, 2.0], [40700.0, 2.0], [161100.0, 1.0], [39100.0, 11.0], [41500.0, 2.0], [170700.0, 24.0], [43900.0, 1.0], [47900.0, 7.0], [49500.0, 2.0], [50300.0, 2.0], [51900.0, 2.0], [53500.0, 5.0], [54300.0, 2.0], [59100.0, 2.0], [58300.0, 2.0], [60700.0, 2.0], [61500.0, 2.0], [63900.0, 1.0], [65500.0, 2.0], [67000.0, 1.0], [73400.0, 5.0], [71800.0, 1.0], [75000.0, 1.0], [79800.0, 2.0], [92600.0, 1.0], [127800.0, 1.0], [129400.0, 1.0], [136400.0, 2.0], [149200.0, 2.0], [165200.0, 8.0], [210000.0, 13.0], [137300.0, 2.0], [146900.0, 2.0], [198100.0, 1.0], [67700.0, 3.0], [72500.0, 1.0], [70900.0, 2.0], [77300.0, 9.0], [78900.0, 2.0], [82100.0, 11.0], [90100.0, 2.0], [91700.0, 2.0], [98100.0, 24.0], [131800.0, 5.0], [144600.0, 8.0], [151000.0, 1.0], [17100.0, 6.0], [16700.0, 34.0], [17500.0, 2.0], [18300.0, 4.0], [17900.0, 13.0], [18700.0, 4.0], [19100.0, 15.0], [19900.0, 1.0], [19500.0, 2.0], [21100.0, 3.0], [20700.0, 2.0], [21500.0, 1.0], [21900.0, 33.0], [22700.0, 3.0], [23500.0, 2.0], [23100.0, 14.0], [23900.0, 27.0], [24700.0, 5.0], [25100.0, 2.0], [25500.0, 4.0], [26300.0, 47.0], [25900.0, 2.0], [27100.0, 2.0], [26700.0, 3.0], [27900.0, 8.0], [28300.0, 1.0], [28700.0, 10.0], [29100.0, 2.0], [29500.0, 5.0], [31100.0, 22.0], [32300.0, 1.0], [33400.0, 5.0], [34200.0, 80.0], [35000.0, 44.0], [151900.0, 10.0], [155100.0, 7.0], [40600.0, 4.0], [39000.0, 2.0], [158300.0, 6.0], [42200.0, 2.0], [43800.0, 2.0], [46200.0, 2.0], [48600.0, 5.0], [47800.0, 3.0], [190300.0, 3.0], [49400.0, 12.0], [51000.0, 2.0], [206300.0, 1.0], [55000.0, 2.0], [55800.0, 2.0], [61400.0, 7.0], [59800.0, 2.0], [64600.0, 5.0], [65400.0, 3.0], [68400.0, 3.0], [71600.0, 3.0], [73200.0, 2.0], [74800.0, 2.0], [78000.0, 3.0], [90800.0, 8.0], [92400.0, 7.0], [95600.0, 2.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 210000.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 1680.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 21381.0, "series": [{"data": [[0.0, 21381.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 1680.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 17139.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 3.0, "minX": 1.68287274E12, "maxY": 3000.0, "series": [{"data": [[1.68287304E12, 624.2411003236251], [1.68287274E12, 3000.0], [1.68287292E12, 3000.0], [1.6828731E12, 3.0], [1.6828728E12, 3000.0], [1.68287298E12, 2803.6551856104147], [1.68287286E12, 3000.0]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6828731E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 20.0, "minX": 1.0, "maxY": 73923.0, "series": [{"data": [[2.0, 72917.0], [3.0, 72915.0], [4.0, 71906.0], [5.0, 71904.0], [6.0, 70897.0], [7.0, 70896.0], [8.0, 69886.0], [9.0, 69885.0], [10.0, 68876.0], [11.0, 69493.0], [12.0, 68486.0], [13.0, 68484.0], [14.0, 67476.0], [15.0, 67474.0], [16.0, 66466.0], [17.0, 66464.0], [18.0, 65457.0], [19.0, 65455.0], [20.0, 64447.0], [21.0, 64445.0], [22.0, 63438.0], [23.0, 63436.0], [24.0, 62428.0], [25.0, 62426.0], [26.0, 61418.0], [27.0, 61416.0], [28.0, 60409.0], [29.0, 60407.0], [30.0, 59400.0], [31.0, 59397.0], [33.0, 58388.0], [32.0, 58390.0], [35.0, 57379.0], [34.0, 57380.0], [37.0, 56369.0], [36.0, 56371.0], [39.0, 55359.0], [38.0, 55361.0], [41.0, 54349.0], [40.0, 54351.0], [43.0, 53339.0], [42.0, 53341.0], [45.0, 52328.0], [44.0, 52331.0], [47.0, 51318.0], [46.0, 51322.0], [49.0, 50310.0], [48.0, 50312.0], [51.0, 49300.0], [50.0, 49303.0], [53.0, 48290.0], [52.0, 48292.0], [55.0, 47280.0], [54.0, 47282.0], [57.0, 46271.0], [56.0, 46274.0], [59.0, 45263.0], [58.0, 45264.0], [61.0, 44252.0], [60.0, 44255.0], [63.0, 43243.0], [62.0, 43245.0], [67.0, 41222.0], [66.0, 41225.0], [65.0, 42232.0], [64.0, 42235.0], [71.0, 39203.0], [70.0, 39205.0], [69.0, 40213.0], [68.0, 40215.0], [75.0, 37184.0], [74.0, 37186.0], [73.0, 38194.0], [72.0, 38196.0], [79.0, 35164.0], [78.0, 35166.0], [77.0, 36174.0], [76.0, 36176.0], [83.0, 33145.0], [82.0, 33147.0], [81.0, 34155.0], [80.0, 34156.0], [87.0, 32494.0], [86.0, 32496.0], [85.0, 33503.0], [84.0, 33506.0], [91.0, 30477.0], [90.0, 30477.0], [89.0, 31485.0], [88.0, 31485.0], [95.0, 31188.0], [94.0, 31188.0], [93.0, 31188.0], [92.0, 31188.0], [99.0, 31184.0], [98.0, 31184.0], [97.0, 31184.0], [96.0, 31186.0], [103.0, 31121.0], [102.0, 31121.0], [101.0, 31121.0], [100.0, 31151.0], [107.0, 23232.0], [106.0, 26370.0], [105.0, 29404.0], [104.0, 29407.0], [110.0, 23232.333333333332], [115.0, 23229.0], [114.0, 23230.0], [113.0, 23232.0], [112.0, 23231.0], [119.0, 23226.0], [116.0, 23229.0], [123.0, 23225.0], [122.0, 23225.0], [127.0, 23208.0], [126.0, 23209.0], [124.0, 23224.0], [135.0, 31254.0], [134.0, 30769.5], [133.0, 31134.0], [131.0, 23195.0], [130.0, 23194.0], [129.0, 23198.0], [128.0, 23199.0], [143.0, 31129.0], [142.0, 31193.5], [140.0, 31213.0], [137.0, 31254.5], [151.0, 31243.0], [150.0, 31125.0], [149.0, 31247.0], [148.0, 31248.0], [147.0, 31248.0], [146.0, 31249.5], [144.0, 31130.0], [159.0, 31224.5], [157.0, 31108.0], [156.0, 31231.0], [155.0, 31109.0], [154.0, 31233.0], [153.0, 31240.0], [152.0, 31121.0], [167.0, 31215.0], [166.0, 31223.0], [165.0, 31222.5], [163.0, 31223.5], [161.0, 31224.0], [174.0, 31209.0], [172.0, 31209.0], [171.0, 31210.0], [170.0, 31214.0], [169.0, 31215.0], [183.0, 28034.0], [182.0, 28035.0], [181.0, 31202.0], [180.0, 31202.5], [179.0, 31202.0], [177.0, 31208.0], [176.0, 31209.0], [189.0, 26502.0], [187.0, 28727.0], [186.0, 28734.0], [185.0, 27090.0], [197.0, 17885.0], [195.0, 26500.0], [194.0, 17641.0], [192.0, 20595.0], [207.0, 17633.0], [206.0, 17633.0], [205.0, 17634.0], [204.0, 17634.0], [203.0, 18127.0], [202.0, 18129.0], [201.0, 22613.75], [214.0, 18114.0], [213.0, 18827.5], [211.0, 17874.0], [222.0, 18108.0], [221.0, 18109.0], [220.0, 18110.0], [219.0, 18110.0], [217.0, 18111.0], [216.0, 18112.5], [231.0, 18064.0], [228.0, 18065.0], [227.0, 18084.0], [226.0, 18096.0], [225.0, 18107.0], [239.0, 24110.0], [238.0, 24118.0], [237.0, 18059.0], [236.0, 18061.0], [235.0, 24121.0], [234.0, 18062.0], [233.0, 18063.5], [246.0, 24063.0], [245.0, 24064.0], [243.0, 24065.0], [242.0, 24065.0], [241.0, 24065.5], [255.0, 24046.5], [253.0, 24047.0], [252.0, 24057.0], [251.0, 24057.0], [250.0, 24062.0], [248.0, 24063.0], [269.0, 27783.0], [270.0, 27781.0], [268.0, 23782.0], [267.0, 23790.0], [266.0, 23792.0], [264.0, 23794.5], [262.0, 23794.0], [261.0, 23796.0], [259.0, 23795.0], [257.0, 23797.0], [286.0, 23216.0], [287.0, 23217.0], [284.0, 23217.0], [283.0, 23218.0], [282.0, 23218.5], [281.0, 23219.0], [278.0, 23219.0], [277.0, 23220.0], [275.0, 23220.0], [274.0, 23219.5], [272.0, 23220.0], [303.0, 19773.0], [301.0, 23208.0], [291.0, 23214.0], [290.0, 20926.333333333332], [299.0, 23209.0], [298.0, 23210.0], [297.0, 23211.0], [296.0, 23211.0], [295.0, 23212.0], [294.0, 16343.0], [293.0, 23213.0], [292.0, 23214.0], [317.0, 23198.0], [316.0, 19763.5], [314.0, 19765.5], [313.0, 23200.0], [311.0, 19766.5], [309.0, 16332.0], [308.0, 23205.333333333332], [307.0, 23206.0], [305.0, 23207.0], [333.0, 16558.0], [335.0, 16186.0], [332.0, 16240.0], [322.0, 23196.5], [320.0, 23197.333333333332], [331.0, 19867.5], [329.0, 16275.0], [328.0, 19746.5], [326.0, 16313.0], [325.0, 16313.0], [324.0, 19760.5], [350.0, 14730.0], [351.0, 14730.0], [348.0, 25987.0], [339.0, 16501.0], [338.0, 16502.0], [337.0, 16185.0], [336.0, 16503.0], [347.0, 25989.0], [346.0, 28328.0], [345.0, 26706.0], [344.0, 26710.0], [343.0, 16225.0], [342.0, 16225.5], [341.0, 16226.0], [365.0, 25357.0], [366.0, 26804.0], [364.0, 25360.0], [355.0, 14729.0], [354.0, 14478.5], [352.0, 14729.0], [363.0, 14713.0], [362.0, 14720.0], [361.0, 14720.0], [360.0, 14722.0], [359.0, 14723.0], [358.0, 14726.0], [357.0, 14727.0], [356.0, 14728.0], [382.0, 14431.0], [383.0, 14429.0], [381.0, 14434.0], [380.0, 14438.0], [379.0, 14442.0], [378.0, 14447.0], [377.0, 14450.0], [376.0, 14454.0], [375.0, 14457.0], [368.0, 14472.0], [371.0, 14468.0], [370.0, 14470.0], [374.0, 14462.0], [373.0, 14465.0], [372.0, 14468.0], [387.0, 24976.0], [399.0, 13594.5], [398.0, 13594.0], [394.0, 13595.0], [393.0, 13595.0], [391.0, 13596.0], [390.0, 13596.0], [388.0, 13596.0], [386.0, 24978.0], [385.0, 14419.0], [384.0, 14425.0], [414.0, 13591.0], [412.0, 19270.0], [410.0, 17377.333333333332], [409.0, 13592.0], [406.0, 13593.25], [404.0, 13593.0], [402.0, 13593.0], [400.0, 13594.0], [418.0, 13590.0], [431.0, 13692.0], [428.0, 19265.0], [426.0, 13587.0], [425.0, 13587.0], [424.0, 13588.0], [422.0, 13588.5], [420.0, 13589.0], [417.0, 19269.5], [416.0, 13591.5], [445.0, 13582.0], [444.0, 13582.0], [443.0, 13583.0], [440.0, 16422.5], [436.0, 13584.0], [435.0, 17370.0], [432.0, 22763.0], [451.0, 19259.0], [463.0, 19255.0], [461.0, 17362.666666666668], [458.0, 20991.0], [457.0, 24935.0], [454.0, 24936.0], [452.0, 13580.0], [449.0, 19260.0], [448.0, 19259.5], [477.0, 13525.0], [479.0, 13523.0], [476.0, 24884.0], [467.0, 17458.666666666668], [464.0, 24924.0], [475.0, 24884.0], [474.0, 19210.5], [472.0, 13563.0], [470.0, 13564.0], [469.0, 13564.0], [468.0, 13565.0], [483.0, 13522.5], [493.0, 13507.0], [492.0, 13826.0], [491.0, 13509.0], [489.0, 13828.0], [488.0, 13510.0], [487.0, 13518.333333333334], [484.0, 13518.0], [482.0, 24879.0], [481.0, 13523.0], [509.0, 13793.0], [510.0, 24788.0], [508.0, 24834.0], [507.0, 13797.0], [506.0, 25812.0], [505.0, 13799.0], [504.0, 13814.0], [503.0, 16498.75], [498.0, 13505.5], [496.0, 17291.666666666668], [499.0, 25832.0], [538.0, 12895.0], [528.0, 18420.0], [530.0, 23938.0], [540.0, 9949.5], [536.0, 12897.0], [526.0, 12902.0], [512.0, 19268.0], [514.0, 24780.0], [516.0, 24296.0], [522.0, 12903.0], [520.0, 14624.0], [534.0, 9959.0], [568.0, 15126.0], [570.0, 23098.0], [562.0, 12787.0], [572.0, 23096.0], [560.0, 23841.0], [550.0, 14078.0], [544.0, 12882.0], [556.0, 6925.0], [554.0, 12804.0], [552.0, 12805.0], [564.0, 23338.0], [580.0, 15124.5], [604.0, 14100.0], [600.0, 24064.5], [582.0, 6177.0], [578.0, 9117.5], [576.0, 13778.0], [590.0, 14635.5], [588.0, 23094.0], [594.0, 23580.0], [636.0, 6146.0], [624.0, 6152.0], [634.0, 6744.0], [622.0, 12756.5], [610.0, 12050.0], [614.0, 12134.0], [618.0, 14080.0], [616.0, 14095.0], [630.0, 9090.5], [628.0, 6152.0], [666.0, 12351.5], [658.0, 8098.666666666667], [664.0, 6136.0], [654.0, 11839.25], [650.0, 6437.5], [648.0, 20387.666666666668], [662.0, 6137.0], [700.0, 11986.0], [702.0, 6701.0], [688.0, 6711.0], [690.0, 6709.0], [698.0, 14035.0], [696.0, 6110.0], [678.0, 6124.0], [676.0, 6125.0], [674.0, 6131.0], [672.0, 6132.0], [686.0, 6116.0], [684.0, 6713.0], [682.0, 6715.0], [694.0, 14039.0], [710.0, 6101.0], [730.0, 8375.75], [724.0, 6394.5], [732.0, 23013.0], [708.0, 6399.0], [704.0, 6700.0], [716.0, 6696.0], [714.0, 6695.0], [712.0, 6101.0], [726.0, 6096.0], [742.0, 6669.0], [762.0, 8687.333333333334], [736.0, 6687.0], [738.0, 6092.0], [740.0, 6077.0], [748.0, 6665.0], [746.0, 6469.333333333333], [756.0, 23938.0], [754.0, 13989.0], [752.0, 23959.0], [774.0, 6633.0], [794.0, 6624.0], [798.0, 8857.333333333334], [786.0, 6630.0], [770.0, 11919.0], [768.0, 13968.0], [782.0, 11917.0], [780.0, 13966.0], [776.0, 23931.0], [790.0, 6626.0], [804.0, 22910.0], [824.0, 6561.0], [828.0, 6555.0], [826.0, 11843.0], [800.0, 11894.0], [802.0, 5993.0], [814.0, 11854.0], [812.0, 6573.0], [810.0, 8826.0], [860.0, 6518.0], [852.0, 22849.0], [848.0, 18360.5], [850.0, 6532.0], [858.0, 12288.0], [836.0, 11826.0], [834.0, 6542.0], [832.0, 6553.0], [846.0, 13866.0], [844.0, 9179.0], [842.0, 6538.0], [840.0, 14423.0], [854.0, 6524.0], [892.0, 8702.25], [880.0, 5702.0], [888.0, 5400.5], [866.0, 8957.333333333334], [868.0, 6509.0], [870.0, 22074.0], [872.0, 10987.0], [886.0, 5699.0], [884.0, 5104.0], [882.0, 5105.0], [924.0, 5091.0], [914.0, 13020.0], [926.0, 13846.0], [912.0, 8034.5], [902.0, 5694.0], [900.0, 13382.333333333332], [896.0, 10980.0], [906.0, 15275.5], [904.0, 5297.0], [918.0, 5093.0], [952.0, 7999.0], [944.0, 5660.0], [956.0, 5649.0], [954.0, 5355.5], [930.0, 10969.0], [934.0, 8028.5], [942.0, 5662.0], [938.0, 5665.0], [950.0, 12988.0], [948.0, 5657.0], [986.0, 8246.0], [990.0, 9265.5], [976.0, 10902.0], [988.0, 5601.0], [960.0, 5634.0], [964.0, 17944.5], [962.0, 5630.0], [970.0, 21946.0], [968.0, 14274.5], [980.0, 5022.0], [1016.0, 3254.0], [1022.0, 3249.0], [1020.0, 3251.5], [1018.0, 6928.0], [1006.0, 3256.0], [992.0, 21219.0], [994.0, 20074.0], [996.0, 19066.0], [998.0, 17686.0], [1002.0, 3257.0], [1012.0, 3255.0], [1010.0, 6930.0], [1076.0, 3212.0], [1080.0, 3210.0], [1072.0, 4438.333333333333], [1024.0, 3250.0], [1032.0, 5084.5], [1040.0, 3238.0], [1064.0, 3220.0], [1060.0, 3222.0], [1136.0, 5180.0], [1148.0, 3038.5], [1128.0, 3099.0], [1120.0, 3112.0], [1088.0, 3189.0], [1092.0, 3186.0], [1096.0, 3185.0], [1100.0, 6842.0], [1112.0, 4069.0], [1108.0, 3118.0], [1132.0, 16912.0], [1124.0, 3104.0], [1208.0, 2201.5], [1212.0, 5047.0], [1204.0, 3719.5], [1200.0, 4374.058823529413], [1180.0, 3740.5], [1176.0, 4455.5], [1172.0, 5580.5], [1272.0, 16843.0], [1276.0, 3376.5], [1248.0, 4011.0], [1256.0, 12140.0], [1252.0, 15137.0], [1268.0, 9985.5], [1264.0, 3129.25], [1224.0, 5033.0], [1220.0, 5449.0], [1244.0, 4015.0], [1240.0, 15691.0], [1260.0, 3129.0], [1328.0, 13791.5], [1320.0, 10796.0], [1340.0, 18220.0], [1312.0, 6335.0], [1292.0, 3120.0], [1280.0, 7965.0], [1308.0, 17538.0], [1304.0, 16828.0], [1300.0, 3118.0], [1324.0, 7931.0], [1400.0, 16281.0], [1404.0, 9365.5], [1380.0, 17470.0], [1384.0, 18171.0], [1396.0, 18138.0], [1392.0, 15711.0], [1356.0, 7169.333333333333], [1352.0, 3060.0], [1344.0, 13362.0], [1372.0, 16757.5], [1368.0, 16759.0], [1364.0, 3048.0], [1360.0, 12733.0], [1388.0, 16728.0], [1420.0, 7670.333333333334], [1444.0, 16262.0], [1464.0, 2413.0], [1456.0, 18113.0], [1416.0, 18132.0], [1412.0, 18133.0], [1408.0, 2450.0], [1436.0, 2435.0], [1428.0, 2437.0], [1532.0, 18026.0], [1508.0, 2368.0], [1520.0, 2362.5], [1476.0, 2399.0], [1472.0, 10244.0], [1480.0, 18082.0], [1484.0, 2394.0], [1496.0, 2384.0], [1488.0, 10234.0], [1512.0, 2367.0], [1504.0, 2378.0], [1592.0, 1115.0], [1596.0, 1113.0], [1568.0, 1130.3333333333333], [1572.0, 1129.0], [1548.0, 1310.5], [1540.0, 9718.5], [1536.0, 9255.5], [1564.0, 15400.0], [1560.0, 1288.5], [1576.0, 1127.0], [1656.0, 1137.0], [1632.0, 2079.0], [1660.0, 1136.0], [1640.0, 2070.5], [1644.0, 2060.3333333333335], [1652.0, 1138.0], [1648.0, 14398.0], [1604.0, 1111.0], [1608.0, 1086.0], [1612.0, 1064.0], [1624.0, 1055.0], [1616.0, 1061.5], [1724.0, 1078.0], [1696.0, 1114.0], [1704.0, 1110.0], [1708.0, 1107.0], [1720.0, 1089.0], [1664.0, 1134.0], [1676.0, 1124.5], [1688.0, 1115.25], [1684.0, 1115.0], [1680.0, 1119.0], [1776.0, 1469.0], [1764.0, 1475.0], [1788.0, 1136.0], [1760.0, 71214.0], [1768.0, 1474.0], [1772.0, 1473.0], [1728.0, 1075.0], [1732.0, 13404.0], [1736.0, 68968.0], [1740.0, 1785.0], [1756.0, 1769.5], [1752.0, 71228.0], [1748.0, 68961.0], [1744.0, 68965.0], [1840.0, 1745.0], [1844.0, 1740.0], [1828.0, 1753.0], [1848.0, 1719.0], [1792.0, 1127.0], [1796.0, 1277.0], [1800.0, 1433.0], [1820.0, 1759.0], [1816.0, 1762.0], [1916.0, 2124.0], [1888.0, 2167.5], [1892.0, 2165.0], [1896.0, 2158.0], [1900.0, 2154.0], [1912.0, 2139.0], [1904.0, 2145.0], [1868.0, 105.0], [1864.0, 1051.0], [1860.0, 10374.0], [1884.0, 2167.0], [1880.0, 2169.0], [1876.0, 2169.0], [1872.0, 94.0], [1952.0, 116.33333333333333], [1956.0, 116.0], [1944.0, 3218.666666666667], [2040.0, 1142.0], [2016.0, 107.0], [2020.0, 99.0], [2024.0, 61.0], [2044.0, 1142.0], [2036.0, 1143.0], [1992.0, 109.8], [2012.0, 108.0], [2008.0, 108.14285714285715], [2004.0, 109.0], [2000.0, 109.0], [2152.0, 1047.0], [2160.0, 1694.0], [2168.0, 1692.0], [2120.0, 1249.0], [2136.0, 1225.0], [2072.0, 1117.0], [2048.0, 1140.0], [2096.0, 7402.0], [2088.0, 1064.0], [2080.0, 1100.0], [2280.0, 30.333333333333332], [2264.0, 77.26666666666667], [2272.0, 62.0], [2200.0, 1715.0], [2192.0, 1734.0], [2184.0, 1682.0], [2176.0, 1689.0], [2320.0, 1143.8], [2328.0, 1142.0], [2424.0, 68.0], [2400.0, 70.5], [2312.0, 1653.0], [2352.0, 1116.0], [2344.0, 1126.0], [2336.0, 1134.0], [2552.0, 1134.0], [2520.0, 2090.0], [2544.0, 1140.0], [2440.0, 49.666666666666664], [2448.0, 41.0], [2480.0, 60.66666666666667], [2568.0, 1121.0], [2664.0, 1092.0], [2640.0, 1395.0], [2656.0, 1099.0], [2560.0, 1126.0], [2608.0, 1080.0], [2600.0, 1087.0], [2592.0, 1096.0], [2712.0, 1159.0], [2760.0, 1154.5], [2688.0, 1059.0], [2744.0, 1177.0], [2736.0, 1192.0], [2728.0, 1194.5], [2720.0, 1129.0], [2768.0, 1051.0], [2912.0, 125.0], [2920.0, 110.0], [2824.0, 95.0], [2832.0, 95.0], [2840.0, 94.0], [2864.0, 70.10000000000002], [2848.0, 93.75], [3000.0, 8609.961319283884], [2944.0, 105.0], [2984.0, 3234.0], [2976.0, 94.0], [2145.0, 1211.6666666666667], [2129.0, 1232.0], [2137.0, 1224.0], [2153.0, 1047.0], [2073.0, 1111.0], [2065.0, 1122.5], [2049.0, 1139.0], [2105.0, 1804.0], [2281.0, 29.0], [2289.0, 1177.0], [2273.0, 63.0], [2193.0, 1789.0], [2185.0, 1679.0], [2177.0, 1750.0], [2401.0, 70.5], [2329.0, 1140.0], [2385.0, 79.75], [2313.0, 1649.0], [2305.0, 1659.0], [2361.0, 1112.0], [2337.0, 1132.0], [2553.0, 1135.0], [2497.0, 125.0], [2505.0, 124.12500000000001], [2513.0, 2092.3333333333335], [2521.0, 2090.0], [2545.0, 1139.0], [2537.0, 1141.5], [2529.0, 2072.5], [2449.0, 41.0], [2489.0, 139.0], [2481.0, 141.33333333333334], [2473.0, 81.5], [2665.0, 1092.0], [2633.0, 1413.6666666666667], [2641.0, 1390.0], [2673.0, 1079.0], [2657.0, 1097.0], [2577.0, 1113.0], [2569.0, 1122.0], [2561.0, 1125.0], [2617.0, 1429.0], [2609.0, 1079.5], [2753.0, 1165.3333333333333], [2761.0, 1154.0], [2697.0, 1167.6666666666667], [2713.0, 1155.0], [2729.0, 1194.0], [2769.0, 1050.0], [2921.0, 109.0], [2937.0, 106.0], [2905.0, 125.75], [2929.0, 109.5], [2913.0, 124.0], [2825.0, 95.0], [2833.0, 95.0], [2865.0, 27.0], [2849.0, 95.0], [2961.0, 105.0], [2953.0, 3246.0], [2977.0, 2449.5], [1073.0, 6067.0], [1085.0, 3190.0], [1057.0, 3227.0], [1077.0, 3211.0], [1029.0, 3248.0], [1025.0, 3248.0], [1049.0, 5068.5], [1045.0, 3236.0], [1069.0, 5051.5], [1149.0, 2324.0], [1125.0, 5958.0], [1145.0, 2325.0], [1141.0, 3277.0], [1097.0, 5021.5], [1101.0, 5004.5], [1105.0, 4546.0], [1133.0, 16910.0], [1121.0, 5965.0], [1213.0, 5043.0], [1205.0, 2267.0], [1197.0, 5166.0], [1193.0, 2312.0], [1185.0, 5166.0], [1169.0, 3269.3333333333335], [1153.0, 3750.5], [1161.0, 3273.6666666666665], [1225.0, 4996.0], [1273.0, 3126.0], [1277.0, 12806.0], [1269.0, 16843.0], [1253.0, 15135.0], [1249.0, 4010.0], [1217.0, 3613.0], [1229.0, 4996.0], [1245.0, 4014.0], [1241.0, 15689.0], [1237.0, 4242.285714285715], [1289.0, 9977.5], [1333.0, 7656.666666666666], [1305.0, 3113.0], [1285.0, 9980.5], [1297.0, 8967.0], [1325.0, 12771.0], [1317.0, 9963.0], [1313.0, 9465.0], [1397.0, 18138.0], [1401.0, 2452.0], [1405.0, 18135.0], [1377.0, 16757.0], [1357.0, 16770.0], [1353.0, 16774.0], [1349.0, 8762.5], [1373.0, 16757.0], [1369.0, 16758.0], [1361.0, 16766.0], [1389.0, 16725.0], [1421.0, 2443.0], [1413.0, 2449.0], [1453.0, 2431.3333333333335], [1425.0, 2439.0], [1485.0, 2393.0], [1525.0, 2353.5], [1509.0, 2368.0], [1533.0, 10185.0], [1505.0, 2378.0], [1481.0, 2397.5], [1477.0, 18083.0], [1501.0, 2378.0], [1497.0, 2384.0], [1493.0, 7616.0], [1517.0, 9281.0], [1589.0, 1119.5], [1597.0, 1114.0], [1577.0, 1128.0], [1593.0, 1116.0], [1549.0, 1311.0], [1545.0, 1312.0], [1561.0, 1285.0], [1557.0, 1291.0], [1553.0, 1301.5], [1661.0, 1136.0], [1637.0, 2078.0], [1641.0, 2067.0], [1645.0, 2055.0], [1649.0, 14397.0], [1613.0, 1063.0], [1609.0, 1082.0], [1601.0, 1112.0], [1629.0, 2080.0], [1621.0, 1058.0], [1617.0, 1060.0], [1713.0, 1089.5], [1717.0, 1090.0], [1701.0, 1112.0], [1721.0, 1080.0], [1697.0, 1113.0], [1693.0, 1113.5], [1669.0, 1133.0], [1689.0, 1114.0], [1685.0, 1116.0], [1781.0, 70906.0], [1761.0, 11374.0], [1789.0, 1135.0], [1785.0, 1137.5], [1777.0, 1467.0], [1729.0, 1072.0], [1733.0, 13402.0], [1757.0, 71218.0], [1753.0, 1772.0], [1749.0, 68960.0], [1745.0, 68964.0], [1849.0, 1718.0], [1825.0, 1756.0], [1833.0, 1751.0], [1853.0, 1709.0], [1845.0, 1737.0], [1841.0, 1744.0], [1797.0, 1437.0], [1801.0, 1428.0], [1821.0, 1757.0], [1817.0, 1762.0], [1813.0, 1763.0], [1809.0, 1763.5], [1909.0, 2144.3333333333335], [1893.0, 2161.0], [1901.0, 2153.0], [1917.0, 2123.0], [1869.0, 101.0], [1865.0, 1049.0], [1861.0, 1051.0], [1857.0, 1704.0], [1873.0, 93.0], [1953.0, 117.0], [1945.0, 1977.4], [2045.0, 1141.3333333333333], [2033.0, 1144.0], [1997.0, 109.0], [2009.0, 108.0], [2005.0, 109.0], [2001.0, 109.0], [2170.0, 1691.5], [2122.0, 1247.0], [2114.0, 1274.0], [2130.0, 1231.0], [2138.0, 1222.0], [2154.0, 1045.0], [2146.0, 1210.0], [2066.0, 1118.0], [2058.0, 1132.0], [2050.0, 1137.0], [2106.0, 1803.0], [2098.0, 1332.0], [2090.0, 1063.5], [2082.0, 1097.5], [2282.0, 29.0], [2298.0, 1665.0], [2266.0, 62.5], [2290.0, 5331.0], [2202.0, 1767.5], [2194.0, 1787.0], [2186.0, 1679.0], [2178.0, 1687.0], [2322.0, 1143.0], [2386.0, 80.0], [2370.0, 1100.0], [2330.0, 1139.0], [2314.0, 1645.0], [2306.0, 1659.0], [2362.0, 1111.0], [2354.0, 1114.5], [2346.0, 1125.0], [2338.0, 1133.0], [2530.0, 2063.0], [2506.0, 116.0], [2554.0, 1134.0], [2546.0, 1139.0], [2434.0, 51.0], [2450.0, 40.0], [2458.0, 38.75], [2490.0, 133.0], [2474.0, 60.666666666666664], [2682.0, 1068.0], [2634.0, 1407.0], [2642.0, 1388.0], [2650.0, 1102.3333333333333], [2674.0, 1073.0], [2666.0, 1091.5], [2586.0, 1098.5], [2578.0, 1113.0], [2570.0, 1120.0], [2618.0, 1429.0], [2610.0, 1078.0], [2602.0, 1081.0], [2706.0, 1164.25], [2762.0, 1149.0], [2690.0, 1059.0], [2698.0, 1167.0], [2746.0, 1171.5], [2738.0, 1190.0], [2722.0, 1116.0], [2770.0, 4191.0], [2834.0, 94.85714285714285], [2914.0, 1172.0], [2938.0, 107.0], [2826.0, 95.0], [2842.0, 94.75], [2874.0, 23.142857142857142], [2866.0, 25.0], [2850.0, 93.66666666666667], [2946.0, 103.0], [2994.0, 1975.0], [2962.0, 1674.5], [2970.0, 888.5], [2986.0, 1662.0], [2075.0, 1111.0], [2115.0, 1273.5], [2139.0, 1218.0], [2147.0, 1205.0], [2059.0, 1131.0], [2051.0, 1137.0], [2107.0, 1801.0], [2099.0, 1331.0], [2083.0, 1094.0], [2291.0, 5328.0], [2259.0, 77.0], [2299.0, 1665.0], [2283.0, 1221.0], [2203.0, 1767.0], [2195.0, 1660.0], [2403.0, 71.0], [2419.0, 68.0], [2371.0, 1099.5], [2387.0, 2222.5], [2395.0, 1143.0], [2331.0, 1140.0], [2323.0, 1143.0], [2315.0, 1642.0], [2307.0, 1658.0], [2363.0, 1110.5], [2339.0, 1131.0], [2515.0, 2091.5], [2555.0, 1132.0], [2523.0, 2087.5], [2547.0, 1138.0], [2531.0, 1710.0], [2435.0, 51.0], [2475.0, 81.0], [2659.0, 1096.0], [2683.0, 1067.0], [2627.0, 1426.3333333333333], [2667.0, 1088.0], [2587.0, 1098.5], [2579.0, 1113.0], [2563.0, 1124.0], [2611.0, 1077.0], [2603.0, 1081.0], [2595.0, 1092.0], [2715.0, 1145.5], [2707.0, 1163.0], [2755.0, 1163.0], [2691.0, 1058.5], [2747.0, 1170.0], [2739.0, 1187.0], [2723.0, 385.0], [2891.0, 128.5], [2931.0, 108.0], [2907.0, 126.5], [2915.0, 120.0], [2827.0, 95.5], [2843.0, 94.5], [2851.0, 91.0], [2955.0, 3245.0], [2971.0, 3244.0], [2979.0, 93.0], [537.0, 7017.0], [541.0, 23923.0], [543.0, 24408.5], [529.0, 23939.0], [513.0, 25761.0], [515.0, 24297.0], [517.0, 23944.0], [525.0, 20587.0], [535.0, 24910.0], [533.0, 12899.0], [531.0, 23937.0], [551.0, 12805.0], [573.0, 6179.0], [561.0, 12795.0], [571.0, 16421.333333333332], [547.0, 12807.0], [545.0, 12882.0], [559.0, 24328.5], [557.0, 9863.5], [565.0, 14108.0], [563.0, 23340.0], [603.0, 12052.0], [605.0, 9111.5], [601.0, 6173.0], [581.0, 12056.0], [587.0, 6473.5], [585.0, 15048.0], [599.0, 6175.0], [597.0, 11813.0], [593.0, 15418.5], [633.0, 10114.0], [637.0, 6146.0], [639.0, 6146.0], [635.0, 6743.0], [609.0, 11605.25], [611.0, 14099.0], [615.0, 6170.0], [617.0, 6154.0], [631.0, 6746.0], [629.0, 7770.0], [667.0, 6136.0], [669.0, 6430.0], [641.0, 9383.0], [645.0, 6144.0], [643.0, 13048.5], [663.0, 8978.0], [659.0, 6137.0], [657.0, 6139.0], [697.0, 6110.0], [703.0, 6106.0], [689.0, 6114.0], [691.0, 6113.0], [701.0, 10368.0], [679.0, 6715.0], [677.0, 6124.0], [675.0, 23042.0], [687.0, 6711.0], [685.0, 6117.0], [683.0, 6713.0], [681.0, 6715.0], [693.0, 6112.0], [729.0, 6096.0], [735.0, 11931.666666666666], [723.0, 6692.0], [731.0, 6690.0], [709.0, 23019.0], [707.0, 11981.0], [705.0, 6103.0], [719.0, 6395.5], [717.0, 6099.0], [715.0, 6398.0], [713.0, 6695.0], [727.0, 6096.0], [725.0, 6097.0], [763.0, 22962.0], [755.0, 18485.0], [767.0, 6041.0], [765.0, 6638.5], [751.0, 10031.0], [737.0, 6687.0], [739.0, 22995.0], [741.0, 6077.0], [749.0, 11949.0], [747.0, 6071.0], [745.0, 6073.0], [759.0, 6046.0], [757.0, 11925.0], [797.0, 13943.0], [787.0, 22948.0], [799.0, 13944.0], [785.0, 9075.666666666666], [793.0, 6624.0], [775.0, 6039.0], [771.0, 8979.5], [769.0, 6636.0], [781.0, 10597.4], [777.0, 23931.0], [791.0, 13957.0], [789.0, 6625.0], [829.0, 6557.0], [831.0, 14717.0], [827.0, 14719.0], [815.0, 6569.0], [801.0, 5994.0], [807.0, 5992.0], [805.0, 9230.0], [813.0, 5976.0], [811.0, 5985.0], [823.0, 10227.5], [821.0, 10229.0], [819.0, 6268.5], [817.0, 6569.0], [859.0, 23818.0], [861.0, 6514.0], [863.0, 11798.5], [849.0, 23830.0], [851.0, 6528.0], [837.0, 9183.0], [833.0, 6544.0], [845.0, 6536.0], [841.0, 6538.0], [855.0, 23821.0], [853.0, 6526.0], [867.0, 13845.0], [893.0, 5697.0], [883.0, 22023.0], [895.0, 5697.0], [879.0, 5702.0], [869.0, 22076.0], [871.0, 5109.0], [877.0, 5107.0], [875.0, 5107.5], [873.0, 5108.0], [887.0, 22022.0], [881.0, 22996.0], [927.0, 5685.0], [913.0, 8134.0], [923.0, 13848.0], [921.0, 8180.5], [897.0, 5696.0], [911.0, 5691.0], [919.0, 5687.0], [915.0, 5688.0], [955.0, 12985.0], [957.0, 5053.0], [959.0, 13809.5], [945.0, 21982.0], [943.0, 22958.0], [931.0, 14332.5], [941.0, 9187.0], [937.0, 10175.8], [949.0, 12987.0], [947.0, 9324.0], [985.0, 21927.0], [991.0, 21221.0], [977.0, 8260.0], [987.0, 5604.0], [975.0, 21941.0], [961.0, 5630.0], [967.0, 5626.0], [965.0, 5627.0], [973.0, 12952.0], [971.0, 5624.0], [969.0, 22923.0], [983.0, 13767.0], [981.0, 12949.0], [979.0, 21940.0], [995.0, 19066.0], [1023.0, 6925.0], [1009.0, 6930.0], [1021.0, 3251.0], [993.0, 20076.0], [997.0, 17689.0], [999.0, 6932.0], [1005.0, 3256.0], [1003.0, 3255.0], [1001.0, 6933.0], [1015.0, 3254.0], [1011.0, 13481.0], [1078.0, 3211.0], [1082.0, 3208.0], [1086.0, 3190.0], [1058.0, 5063.5], [1054.0, 3228.6666666666665], [1030.0, 5085.5], [1026.0, 6924.0], [1038.0, 3245.3333333333335], [1050.0, 3230.0], [1046.0, 3236.0], [1042.0, 3238.0], [1066.0, 5052.5], [1062.0, 3222.0], [1098.0, 6039.0], [1150.0, 2324.0], [1122.0, 5964.0], [1138.0, 4228.666666666667], [1118.0, 4066.6666666666665], [1090.0, 5025.5], [1094.0, 3185.5], [1102.0, 6020.0], [1114.0, 3117.0], [1110.0, 4955.5], [1106.0, 3119.0], [1134.0, 2327.0], [1130.0, 3099.5], [1126.0, 3102.0], [1202.0, 2299.0], [1214.0, 5043.0], [1210.0, 5054.0], [1206.0, 5897.0], [1158.0, 2893.8], [1154.0, 5177.0], [1166.0, 4156.5], [1162.0, 5177.0], [1170.0, 2318.0], [1190.0, 5166.0], [1266.0, 7970.0], [1278.0, 16839.0], [1250.0, 4010.0], [1274.0, 3126.0], [1230.0, 4995.0], [1222.0, 5034.0], [1246.0, 4014.0], [1238.0, 4934.0], [1258.0, 9987.5], [1290.0, 3120.0], [1330.0, 12767.0], [1338.0, 7653.0], [1334.0, 3085.0], [1286.0, 3122.0], [1282.0, 9981.5], [1306.0, 9043.0], [1302.0, 15902.0], [1326.0, 16802.0], [1322.0, 9949.0], [1394.0, 16423.0], [1406.0, 2451.0], [1378.0, 16757.0], [1382.0, 16757.5], [1386.0, 17443.5], [1398.0, 2452.0], [1358.0, 16770.0], [1350.0, 3063.0], [1346.0, 18217.0], [1366.0, 15596.5], [1362.0, 16765.0], [1390.0, 18150.0], [1458.0, 7656.0], [1466.0, 2413.0], [1442.0, 11653.666666666668], [1462.0, 2415.0], [1422.0, 2440.0], [1414.0, 2448.0], [1410.0, 2450.0], [1438.0, 16265.5], [1434.0, 2435.0], [1430.0, 2436.0], [1426.0, 2438.0], [1454.0, 2431.0], [1450.0, 9810.5], [1446.0, 9347.0], [1526.0, 2345.0], [1530.0, 12181.0], [1502.0, 2378.5], [1478.0, 2399.0], [1482.0, 2398.0], [1498.0, 16212.0], [1490.0, 2389.0], [1514.0, 10208.0], [1510.0, 2367.0], [1506.0, 16206.0], [1590.0, 1119.0], [1574.0, 1129.0], [1598.0, 1114.0], [1570.0, 1130.0], [1586.0, 1121.6666666666667], [1550.0, 1310.5], [1542.0, 1311.0], [1562.0, 1280.0], [1558.0, 1291.0], [1554.0, 1297.0], [1582.0, 1123.6666666666667], [1578.0, 1125.0], [1654.0, 1137.5], [1634.0, 2079.0], [1638.0, 2071.0], [1662.0, 1136.0], [1626.0, 2081.0], [1610.0, 1072.0], [1614.0, 1062.0], [1622.0, 1058.0], [1618.0, 1060.0], [1722.0, 1080.0], [1698.0, 1113.0], [1702.0, 1110.0], [1706.0, 1108.5], [1718.0, 1089.5], [1674.0, 1127.3333333333333], [1678.0, 1123.0], [1690.0, 1114.0], [1710.0, 1101.0], [1786.0, 1137.0], [1782.0, 36177.5], [1762.0, 11371.0], [1766.0, 1475.0], [1770.0, 1473.6666666666667], [1774.0, 1472.6666666666667], [1790.0, 1130.0], [1738.0, 35377.0], [1758.0, 1763.0], [1754.0, 1770.0], [1750.0, 71228.0], [1746.0, 1781.0], [1850.0, 1717.0], [1826.0, 1754.0], [1838.0, 1748.6666666666667], [1854.0, 1709.0], [1846.0, 1737.0], [1794.0, 1438.0], [1798.0, 1437.0], [1802.0, 1765.0], [1806.0, 1764.0], [1822.0, 1758.0], [1818.0, 1761.0], [1914.0, 2127.5], [1910.0, 2142.0], [1918.0, 2118.0], [1890.0, 2166.0], [1898.0, 2157.5], [1902.0, 2147.0], [1906.0, 2143.5], [1870.0, 95.0], [1862.0, 1052.0], [1858.0, 1703.5], [1886.0, 2166.0], [1882.0, 2167.5], [1878.0, 2169.5], [1874.0, 93.0], [1954.0, 116.21428571428571], [1942.0, 117.0], [2042.0, 1142.0], [2022.0, 98.25], [2026.0, 49.0], [2030.0, 49.25], [2038.0, 1143.0], [2014.0, 108.33333333333333], [2010.0, 108.0], [2002.0, 109.0], [2172.0, 1690.0], [2116.0, 1273.0], [2132.0, 1230.5], [2140.0, 1216.0], [2164.0, 1734.6666666666667], [2156.0, 1041.5], [2148.0, 6334.0], [2076.0, 1110.5], [2068.0, 1117.5], [2060.0, 1128.0], [2108.0, 1801.0], [2100.0, 1331.0], [2092.0, 1055.0], [2084.0, 1090.0], [2284.0, 1220.0], [2292.0, 1666.0], [2260.0, 77.0], [2276.0, 54.0], [2188.0, 1738.0], [2180.0, 1748.0], [2420.0, 67.75], [2388.0, 80.0], [2396.0, 72.0], [2428.0, 67.0], [2332.0, 1137.0], [2324.0, 1144.0], [2308.0, 1657.0], [2364.0, 1110.0], [2356.0, 1113.0], [2348.0, 1121.0], [2540.0, 1140.6666666666667], [2548.0, 1136.0], [2508.0, 2094.0], [2524.0, 2083.0], [2532.0, 3369.0], [2492.0, 129.0], [2444.0, 49.5], [2452.0, 39.0], [2484.0, 20.0], [2660.0, 1094.0], [2676.0, 1072.0], [2628.0, 1426.0], [2668.0, 1086.0], [2580.0, 1113.0], [2572.0, 1119.0], [2620.0, 1428.0], [2596.0, 1092.0], [2708.0, 1161.0], [2812.0, 97.00000000000001], [2756.0, 1162.5], [2764.0, 4200.0], [2692.0, 1057.0], [2716.0, 1144.0], [2748.0, 1168.0], [2732.0, 1193.0], [2724.0, 382.0], [2916.0, 119.0], [2900.0, 127.6], [2924.0, 110.0], [2828.0, 95.0], [2836.0, 94.71428571428571], [2956.0, 104.0], [2149.0, 6333.0], [2157.0, 1695.0], [2117.0, 1272.0], [2125.0, 1234.0], [2133.0, 1228.0], [2077.0, 1110.0], [2061.0, 1129.0], [2053.0, 1136.5], [2109.0, 1799.0], [2093.0, 8360.0], [2085.0, 1088.0], [2141.0, 1213.0], [2277.0, 31.0], [2261.0, 77.5], [2197.0, 1782.5], [2189.0, 1676.0], [2181.0, 1686.0], [2405.0, 69.5], [2389.0, 79.89999999999998], [2309.0, 1657.0], [2365.0, 1107.0], [2341.0, 1131.0], [2549.0, 1136.0], [2501.0, 124.0], [2517.0, 2091.0], [2525.0, 2076.0], [2557.0, 1130.5], [2533.0, 3361.0], [2437.0, 50.5], [2453.0, 39.0], [2485.0, 20.0], [2477.0, 141.5], [2669.0, 1084.0], [2629.0, 1422.0], [2637.0, 1402.6666666666667], [2645.0, 1108.0], [2653.0, 1102.0], [2685.0, 1065.0], [2661.0, 1093.0], [2589.0, 1099.0], [2565.0, 1123.3333333333333], [2621.0, 1427.0], [2613.0, 1055.0], [2605.0, 1080.5], [2709.0, 1162.0], [2813.0, 96.0], [2757.0, 1162.0], [2765.0, 4199.5], [2701.0, 1165.3333333333333], [2717.0, 1141.0], [2749.0, 1168.0], [2741.0, 1185.0], [2733.0, 1192.0], [2725.0, 107.0], [2941.0, 1677.7499999999998], [2893.0, 129.0], [2901.0, 127.0], [2909.0, 125.66666666666667], [2877.0, 131.33333333333334], [2821.0, 95.0], [2829.0, 94.0], [2837.0, 94.5], [2845.0, 93.66666666666667], [2853.0, 92.0], [2965.0, 1151.0000000000002], [2973.0, 95.0], [2997.0, 2172.3333333333335], [2981.0, 3234.0], [1039.0, 6914.0], [1075.0, 5049.0], [1059.0, 3223.0], [1083.0, 5046.0], [1035.0, 7880.333333333334], [1027.0, 3248.0], [1055.0, 3227.0], [1051.0, 3231.0], [1047.0, 3232.0], [1043.0, 3237.5], [1067.0, 3215.0], [1063.0, 3222.0], [1091.0, 3186.0], [1143.0, 2325.5], [1119.0, 5967.0], [1103.0, 3120.0], [1115.0, 3117.0], [1131.0, 5953.0], [1127.0, 5956.0], [1123.0, 5961.0], [1215.0, 5861.0], [1199.0, 5166.0], [1163.0, 5174.0], [1167.0, 2320.0], [1251.0, 4009.0], [1271.0, 10697.5], [1263.0, 16844.0], [1247.0, 4011.0], [1219.0, 5039.0], [1223.0, 5034.0], [1227.0, 4996.0], [1243.0, 4016.0], [1239.0, 4931.0], [1339.0, 3080.0], [1315.0, 9965.0], [1335.0, 18225.0], [1331.0, 14944.0], [1291.0, 16833.0], [1287.0, 16836.0], [1283.0, 3123.0], [1319.0, 13806.0], [1359.0, 3053.0], [1383.0, 16756.0], [1407.0, 2451.0], [1403.0, 2452.0], [1351.0, 3062.0], [1347.0, 3075.0], [1375.0, 16756.0], [1367.0, 16759.0], [1391.0, 18148.0], [1387.0, 18156.0], [1423.0, 18124.0], [1467.0, 2402.0], [1471.0, 2402.0], [1459.0, 2428.0], [1419.0, 2442.0], [1415.0, 18131.0], [1411.0, 2449.0], [1443.0, 2433.0], [1439.0, 2434.0], [1435.0, 18120.0], [1431.0, 2436.0], [1523.0, 12191.0], [1535.0, 18025.0], [1507.0, 2370.0], [1527.0, 2345.0], [1487.0, 2393.0], [1483.0, 2396.0], [1475.0, 7629.0], [1499.0, 2379.0], [1491.0, 2389.0], [1519.0, 2363.0], [1515.0, 2365.0], [1587.0, 1121.0], [1599.0, 1112.0], [1595.0, 1113.0], [1591.0, 1117.0], [1551.0, 1304.0], [1543.0, 1311.5], [1563.0, 15401.0], [1555.0, 1296.0], [1583.0, 1123.0], [1579.0, 1124.0], [1651.0, 1139.0], [1635.0, 2077.5], [1663.0, 1134.0], [1647.0, 2052.5], [1659.0, 1136.3333333333333], [1611.0, 1071.0], [1607.0, 1092.0], [1603.0, 1111.6666666666667], [1631.0, 2080.0], [1627.0, 2081.0], [1623.0, 1056.0], [1619.0, 1059.0], [1727.0, 1075.3333333333333], [1707.0, 1109.0], [1667.0, 1132.3333333333333], [1671.0, 1131.5], [1679.0, 1120.0], [1683.0, 1117.0], [1711.0, 1094.0], [1779.0, 1458.5], [1791.0, 1128.0], [1767.0, 1474.0], [1775.0, 1471.0], [1783.0, 1445.0], [1759.0, 1761.0], [1731.0, 1054.0], [1735.0, 12459.0], [1739.0, 68968.0], [1743.0, 46572.0], [1751.0, 71229.0], [1747.0, 1781.0], [1847.0, 1719.0], [1843.0, 1741.0], [1851.0, 1712.0], [1855.0, 1704.0], [1831.0, 1752.0], [1835.0, 1749.0], [1839.0, 1745.0], [1823.0, 1757.0], [1799.0, 1436.0], [1807.0, 1454.5], [1819.0, 1760.0], [1815.0, 1763.0], [1811.0, 1763.0], [1911.0, 2142.0], [1895.0, 2159.5], [1915.0, 2125.0], [1899.0, 2156.0], [1903.0, 2145.0], [1871.0, 94.0], [1867.0, 105.0], [1863.0, 1051.0], [1859.0, 10374.0], [1887.0, 2166.0], [1883.0, 2168.0], [1879.0, 2169.0], [1875.0, 92.0], [1951.0, 116.66666666666667], [1947.0, 117.0], [2047.0, 1141.0], [2043.0, 1143.0], [2019.0, 100.0], [2027.0, 49.0], [2031.0, 1752.0], [2035.0, 1143.0], [1995.0, 109.28571428571429], [2007.0, 108.14285714285715], [2003.0, 109.0], [2166.0, 1723.75], [2158.0, 1815.0], [2174.0, 1690.0], [2118.0, 1270.0], [2126.0, 1233.5], [2134.0, 1228.0], [2062.0, 1125.0], [2054.0, 1135.0], [2110.0, 1446.0], [2102.0, 1330.5], [2094.0, 8359.0], [2086.0, 1086.0], [2294.0, 1666.0], [2302.0, 1664.0], [2262.0, 77.57142857142857], [2270.0, 62.0], [2286.0, 1185.5], [2198.0, 1777.0], [2190.0, 1797.0], [2182.0, 1804.0], [2406.0, 69.5], [2430.0, 66.8], [2390.0, 79.0], [2398.0, 71.0], [2334.0, 1137.0], [2326.0, 1142.0], [2310.0, 1657.0], [2358.0, 1111.0], [2350.0, 1118.0], [2342.0, 1129.0], [2510.0, 2093.0], [2558.0, 1129.0], [2526.0, 2074.0], [2446.0, 40.0], [2454.0, 40.0], [2478.0, 141.0], [2470.0, 142.0], [2678.0, 1069.0], [2630.0, 1420.0], [2638.0, 1402.0], [2646.0, 1106.0], [2686.0, 1064.0], [2670.0, 1084.0], [2590.0, 1097.5], [2582.0, 1103.0], [2574.0, 1114.0], [2566.0, 1122.0], [2622.0, 1427.0], [2614.0, 2897.0], [2702.0, 1166.0], [2806.0, 97.0], [2814.0, 96.0], [2758.0, 1160.0], [2766.0, 1057.0], [2750.0, 1167.0], [2710.0, 1161.0], [2718.0, 1132.0], [2742.0, 1184.0], [2734.0, 1192.0], [2726.0, 107.0], [2934.0, 106.33333333333333], [2902.0, 126.75], [2910.0, 125.0], [2942.0, 1677.75], [2838.0, 95.0], [2846.0, 94.0], [2870.0, 24.0], [2854.0, 90.0], [2966.0, 103.0], [2998.0, 3218.0], [2982.0, 3234.0], [2079.0, 1107.0], [2167.0, 1692.0], [2119.0, 1270.0], [2127.0, 1233.0], [2135.0, 1227.0], [2151.0, 1047.0], [2071.0, 1116.0], [2063.0, 1124.0], [2055.0, 1133.0], [2111.0, 1276.0], [2103.0, 1329.0], [2087.0, 1084.0], [2143.0, 1211.0], [2295.0, 1665.0], [2303.0, 1664.0], [2271.0, 64.0], [2263.0, 77.74999999999999], [2287.0, 1183.0], [2183.0, 1682.0], [2423.0, 67.75], [2335.0, 1135.0], [2311.0, 1655.0], [2367.0, 1105.5], [2359.0, 1112.0], [2343.0, 1129.0], [2559.0, 1129.0], [2551.0, 1135.0], [2503.0, 124.5], [2527.0, 2076.0], [2543.0, 1140.0], [2487.0, 115.8], [2479.0, 111.25], [2679.0, 1069.5], [2687.0, 1061.0], [2639.0, 1399.0], [2647.0, 1106.0], [2655.0, 1101.0], [2671.0, 1082.0], [2583.0, 1100.0], [2567.0, 1122.0], [2623.0, 1427.0], [2615.0, 2896.0], [2607.0, 1079.0], [2599.0, 1090.0], [2807.0, 98.0], [2815.0, 95.0], [2695.0, 1168.0], [2711.0, 1161.0], [2719.0, 1131.0], [2743.0, 1179.0], [2735.0, 1191.0], [2767.0, 4194.0], [2935.0, 107.0], [2943.0, 3245.0], [2895.0, 128.33333333333334], [2903.0, 126.0], [2919.0, 110.66666666666667], [2831.0, 94.5], [2839.0, 94.4], [2847.0, 94.2], [2959.0, 889.75], [2991.0, 2185.0], [2983.0, 93.0], [1.0, 73923.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[2888.293930348265, 8597.335074626833]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 3000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 42.0, "minX": 1.68287274E12, "maxY": 113070.18333333333, "series": [{"data": [[1.68287304E12, 13193.133333333333], [1.68287274E12, 53875.2], [1.68287292E12, 98780.2], [1.6828731E12, 61.18333333333333], [1.6828728E12, 98854.18333333333], [1.68287298E12, 91700.8], [1.68287286E12, 113070.18333333333]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.68287304E12, 10382.4], [1.68287274E12, 39614.4], [1.68287292E12, 69535.2], [1.6828731E12, 42.0], [1.6828728E12, 72609.6], [1.68287298E12, 65847.6], [1.68287286E12, 79648.8]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6828731E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 4033.5365480290943, "minX": 1.68287274E12, "maxY": 72713.0, "series": [{"data": [[1.68287304E12, 15901.794498381874], [1.68287274E12, 8294.487701441882], [1.68287292E12, 12798.47813481517], [1.6828731E12, 72713.0], [1.6828728E12, 11042.670869967658], [1.68287298E12, 4033.5365480290943], [1.68287286E12, 5638.087006960547]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6828731E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 4033.5267253476204, "minX": 1.68287274E12, "maxY": 72713.0, "series": [{"data": [[1.68287304E12, 15901.786407766996], [1.68287274E12, 8294.453350296853], [1.68287292E12, 12798.467383425963], [1.6828731E12, 72713.0], [1.6828728E12, 11042.642873669573], [1.68287298E12, 4033.5267253476204], [1.68287286E12, 5638.071503902136]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6828731E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.27588996763754003, "minX": 1.68287274E12, "maxY": 7310.764435854067, "series": [{"data": [[1.68287304E12, 0.27588996763754003], [1.68287274E12, 2.4378710771840555], [1.68287292E12, 7310.764435854067], [1.6828731E12, 0.6], [1.6828728E12, 1045.986117538177], [1.68287298E12, 624.6334991708121], [1.68287286E12, 3585.2849609786954]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6828731E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 8.0, "minX": 1.68287274E12, "maxY": 210034.0, "series": [{"data": [[1.68287304E12, 70897.0], [1.68287274E12, 50816.0], [1.68287292E12, 198821.0], [1.6828731E12, 73923.0], [1.6828728E12, 100164.0], [1.68287298E12, 210034.0], [1.68287286E12, 151977.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.68287304E12, 31202.0], [1.68287274E12, 18487.0], [1.68287292E12, 16890.0], [1.6828731E12, 73923.0], [1.6828728E12, 14708.0], [1.68287298E12, 8646.0], [1.68287286E12, 6739.700000000001]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.68287304E12, 66091.40999999989], [1.68287274E12, 50692.83], [1.68287292E12, 173278.84], [1.6828731E12, 73923.0], [1.6828728E12, 100085.0], [1.68287298E12, 61476.2], [1.68287286E12, 145873.74000000002]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.68287304E12, 41222.45], [1.68287274E12, 23962.15], [1.68287292E12, 100140.0], [1.6828731E12, 73923.0], [1.6828728E12, 68090.25], [1.68287298E12, 25441.0], [1.68287286E12, 12342.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.68287304E12, 2086.0], [1.68287274E12, 20.0], [1.68287292E12, 20.0], [1.6828731E12, 71904.0], [1.6828728E12, 9.0], [1.68287298E12, 12.0], [1.68287286E12, 8.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.68287304E12, 13577.0], [1.68287274E12, 6215.0], [1.68287292E12, 116.0], [1.6828731E12, 72915.0], [1.6828728E12, 5943.0], [1.68287298E12, 103.0], [1.68287286E12, 100.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6828731E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 67.5, "minX": 1.0, "maxY": 100049.0, "series": [{"data": [[2.0, 51825.0], [3.0, 1218.0], [4.0, 40934.5], [5.0, 5933.0], [6.0, 2169.5], [8.0, 1686.0], [9.0, 12068.0], [10.0, 4182.5], [11.0, 21480.0], [12.0, 5501.5], [13.0, 4921.0], [14.0, 31184.0], [15.0, 7209.0], [16.0, 5342.5], [17.0, 27304.0], [18.0, 14716.5], [19.0, 8983.0], [20.0, 18026.5], [22.0, 4786.5], [25.0, 2080.0], [27.0, 2726.0], [28.0, 100018.0], [29.0, 16757.0], [31.0, 5041.5], [32.0, 5920.0], [34.0, 1161.0], [41.0, 6586.5], [40.0, 67.5], [42.0, 34831.5], [44.0, 22118.5], [48.0, 1771.0], [55.0, 35030.0], [60.0, 584.0], [63.0, 1128.0], [71.0, 3464.5], [74.0, 89.0], [73.0, 13749.0], [75.0, 23201.0], [79.0, 14668.0], [77.0, 1426.0], [78.0, 31202.0], [80.0, 5740.5], [82.0, 1116.5], [83.0, 18130.0], [84.0, 1117.5], [87.0, 3248.0], [91.0, 108.0], [99.0, 8202.0], [97.0, 10806.0], [103.0, 117.0], [104.0, 84.0], [109.0, 13594.0], [113.0, 1081.0], [123.0, 7534.0], [121.0, 7600.5], [127.0, 2295.5], [125.0, 1966.5], [134.0, 99.0], [133.0, 127.0], [131.0, 1181.0], [135.0, 1220.0], [132.0, 109.0], [128.0, 91.5], [130.0, 107.0], [129.0, 1235.0], [138.0, 91.5], [137.0, 1558.0], [136.0, 103.0], [140.0, 78.0], [139.0, 587.0], [148.0, 106.5], [151.0, 90.0], [158.0, 13072.5], [157.0, 2164.0], [167.0, 6246.0], [169.0, 3305.0], [171.0, 115.0], [179.0, 100.0], [183.0, 6542.0], [190.0, 9287.0], [184.0, 102.0], [195.0, 6725.0], [206.0, 16891.0], [212.0, 7695.0], [215.0, 125.0], [221.0, 4829.0], [234.0, 90.0], [236.0, 94.0], [241.0, 2151.0], [249.0, 12950.0], [268.0, 90.0], [264.0, 6155.0], [262.0, 105.0], [267.0, 95.0], [266.0, 111.0], [270.0, 91.0], [269.0, 93.0], [259.0, 111.0], [263.0, 93.0], [272.0, 92.0], [280.0, 5934.0], [282.0, 10105.0], [274.0, 76.0], [285.0, 87.0], [297.0, 144.0], [293.0, 100.0], [292.0, 113.0], [311.0, 8853.0], [307.0, 94.0], [317.0, 101.0], [360.0, 85.0], [366.0, 8344.5], [374.0, 5735.5], [376.0, 140.0], [383.0, 4424.0], [379.0, 6866.0], [381.0, 114.0], [399.0, 135.0], [398.0, 7092.5], [393.0, 88.0], [390.0, 96.5], [408.0, 78.0], [405.0, 86.0], [414.0, 128.0], [402.0, 87.0], [425.0, 5893.0], [427.0, 6351.0], [421.0, 117.0], [459.0, 116.0], [454.0, 4396.5], [453.0, 101.0], [478.0, 9504.0], [505.0, 7460.0], [518.0, 1631.0], [634.0, 12624.5], [788.0, 11927.0], [808.0, 6278.0], [1072.0, 6557.0], [1.0, 100049.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1072.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 67.5, "minX": 1.0, "maxY": 100049.0, "series": [{"data": [[2.0, 51825.0], [3.0, 1208.0], [4.0, 40934.5], [5.0, 5933.0], [6.0, 2169.5], [8.0, 1686.0], [9.0, 12068.0], [10.0, 4182.5], [11.0, 21480.0], [12.0, 5501.5], [13.0, 4921.0], [14.0, 31184.0], [15.0, 7209.0], [16.0, 5342.5], [17.0, 27304.0], [18.0, 14716.5], [19.0, 8983.0], [20.0, 18026.5], [22.0, 4786.5], [25.0, 2080.0], [27.0, 2726.0], [28.0, 100018.0], [29.0, 16757.0], [31.0, 5041.5], [32.0, 5920.0], [34.0, 1161.0], [41.0, 6586.5], [40.0, 67.5], [42.0, 34831.5], [44.0, 22118.5], [48.0, 1771.0], [55.0, 35030.0], [60.0, 584.0], [63.0, 1128.0], [71.0, 3464.5], [74.0, 88.0], [73.0, 13749.0], [75.0, 23201.0], [79.0, 14668.0], [77.0, 1426.0], [78.0, 31202.0], [80.0, 5740.5], [82.0, 1116.5], [83.0, 18130.0], [84.0, 1117.5], [87.0, 3248.0], [91.0, 108.0], [99.0, 8202.0], [97.0, 10806.0], [103.0, 117.0], [104.0, 84.0], [109.0, 13594.0], [113.0, 1081.0], [123.0, 7534.0], [121.0, 7600.5], [127.0, 2295.5], [125.0, 1966.5], [134.0, 99.0], [133.0, 127.0], [131.0, 1181.0], [135.0, 1220.0], [132.0, 109.0], [128.0, 91.5], [130.0, 107.0], [129.0, 1235.0], [138.0, 91.5], [137.0, 1558.0], [136.0, 103.0], [140.0, 78.0], [139.0, 587.0], [148.0, 106.5], [151.0, 90.0], [158.0, 13072.5], [157.0, 2164.0], [167.0, 6246.0], [169.0, 3305.0], [171.0, 115.0], [179.0, 100.0], [183.0, 6542.0], [190.0, 9287.0], [184.0, 102.0], [195.0, 6725.0], [206.0, 16891.0], [212.0, 7695.0], [215.0, 125.0], [221.0, 4829.0], [234.0, 90.0], [236.0, 94.0], [241.0, 2151.0], [249.0, 12950.0], [268.0, 90.0], [264.0, 6155.0], [262.0, 105.0], [267.0, 95.0], [266.0, 111.0], [270.0, 91.0], [269.0, 93.0], [259.0, 111.0], [263.0, 93.0], [272.0, 92.0], [280.0, 5934.0], [282.0, 10105.0], [274.0, 76.0], [285.0, 87.0], [297.0, 144.0], [293.0, 100.0], [292.0, 113.0], [311.0, 8853.0], [307.0, 94.0], [317.0, 101.0], [360.0, 85.0], [366.0, 8344.5], [374.0, 5735.5], [376.0, 140.0], [383.0, 4423.0], [379.0, 6866.0], [381.0, 114.0], [399.0, 135.0], [398.0, 7092.5], [393.0, 88.0], [390.0, 96.5], [408.0, 78.0], [405.0, 86.0], [414.0, 128.0], [402.0, 87.0], [425.0, 5893.0], [427.0, 6351.0], [421.0, 117.0], [459.0, 116.0], [454.0, 4396.5], [453.0, 101.0], [478.0, 9504.0], [505.0, 7460.0], [518.0, 1631.0], [634.0, 12624.5], [788.0, 11927.0], [808.0, 6278.0], [1072.0, 6557.0], [1.0, 100049.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1072.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 4.466666666666667, "minX": 1.68287274E12, "maxY": 140.7, "series": [{"data": [[1.68287304E12, 4.466666666666667], [1.68287274E12, 116.13333333333334], [1.68287292E12, 138.46666666666667], [1.6828728E12, 138.46666666666667], [1.68287298E12, 131.76666666666668], [1.68287286E12, 140.7]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68287304E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.08333333333333333, "minX": 1.68287274E12, "maxY": 158.03333333333333, "series": [{"data": [[1.68287304E12, 20.6], [1.68287274E12, 78.6], [1.68287292E12, 137.96666666666667], [1.6828731E12, 0.08333333333333333], [1.6828728E12, 144.06666666666666], [1.68287298E12, 130.65], [1.68287286E12, 158.03333333333333]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6828731E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.08333333333333333, "minX": 1.68287274E12, "maxY": 158.03333333333333, "series": [{"data": [[1.68287304E12, 20.6], [1.68287274E12, 78.6], [1.68287292E12, 137.96666666666667], [1.6828731E12, 0.08333333333333333], [1.6828728E12, 144.06666666666666], [1.68287298E12, 130.65], [1.68287286E12, 158.03333333333333]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6828731E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.08333333333333333, "minX": 1.68287274E12, "maxY": 158.03333333333333, "series": [{"data": [[1.68287304E12, 20.6], [1.68287274E12, 78.6], [1.68287292E12, 137.96666666666667], [1.6828731E12, 0.08333333333333333], [1.6828728E12, 144.06666666666666], [1.68287298E12, 130.65], [1.68287286E12, 158.03333333333333]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6828731E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

