/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 3.0, "minX": 0.0, "maxY": 215104.0, "series": [{"data": [[0.0, 3.0], [0.1, 5.0], [0.2, 6.0], [0.3, 6.0], [0.4, 7.0], [0.5, 7.0], [0.6, 8.0], [0.7, 8.0], [0.8, 9.0], [0.9, 9.0], [1.0, 9.0], [1.1, 10.0], [1.2, 10.0], [1.3, 10.0], [1.4, 11.0], [1.5, 11.0], [1.6, 11.0], [1.7, 12.0], [1.8, 12.0], [1.9, 12.0], [2.0, 13.0], [2.1, 13.0], [2.2, 13.0], [2.3, 14.0], [2.4, 14.0], [2.5, 14.0], [2.6, 15.0], [2.7, 15.0], [2.8, 15.0], [2.9, 15.0], [3.0, 16.0], [3.1, 16.0], [3.2, 17.0], [3.3, 17.0], [3.4, 18.0], [3.5, 18.0], [3.6, 18.0], [3.7, 19.0], [3.8, 19.0], [3.9, 20.0], [4.0, 20.0], [4.1, 21.0], [4.2, 21.0], [4.3, 22.0], [4.4, 23.0], [4.5, 23.0], [4.6, 24.0], [4.7, 25.0], [4.8, 25.0], [4.9, 26.0], [5.0, 26.0], [5.1, 27.0], [5.2, 28.0], [5.3, 29.0], [5.4, 29.0], [5.5, 30.0], [5.6, 30.0], [5.7, 31.0], [5.8, 31.0], [5.9, 32.0], [6.0, 33.0], [6.1, 33.0], [6.2, 33.0], [6.3, 34.0], [6.4, 34.0], [6.5, 35.0], [6.6, 36.0], [6.7, 36.0], [6.8, 37.0], [6.9, 37.0], [7.0, 38.0], [7.1, 39.0], [7.2, 39.0], [7.3, 39.0], [7.4, 40.0], [7.5, 40.0], [7.6, 41.0], [7.7, 41.0], [7.8, 42.0], [7.9, 42.0], [8.0, 42.0], [8.1, 43.0], [8.2, 43.0], [8.3, 44.0], [8.4, 44.0], [8.5, 44.0], [8.6, 45.0], [8.7, 45.0], [8.8, 45.0], [8.9, 46.0], [9.0, 46.0], [9.1, 46.0], [9.2, 47.0], [9.3, 47.0], [9.4, 47.0], [9.5, 48.0], [9.6, 48.0], [9.7, 49.0], [9.8, 49.0], [9.9, 49.0], [10.0, 50.0], [10.1, 50.0], [10.2, 50.0], [10.3, 51.0], [10.4, 51.0], [10.5, 51.0], [10.6, 52.0], [10.7, 52.0], [10.8, 52.0], [10.9, 53.0], [11.0, 53.0], [11.1, 54.0], [11.2, 54.0], [11.3, 55.0], [11.4, 55.0], [11.5, 55.0], [11.6, 56.0], [11.7, 56.0], [11.8, 56.0], [11.9, 57.0], [12.0, 57.0], [12.1, 58.0], [12.2, 58.0], [12.3, 59.0], [12.4, 59.0], [12.5, 60.0], [12.6, 60.0], [12.7, 60.0], [12.8, 61.0], [12.9, 61.0], [13.0, 62.0], [13.1, 62.0], [13.2, 63.0], [13.3, 63.0], [13.4, 63.0], [13.5, 64.0], [13.6, 64.0], [13.7, 65.0], [13.8, 65.0], [13.9, 65.0], [14.0, 66.0], [14.1, 66.0], [14.2, 66.0], [14.3, 67.0], [14.4, 67.0], [14.5, 68.0], [14.6, 68.0], [14.7, 69.0], [14.8, 69.0], [14.9, 69.0], [15.0, 70.0], [15.1, 70.0], [15.2, 71.0], [15.3, 71.0], [15.4, 72.0], [15.5, 72.0], [15.6, 72.0], [15.7, 73.0], [15.8, 73.0], [15.9, 74.0], [16.0, 74.0], [16.1, 74.0], [16.2, 75.0], [16.3, 75.0], [16.4, 76.0], [16.5, 76.0], [16.6, 76.0], [16.7, 77.0], [16.8, 77.0], [16.9, 78.0], [17.0, 78.0], [17.1, 79.0], [17.2, 79.0], [17.3, 80.0], [17.4, 80.0], [17.5, 80.0], [17.6, 80.0], [17.7, 81.0], [17.8, 81.0], [17.9, 82.0], [18.0, 82.0], [18.1, 83.0], [18.2, 83.0], [18.3, 83.0], [18.4, 84.0], [18.5, 84.0], [18.6, 85.0], [18.7, 85.0], [18.8, 85.0], [18.9, 86.0], [19.0, 86.0], [19.1, 87.0], [19.2, 87.0], [19.3, 88.0], [19.4, 88.0], [19.5, 88.0], [19.6, 89.0], [19.7, 89.0], [19.8, 90.0], [19.9, 90.0], [20.0, 90.0], [20.1, 91.0], [20.2, 91.0], [20.3, 91.0], [20.4, 92.0], [20.5, 92.0], [20.6, 92.0], [20.7, 93.0], [20.8, 94.0], [20.9, 94.0], [21.0, 95.0], [21.1, 95.0], [21.2, 95.0], [21.3, 96.0], [21.4, 96.0], [21.5, 96.0], [21.6, 97.0], [21.7, 97.0], [21.8, 97.0], [21.9, 98.0], [22.0, 98.0], [22.1, 99.0], [22.2, 99.0], [22.3, 99.0], [22.4, 100.0], [22.5, 100.0], [22.6, 100.0], [22.7, 101.0], [22.8, 101.0], [22.9, 101.0], [23.0, 102.0], [23.1, 102.0], [23.2, 102.0], [23.3, 103.0], [23.4, 103.0], [23.5, 103.0], [23.6, 104.0], [23.7, 104.0], [23.8, 104.0], [23.9, 105.0], [24.0, 105.0], [24.1, 106.0], [24.2, 106.0], [24.3, 106.0], [24.4, 106.0], [24.5, 107.0], [24.6, 107.0], [24.7, 108.0], [24.8, 108.0], [24.9, 109.0], [25.0, 109.0], [25.1, 110.0], [25.2, 110.0], [25.3, 111.0], [25.4, 111.0], [25.5, 112.0], [25.6, 112.0], [25.7, 113.0], [25.8, 113.0], [25.9, 113.0], [26.0, 114.0], [26.1, 115.0], [26.2, 115.0], [26.3, 116.0], [26.4, 116.0], [26.5, 117.0], [26.6, 118.0], [26.7, 118.0], [26.8, 119.0], [26.9, 119.0], [27.0, 120.0], [27.1, 120.0], [27.2, 120.0], [27.3, 121.0], [27.4, 121.0], [27.5, 122.0], [27.6, 122.0], [27.7, 123.0], [27.8, 124.0], [27.9, 124.0], [28.0, 125.0], [28.1, 125.0], [28.2, 126.0], [28.3, 126.0], [28.4, 127.0], [28.5, 127.0], [28.6, 128.0], [28.7, 128.0], [28.8, 129.0], [28.9, 130.0], [29.0, 131.0], [29.1, 131.0], [29.2, 131.0], [29.3, 132.0], [29.4, 132.0], [29.5, 133.0], [29.6, 133.0], [29.7, 133.0], [29.8, 134.0], [29.9, 135.0], [30.0, 136.0], [30.1, 137.0], [30.2, 138.0], [30.3, 138.0], [30.4, 140.0], [30.5, 140.0], [30.6, 141.0], [30.7, 141.0], [30.8, 142.0], [30.9, 142.0], [31.0, 143.0], [31.1, 143.0], [31.2, 143.0], [31.3, 144.0], [31.4, 144.0], [31.5, 145.0], [31.6, 145.0], [31.7, 146.0], [31.8, 147.0], [31.9, 147.0], [32.0, 148.0], [32.1, 148.0], [32.2, 149.0], [32.3, 150.0], [32.4, 151.0], [32.5, 151.0], [32.6, 152.0], [32.7, 153.0], [32.8, 154.0], [32.9, 154.0], [33.0, 155.0], [33.1, 155.0], [33.2, 156.0], [33.3, 157.0], [33.4, 158.0], [33.5, 158.0], [33.6, 159.0], [33.7, 160.0], [33.8, 161.0], [33.9, 161.0], [34.0, 162.0], [34.1, 162.0], [34.2, 163.0], [34.3, 164.0], [34.4, 165.0], [34.5, 166.0], [34.6, 167.0], [34.7, 168.0], [34.8, 168.0], [34.9, 169.0], [35.0, 169.0], [35.1, 170.0], [35.2, 171.0], [35.3, 172.0], [35.4, 173.0], [35.5, 174.0], [35.6, 175.0], [35.7, 176.0], [35.8, 177.0], [35.9, 178.0], [36.0, 179.0], [36.1, 181.0], [36.2, 182.0], [36.3, 183.0], [36.4, 185.0], [36.5, 186.0], [36.6, 188.0], [36.7, 188.0], [36.8, 189.0], [36.9, 190.0], [37.0, 191.0], [37.1, 192.0], [37.2, 193.0], [37.3, 193.0], [37.4, 194.0], [37.5, 196.0], [37.6, 198.0], [37.7, 199.0], [37.8, 200.0], [37.9, 201.0], [38.0, 203.0], [38.1, 205.0], [38.2, 206.0], [38.3, 207.0], [38.4, 208.0], [38.5, 209.0], [38.6, 211.0], [38.7, 213.0], [38.8, 215.0], [38.9, 216.0], [39.0, 217.0], [39.1, 219.0], [39.2, 220.0], [39.3, 222.0], [39.4, 225.0], [39.5, 226.0], [39.6, 227.0], [39.7, 228.0], [39.8, 230.0], [39.9, 231.0], [40.0, 234.0], [40.1, 235.0], [40.2, 236.0], [40.3, 237.0], [40.4, 240.0], [40.5, 241.0], [40.6, 243.0], [40.7, 245.0], [40.8, 247.0], [40.9, 249.0], [41.0, 252.0], [41.1, 253.0], [41.2, 256.0], [41.3, 257.0], [41.4, 258.0], [41.5, 260.0], [41.6, 261.0], [41.7, 262.0], [41.8, 262.0], [41.9, 263.0], [42.0, 263.0], [42.1, 264.0], [42.2, 264.0], [42.3, 265.0], [42.4, 265.0], [42.5, 266.0], [42.6, 266.0], [42.7, 266.0], [42.8, 267.0], [42.9, 267.0], [43.0, 268.0], [43.1, 268.0], [43.2, 268.0], [43.3, 269.0], [43.4, 270.0], [43.5, 271.0], [43.6, 272.0], [43.7, 273.0], [43.8, 273.0], [43.9, 275.0], [44.0, 276.0], [44.1, 277.0], [44.2, 277.0], [44.3, 278.0], [44.4, 279.0], [44.5, 279.0], [44.6, 280.0], [44.7, 280.0], [44.8, 281.0], [44.9, 281.0], [45.0, 282.0], [45.1, 282.0], [45.2, 282.0], [45.3, 283.0], [45.4, 283.0], [45.5, 284.0], [45.6, 284.0], [45.7, 284.0], [45.8, 285.0], [45.9, 285.0], [46.0, 286.0], [46.1, 286.0], [46.2, 288.0], [46.3, 289.0], [46.4, 290.0], [46.5, 291.0], [46.6, 291.0], [46.7, 292.0], [46.8, 293.0], [46.9, 295.0], [47.0, 296.0], [47.1, 297.0], [47.2, 297.0], [47.3, 298.0], [47.4, 300.0], [47.5, 300.0], [47.6, 301.0], [47.7, 302.0], [47.8, 303.0], [47.9, 303.0], [48.0, 304.0], [48.1, 305.0], [48.2, 306.0], [48.3, 308.0], [48.4, 310.0], [48.5, 311.0], [48.6, 311.0], [48.7, 312.0], [48.8, 314.0], [48.9, 315.0], [49.0, 316.0], [49.1, 316.0], [49.2, 317.0], [49.3, 317.0], [49.4, 318.0], [49.5, 318.0], [49.6, 318.0], [49.7, 319.0], [49.8, 319.0], [49.9, 319.0], [50.0, 319.0], [50.1, 320.0], [50.2, 320.0], [50.3, 320.0], [50.4, 321.0], [50.5, 321.0], [50.6, 321.0], [50.7, 322.0], [50.8, 322.0], [50.9, 322.0], [51.0, 323.0], [51.1, 323.0], [51.2, 324.0], [51.3, 324.0], [51.4, 325.0], [51.5, 326.0], [51.6, 327.0], [51.7, 327.0], [51.8, 328.0], [51.9, 328.0], [52.0, 329.0], [52.1, 330.0], [52.2, 330.0], [52.3, 330.0], [52.4, 331.0], [52.5, 331.0], [52.6, 332.0], [52.7, 332.0], [52.8, 332.0], [52.9, 333.0], [53.0, 333.0], [53.1, 334.0], [53.2, 334.0], [53.3, 334.0], [53.4, 335.0], [53.5, 336.0], [53.6, 336.0], [53.7, 336.0], [53.8, 337.0], [53.9, 337.0], [54.0, 338.0], [54.1, 338.0], [54.2, 339.0], [54.3, 339.0], [54.4, 339.0], [54.5, 340.0], [54.6, 340.0], [54.7, 340.0], [54.8, 341.0], [54.9, 341.0], [55.0, 341.0], [55.1, 341.0], [55.2, 341.0], [55.3, 342.0], [55.4, 342.0], [55.5, 342.0], [55.6, 342.0], [55.7, 342.0], [55.8, 342.0], [55.9, 343.0], [56.0, 343.0], [56.1, 343.0], [56.2, 343.0], [56.3, 343.0], [56.4, 343.0], [56.5, 344.0], [56.6, 344.0], [56.7, 344.0], [56.8, 344.0], [56.9, 345.0], [57.0, 345.0], [57.1, 345.0], [57.2, 345.0], [57.3, 345.0], [57.4, 346.0], [57.5, 346.0], [57.6, 346.0], [57.7, 346.0], [57.8, 347.0], [57.9, 347.0], [58.0, 347.0], [58.1, 348.0], [58.2, 348.0], [58.3, 348.0], [58.4, 348.0], [58.5, 349.0], [58.6, 349.0], [58.7, 349.0], [58.8, 349.0], [58.9, 350.0], [59.0, 350.0], [59.1, 350.0], [59.2, 350.0], [59.3, 351.0], [59.4, 351.0], [59.5, 351.0], [59.6, 351.0], [59.7, 351.0], [59.8, 352.0], [59.9, 352.0], [60.0, 352.0], [60.1, 352.0], [60.2, 353.0], [60.3, 353.0], [60.4, 353.0], [60.5, 353.0], [60.6, 354.0], [60.7, 354.0], [60.8, 354.0], [60.9, 354.0], [61.0, 355.0], [61.1, 355.0], [61.2, 355.0], [61.3, 356.0], [61.4, 356.0], [61.5, 356.0], [61.6, 357.0], [61.7, 357.0], [61.8, 357.0], [61.9, 357.0], [62.0, 357.0], [62.1, 358.0], [62.2, 358.0], [62.3, 358.0], [62.4, 358.0], [62.5, 358.0], [62.6, 359.0], [62.7, 359.0], [62.8, 359.0], [62.9, 360.0], [63.0, 360.0], [63.1, 361.0], [63.2, 361.0], [63.3, 362.0], [63.4, 362.0], [63.5, 363.0], [63.6, 363.0], [63.7, 363.0], [63.8, 364.0], [63.9, 364.0], [64.0, 364.0], [64.1, 365.0], [64.2, 365.0], [64.3, 365.0], [64.4, 366.0], [64.5, 366.0], [64.6, 366.0], [64.7, 366.0], [64.8, 366.0], [64.9, 367.0], [65.0, 367.0], [65.1, 367.0], [65.2, 367.0], [65.3, 368.0], [65.4, 368.0], [65.5, 368.0], [65.6, 369.0], [65.7, 369.0], [65.8, 369.0], [65.9, 370.0], [66.0, 370.0], [66.1, 370.0], [66.2, 371.0], [66.3, 371.0], [66.4, 371.0], [66.5, 371.0], [66.6, 372.0], [66.7, 372.0], [66.8, 372.0], [66.9, 372.0], [67.0, 372.0], [67.1, 373.0], [67.2, 373.0], [67.3, 373.0], [67.4, 373.0], [67.5, 374.0], [67.6, 374.0], [67.7, 374.0], [67.8, 374.0], [67.9, 375.0], [68.0, 375.0], [68.1, 375.0], [68.2, 375.0], [68.3, 375.0], [68.4, 376.0], [68.5, 376.0], [68.6, 376.0], [68.7, 376.0], [68.8, 377.0], [68.9, 377.0], [69.0, 377.0], [69.1, 377.0], [69.2, 377.0], [69.3, 378.0], [69.4, 378.0], [69.5, 378.0], [69.6, 378.0], [69.7, 378.0], [69.8, 379.0], [69.9, 379.0], [70.0, 379.0], [70.1, 379.0], [70.2, 379.0], [70.3, 380.0], [70.4, 380.0], [70.5, 380.0], [70.6, 380.0], [70.7, 381.0], [70.8, 381.0], [70.9, 381.0], [71.0, 381.0], [71.1, 382.0], [71.2, 383.0], [71.3, 383.0], [71.4, 384.0], [71.5, 384.0], [71.6, 384.0], [71.7, 385.0], [71.8, 385.0], [71.9, 386.0], [72.0, 386.0], [72.1, 386.0], [72.2, 387.0], [72.3, 387.0], [72.4, 388.0], [72.5, 389.0], [72.6, 391.0], [72.7, 392.0], [72.8, 393.0], [72.9, 394.0], [73.0, 394.0], [73.1, 395.0], [73.2, 395.0], [73.3, 396.0], [73.4, 396.0], [73.5, 398.0], [73.6, 399.0], [73.7, 401.0], [73.8, 403.0], [73.9, 407.0], [74.0, 409.0], [74.1, 410.0], [74.2, 411.0], [74.3, 412.0], [74.4, 417.0], [74.5, 419.0], [74.6, 421.0], [74.7, 426.0], [74.8, 432.0], [74.9, 434.0], [75.0, 436.0], [75.1, 437.0], [75.2, 438.0], [75.3, 440.0], [75.4, 441.0], [75.5, 442.0], [75.6, 445.0], [75.7, 447.0], [75.8, 448.0], [75.9, 449.0], [76.0, 451.0], [76.1, 453.0], [76.2, 454.0], [76.3, 455.0], [76.4, 456.0], [76.5, 461.0], [76.6, 463.0], [76.7, 464.0], [76.8, 470.0], [76.9, 471.0], [77.0, 472.0], [77.1, 473.0], [77.2, 474.0], [77.3, 475.0], [77.4, 475.0], [77.5, 476.0], [77.6, 476.0], [77.7, 478.0], [77.8, 480.0], [77.9, 481.0], [78.0, 483.0], [78.1, 484.0], [78.2, 486.0], [78.3, 487.0], [78.4, 489.0], [78.5, 494.0], [78.6, 495.0], [78.7, 496.0], [78.8, 497.0], [78.9, 499.0], [79.0, 501.0], [79.1, 506.0], [79.2, 507.0], [79.3, 509.0], [79.4, 510.0], [79.5, 511.0], [79.6, 513.0], [79.7, 514.0], [79.8, 516.0], [79.9, 518.0], [80.0, 519.0], [80.1, 520.0], [80.2, 522.0], [80.3, 524.0], [80.4, 529.0], [80.5, 531.0], [80.6, 532.0], [80.7, 533.0], [80.8, 534.0], [80.9, 535.0], [81.0, 536.0], [81.1, 537.0], [81.2, 538.0], [81.3, 538.0], [81.4, 539.0], [81.5, 540.0], [81.6, 541.0], [81.7, 542.0], [81.8, 543.0], [81.9, 543.0], [82.0, 544.0], [82.1, 549.0], [82.2, 550.0], [82.3, 551.0], [82.4, 552.0], [82.5, 553.0], [82.6, 555.0], [82.7, 557.0], [82.8, 560.0], [82.9, 562.0], [83.0, 567.0], [83.1, 573.0], [83.2, 578.0], [83.3, 579.0], [83.4, 579.0], [83.5, 580.0], [83.6, 584.0], [83.7, 592.0], [83.8, 595.0], [83.9, 597.0], [84.0, 598.0], [84.1, 599.0], [84.2, 602.0], [84.3, 603.0], [84.4, 605.0], [84.5, 606.0], [84.6, 608.0], [84.7, 610.0], [84.8, 612.0], [84.9, 614.0], [85.0, 621.0], [85.1, 631.0], [85.2, 639.0], [85.3, 654.0], [85.4, 656.0], [85.5, 658.0], [85.6, 659.0], [85.7, 663.0], [85.8, 667.0], [85.9, 669.0], [86.0, 673.0], [86.1, 677.0], [86.2, 681.0], [86.3, 690.0], [86.4, 693.0], [86.5, 694.0], [86.6, 696.0], [86.7, 704.0], [86.8, 724.0], [86.9, 725.0], [87.0, 727.0], [87.1, 728.0], [87.2, 730.0], [87.3, 736.0], [87.4, 764.0], [87.5, 768.0], [87.6, 774.0], [87.7, 783.0], [87.8, 786.0], [87.9, 888.0], [88.0, 889.0], [88.1, 890.0], [88.2, 928.0], [88.3, 1019.0], [88.4, 1111.0], [88.5, 1448.0], [88.6, 1587.0], [88.7, 1798.0], [88.8, 2045.0], [88.9, 2301.0], [89.0, 2334.0], [89.1, 2399.0], [89.2, 2579.0], [89.3, 2754.0], [89.4, 3001.0], [89.5, 3076.0], [89.6, 3307.0], [89.7, 3757.0], [89.8, 4000.0], [89.9, 4545.0], [90.0, 5078.0], [90.1, 5656.0], [90.2, 6005.0], [90.3, 6100.0], [90.4, 6104.0], [90.5, 6168.0], [90.6, 6322.0], [90.7, 6335.0], [90.8, 6402.0], [90.9, 6460.0], [91.0, 6498.0], [91.1, 6794.0], [91.2, 6877.0], [91.3, 6945.0], [91.4, 7029.0], [91.5, 7155.0], [91.6, 7386.0], [91.7, 7502.0], [91.8, 7551.0], [91.9, 7592.0], [92.0, 7677.0], [92.1, 7679.0], [92.2, 7861.0], [92.3, 8309.0], [92.4, 8513.0], [92.5, 8734.0], [92.6, 8829.0], [92.7, 8840.0], [92.8, 8924.0], [92.9, 8996.0], [93.0, 9151.0], [93.1, 9500.0], [93.2, 9560.0], [93.3, 9635.0], [93.4, 9672.0], [93.5, 9845.0], [93.6, 9881.0], [93.7, 9933.0], [93.8, 9936.0], [93.9, 10414.0], [94.0, 10471.0], [94.1, 10585.0], [94.2, 11208.0], [94.3, 11389.0], [94.4, 11477.0], [94.5, 12008.0], [94.6, 12072.0], [94.7, 12279.0], [94.8, 12548.0], [94.9, 12984.0], [95.0, 13011.0], [95.1, 13049.0], [95.2, 13185.0], [95.3, 13579.0], [95.4, 14211.0], [95.5, 14809.0], [95.6, 15110.0], [95.7, 15208.0], [95.8, 16298.0], [95.9, 16645.0], [96.0, 16919.0], [96.1, 16978.0], [96.2, 17019.0], [96.3, 17086.0], [96.4, 17689.0], [96.5, 18369.0], [96.6, 19006.0], [96.7, 19894.0], [96.8, 20726.0], [96.9, 21264.0], [97.0, 22484.0], [97.1, 24312.0], [97.2, 25615.0], [97.3, 27477.0], [97.4, 30482.0], [97.5, 32754.0], [97.6, 35233.0], [97.7, 36867.0], [97.8, 39565.0], [97.9, 42795.0], [98.0, 46139.0], [98.1, 56375.0], [98.2, 62613.0], [98.3, 63537.0], [98.4, 64698.0], [98.5, 66135.0], [98.6, 70583.0], [98.7, 74682.0], [98.8, 74933.0], [98.9, 74952.0], [99.0, 75473.0], [99.1, 79656.0], [99.2, 87579.0], [99.3, 100068.0], [99.4, 100541.0], [99.5, 101425.0], [99.6, 101642.0], [99.7, 105844.0], [99.8, 129129.0], [99.9, 131940.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 52555.0, "series": [{"data": [[0.0, 44900.0], [132900.0, 2.0], [66700.0, 33.0], [69900.0, 1.0], [73100.0, 1.0], [76300.0, 1.0], [79500.0, 1.0], [85900.0, 2.0], [92300.0, 1.0], [101900.0, 2.0], [98700.0, 1.0], [114700.0, 2.0], [117900.0, 2.0], [130700.0, 15.0], [127500.0, 1.0], [100.0, 30793.0], [32900.0, 7.0], [34500.0, 2.0], [36100.0, 25.0], [37700.0, 1.0], [147500.0, 1.0], [39300.0, 7.0], [45700.0, 1.0], [47300.0, 2.0], [50500.0, 7.0], [200.0, 19329.0], [58500.0, 1.0], [60100.0, 94.0], [63300.0, 8.0], [69000.0, 3.0], [65800.0, 14.0], [300.0, 52555.0], [75400.0, 12.0], [78600.0, 20.0], [91400.0, 8.0], [94600.0, 2.0], [97800.0, 1.0], [101000.0, 2.0], [400.0, 10724.0], [117000.0, 2.0], [120200.0, 2.0], [500.0, 10400.0], [129800.0, 27.0], [600.0, 5031.0], [700.0, 2345.0], [800.0, 711.0], [900.0, 167.0], [1000.0, 234.0], [1100.0, 143.0], [1200.0, 9.0], [1300.0, 46.0], [1400.0, 118.0], [1500.0, 161.0], [1600.0, 26.0], [1700.0, 140.0], [1800.0, 70.0], [1900.0, 67.0], [2000.0, 102.0], [2100.0, 69.0], [2300.0, 407.0], [2200.0, 84.0], [2400.0, 121.0], [2500.0, 96.0], [155700.0, 1.0], [2600.0, 117.0], [2700.0, 100.0], [2800.0, 41.0], [2900.0, 119.0], [3000.0, 263.0], [3100.0, 71.0], [3200.0, 60.0], [3300.0, 73.0], [3400.0, 30.0], [3500.0, 45.0], [3600.0, 34.0], [3700.0, 61.0], [3800.0, 65.0], [3900.0, 104.0], [4000.0, 36.0], [4200.0, 74.0], [68100.0, 2.0], [4400.0, 17.0], [71300.0, 2.0], [4600.0, 24.0], [74500.0, 2.0], [4800.0, 58.0], [77700.0, 1.0], [5000.0, 42.0], [5200.0, 39.0], [84100.0, 1.0], [5600.0, 63.0], [5400.0, 9.0], [5800.0, 35.0], [93700.0, 1.0], [6000.0, 198.0], [96900.0, 1.0], [6200.0, 109.0], [100100.0, 97.0], [6400.0, 417.0], [6600.0, 115.0], [103300.0, 1.0], [6800.0, 285.0], [7000.0, 42.0], [7200.0, 57.0], [7400.0, 92.0], [116100.0, 2.0], [7600.0, 422.0], [7800.0, 109.0], [8000.0, 30.0], [128900.0, 1.0], [8400.0, 89.0], [9200.0, 80.0], [8800.0, 449.0], [9600.0, 398.0], [153400.0, 10.0], [10000.0, 57.0], [10400.0, 219.0], [11200.0, 134.0], [10800.0, 3.0], [11600.0, 24.0], [12000.0, 254.0], [12400.0, 113.0], [198200.0, 1.0], [12800.0, 10.0], [13200.0, 66.0], [13600.0, 49.0], [14000.0, 40.0], [14400.0, 22.0], [14800.0, 69.0], [15200.0, 29.0], [15600.0, 61.0], [16000.0, 18.0], [16800.0, 4.0], [18400.0, 35.0], [17600.0, 34.0], [19200.0, 77.0], [20000.0, 3.0], [20800.0, 5.0], [21600.0, 17.0], [22400.0, 23.0], [23200.0, 51.0], [24000.0, 2.0], [24800.0, 4.0], [25600.0, 16.0], [26400.0, 3.0], [27200.0, 5.0], [28000.0, 1.0], [28800.0, 2.0], [30400.0, 70.0], [31200.0, 14.0], [32000.0, 21.0], [131900.0, 37.0], [35200.0, 46.0], [36800.0, 70.0], [38400.0, 21.0], [151100.0, 7.0], [40000.0, 1.0], [41600.0, 1.0], [43200.0, 7.0], [44800.0, 2.0], [46400.0, 1.0], [54400.0, 15.0], [215100.0, 1.0], [57600.0, 13.0], [60800.0, 1.0], [64000.0, 4.0], [73600.0, 10.0], [70400.0, 1.0], [83200.0, 2.0], [89600.0, 11.0], [102400.0, 3.0], [115200.0, 13.0], [128000.0, 3.0], [132100.0, 11.0], [73500.0, 3.0], [70300.0, 2.0], [76700.0, 25.0], [79900.0, 1.0], [83100.0, 21.0], [86300.0, 1.0], [127900.0, 2.0], [33100.0, 10.0], [34700.0, 15.0], [36300.0, 23.0], [37900.0, 2.0], [153100.0, 1.0], [39500.0, 18.0], [41100.0, 4.0], [42700.0, 10.0], [44300.0, 6.0], [45900.0, 2.0], [47500.0, 9.0], [55500.0, 2.0], [58700.0, 5.0], [61900.0, 24.0], [63500.0, 104.0], [65100.0, 2.0], [69400.0, 1.0], [66200.0, 1.0], [72600.0, 3.0], [98200.0, 1.0], [95000.0, 1.0], [101400.0, 123.0], [111000.0, 1.0], [130200.0, 3.0], [131600.0, 3.0], [138000.0, 2.0], [157200.0, 22.0], [68500.0, 1.0], [71700.0, 2.0], [74900.0, 452.0], [81300.0, 2.0], [87700.0, 23.0], [97300.0, 2.0], [100500.0, 33.0], [103700.0, 2.0], [110100.0, 2.0], [113300.0, 2.0], [16900.0, 384.0], [17700.0, 74.0], [19300.0, 33.0], [18500.0, 79.0], [20100.0, 11.0], [20900.0, 8.0], [22500.0, 2.0], [23300.0, 9.0], [24100.0, 7.0], [24900.0, 8.0], [26500.0, 13.0], [27300.0, 3.0], [28100.0, 2.0], [28900.0, 3.0], [31300.0, 1.0], [32100.0, 6.0], [35400.0, 3.0], [38600.0, 4.0], [40200.0, 2.0], [163100.0, 2.0], [41800.0, 18.0], [45000.0, 2.0], [43400.0, 1.0], [51400.0, 35.0], [54600.0, 2.0], [62600.0, 1.0], [64200.0, 6.0], [67600.0, 2.0], [77200.0, 2.0], [80400.0, 8.0], [83600.0, 5.0], [96400.0, 1.0], [115600.0, 1.0], [128400.0, 1.0], [67500.0, 1.0], [70700.0, 1.0], [77100.0, 4.0], [80300.0, 1.0], [83500.0, 4.0], [86700.0, 1.0], [96300.0, 1.0], [99500.0, 1.0], [109100.0, 1.0], [112300.0, 2.0], [132200.0, 12.0], [145000.0, 5.0], [38100.0, 6.0], [39700.0, 22.0], [41300.0, 1.0], [46100.0, 22.0], [49300.0, 2.0], [63700.0, 41.0], [65300.0, 12.0], [66600.0, 10.0], [73000.0, 1.0], [69800.0, 1.0], [79400.0, 2.0], [82600.0, 8.0], [85800.0, 8.0], [92200.0, 1.0], [95400.0, 3.0], [101800.0, 108.0], [108200.0, 1.0], [127400.0, 1.0], [131700.0, 7.0], [150900.0, 1.0], [163700.0, 1.0], [65700.0, 19.0], [68900.0, 20.0], [75300.0, 3.0], [88100.0, 1.0], [91300.0, 2.0], [94500.0, 1.0], [100900.0, 1.0], [110500.0, 1.0], [129700.0, 2.0], [8500.0, 97.0], [8900.0, 301.0], [9300.0, 31.0], [9700.0, 45.0], [10100.0, 7.0], [10500.0, 203.0], [10900.0, 14.0], [11300.0, 196.0], [11700.0, 10.0], [12100.0, 114.0], [12500.0, 41.0], [12900.0, 344.0], [13300.0, 2.0], [13700.0, 57.0], [14100.0, 4.0], [14500.0, 63.0], [15300.0, 6.0], [14900.0, 19.0], [15700.0, 33.0], [16100.0, 5.0], [17000.0, 275.0], [17800.0, 37.0], [19400.0, 8.0], [18600.0, 11.0], [20200.0, 41.0], [21000.0, 4.0], [21800.0, 4.0], [22600.0, 10.0], [23400.0, 2.0], [24200.0, 45.0], [25000.0, 25.0], [25800.0, 2.0], [26600.0, 7.0], [27400.0, 122.0], [28200.0, 1.0], [29000.0, 17.0], [29800.0, 4.0], [31400.0, 6.0], [32200.0, 17.0], [34000.0, 23.0], [37200.0, 2.0], [40400.0, 47.0], [46800.0, 2.0], [48400.0, 1.0], [50000.0, 1.0], [51600.0, 2.0], [54800.0, 2.0], [56400.0, 2.0], [59600.0, 3.0], [64400.0, 2.0], [71200.0, 1.0], [74400.0, 2.0], [80800.0, 3.0], [93600.0, 1.0], [90400.0, 2.0], [100000.0, 77.0], [128800.0, 20.0], [212800.0, 2.0], [67900.0, 3.0], [71100.0, 2.0], [77500.0, 2.0], [74300.0, 2.0], [80700.0, 2.0], [90300.0, 1.0], [96700.0, 3.0], [99900.0, 3.0], [112700.0, 1.0], [128700.0, 6.0], [33500.0, 2.0], [35100.0, 4.0], [36700.0, 1.0], [38300.0, 26.0], [154700.0, 1.0], [41500.0, 2.0], [44700.0, 2.0], [46300.0, 1.0], [47900.0, 9.0], [49500.0, 2.0], [54300.0, 2.0], [55900.0, 10.0], [57500.0, 29.0], [65500.0, 52.0], [67000.0, 1.0], [73400.0, 20.0], [76600.0, 17.0], [79800.0, 13.0], [83000.0, 1.0], [99000.0, 2.0], [115000.0, 41.0], [127800.0, 1.0], [133200.0, 5.0], [146000.0, 2.0], [69300.0, 1.0], [66100.0, 68.0], [72500.0, 5.0], [78900.0, 5.0], [82100.0, 1.0], [88500.0, 1.0], [91700.0, 1.0], [101300.0, 31.0], [130100.0, 5.0], [17100.0, 19.0], [17900.0, 5.0], [18700.0, 24.0], [20300.0, 9.0], [19500.0, 9.0], [21100.0, 54.0], [21900.0, 14.0], [23500.0, 24.0], [24300.0, 110.0], [25100.0, 12.0], [25900.0, 9.0], [26700.0, 12.0], [28300.0, 2.0], [29100.0, 12.0], [31500.0, 10.0], [32300.0, 17.0], [34200.0, 14.0], [35800.0, 46.0], [37400.0, 7.0], [42200.0, 6.0], [43800.0, 1.0], [45400.0, 43.0], [47000.0, 11.0], [56600.0, 2.0], [59800.0, 1.0], [61400.0, 1.0], [64600.0, 20.0], [68400.0, 3.0], [71600.0, 3.0], [74800.0, 51.0], [81200.0, 2.0], [78000.0, 1.0], [90800.0, 1.0], [100400.0, 2.0], [129200.0, 2.0], [132000.0, 12.0], [68300.0, 4.0], [74700.0, 70.0], [77900.0, 18.0], [81100.0, 1.0], [87500.0, 27.0], [93900.0, 1.0], [97100.0, 1.0], [100300.0, 36.0], [129100.0, 56.0], [33700.0, 1.0], [38500.0, 1.0], [40100.0, 2.0], [43300.0, 6.0], [44900.0, 1.0], [51300.0, 15.0], [60900.0, 2.0], [62500.0, 1.0], [64100.0, 6.0], [70600.0, 3.0], [86600.0, 1.0], [93000.0, 1.0], [96200.0, 13.0], [99400.0, 2.0], [105800.0, 25.0], [154800.0, 1.0], [4100.0, 27.0], [4300.0, 23.0], [66500.0, 21.0], [4500.0, 43.0], [69700.0, 1.0], [4700.0, 32.0], [5100.0, 10.0], [4900.0, 33.0], [79300.0, 3.0], [5300.0, 54.0], [85700.0, 32.0], [82500.0, 2.0], [5500.0, 60.0], [5700.0, 43.0], [6100.0, 477.0], [5900.0, 79.0], [101700.0, 23.0], [6300.0, 410.0], [98500.0, 1.0], [6500.0, 38.0], [6700.0, 60.0], [6900.0, 276.0], [7100.0, 232.0], [111300.0, 2.0], [7300.0, 181.0], [7500.0, 562.0], [7700.0, 7.0], [7900.0, 13.0], [8100.0, 6.0], [8200.0, 61.0], [8600.0, 34.0], [9000.0, 94.0], [9400.0, 26.0], [10200.0, 15.0], [9800.0, 315.0], [10600.0, 1.0], [11000.0, 28.0], [11400.0, 160.0], [12200.0, 84.0], [11800.0, 83.0], [12600.0, 13.0], [13000.0, 369.0], [13400.0, 40.0], [13800.0, 8.0], [14200.0, 13.0], [14600.0, 69.0], [15000.0, 105.0], [15400.0, 6.0], [15800.0, 5.0], [16200.0, 18.0], [17200.0, 88.0], [16400.0, 5.0], [18000.0, 39.0], [18800.0, 15.0], [20400.0, 3.0], [19600.0, 3.0], [21200.0, 61.0], [22000.0, 2.0], [22800.0, 1.0], [24400.0, 23.0], [23600.0, 4.0], [25200.0, 14.0], [26000.0, 28.0], [26800.0, 1.0], [28400.0, 1.0], [29200.0, 15.0], [30800.0, 6.0], [31600.0, 3.0], [32400.0, 26.0], [34400.0, 7.0], [36000.0, 2.0], [37600.0, 20.0], [154300.0, 5.0], [39200.0, 1.0], [45600.0, 1.0], [48800.0, 2.0], [50400.0, 3.0], [63200.0, 56.0], [64800.0, 27.0], [65600.0, 2.0], [72000.0, 20.0], [81600.0, 2.0], [88000.0, 1.0], [94400.0, 2.0], [100800.0, 1.0], [107200.0, 1.0], [116800.0, 3.0], [156800.0, 1.0], [68700.0, 3.0], [75100.0, 2.0], [81500.0, 1.0], [84700.0, 1.0], [100700.0, 3.0], [129500.0, 38.0], [33900.0, 18.0], [35500.0, 1.0], [37100.0, 4.0], [38700.0, 2.0], [41900.0, 45.0], [46700.0, 4.0], [45100.0, 6.0], [48300.0, 2.0], [49900.0, 4.0], [56300.0, 7.0], [62700.0, 15.0], [64300.0, 5.0], [71000.0, 3.0], [77400.0, 16.0], [74200.0, 2.0], [80600.0, 11.0], [93400.0, 2.0], [96600.0, 1.0], [99800.0, 2.0], [109400.0, 2.0], [132500.0, 13.0], [158100.0, 3.0], [66900.0, 7.0], [70100.0, 2.0], [73300.0, 1.0], [76500.0, 6.0], [79700.0, 4.0], [82900.0, 1.0], [89300.0, 5.0], [95700.0, 1.0], [155800.0, 1.0], [17300.0, 4.0], [16500.0, 7.0], [18100.0, 28.0], [18900.0, 14.0], [19700.0, 3.0], [21300.0, 108.0], [20500.0, 30.0], [22100.0, 7.0], [22900.0, 8.0], [24500.0, 7.0], [25300.0, 5.0], [26100.0, 9.0], [26900.0, 3.0], [28500.0, 2.0], [30100.0, 2.0], [31700.0, 1.0], [32500.0, 10.0], [33000.0, 9.0], [34600.0, 5.0], [36200.0, 4.0], [37800.0, 2.0], [39400.0, 10.0], [41000.0, 2.0], [42600.0, 2.0], [44200.0, 2.0], [45800.0, 4.0], [47400.0, 4.0], [53800.0, 2.0], [58600.0, 6.0], [63400.0, 47.0], [65000.0, 2.0], [66000.0, 1.0], [75600.0, 4.0], [78800.0, 2.0], [98000.0, 1.0], [101200.0, 17.0], [104400.0, 1.0], [120400.0, 10.0], [130000.0, 2.0], [65900.0, 18.0], [69100.0, 2.0], [75500.0, 15.0], [97900.0, 1.0], [94700.0, 2.0], [101100.0, 93.0], [104300.0, 1.0], [120300.0, 6.0], [123500.0, 1.0], [129900.0, 13.0], [34100.0, 10.0], [35700.0, 1.0], [38900.0, 1.0], [40500.0, 7.0], [42100.0, 2.0], [45300.0, 73.0], [46900.0, 3.0], [50100.0, 3.0], [56500.0, 10.0], [68200.0, 2.0], [71400.0, 2.0], [74600.0, 77.0], [77800.0, 2.0], [100200.0, 24.0], [129000.0, 10.0], [141300.0, 15.0], [67300.0, 5.0], [70500.0, 4.0], [76900.0, 1.0], [80100.0, 3.0], [83300.0, 1.0], [89700.0, 4.0], [102500.0, 1.0], [108900.0, 1.0], [8300.0, 76.0], [8700.0, 244.0], [9100.0, 88.0], [9500.0, 334.0], [9900.0, 429.0], [158200.0, 28.0], [10700.0, 24.0], [10300.0, 4.0], [11100.0, 40.0], [11500.0, 49.0], [11900.0, 3.0], [12300.0, 36.0], [12700.0, 9.0], [13100.0, 84.0], [13500.0, 54.0], [13900.0, 26.0], [14300.0, 10.0], [14700.0, 26.0], [15100.0, 209.0], [15500.0, 21.0], [16300.0, 56.0], [15900.0, 11.0], [16600.0, 299.0], [17400.0, 14.0], [18200.0, 9.0], [19000.0, 54.0], [19800.0, 28.0], [20600.0, 38.0], [21400.0, 2.0], [23000.0, 7.0], [23800.0, 3.0], [26200.0, 8.0], [27000.0, 5.0], [27800.0, 1.0], [28600.0, 1.0], [29400.0, 2.0], [31000.0, 18.0], [32600.0, 17.0], [31800.0, 11.0], [33200.0, 14.0], [36400.0, 22.0], [38000.0, 2.0], [39600.0, 4.0], [41200.0, 1.0], [42800.0, 8.0], [44400.0, 1.0], [46000.0, 6.0], [52400.0, 4.0], [63600.0, 69.0], [65200.0, 1.0], [66400.0, 4.0], [72800.0, 33.0], [76000.0, 1.0], [79200.0, 2.0], [85600.0, 14.0], [82400.0, 1.0], [92000.0, 1.0], [95200.0, 1.0], [101600.0, 128.0], [98400.0, 1.0], [132800.0, 1.0], [66300.0, 4.0], [69500.0, 2.0], [75900.0, 5.0], [85500.0, 2.0], [82300.0, 1.0], [88700.0, 3.0], [101500.0, 29.0], [114300.0, 2.0], [111100.0, 5.0], [130300.0, 2.0], [147400.0, 1.0], [132300.0, 4.0], [34300.0, 34.0], [35900.0, 8.0], [37500.0, 22.0], [40700.0, 8.0], [39100.0, 6.0], [45500.0, 6.0], [48700.0, 2.0], [51900.0, 5.0], [53500.0, 2.0], [63100.0, 18.0], [64700.0, 3.0], [68600.0, 3.0], [71800.0, 8.0], [75000.0, 5.0], [81400.0, 1.0], [78200.0, 1.0], [84600.0, 5.0], [87800.0, 6.0], [100600.0, 7.0], [103800.0, 2.0], [116600.0, 1.0], [129400.0, 18.0], [67700.0, 1.0], [77300.0, 7.0], [80500.0, 3.0], [83700.0, 3.0], [93300.0, 1.0], [99700.0, 1.0], [118900.0, 2.0], [128500.0, 2.0], [131800.0, 6.0], [163800.0, 2.0], [16700.0, 5.0], [17500.0, 4.0], [18300.0, 14.0], [19100.0, 3.0], [19900.0, 28.0], [21500.0, 1.0], [20700.0, 122.0], [22300.0, 6.0], [23100.0, 1.0], [23900.0, 6.0], [25500.0, 4.0], [24700.0, 4.0], [27100.0, 3.0], [28700.0, 13.0], [29500.0, 4.0], [31100.0, 7.0], [32700.0, 22.0], [33400.0, 4.0], [39800.0, 7.0], [43000.0, 6.0], [44600.0, 3.0], [46200.0, 1.0], [47800.0, 4.0], [55800.0, 2.0], [57400.0, 2.0], [62200.0, 2.0], [65400.0, 24.0], [63800.0, 2.0], [73200.0, 1.0], [70000.0, 3.0], [76400.0, 5.0], [79600.0, 38.0], [95600.0, 2.0], [98800.0, 1.0], [108400.0, 1.0], [114800.0, 1.0], [130800.0, 3.0], [127600.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 215100.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 1691.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 158349.0, "series": [{"data": [[0.0, 158349.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 19160.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 21283.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 1691.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 2378.741921072238, "minX": 1.68287706E12, "maxY": 3000.0, "series": [{"data": [[1.68287724E12, 3000.0], [1.68287736E12, 2378.741921072238], [1.68287706E12, 3000.0], [1.68287718E12, 3000.0], [1.68287712E12, 3000.0], [1.6828773E12, 3000.0]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68287736E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 22.0, "minX": 2.0, "maxY": 130749.0, "series": [{"data": [[2.0, 31270.0], [3.0, 31269.0], [4.0, 31268.0], [5.0, 31267.0], [6.0, 31238.0], [8.0, 31236.5], [10.0, 23312.0], [12.0, 23312.0], [13.0, 23308.0], [14.0, 23304.0], [16.0, 23301.0], [17.0, 23300.0], [19.0, 23299.0], [20.0, 23298.0], [21.0, 23293.0], [22.0, 23294.0], [23.0, 23291.0], [24.0, 23290.0], [25.0, 23290.0], [26.0, 23290.0], [28.0, 23269.0], [29.0, 23269.0], [33.0, 23260.0], [32.0, 23266.0], [35.0, 23258.0], [34.0, 23258.0], [37.0, 23245.0], [39.0, 23243.0], [38.0, 23247.0], [41.0, 23241.0], [40.0, 23243.0], [42.0, 23243.0], [45.0, 23241.0], [44.0, 23242.0], [47.0, 23233.0], [46.0, 23235.0], [49.0, 25272.0], [48.0, 25273.0], [51.0, 25270.0], [50.0, 25271.0], [53.0, 25266.0], [52.0, 25269.0], [55.0, 25258.0], [54.0, 25264.0], [57.0, 25170.0], [59.0, 25169.0], [58.0, 25172.0], [61.0, 25169.5], [63.0, 25167.0], [67.0, 25155.0], [65.0, 25164.0], [64.0, 25165.0], [71.0, 24383.333333333332], [69.0, 24384.0], [75.0, 24382.0], [74.0, 24383.0], [72.0, 24383.0], [79.0, 24377.0], [78.0, 24377.0], [77.0, 24377.0], [76.0, 24380.0], [83.0, 24373.0], [82.0, 24374.0], [81.0, 24375.0], [80.0, 24376.0], [87.0, 24367.0], [84.0, 24372.0], [91.0, 24367.0], [90.0, 24366.333333333332], [95.0, 24359.0], [94.0, 24364.5], [92.0, 24364.0], [98.0, 24358.0], [97.0, 24358.5], [103.0, 24336.0], [102.0, 24338.0], [101.0, 24346.0], [100.0, 24353.0], [107.0, 24334.0], [104.0, 24335.0], [111.0, 24332.5], [109.0, 24334.0], [108.0, 24333.0], [113.0, 24332.5], [118.0, 24331.0], [117.0, 24332.0], [116.0, 24331.666666666668], [123.0, 24328.0], [122.0, 24330.0], [120.0, 24330.5], [127.0, 24328.0], [125.0, 25218.5], [135.0, 24326.5], [133.0, 24327.0], [132.0, 24326.5], [131.0, 24328.0], [130.0, 24327.0], [128.0, 25219.0], [143.0, 26104.0], [142.0, 24322.0], [141.0, 24323.0], [140.0, 24917.666666666668], [137.0, 24325.0], [150.0, 24315.0], [149.0, 24321.5], [148.0, 24321.0], [147.0, 24321.0], [146.0, 24322.0], [145.0, 24322.0], [158.0, 24315.0], [157.0, 24909.0], [155.0, 24316.0], [154.0, 24692.5], [167.0, 24313.0], [166.0, 24313.0], [165.0, 24312.0], [163.0, 25205.0], [162.0, 26096.0], [161.0, 27590.0], [175.0, 26091.0], [174.0, 24310.5], [172.0, 25203.5], [171.0, 25065.0], [170.0, 24312.0], [169.0, 24312.0], [183.0, 24305.0], [182.0, 24305.0], [181.0, 25572.5], [179.0, 24307.0], [178.0, 26090.0], [177.0, 24307.0], [176.0, 24310.0], [190.0, 24301.0], [189.0, 25191.0], [186.0, 24302.0], [185.0, 24681.0], [199.0, 24295.0], [198.0, 24295.0], [197.0, 24296.0], [196.0, 26081.0], [195.0, 25191.0], [194.0, 26982.333333333332], [192.0, 25053.0], [207.0, 25180.5], [205.0, 26054.0], [215.0, 24283.0], [213.0, 25471.666666666668], [210.0, 24661.0], [208.0, 24285.0], [223.0, 24281.0], [220.0, 32327.0], [219.0, 24282.0], [218.0, 24283.5], [217.0, 25174.0], [231.0, 24263.0], [230.0, 28285.0], [228.0, 24871.666666666668], [227.0, 32323.0], [224.0, 24280.0], [239.0, 24852.666666666668], [237.0, 24260.0], [235.0, 24260.0], [234.0, 24260.0], [233.0, 24639.0], [246.0, 25133.0], [244.0, 29156.0], [243.0, 24243.0], [241.0, 26025.0], [240.0, 24259.0], [255.0, 28261.0], [252.0, 25132.5], [250.0, 24240.5], [248.0, 28264.0], [270.0, 25988.0], [269.0, 28229.5], [267.0, 32252.5], [265.0, 24220.0], [264.0, 28242.75], [260.0, 24222.0], [259.0, 24222.0], [258.0, 28636.0], [256.0, 25128.5], [287.0, 18636.5], [285.0, 18638.0], [283.0, 23546.0], [282.0, 32217.0], [281.0, 24203.0], [280.0, 25984.5], [278.0, 32247.0], [277.0, 25986.0], [275.0, 32249.0], [274.0, 32250.0], [272.0, 32249.5], [291.0, 18620.0], [301.0, 18551.0], [303.0, 18551.0], [300.0, 18551.0], [297.0, 18551.0], [296.0, 18552.333333333332], [293.0, 18553.0], [288.0, 18635.0], [290.0, 18632.0], [289.0, 18633.0], [318.0, 18539.5], [319.0, 18537.0], [316.0, 18544.0], [307.0, 18549.0], [306.0, 18549.0], [305.0, 18550.0], [315.0, 18544.0], [314.0, 18545.0], [313.0, 18545.0], [311.0, 18545.0], [310.0, 18546.0], [309.0, 18547.0], [308.0, 18549.0], [334.0, 18518.0], [335.0, 18518.0], [333.0, 18525.0], [332.0, 18530.0], [331.0, 18531.0], [330.0, 18532.5], [329.0, 18534.0], [327.0, 18534.0], [320.0, 18537.0], [322.0, 18536.0], [321.0, 18536.0], [326.0, 18534.0], [325.0, 18535.666666666668], [339.0, 20639.0], [349.0, 17784.0], [350.0, 17783.0], [348.0, 17784.0], [347.0, 20121.0], [344.0, 18736.0], [343.0, 20638.0], [340.0, 20639.0], [338.0, 18454.0], [337.0, 18504.0], [336.0, 18510.0], [366.0, 20632.0], [365.0, 17781.5], [363.0, 17781.0], [362.0, 17782.0], [361.0, 21285.5], [360.0, 17782.0], [358.0, 17781.0], [357.0, 20636.0], [355.0, 21068.333333333332], [354.0, 17782.0], [352.0, 17784.0], [380.0, 19202.5], [383.0, 20624.0], [382.0, 20624.0], [381.0, 19201.5], [378.0, 19202.5], [375.0, 17775.0], [370.0, 17777.333333333332], [368.0, 17779.0], [374.0, 17776.0], [373.0, 20630.0], [372.0, 20630.5], [398.0, 19147.333333333332], [395.0, 20617.0], [394.0, 19190.5], [393.0, 20618.0], [391.0, 17765.0], [390.0, 19668.333333333332], [387.0, 17767.0], [386.0, 20621.0], [385.0, 17768.0], [384.0, 20622.0], [413.0, 17753.0], [415.0, 19177.0], [412.0, 21256.0], [403.0, 17756.0], [402.0, 21911.0], [401.0, 20614.0], [400.0, 19839.5], [410.0, 20606.0], [409.0, 21906.0], [408.0, 20609.0], [407.0, 17756.0], [406.0, 20610.0], [405.0, 19183.5], [419.0, 19173.5], [430.0, 20583.0], [428.0, 17730.0], [426.0, 20586.5], [424.0, 20593.0], [422.0, 20594.0], [420.0, 17741.0], [417.0, 20603.0], [416.0, 17751.0], [440.0, 20572.5], [447.0, 20041.0], [443.0, 20564.0], [442.0, 20571.0], [441.0, 20571.0], [438.0, 17720.0], [437.0, 20578.0], [436.0, 20579.0], [435.0, 20579.0], [434.0, 20581.0], [433.0, 19631.666666666668], [456.0, 20552.5], [461.0, 17688.5], [459.0, 17690.0], [458.0, 20546.0], [457.0, 20547.0], [455.0, 17699.0], [453.0, 20553.0], [452.0, 17706.0], [451.0, 21208.0], [450.0, 17705.0], [449.0, 20560.0], [448.0, 20560.0], [478.0, 17677.0], [479.0, 17666.0], [477.0, 17677.0], [466.0, 17686.0], [465.0, 17687.0], [464.0, 18638.0], [475.0, 17677.0], [474.0, 17683.0], [472.0, 17684.0], [471.0, 17684.0], [470.0, 17686.0], [469.0, 17686.0], [483.0, 17662.0], [493.0, 19347.0], [495.0, 19621.5], [492.0, 22152.0], [482.0, 17663.0], [481.0, 17663.0], [480.0, 17666.0], [490.0, 15744.0], [489.0, 17546.5], [487.0, 17648.0], [486.0, 17651.0], [485.0, 17651.0], [484.0, 17661.0], [509.0, 15734.0], [511.0, 19338.0], [508.0, 15736.0], [499.0, 15742.0], [498.0, 18144.333333333332], [507.0, 15737.0], [506.0, 19340.0], [505.0, 15736.5], [503.0, 19341.0], [502.0, 15740.0], [501.0, 15740.0], [500.0, 19344.0], [536.0, 17515.5], [542.0, 15710.0], [543.0, 15708.0], [541.0, 15709.0], [540.0, 17095.666666666668], [537.0, 19316.0], [527.0, 19319.0], [513.0, 19337.0], [512.0, 19339.0], [516.0, 19335.0], [514.0, 19337.0], [518.0, 19334.0], [517.0, 19334.0], [526.0, 17527.5], [524.0, 18930.5], [522.0, 15729.0], [521.0, 18958.0], [520.0, 19334.0], [535.0, 15714.5], [532.0, 19865.0], [531.0, 18117.0], [528.0, 19319.0], [551.0, 15700.0], [563.0, 15693.0], [573.0, 19826.0], [572.0, 17814.666666666668], [569.0, 18883.5], [550.0, 19304.0], [549.0, 15701.0], [548.0, 15702.0], [547.0, 19308.0], [546.0, 15703.0], [544.0, 15706.0], [559.0, 15695.0], [558.0, 15698.0], [557.0, 15699.0], [556.0, 15698.0], [555.0, 15698.5], [553.0, 15700.0], [552.0, 22106.0], [567.0, 19285.0], [566.0, 17761.0], [564.0, 19288.0], [562.0, 15694.5], [560.0, 15696.0], [604.0, 14194.5], [594.0, 13742.0], [606.0, 13739.0], [607.0, 13739.0], [593.0, 15626.0], [592.0, 15627.0], [605.0, 14651.0], [602.0, 14195.75], [583.0, 19257.0], [582.0, 15665.0], [581.0, 19824.0], [580.0, 17471.5], [578.0, 19820.0], [577.0, 15671.0], [576.0, 16871.666666666668], [591.0, 19231.0], [590.0, 17429.5], [588.0, 15628.0], [587.0, 17452.0], [585.0, 19532.5], [598.0, 14652.0], [597.0, 14650.0], [596.0, 13742.0], [637.0, 13722.0], [639.0, 14630.0], [625.0, 13729.0], [624.0, 14639.0], [636.0, 13722.0], [635.0, 14177.5], [633.0, 13723.0], [632.0, 13724.0], [623.0, 14639.0], [609.0, 14648.5], [612.0, 14648.0], [611.0, 14647.5], [615.0, 14192.5], [613.0, 14647.0], [622.0, 14185.0], [621.0, 14639.0], [619.0, 14640.0], [618.0, 15290.0], [631.0, 14636.0], [629.0, 14638.0], [627.0, 14638.0], [626.0, 17333.0], [665.0, 14602.0], [669.0, 14599.0], [671.0, 13688.0], [657.0, 13702.0], [656.0, 14612.0], [659.0, 13699.0], [658.0, 13702.0], [661.0, 14607.0], [660.0, 13699.0], [668.0, 14598.0], [667.0, 13689.0], [666.0, 14604.0], [664.0, 14606.0], [646.0, 14621.0], [645.0, 14622.666666666666], [642.0, 14631.0], [641.0, 14630.0], [640.0, 13721.0], [655.0, 13704.0], [652.0, 13703.5], [650.0, 14617.0], [649.0, 14619.0], [648.0, 13710.0], [663.0, 13695.0], [662.0, 14606.0], [701.0, 13661.0], [692.0, 13669.0], [703.0, 14570.0], [689.0, 13676.0], [688.0, 14587.0], [691.0, 14579.0], [690.0, 14581.0], [700.0, 14571.0], [699.0, 14573.0], [697.0, 14573.0], [679.0, 14594.0], [678.0, 14593.0], [677.0, 14595.0], [676.0, 14595.0], [674.0, 14595.0], [673.0, 13686.0], [672.0, 14596.5], [687.0, 14589.0], [685.0, 14591.0], [683.0, 13681.0], [682.0, 14591.5], [681.0, 14592.0], [695.0, 14574.0], [694.0, 13666.0], [693.0, 14576.0], [729.0, 22484.0], [722.0, 14536.0], [732.0, 22480.0], [734.0, 17484.5], [721.0, 14540.0], [720.0, 14542.0], [731.0, 12494.5], [728.0, 15826.0], [711.0, 14556.0], [710.0, 14102.0], [708.0, 14557.0], [707.0, 14557.0], [706.0, 13659.0], [705.0, 14114.5], [704.0, 14570.0], [719.0, 14542.0], [718.0, 14543.0], [717.0, 14544.0], [716.0, 14546.0], [715.0, 16173.0], [713.0, 14552.0], [712.0, 13644.0], [726.0, 12497.0], [725.0, 12499.0], [724.0, 12499.0], [762.0, 12479.0], [756.0, 12486.0], [764.0, 17471.0], [752.0, 37548.0], [761.0, 12481.0], [760.0, 12480.0], [751.0, 37549.0], [737.0, 12490.0], [739.0, 12490.666666666666], [738.0, 22477.0], [742.0, 12489.0], [740.0, 12489.0], [750.0, 17480.5], [749.0, 12488.0], [747.0, 12488.0], [746.0, 12489.0], [745.0, 15818.0], [759.0, 12482.0], [758.0, 12482.0], [757.0, 12484.0], [754.0, 12485.0], [753.0, 12486.0], [794.0, 17442.5], [786.0, 12463.0], [797.0, 24972.5], [798.0, 12438.0], [785.0, 12465.0], [784.0, 12465.0], [795.0, 12444.0], [792.0, 24983.5], [775.0, 12474.0], [774.0, 12475.0], [773.0, 37536.0], [771.0, 12475.0], [770.0, 12477.0], [769.0, 12477.0], [768.0, 14974.25], [783.0, 22452.0], [782.0, 12468.0], [781.0, 17466.0], [780.0, 12472.0], [778.0, 12473.5], [776.0, 29997.5], [790.0, 13801.0], [788.0, 12456.0], [787.0, 12461.0], [829.0, 37463.0], [831.0, 22383.0], [816.0, 12426.0], [828.0, 22400.0], [827.0, 12415.0], [826.0, 12416.0], [825.0, 37477.0], [815.0, 24956.0], [803.0, 19094.666666666668], [800.0, 12438.0], [806.0, 12437.0], [805.0, 12436.0], [813.0, 22412.0], [812.0, 12429.0], [811.0, 24960.0], [809.0, 12430.0], [808.0, 12432.0], [823.0, 17409.0], [822.0, 12417.0], [820.0, 24948.0], [818.0, 17410.5], [850.0, 9663.0], [860.0, 13976.0], [859.0, 12037.666666666666], [856.0, 21994.0], [839.0, 34788.0], [838.0, 9596.0], [837.0, 20494.0], [836.0, 12911.0], [834.0, 12395.0], [833.0, 17390.0], [847.0, 22847.0], [844.0, 11606.0], [842.0, 18325.5], [840.0, 12911.0], [855.0, 11605.0], [852.0, 24380.5], [851.0, 11606.0], [849.0, 12909.0], [848.0, 13976.0], [882.0, 13970.5], [894.0, 8743.0], [893.0, 13217.333333333334], [890.0, 14956.5], [888.0, 11597.0], [879.0, 34289.0], [866.0, 12787.333333333334], [864.0, 29514.666666666668], [871.0, 12253.5], [869.0, 14633.333333333334], [877.0, 10175.0], [875.0, 11600.5], [874.0, 15156.0], [872.0, 8749.0], [887.0, 12248.5], [885.0, 9657.0], [884.0, 23987.666666666664], [881.0, 11601.0], [926.0, 11549.0], [927.0, 13919.0], [914.0, 27665.666666666668], [912.0, 11581.0], [917.0, 8717.5], [915.0, 13953.0], [925.0, 11549.0], [924.0, 18520.0], [923.0, 8698.0], [922.0, 22357.5], [920.0, 12859.0], [903.0, 33188.0], [902.0, 11585.0], [900.0, 34284.0], [899.0, 13427.0], [897.0, 8743.0], [896.0, 22836.5], [911.0, 13954.0], [909.0, 11582.0], [907.0, 21529.333333333332], [904.0, 12890.0], [919.0, 42700.0], [918.0, 47541.0], [955.0, 34347.0], [946.0, 12829.0], [957.0, 13883.0], [958.0, 11512.0], [944.0, 19574.0], [956.0, 26789.0], [952.0, 24265.5], [935.0, 19578.0], [934.0, 13905.0], [933.0, 47510.0], [932.0, 12722.5], [930.0, 34707.666666666664], [943.0, 13311.0], [942.0, 39219.5], [940.0, 30796.333333333332], [939.0, 47506.0], [937.0, 34230.0], [951.0, 34458.5], [949.0, 47494.0], [947.0, 29571.5], [986.0, 45205.5], [978.0, 29886.0], [989.0, 39643.0], [990.0, 43483.0], [976.0, 33981.0], [987.0, 34586.0], [984.0, 13855.0], [965.0, 33992.0], [964.0, 24772.0], [963.0, 31112.0], [962.0, 34101.0], [961.0, 33995.0], [960.0, 12816.0], [974.0, 33983.0], [973.0, 33988.0], [972.0, 34202.5], [969.0, 33990.0], [968.0, 34365.666666666664], [983.0, 39285.5], [981.0, 34085.0], [980.0, 44390.0], [1016.0, 228.0], [1022.0, 230.0], [1023.0, 228.66666666666666], [1020.0, 228.0], [1019.0, 229.0], [1017.0, 227.0], [1007.0, 48332.0], [992.0, 34373.5], [995.0, 46010.0], [993.0, 46013.0], [998.0, 40324.5], [996.0, 48774.5], [1006.0, 48337.0], [1005.0, 49345.0], [1004.0, 49344.0], [1003.0, 44761.0], [1002.0, 44762.0], [1001.0, 47379.666666666664], [1015.0, 228.0], [1014.0, 9652.0], [1009.0, 47341.0], [1072.0, 220.5], [1078.0, 221.0], [1082.0, 220.5], [1080.0, 220.5], [1038.0, 227.0], [1034.0, 225.0], [1030.0, 226.0], [1042.0, 227.0], [1040.0, 226.5], [1074.0, 220.5], [1076.0, 220.0], [1070.0, 221.0], [1068.0, 220.0], [1088.0, 221.0], [1118.0, 218.0], [1120.0, 217.0], [1094.0, 219.0], [1096.0, 219.0], [1100.0, 219.25], [1102.0, 219.0], [1116.0, 220.0], [1114.0, 218.0], [1108.0, 219.5], [1106.0, 219.5], [1606.0, 374.3863636363636], [1600.0, 376.0], [1602.0, 376.1323529411766], [1604.0, 375.22222222222223], [1608.0, 374.6666666666667], [1610.0, 374.0], [1612.0, 373.0], [1614.0, 373.0], [1626.0, 130749.0], [1624.0, 45539.0], [1622.0, 372.0], [1620.0, 373.0], [1618.0, 373.6666666666667], [1616.0, 373.4], [1826.0, 357.0], [1828.0, 356.0], [1824.0, 356.0], [1804.0, 357.0], [1820.0, 357.0], [1818.0, 358.0], [1954.0, 346.3636363636364], [1980.0, 345.81250000000006], [1958.0, 346.6363636363637], [1982.0, 345.5], [1952.0, 347.44444444444446], [1964.0, 346.99999999999994], [1966.0, 348.0], [1960.0, 346.0], [1950.0, 346.8947368421052], [1970.0, 346.0], [1974.0, 346.0], [1976.0, 346.25], [1978.0, 346.0], [1948.0, 347.1363636363636], [1944.0, 348.0], [1946.0, 346.0], [1988.0, 346.0], [2016.0, 250.0], [2014.0, 252.0], [2012.0, 251.4], [2006.0, 344.6071428571429], [2000.0, 346.0], [1996.0, 344.5833333333333], [1994.0, 344.0], [1986.0, 345.8888888888889], [1984.0, 346.1], [2672.0, 16475.0], [2632.0, 344.5], [2648.0, 1523.0], [2676.0, 32029.0], [2660.0, 933.0], [2580.0, 357.58333333333337], [2584.0, 352.2], [2588.0, 351.75], [2620.0, 345.5], [2616.0, 346.0], [2612.0, 346.0], [2592.0, 351.0], [2808.0, 2649.0], [2804.0, 43351.0], [2768.0, 3412.0], [2764.0, 2653.0], [2692.0, 5852.0], [2932.0, 379.85714285714283], [2936.0, 380.25], [2940.0, 379.25], [2880.0, 379.0], [2888.0, 379.0], [2892.0, 380.0], [2896.0, 378.5], [2900.0, 379.5], [2904.0, 380.5], [2908.0, 380.0], [2928.0, 379.1904761904762], [2924.0, 380.11764705882354], [2920.0, 379.4375], [2916.0, 381.0], [2912.0, 380.8], [2876.0, 381.6666666666667], [2872.0, 382.5], [2864.0, 381.0], [2860.0, 381.8333333333333], [2848.0, 5376.5], [2948.0, 379.29411764705884], [2964.0, 379.75], [3000.0, 3033.607969966799], [2944.0, 378.5], [2952.0, 380.3333333333333], [2956.0, 378.5], [2960.0, 380.0], [2972.0, 377.1666666666666], [2984.0, 377.5], [2976.0, 377.4], [2629.0, 344.75], [2685.0, 16474.0], [2633.0, 344.0], [2645.0, 1404.4444444444443], [2649.0, 1228.5], [2653.0, 1227.0], [2681.0, 2691.0], [2669.0, 1512.6666666666667], [2661.0, 1521.0], [2581.0, 582.0994764397908], [2585.0, 352.8], [2621.0, 346.0], [2601.0, 350.27272727272725], [2597.0, 350.0], [2705.0, 911.0], [2697.0, 10300.5], [2693.0, 21657.666666666668], [2689.0, 8202.2], [2889.0, 380.0], [2941.0, 379.3333333333333], [2893.0, 381.5], [2897.0, 380.5], [2901.0, 379.2], [2905.0, 379.53846153846155], [2909.0, 383.0], [2937.0, 380.1818181818182], [2933.0, 380.5], [2929.0, 379.0], [2925.0, 381.75], [2921.0, 379.0], [2917.0, 380.3333333333333], [2913.0, 379.8333333333333], [2833.0, 4944.0], [2829.0, 3407.0], [2873.0, 380.0], [2869.0, 380.3333333333333], [2857.0, 1740.75], [2949.0, 380.25], [2945.0, 381.5], [2953.0, 379.66666666666663], [2957.0, 378.83333333333337], [2961.0, 378.8888888888889], [2965.0, 379.0], [2969.0, 378.0], [2993.0, 1423.1666666666667], [2989.0, 290.0], [2981.0, 377.3333333333333], [2977.0, 377.6], [1037.0, 227.0], [1083.0, 220.4], [1087.0, 220.33333333333331], [1081.0, 220.0], [1035.0, 227.0], [1033.0, 226.0], [1027.0, 227.0], [1025.0, 227.0], [1041.0, 227.0], [1071.0, 220.8], [1067.0, 220.5], [1093.0, 219.0], [1121.0, 216.0], [1119.0, 217.0], [1089.0, 221.0], [1091.0, 218.66666666666666], [1095.0, 220.0], [1097.0, 219.0], [1099.0, 221.0], [1103.0, 219.5], [1117.0, 217.0], [1115.0, 218.0], [1113.0, 218.5], [1111.0, 218.5], [1109.0, 219.33333333333334], [1107.0, 218.5], [1603.0, 375.4608695652175], [1607.0, 374.43750000000006], [1623.0, 45541.0], [1627.0, 130748.0], [1601.0, 376.00000000000006], [1605.0, 375.0555555555555], [1609.0, 374.1162790697675], [1611.0, 373.3333333333333], [1615.0, 373.0], [1621.0, 372.0], [1617.0, 374.0], [1773.0, 44620.0], [1829.0, 357.0], [1827.0, 355.0], [1825.0, 354.0], [1821.0, 356.0], [1803.0, 357.0], [1805.0, 357.3333333333333], [1953.0, 346.28000000000003], [1983.0, 345.0], [1955.0, 346.0], [1981.0, 345.8461538461538], [1961.0, 345.6666666666667], [1965.0, 346.8], [1967.0, 346.5], [1959.0, 347.5], [1951.0, 346.8666666666666], [1973.0, 345.5], [1975.0, 345.5], [1977.0, 345.0], [1979.0, 345.75], [1949.0, 347.6666666666667], [1943.0, 346.0], [1945.0, 347.3333333333333], [1947.0, 347.6666666666667], [1991.0, 344.5], [2013.0, 252.0], [2015.0, 252.0], [2009.0, 253.0], [1999.0, 344.22222222222223], [1995.0, 345.1333333333333], [1993.0, 345.0], [1985.0, 346.0], [2666.0, 1313.0], [2662.0, 1521.0], [2678.0, 11485.333333333332], [2630.0, 345.0], [2634.0, 344.0], [2670.0, 32032.0], [2622.0, 345.0], [2582.0, 353.2941176470588], [2590.0, 351.42857142857144], [2618.0, 346.0], [2614.0, 346.0], [2610.0, 345.5], [2602.0, 349.0], [2598.0, 350.2], [2594.0, 351.18918918918934], [2706.0, 12167.0], [2702.0, 912.0], [2698.0, 2687.0], [2886.0, 382.8], [2882.0, 381.4], [2894.0, 380.0], [2898.0, 379.0], [2902.0, 383.0], [2906.0, 380.1111111111111], [2910.0, 378.8571428571429], [2942.0, 379.0], [2938.0, 380.0], [2934.0, 381.25], [2930.0, 380.38461538461536], [2926.0, 379.85714285714283], [2922.0, 380.0909090909091], [2914.0, 380.3], [2878.0, 14698.0], [2874.0, 384.0], [2866.0, 379.0], [2862.0, 383.0], [2858.0, 571.2499999999999], [2954.0, 379.16666666666663], [2946.0, 379.3636363636364], [2958.0, 378.5], [2962.0, 379.2857142857143], [2966.0, 379.75], [2974.0, 377.00000000000006], [2994.0, 5856.142857142858], [2990.0, 30.0], [2982.0, 376.53846153846155], [2675.0, 16475.0], [2683.0, 11288.333333333332], [2643.0, 457.0], [2635.0, 344.0], [2647.0, 457.0], [2651.0, 1227.5], [2663.0, 11499.0], [2579.0, 357.28571428571433], [2583.0, 352.8], [2587.0, 352.6428571428571], [2591.0, 351.48333333333335], [2615.0, 346.0], [2611.0, 347.0], [2595.0, 351.2], [2715.0, 10574.5], [2707.0, 4978.0], [2883.0, 382.0], [2943.0, 379.375], [2887.0, 379.25], [2891.0, 380.75], [2895.0, 384.0], [2899.0, 382.0], [2907.0, 380.0], [2939.0, 379.25], [2935.0, 380.66666666666663], [2927.0, 379.875], [2923.0, 380.0], [2915.0, 380.6], [2831.0, 2647.0], [2875.0, 380.2857142857143], [2867.0, 381.0], [2863.0, 380.44444444444446], [2859.0, 383.2], [2955.0, 374.0], [2991.0, 22.0], [2947.0, 380.0], [2951.0, 379.66666666666663], [2959.0, 377.0], [2963.0, 378.8], [2967.0, 376.7142857142857], [2975.0, 376.625], [2987.0, 376.6666666666667], [2979.0, 378.25]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[2979.191417726187, 3099.0983524787985]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 3000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 56380.8, "minX": 1.68287706E12, "maxY": 556416.85, "series": [{"data": [[1.68287724E12, 459144.75], [1.68287736E12, 79013.76666666666], [1.68287706E12, 429814.0333333333], [1.68287718E12, 556416.85], [1.68287712E12, 524003.85], [1.6828773E12, 394641.76666666666]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.68287724E12, 316764.0], [1.68287736E12, 56380.8], [1.68287706E12, 301996.8], [1.68287718E12, 376832.4], [1.68287712E12, 340704.0], [1.6828773E12, 277174.8]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68287736E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 1113.4880117935024, "minX": 1.68287706E12, "maxY": 5114.157436156669, "series": [{"data": [[1.68287724E12, 3787.37571888354], [1.68287736E12, 3962.638570364856], [1.68287706E12, 1113.4880117935024], [1.68287718E12, 2214.007892590213], [1.68287712E12, 5114.157436156669], [1.6828773E12, 2975.637771179235]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68287736E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 1113.4778037383226, "minX": 1.68287706E12, "maxY": 3904.213551749806, "series": [{"data": [[1.68287724E12, 3550.981427742306], [1.68287736E12, 3904.213551749806], [1.68287706E12, 1113.4778037383226], [1.68287718E12, 1767.7278158689548], [1.68287712E12, 3835.697162249971], [1.6828773E12, 2943.5439037691976]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68287736E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 21.753421228304425, "minX": 1.68287706E12, "maxY": 1551.0174501167332, "series": [{"data": [[1.68287724E12, 1467.4758613412105], [1.68287736E12, 425.73239017125724], [1.68287706E12, 21.753421228304425], [1.68287718E12, 745.7241782226266], [1.68287712E12, 1551.0174501167332], [1.6828773E12, 1070.8351714943542]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68287736E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 3.0, "minX": 1.68287706E12, "maxY": 215104.0, "series": [{"data": [[1.68287724E12, 215104.0], [1.68287736E12, 87727.0], [1.68287706E12, 46974.0], [1.68287718E12, 163815.0], [1.68287712E12, 101892.0], [1.6828773E12, 163116.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.68287724E12, 2391.600000000137], [1.68287736E12, 18536.7], [1.68287706E12, 251.0], [1.68287718E12, 568.0], [1.68287712E12, 11381.200000000012], [1.6828773E12, 2044.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.68287724E12, 115093.0], [1.68287736E12, 34727.87], [1.68287706E12, 36101.70000000005], [1.68287718E12, 19802.99], [1.68287712E12, 101637.0], [1.6828773E12, 37600.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.68287724E12, 19291.0], [1.68287736E12, 24286.399999999998], [1.68287706E12, 16933.95], [1.68287718E12, 629.0], [1.68287712E12, 17055.0], [1.6828773E12, 6904.950000000001]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.68287724E12, 12.0], [1.68287736E12, 21.0], [1.68287706E12, 3.0], [1.68287718E12, 25.0], [1.68287712E12, 7.0], [1.6828773E12, 12.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.68287724E12, 366.0], [1.68287736E12, 374.0], [1.68287706E12, 97.0], [1.68287718E12, 378.0], [1.68287712E12, 107.0], [1.6828773E12, 375.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68287736E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 12.0, "minX": 1.0, "maxY": 151157.0, "series": [{"data": [[2.0, 48840.5], [4.0, 19018.5], [5.0, 37158.5], [6.0, 22950.0], [7.0, 62209.5], [8.0, 31268.5], [10.0, 2112.0], [11.0, 24190.0], [14.0, 13034.5], [15.0, 6550.0], [19.0, 66664.0], [20.0, 25170.0], [21.0, 21237.0], [22.0, 3925.0], [25.0, 12910.0], [27.0, 18791.0], [28.0, 4410.5], [39.0, 23269.0], [46.0, 2910.0], [47.0, 112387.0], [55.0, 18518.0], [63.0, 5381.0], [72.0, 10522.5], [79.0, 6628.0], [83.0, 42497.5], [86.0, 46141.0], [93.0, 7862.0], [92.0, 65388.5], [106.0, 15744.5], [110.0, 21227.0], [114.0, 12396.0], [117.0, 104.0], [134.0, 182.0], [129.0, 14581.0], [146.0, 6436.0], [145.0, 6343.0], [149.0, 20541.0], [159.0, 9158.0], [154.0, 44.0], [152.0, 6794.0], [156.0, 121.0], [163.0, 18520.0], [183.0, 144.0], [185.0, 176.0], [215.0, 24332.0], [230.0, 155.0], [226.0, 235.0], [236.0, 109.0], [239.0, 105.0], [250.0, 166.0], [283.0, 16.0], [284.0, 42.0], [282.0, 194.0], [302.0, 177.0], [313.0, 264.0], [330.0, 97.0], [331.0, 316.0], [329.0, 11225.0], [341.0, 55.0], [337.0, 7594.0], [362.0, 9672.0], [357.0, 317.0], [383.0, 99.0], [381.0, 9560.0], [375.0, 6462.0], [390.0, 6341.0], [392.0, 346.0], [402.0, 9892.0], [426.0, 66.0], [419.0, 266.0], [439.0, 147.0], [458.0, 74.5], [457.0, 11390.0], [465.0, 17084.0], [492.0, 110.0], [489.0, 133.0], [483.0, 101613.0], [497.0, 357.0], [501.0, 375.0], [526.0, 34.0], [514.0, 76.5], [538.0, 70.0], [523.0, 9933.0], [547.0, 300.0], [555.0, 338.0], [579.0, 8839.0], [595.0, 145.0], [585.0, 378.0], [601.0, 391.0], [603.0, 309.0], [623.0, 63.0], [626.0, 341.0], [613.0, 331.0], [621.0, 279.0], [631.0, 311.0], [671.0, 120.0], [644.0, 265.0], [663.0, 364.0], [660.0, 374.0], [646.0, 305.0], [661.0, 365.0], [665.0, 362.0], [668.0, 344.0], [654.0, 326.0], [673.0, 346.0], [679.0, 353.0], [699.0, 113.0], [698.0, 342.0], [675.0, 16643.0], [674.0, 358.0], [676.0, 300.0], [681.0, 441.0], [682.0, 375.0], [689.0, 351.0], [694.0, 285.0], [672.0, 369.0], [688.0, 604.0], [680.0, 354.0], [729.0, 78.0], [734.0, 79.0], [726.0, 380.0], [725.0, 516.0], [730.0, 319.0], [716.0, 1016.0], [719.0, 372.0], [745.0, 400.0], [764.0, 361.0], [736.0, 351.0], [767.0, 355.0], [793.0, 262.0], [788.0, 375.0], [785.0, 341.0], [821.0, 162.0], [817.0, 49.0], [833.0, 95.0], [861.0, 6604.0], [834.0, 365.0], [884.0, 60.0], [867.0, 12916.0], [888.0, 7678.0], [883.0, 407.0], [921.0, 146.0], [920.0, 230.0], [924.0, 318.0], [937.0, 58.0], [952.0, 95.0], [951.0, 106.0], [977.0, 51.0], [979.0, 116.0], [968.0, 343.0], [969.0, 333.0], [1073.0, 45.0], [1031.0, 12164.0], [1086.0, 521.0], [1067.0, 376.0], [1122.0, 79.0], [1108.0, 107.0], [1088.0, 154.0], [1109.0, 520.0], [1145.0, 695.0], [1092.0, 329.0], [1119.0, 540.0], [1188.0, 41.0], [1211.0, 372.0], [1178.0, 283.0], [1176.0, 333.0], [1201.0, 305.0], [1181.0, 374.0], [1246.0, 379.0], [1229.0, 352.0], [1263.0, 358.0], [1225.0, 660.0], [1242.0, 347.0], [1331.0, 208.0], [1338.0, 153.0], [1333.0, 343.0], [1332.0, 377.0], [1336.0, 449.0], [1287.0, 266.0], [1281.0, 367.0], [1325.0, 330.0], [1313.0, 359.0], [1294.0, 604.0], [1330.0, 365.0], [1323.0, 467.0], [1293.0, 364.0], [1304.0, 359.0], [1307.0, 487.0], [1303.0, 475.0], [1298.0, 599.0], [1280.0, 350.0], [1391.0, 143.0], [1370.0, 147.0], [1359.0, 65.0], [1365.0, 369.0], [1374.0, 436.0], [1354.0, 395.0], [1401.0, 451.0], [1457.0, 16.0], [1419.0, 59.0], [1430.0, 368.0], [1506.0, 529.0], [1642.0, 12.0], [1637.0, 91.0], [1725.0, 34.0], [1697.0, 115.0], [1679.0, 41.0], [1734.0, 46.0], [1774.0, 593.0], [1822.0, 83.0], [1861.0, 59.0], [1919.0, 547.0], [1926.0, 126.0], [1964.0, 417.0], [1998.0, 13.0], [2027.0, 128.0], [2006.0, 240.0], [2001.0, 525.0], [2083.0, 15.0], [2081.0, 674.0], [2245.0, 15.0], [2469.0, 426.0], [2607.0, 728.0], [2780.0, 539.0], [1.0, 23546.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[585.0, 80660.0], [626.0, 16671.0], [613.0, 82986.0], [621.0, 151157.0], [671.0, 10439.0], [660.0, 8814.0], [689.0, 36317.5], [673.0, 22378.0], [672.0, 17416.0], [726.0, 57590.0], [725.0, 15110.0], [47.0, 24431.0], [736.0, 63808.5], [788.0, 65851.0], [1031.0, 74942.0], [1086.0, 21685.0], [1178.0, 54412.0], [1176.0, 105847.0], [1246.0, 55983.0], [1229.0, 72054.0], [1331.0, 8734.0], [1325.0, 40470.0], [1313.0, 18139.0], [83.0, 41968.0], [1304.0, 19006.0], [5.0, 116855.0], [86.0, 35234.0], [1354.0, 80430.0], [1506.0, 41852.5], [1734.0, 10568.0], [110.0, 43083.0], [1822.0, 87581.0], [1919.0, 15659.0], [134.0, 9294.0], [146.0, 14083.0], [152.0, 15040.0], [185.0, 75584.5], [14.0, 23009.5], [15.0, 10981.0], [313.0, 30473.0], [19.0, 9431.5], [330.0, 20727.0], [21.0, 8783.0], [362.0, 27171.0], [390.0, 12441.5], [392.0, 130749.0], [28.0, 61943.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 2780.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 112387.0, "series": [{"data": [[2.0, 48840.5], [4.0, 19018.5], [5.0, 37158.5], [6.0, 22950.0], [7.0, 62209.5], [8.0, 31268.5], [10.0, 2112.0], [11.0, 24190.0], [14.0, 13034.5], [15.0, 6550.0], [19.0, 66664.0], [20.0, 25170.0], [21.0, 21237.0], [22.0, 3925.0], [25.0, 12910.0], [27.0, 18791.0], [28.0, 4410.5], [39.0, 23269.0], [46.0, 2910.0], [47.0, 112387.0], [55.0, 18518.0], [63.0, 5381.0], [72.0, 10522.5], [79.0, 6628.0], [83.0, 42497.5], [86.0, 46141.0], [93.0, 7862.0], [92.0, 65388.5], [106.0, 15744.5], [110.0, 21227.0], [114.0, 12396.0], [117.0, 104.0], [134.0, 182.0], [129.0, 14581.0], [146.0, 6436.0], [145.0, 6343.0], [149.0, 20541.0], [159.0, 9158.0], [154.0, 44.0], [152.0, 6794.0], [156.0, 121.0], [163.0, 18520.0], [183.0, 144.0], [185.0, 176.0], [215.0, 24332.0], [230.0, 155.0], [226.0, 235.0], [236.0, 109.0], [239.0, 105.0], [250.0, 166.0], [283.0, 16.0], [284.0, 42.0], [282.0, 194.0], [302.0, 177.0], [313.0, 264.0], [330.0, 97.0], [331.0, 316.0], [329.0, 11225.0], [341.0, 55.0], [337.0, 7594.0], [362.0, 9672.0], [357.0, 317.0], [383.0, 99.0], [381.0, 9560.0], [375.0, 6462.0], [390.0, 6341.0], [392.0, 346.0], [402.0, 9892.0], [426.0, 66.0], [419.0, 266.0], [439.0, 147.0], [458.0, 74.5], [457.0, 11390.0], [465.0, 17084.0], [492.0, 110.0], [489.0, 133.0], [483.0, 101613.0], [497.0, 357.0], [501.0, 375.0], [526.0, 34.0], [514.0, 76.5], [538.0, 70.0], [523.0, 9933.0], [547.0, 300.0], [555.0, 338.0], [579.0, 8839.0], [595.0, 145.0], [585.0, 378.0], [601.0, 391.0], [603.0, 309.0], [623.0, 63.0], [626.0, 341.0], [613.0, 331.0], [621.0, 279.0], [631.0, 311.0], [671.0, 120.0], [644.0, 265.0], [663.0, 364.0], [660.0, 374.0], [646.0, 305.0], [661.0, 365.0], [665.0, 362.0], [668.0, 344.0], [654.0, 326.0], [673.0, 346.0], [679.0, 353.0], [699.0, 113.0], [698.0, 342.0], [675.0, 16643.0], [674.0, 358.0], [676.0, 300.0], [681.0, 441.0], [682.0, 375.0], [689.0, 351.0], [694.0, 285.0], [672.0, 369.0], [688.0, 604.0], [680.0, 354.0], [729.0, 78.0], [734.0, 79.0], [726.0, 380.0], [725.0, 516.0], [730.0, 319.0], [716.0, 1016.0], [719.0, 372.0], [745.0, 400.0], [764.0, 361.0], [736.0, 351.0], [767.0, 355.0], [793.0, 262.0], [788.0, 375.0], [785.0, 341.0], [821.0, 162.0], [817.0, 49.0], [833.0, 95.0], [861.0, 6604.0], [834.0, 365.0], [884.0, 60.0], [867.0, 12916.0], [888.0, 7678.0], [883.0, 407.0], [921.0, 146.0], [920.0, 230.0], [924.0, 318.0], [937.0, 58.0], [952.0, 95.0], [951.0, 106.0], [977.0, 51.0], [979.0, 116.0], [968.0, 343.0], [969.0, 333.0], [1073.0, 45.0], [1031.0, 12164.0], [1086.0, 520.0], [1067.0, 376.0], [1122.0, 79.0], [1108.0, 107.0], [1088.0, 154.0], [1109.0, 520.0], [1145.0, 695.0], [1092.0, 329.0], [1119.0, 540.0], [1188.0, 41.0], [1211.0, 372.0], [1178.0, 283.0], [1176.0, 333.0], [1201.0, 305.0], [1181.0, 374.0], [1246.0, 379.0], [1229.0, 352.0], [1263.0, 358.0], [1225.0, 660.0], [1242.0, 347.0], [1331.0, 208.0], [1338.0, 153.0], [1333.0, 343.0], [1332.0, 377.0], [1336.0, 449.0], [1287.0, 266.0], [1281.0, 367.0], [1325.0, 330.0], [1313.0, 359.0], [1294.0, 604.0], [1330.0, 365.0], [1323.0, 467.0], [1293.0, 364.0], [1304.0, 359.0], [1307.0, 487.0], [1303.0, 475.0], [1298.0, 599.0], [1280.0, 350.0], [1391.0, 143.0], [1370.0, 147.0], [1359.0, 65.0], [1365.0, 369.0], [1374.0, 436.0], [1354.0, 395.0], [1401.0, 451.0], [1457.0, 16.0], [1419.0, 59.0], [1430.0, 368.0], [1506.0, 529.0], [1642.0, 12.0], [1637.0, 91.0], [1725.0, 34.0], [1697.0, 115.0], [1679.0, 41.0], [1734.0, 46.0], [1774.0, 593.0], [1822.0, 83.0], [1861.0, 59.0], [1919.0, 547.0], [1926.0, 126.0], [1964.0, 417.0], [1998.0, 13.0], [2027.0, 128.0], [2006.0, 240.0], [2001.0, 525.0], [2083.0, 15.0], [2081.0, 674.0], [2245.0, 15.0], [2469.0, 426.0], [2607.0, 728.0], [2780.0, 539.0], [1.0, 23546.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[585.0, 0.0], [626.0, 0.0], [613.0, 0.0], [621.0, 0.0], [671.0, 0.0], [660.0, 0.0], [689.0, 0.0], [673.0, 0.0], [672.0, 0.0], [726.0, 0.0], [725.0, 0.0], [47.0, 0.0], [736.0, 0.0], [788.0, 0.0], [1031.0, 0.0], [1086.0, 0.0], [1178.0, 0.0], [1176.0, 0.0], [1246.0, 0.0], [1229.0, 0.0], [1331.0, 0.0], [1325.0, 0.0], [1313.0, 0.0], [83.0, 0.0], [1304.0, 0.0], [5.0, 0.0], [86.0, 0.0], [1354.0, 0.0], [1506.0, 0.0], [1734.0, 0.0], [110.0, 0.0], [1822.0, 0.0], [1919.0, 0.0], [134.0, 0.0], [146.0, 0.0], [152.0, 0.0], [185.0, 0.0], [14.0, 0.0], [15.0, 0.0], [313.0, 0.0], [19.0, 0.0], [330.0, 0.0], [21.0, 0.0], [362.0, 0.0], [390.0, 0.0], [392.0, 0.0], [28.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 2780.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 106.43333333333334, "minX": 1.68287706E12, "maxY": 744.8166666666667, "series": [{"data": [[1.68287724E12, 622.5333333333333], [1.68287736E12, 106.43333333333334], [1.68287706E12, 644.7666666666667], [1.68287718E12, 744.8166666666667], [1.68287712E12, 689.2333333333333], [1.6828773E12, 533.6]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68287736E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.05, "minX": 1.68287706E12, "maxY": 747.6833333333333, "series": [{"data": [[1.68287724E12, 628.5], [1.68287736E12, 111.86666666666666], [1.68287706E12, 599.2], [1.68287718E12, 747.6833333333333], [1.68287712E12, 676.0], [1.6828773E12, 549.95]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.68287724E12, 3.2666666666666666], [1.68287736E12, 0.05], [1.68287718E12, 8.3], [1.68287712E12, 16.45], [1.6828773E12, 0.11666666666666667]], "isOverall": false, "label": "Non HTTP response code: java.net.SocketException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68287736E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.05, "minX": 1.68287706E12, "maxY": 747.6833333333333, "series": [{"data": [[1.68287724E12, 628.5], [1.68287736E12, 111.86666666666666], [1.68287706E12, 599.2], [1.68287718E12, 747.6833333333333], [1.68287712E12, 676.0], [1.6828773E12, 549.95]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.68287724E12, 3.2666666666666666], [1.68287736E12, 0.05], [1.68287718E12, 8.3], [1.68287712E12, 16.45], [1.6828773E12, 0.11666666666666667]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68287736E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.05, "minX": 1.68287706E12, "maxY": 747.6833333333333, "series": [{"data": [[1.68287724E12, 628.5], [1.68287736E12, 111.86666666666666], [1.68287706E12, 599.2], [1.68287718E12, 747.6833333333333], [1.68287712E12, 676.0], [1.6828773E12, 549.95]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.68287724E12, 3.2666666666666666], [1.68287736E12, 0.05], [1.68287718E12, 8.3], [1.68287712E12, 16.45], [1.6828773E12, 0.11666666666666667]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68287736E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

