/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 13.0, "minX": 0.0, "maxY": 169219.0, "series": [{"data": [[0.0, 13.0], [0.1, 31.0], [0.2, 38.0], [0.3, 45.0], [0.4, 49.0], [0.5, 54.0], [0.6, 55.0], [0.7, 57.0], [0.8, 59.0], [0.9, 61.0], [1.0, 64.0], [1.1, 66.0], [1.2, 67.0], [1.3, 69.0], [1.4, 71.0], [1.5, 72.0], [1.6, 73.0], [1.7, 75.0], [1.8, 78.0], [1.9, 79.0], [2.0, 81.0], [2.1, 82.0], [2.2, 83.0], [2.3, 85.0], [2.4, 87.0], [2.5, 88.0], [2.6, 89.0], [2.7, 90.0], [2.8, 92.0], [2.9, 92.0], [3.0, 93.0], [3.1, 94.0], [3.2, 94.0], [3.3, 96.0], [3.4, 97.0], [3.5, 99.0], [3.6, 100.0], [3.7, 101.0], [3.8, 102.0], [3.9, 102.0], [4.0, 103.0], [4.1, 103.0], [4.2, 104.0], [4.3, 104.0], [4.4, 105.0], [4.5, 106.0], [4.6, 107.0], [4.7, 108.0], [4.8, 109.0], [4.9, 110.0], [5.0, 112.0], [5.1, 113.0], [5.2, 114.0], [5.3, 115.0], [5.4, 115.0], [5.5, 117.0], [5.6, 118.0], [5.7, 119.0], [5.8, 121.0], [5.9, 122.0], [6.0, 125.0], [6.1, 126.0], [6.2, 126.0], [6.3, 127.0], [6.4, 127.0], [6.5, 129.0], [6.6, 129.0], [6.7, 130.0], [6.8, 133.0], [6.9, 135.0], [7.0, 136.0], [7.1, 137.0], [7.2, 138.0], [7.3, 139.0], [7.4, 139.0], [7.5, 140.0], [7.6, 141.0], [7.7, 141.0], [7.8, 142.0], [7.9, 144.0], [8.0, 145.0], [8.1, 146.0], [8.2, 149.0], [8.3, 150.0], [8.4, 152.0], [8.5, 153.0], [8.6, 154.0], [8.7, 155.0], [8.8, 156.0], [8.9, 157.0], [9.0, 158.0], [9.1, 159.0], [9.2, 160.0], [9.3, 161.0], [9.4, 162.0], [9.5, 164.0], [9.6, 166.0], [9.7, 168.0], [9.8, 169.0], [9.9, 170.0], [10.0, 171.0], [10.1, 172.0], [10.2, 172.0], [10.3, 173.0], [10.4, 173.0], [10.5, 174.0], [10.6, 175.0], [10.7, 176.0], [10.8, 177.0], [10.9, 177.0], [11.0, 178.0], [11.1, 179.0], [11.2, 180.0], [11.3, 181.0], [11.4, 182.0], [11.5, 184.0], [11.6, 185.0], [11.7, 187.0], [11.8, 187.0], [11.9, 188.0], [12.0, 189.0], [12.1, 190.0], [12.2, 190.0], [12.3, 191.0], [12.4, 192.0], [12.5, 193.0], [12.6, 194.0], [12.7, 194.0], [12.8, 195.0], [12.9, 196.0], [13.0, 198.0], [13.1, 199.0], [13.2, 200.0], [13.3, 201.0], [13.4, 202.0], [13.5, 203.0], [13.6, 204.0], [13.7, 204.0], [13.8, 205.0], [13.9, 206.0], [14.0, 207.0], [14.1, 207.0], [14.2, 208.0], [14.3, 208.0], [14.4, 209.0], [14.5, 209.0], [14.6, 210.0], [14.7, 210.0], [14.8, 211.0], [14.9, 211.0], [15.0, 212.0], [15.1, 212.0], [15.2, 213.0], [15.3, 213.0], [15.4, 214.0], [15.5, 214.0], [15.6, 215.0], [15.7, 216.0], [15.8, 217.0], [15.9, 218.0], [16.0, 218.0], [16.1, 219.0], [16.2, 219.0], [16.3, 219.0], [16.4, 220.0], [16.5, 220.0], [16.6, 220.0], [16.7, 221.0], [16.8, 222.0], [16.9, 222.0], [17.0, 222.0], [17.1, 223.0], [17.2, 223.0], [17.3, 223.0], [17.4, 223.0], [17.5, 224.0], [17.6, 224.0], [17.7, 224.0], [17.8, 225.0], [17.9, 225.0], [18.0, 226.0], [18.1, 226.0], [18.2, 226.0], [18.3, 227.0], [18.4, 227.0], [18.5, 228.0], [18.6, 228.0], [18.7, 229.0], [18.8, 229.0], [18.9, 230.0], [19.0, 232.0], [19.1, 232.0], [19.2, 233.0], [19.3, 233.0], [19.4, 233.0], [19.5, 234.0], [19.6, 234.0], [19.7, 234.0], [19.8, 235.0], [19.9, 235.0], [20.0, 235.0], [20.1, 236.0], [20.2, 236.0], [20.3, 236.0], [20.4, 236.0], [20.5, 237.0], [20.6, 237.0], [20.7, 237.0], [20.8, 238.0], [20.9, 238.0], [21.0, 239.0], [21.1, 239.0], [21.2, 239.0], [21.3, 240.0], [21.4, 240.0], [21.5, 240.0], [21.6, 240.0], [21.7, 240.0], [21.8, 240.0], [21.9, 241.0], [22.0, 241.0], [22.1, 241.0], [22.2, 241.0], [22.3, 241.0], [22.4, 241.0], [22.5, 241.0], [22.6, 242.0], [22.7, 242.0], [22.8, 242.0], [22.9, 242.0], [23.0, 243.0], [23.1, 243.0], [23.2, 243.0], [23.3, 243.0], [23.4, 244.0], [23.5, 244.0], [23.6, 244.0], [23.7, 244.0], [23.8, 245.0], [23.9, 245.0], [24.0, 245.0], [24.1, 245.0], [24.2, 245.0], [24.3, 246.0], [24.4, 246.0], [24.5, 246.0], [24.6, 246.0], [24.7, 247.0], [24.8, 247.0], [24.9, 247.0], [25.0, 247.0], [25.1, 248.0], [25.2, 248.0], [25.3, 248.0], [25.4, 248.0], [25.5, 249.0], [25.6, 249.0], [25.7, 249.0], [25.8, 249.0], [25.9, 250.0], [26.0, 250.0], [26.1, 250.0], [26.2, 250.0], [26.3, 250.0], [26.4, 251.0], [26.5, 251.0], [26.6, 251.0], [26.7, 251.0], [26.8, 251.0], [26.9, 252.0], [27.0, 252.0], [27.1, 252.0], [27.2, 253.0], [27.3, 253.0], [27.4, 253.0], [27.5, 253.0], [27.6, 254.0], [27.7, 254.0], [27.8, 254.0], [27.9, 254.0], [28.0, 254.0], [28.1, 255.0], [28.2, 255.0], [28.3, 255.0], [28.4, 255.0], [28.5, 255.0], [28.6, 255.0], [28.7, 256.0], [28.8, 256.0], [28.9, 256.0], [29.0, 256.0], [29.1, 256.0], [29.2, 256.0], [29.3, 257.0], [29.4, 257.0], [29.5, 257.0], [29.6, 257.0], [29.7, 257.0], [29.8, 257.0], [29.9, 257.0], [30.0, 257.0], [30.1, 257.0], [30.2, 257.0], [30.3, 258.0], [30.4, 258.0], [30.5, 258.0], [30.6, 258.0], [30.7, 258.0], [30.8, 258.0], [30.9, 258.0], [31.0, 258.0], [31.1, 258.0], [31.2, 259.0], [31.3, 259.0], [31.4, 259.0], [31.5, 259.0], [31.6, 259.0], [31.7, 259.0], [31.8, 259.0], [31.9, 260.0], [32.0, 260.0], [32.1, 260.0], [32.2, 260.0], [32.3, 260.0], [32.4, 260.0], [32.5, 260.0], [32.6, 260.0], [32.7, 261.0], [32.8, 261.0], [32.9, 261.0], [33.0, 261.0], [33.1, 261.0], [33.2, 261.0], [33.3, 261.0], [33.4, 261.0], [33.5, 262.0], [33.6, 262.0], [33.7, 262.0], [33.8, 262.0], [33.9, 262.0], [34.0, 262.0], [34.1, 263.0], [34.2, 263.0], [34.3, 263.0], [34.4, 263.0], [34.5, 263.0], [34.6, 263.0], [34.7, 264.0], [34.8, 264.0], [34.9, 264.0], [35.0, 264.0], [35.1, 264.0], [35.2, 264.0], [35.3, 264.0], [35.4, 265.0], [35.5, 265.0], [35.6, 265.0], [35.7, 265.0], [35.8, 265.0], [35.9, 265.0], [36.0, 265.0], [36.1, 265.0], [36.2, 265.0], [36.3, 266.0], [36.4, 266.0], [36.5, 266.0], [36.6, 266.0], [36.7, 266.0], [36.8, 266.0], [36.9, 266.0], [37.0, 267.0], [37.1, 267.0], [37.2, 267.0], [37.3, 267.0], [37.4, 267.0], [37.5, 267.0], [37.6, 268.0], [37.7, 268.0], [37.8, 268.0], [37.9, 268.0], [38.0, 268.0], [38.1, 268.0], [38.2, 268.0], [38.3, 269.0], [38.4, 269.0], [38.5, 269.0], [38.6, 269.0], [38.7, 269.0], [38.8, 269.0], [38.9, 269.0], [39.0, 269.0], [39.1, 270.0], [39.2, 270.0], [39.3, 270.0], [39.4, 270.0], [39.5, 270.0], [39.6, 270.0], [39.7, 270.0], [39.8, 270.0], [39.9, 271.0], [40.0, 271.0], [40.1, 271.0], [40.2, 271.0], [40.3, 271.0], [40.4, 271.0], [40.5, 271.0], [40.6, 271.0], [40.7, 271.0], [40.8, 272.0], [40.9, 272.0], [41.0, 272.0], [41.1, 272.0], [41.2, 272.0], [41.3, 272.0], [41.4, 272.0], [41.5, 272.0], [41.6, 272.0], [41.7, 273.0], [41.8, 273.0], [41.9, 273.0], [42.0, 273.0], [42.1, 273.0], [42.2, 273.0], [42.3, 273.0], [42.4, 274.0], [42.5, 274.0], [42.6, 274.0], [42.7, 274.0], [42.8, 275.0], [42.9, 275.0], [43.0, 275.0], [43.1, 275.0], [43.2, 276.0], [43.3, 276.0], [43.4, 276.0], [43.5, 276.0], [43.6, 276.0], [43.7, 276.0], [43.8, 276.0], [43.9, 277.0], [44.0, 277.0], [44.1, 277.0], [44.2, 277.0], [44.3, 277.0], [44.4, 277.0], [44.5, 277.0], [44.6, 277.0], [44.7, 277.0], [44.8, 278.0], [44.9, 278.0], [45.0, 278.0], [45.1, 278.0], [45.2, 278.0], [45.3, 278.0], [45.4, 278.0], [45.5, 278.0], [45.6, 278.0], [45.7, 279.0], [45.8, 279.0], [45.9, 279.0], [46.0, 279.0], [46.1, 279.0], [46.2, 279.0], [46.3, 279.0], [46.4, 279.0], [46.5, 280.0], [46.6, 280.0], [46.7, 280.0], [46.8, 280.0], [46.9, 280.0], [47.0, 280.0], [47.1, 280.0], [47.2, 280.0], [47.3, 281.0], [47.4, 281.0], [47.5, 281.0], [47.6, 281.0], [47.7, 281.0], [47.8, 281.0], [47.9, 281.0], [48.0, 281.0], [48.1, 282.0], [48.2, 282.0], [48.3, 282.0], [48.4, 282.0], [48.5, 282.0], [48.6, 282.0], [48.7, 282.0], [48.8, 282.0], [48.9, 283.0], [49.0, 283.0], [49.1, 283.0], [49.2, 283.0], [49.3, 283.0], [49.4, 283.0], [49.5, 284.0], [49.6, 284.0], [49.7, 284.0], [49.8, 284.0], [49.9, 284.0], [50.0, 284.0], [50.1, 284.0], [50.2, 285.0], [50.3, 285.0], [50.4, 285.0], [50.5, 285.0], [50.6, 285.0], [50.7, 285.0], [50.8, 286.0], [50.9, 286.0], [51.0, 286.0], [51.1, 287.0], [51.2, 287.0], [51.3, 287.0], [51.4, 287.0], [51.5, 288.0], [51.6, 288.0], [51.7, 288.0], [51.8, 288.0], [51.9, 289.0], [52.0, 289.0], [52.1, 289.0], [52.2, 289.0], [52.3, 290.0], [52.4, 290.0], [52.5, 290.0], [52.6, 290.0], [52.7, 290.0], [52.8, 291.0], [52.9, 291.0], [53.0, 291.0], [53.1, 291.0], [53.2, 291.0], [53.3, 292.0], [53.4, 292.0], [53.5, 292.0], [53.6, 293.0], [53.7, 293.0], [53.8, 293.0], [53.9, 293.0], [54.0, 293.0], [54.1, 294.0], [54.2, 294.0], [54.3, 294.0], [54.4, 294.0], [54.5, 294.0], [54.6, 294.0], [54.7, 295.0], [54.8, 295.0], [54.9, 295.0], [55.0, 295.0], [55.1, 295.0], [55.2, 295.0], [55.3, 295.0], [55.4, 295.0], [55.5, 295.0], [55.6, 295.0], [55.7, 296.0], [55.8, 296.0], [55.9, 296.0], [56.0, 296.0], [56.1, 296.0], [56.2, 296.0], [56.3, 296.0], [56.4, 296.0], [56.5, 297.0], [56.6, 297.0], [56.7, 297.0], [56.8, 297.0], [56.9, 297.0], [57.0, 297.0], [57.1, 297.0], [57.2, 297.0], [57.3, 298.0], [57.4, 298.0], [57.5, 298.0], [57.6, 298.0], [57.7, 298.0], [57.8, 299.0], [57.9, 299.0], [58.0, 299.0], [58.1, 300.0], [58.2, 300.0], [58.3, 300.0], [58.4, 301.0], [58.5, 301.0], [58.6, 302.0], [58.7, 303.0], [58.8, 303.0], [58.9, 304.0], [59.0, 304.0], [59.1, 304.0], [59.2, 304.0], [59.3, 305.0], [59.4, 305.0], [59.5, 305.0], [59.6, 305.0], [59.7, 305.0], [59.8, 306.0], [59.9, 306.0], [60.0, 306.0], [60.1, 306.0], [60.2, 306.0], [60.3, 307.0], [60.4, 307.0], [60.5, 307.0], [60.6, 308.0], [60.7, 308.0], [60.8, 308.0], [60.9, 309.0], [61.0, 309.0], [61.1, 310.0], [61.2, 311.0], [61.3, 311.0], [61.4, 312.0], [61.5, 313.0], [61.6, 313.0], [61.7, 314.0], [61.8, 315.0], [61.9, 315.0], [62.0, 315.0], [62.1, 316.0], [62.2, 316.0], [62.3, 317.0], [62.4, 317.0], [62.5, 318.0], [62.6, 320.0], [62.7, 322.0], [62.8, 325.0], [62.9, 331.0], [63.0, 332.0], [63.1, 333.0], [63.2, 334.0], [63.3, 334.0], [63.4, 335.0], [63.5, 335.0], [63.6, 336.0], [63.7, 338.0], [63.8, 341.0], [63.9, 342.0], [64.0, 342.0], [64.1, 343.0], [64.2, 344.0], [64.3, 346.0], [64.4, 348.0], [64.5, 349.0], [64.6, 350.0], [64.7, 351.0], [64.8, 351.0], [64.9, 352.0], [65.0, 352.0], [65.1, 353.0], [65.2, 355.0], [65.3, 358.0], [65.4, 359.0], [65.5, 363.0], [65.6, 365.0], [65.7, 366.0], [65.8, 366.0], [65.9, 370.0], [66.0, 371.0], [66.1, 372.0], [66.2, 373.0], [66.3, 374.0], [66.4, 374.0], [66.5, 375.0], [66.6, 377.0], [66.7, 378.0], [66.8, 379.0], [66.9, 380.0], [67.0, 381.0], [67.1, 385.0], [67.2, 386.0], [67.3, 387.0], [67.4, 391.0], [67.5, 391.0], [67.6, 392.0], [67.7, 394.0], [67.8, 395.0], [67.9, 396.0], [68.0, 397.0], [68.1, 401.0], [68.2, 404.0], [68.3, 406.0], [68.4, 407.0], [68.5, 412.0], [68.6, 413.0], [68.7, 414.0], [68.8, 414.0], [68.9, 415.0], [69.0, 416.0], [69.1, 422.0], [69.2, 424.0], [69.3, 425.0], [69.4, 426.0], [69.5, 426.0], [69.6, 427.0], [69.7, 427.0], [69.8, 428.0], [69.9, 428.0], [70.0, 429.0], [70.1, 430.0], [70.2, 431.0], [70.3, 431.0], [70.4, 432.0], [70.5, 433.0], [70.6, 433.0], [70.7, 434.0], [70.8, 435.0], [70.9, 438.0], [71.0, 439.0], [71.1, 440.0], [71.2, 442.0], [71.3, 445.0], [71.4, 450.0], [71.5, 451.0], [71.6, 452.0], [71.7, 452.0], [71.8, 453.0], [71.9, 453.0], [72.0, 454.0], [72.1, 454.0], [72.2, 455.0], [72.3, 455.0], [72.4, 457.0], [72.5, 458.0], [72.6, 461.0], [72.7, 465.0], [72.8, 466.0], [72.9, 468.0], [73.0, 470.0], [73.1, 472.0], [73.2, 477.0], [73.3, 478.0], [73.4, 479.0], [73.5, 479.0], [73.6, 480.0], [73.7, 481.0], [73.8, 482.0], [73.9, 484.0], [74.0, 485.0], [74.1, 486.0], [74.2, 489.0], [74.3, 490.0], [74.4, 491.0], [74.5, 494.0], [74.6, 501.0], [74.7, 502.0], [74.8, 503.0], [74.9, 504.0], [75.0, 506.0], [75.1, 507.0], [75.2, 508.0], [75.3, 512.0], [75.4, 514.0], [75.5, 515.0], [75.6, 516.0], [75.7, 517.0], [75.8, 518.0], [75.9, 519.0], [76.0, 520.0], [76.1, 521.0], [76.2, 525.0], [76.3, 531.0], [76.4, 533.0], [76.5, 534.0], [76.6, 544.0], [76.7, 548.0], [76.8, 572.0], [76.9, 591.0], [77.0, 604.0], [77.1, 607.0], [77.2, 608.0], [77.3, 611.0], [77.4, 615.0], [77.5, 620.0], [77.6, 632.0], [77.7, 634.0], [77.8, 635.0], [77.9, 676.0], [78.0, 734.0], [78.1, 770.0], [78.2, 790.0], [78.3, 794.0], [78.4, 799.0], [78.5, 810.0], [78.6, 821.0], [78.7, 836.0], [78.8, 895.0], [78.9, 900.0], [79.0, 904.0], [79.1, 940.0], [79.2, 942.0], [79.3, 961.0], [79.4, 1028.0], [79.5, 1255.0], [79.6, 1309.0], [79.7, 1402.0], [79.8, 1600.0], [79.9, 1648.0], [80.0, 1797.0], [80.1, 1939.0], [80.2, 1993.0], [80.3, 2091.0], [80.4, 2339.0], [80.5, 2433.0], [80.6, 2552.0], [80.7, 2841.0], [80.8, 2952.0], [80.9, 3121.0], [81.0, 3185.0], [81.1, 3188.0], [81.2, 3282.0], [81.3, 3522.0], [81.4, 3579.0], [81.5, 3582.0], [81.6, 3662.0], [81.7, 3783.0], [81.8, 3984.0], [81.9, 3986.0], [82.0, 4099.0], [82.1, 4133.0], [82.2, 4176.0], [82.3, 4232.0], [82.4, 4280.0], [82.5, 4339.0], [82.6, 4378.0], [82.7, 4382.0], [82.8, 4558.0], [82.9, 4568.0], [83.0, 4616.0], [83.1, 4631.0], [83.2, 4741.0], [83.3, 4839.0], [83.4, 4912.0], [83.5, 4919.0], [83.6, 5033.0], [83.7, 5040.0], [83.8, 5137.0], [83.9, 5160.0], [84.0, 5167.0], [84.1, 5199.0], [84.2, 5257.0], [84.3, 5262.0], [84.4, 5289.0], [84.5, 5319.0], [84.6, 5322.0], [84.7, 5325.0], [84.8, 5338.0], [84.9, 5339.0], [85.0, 5348.0], [85.1, 5365.0], [85.2, 5367.0], [85.3, 5416.0], [85.4, 5457.0], [85.5, 5474.0], [85.6, 5481.0], [85.7, 5490.0], [85.8, 5497.0], [85.9, 5505.0], [86.0, 5524.0], [86.1, 5528.0], [86.2, 5549.0], [86.3, 5553.0], [86.4, 5664.0], [86.5, 5811.0], [86.6, 5846.0], [86.7, 5879.0], [86.8, 5902.0], [86.9, 5907.0], [87.0, 5948.0], [87.1, 5953.0], [87.2, 6023.0], [87.3, 6074.0], [87.4, 6114.0], [87.5, 6136.0], [87.6, 6143.0], [87.7, 6155.0], [87.8, 6174.0], [87.9, 6192.0], [88.0, 6232.0], [88.1, 6282.0], [88.2, 6299.0], [88.3, 6314.0], [88.4, 6326.0], [88.5, 6331.0], [88.6, 6349.0], [88.7, 6434.0], [88.8, 6436.0], [88.9, 6438.0], [89.0, 6441.0], [89.1, 6490.0], [89.2, 6492.0], [89.3, 6493.0], [89.4, 6496.0], [89.5, 6568.0], [89.6, 6606.0], [89.7, 6665.0], [89.8, 6875.0], [89.9, 6947.0], [90.0, 7041.0], [90.1, 7084.0], [90.2, 7120.0], [90.3, 7201.0], [90.4, 7215.0], [90.5, 7253.0], [90.6, 7297.0], [90.7, 7332.0], [90.8, 7339.0], [90.9, 7359.0], [91.0, 7467.0], [91.1, 7570.0], [91.2, 7664.0], [91.3, 7798.0], [91.4, 7854.0], [91.5, 7864.0], [91.6, 7915.0], [91.7, 8015.0], [91.8, 8074.0], [91.9, 8235.0], [92.0, 8345.0], [92.1, 8453.0], [92.2, 8557.0], [92.3, 8596.0], [92.4, 8657.0], [92.5, 8723.0], [92.6, 8843.0], [92.7, 8952.0], [92.8, 9138.0], [92.9, 9241.0], [93.0, 9409.0], [93.1, 9625.0], [93.2, 9646.0], [93.3, 9670.0], [93.4, 9706.0], [93.5, 9777.0], [93.6, 10046.0], [93.7, 10281.0], [93.8, 10355.0], [93.9, 10390.0], [94.0, 10406.0], [94.1, 10547.0], [94.2, 10606.0], [94.3, 10741.0], [94.4, 10795.0], [94.5, 10863.0], [94.6, 10956.0], [94.7, 10958.0], [94.8, 10981.0], [94.9, 11092.0], [95.0, 11162.0], [95.1, 11233.0], [95.2, 11357.0], [95.3, 11461.0], [95.4, 11673.0], [95.5, 11909.0], [95.6, 12154.0], [95.7, 12155.0], [95.8, 12365.0], [95.9, 13084.0], [96.0, 13246.0], [96.1, 13821.0], [96.2, 14782.0], [96.3, 15145.0], [96.4, 15391.0], [96.5, 15483.0], [96.6, 15834.0], [96.7, 16578.0], [96.8, 17184.0], [96.9, 18052.0], [97.0, 19335.0], [97.1, 20374.0], [97.2, 21410.0], [97.3, 22254.0], [97.4, 22485.0], [97.5, 23831.0], [97.6, 27277.0], [97.7, 28698.0], [97.8, 30770.0], [97.9, 31633.0], [98.0, 32216.0], [98.1, 33982.0], [98.2, 35675.0], [98.3, 37748.0], [98.4, 40355.0], [98.5, 42646.0], [98.6, 47150.0], [98.7, 51545.0], [98.8, 53872.0], [98.9, 58483.0], [99.0, 64484.0], [99.1, 68413.0], [99.2, 71489.0], [99.3, 79603.0], [99.4, 88107.0], [99.5, 100116.0], [99.6, 101593.0], [99.7, 122961.0], [99.8, 130628.0], [99.9, 132715.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 67439.0, "series": [{"data": [[0.0, 5305.0], [139300.0, 1.0], [66700.0, 8.0], [68300.0, 5.0], [69900.0, 2.0], [81100.0, 3.0], [82700.0, 1.0], [89100.0, 3.0], [90700.0, 3.0], [92300.0, 2.0], [93900.0, 2.0], [95500.0, 2.0], [98700.0, 1.0], [101900.0, 12.0], [103500.0, 17.0], [127500.0, 1.0], [129100.0, 4.0], [140200.0, 5.0], [100.0, 14441.0], [33700.0, 1.0], [32900.0, 27.0], [34500.0, 10.0], [35300.0, 1.0], [37700.0, 46.0], [38500.0, 12.0], [36900.0, 5.0], [40900.0, 3.0], [40100.0, 4.0], [43300.0, 2.0], [46500.0, 1.0], [45700.0, 1.0], [48900.0, 1.0], [47300.0, 35.0], [200.0, 67439.0], [51300.0, 4.0], [52100.0, 2.0], [52900.0, 2.0], [53700.0, 43.0], [59300.0, 2.0], [62500.0, 1.0], [61700.0, 2.0], [64900.0, 3.0], [65800.0, 35.0], [72200.0, 11.0], [70600.0, 2.0], [300.0, 15002.0], [73800.0, 11.0], [75400.0, 2.0], [80200.0, 1.0], [89800.0, 2.0], [88200.0, 1.0], [93000.0, 2.0], [400.0, 9768.0], [105800.0, 9.0], [109000.0, 1.0], [500.0, 3541.0], [600.0, 1498.0], [700.0, 711.0], [800.0, 709.0], [900.0, 653.0], [1000.0, 187.0], [1100.0, 32.0], [1200.0, 147.0], [1300.0, 178.0], [1400.0, 102.0], [1500.0, 56.0], [1600.0, 213.0], [1700.0, 109.0], [1800.0, 110.0], [1900.0, 193.0], [2000.0, 146.0], [2100.0, 78.0], [2300.0, 126.0], [2200.0, 55.0], [2400.0, 101.0], [2500.0, 119.0], [2600.0, 59.0], [2800.0, 124.0], [2700.0, 29.0], [2900.0, 60.0], [3000.0, 107.0], [3100.0, 414.0], [3300.0, 66.0], [3200.0, 86.0], [3400.0, 42.0], [3500.0, 396.0], [3600.0, 168.0], [3700.0, 62.0], [3800.0, 51.0], [3900.0, 276.0], [4000.0, 124.0], [4200.0, 305.0], [4100.0, 304.0], [68100.0, 1.0], [4300.0, 460.0], [4500.0, 309.0], [4400.0, 72.0], [4600.0, 232.0], [71300.0, 1.0], [72900.0, 2.0], [4700.0, 197.0], [4800.0, 131.0], [5100.0, 561.0], [5000.0, 250.0], [4900.0, 330.0], [79300.0, 41.0], [5200.0, 552.0], [5300.0, 1151.0], [85700.0, 2.0], [5400.0, 930.0], [5500.0, 759.0], [5600.0, 91.0], [5800.0, 454.0], [92100.0, 2.0], [5700.0, 97.0], [6000.0, 321.0], [6100.0, 849.0], [5900.0, 561.0], [96900.0, 1.0], [6200.0, 397.0], [6300.0, 695.0], [100100.0, 112.0], [98500.0, 1.0], [6500.0, 168.0], [6400.0, 1104.0], [6600.0, 277.0], [103300.0, 1.0], [6900.0, 234.0], [6700.0, 50.0], [6800.0, 123.0], [7000.0, 252.0], [7100.0, 217.0], [7200.0, 486.0], [7300.0, 472.0], [7400.0, 148.0], [7500.0, 149.0], [7600.0, 144.0], [7900.0, 168.0], [7800.0, 340.0], [7700.0, 145.0], [8000.0, 271.0], [8100.0, 76.0], [128900.0, 2.0], [130500.0, 11.0], [8400.0, 181.0], [8200.0, 38.0], [8600.0, 273.0], [9200.0, 83.0], [8800.0, 190.0], [9000.0, 42.0], [140600.0, 5.0], [9600.0, 455.0], [9400.0, 33.0], [10200.0, 66.0], [10000.0, 70.0], [9800.0, 26.0], [10400.0, 133.0], [10600.0, 46.0], [10800.0, 91.0], [11000.0, 128.0], [11200.0, 252.0], [11600.0, 137.0], [11400.0, 105.0], [11800.0, 36.0], [12200.0, 12.0], [12000.0, 17.0], [12600.0, 85.0], [12400.0, 12.0], [12800.0, 15.0], [13000.0, 40.0], [13200.0, 39.0], [13600.0, 81.0], [13800.0, 5.0], [13400.0, 32.0], [14000.0, 7.0], [14200.0, 10.0], [14600.0, 13.0], [14800.0, 19.0], [14400.0, 17.0], [15200.0, 7.0], [15000.0, 47.0], [15400.0, 169.0], [15800.0, 40.0], [15600.0, 3.0], [16000.0, 23.0], [16800.0, 25.0], [16400.0, 4.0], [17200.0, 16.0], [18000.0, 13.0], [18400.0, 24.0], [17600.0, 12.0], [19200.0, 4.0], [18800.0, 14.0], [19600.0, 19.0], [20400.0, 4.0], [21200.0, 3.0], [20800.0, 26.0], [21600.0, 20.0], [22000.0, 3.0], [22400.0, 99.0], [23600.0, 16.0], [24000.0, 8.0], [24800.0, 8.0], [25200.0, 1.0], [26400.0, 1.0], [25600.0, 2.0], [27200.0, 35.0], [26800.0, 2.0], [28000.0, 55.0], [29200.0, 12.0], [28800.0, 6.0], [29600.0, 5.0], [30400.0, 2.0], [30800.0, 4.0], [31600.0, 71.0], [32000.0, 3.0], [32400.0, 1.0], [33600.0, 3.0], [34400.0, 1.0], [32800.0, 17.0], [131900.0, 3.0], [135100.0, 13.0], [36800.0, 10.0], [144700.0, 68.0], [44000.0, 2.0], [46400.0, 1.0], [45600.0, 1.0], [48800.0, 2.0], [50400.0, 3.0], [52000.0, 1.0], [55200.0, 3.0], [54400.0, 2.0], [53600.0, 1.0], [56000.0, 2.0], [56800.0, 1.0], [58400.0, 10.0], [60800.0, 1.0], [60000.0, 2.0], [63200.0, 2.0], [64800.0, 4.0], [64000.0, 2.0], [67200.0, 4.0], [68800.0, 1.0], [65600.0, 4.0], [73600.0, 2.0], [72000.0, 1.0], [83200.0, 1.0], [84800.0, 1.0], [91200.0, 2.0], [92800.0, 2.0], [97600.0, 1.0], [99200.0, 1.0], [102400.0, 1.0], [108800.0, 6.0], [129600.0, 47.0], [131200.0, 3.0], [132100.0, 19.0], [67100.0, 4.0], [68700.0, 8.0], [71900.0, 2.0], [70300.0, 1.0], [75100.0, 2.0], [81500.0, 1.0], [87900.0, 1.0], [97500.0, 1.0], [94300.0, 1.0], [99100.0, 1.0], [100700.0, 1.0], [113500.0, 1.0], [139400.0, 2.0], [33900.0, 15.0], [34700.0, 6.0], [35500.0, 17.0], [140300.0, 2.0], [38700.0, 7.0], [37100.0, 35.0], [39500.0, 3.0], [40300.0, 36.0], [42700.0, 1.0], [41100.0, 10.0], [45900.0, 1.0], [49100.0, 1.0], [47500.0, 2.0], [49900.0, 3.0], [50700.0, 1.0], [51500.0, 20.0], [52300.0, 1.0], [53900.0, 47.0], [56300.0, 5.0], [57100.0, 4.0], [55500.0, 1.0], [58700.0, 2.0], [57900.0, 1.0], [62700.0, 2.0], [65100.0, 1.0], [64300.0, 7.0], [63500.0, 8.0], [67800.0, 2.0], [69400.0, 2.0], [71000.0, 2.0], [77400.0, 1.0], [82200.0, 1.0], [83800.0, 3.0], [87000.0, 22.0], [91800.0, 1.0], [96600.0, 2.0], [95000.0, 1.0], [99800.0, 2.0], [131600.0, 37.0], [66900.0, 4.0], [68500.0, 3.0], [73300.0, 2.0], [81300.0, 1.0], [79700.0, 2.0], [78100.0, 4.0], [82900.0, 3.0], [84500.0, 1.0], [89300.0, 3.0], [92500.0, 1.0], [94100.0, 1.0], [100500.0, 1.0], [102100.0, 12.0], [122900.0, 9.0], [124500.0, 4.0], [127700.0, 17.0], [129300.0, 5.0], [130900.0, 4.0], [16500.0, 131.0], [16900.0, 7.0], [17300.0, 22.0], [18100.0, 15.0], [17700.0, 19.0], [18500.0, 2.0], [19300.0, 57.0], [18900.0, 11.0], [19700.0, 5.0], [20100.0, 3.0], [20500.0, 21.0], [20900.0, 1.0], [22500.0, 2.0], [21700.0, 18.0], [22100.0, 1.0], [23300.0, 4.0], [22900.0, 7.0], [23700.0, 9.0], [24900.0, 6.0], [26100.0, 1.0], [25700.0, 2.0], [27300.0, 12.0], [26900.0, 1.0], [28100.0, 15.0], [28500.0, 1.0], [27700.0, 2.0], [29300.0, 20.0], [30100.0, 6.0], [29700.0, 4.0], [30500.0, 1.0], [31700.0, 70.0], [30900.0, 2.0], [31300.0, 1.0], [32100.0, 10.0], [33800.0, 1.0], [34600.0, 6.0], [33000.0, 3.0], [131100.0, 17.0], [35400.0, 6.0], [37800.0, 37.0], [42600.0, 38.0], [41000.0, 14.0], [41800.0, 9.0], [44200.0, 7.0], [46600.0, 1.0], [49000.0, 1.0], [48200.0, 2.0], [50600.0, 1.0], [51400.0, 11.0], [53000.0, 1.0], [53800.0, 83.0], [54600.0, 26.0], [57000.0, 5.0], [59400.0, 2.0], [61000.0, 3.0], [60200.0, 19.0], [62600.0, 3.0], [63400.0, 1.0], [61800.0, 2.0], [64200.0, 2.0], [65000.0, 2.0], [69200.0, 3.0], [72400.0, 1.0], [75600.0, 27.0], [80400.0, 3.0], [78800.0, 1.0], [85200.0, 8.0], [86800.0, 15.0], [90000.0, 1.0], [93200.0, 7.0], [96400.0, 2.0], [130000.0, 3.0], [162400.0, 1.0], [131300.0, 15.0], [65900.0, 26.0], [69100.0, 1.0], [67500.0, 1.0], [70700.0, 1.0], [72300.0, 2.0], [75500.0, 2.0], [73900.0, 1.0], [80300.0, 1.0], [85100.0, 2.0], [86700.0, 1.0], [89900.0, 2.0], [93100.0, 2.0], [96300.0, 1.0], [97900.0, 2.0], [102700.0, 2.0], [132200.0, 19.0], [34900.0, 4.0], [36500.0, 18.0], [139500.0, 3.0], [39700.0, 1.0], [42100.0, 3.0], [42900.0, 2.0], [41300.0, 3.0], [44500.0, 4.0], [45300.0, 1.0], [46900.0, 22.0], [46100.0, 1.0], [47700.0, 1.0], [50900.0, 19.0], [52500.0, 2.0], [53300.0, 1.0], [54900.0, 4.0], [54100.0, 1.0], [55700.0, 2.0], [56500.0, 1.0], [59700.0, 1.0], [62900.0, 1.0], [63700.0, 29.0], [64500.0, 1.0], [65300.0, 1.0], [68200.0, 6.0], [66600.0, 1.0], [69800.0, 2.0], [71400.0, 15.0], [76200.0, 2.0], [77800.0, 1.0], [79400.0, 1.0], [84200.0, 2.0], [87400.0, 2.0], [92200.0, 1.0], [95400.0, 1.0], [98600.0, 1.0], [100200.0, 21.0], [103400.0, 20.0], [130600.0, 31.0], [129000.0, 5.0], [169200.0, 6.0], [68900.0, 58.0], [67300.0, 1.0], [65700.0, 4.0], [73700.0, 3.0], [72100.0, 5.0], [75300.0, 1.0], [76900.0, 3.0], [80100.0, 1.0], [83300.0, 1.0], [88100.0, 2.0], [89700.0, 2.0], [97700.0, 1.0], [96100.0, 1.0], [128100.0, 10.0], [8700.0, 80.0], [8300.0, 152.0], [8500.0, 265.0], [132600.0, 2.0], [8900.0, 125.0], [9100.0, 128.0], [9300.0, 103.0], [9500.0, 82.0], [9700.0, 201.0], [9900.0, 94.0], [10100.0, 43.0], [10500.0, 178.0], [10700.0, 353.0], [10300.0, 426.0], [10900.0, 451.0], [11100.0, 159.0], [11500.0, 26.0], [11700.0, 24.0], [11300.0, 142.0], [12100.0, 330.0], [11900.0, 96.0], [12700.0, 2.0], [12300.0, 7.0], [12500.0, 7.0], [13100.0, 99.0], [13300.0, 23.0], [12900.0, 2.0], [13700.0, 4.0], [13500.0, 5.0], [14300.0, 12.0], [14100.0, 2.0], [13900.0, 4.0], [14500.0, 59.0], [14700.0, 36.0], [15300.0, 19.0], [15100.0, 175.0], [14900.0, 23.0], [15700.0, 39.0], [15500.0, 64.0], [15900.0, 2.0], [16100.0, 1.0], [16300.0, 8.0], [16600.0, 19.0], [17400.0, 26.0], [17000.0, 17.0], [17800.0, 13.0], [18200.0, 15.0], [19400.0, 5.0], [18600.0, 17.0], [19000.0, 13.0], [19800.0, 23.0], [21400.0, 41.0], [22200.0, 90.0], [21800.0, 30.0], [22600.0, 14.0], [23400.0, 27.0], [23000.0, 2.0], [23800.0, 21.0], [25000.0, 2.0], [24600.0, 18.0], [25800.0, 1.0], [26600.0, 14.0], [26200.0, 2.0], [27400.0, 12.0], [27000.0, 3.0], [28600.0, 12.0], [27800.0, 4.0], [29000.0, 2.0], [30600.0, 34.0], [29800.0, 3.0], [30200.0, 1.0], [31000.0, 15.0], [31400.0, 22.0], [31800.0, 8.0], [32600.0, 14.0], [32200.0, 44.0], [34800.0, 56.0], [34000.0, 2.0], [35600.0, 5.0], [36400.0, 3.0], [38800.0, 1.0], [37200.0, 6.0], [40400.0, 34.0], [42000.0, 1.0], [44400.0, 2.0], [46000.0, 8.0], [45200.0, 2.0], [47600.0, 1.0], [50000.0, 5.0], [49200.0, 3.0], [50800.0, 10.0], [52400.0, 3.0], [54000.0, 14.0], [56400.0, 1.0], [58000.0, 2.0], [59600.0, 1.0], [61200.0, 2.0], [62800.0, 2.0], [65200.0, 1.0], [64400.0, 29.0], [63600.0, 1.0], [66400.0, 2.0], [71200.0, 3.0], [79200.0, 5.0], [80800.0, 1.0], [85600.0, 1.0], [82400.0, 1.0], [87200.0, 2.0], [101600.0, 3.0], [100000.0, 58.0], [98400.0, 1.0], [111200.0, 1.0], [127200.0, 2.0], [132800.0, 5.0], [168900.0, 2.0], [66300.0, 11.0], [67900.0, 1.0], [72700.0, 2.0], [74300.0, 2.0], [75900.0, 1.0], [80700.0, 17.0], [85500.0, 1.0], [83900.0, 2.0], [82300.0, 1.0], [87100.0, 1.0], [93500.0, 3.0], [96700.0, 2.0], [99900.0, 1.0], [101500.0, 1.0], [104700.0, 6.0], [35900.0, 8.0], [36700.0, 7.0], [35100.0, 15.0], [39900.0, 27.0], [39100.0, 1.0], [40700.0, 2.0], [41500.0, 2.0], [47100.0, 85.0], [50300.0, 1.0], [51100.0, 13.0], [53500.0, 1.0], [55900.0, 2.0], [58300.0, 2.0], [57500.0, 5.0], [60700.0, 1.0], [63100.0, 1.0], [64700.0, 2.0], [63900.0, 6.0], [68600.0, 5.0], [67000.0, 1.0], [71800.0, 1.0], [70200.0, 2.0], [76600.0, 1.0], [78200.0, 1.0], [79800.0, 2.0], [86200.0, 1.0], [89400.0, 1.0], [94200.0, 2.0], [92600.0, 1.0], [129400.0, 6.0], [149200.0, 2.0], [140500.0, 4.0], [143700.0, 1.0], [69300.0, 3.0], [66100.0, 2.0], [70900.0, 2.0], [74100.0, 1.0], [80500.0, 2.0], [83700.0, 1.0], [86900.0, 33.0], [93300.0, 1.0], [96500.0, 1.0], [94900.0, 1.0], [101300.0, 10.0], [130100.0, 10.0], [138200.0, 3.0], [135000.0, 8.0], [144600.0, 2.0], [16700.0, 4.0], [17100.0, 70.0], [17500.0, 10.0], [19100.0, 1.0], [19500.0, 37.0], [19900.0, 14.0], [20300.0, 42.0], [21100.0, 58.0], [20700.0, 5.0], [21500.0, 7.0], [21900.0, 6.0], [22700.0, 50.0], [23100.0, 1.0], [23500.0, 4.0], [24300.0, 2.0], [24700.0, 26.0], [25100.0, 2.0], [26300.0, 3.0], [26700.0, 5.0], [27900.0, 25.0], [28700.0, 36.0], [29500.0, 1.0], [29100.0, 2.0], [30700.0, 75.0], [30300.0, 1.0], [31100.0, 14.0], [31500.0, 8.0], [32700.0, 30.0], [32300.0, 2.0], [31900.0, 8.0], [33400.0, 3.0], [132700.0, 25.0], [35000.0, 14.0], [35800.0, 2.0], [36600.0, 20.0], [38200.0, 3.0], [37400.0, 11.0], [40600.0, 2.0], [39000.0, 2.0], [42200.0, 44.0], [46200.0, 2.0], [50200.0, 1.0], [53400.0, 2.0], [54200.0, 1.0], [56600.0, 1.0], [58200.0, 7.0], [63000.0, 8.0], [62200.0, 2.0], [63800.0, 3.0], [65400.0, 2.0], [64600.0, 3.0], [68400.0, 15.0], [70000.0, 22.0], [71600.0, 1.0], [74800.0, 2.0], [76400.0, 1.0], [81200.0, 3.0], [79600.0, 1.0], [90800.0, 2.0], [94000.0, 2.0], [95600.0, 4.0], [102000.0, 48.0], [100400.0, 7.0], [103600.0, 2.0], [113200.0, 1.0], [127600.0, 11.0], [129200.0, 2.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 169200.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 474.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 111969.0, "series": [{"data": [[0.0, 111969.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 7744.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 29908.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 474.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 2395.355823595929, "minX": 1.6828614E12, "maxY": 3000.0, "series": [{"data": [[1.6828614E12, 3000.0], [1.68286158E12, 3000.0], [1.68286152E12, 3000.0], [1.6828617E12, 2395.355823595929], [1.68286164E12, 3000.0], [1.68286146E12, 3000.0]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6828617E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 192.0, "minX": 406.0, "maxY": 72286.0, "series": [{"data": [[414.0, 28801.0], [415.0, 28798.0], [413.0, 29808.0], [412.0, 29810.0], [411.0, 30818.0], [410.0, 30820.0], [409.0, 31828.0], [408.0, 31829.0], [407.0, 32838.0], [406.0, 32839.0], [430.0, 20724.0], [431.0, 20721.0], [429.0, 21733.0], [428.0, 21735.0], [427.0, 22741.0], [426.0, 22744.0], [425.0, 23751.0], [424.0, 23754.0], [423.0, 24761.0], [417.0, 27789.0], [416.0, 27791.0], [419.0, 26780.0], [418.0, 26782.0], [422.0, 24762.0], [421.0, 25771.0], [420.0, 25772.0], [446.0, 23840.0], [447.0, 23838.0], [445.0, 23843.0], [434.0, 23852.0], [443.0, 23845.0], [442.0, 23846.0], [441.0, 23845.0], [440.0, 23846.0], [439.0, 23848.0], [437.0, 23849.5], [436.0, 23849.0], [462.0, 26619.5], [463.0, 16700.0], [460.0, 17446.0], [450.0, 23835.0], [449.0, 23836.0], [448.0, 23837.0], [459.0, 17448.0], [458.0, 18440.0], [457.0, 18440.0], [456.0, 25650.0], [454.0, 19710.0], [453.0, 19713.0], [452.0, 23831.0], [478.0, 9310.0], [479.0, 8302.0], [477.0, 9312.0], [476.0, 10320.0], [475.0, 10321.0], [474.0, 11329.0], [473.0, 11330.0], [472.0, 12338.0], [471.0, 12340.0], [465.0, 15368.0], [464.0, 16698.0], [467.0, 14359.0], [466.0, 15367.0], [470.0, 13348.0], [469.0, 13350.0], [468.0, 14358.0], [494.0, 36631.0], [495.0, 36629.0], [492.0, 36632.0], [482.0, 7291.0], [481.0, 7293.0], [480.0, 8300.0], [491.0, 36634.0], [490.0, 36634.0], [489.0, 36635.5], [488.0, 36636.0], [487.0, 36635.0], [486.0, 36635.5], [484.0, 36636.0], [508.0, 36503.0], [510.0, 36503.0], [511.0, 36503.0], [509.0, 21344.5], [507.0, 36503.0], [505.0, 36505.0], [503.0, 6186.0], [497.0, 36626.0], [496.0, 36628.0], [499.0, 36621.0], [498.0, 36624.0], [502.0, 36614.0], [501.0, 36616.0], [500.0, 36621.0], [536.0, 6672.666666666667], [541.0, 6830.5], [542.0, 6923.0], [540.0, 6738.0], [539.0, 6920.0], [537.0, 6738.0], [526.0, 6927.0], [512.0, 36503.0], [515.0, 36502.5], [513.0, 36502.0], [518.0, 21713.5], [516.0, 36502.0], [524.0, 36495.0], [523.0, 36496.0], [522.0, 6178.0], [521.0, 36498.0], [520.0, 21714.0], [535.0, 6175.0], [532.0, 6550.0], [530.0, 6548.0], [528.0, 6925.333333333333], [573.0, 5954.0], [574.0, 6143.0], [561.0, 6818.0], [563.0, 6817.5], [562.0, 6908.0], [572.0, 6710.5], [571.0, 6891.0], [569.0, 6905.0], [568.0, 6719.0], [558.0, 6914.5], [547.0, 6922.0], [544.0, 6917.5], [549.0, 6921.0], [548.0, 6609.0], [551.0, 6168.0], [550.0, 6169.0], [556.0, 6912.5], [554.0, 6823.5], [553.0, 6164.0], [567.0, 6720.0], [566.0, 6908.0], [565.0, 6913.0], [564.0, 6727.0], [600.0, 5924.0], [606.0, 6111.0], [607.0, 6113.0], [593.0, 6121.0], [592.0, 6121.0], [605.0, 6114.0], [604.0, 6114.0], [603.0, 6114.0], [590.0, 6122.0], [576.0, 6140.0], [578.0, 6424.5], [577.0, 6893.0], [581.0, 6139.0], [579.0, 6893.0], [583.0, 6135.0], [582.0, 6890.0], [589.0, 6127.0], [588.0, 6128.0], [587.0, 6128.0], [586.0, 6130.0], [585.0, 6130.0], [599.0, 6115.5], [597.0, 6118.0], [596.0, 6119.0], [595.0, 6119.0], [633.0, 6077.0], [638.0, 6631.0], [639.0, 6626.0], [626.0, 6083.0], [624.0, 6089.0], [628.0, 6647.0], [627.0, 6646.5], [637.0, 6632.0], [636.0, 6633.0], [634.0, 6638.0], [632.0, 6079.0], [615.0, 6097.0], [614.0, 6099.0], [613.0, 6100.0], [612.0, 6099.0], [611.0, 6104.0], [610.0, 6106.0], [609.0, 6112.0], [608.0, 6113.0], [623.0, 6089.666666666667], [620.0, 6090.0], [619.0, 6092.0], [618.0, 6096.0], [617.0, 6095.5], [631.0, 6646.0], [630.0, 6081.0], [665.0, 6554.0], [670.0, 6549.0], [671.0, 6548.0], [657.0, 6568.0], [659.0, 6566.0], [658.0, 6566.0], [661.0, 6560.0], [660.0, 6565.0], [669.0, 6550.5], [667.0, 6551.0], [666.0, 6550.0], [664.0, 6555.0], [647.0, 6593.0], [646.0, 6593.0], [645.0, 6594.0], [644.0, 6597.0], [643.0, 6597.0], [641.0, 6625.0], [640.0, 6626.0], [655.0, 6573.0], [654.0, 6582.0], [653.0, 6583.0], [652.0, 6585.5], [650.0, 6589.0], [649.0, 6591.0], [648.0, 6593.0], [663.0, 6557.0], [662.0, 6557.0], [702.0, 6130.0], [703.0, 6130.0], [689.0, 6131.0], [700.0, 6131.0], [699.0, 6130.666666666667], [698.0, 6131.0], [697.0, 6131.0], [687.0, 6132.0], [672.0, 6547.0], [674.0, 6539.0], [673.0, 6546.0], [678.0, 6535.5], [676.0, 6537.5], [686.0, 6133.0], [684.0, 6195.333333333333], [683.0, 6133.0], [680.0, 6133.0], [695.0, 6317.0], [694.0, 6131.5], [693.0, 6132.0], [690.0, 6131.5], [728.0, 6303.0], [732.0, 6108.0], [735.0, 6104.0], [722.0, 6119.5], [720.0, 6119.5], [725.0, 6119.0], [724.0, 6212.5], [734.0, 6105.0], [733.0, 6107.0], [731.0, 6108.0], [730.0, 6294.0], [729.0, 6297.0], [718.0, 6211.0], [705.0, 6129.0], [707.0, 6128.0], [706.0, 6128.0], [709.0, 6125.0], [708.0, 6126.0], [711.0, 6125.0], [710.0, 6126.0], [716.0, 6119.0], [715.0, 6121.0], [713.0, 6122.0], [712.0, 6124.0], [727.0, 6117.0], [726.0, 6118.0], [766.0, 6262.5], [767.0, 6256.0], [753.0, 6090.0], [752.0, 6280.0], [756.0, 6266.0], [755.0, 6181.5], [764.0, 6267.0], [763.0, 6079.0], [762.0, 6262.0], [761.0, 6082.0], [760.0, 6263.0], [743.0, 6285.0], [742.0, 6192.5], [740.0, 6101.0], [739.0, 6100.5], [737.0, 6102.0], [736.0, 6102.0], [751.0, 6091.0], [750.0, 6218.0], [747.0, 6216.666666666667], [744.0, 6282.0], [759.0, 6269.5], [757.0, 6086.0], [797.0, 6057.0], [798.0, 6057.0], [784.0, 6250.0], [787.0, 6063.0], [786.0, 6067.5], [796.0, 6246.0], [795.0, 6239.0], [794.0, 6149.5], [792.0, 6060.0], [783.0, 6250.0], [770.0, 6074.5], [768.0, 6075.0], [775.0, 6073.0], [773.0, 6259.333333333333], [782.0, 6249.0], [781.0, 6161.5], [779.0, 6256.0], [778.0, 6072.0], [777.0, 6260.0], [776.0, 6163.5], [791.0, 6061.0], [790.0, 6248.0], [789.0, 6243.0], [788.0, 6243.0], [824.0, 6222.0], [830.0, 6218.5], [831.0, 6216.0], [817.0, 6040.0], [819.0, 6224.0], [818.0, 6040.0], [828.0, 6032.0], [827.0, 6033.0], [826.0, 6126.5], [815.0, 6041.5], [800.0, 6145.0], [803.0, 6051.0], [802.0, 6051.0], [805.0, 6231.0], [804.0, 6051.0], [807.0, 6228.0], [806.0, 6235.0], [813.0, 6223.5], [811.0, 6139.5], [809.0, 6046.0], [808.0, 6233.0], [823.0, 6222.0], [822.0, 6218.0], [821.0, 6039.0], [820.0, 6221.0], [857.0, 6189.5], [862.0, 5999.0], [863.0, 6184.0], [848.0, 6194.0], [850.0, 6197.0], [849.0, 6198.0], [852.0, 6195.0], [851.0, 6008.0], [861.0, 6003.0], [860.0, 6181.0], [858.0, 6003.0], [856.0, 6192.0], [839.0, 6197.0], [838.0, 6207.5], [836.0, 6204.0], [835.0, 6203.0], [834.0, 6023.0], [833.0, 6024.0], [832.0, 6207.0], [846.0, 6193.0], [845.0, 6194.0], [844.0, 6196.0], [843.0, 6015.0], [842.0, 6015.0], [841.0, 6198.0], [840.0, 6019.0], [854.0, 6005.0], [853.0, 6187.0], [888.0, 6164.0], [894.0, 6153.0], [895.0, 5977.0], [883.0, 5987.0], [882.0, 6075.5], [893.0, 6069.0], [891.0, 5980.0], [890.0, 6074.0], [879.0, 6174.0], [866.0, 6183.0], [865.0, 6181.0], [868.0, 5994.0], [867.0, 5996.0], [871.0, 6082.5], [869.0, 6181.0], [878.0, 6175.0], [877.0, 5989.0], [876.0, 5990.0], [875.0, 5991.0], [874.0, 6081.5], [872.0, 5992.0], [887.0, 6161.0], [886.0, 5984.0], [885.0, 6173.0], [884.0, 6078.0], [926.0, 6054.5], [927.0, 6137.0], [914.0, 5964.0], [913.0, 5964.0], [924.0, 6143.0], [923.0, 6147.0], [921.0, 6053.0], [920.0, 6148.0], [911.0, 6058.5], [899.0, 6098.333333333333], [896.0, 6160.0], [902.0, 6157.0], [901.0, 6064.5], [909.0, 5966.0], [908.0, 6030.333333333333], [905.0, 6091.666666666667], [919.0, 6142.0], [918.0, 6145.0], [917.0, 6140.0], [915.0, 5963.0], [956.0, 5947.0], [959.0, 6108.0], [946.0, 6014.333333333333], [958.0, 6108.0], [957.0, 5927.0], [955.0, 6125.0], [954.0, 6124.0], [953.0, 6129.0], [952.0, 6132.75], [943.0, 6046.5], [932.0, 5954.0], [929.0, 6048.0], [935.0, 6136.0], [933.0, 6140.0], [941.0, 6091.5], [937.0, 5954.0], [936.0, 6075.333333333333], [949.0, 6136.0], [947.0, 5952.0], [986.0, 6093.0], [978.0, 10512.0], [990.0, 5902.0], [991.0, 6088.0], [977.0, 6095.0], [989.0, 6083.0], [985.0, 8683.0], [966.0, 5920.0], [965.0, 6105.0], [963.0, 6107.0], [962.0, 6111.0], [961.0, 6108.0], [960.0, 6111.0], [975.0, 5909.0], [974.0, 5917.0], [973.0, 5917.5], [971.0, 6011.0], [970.0, 5918.0], [968.0, 5979.0], [982.0, 6001.0], [981.0, 5908.0], [980.0, 6001.0], [1009.0, 6071.0], [1021.0, 29736.0], [1018.0, 8276.5], [1016.0, 10064.666666666666], [999.0, 5988.5], [998.0, 5900.0], [997.0, 7767.5], [994.0, 28096.333333333332], [1013.0, 72286.0], [1012.0, 5883.0], [1011.0, 8090.5], [1008.0, 6071.0], [1007.0, 7620.0], [1005.0, 6087.0], [1004.0, 6081.0], [1003.0, 39195.5], [1001.0, 8296.0], [1082.0, 6025.5], [1056.0, 6036.0], [1058.0, 10829.0], [1062.0, 8150.5], [1060.0, 10250.0], [1064.0, 5848.0], [1066.0, 72252.0], [1068.0, 10826.0], [1084.0, 6019.0], [1080.0, 8238.5], [1078.0, 6024.5], [1076.0, 7378.666666666667], [1024.0, 7664.666666666667], [1026.0, 39075.0], [1028.0, 5865.0], [1030.0, 6043.0], [1032.0, 10842.0], [1034.0, 6040.0], [1038.0, 5853.0], [1054.0, 5850.0], [1050.0, 7156.0], [1048.0, 9397.0], [1040.0, 5852.0], [1148.0, 5989.0], [1124.0, 6009.5], [1120.0, 5923.0], [1122.0, 5829.0], [1130.0, 6009.0], [1134.0, 6009.0], [1146.0, 5989.0], [1144.0, 5999.0], [1142.0, 5997.0], [1140.0, 72221.0], [1138.0, 5910.5], [1102.0, 7074.75], [1098.0, 5928.0], [1096.0, 10438.0], [1116.0, 10434.0], [1114.0, 9376.0], [1108.0, 41524.5], [1106.0, 7699.0], [1208.0, 5839.666666666667], [1212.0, 5894.0], [1184.0, 5921.0], [1186.0, 72137.0], [1190.0, 5732.0], [1196.0, 5917.0], [1202.0, 5817.0], [1164.0, 5962.0], [1162.0, 5776.5], [1154.0, 5971.0], [1152.0, 9344.0], [1176.0, 10528.0], [1174.0, 5923.0], [1170.0, 5773.0], [1168.0, 5955.0], [1246.0, 5829.0], [1242.0, 5707.0], [1220.0, 5834.333333333333], [1224.0, 10689.0], [1230.0, 5770.333333333333], [1238.0, 5707.0], [1234.0, 5708.0], [1232.0, 5895.0], [1330.0, 5881.0], [1342.0, 6750.25], [1340.0, 5886.333333333333], [1338.0, 10679.0], [1310.0, 5888.0], [1288.0, 5888.0], [1292.0, 5885.0], [1290.0, 5884.5], [1308.0, 5888.0], [1302.0, 5702.0], [1300.0, 7997.0], [1296.0, 5890.0], [1324.0, 10680.0], [1322.0, 5887.0], [1400.0, 8204.5], [1404.0, 5803.0], [1376.0, 5820.0], [1380.0, 5816.0], [1384.0, 5812.0], [1382.0, 5816.0], [1388.0, 5813.0], [1406.0, 5618.0], [1402.0, 5808.0], [1398.0, 5807.5], [1396.0, 5811.0], [1392.0, 5811.0], [1346.0, 5884.5], [1350.0, 6101.533333333333], [1348.0, 5879.0], [1352.0, 5788.416666666667], [1356.0, 72100.0], [1358.0, 8629.666666666666], [1374.0, 5820.0], [1372.0, 5829.0], [1368.0, 5859.0], [1364.0, 5880.0], [1362.0, 6839.6], [1360.0, 8107.4], [1466.0, 3865.0], [1460.0, 4721.0], [1442.0, 8971.0], [1450.0, 8965.0], [1452.0, 4740.0], [1454.0, 4741.0], [1462.0, 3960.0], [1458.0, 8095.0], [1456.0, 4740.0], [1408.0, 5799.0], [1410.0, 5798.0], [1414.0, 5791.0], [1416.0, 5785.0], [1418.0, 5781.0], [1420.0, 5774.0], [1422.0, 5771.0], [1434.0, 4756.333333333333], [1430.0, 4972.0], [1474.0, 3860.5], [1480.0, 3855.0], [1504.0, 3047.0], [1506.0, 2037.0], [1472.0, 3861.0], [1478.0, 8074.0], [1502.0, 8616.0], [1500.0, 3828.0], [1498.0, 8627.0], [1490.0, 8636.0], [1488.0, 3847.0], [1672.0, 258.0], [1694.0, 192.0], [1674.0, 257.0340909090909], [1676.0, 257.0], [1678.0, 257.1428571428571], [1690.0, 256.0], [1684.0, 257.0], [1682.0, 256.75], [1680.0, 257.25], [2030.0, 36542.5], [2120.0, 372.39361702127667], [2148.0, 240.33333333333334], [2060.0, 5538.0], [2080.0, 6113.0], [2140.0, 370.75], [2136.0, 370.0], [2124.0, 372.375], [2132.0, 371.0], [2128.0, 371.25], [2380.0, 301.0], [2376.0, 302.0], [2428.0, 297.0], [2372.0, 300.0], [2384.0, 300.1489361702129], [2388.0, 299.4], [2392.0, 299.0], [2396.0, 299.5], [2424.0, 298.0], [2420.0, 297.3333333333333], [2416.0, 297.5], [2412.0, 298.09090909090907], [2408.0, 298.3333333333333], [2404.0, 298.44444444444446], [2400.0, 298.62500000000006], [2432.0, 296.0], [2440.0, 295.5], [2484.0, 284.3333333333333], [2436.0, 298.0], [2444.0, 295.25], [2452.0, 287.0], [2480.0, 283.5], [2476.0, 285.3333333333333], [2472.0, 286.3333333333333], [2468.0, 286.5], [2644.0, 309.3333333333333], [2652.0, 309.75], [2648.0, 310.0], [2672.0, 299.0], [2668.0, 308.40000000000003], [2664.0, 308.6666666666667], [2788.0, 6393.0], [2764.0, 4191.0], [2808.0, 6373.0], [2756.0, 4400.0], [2768.0, 6415.0], [2772.0, 6412.5], [2776.0, 6405.0], [2812.0, 6372.5], [2792.0, 6387.0], [2784.0, 4853.0], [2688.0, 296.0], [2692.0, 296.0], [2696.0, 295.0], [2700.0, 6757.0], [2716.0, 4412.0], [2748.0, 6442.0], [2744.0, 6457.0], [2740.0, 6600.0], [2736.0, 6639.0], [2732.0, 6639.0], [2720.0, 5222.333333333333], [2844.0, 8152.0], [2892.0, 5428.5], [2896.0, 6775.5], [2904.0, 5412.0], [2832.0, 5460.0], [2828.0, 4011.0], [2816.0, 6346.0], [2856.0, 7250.0], [2964.0, 6724.5], [2968.0, 8053.0], [3000.0, 3147.0646331130515], [2984.0, 5356.0], [2960.0, 8074.0], [2948.0, 8074.0], [2121.0, 372.3636363636363], [2069.0, 5537.0], [2145.0, 407.0], [2093.0, 376.0], [2141.0, 370.87272727272705], [2137.0, 370.6153846153846], [2125.0, 373.0], [2117.0, 373.2439024390245], [2113.0, 374.5], [2133.0, 371.3333333333333], [2373.0, 300.0], [2369.0, 300.0], [2377.0, 301.5], [2381.0, 300.0], [2385.0, 300.0], [2389.0, 298.0], [2393.0, 299.5], [2429.0, 294.0], [2425.0, 296.5], [2413.0, 298.6], [2409.0, 297.7142857142857], [2405.0, 298.0], [2401.0, 299.2857142857143], [2433.0, 296.375], [2489.0, 282.5], [2437.0, 296.0], [2453.0, 287.0], [2457.0, 287.0], [2461.0, 287.0], [2485.0, 283.0], [2481.0, 285.0], [2477.0, 285.0], [2473.0, 285.0], [2469.0, 286.0], [2465.0, 287.0], [2637.0, 315.5], [2641.0, 313.75], [2673.0, 299.0], [2645.0, 309.8], [2649.0, 310.0], [2677.0, 298.0], [2665.0, 309.0], [2661.0, 826.5882352941176], [2761.0, 6425.666666666667], [2753.0, 5417.5], [2765.0, 6420.0], [2769.0, 4184.0], [2773.0, 6409.0], [2777.0, 6404.0], [2805.0, 6378.0], [2793.0, 6381.0], [2785.0, 6394.0], [2697.0, 295.0], [2701.0, 4524.0], [2713.0, 6643.5], [2749.0, 4211.5], [2745.0, 4214.0], [2741.0, 6555.0], [2737.0, 5827.6], [2729.0, 5095.749999999999], [2721.0, 4614.0], [2929.0, 8074.0], [2933.0, 8076.0], [2941.0, 6727.0], [2889.0, 6776.0], [2901.0, 7045.2], [2905.0, 5403.0], [2833.0, 5460.0], [2829.0, 5328.0], [2817.0, 6344.0], [2873.0, 5436.5], [2853.0, 5754.222222222223], [2849.0, 5455.25], [2973.0, 5356.333333333333], [2965.0, 8070.0], [2957.0, 8074.0], [2953.0, 8074.0], [2949.0, 5379.0], [1083.0, 6021.0], [1063.0, 5848.0], [1087.0, 8421.5], [1059.0, 5943.0], [1065.0, 9391.0], [1067.0, 10450.0], [1073.0, 7709.5], [1055.0, 5944.0], [1027.0, 9410.0], [1029.0, 72270.0], [1031.0, 9407.0], [1033.0, 6049.0], [1035.0, 10838.0], [1037.0, 6034.5], [1053.0, 7623.0], [1047.0, 5914.0], [1043.0, 8562.666666666666], [1041.0, 6033.0], [1071.0, 7710.5], [1069.0, 10449.0], [1147.0, 9352.0], [1151.0, 5987.0], [1123.0, 6016.0], [1127.0, 6011.666666666667], [1129.0, 5920.5], [1133.0, 6006.5], [1131.0, 6013.0], [1135.0, 6004.0], [1149.0, 5804.0], [1145.0, 5997.0], [1143.0, 5996.0], [1141.0, 5908.0], [1137.0, 6004.0], [1103.0, 10437.0], [1095.0, 7141.666666666667], [1093.0, 5836.0], [1091.0, 29568.666666666664], [1089.0, 6019.5], [1119.0, 10092.5], [1115.0, 29495.333333333332], [1111.0, 9804.5], [1109.0, 10234.0], [1203.0, 5910.0], [1209.0, 5899.0], [1187.0, 5919.0], [1189.0, 5920.0], [1193.0, 5917.0], [1191.0, 5916.333333333333], [1195.0, 5915.0], [1207.0, 5903.0], [1205.0, 5717.0], [1167.0, 5775.0], [1163.0, 72181.0], [1161.0, 5957.0], [1159.0, 5967.0], [1157.0, 9592.0], [1153.0, 5979.0], [1183.0, 7600.5], [1181.0, 5916.5], [1179.0, 7324.333333333333], [1173.0, 5867.0], [1171.0, 5960.0], [1169.0, 5867.5], [1199.0, 5816.5], [1197.0, 10710.0], [1221.0, 5897.0], [1251.0, 5706.0], [1249.0, 5893.0], [1217.0, 5896.5], [1225.0, 5896.0], [1227.0, 5896.0], [1239.0, 7491.333333333333], [1235.0, 5894.0], [1233.0, 5896.0], [1343.0, 6394.444444444444], [1341.0, 5507.5], [1281.0, 8287.5], [1287.0, 5797.5], [1317.0, 5883.0], [1395.0, 5811.0], [1407.0, 5804.0], [1377.0, 5817.0], [1387.0, 5811.5], [1385.0, 5815.0], [1391.0, 5809.0], [1405.0, 5802.0], [1403.0, 5804.0], [1401.0, 5804.0], [1397.0, 5811.0], [1393.0, 5809.5], [1375.0, 5819.0], [1347.0, 6334.7058823529405], [1351.0, 14881.555555555557], [1357.0, 13271.3], [1359.0, 5877.0], [1373.0, 5821.0], [1371.0, 5830.0], [1369.0, 5830.0], [1367.0, 5816.333333333333], [1363.0, 7557.5], [1361.0, 5882.0], [1469.0, 3862.5], [1447.0, 6347.333333333333], [1471.0, 3856.0], [1441.0, 7148.5], [1445.0, 4754.0], [1443.0, 4756.0], [1449.0, 4747.5], [1451.0, 4742.0], [1453.0, 4742.0], [1455.0, 4740.0], [1467.0, 3864.0], [1465.0, 3866.3333333333335], [1461.0, 3962.0], [1459.0, 4726.0], [1457.0, 4726.0], [1439.0, 4754.5], [1411.0, 5799.0], [1413.0, 5793.0], [1415.0, 5788.0], [1417.0, 5600.0], [1419.0, 5783.0], [1423.0, 5775.5], [1437.0, 4754.5], [1435.0, 4753.0], [1431.0, 4971.0], [1429.0, 5768.5], [1427.0, 5769.5], [1425.0, 5770.0], [1477.0, 6068.0], [1507.0, 2035.0], [1505.0, 3045.0], [1503.0, 3824.0], [1473.0, 3860.0], [1475.0, 3860.0], [1479.0, 7214.0], [1481.0, 3855.0], [1485.0, 3851.5], [1483.0, 6248.5], [1501.0, 3825.0], [1499.0, 3832.0], [1497.0, 3836.5], [1495.0, 8341.0], [1493.0, 3842.0], [1491.0, 8635.0], [1489.0, 3842.0], [1669.0, 258.0], [1689.0, 256.0], [1671.0, 257.97368421052624], [1673.0, 258.5], [1675.0, 257.0], [1677.0, 257.0], [1691.0, 256.0], [1683.0, 257.0], [1681.0, 256.83333333333337], [2126.0, 372.35294117647067], [2138.0, 370.8181818181818], [2058.0, 5538.0], [2070.0, 6114.0], [2110.0, 374.5], [2142.0, 370.0], [2122.0, 372.8333333333333], [2134.0, 371.6666666666667], [2130.0, 371.59999999999997], [2378.0, 301.0], [2370.0, 301.0], [2382.0, 301.3333333333333], [2386.0, 299.55000000000007], [2390.0, 299.0], [2394.0, 299.1111111111111], [2398.0, 299.18181818181813], [2430.0, 295.0], [2426.0, 297.0], [2422.0, 297.0], [2414.0, 298.0], [2410.0, 299.0], [2406.0, 298.5], [2402.0, 298.6666666666667], [2454.0, 287.0], [2462.0, 286.0], [2638.0, 315.5], [2682.0, 297.6666666666667], [2642.0, 3858.0], [2646.0, 309.0], [2654.0, 309.3333333333333], [2678.0, 297.0], [2662.0, 2533.7500000000005], [2658.0, 309.5], [2798.0, 6380.0], [2754.0, 6431.0], [2814.0, 6370.5], [2758.0, 6427.0], [2762.0, 4395.0], [2766.0, 6421.0], [2770.0, 4386.0], [2774.0, 4381.0], [2778.0, 4376.0], [2782.0, 6398.666666666667], [2810.0, 5696.666666666667], [2794.0, 4353.0], [2790.0, 5378.0], [2786.0, 6394.0], [2694.0, 295.5], [2698.0, 6927.0], [2702.0, 6703.0], [2718.0, 5898.666666666667], [2750.0, 4412.0], [2746.0, 10869.0], [2742.0, 4526.0], [2738.0, 4606.0], [2730.0, 4613.0], [2722.0, 6135.5], [2914.0, 8097.0], [2938.0, 8074.0], [2890.0, 6506.8], [2898.0, 5428.0], [2842.0, 5455.666666666667], [2834.0, 5456.0], [2830.0, 5328.0], [2826.0, 4315.0], [2818.0, 6345.0], [2850.0, 5455.0], [2974.0, 6705.0], [2966.0, 5374.0], [2962.0, 7175.0], [2958.0, 8074.0], [2950.0, 8074.0], [2107.0, 374.8181818181818], [2111.0, 375.0], [2091.0, 3243.5], [2139.0, 371.0], [2123.0, 372.41176470588243], [2115.0, 375.0], [2119.0, 374.0], [2127.0, 371.6666666666667], [2135.0, 371.25], [2375.0, 301.75], [2371.0, 300.5555555555556], [2423.0, 297.0], [2431.0, 296.0], [2379.0, 300.25], [2391.0, 298.6], [2395.0, 298.0], [2399.0, 298.6], [2419.0, 297.25], [2411.0, 298.0], [2407.0, 298.22222222222223], [2403.0, 299.0], [2439.0, 296.0], [2451.0, 286.0], [2455.0, 287.0], [2487.0, 283.5], [2483.0, 285.0], [2467.0, 287.8], [2643.0, 385.0322580645162], [2639.0, 314.6666666666667], [2647.0, 309.4375], [2655.0, 309.0], [2671.0, 298.0], [2667.0, 308.0], [2663.0, 309.0], [2659.0, 309.75], [2755.0, 6430.0], [2807.0, 6373.0], [2763.0, 4395.0], [2767.0, 4389.0], [2775.0, 4378.0], [2779.0, 6400.0], [2803.0, 5973.8], [2795.0, 4353.0], [2791.0, 6387.0], [2751.0, 6438.0], [2691.0, 296.50000000000006], [2743.0, 6522.0], [2739.0, 4369.0], [2727.0, 4611.0], [2935.0, 7584.727272727273], [2883.0, 8125.0], [2887.0, 7450.0], [2903.0, 8114.5], [2927.0, 8074.0], [2919.0, 7711.142857142857], [2915.0, 8097.666666666667], [2843.0, 8152.0], [2831.0, 6159.0], [2871.0, 5630.066666666667], [2963.0, 7534.0], [2975.0, 6704.0], [2959.0, 8073.0], [2951.0, 8075.0], [2947.0, 6278.333333333333]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[2978.625170725207, 3177.0673706652515]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 3000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 44570.4, "minX": 1.6828614E12, "maxY": 405662.9666666667, "series": [{"data": [[1.6828614E12, 251451.65], [1.68286158E12, 405662.9666666667], [1.68286152E12, 364481.75], [1.6828617E12, 61364.65], [1.68286164E12, 394003.81666666665], [1.68286146E12, 320652.25]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.6828614E12, 173023.2], [1.68286158E12, 283659.6], [1.68286152E12, 251529.6], [1.6828617E12, 44570.4], [1.68286164E12, 278619.6], [1.68286146E12, 225414.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6828617E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 2465.085937499998, "minX": 1.6828614E12, "maxY": 4240.842307351528, "series": [{"data": [[1.6828614E12, 2465.085937499998], [1.68286158E12, 4240.842307351528], [1.68286152E12, 2712.799621614479], [1.6828617E12, 3413.592348284958], [1.68286164E12, 2479.684796044482], [1.68286146E12, 3720.2607531878593]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6828617E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 2296.530815972234, "minX": 1.6828614E12, "maxY": 3883.3396343444533, "series": [{"data": [[1.6828614E12, 2296.530815972234], [1.68286158E12, 3883.3396343444533], [1.68286152E12, 2488.2894981412596], [1.6828617E12, 3413.581040331703], [1.68286164E12, 2479.6736109017406], [1.68286146E12, 3679.3366667905907]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6828617E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 245.75424048247268, "minX": 1.6828614E12, "maxY": 1765.833623770572, "series": [{"data": [[1.6828614E12, 764.6135223765486], [1.68286158E12, 1765.833623770572], [1.68286152E12, 597.1327336696754], [1.6828617E12, 245.75424048247268], [1.68286164E12, 275.0994904881063], [1.68286146E12, 279.7159002193434]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6828617E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 13.0, "minX": 1.6828614E12, "maxY": 169219.0, "series": [{"data": [[1.6828614E12, 46517.0], [1.68286158E12, 169219.0], [1.68286152E12, 113281.0], [1.6828617E12, 72306.0], [1.68286164E12, 162491.0], [1.68286146E12, 103602.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.6828614E12, 7292.9000000000015], [1.68286158E12, 9148.0], [1.68286152E12, 484.0], [1.6828617E12, 6981.0], [1.68286164E12, 6992.9000000000015], [1.68286146E12, 6491.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.6828614E12, 32787.98], [1.68286158E12, 130633.0], [1.68286152E12, 75611.99], [1.6828617E12, 36495.93], [1.68286164E12, 22614.99], [1.68286146E12, 68962.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.6828614E12, 15173.0], [1.68286158E12, 14510.95], [1.68286152E12, 5777.0], [1.6828617E12, 8667.0], [1.68286164E12, 9736.0], [1.68286146E12, 9625.95]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.6828614E12, 19.0], [1.68286158E12, 15.0], [1.68286152E12, 13.0], [1.6828617E12, 30.0], [1.68286164E12, 18.0], [1.68286146E12, 20.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.6828614E12, 280.0], [1.68286158E12, 272.0], [1.68286152E12, 279.0], [1.6828617E12, 348.0], [1.68286164E12, 281.0], [1.68286146E12, 294.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6828617E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 48.0, "minX": 1.0, "maxY": 144719.0, "series": [{"data": [[2.0, 23752.5], [4.0, 26134.5], [5.0, 65990.0], [6.0, 34057.5], [7.0, 15319.0], [8.0, 3068.5], [9.0, 3529.0], [10.0, 8157.0], [12.0, 6648.5], [15.0, 21146.0], [16.0, 4095.0], [17.0, 9571.0], [18.0, 6709.5], [21.0, 12633.0], [22.0, 5843.0], [23.0, 9894.5], [24.0, 13367.0], [25.0, 64483.0], [26.0, 8763.0], [28.0, 5853.0], [31.0, 4748.0], [33.0, 11933.0], [42.0, 48.0], [43.0, 3860.0], [46.0, 10551.0], [47.0, 18995.0], [57.0, 33470.5], [60.0, 234.0], [66.0, 6955.0], [70.0, 64.0], [71.0, 179.0], [68.0, 100.0], [74.0, 58.0], [92.0, 863.0], [99.0, 140.0], [100.0, 258.5], [108.0, 194.0], [113.0, 5234.0], [112.0, 10378.0], [123.0, 3603.0], [131.0, 53782.0], [139.0, 7318.0], [148.0, 15158.0], [155.0, 7866.0], [156.0, 7510.5], [158.0, 211.0], [161.0, 4352.0], [169.0, 8954.0], [177.0, 278.0], [198.0, 11685.0], [197.0, 194.0], [196.0, 6595.0], [200.0, 5294.5], [221.0, 7296.0], [219.0, 5529.0], [232.0, 191.0], [256.0, 8601.5], [280.0, 6326.0], [293.0, 240.0], [292.0, 234.0], [306.0, 5549.0], [316.0, 242.0], [322.0, 239.5], [320.0, 256.0], [333.0, 241.0], [348.0, 6534.0], [340.0, 3986.0], [351.0, 264.0], [346.0, 224.0], [342.0, 4561.0], [362.0, 208.0], [353.0, 314.0], [376.0, 5356.0], [399.0, 7351.0], [396.0, 1456.0], [393.0, 249.0], [385.0, 260.0], [404.0, 814.5], [401.0, 6247.0], [415.0, 241.0], [414.0, 5524.0], [412.0, 280.0], [431.0, 237.0], [445.0, 5167.0], [439.0, 295.0], [435.0, 5482.0], [437.0, 254.0], [444.0, 480.0], [460.0, 8310.0], [455.0, 209.0], [452.0, 5949.0], [459.0, 282.0], [451.0, 3187.0], [450.0, 4914.0], [466.0, 219.0], [470.0, 268.0], [475.0, 8675.0], [489.0, 333.0], [492.0, 275.0], [496.0, 273.0], [504.0, 257.0], [500.0, 267.0], [506.0, 265.0], [507.0, 283.0], [502.0, 271.0], [503.0, 295.0], [501.0, 276.0], [497.0, 270.0], [498.0, 1529.0], [509.0, 270.0], [508.0, 255.0], [499.0, 214.0], [514.0, 294.0], [524.0, 9647.0], [535.0, 271.0], [534.0, 263.5], [529.0, 7210.0], [516.0, 251.0], [513.0, 5497.0], [520.0, 4379.0], [522.0, 267.0], [548.0, 303.0], [566.0, 298.0], [572.0, 315.0], [544.0, 236.0], [551.0, 244.0], [558.0, 7888.0], [553.0, 261.0], [570.0, 295.0], [593.0, 304.0], [586.0, 4630.0], [597.0, 273.0], [595.0, 343.0], [583.0, 228.0], [636.0, 244.0], [633.0, 241.0], [621.0, 452.0], [647.0, 352.0], [653.0, 259.0], [694.0, 257.0], [686.0, 259.0], [685.0, 274.0], [672.0, 299.0], [677.0, 294.0], [760.0, 5321.0], [753.0, 6025.0], [771.0, 333.0], [824.0, 258.0], [828.0, 252.0], [806.0, 241.0], [856.0, 349.0], [865.0, 438.0], [885.0, 289.0], [893.0, 264.0], [924.0, 335.0], [911.0, 250.0], [927.0, 498.0], [930.0, 275.0], [943.0, 283.0], [955.0, 305.0], [941.0, 262.0], [934.0, 251.0], [951.0, 433.0], [929.0, 466.0], [991.0, 299.0], [985.0, 243.0], [967.0, 282.0], [989.0, 296.0], [983.0, 286.0], [982.0, 300.5], [984.0, 264.0], [977.0, 256.0], [980.0, 268.0], [990.0, 305.0], [996.0, 395.0], [1004.0, 266.0], [1000.0, 280.0], [1009.0, 280.0], [1008.0, 424.0], [1001.0, 318.0], [1003.0, 273.0], [1005.0, 377.0], [992.0, 261.0], [1014.0, 279.0], [1021.0, 264.0], [1047.0, 292.0], [1033.0, 501.0], [1050.0, 6489.0], [1034.0, 269.0], [1059.0, 297.0], [1031.0, 270.0], [1032.0, 395.0], [1062.0, 236.0], [1112.0, 278.0], [1105.0, 435.0], [1135.0, 482.0], [1089.0, 489.0], [1128.0, 451.0], [1160.0, 266.0], [1210.0, 519.0], [1165.0, 261.0], [1266.0, 281.0], [1235.0, 605.0], [1305.0, 282.0], [1328.0, 277.0], [1416.0, 267.0], [1432.0, 267.0], [1444.0, 515.0], [1413.0, 259.0], [1414.0, 255.0], [1523.0, 275.0], [1477.0, 268.0], [1502.0, 479.0], [1526.0, 254.0], [1597.0, 277.0], [1556.0, 283.0], [1584.0, 265.0], [1926.0, 805.0], [2012.0, 503.0], [1.0, 2836.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[522.0, 27334.0], [572.0, 42259.0], [551.0, 122960.0], [553.0, 144719.0], [9.0, 27486.0], [597.0, 11507.5], [155.0, 28006.0], [636.0, 9507.0], [10.0, 7226.0], [177.0, 29348.0], [885.0, 54606.0], [967.0, 12660.5], [1014.0, 105805.0], [1034.0, 75602.0], [1.0, 105810.0], [5.0, 41380.0], [348.0, 124577.0], [1597.0, 21187.0], [108.0, 108894.0], [437.0, 75560.0], [506.0, 82971.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 2012.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 65990.0, "series": [{"data": [[2.0, 23752.5], [4.0, 26134.5], [5.0, 65990.0], [6.0, 34057.5], [7.0, 15319.0], [8.0, 3068.0], [9.0, 3529.0], [10.0, 8157.0], [12.0, 6648.5], [15.0, 21146.0], [16.0, 4095.0], [17.0, 9571.0], [18.0, 6709.5], [21.0, 12633.0], [22.0, 5843.0], [23.0, 9894.5], [24.0, 13366.5], [25.0, 64483.0], [26.0, 8763.0], [28.0, 5853.0], [31.0, 4748.0], [33.0, 11933.0], [42.0, 48.0], [43.0, 3860.0], [46.0, 10551.0], [47.0, 18995.0], [57.0, 33470.5], [60.0, 234.0], [66.0, 6955.0], [70.0, 64.0], [71.0, 179.0], [68.0, 100.0], [74.0, 58.0], [92.0, 863.0], [99.0, 140.0], [100.0, 258.5], [108.0, 194.0], [113.0, 5234.0], [112.0, 10378.0], [123.0, 3603.0], [131.0, 53782.0], [139.0, 7318.0], [148.0, 15158.0], [155.0, 7866.0], [156.0, 7510.0], [158.0, 211.0], [161.0, 4352.0], [169.0, 8954.0], [177.0, 278.0], [198.0, 11685.0], [197.0, 194.0], [196.0, 6595.0], [200.0, 5294.5], [221.0, 7296.0], [219.0, 5529.0], [232.0, 191.0], [256.0, 8601.5], [280.0, 6326.0], [293.0, 240.0], [292.0, 234.0], [306.0, 5549.0], [316.0, 242.0], [322.0, 239.5], [320.0, 256.0], [333.0, 241.0], [348.0, 6534.0], [340.0, 3986.0], [351.0, 264.0], [346.0, 224.0], [342.0, 4561.0], [362.0, 208.0], [353.0, 314.0], [376.0, 5356.0], [399.0, 7351.0], [396.0, 1456.0], [393.0, 249.0], [385.0, 260.0], [404.0, 810.5], [401.0, 6247.0], [415.0, 241.0], [414.0, 5524.0], [412.0, 280.0], [431.0, 237.0], [445.0, 5167.0], [439.0, 295.0], [435.0, 5482.0], [437.0, 254.0], [444.0, 480.0], [460.0, 8310.0], [455.0, 209.0], [452.0, 5949.0], [459.0, 282.0], [451.0, 3187.0], [450.0, 4914.0], [466.0, 219.0], [470.0, 268.0], [475.0, 8675.0], [489.0, 333.0], [492.0, 275.0], [496.0, 273.0], [504.0, 257.0], [500.0, 267.0], [506.0, 265.0], [507.0, 283.0], [502.0, 271.0], [503.0, 295.0], [501.0, 276.0], [497.0, 270.0], [498.0, 1529.0], [509.0, 270.0], [508.0, 255.0], [499.0, 214.0], [514.0, 294.0], [524.0, 9647.0], [535.0, 271.0], [534.0, 263.5], [529.0, 7210.0], [516.0, 251.0], [513.0, 5497.0], [520.0, 4379.0], [522.0, 267.0], [548.0, 303.0], [566.0, 298.0], [572.0, 315.0], [544.0, 236.0], [551.0, 244.0], [558.0, 7888.0], [553.0, 261.0], [570.0, 295.0], [593.0, 304.0], [586.0, 4630.0], [597.0, 273.0], [595.0, 343.0], [583.0, 228.0], [636.0, 244.0], [633.0, 241.0], [621.0, 452.0], [647.0, 352.0], [653.0, 259.0], [694.0, 257.0], [686.0, 259.0], [685.0, 274.0], [672.0, 299.0], [677.0, 294.0], [760.0, 5321.0], [753.0, 6025.0], [771.0, 333.0], [824.0, 258.0], [828.0, 252.0], [806.0, 241.0], [856.0, 349.0], [865.0, 438.0], [885.0, 289.0], [893.0, 264.0], [924.0, 335.0], [911.0, 250.0], [927.0, 498.0], [930.0, 275.0], [943.0, 283.0], [955.0, 305.0], [941.0, 262.0], [934.0, 251.0], [951.0, 433.0], [929.0, 466.0], [991.0, 299.0], [985.0, 243.0], [967.0, 282.0], [989.0, 296.0], [983.0, 286.0], [982.0, 300.5], [984.0, 264.0], [977.0, 256.0], [980.0, 268.0], [990.0, 305.0], [996.0, 395.0], [1004.0, 266.0], [1000.0, 280.0], [1009.0, 280.0], [1008.0, 424.0], [1001.0, 318.0], [1003.0, 273.0], [1005.0, 377.0], [992.0, 261.0], [1014.0, 279.0], [1021.0, 264.0], [1047.0, 292.0], [1033.0, 501.0], [1050.0, 6489.0], [1034.0, 269.0], [1059.0, 297.0], [1031.0, 270.0], [1032.0, 395.0], [1062.0, 236.0], [1112.0, 278.0], [1105.0, 435.0], [1135.0, 482.0], [1089.0, 489.0], [1128.0, 451.0], [1160.0, 266.0], [1210.0, 519.0], [1165.0, 261.0], [1266.0, 281.0], [1235.0, 605.0], [1305.0, 282.0], [1328.0, 277.0], [1416.0, 267.0], [1432.0, 267.0], [1444.0, 515.0], [1413.0, 259.0], [1414.0, 255.0], [1523.0, 275.0], [1477.0, 268.0], [1502.0, 479.0], [1526.0, 254.0], [1597.0, 277.0], [1556.0, 283.0], [1584.0, 265.0], [1926.0, 805.0], [2012.0, 503.0], [1.0, 2836.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[522.0, 0.0], [572.0, 0.0], [551.0, 0.0], [553.0, 0.0], [9.0, 0.0], [597.0, 0.0], [155.0, 0.0], [636.0, 0.0], [10.0, 0.0], [177.0, 0.0], [885.0, 0.0], [967.0, 0.0], [1014.0, 0.0], [1034.0, 0.0], [1.0, 0.0], [5.0, 0.0], [348.0, 0.0], [1597.0, 0.0], [108.0, 0.0], [437.0, 0.0], [506.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 2012.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 68.33333333333333, "minX": 1.6828614E12, "maxY": 566.5833333333334, "series": [{"data": [[1.6828614E12, 366.6666666666667], [1.68286158E12, 566.5833333333334], [1.68286152E12, 491.6666666666667], [1.6828617E12, 68.33333333333333], [1.68286164E12, 550.0], [1.68286146E12, 458.3333333333333]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6828617E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 1.0666666666666667, "minX": 1.6828614E12, "maxY": 562.8166666666667, "series": [{"data": [[1.6828614E12, 343.3], [1.68286158E12, 562.8166666666667], [1.68286152E12, 499.06666666666666], [1.6828617E12, 88.43333333333334], [1.68286164E12, 552.8166666666667], [1.68286146E12, 447.25]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.6828614E12, 2.3], [1.68286158E12, 1.4666666666666666], [1.68286152E12, 3.066666666666667], [1.68286146E12, 1.0666666666666667]], "isOverall": false, "label": "Non HTTP response code: java.net.SocketException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6828617E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 1.0666666666666667, "minX": 1.6828614E12, "maxY": 562.8166666666667, "series": [{"data": [[1.6828614E12, 343.3], [1.68286158E12, 562.8166666666667], [1.68286152E12, 499.06666666666666], [1.6828617E12, 88.43333333333334], [1.68286164E12, 552.8166666666667], [1.68286146E12, 447.25]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.6828614E12, 2.3], [1.68286158E12, 1.4666666666666666], [1.68286152E12, 3.066666666666667], [1.68286146E12, 1.0666666666666667]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6828617E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 1.0666666666666667, "minX": 1.6828614E12, "maxY": 562.8166666666667, "series": [{"data": [[1.6828614E12, 343.3], [1.68286158E12, 562.8166666666667], [1.68286152E12, 499.06666666666666], [1.6828617E12, 88.43333333333334], [1.68286164E12, 552.8166666666667], [1.68286146E12, 447.25]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.6828614E12, 2.3], [1.68286158E12, 1.4666666666666666], [1.68286152E12, 3.066666666666667], [1.68286146E12, 1.0666666666666667]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6828617E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

