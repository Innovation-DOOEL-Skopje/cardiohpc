/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 3.0, "minX": 0.0, "maxY": 230637.0, "series": [{"data": [[0.0, 3.0], [0.1, 4.0], [0.2, 4.0], [0.3, 5.0], [0.4, 5.0], [0.5, 5.0], [0.6, 5.0], [0.7, 6.0], [0.8, 6.0], [0.9, 7.0], [1.0, 7.0], [1.1, 8.0], [1.2, 8.0], [1.3, 9.0], [1.4, 9.0], [1.5, 10.0], [1.6, 10.0], [1.7, 11.0], [1.8, 11.0], [1.9, 11.0], [2.0, 12.0], [2.1, 12.0], [2.2, 12.0], [2.3, 13.0], [2.4, 13.0], [2.5, 14.0], [2.6, 15.0], [2.7, 16.0], [2.8, 17.0], [2.9, 18.0], [3.0, 20.0], [3.1, 21.0], [3.2, 22.0], [3.3, 23.0], [3.4, 24.0], [3.5, 25.0], [3.6, 26.0], [3.7, 27.0], [3.8, 28.0], [3.9, 29.0], [4.0, 29.0], [4.1, 30.0], [4.2, 31.0], [4.3, 31.0], [4.4, 32.0], [4.5, 32.0], [4.6, 33.0], [4.7, 34.0], [4.8, 34.0], [4.9, 35.0], [5.0, 35.0], [5.1, 36.0], [5.2, 36.0], [5.3, 37.0], [5.4, 37.0], [5.5, 38.0], [5.6, 38.0], [5.7, 39.0], [5.8, 40.0], [5.9, 40.0], [6.0, 41.0], [6.1, 41.0], [6.2, 42.0], [6.3, 43.0], [6.4, 43.0], [6.5, 44.0], [6.6, 44.0], [6.7, 44.0], [6.8, 45.0], [6.9, 45.0], [7.0, 46.0], [7.1, 46.0], [7.2, 47.0], [7.3, 47.0], [7.4, 48.0], [7.5, 48.0], [7.6, 49.0], [7.7, 49.0], [7.8, 49.0], [7.9, 50.0], [8.0, 50.0], [8.1, 51.0], [8.2, 51.0], [8.3, 52.0], [8.4, 52.0], [8.5, 52.0], [8.6, 53.0], [8.7, 53.0], [8.8, 54.0], [8.9, 54.0], [9.0, 55.0], [9.1, 56.0], [9.2, 56.0], [9.3, 57.0], [9.4, 57.0], [9.5, 57.0], [9.6, 58.0], [9.7, 58.0], [9.8, 59.0], [9.9, 59.0], [10.0, 60.0], [10.1, 60.0], [10.2, 60.0], [10.3, 61.0], [10.4, 61.0], [10.5, 61.0], [10.6, 62.0], [10.7, 62.0], [10.8, 63.0], [10.9, 63.0], [11.0, 64.0], [11.1, 64.0], [11.2, 64.0], [11.3, 65.0], [11.4, 65.0], [11.5, 65.0], [11.6, 66.0], [11.7, 66.0], [11.8, 66.0], [11.9, 67.0], [12.0, 67.0], [12.1, 68.0], [12.2, 68.0], [12.3, 69.0], [12.4, 69.0], [12.5, 69.0], [12.6, 70.0], [12.7, 70.0], [12.8, 70.0], [12.9, 71.0], [13.0, 71.0], [13.1, 72.0], [13.2, 72.0], [13.3, 72.0], [13.4, 73.0], [13.5, 74.0], [13.6, 74.0], [13.7, 75.0], [13.8, 75.0], [13.9, 76.0], [14.0, 76.0], [14.1, 77.0], [14.2, 77.0], [14.3, 78.0], [14.4, 78.0], [14.5, 79.0], [14.6, 79.0], [14.7, 80.0], [14.8, 80.0], [14.9, 81.0], [15.0, 81.0], [15.1, 82.0], [15.2, 82.0], [15.3, 83.0], [15.4, 83.0], [15.5, 84.0], [15.6, 85.0], [15.7, 85.0], [15.8, 86.0], [15.9, 86.0], [16.0, 87.0], [16.1, 87.0], [16.2, 88.0], [16.3, 88.0], [16.4, 89.0], [16.5, 89.0], [16.6, 90.0], [16.7, 91.0], [16.8, 91.0], [16.9, 92.0], [17.0, 92.0], [17.1, 93.0], [17.2, 93.0], [17.3, 93.0], [17.4, 94.0], [17.5, 94.0], [17.6, 95.0], [17.7, 95.0], [17.8, 96.0], [17.9, 96.0], [18.0, 97.0], [18.1, 97.0], [18.2, 98.0], [18.3, 98.0], [18.4, 99.0], [18.5, 99.0], [18.6, 100.0], [18.7, 100.0], [18.8, 101.0], [18.9, 101.0], [19.0, 102.0], [19.1, 102.0], [19.2, 102.0], [19.3, 103.0], [19.4, 103.0], [19.5, 104.0], [19.6, 105.0], [19.7, 105.0], [19.8, 106.0], [19.9, 106.0], [20.0, 106.0], [20.1, 107.0], [20.2, 107.0], [20.3, 107.0], [20.4, 108.0], [20.5, 108.0], [20.6, 109.0], [20.7, 109.0], [20.8, 109.0], [20.9, 110.0], [21.0, 110.0], [21.1, 111.0], [21.2, 111.0], [21.3, 112.0], [21.4, 112.0], [21.5, 112.0], [21.6, 113.0], [21.7, 113.0], [21.8, 114.0], [21.9, 114.0], [22.0, 115.0], [22.1, 115.0], [22.2, 115.0], [22.3, 116.0], [22.4, 116.0], [22.5, 117.0], [22.6, 117.0], [22.7, 117.0], [22.8, 118.0], [22.9, 118.0], [23.0, 119.0], [23.1, 119.0], [23.2, 120.0], [23.3, 120.0], [23.4, 120.0], [23.5, 121.0], [23.6, 121.0], [23.7, 121.0], [23.8, 122.0], [23.9, 122.0], [24.0, 123.0], [24.1, 123.0], [24.2, 124.0], [24.3, 124.0], [24.4, 125.0], [24.5, 125.0], [24.6, 125.0], [24.7, 126.0], [24.8, 126.0], [24.9, 127.0], [25.0, 127.0], [25.1, 127.0], [25.2, 128.0], [25.3, 129.0], [25.4, 129.0], [25.5, 130.0], [25.6, 130.0], [25.7, 131.0], [25.8, 131.0], [25.9, 131.0], [26.0, 132.0], [26.1, 132.0], [26.2, 132.0], [26.3, 133.0], [26.4, 133.0], [26.5, 134.0], [26.6, 134.0], [26.7, 134.0], [26.8, 135.0], [26.9, 135.0], [27.0, 136.0], [27.1, 136.0], [27.2, 136.0], [27.3, 137.0], [27.4, 137.0], [27.5, 138.0], [27.6, 138.0], [27.7, 138.0], [27.8, 139.0], [27.9, 139.0], [28.0, 140.0], [28.1, 140.0], [28.2, 141.0], [28.3, 141.0], [28.4, 142.0], [28.5, 142.0], [28.6, 142.0], [28.7, 143.0], [28.8, 143.0], [28.9, 144.0], [29.0, 144.0], [29.1, 145.0], [29.2, 145.0], [29.3, 146.0], [29.4, 146.0], [29.5, 147.0], [29.6, 147.0], [29.7, 148.0], [29.8, 148.0], [29.9, 149.0], [30.0, 149.0], [30.1, 150.0], [30.2, 150.0], [30.3, 150.0], [30.4, 151.0], [30.5, 151.0], [30.6, 151.0], [30.7, 152.0], [30.8, 152.0], [30.9, 152.0], [31.0, 153.0], [31.1, 153.0], [31.2, 154.0], [31.3, 154.0], [31.4, 154.0], [31.5, 155.0], [31.6, 155.0], [31.7, 156.0], [31.8, 156.0], [31.9, 157.0], [32.0, 157.0], [32.1, 158.0], [32.2, 159.0], [32.3, 160.0], [32.4, 160.0], [32.5, 161.0], [32.6, 161.0], [32.7, 162.0], [32.8, 163.0], [32.9, 163.0], [33.0, 164.0], [33.1, 164.0], [33.2, 165.0], [33.3, 166.0], [33.4, 167.0], [33.5, 167.0], [33.6, 168.0], [33.7, 168.0], [33.8, 169.0], [33.9, 170.0], [34.0, 170.0], [34.1, 171.0], [34.2, 171.0], [34.3, 172.0], [34.4, 173.0], [34.5, 173.0], [34.6, 174.0], [34.7, 175.0], [34.8, 175.0], [34.9, 175.0], [35.0, 176.0], [35.1, 177.0], [35.2, 178.0], [35.3, 179.0], [35.4, 179.0], [35.5, 180.0], [35.6, 180.0], [35.7, 181.0], [35.8, 182.0], [35.9, 183.0], [36.0, 184.0], [36.1, 185.0], [36.2, 186.0], [36.3, 187.0], [36.4, 188.0], [36.5, 189.0], [36.6, 190.0], [36.7, 191.0], [36.8, 193.0], [36.9, 194.0], [37.0, 196.0], [37.1, 197.0], [37.2, 198.0], [37.3, 199.0], [37.4, 201.0], [37.5, 202.0], [37.6, 203.0], [37.7, 205.0], [37.8, 209.0], [37.9, 211.0], [38.0, 213.0], [38.1, 214.0], [38.2, 216.0], [38.3, 217.0], [38.4, 220.0], [38.5, 224.0], [38.6, 228.0], [38.7, 232.0], [38.8, 237.0], [38.9, 240.0], [39.0, 246.0], [39.1, 252.0], [39.2, 253.0], [39.3, 255.0], [39.4, 259.0], [39.5, 262.0], [39.6, 268.0], [39.7, 279.0], [39.8, 283.0], [39.9, 285.0], [40.0, 287.0], [40.1, 295.0], [40.2, 302.0], [40.3, 304.0], [40.4, 311.0], [40.5, 315.0], [40.6, 322.0], [40.7, 328.0], [40.8, 333.0], [40.9, 336.0], [41.0, 346.0], [41.1, 360.0], [41.2, 370.0], [41.3, 375.0], [41.4, 378.0], [41.5, 386.0], [41.6, 387.0], [41.7, 389.0], [41.8, 391.0], [41.9, 393.0], [42.0, 395.0], [42.1, 397.0], [42.2, 399.0], [42.3, 400.0], [42.4, 402.0], [42.5, 403.0], [42.6, 404.0], [42.7, 406.0], [42.8, 411.0], [42.9, 416.0], [43.0, 427.0], [43.1, 436.0], [43.2, 438.0], [43.3, 442.0], [43.4, 445.0], [43.5, 448.0], [43.6, 452.0], [43.7, 457.0], [43.8, 461.0], [43.9, 467.0], [44.0, 472.0], [44.1, 474.0], [44.2, 477.0], [44.3, 479.0], [44.4, 481.0], [44.5, 485.0], [44.6, 488.0], [44.7, 491.0], [44.8, 497.0], [44.9, 499.0], [45.0, 502.0], [45.1, 505.0], [45.2, 507.0], [45.3, 509.0], [45.4, 512.0], [45.5, 516.0], [45.6, 518.0], [45.7, 520.0], [45.8, 523.0], [45.9, 525.0], [46.0, 526.0], [46.1, 528.0], [46.2, 531.0], [46.3, 532.0], [46.4, 534.0], [46.5, 535.0], [46.6, 537.0], [46.7, 539.0], [46.8, 543.0], [46.9, 546.0], [47.0, 547.0], [47.1, 548.0], [47.2, 549.0], [47.3, 552.0], [47.4, 554.0], [47.5, 555.0], [47.6, 556.0], [47.7, 557.0], [47.8, 558.0], [47.9, 559.0], [48.0, 560.0], [48.1, 561.0], [48.2, 562.0], [48.3, 564.0], [48.4, 565.0], [48.5, 567.0], [48.6, 570.0], [48.7, 571.0], [48.8, 574.0], [48.9, 576.0], [49.0, 577.0], [49.1, 578.0], [49.2, 579.0], [49.3, 579.0], [49.4, 580.0], [49.5, 582.0], [49.6, 584.0], [49.7, 585.0], [49.8, 586.0], [49.9, 587.0], [50.0, 588.0], [50.1, 589.0], [50.2, 590.0], [50.3, 590.0], [50.4, 591.0], [50.5, 592.0], [50.6, 593.0], [50.7, 595.0], [50.8, 596.0], [50.9, 596.0], [51.0, 597.0], [51.1, 598.0], [51.2, 598.0], [51.3, 599.0], [51.4, 599.0], [51.5, 600.0], [51.6, 600.0], [51.7, 601.0], [51.8, 601.0], [51.9, 601.0], [52.0, 602.0], [52.1, 602.0], [52.2, 603.0], [52.3, 603.0], [52.4, 604.0], [52.5, 604.0], [52.6, 605.0], [52.7, 606.0], [52.8, 606.0], [52.9, 607.0], [53.0, 607.0], [53.1, 608.0], [53.2, 608.0], [53.3, 609.0], [53.4, 610.0], [53.5, 611.0], [53.6, 612.0], [53.7, 613.0], [53.8, 613.0], [53.9, 614.0], [54.0, 614.0], [54.1, 615.0], [54.2, 615.0], [54.3, 616.0], [54.4, 616.0], [54.5, 616.0], [54.6, 617.0], [54.7, 617.0], [54.8, 618.0], [54.9, 618.0], [55.0, 619.0], [55.1, 619.0], [55.2, 620.0], [55.3, 620.0], [55.4, 620.0], [55.5, 621.0], [55.6, 621.0], [55.7, 622.0], [55.8, 623.0], [55.9, 624.0], [56.0, 625.0], [56.1, 625.0], [56.2, 626.0], [56.3, 626.0], [56.4, 627.0], [56.5, 627.0], [56.6, 628.0], [56.7, 628.0], [56.8, 629.0], [56.9, 629.0], [57.0, 630.0], [57.1, 630.0], [57.2, 631.0], [57.3, 631.0], [57.4, 632.0], [57.5, 633.0], [57.6, 633.0], [57.7, 634.0], [57.8, 635.0], [57.9, 635.0], [58.0, 636.0], [58.1, 636.0], [58.2, 637.0], [58.3, 637.0], [58.4, 638.0], [58.5, 639.0], [58.6, 639.0], [58.7, 640.0], [58.8, 640.0], [58.9, 641.0], [59.0, 642.0], [59.1, 642.0], [59.2, 643.0], [59.3, 644.0], [59.4, 644.0], [59.5, 645.0], [59.6, 645.0], [59.7, 646.0], [59.8, 647.0], [59.9, 647.0], [60.0, 647.0], [60.1, 648.0], [60.2, 648.0], [60.3, 649.0], [60.4, 649.0], [60.5, 649.0], [60.6, 650.0], [60.7, 650.0], [60.8, 651.0], [60.9, 651.0], [61.0, 651.0], [61.1, 652.0], [61.2, 652.0], [61.3, 652.0], [61.4, 653.0], [61.5, 653.0], [61.6, 653.0], [61.7, 654.0], [61.8, 654.0], [61.9, 654.0], [62.0, 655.0], [62.1, 655.0], [62.2, 655.0], [62.3, 656.0], [62.4, 656.0], [62.5, 656.0], [62.6, 656.0], [62.7, 657.0], [62.8, 657.0], [62.9, 657.0], [63.0, 658.0], [63.1, 658.0], [63.2, 658.0], [63.3, 659.0], [63.4, 660.0], [63.5, 660.0], [63.6, 660.0], [63.7, 661.0], [63.8, 661.0], [63.9, 662.0], [64.0, 662.0], [64.1, 662.0], [64.2, 663.0], [64.3, 663.0], [64.4, 663.0], [64.5, 664.0], [64.6, 664.0], [64.7, 664.0], [64.8, 665.0], [64.9, 665.0], [65.0, 665.0], [65.1, 665.0], [65.2, 666.0], [65.3, 666.0], [65.4, 666.0], [65.5, 667.0], [65.6, 667.0], [65.7, 668.0], [65.8, 668.0], [65.9, 669.0], [66.0, 669.0], [66.1, 670.0], [66.2, 670.0], [66.3, 671.0], [66.4, 671.0], [66.5, 672.0], [66.6, 672.0], [66.7, 673.0], [66.8, 673.0], [66.9, 674.0], [67.0, 674.0], [67.1, 675.0], [67.2, 675.0], [67.3, 675.0], [67.4, 676.0], [67.5, 676.0], [67.6, 676.0], [67.7, 677.0], [67.8, 677.0], [67.9, 678.0], [68.0, 678.0], [68.1, 679.0], [68.2, 679.0], [68.3, 679.0], [68.4, 680.0], [68.5, 680.0], [68.6, 681.0], [68.7, 681.0], [68.8, 681.0], [68.9, 682.0], [69.0, 682.0], [69.1, 682.0], [69.2, 683.0], [69.3, 683.0], [69.4, 683.0], [69.5, 684.0], [69.6, 684.0], [69.7, 684.0], [69.8, 685.0], [69.9, 685.0], [70.0, 685.0], [70.1, 686.0], [70.2, 686.0], [70.3, 687.0], [70.4, 687.0], [70.5, 688.0], [70.6, 688.0], [70.7, 689.0], [70.8, 689.0], [70.9, 690.0], [71.0, 690.0], [71.1, 691.0], [71.2, 691.0], [71.3, 692.0], [71.4, 692.0], [71.5, 693.0], [71.6, 693.0], [71.7, 694.0], [71.8, 694.0], [71.9, 695.0], [72.0, 695.0], [72.1, 695.0], [72.2, 696.0], [72.3, 697.0], [72.4, 697.0], [72.5, 698.0], [72.6, 698.0], [72.7, 699.0], [72.8, 699.0], [72.9, 700.0], [73.0, 701.0], [73.1, 701.0], [73.2, 702.0], [73.3, 702.0], [73.4, 702.0], [73.5, 703.0], [73.6, 704.0], [73.7, 704.0], [73.8, 705.0], [73.9, 705.0], [74.0, 706.0], [74.1, 707.0], [74.2, 707.0], [74.3, 708.0], [74.4, 708.0], [74.5, 709.0], [74.6, 710.0], [74.7, 710.0], [74.8, 711.0], [74.9, 712.0], [75.0, 712.0], [75.1, 713.0], [75.2, 713.0], [75.3, 714.0], [75.4, 715.0], [75.5, 715.0], [75.6, 716.0], [75.7, 716.0], [75.8, 716.0], [75.9, 717.0], [76.0, 717.0], [76.1, 718.0], [76.2, 718.0], [76.3, 718.0], [76.4, 719.0], [76.5, 719.0], [76.6, 719.0], [76.7, 720.0], [76.8, 720.0], [76.9, 720.0], [77.0, 721.0], [77.1, 721.0], [77.2, 722.0], [77.3, 722.0], [77.4, 722.0], [77.5, 723.0], [77.6, 723.0], [77.7, 724.0], [77.8, 724.0], [77.9, 725.0], [78.0, 725.0], [78.1, 726.0], [78.2, 726.0], [78.3, 727.0], [78.4, 728.0], [78.5, 729.0], [78.6, 730.0], [78.7, 730.0], [78.8, 731.0], [78.9, 731.0], [79.0, 732.0], [79.1, 733.0], [79.2, 733.0], [79.3, 734.0], [79.4, 735.0], [79.5, 736.0], [79.6, 737.0], [79.7, 738.0], [79.8, 738.0], [79.9, 739.0], [80.0, 739.0], [80.1, 740.0], [80.2, 740.0], [80.3, 741.0], [80.4, 742.0], [80.5, 743.0], [80.6, 743.0], [80.7, 744.0], [80.8, 745.0], [80.9, 746.0], [81.0, 747.0], [81.1, 748.0], [81.2, 749.0], [81.3, 750.0], [81.4, 751.0], [81.5, 752.0], [81.6, 753.0], [81.7, 754.0], [81.8, 755.0], [81.9, 756.0], [82.0, 756.0], [82.1, 757.0], [82.2, 757.0], [82.3, 758.0], [82.4, 759.0], [82.5, 759.0], [82.6, 760.0], [82.7, 760.0], [82.8, 761.0], [82.9, 762.0], [83.0, 763.0], [83.1, 764.0], [83.2, 765.0], [83.3, 766.0], [83.4, 767.0], [83.5, 768.0], [83.6, 769.0], [83.7, 770.0], [83.8, 771.0], [83.9, 772.0], [84.0, 774.0], [84.1, 778.0], [84.2, 779.0], [84.3, 781.0], [84.4, 782.0], [84.5, 784.0], [84.6, 786.0], [84.7, 788.0], [84.8, 791.0], [84.9, 793.0], [85.0, 794.0], [85.1, 795.0], [85.2, 796.0], [85.3, 797.0], [85.4, 798.0], [85.5, 799.0], [85.6, 801.0], [85.7, 804.0], [85.8, 806.0], [85.9, 807.0], [86.0, 809.0], [86.1, 810.0], [86.2, 811.0], [86.3, 812.0], [86.4, 814.0], [86.5, 815.0], [86.6, 816.0], [86.7, 819.0], [86.8, 820.0], [86.9, 822.0], [87.0, 823.0], [87.1, 824.0], [87.2, 825.0], [87.3, 827.0], [87.4, 828.0], [87.5, 829.0], [87.6, 831.0], [87.7, 833.0], [87.8, 836.0], [87.9, 839.0], [88.0, 841.0], [88.1, 843.0], [88.2, 844.0], [88.3, 845.0], [88.4, 846.0], [88.5, 847.0], [88.6, 851.0], [88.7, 853.0], [88.8, 854.0], [88.9, 855.0], [89.0, 857.0], [89.1, 859.0], [89.2, 861.0], [89.3, 863.0], [89.4, 866.0], [89.5, 869.0], [89.6, 873.0], [89.7, 877.0], [89.8, 881.0], [89.9, 882.0], [90.0, 884.0], [90.1, 887.0], [90.2, 892.0], [90.3, 894.0], [90.4, 898.0], [90.5, 899.0], [90.6, 901.0], [90.7, 903.0], [90.8, 905.0], [90.9, 907.0], [91.0, 909.0], [91.1, 911.0], [91.2, 912.0], [91.3, 913.0], [91.4, 915.0], [91.5, 918.0], [91.6, 919.0], [91.7, 920.0], [91.8, 923.0], [91.9, 925.0], [92.0, 928.0], [92.1, 929.0], [92.2, 931.0], [92.3, 935.0], [92.4, 939.0], [92.5, 943.0], [92.6, 957.0], [92.7, 962.0], [92.8, 975.0], [92.9, 978.0], [93.0, 982.0], [93.1, 984.0], [93.2, 986.0], [93.3, 990.0], [93.4, 994.0], [93.5, 996.0], [93.6, 997.0], [93.7, 998.0], [93.8, 1002.0], [93.9, 1006.0], [94.0, 1016.0], [94.1, 1029.0], [94.2, 1062.0], [94.3, 1075.0], [94.4, 1086.0], [94.5, 1135.0], [94.6, 1203.0], [94.7, 1231.0], [94.8, 1317.0], [94.9, 1792.0], [95.0, 2269.0], [95.1, 2718.0], [95.2, 3381.0], [95.3, 3892.0], [95.4, 4187.0], [95.5, 4980.0], [95.6, 5430.0], [95.7, 6060.0], [95.8, 6296.0], [95.9, 6678.0], [96.0, 6793.0], [96.1, 7099.0], [96.2, 7505.0], [96.3, 7689.0], [96.4, 8135.0], [96.5, 8444.0], [96.6, 8958.0], [96.7, 9251.0], [96.8, 9609.0], [96.9, 10693.0], [97.0, 10918.0], [97.1, 11295.0], [97.2, 12172.0], [97.3, 12394.0], [97.4, 13055.0], [97.5, 14480.0], [97.6, 16001.0], [97.7, 16795.0], [97.8, 17043.0], [97.9, 17119.0], [98.0, 17295.0], [98.1, 18091.0], [98.2, 19354.0], [98.3, 20279.0], [98.4, 22196.0], [98.5, 24093.0], [98.6, 29785.0], [98.7, 34617.0], [98.8, 47551.0], [98.9, 59977.0], [99.0, 66871.0], [99.1, 73653.0], [99.2, 100078.0], [99.3, 100167.0], [99.4, 100951.0], [99.5, 105814.0], [99.6, 129130.0], [99.7, 131108.0], [99.8, 135692.0], [99.9, 144563.0], [100.0, 230637.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 83557.0, "series": [{"data": [[0.0, 72705.0], [135200.0, 6.0], [132900.0, 88.0], [152100.0, 3.0], [66700.0, 7.0], [69900.0, 8.0], [76300.0, 1.0], [85900.0, 1.0], [89100.0, 1.0], [95500.0, 4.0], [108300.0, 63.0], [117900.0, 1.0], [127500.0, 3.0], [130700.0, 2.0], [149800.0, 4.0], [181800.0, 1.0], [207400.0, 1.0], [226600.0, 1.0], [100.0, 73190.0], [34500.0, 11.0], [32900.0, 2.0], [37700.0, 7.0], [160300.0, 1.0], [39300.0, 1.0], [44100.0, 3.0], [48900.0, 2.0], [47300.0, 1.0], [50500.0, 1.0], [200.0, 11179.0], [55300.0, 2.0], [60100.0, 4.0], [63300.0, 3.0], [64900.0, 8.0], [65800.0, 15.0], [69000.0, 1.0], [72200.0, 3.0], [300.0, 8139.0], [75400.0, 2.0], [81800.0, 5.0], [85000.0, 1.0], [88200.0, 1.0], [91400.0, 2.0], [94600.0, 2.0], [97800.0, 1.0], [101000.0, 26.0], [400.0, 10396.0], [104200.0, 1.0], [126600.0, 17.0], [500.0, 25620.0], [129800.0, 61.0], [600.0, 83557.0], [700.0, 49806.0], [177200.0, 1.0], [800.0, 19354.0], [900.0, 12678.0], [1000.0, 2666.0], [1100.0, 661.0], [1200.0, 710.0], [1300.0, 198.0], [1400.0, 151.0], [1500.0, 43.0], [1600.0, 29.0], [1700.0, 72.0], [1800.0, 105.0], [1900.0, 92.0], [2000.0, 45.0], [2100.0, 70.0], [2200.0, 102.0], [2300.0, 51.0], [2400.0, 121.0], [2500.0, 75.0], [2600.0, 103.0], [2700.0, 83.0], [2800.0, 52.0], [2900.0, 29.0], [3000.0, 30.0], [3100.0, 55.0], [3300.0, 94.0], [3200.0, 73.0], [3400.0, 108.0], [3500.0, 98.0], [3600.0, 79.0], [3700.0, 29.0], [3800.0, 81.0], [3900.0, 79.0], [4000.0, 181.0], [4200.0, 85.0], [68100.0, 1.0], [71300.0, 6.0], [4400.0, 50.0], [4600.0, 25.0], [4800.0, 53.0], [5000.0, 45.0], [5200.0, 52.0], [84100.0, 1.0], [5400.0, 59.0], [5600.0, 30.0], [5800.0, 55.0], [90500.0, 1.0], [6000.0, 221.0], [96900.0, 1.0], [6200.0, 203.0], [100100.0, 477.0], [6600.0, 244.0], [6400.0, 15.0], [6800.0, 15.0], [106500.0, 2.0], [7000.0, 249.0], [7400.0, 60.0], [7200.0, 76.0], [7600.0, 73.0], [7800.0, 22.0], [8000.0, 2.0], [128900.0, 16.0], [8400.0, 60.0], [134200.0, 2.0], [8800.0, 116.0], [9200.0, 194.0], [147000.0, 3.0], [9600.0, 27.0], [10000.0, 16.0], [159800.0, 1.0], [10400.0, 13.0], [11200.0, 99.0], [10800.0, 132.0], [11600.0, 2.0], [12000.0, 115.0], [12400.0, 27.0], [12800.0, 15.0], [13200.0, 8.0], [13600.0, 5.0], [14000.0, 4.0], [14800.0, 5.0], [14400.0, 18.0], [15200.0, 6.0], [15600.0, 10.0], [16000.0, 99.0], [16800.0, 133.0], [17600.0, 93.0], [18400.0, 24.0], [19200.0, 89.0], [20000.0, 3.0], [20800.0, 15.0], [21600.0, 4.0], [22400.0, 1.0], [23200.0, 129.0], [24000.0, 20.0], [24800.0, 14.0], [25600.0, 1.0], [26400.0, 1.0], [27200.0, 3.0], [29600.0, 1.0], [28800.0, 1.0], [30400.0, 6.0], [31200.0, 2.0], [32000.0, 48.0], [138300.0, 130.0], [33600.0, 96.0], [36800.0, 1.0], [35200.0, 1.0], [38400.0, 46.0], [40000.0, 29.0], [41600.0, 22.0], [44800.0, 2.0], [46400.0, 4.0], [48000.0, 24.0], [56000.0, 2.0], [57600.0, 1.0], [59200.0, 2.0], [60800.0, 4.0], [62400.0, 1.0], [64000.0, 1.0], [67200.0, 2.0], [73600.0, 10.0], [80000.0, 3.0], [92800.0, 2.0], [96000.0, 3.0], [99200.0, 1.0], [108800.0, 1.0], [112000.0, 1.0], [128000.0, 3.0], [134400.0, 8.0], [160000.0, 3.0], [179200.0, 1.0], [67100.0, 8.0], [70300.0, 5.0], [73500.0, 16.0], [79900.0, 1.0], [83100.0, 1.0], [95900.0, 7.0], [102300.0, 1.0], [136200.0, 2.0], [33100.0, 2.0], [133900.0, 4.0], [140300.0, 1.0], [146700.0, 4.0], [39500.0, 25.0], [159500.0, 2.0], [42700.0, 3.0], [41100.0, 2.0], [44300.0, 1.0], [45900.0, 1.0], [47500.0, 18.0], [49100.0, 1.0], [52300.0, 2.0], [60300.0, 2.0], [61900.0, 6.0], [65100.0, 4.0], [66200.0, 27.0], [69400.0, 4.0], [72600.0, 2.0], [79000.0, 3.0], [85400.0, 2.0], [88600.0, 1.0], [91800.0, 1.0], [101400.0, 163.0], [104600.0, 6.0], [114200.0, 1.0], [111000.0, 1.0], [130200.0, 6.0], [157200.0, 4.0], [135700.0, 26.0], [142100.0, 2.0], [71700.0, 1.0], [81300.0, 2.0], [84500.0, 4.0], [87700.0, 1.0], [94100.0, 1.0], [100500.0, 46.0], [103700.0, 1.0], [110100.0, 1.0], [126100.0, 4.0], [129300.0, 90.0], [165400.0, 1.0], [178200.0, 2.0], [229400.0, 1.0], [16900.0, 147.0], [17700.0, 1.0], [19300.0, 79.0], [18500.0, 6.0], [20100.0, 206.0], [20900.0, 6.0], [21700.0, 5.0], [22500.0, 2.0], [23300.0, 88.0], [24100.0, 30.0], [24900.0, 17.0], [26500.0, 3.0], [25700.0, 4.0], [28100.0, 13.0], [28900.0, 3.0], [29700.0, 1.0], [32100.0, 29.0], [131100.0, 137.0], [38600.0, 4.0], [156700.0, 1.0], [40200.0, 1.0], [163100.0, 8.0], [41800.0, 1.0], [45000.0, 1.0], [51400.0, 3.0], [53000.0, 2.0], [61000.0, 3.0], [64200.0, 2.0], [67600.0, 5.0], [70800.0, 3.0], [77200.0, 2.0], [74000.0, 1.0], [80400.0, 1.0], [86800.0, 1.0], [99600.0, 3.0], [106000.0, 3.0], [109200.0, 1.0], [128400.0, 13.0], [149600.0, 1.0], [147300.0, 1.0], [140900.0, 1.0], [160100.0, 15.0], [67500.0, 1.0], [70700.0, 2.0], [73900.0, 1.0], [80300.0, 1.0], [89900.0, 1.0], [96300.0, 4.0], [102700.0, 2.0], [105900.0, 4.0], [109100.0, 1.0], [112300.0, 1.0], [115500.0, 1.0], [125100.0, 1.0], [151400.0, 3.0], [33300.0, 2.0], [34900.0, 1.0], [38100.0, 1.0], [39700.0, 17.0], [44500.0, 1.0], [46100.0, 1.0], [49300.0, 1.0], [52500.0, 3.0], [54100.0, 3.0], [55700.0, 1.0], [57300.0, 16.0], [58900.0, 4.0], [65300.0, 13.0], [63700.0, 1.0], [66600.0, 4.0], [73000.0, 1.0], [69800.0, 25.0], [76200.0, 2.0], [82600.0, 1.0], [98600.0, 1.0], [101800.0, 10.0], [127400.0, 3.0], [134000.0, 17.0], [140400.0, 19.0], [144500.0, 122.0], [157300.0, 6.0], [68900.0, 14.0], [65700.0, 3.0], [72100.0, 4.0], [75300.0, 2.0], [81700.0, 2.0], [94500.0, 2.0], [100900.0, 34.0], [104100.0, 2.0], [126500.0, 19.0], [129700.0, 13.0], [8500.0, 20.0], [135800.0, 1.0], [8900.0, 130.0], [142200.0, 1.0], [9700.0, 105.0], [9300.0, 87.0], [155000.0, 1.0], [10100.0, 11.0], [10500.0, 57.0], [10900.0, 48.0], [11300.0, 3.0], [11700.0, 2.0], [12100.0, 312.0], [12500.0, 3.0], [12900.0, 74.0], [13300.0, 3.0], [13700.0, 54.0], [14100.0, 12.0], [14500.0, 10.0], [14900.0, 8.0], [15300.0, 6.0], [15700.0, 57.0], [16100.0, 19.0], [17000.0, 412.0], [17800.0, 30.0], [19400.0, 26.0], [18600.0, 8.0], [20200.0, 119.0], [21000.0, 3.0], [21800.0, 5.0], [22600.0, 2.0], [24200.0, 22.0], [25000.0, 10.0], [25800.0, 15.0], [27400.0, 2.0], [28200.0, 1.0], [29000.0, 26.0], [29800.0, 1.0], [32200.0, 3.0], [133500.0, 2.0], [34000.0, 1.0], [146300.0, 1.0], [35600.0, 2.0], [38800.0, 8.0], [159100.0, 1.0], [42000.0, 1.0], [46800.0, 1.0], [58000.0, 4.0], [61200.0, 2.0], [62800.0, 1.0], [64400.0, 2.0], [68000.0, 4.0], [71200.0, 5.0], [77600.0, 1.0], [74400.0, 4.0], [80800.0, 2.0], [84000.0, 14.0], [87200.0, 2.0], [100000.0, 116.0], [106400.0, 2.0], [128800.0, 13.0], [148800.0, 6.0], [180800.0, 1.0], [225600.0, 1.0], [133700.0, 7.0], [140100.0, 14.0], [67900.0, 29.0], [71100.0, 2.0], [80700.0, 1.0], [83900.0, 3.0], [87100.0, 1.0], [93500.0, 3.0], [103100.0, 21.0], [128700.0, 12.0], [131400.0, 7.0], [33500.0, 2.0], [35100.0, 5.0], [148300.0, 3.0], [38300.0, 27.0], [39900.0, 2.0], [41500.0, 2.0], [43100.0, 2.0], [173900.0, 1.0], [46300.0, 1.0], [47900.0, 125.0], [62300.0, 16.0], [65500.0, 9.0], [63900.0, 5.0], [67000.0, 46.0], [73400.0, 3.0], [70200.0, 2.0], [79800.0, 3.0], [83000.0, 1.0], [86200.0, 1.0], [92600.0, 1.0], [95800.0, 1.0], [105400.0, 3.0], [108600.0, 2.0], [115000.0, 4.0], [124600.0, 2.0], [131000.0, 63.0], [127800.0, 7.0], [139600.0, 2.0], [146000.0, 1.0], [210000.0, 1.0], [156500.0, 7.0], [66100.0, 18.0], [69300.0, 13.0], [72500.0, 1.0], [75700.0, 1.0], [88500.0, 1.0], [98100.0, 1.0], [94900.0, 2.0], [101300.0, 87.0], [104500.0, 3.0], [107700.0, 1.0], [120500.0, 1.0], [123700.0, 1.0], [130100.0, 5.0], [135000.0, 2.0], [147800.0, 1.0], [17100.0, 232.0], [17900.0, 38.0], [18700.0, 10.0], [19500.0, 26.0], [20300.0, 71.0], [21100.0, 8.0], [21900.0, 2.0], [23500.0, 4.0], [22700.0, 72.0], [24300.0, 22.0], [25100.0, 2.0], [25900.0, 48.0], [27500.0, 1.0], [29900.0, 7.0], [31500.0, 1.0], [32300.0, 4.0], [132700.0, 13.0], [35800.0, 2.0], [145500.0, 5.0], [39000.0, 1.0], [158300.0, 1.0], [43800.0, 3.0], [47000.0, 4.0], [45400.0, 7.0], [50200.0, 5.0], [55000.0, 20.0], [53400.0, 1.0], [64600.0, 16.0], [68400.0, 2.0], [71600.0, 6.0], [74800.0, 1.0], [78000.0, 3.0], [81200.0, 1.0], [84400.0, 5.0], [97200.0, 3.0], [100400.0, 30.0], [103600.0, 1.0], [113200.0, 2.0], [116400.0, 3.0], [129200.0, 26.0], [132000.0, 6.0], [183200.0, 1.0], [225700.0, 1.0], [68300.0, 6.0], [71500.0, 3.0], [77900.0, 2.0], [84300.0, 3.0], [87500.0, 2.0], [90700.0, 2.0], [97100.0, 2.0], [100300.0, 14.0], [109900.0, 6.0], [129100.0, 27.0], [133800.0, 12.0], [140200.0, 35.0], [146600.0, 9.0], [153000.0, 3.0], [131500.0, 7.0], [33700.0, 13.0], [137900.0, 2.0], [36900.0, 2.0], [40100.0, 2.0], [44900.0, 11.0], [46500.0, 18.0], [48100.0, 3.0], [51300.0, 1.0], [52900.0, 2.0], [56100.0, 4.0], [57700.0, 4.0], [59300.0, 1.0], [64100.0, 6.0], [67400.0, 8.0], [70600.0, 5.0], [77000.0, 4.0], [73800.0, 8.0], [80200.0, 2.0], [83400.0, 4.0], [89800.0, 1.0], [96200.0, 1.0], [99400.0, 1.0], [105800.0, 7.0], [109000.0, 2.0], [128200.0, 2.0], [135600.0, 6.0], [4100.0, 136.0], [4300.0, 6.0], [66500.0, 9.0], [4500.0, 95.0], [72900.0, 2.0], [69700.0, 2.0], [4700.0, 30.0], [5100.0, 33.0], [4900.0, 42.0], [79300.0, 1.0], [5300.0, 222.0], [85700.0, 1.0], [5500.0, 42.0], [88900.0, 1.0], [5700.0, 32.0], [6100.0, 160.0], [5900.0, 20.0], [6300.0, 52.0], [6500.0, 271.0], [6700.0, 192.0], [6900.0, 144.0], [7100.0, 80.0], [111300.0, 1.0], [7300.0, 137.0], [117700.0, 1.0], [7500.0, 349.0], [7900.0, 26.0], [7700.0, 65.0], [8100.0, 442.0], [8600.0, 45.0], [8200.0, 55.0], [137400.0, 30.0], [9000.0, 119.0], [9400.0, 57.0], [150200.0, 1.0], [9800.0, 23.0], [10200.0, 10.0], [156600.0, 1.0], [10600.0, 107.0], [11000.0, 79.0], [182200.0, 2.0], [11800.0, 28.0], [12200.0, 223.0], [12600.0, 138.0], [13000.0, 112.0], [13400.0, 24.0], [13800.0, 19.0], [14200.0, 11.0], [14600.0, 6.0], [15000.0, 29.0], [15800.0, 103.0], [15400.0, 17.0], [16200.0, 77.0], [17200.0, 229.0], [16400.0, 7.0], [18000.0, 43.0], [18800.0, 19.0], [19600.0, 11.0], [20400.0, 1.0], [21200.0, 27.0], [22000.0, 1.0], [23600.0, 2.0], [24400.0, 3.0], [25200.0, 28.0], [26000.0, 40.0], [26800.0, 8.0], [27600.0, 5.0], [31600.0, 8.0], [34400.0, 8.0], [135100.0, 8.0], [32800.0, 3.0], [154300.0, 1.0], [39200.0, 1.0], [40800.0, 4.0], [44000.0, 7.0], [45600.0, 2.0], [50400.0, 1.0], [55200.0, 3.0], [53600.0, 2.0], [64800.0, 6.0], [65600.0, 9.0], [68800.0, 3.0], [72000.0, 4.0], [75200.0, 5.0], [81600.0, 3.0], [84800.0, 2.0], [91200.0, 1.0], [97600.0, 6.0], [94400.0, 6.0], [100800.0, 19.0], [107200.0, 2.0], [123200.0, 1.0], [129600.0, 15.0], [137600.0, 6.0], [131200.0, 3.0], [227200.0, 3.0], [135300.0, 3.0], [148100.0, 6.0], [68700.0, 5.0], [71900.0, 9.0], [78300.0, 2.0], [84700.0, 7.0], [97500.0, 1.0], [94300.0, 1.0], [100700.0, 4.0], [103900.0, 2.0], [107100.0, 1.0], [110300.0, 2.0], [116700.0, 1.0], [123100.0, 1.0], [129500.0, 24.0], [133000.0, 46.0], [38700.0, 14.0], [40300.0, 1.0], [45100.0, 5.0], [46700.0, 1.0], [48300.0, 2.0], [49900.0, 1.0], [51500.0, 2.0], [62700.0, 2.0], [64300.0, 8.0], [67800.0, 7.0], [71000.0, 10.0], [74200.0, 1.0], [77400.0, 1.0], [83800.0, 1.0], [87000.0, 3.0], [90200.0, 1.0], [96600.0, 1.0], [106200.0, 1.0], [103000.0, 4.0], [128600.0, 20.0], [134800.0, 1.0], [166800.0, 1.0], [192400.0, 1.0], [145300.0, 35.0], [158100.0, 7.0], [66900.0, 5.0], [70100.0, 6.0], [73300.0, 1.0], [76500.0, 1.0], [86100.0, 1.0], [95700.0, 2.0], [105300.0, 1.0], [111700.0, 5.0], [124500.0, 2.0], [17300.0, 86.0], [16500.0, 22.0], [18100.0, 2.0], [18900.0, 22.0], [20500.0, 1.0], [21300.0, 20.0], [22100.0, 182.0], [22900.0, 7.0], [24500.0, 2.0], [23700.0, 5.0], [25300.0, 18.0], [26900.0, 12.0], [28500.0, 3.0], [30100.0, 2.0], [30900.0, 8.0], [31700.0, 1.0], [33000.0, 2.0], [34600.0, 57.0], [147100.0, 1.0], [153500.0, 1.0], [37800.0, 1.0], [41000.0, 2.0], [42600.0, 2.0], [44200.0, 1.0], [47400.0, 1.0], [49000.0, 4.0], [50600.0, 2.0], [53800.0, 3.0], [57000.0, 5.0], [55400.0, 3.0], [58600.0, 2.0], [60200.0, 2.0], [61800.0, 4.0], [63400.0, 19.0], [65000.0, 5.0], [66000.0, 35.0], [69200.0, 6.0], [72400.0, 7.0], [75600.0, 1.0], [78800.0, 3.0], [82000.0, 1.0], [91600.0, 2.0], [101200.0, 9.0], [110800.0, 6.0], [130000.0, 2.0], [133600.0, 1.0], [152800.0, 6.0], [131300.0, 1.0], [65900.0, 9.0], [69100.0, 3.0], [81900.0, 6.0], [85100.0, 3.0], [91500.0, 1.0], [97900.0, 1.0], [94700.0, 1.0], [126700.0, 2.0], [129900.0, 3.0], [141800.0, 44.0], [148200.0, 7.0], [180200.0, 2.0], [34100.0, 3.0], [133100.0, 1.0], [139500.0, 3.0], [145900.0, 10.0], [35700.0, 1.0], [38900.0, 4.0], [37300.0, 1.0], [40500.0, 1.0], [42100.0, 3.0], [45300.0, 1.0], [50100.0, 1.0], [54900.0, 21.0], [58100.0, 1.0], [61300.0, 4.0], [64500.0, 2.0], [68200.0, 1.0], [71400.0, 5.0], [77800.0, 1.0], [81000.0, 7.0], [93800.0, 1.0], [100200.0, 96.0], [116200.0, 1.0], [129000.0, 13.0], [156400.0, 1.0], [154100.0, 6.0], [166900.0, 13.0], [67300.0, 1.0], [70500.0, 4.0], [73700.0, 2.0], [76900.0, 4.0], [80100.0, 2.0], [83300.0, 2.0], [96100.0, 1.0], [105700.0, 1.0], [102500.0, 4.0], [108900.0, 2.0], [115300.0, 8.0], [128100.0, 15.0], [8700.0, 91.0], [8300.0, 132.0], [132600.0, 7.0], [9100.0, 122.0], [9500.0, 145.0], [9900.0, 26.0], [158200.0, 4.0], [10300.0, 12.0], [10700.0, 241.0], [164600.0, 2.0], [11100.0, 182.0], [11500.0, 2.0], [11900.0, 9.0], [190200.0, 2.0], [12700.0, 12.0], [12300.0, 107.0], [13100.0, 4.0], [13500.0, 191.0], [13900.0, 7.0], [14300.0, 20.0], [14700.0, 19.0], [15100.0, 30.0], [15500.0, 5.0], [15900.0, 75.0], [16300.0, 29.0], [17400.0, 43.0], [16600.0, 53.0], [18200.0, 6.0], [19000.0, 79.0], [19800.0, 2.0], [21400.0, 3.0], [20600.0, 2.0], [22200.0, 2.0], [23000.0, 19.0], [23800.0, 3.0], [24600.0, 2.0], [26200.0, 2.0], [27000.0, 2.0], [28600.0, 5.0], [27800.0, 3.0], [30200.0, 5.0], [31000.0, 2.0], [31800.0, 3.0], [32600.0, 2.0], [33200.0, 12.0], [34800.0, 3.0], [149500.0, 6.0], [42800.0, 2.0], [44400.0, 2.0], [46000.0, 3.0], [47600.0, 30.0], [49200.0, 1.0], [52400.0, 2.0], [54000.0, 1.0], [60400.0, 1.0], [65200.0, 2.0], [63600.0, 2.0], [66400.0, 9.0], [69600.0, 1.0], [72800.0, 2.0], [76000.0, 1.0], [85600.0, 1.0], [88800.0, 1.0], [95200.0, 1.0], [101600.0, 3.0], [117600.0, 1.0], [130400.0, 11.0], [127200.0, 2.0], [145600.0, 6.0], [149700.0, 1.0], [156100.0, 1.0], [66300.0, 5.0], [69500.0, 1.0], [72700.0, 1.0], [79100.0, 2.0], [85500.0, 5.0], [82300.0, 1.0], [95100.0, 8.0], [98300.0, 2.0], [101500.0, 13.0], [111100.0, 10.0], [127100.0, 2.0], [130300.0, 22.0], [134600.0, 1.0], [147400.0, 2.0], [230600.0, 2.0], [34300.0, 14.0], [132300.0, 1.0], [151500.0, 6.0], [39100.0, 1.0], [40700.0, 1.0], [47100.0, 5.0], [50300.0, 3.0], [51900.0, 1.0], [55100.0, 34.0], [53500.0, 2.0], [56700.0, 2.0], [58300.0, 1.0], [59900.0, 2.0], [63100.0, 29.0], [64700.0, 24.0], [68600.0, 12.0], [71800.0, 5.0], [75000.0, 3.0], [78200.0, 3.0], [81400.0, 3.0], [84600.0, 8.0], [94200.0, 1.0], [91000.0, 1.0], [100600.0, 26.0], [103800.0, 1.0], [116600.0, 25.0], [129400.0, 33.0], [162000.0, 16.0], [134100.0, 1.0], [140500.0, 9.0], [146900.0, 6.0], [153300.0, 4.0], [67700.0, 1.0], [70900.0, 7.0], [74100.0, 1.0], [77300.0, 8.0], [80500.0, 2.0], [86900.0, 2.0], [90100.0, 1.0], [99700.0, 4.0], [112500.0, 1.0], [115700.0, 2.0], [128500.0, 4.0], [138200.0, 46.0], [144600.0, 1.0], [202200.0, 1.0], [16700.0, 118.0], [18300.0, 14.0], [17500.0, 50.0], [19100.0, 65.0], [19900.0, 4.0], [21500.0, 1.0], [20700.0, 2.0], [23100.0, 21.0], [23900.0, 17.0], [25500.0, 3.0], [26300.0, 1.0], [27100.0, 2.0], [28700.0, 1.0], [30300.0, 1.0], [31900.0, 28.0], [32700.0, 1.0], [33400.0, 12.0], [35000.0, 1.0], [155100.0, 2.0], [38200.0, 2.0], [39800.0, 18.0], [41400.0, 1.0], [43000.0, 1.0], [167900.0, 3.0], [47800.0, 2.0], [54200.0, 1.0], [59000.0, 7.0], [62200.0, 4.0], [65400.0, 9.0], [66800.0, 28.0], [73200.0, 3.0], [70000.0, 7.0], [76400.0, 1.0], [79600.0, 1.0], [82800.0, 2.0], [86000.0, 2.0], [95600.0, 2.0], [102000.0, 1.0], [105200.0, 3.0], [111600.0, 1.0], [118000.0, 14.0], [130800.0, 1.0], [127600.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 230600.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 969.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 195284.0, "series": [{"data": [[0.0, 175726.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 195284.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 19121.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 969.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 18.28571428571429, "minX": 1.68286458E12, "maxY": 3000.0, "series": [{"data": [[1.68286464E12, 3000.0], [1.68286482E12, 3000.0], [1.682865E12, 18.28571428571429], [1.6828647E12, 3000.0], [1.68286488E12, 2757.448544973548], [1.68286458E12, 3000.0], [1.68286476E12, 3000.0], [1.68286494E12, 507.43949044585935]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.682865E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 249.0, "minX": 1.0, "maxY": 227273.0, "series": [{"data": [[2.0, 163140.0], [4.0, 163139.5], [6.0, 163138.0], [7.0, 158278.0], [8.0, 158278.0], [9.0, 157262.0], [10.0, 227268.0], [12.0, 227273.0], [14.0, 131204.0], [15.0, 225686.0], [16.0, 163131.0], [17.0, 163130.0], [19.0, 128922.0], [21.0, 128921.0], [22.0, 128922.0], [24.0, 128919.5], [26.0, 128919.5], [27.0, 128919.0], [28.0, 128915.0], [29.0, 128910.0], [30.0, 128903.0], [31.0, 128899.0], [32.0, 128896.0], [35.0, 127875.0], [34.0, 134256.0], [37.0, 131170.0], [39.0, 131164.0], [38.0, 131167.0], [41.0, 131161.0], [40.0, 131163.0], [43.0, 131161.0], [44.0, 131155.0], [48.0, 131154.0], [53.0, 131154.5], [52.0, 131154.0], [55.0, 131154.4], [57.0, 131155.0], [59.0, 131154.0], [61.0, 131153.0], [62.0, 131150.0], [66.0, 131151.0], [65.0, 131151.33333333334], [71.0, 131147.0], [70.0, 131151.0], [69.0, 131150.5], [75.0, 131146.0], [79.0, 131139.0], [78.0, 131145.0], [77.0, 131145.2], [83.0, 131128.0], [85.0, 131129.5], [91.0, 131115.0], [90.0, 131116.0], [89.0, 131128.33333333334], [88.0, 131129.0], [94.0, 131100.5], [92.0, 131101.0], [99.0, 131088.0], [98.0, 131093.0], [97.0, 131093.0], [96.0, 131098.5], [103.0, 131086.0], [102.0, 131087.33333333334], [107.0, 131082.0], [106.0, 131078.0], [105.0, 131081.0], [104.0, 131082.0], [111.0, 158221.0], [109.0, 131082.0], [115.0, 126110.0], [114.0, 126112.0], [112.0, 127178.0], [118.0, 142152.5], [116.0, 126111.0], [123.0, 132044.0], [122.0, 132045.0], [121.0, 129984.0], [120.0, 131070.0], [127.0, 132037.0], [126.0, 132040.0], [124.0, 132042.0], [135.0, 131150.5], [130.0, 131148.0], [129.0, 131148.0], [141.0, 131148.0], [140.0, 131147.0], [138.0, 131149.0], [137.0, 131147.0], [136.0, 131147.33333333334], [151.0, 131143.0], [150.0, 131145.0], [149.0, 131145.5], [147.0, 131146.75], [146.0, 131147.0], [145.0, 131145.0], [158.0, 131140.0], [156.0, 131141.66666666666], [154.0, 131141.0], [153.0, 131145.0], [167.0, 131139.0], [166.0, 131139.5], [164.0, 131139.33333333334], [161.0, 131141.5], [160.0, 131141.0], [175.0, 131136.0], [174.0, 131138.0], [173.0, 131137.0], [172.0, 131139.5], [170.0, 131138.0], [168.0, 131140.0], [182.0, 131133.0], [181.0, 131132.0], [180.0, 131136.5], [178.0, 131136.5], [177.0, 131136.0], [191.0, 131123.0], [190.0, 131126.0], [189.0, 131130.5], [187.0, 131131.0], [186.0, 131131.66666666666], [184.0, 131130.0], [198.0, 131108.0], [197.0, 131117.0], [196.0, 131119.6], [207.0, 131093.0], [205.0, 131095.33333333334], [202.0, 131095.0], [200.0, 131098.5], [214.0, 131090.0], [213.0, 131088.5], [211.0, 131091.0], [209.0, 131091.0], [217.0, 131083.0], [216.0, 131086.5], [230.0, 131075.0], [239.0, 131067.0], [238.0, 131069.0], [236.0, 131068.0], [235.0, 131072.0], [234.0, 131074.33333333334], [233.0, 131074.16666666666], [246.0, 115308.5], [245.0, 115309.0], [243.0, 115048.0], [242.0, 115032.66666666667], [255.0, 100409.0], [254.0, 100489.0], [253.0, 129166.0], [252.0, 100533.0], [251.0, 115308.0], [249.0, 115306.0], [248.0, 115309.0], [259.0, 100268.0], [271.0, 100219.0], [270.0, 100223.0], [269.0, 100225.0], [267.0, 100230.0], [261.0, 100239.0], [260.0, 100267.0], [257.0, 100268.0], [256.0, 100337.0], [280.0, 100214.66666666667], [283.0, 100215.0], [282.0, 100216.0], [281.0, 100216.0], [277.0, 100216.0], [276.0, 100214.0], [275.0, 100216.0], [273.0, 100217.0], [272.0, 100215.0], [291.0, 100214.0], [301.0, 100214.0], [302.0, 100212.33333333333], [300.0, 100212.0], [298.0, 100213.0], [296.0, 100213.0], [295.0, 100212.0], [292.0, 100214.5], [290.0, 100213.0], [289.0, 100215.0], [288.0, 100215.0], [307.0, 100208.0], [318.0, 100208.0], [319.0, 100207.0], [317.0, 100208.0], [313.0, 100209.0], [312.0, 100208.0], [310.0, 100207.5], [308.0, 100208.0], [306.0, 100211.0], [305.0, 100212.33333333333], [335.0, 100199.5], [331.0, 100200.0], [329.0, 100201.0], [328.0, 100200.5], [326.0, 100204.0], [325.0, 100202.0], [324.0, 100204.5], [323.0, 100206.2], [348.0, 100198.0], [350.0, 100198.0], [351.0, 100195.0], [349.0, 100195.0], [346.0, 100197.5], [345.0, 100196.0], [343.0, 100198.0], [336.0, 100200.0], [339.0, 100199.5], [337.0, 100199.0], [342.0, 100199.0], [341.0, 100200.0], [367.0, 100176.0], [364.0, 100176.66666666667], [361.0, 100178.0], [360.0, 100179.5], [358.0, 100186.0], [357.0, 100186.5], [354.0, 100185.0], [353.0, 100187.0], [381.0, 100173.0], [383.0, 100173.0], [380.0, 100174.0], [369.0, 100175.0], [368.0, 100175.0], [379.0, 100174.0], [378.0, 100174.5], [377.0, 100174.0], [376.0, 100174.0], [374.0, 100177.0], [373.0, 100175.5], [372.0, 100176.0], [398.0, 100170.0], [399.0, 100169.0], [396.0, 100169.0], [395.0, 100172.0], [394.0, 100174.0], [393.0, 100172.75], [389.0, 100173.0], [388.0, 100171.0], [384.0, 100173.5], [403.0, 100167.0], [414.0, 100161.0], [409.0, 100162.0], [408.0, 100162.0], [407.0, 100162.0], [406.0, 100164.0], [404.0, 100165.0], [402.0, 100165.0], [401.0, 100167.0], [400.0, 100169.0], [430.0, 100157.0], [428.0, 100158.0], [417.0, 100161.0], [427.0, 100156.0], [426.0, 100160.0], [425.0, 100157.0], [424.0, 100160.0], [423.0, 100160.0], [422.0, 100161.5], [421.0, 100160.0], [420.0, 100161.0], [446.0, 100142.0], [444.0, 100144.0], [443.0, 100143.0], [441.0, 100145.6], [436.0, 100150.5], [434.0, 100154.0], [433.0, 100157.0], [432.0, 100156.5], [462.0, 100129.0], [463.0, 100128.0], [461.0, 100129.0], [460.0, 100129.5], [458.0, 100129.0], [457.0, 100130.0], [455.0, 100130.25], [451.0, 100137.0], [448.0, 100137.0], [479.0, 100122.66666666667], [478.0, 100123.0], [475.0, 100123.0], [474.0, 100125.0], [473.0, 100127.0], [471.0, 100126.0], [470.0, 100129.0], [469.0, 100129.0], [467.0, 100128.33333333333], [464.0, 100128.0], [494.0, 100120.0], [495.0, 100120.0], [493.0, 100120.0], [492.0, 100119.0], [490.0, 100120.0], [488.0, 100121.0], [485.0, 100120.33333333333], [482.0, 100122.0], [481.0, 100122.0], [511.0, 100114.0], [506.0, 100117.0], [504.0, 100117.0], [500.0, 100118.0], [499.0, 100118.0], [497.0, 100119.0], [496.0, 100121.0], [537.0, 100090.0], [539.0, 100088.0], [536.0, 100093.33333333333], [519.0, 100110.0], [518.0, 100108.0], [517.0, 100109.0], [516.0, 100109.0], [515.0, 100109.0], [513.0, 100109.0], [512.0, 100114.0], [535.0, 100093.0], [532.0, 100099.0], [531.0, 100099.0], [528.0, 100100.0], [525.0, 100105.0], [524.0, 100104.0], [523.0, 100104.0], [522.0, 100104.5], [520.0, 100107.0], [562.0, 100082.0], [573.0, 100080.0], [574.0, 100079.0], [561.0, 100082.0], [570.0, 100079.0], [569.0, 100080.0], [568.0, 100080.5], [551.0, 100084.0], [550.0, 100085.0], [548.0, 100087.0], [547.0, 100087.66666666666], [545.0, 100088.33333333333], [558.0, 100083.0], [557.0, 100083.0], [553.0, 100083.0], [552.0, 100083.0], [566.0, 100080.0], [565.0, 100082.5], [563.0, 100083.0], [606.0, 100055.5], [607.0, 100051.0], [604.0, 100057.0], [603.0, 100058.5], [602.0, 100059.0], [583.0, 100077.25], [582.0, 100078.0], [580.0, 100078.0], [579.0, 100078.66666666667], [590.0, 100066.0], [589.0, 100068.0], [588.0, 100068.0], [586.0, 100068.0], [584.0, 100069.0], [599.0, 100060.5], [598.0, 100061.0], [596.0, 100062.0], [593.0, 100062.0], [627.0, 100022.5], [639.0, 100021.4], [637.0, 100022.0], [633.0, 100021.33333333333], [632.0, 100022.0], [623.0, 100023.0], [611.0, 135789.66666666666], [608.0, 100044.0], [614.0, 100034.5], [612.0, 135789.0], [622.0, 100024.0], [621.0, 100028.0], [620.0, 100030.0], [619.0, 108971.75], [616.0, 135788.0], [631.0, 100022.0], [630.0, 100022.0], [628.0, 100022.0], [625.0, 100022.0], [666.0, 116693.5], [658.0, 116672.0], [671.0, 116668.5], [669.0, 121090.33333333333], [668.0, 101021.0], [655.0, 128802.0], [642.0, 100020.0], [640.0, 100021.0], [645.0, 104104.0], [644.0, 129818.5], [647.0, 145555.0], [646.0, 145566.0], [652.0, 123178.0], [651.0, 117603.0], [650.0, 145543.0], [649.0, 145544.0], [648.0, 145555.0], [663.0, 116669.5], [662.0, 116670.0], [660.0, 116670.0], [657.0, 128800.66666666667], [703.0, 134444.6666666667], [700.0, 134445.0], [679.0, 101009.0], [678.0, 101011.0], [677.0, 116662.0], [676.0, 116666.0], [675.0, 116667.0], [674.0, 116666.0], [673.0, 116667.0], [695.0, 116604.0], [694.0, 109824.5], [692.0, 103013.0], [691.0, 109828.0], [689.0, 125955.33333333333], [686.0, 116647.0], [684.0, 116647.0], [682.0, 103019.0], [681.0, 116651.0], [680.0, 144588.0], [724.0, 103148.0], [733.0, 125162.0], [734.0, 126614.0], [723.0, 103154.5], [721.0, 103159.25], [732.0, 126615.0], [730.0, 118743.0], [728.0, 115706.0], [711.0, 103165.4], [706.0, 103166.0], [717.0, 103162.0], [716.0, 103160.0], [715.0, 103165.0], [714.0, 103165.0], [713.0, 105984.0], [727.0, 116256.0], [726.0, 103144.0], [725.0, 101379.0], [743.0, 126609.0], [765.0, 119471.5], [767.0, 109949.0], [763.0, 126597.0], [762.0, 126598.5], [761.0, 126598.0], [742.0, 110869.0], [741.0, 126610.0], [740.0, 133713.0], [739.0, 126613.0], [738.0, 110867.0], [737.0, 113287.5], [736.0, 126613.0], [759.0, 126599.33333333333], [756.0, 121051.0], [753.0, 120280.0], [749.0, 126603.0], [748.0, 126607.0], [747.0, 126607.0], [746.0, 126608.0], [745.0, 126607.0], [744.0, 110866.0], [792.0, 92854.0], [796.0, 96369.0], [797.0, 96368.0], [785.0, 108909.0], [784.0, 108912.0], [787.0, 124559.0], [786.0, 104192.0], [795.0, 106481.0], [794.0, 110370.0], [793.0, 92852.0], [783.0, 97188.0], [769.0, 126596.0], [768.0, 109947.0], [772.0, 114324.5], [770.0, 109948.0], [775.0, 126593.0], [773.0, 109946.0], [782.0, 126561.0], [781.0, 126566.0], [780.0, 126569.0], [779.0, 126579.0], [778.0, 126581.0], [777.0, 126591.0], [776.0, 126593.0], [791.0, 100234.0], [790.0, 111387.0], [789.0, 110331.0], [788.0, 111643.0], [828.0, 100015.0], [831.0, 190249.0], [816.0, 101294.0], [818.0, 124602.0], [817.0, 124604.0], [821.0, 100073.0], [820.0, 95747.5], [830.0, 84876.0], [829.0, 84879.0], [827.0, 100016.0], [826.0, 100708.0], [825.0, 100666.0], [824.0, 104642.0], [812.0, 100849.0], [800.0, 105460.66666666667], [802.0, 108650.0], [801.0, 108651.0], [804.0, 100873.0], [803.0, 94368.0], [807.0, 100861.0], [806.0, 100864.0], [811.0, 100901.0], [810.0, 102590.5], [808.0, 102592.0], [823.0, 115502.0], [822.0, 100538.0], [860.0, 100598.0], [852.0, 85792.0], [861.0, 101830.0], [849.0, 182255.0], [848.0, 182262.0], [851.0, 180859.0], [850.0, 181866.0], [859.0, 100599.5], [857.0, 100607.0], [856.0, 100664.0], [839.0, 81969.0], [838.0, 77856.0], [837.0, 109079.0], [836.0, 109080.0], [835.0, 84383.0], [834.0, 84385.0], [833.0, 80285.0], [832.0, 190248.0], [847.0, 100649.0], [845.0, 100449.0], [844.0, 100455.0], [843.0, 183240.0], [842.0, 80368.0], [841.0, 81367.0], [840.0, 81369.0], [855.0, 100671.0], [854.0, 180242.0], [853.0, 180246.0], [890.0, 111112.0], [895.0, 104788.2], [889.0, 109713.33333333333], [888.0, 111115.0], [885.0, 116477.0], [884.0, 111118.0], [883.0, 111373.0], [881.0, 111118.6], [876.0, 178241.0], [866.0, 101825.0], [865.0, 101825.0], [871.0, 100506.0], [870.0, 101822.0], [875.0, 178244.0], [874.0, 100192.0], [873.0, 100208.0], [872.0, 179240.0], [921.0, 78059.0], [926.0, 81055.0], [927.0, 70167.0], [912.0, 97675.0], [925.0, 81842.0], [923.0, 112577.0], [922.0, 69560.0], [911.0, 97679.0], [896.0, 105252.0], [900.0, 108811.5], [897.0, 105976.0], [903.0, 105530.5], [901.0, 105818.5], [910.0, 98674.0], [909.0, 83043.0], [908.0, 84040.0], [907.0, 177245.0], [906.0, 105810.0], [905.0, 105812.0], [904.0, 105814.0], [919.0, 80500.33333333333], [918.0, 70177.0], [915.0, 122043.0], [914.0, 84698.0], [955.0, 101247.0], [948.0, 65949.0], [958.0, 101238.66666666667], [944.0, 65854.0], [947.0, 66833.0], [946.0, 95650.0], [954.0, 73787.0], [953.0, 72006.0], [952.0, 65514.0], [935.0, 81066.0], [934.0, 71397.0], [933.0, 71400.0], [932.0, 81047.0], [931.0, 81079.0], [930.0, 107209.0], [929.0, 71009.0], [928.0, 77045.0], [943.0, 69133.0], [942.0, 80021.0], [941.0, 81017.0], [940.0, 96677.0], [939.0, 107184.0], [938.0, 70145.0], [937.0, 78881.0], [936.0, 81066.0], [951.0, 64957.0], [950.0, 80737.0], [949.0, 65947.0], [988.0, 85142.0], [991.0, 65642.0], [977.0, 70547.0], [976.0, 66306.0], [979.0, 68817.0], [978.0, 67082.0], [981.0, 68291.0], [980.0, 67810.0], [990.0, 97822.0], [989.0, 85140.0], [987.0, 91421.0], [986.0, 86152.0], [985.0, 81937.0], [984.0, 81938.0], [975.0, 69098.0], [960.0, 134580.0], [962.0, 167913.0], [961.0, 167916.0], [964.0, 67504.0], [963.0, 72852.0], [967.0, 100481.0], [966.0, 100489.0], [974.0, 70837.0], [973.0, 72517.0], [972.0, 71354.0], [971.0, 64130.0], [970.0, 64132.0], [969.0, 66494.0], [968.0, 71842.0], [983.0, 87595.0], [982.0, 87598.0], [1020.0, 72015.0], [1023.0, 69987.0], [1008.0, 66113.0], [1011.0, 87098.0], [1009.0, 69662.0], [1013.0, 68651.0], [1012.0, 65103.0], [1022.0, 71005.0], [1021.0, 71008.0], [1019.0, 72017.0], [1018.0, 67803.0], [1017.0, 67805.0], [1016.0, 86912.0], [1007.0, 67120.0], [993.0, 83334.5], [995.0, 65555.0], [994.0, 65557.0], [997.0, 72168.0], [996.0, 75720.0], [999.0, 71804.0], [998.0, 153055.0], [1006.0, 67122.0], [1005.0, 78074.0], [1004.0, 78075.0], [1003.0, 73860.0], [1002.0, 73862.0], [1001.0, 73697.0], [1000.0, 73699.0], [1015.0, 68814.0], [1014.0, 68815.0], [1074.0, 100803.5], [1062.0, 94731.0], [1078.0, 100521.0], [1086.0, 118077.0], [1056.0, 66523.0], [1058.0, 65515.0], [1060.0, 64507.0], [1066.0, 129872.5], [1064.0, 94439.0], [1068.0, 72161.0], [1084.0, 100516.0], [1076.0, 100590.0], [1024.0, 64774.0], [1026.0, 64696.0], [1028.0, 71741.0], [1030.0, 137916.0], [1032.0, 69906.0], [1034.0, 192473.0], [1036.0, 63636.0], [1038.0, 66878.0], [1054.0, 100181.0], [1052.0, 64166.0], [1050.0, 65176.0], [1048.0, 65314.42857142857], [1040.0, 66183.0], [1070.0, 100575.0], [1122.0, 100684.0], [1144.0, 134560.5], [1148.0, 138021.5], [1120.0, 111070.6], [1124.0, 99736.0], [1126.0, 67494.0], [1128.0, 66484.0], [1130.0, 95599.0], [1146.0, 104502.0], [1136.0, 103869.0], [1088.0, 118079.0], [1092.0, 109294.5], [1090.0, 104905.5], [1094.0, 100512.0], [1096.0, 100509.0], [1102.0, 100507.0], [1110.0, 100500.0], [1108.0, 100500.0], [1104.0, 100505.0], [1134.0, 127327.0], [1188.0, 64706.0], [1194.0, 61281.0], [1192.0, 91814.0], [1190.0, 159162.0], [1184.0, 64712.5], [1154.0, 166918.0], [1156.0, 103880.0], [1158.0, 159548.0], [1160.0, 111136.0], [1164.0, 64698.0], [1166.0, 64660.0], [1182.0, 64713.0], [1180.0, 64721.0], [1178.0, 64724.0], [1176.0, 64728.0], [1174.0, 64693.0], [1172.0, 64656.0], [1170.0, 64658.0], [1428.0, 642.0], [1548.0, 639.0], [1588.0, 639.0], [1576.0, 639.5], [1594.0, 638.0], [1568.0, 638.3333333333334], [1546.0, 639.0], [1564.0, 638.0], [1560.0, 639.0], [1558.0, 638.0], [1554.0, 638.0], [1582.0, 639.5], [1620.0, 636.0], [1610.0, 636.0], [1722.0, 631.3333333333334], [1788.0, 628.0], [1790.0, 630.0], [1760.0, 630.8], [1762.0, 630.5882352941176], [1764.0, 630.3333333333335], [1766.0, 629.6666666666666], [1768.0, 627.3333333333333], [1770.0, 627.5], [1774.0, 629.5], [1786.0, 628.0], [1784.0, 627.0], [1782.0, 628.0], [1780.0, 628.0], [1778.0, 629.0], [1776.0, 628.4], [1742.0, 630.875], [1738.0, 631.6], [1736.0, 631.1666666666666], [1734.0, 632.0], [1732.0, 632.0], [1730.0, 631.5], [1758.0, 631.0], [1756.0, 630.6], [1754.0, 630.5], [1752.0, 633.0], [1750.0, 630.0], [1748.0, 630.0], [1746.0, 632.0], [1852.0, 487.1428571428571], [1830.0, 625.0], [1824.0, 626.0], [1828.0, 626.8], [1792.0, 627.25], [1794.0, 626.8], [1796.0, 626.6], [1800.0, 628.5], [1802.0, 627.5], [1804.0, 627.5], [1822.0, 624.6666666666666], [1820.0, 626.5], [1818.0, 625.0], [1814.0, 627.4666666666666], [1812.0, 627.0], [1810.0, 626.5], [1808.0, 626.0], [1838.0, 623.0], [1832.0, 626.25], [1888.0, 445.0], [1900.0, 250.5], [1898.0, 447.0], [1896.0, 447.0], [1906.0, 59265.5], [1904.0, 60271.0], [1886.0, 447.0], [1884.0, 447.3333333333333], [1882.0, 444.5], [1880.0, 447.0], [1902.0, 249.0], [1974.0, 13500.666666666668], [1970.0, 37849.0], [1956.0, 1767.2], [1954.0, 1942.5], [1952.0, 1684.0], [1932.0, 734.0], [2014.0, 9928.076923076924], [2016.0, 18739.86666666667], [2012.0, 34379.0], [2008.0, 147876.0], [1998.0, 15160.8], [1992.0, 10352.857142857143], [1990.0, 10614.0], [1986.0, 5492.6], [2168.0, 38612.66666666667], [2224.0, 11057.0], [2216.0, 4185.0], [2552.0, 676.75], [2556.0, 676.3749999999999], [2500.0, 681.0], [2516.0, 679.0], [2520.0, 678.75], [2524.0, 678.0], [2548.0, 676.4], [2536.0, 678.1428571428572], [2492.0, 680.0], [2488.0, 682.0], [2484.0, 681.0], [2480.0, 679.0], [2680.0, 666.0], [2676.0, 665.3333333333334], [2624.0, 670.3333333333334], [2628.0, 670.5], [2636.0, 668.0], [2644.0, 668.0769230769231], [2652.0, 666.5], [2684.0, 665.5], [2668.0, 665.0], [2656.0, 666.5], [2588.0, 676.0], [2584.0, 676.0], [2576.0, 676.25], [2568.0, 677.0], [2560.0, 677.1250000000001], [2620.0, 671.1666666666667], [2600.0, 674.0], [2596.0, 675.3333333333334], [2788.0, 662.0], [2812.0, 637.3333333333334], [2752.0, 661.5], [2756.0, 661.3333333333334], [2760.0, 660.5], [2764.0, 661.0], [2768.0, 660.8], [2808.0, 639.0], [2792.0, 659.6666666666666], [2716.0, 663.0], [2712.0, 665.0], [2700.0, 665.5], [2692.0, 664.6666666666666], [2688.0, 664.0], [2748.0, 661.0], [2744.0, 2640.6], [2740.0, 10572.0], [2732.0, 663.0], [2724.0, 663.0], [2720.0, 663.0], [2928.0, 607.3333333333334], [2940.0, 450.0], [2880.0, 621.0], [2896.0, 608.5714285714287], [2900.0, 608.8333333333333], [2904.0, 608.3125000000001], [2908.0, 607.7391304347825], [2936.0, 566.0], [2932.0, 1583.3333333333335], [2924.0, 606.0833333333335], [2920.0, 608.3333333333334], [2916.0, 608.0], [2912.0, 608.5], [2844.0, 631.3076923076924], [2840.0, 632.5], [2836.0, 632.0714285714287], [2824.0, 639.0], [2820.0, 638.5], [2876.0, 327.16666666666663], [2872.0, 1364.9090909090908], [2868.0, 364.0], [2864.0, 426.49999999999994], [2860.0, 1226.972972972973], [2856.0, 630.4444444444445], [2852.0, 630.6], [2848.0, 631.3333333333334], [2948.0, 1020.0], [2984.0, 714.0], [3000.0, 1826.0074788615482], [2944.0, 1020.0], [2952.0, 1019.75], [2956.0, 846.6], [2960.0, 1083.625], [2964.0, 716.5], [2968.0, 430.0], [2976.0, 1002.0], [2169.0, 696.0], [2161.0, 10594.0], [2157.0, 18233.142857142855], [2497.0, 9000.285714285716], [2553.0, 1236.2727272727275], [2501.0, 679.8571428571428], [2505.0, 679.0], [2517.0, 7727.666666666667], [2521.0, 679.0], [2549.0, 678.0], [2545.0, 678.0], [2541.0, 677.0], [2529.0, 677.6666666666666], [2493.0, 679.0], [2489.0, 681.0], [2485.0, 682.0], [2665.0, 666.5], [2685.0, 664.0], [2625.0, 670.6666666666667], [2637.0, 2318.666666666667], [2641.0, 668.5], [2645.0, 668.0], [2653.0, 667.1666666666666], [2677.0, 665.3333333333334], [2669.0, 665.0], [2657.0, 666.3333333333334], [2589.0, 675.5], [2585.0, 675.5], [2569.0, 676.3333333333334], [2561.0, 678.0], [2621.0, 672.6666666666666], [2617.0, 672.8125], [2613.0, 673.6666666666666], [2605.0, 675.0], [2601.0, 674.5], [2801.0, 2071.0], [2793.0, 661.0], [2753.0, 661.8], [2761.0, 660.5], [2765.0, 661.6666666666666], [2769.0, 661.7142857142857], [2773.0, 660.2], [2777.0, 661.0], [2781.0, 661.0], [2805.0, 638.8461538461538], [2789.0, 661.25], [2717.0, 664.25], [2713.0, 663.0], [2705.0, 665.0], [2697.0, 665.0], [2693.0, 664.2857142857143], [2689.0, 664.8571428571428], [2749.0, 661.8], [2745.0, 661.0], [2741.0, 662.6666666666666], [2733.0, 662.5], [2729.0, 664.0], [2721.0, 663.0], [2925.0, 606.6774193548387], [2893.0, 608.2], [2897.0, 608.5], [2901.0, 608.0], [2905.0, 608.0], [2941.0, 450.3333333333333], [2937.0, 65102.5], [2933.0, 642.7848101265823], [2929.0, 607.3076923076923], [2921.0, 607.75], [2913.0, 609.0], [2845.0, 631.4444444444446], [2841.0, 631.2615384615384], [2837.0, 631.8421052631579], [2833.0, 632.1764705882354], [2825.0, 4312.333333333334], [2821.0, 639.0], [2817.0, 639.0], [2877.0, 668.9999999999999], [2873.0, 328.0], [2865.0, 372.0], [2857.0, 631.5], [2849.0, 1153.157894736842], [2949.0, 1021.0], [2965.0, 1003.0], [2945.0, 1021.6], [2961.0, 432.0], [2969.0, 858.75], [2973.0, 953.5], [2985.0, 999.5], [2981.0, 714.5], [2977.0, 870.8974358974359], [1083.0, 124043.2], [1057.0, 65517.0], [1059.0, 87053.0], [1061.0, 62764.0], [1063.0, 62773.0], [1067.0, 94162.0], [1077.0, 118091.0], [1075.0, 100601.0], [1055.0, 64619.0], [1025.0, 140946.0], [1027.0, 63689.0], [1029.0, 137914.0], [1031.0, 69907.0], [1033.0, 135898.0], [1035.0, 67692.0], [1037.0, 102399.0], [1039.0, 66875.0], [1053.0, 66642.0], [1051.0, 64168.0], [1049.0, 64858.0], [1041.0, 66181.0], [1069.0, 100568.0], [1145.0, 103956.0], [1125.0, 61386.0], [1121.0, 100590.0], [1123.0, 166872.0], [1127.0, 67492.0], [1129.0, 66482.0], [1143.0, 165771.5], [1141.0, 144862.33333333334], [1137.0, 166932.0], [1115.0, 100498.0], [1093.0, 118074.0], [1095.0, 118072.0], [1101.0, 104898.75], [1097.0, 100509.0], [1103.0, 100506.0], [1111.0, 100500.0], [1107.0, 100503.0], [1131.0, 95547.0], [1187.0, 64710.0], [1191.0, 106579.0], [1193.0, 158151.0], [1189.0, 64704.0], [1185.0, 64710.0], [1183.0, 64713.0], [1153.0, 166917.5], [1155.0, 166915.0], [1157.0, 159550.0], [1159.0, 65621.0], [1163.0, 64735.0], [1161.0, 93812.0], [1165.0, 64734.0], [1167.0, 64659.0], [1177.0, 64726.0], [1175.0, 64654.0], [1171.0, 64657.0], [1169.0, 64696.0], [1585.0, 641.0], [1599.0, 639.0], [1573.0, 639.6666666666666], [1589.0, 637.0], [1547.0, 639.0], [1545.0, 638.0], [1541.0, 639.0], [1561.0, 641.0], [1559.0, 639.6666666666666], [1555.0, 640.0], [1553.0, 638.0], [1583.0, 639.5], [1581.0, 638.0], [1621.0, 636.0], [1619.0, 636.0], [1617.0, 637.0], [1613.0, 636.0], [1607.0, 636.0], [1605.0, 636.0], [1727.0, 632.0], [1725.0, 632.6666666666666], [1723.0, 631.3333333333334], [1721.0, 631.25], [1783.0, 628.0], [1779.0, 628.0], [1787.0, 628.5], [1761.0, 631.0526315789473], [1763.0, 630.8333333333333], [1765.0, 629.5409090909094], [1767.0, 628.6], [1769.0, 628.6], [1773.0, 627.6666666666666], [1789.0, 628.1666666666666], [1785.0, 627.0], [1781.0, 627.5], [1777.0, 629.0], [1743.0, 631.2857142857143], [1739.0, 631.3333333333334], [1737.0, 630.3333333333334], [1735.0, 630.25], [1733.0, 630.0], [1731.0, 631.0], [1729.0, 634.0], [1759.0, 631.0], [1757.0, 632.0], [1755.0, 629.9090909090909], [1753.0, 631.0], [1751.0, 630.7], [1749.0, 629.5], [1747.0, 630.6999999999999], [1855.0, 488.3333333333333], [1835.0, 628.5], [1827.0, 627.0], [1825.0, 626.6], [1829.0, 626.0], [1831.0, 628.0], [1849.0, 488.0], [1843.0, 487.75], [1823.0, 625.0], [1793.0, 629.0], [1797.0, 627.5], [1799.0, 626.5], [1801.0, 627.0], [1803.0, 629.0], [1807.0, 626.0], [1805.0, 626.0], [1821.0, 626.0], [1819.0, 629.0], [1813.0, 627.75], [1811.0, 627.5], [1809.0, 626.5], [1839.0, 490.0], [1837.0, 626.0], [1833.0, 626.8], [1907.0, 100534.0], [1891.0, 446.8333333333333], [1909.0, 2228.5], [1911.0, 1016.5], [1895.0, 446.0], [1863.0, 488.0], [1861.0, 487.3333333333333], [1859.0, 487.6666666666667], [1885.0, 446.0], [1883.0, 445.0], [1881.0, 445.0], [1903.0, 60271.0], [1901.0, 251.0], [1983.0, 725.0], [1969.0, 15635.666666666668], [1953.0, 1707.0], [1935.0, 734.0], [1993.0, 4210.0], [1997.0, 10615.0], [1989.0, 11020.25], [1987.0, 10527.444444444445], [1985.0, 30608.6], [2166.0, 3679.0000000000005], [2170.0, 7391.0], [2162.0, 696.5], [2158.0, 2005.3749999999998], [2218.0, 52613.5], [2502.0, 680.0], [2550.0, 678.0], [2506.0, 679.125], [2514.0, 678.5], [2510.0, 2094.714285714286], [2522.0, 679.0], [2558.0, 677.0], [2554.0, 677.3333333333334], [2546.0, 678.0], [2542.0, 679.0], [2490.0, 681.0], [2482.0, 677.0], [2630.0, 670.4444444444445], [2686.0, 666.0], [2634.0, 670.3333333333334], [2638.0, 669.0000000000001], [2650.0, 667.0], [2654.0, 667.0], [2678.0, 666.6666666666666], [2674.0, 665.0], [2670.0, 665.0], [2666.0, 666.75], [2590.0, 676.0], [2586.0, 675.3333333333334], [2582.0, 677.0], [2574.0, 677.0], [2618.0, 673.5], [2614.0, 675.0], [2606.0, 673.7142857142858], [2718.0, 663.1111111111111], [2810.0, 639.1666666666666], [2758.0, 661.0], [2766.0, 661.125], [2778.0, 662.0], [2814.0, 639.0], [2806.0, 638.0], [2798.0, 660.75], [2790.0, 660.0], [2710.0, 665.0], [2698.0, 664.3333333333334], [2694.0, 664.6666666666666], [2750.0, 662.0], [2746.0, 2640.6], [2742.0, 661.4], [2738.0, 663.0], [2734.0, 2076.714285714286], [2730.0, 663.0], [2722.0, 663.0], [2918.0, 608.3333333333334], [2922.0, 606.6], [2894.0, 608.1666666666666], [2906.0, 608.6], [2942.0, 450.0], [2934.0, 566.2857142857142], [2930.0, 607.6666666666666], [2926.0, 606.8571428571429], [2914.0, 609.0], [2846.0, 631.3333333333334], [2842.0, 631.5], [2838.0, 631.7142857142857], [2834.0, 632.0555555555555], [2878.0, 622.0], [2874.0, 327.42857142857144], [2866.0, 370.31249999999994], [2862.0, 478.3636363636364], [2858.0, 631.0], [2854.0, 630.7142857142857], [2850.0, 1214.909090909091], [2954.0, 691.4285714285714], [2950.0, 1021.0], [2962.0, 430.5], [2966.0, 716.0], [2970.0, 811.5238095238095], [2974.0, 1002.0], [2986.0, 999.3333333333334], [2982.0, 1000.0], [2978.0, 740.8181818181819], [2159.0, 5651.5], [2559.0, 677.3333333333334], [2555.0, 677.0], [2499.0, 5223.6], [2503.0, 679.25], [2507.0, 678.2857142857142], [2515.0, 678.0], [2523.0, 677.5], [2547.0, 676.4285714285714], [2539.0, 678.3333333333334], [2535.0, 678.25], [2495.0, 680.0], [2491.0, 680.0], [2487.0, 681.0], [2483.0, 6831.0], [2679.0, 665.0], [2627.0, 669.5], [2631.0, 670.0], [2635.0, 669.9], [2651.0, 665.0], [2655.0, 666.25], [2675.0, 665.75], [2671.0, 667.0], [2667.0, 665.0], [2591.0, 675.25], [2587.0, 674.5], [2583.0, 676.1428571428572], [2579.0, 676.0], [2575.0, 3153.75], [2623.0, 671.0], [2619.0, 671.7777777777778], [2615.0, 673.75], [2611.0, 674.0], [2595.0, 676.0], [2799.0, 659.0], [2815.0, 639.2], [2755.0, 661.8333333333334], [2759.0, 660.75], [2763.0, 661.0], [2771.0, 662.5], [2767.0, 661.3333333333334], [2775.0, 661.75], [2779.0, 661.7142857142857], [2795.0, 661.0], [2791.0, 661.6], [2719.0, 663.6666666666666], [2715.0, 663.4], [2703.0, 664.75], [2695.0, 665.0], [2691.0, 664.0], [2751.0, 661.8461538461537], [2747.0, 660.0], [2743.0, 662.0], [2735.0, 663.4], [2731.0, 664.0], [2723.0, 663.6666666666666], [2919.0, 608.0], [2923.0, 606.6666666666666], [2935.0, 766.6923076923077], [2943.0, 593.0], [2895.0, 608.5], [2899.0, 608.75], [2907.0, 608.0], [2911.0, 608.8333333333333], [2939.0, 52172.4], [2931.0, 606.8], [2927.0, 607.1428571428571], [2847.0, 631.0], [2843.0, 630.0], [2839.0, 633.0], [2835.0, 632.6], [2823.0, 639.0], [2819.0, 638.0], [2879.0, 22795.555555555555], [2871.0, 363.0], [2867.0, 364.6666666666667], [2863.0, 888.2333333333336], [2859.0, 5863.0], [2855.0, 631.0], [2851.0, 631.0], [2951.0, 1019.0], [2947.0, 1021.5714285714286], [2955.0, 651.1428571428571], [2959.0, 854.5714285714286], [2963.0, 1003.0], [2967.0, 811.5], [2983.0, 428.5], [2979.0, 643.75], [1.0, 163148.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[2989.0401840961335, 2151.9981206852276]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 3000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 294.0, "minX": 1.68286458E12, "maxY": 1024937.6166666667, "series": [{"data": [[1.68286464E12, 792546.4666666667], [1.68286482E12, 875817.2166666667], [1.682865E12, 386.3833333333333], [1.6828647E12, 1024937.6166666667], [1.68286488E12, 90692.01666666666], [1.68286458E12, 927038.4666666667], [1.68286476E12, 980509.1666666666], [1.68286494E12, 11121.05]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.68286464E12, 558457.2], [1.68286482E12, 612082.8], [1.682865E12, 294.0], [1.6828647E12, 707800.8], [1.68286488E12, 63445.2], [1.68286458E12, 643692.0], [1.68286476E12, 683415.6], [1.68286494E12, 7912.8]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.682865E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 682.8839223028397, "minX": 1.68286458E12, "maxY": 150827.0285714286, "series": [{"data": [[1.68286464E12, 1870.9045771099356], [1.68286482E12, 2013.2928591008697], [1.682865E12, 150827.0285714286], [1.6828647E12, 2862.9911675798467], [1.68286488E12, 4191.945634920639], [1.68286458E12, 682.8839223028397], [1.68286476E12, 1647.5893054294797], [1.68286494E12, 110520.9118895966]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.682865E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 633.8641339678056, "minX": 1.68286458E12, "maxY": 150826.99999999997, "series": [{"data": [[1.68286464E12, 1870.86817682718], [1.68286482E12, 1904.5967927631693], [1.682865E12, 150826.99999999997], [1.6828647E12, 2344.4722747023716], [1.68286488E12, 4131.464153439155], [1.68286458E12, 633.8641339678056], [1.68286476E12, 1588.1220957334608], [1.68286494E12, 110520.9044585987]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.682865E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 30.476532230803247, "minX": 1.68286458E12, "maxY": 35296.74285714286, "series": [{"data": [[1.68286464E12, 62.23287156115032], [1.68286482E12, 590.8839501096451], [1.682865E12, 35296.74285714286], [1.6828647E12, 1815.11989892312], [1.68286488E12, 807.9859788359788], [1.68286458E12, 30.476532230803247], [1.68286476E12, 371.38865035942774], [1.68286494E12, 11829.878980891714]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.682865E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 3.0, "minX": 1.68286458E12, "maxY": 230637.0, "series": [{"data": [[1.68286464E12, 101559.0], [1.68286482E12, 134867.0], [1.682865E12, 227273.0], [1.6828647E12, 162073.0], [1.68286488E12, 192473.0], [1.68286458E12, 51365.0], [1.68286476E12, 230637.0], [1.68286494E12, 190249.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.68286464E12, 7559.9000000000015], [1.68286482E12, 1001.0], [1.682865E12, 226318.8], [1.6828647E12, 766.0], [1.68286488E12, 996.0], [1.68286458E12, 197.0], [1.68286476E12, 919.0], [1.68286494E12, 131147.7]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.68286464E12, 101328.99], [1.68286482E12, 11837.0], [1.682865E12, 227273.0], [1.6828647E12, 15064.0], [1.68286488E12, 106019.46], [1.68286458E12, 40062.0], [1.68286476E12, 16341.990000000002], [1.68286494E12, 179811.13999999993]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.68286464E12, 11076.550000000007], [1.68286482E12, 1203.0], [1.682865E12, 227273.0], [1.6828647E12, 859.9500000000007], [1.68286488E12, 3985.2999999999993], [1.68286458E12, 277.0], [1.68286476E12, 1070.0], [1.68286494E12, 132043.7]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.68286464E12, 6.0], [1.68286482E12, 18.0], [1.682865E12, 127875.0], [1.6828647E12, 15.0], [1.68286488E12, 103.0], [1.68286458E12, 3.0], [1.68286476E12, 21.0], [1.68286494E12, 64130.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.68286464E12, 148.0], [1.68286482E12, 774.0], [1.682865E12, 131204.0], [1.6828647E12, 664.0], [1.68286488E12, 662.0], [1.68286458E12, 138.0], [1.68286476E12, 799.0], [1.68286494E12, 100568.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.682865E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 5.0, "minX": 1.0, "maxY": 164613.0, "series": [{"data": [[2.0, 73107.0], [3.0, 94585.0], [4.0, 70877.0], [5.0, 65926.5], [6.0, 34948.0], [7.0, 93665.5], [8.0, 85336.0], [9.0, 64920.0], [10.0, 69819.0], [12.0, 7794.0], [13.0, 100489.0], [14.0, 101823.5], [15.0, 108812.0], [17.0, 128920.0], [19.0, 10042.0], [20.0, 8308.0], [22.0, 131074.0], [24.0, 85.5], [27.0, 164613.0], [29.0, 35597.5], [30.0, 64656.0], [32.0, 106399.0], [35.0, 47618.0], [45.0, 95922.0], [53.0, 100521.0], [55.0, 109947.5], [71.0, 18009.0], [75.0, 85.0], [76.0, 131090.5], [80.0, 13791.0], [87.0, 71.0], [88.0, 78.0], [95.0, 94.0], [97.0, 88.0], [96.0, 131139.0], [114.0, 63152.0], [112.0, 12121.5], [124.0, 98.0], [151.0, 139.0], [155.0, 113.0], [184.0, 141.0], [201.0, 162.0], [211.0, 334.0], [240.0, 396.0], [250.0, 166.0], [262.0, 619.0], [312.0, 188.0], [328.0, 8919.5], [343.0, 136.0], [381.0, 6697.0], [397.0, 100146.0], [407.0, 533.0], [437.0, 204.0], [458.0, 8115.0], [489.0, 173.0], [535.0, 112.0], [536.0, 12180.0], [578.0, 108.0], [589.0, 741.0], [628.0, 618.0], [662.0, 135.0], [641.0, 179.0], [667.0, 148.0], [670.0, 599.0], [688.0, 16848.0], [730.0, 107.0], [705.0, 629.0], [739.0, 6.0], [757.0, 80.0], [750.0, 663.0], [780.0, 197.0], [827.0, 115.0], [814.0, 476.0], [815.0, 606.0], [860.0, 183.0], [893.0, 649.0], [900.0, 111.0], [906.0, 730.0], [911.0, 683.0], [918.0, 589.0], [968.0, 245.5], [993.0, 211.0], [1020.0, 688.0], [1085.0, 525.0], [1030.0, 627.0], [1063.0, 558.0], [1031.0, 578.0], [1116.0, 118.0], [1122.0, 12.0], [1111.0, 123.0], [1109.0, 189.0], [1113.0, 385.0], [1110.0, 683.0], [1092.0, 666.0], [1143.0, 673.0], [1120.0, 646.0], [1168.0, 159.0], [1180.0, 147.0], [1205.0, 175.0], [1187.0, 662.0], [1181.0, 683.0], [1157.0, 668.0], [1197.0, 514.0], [1212.0, 709.0], [1217.0, 193.0], [1278.0, 718.0], [1247.0, 695.0], [1227.0, 688.0], [1239.0, 535.0], [1280.0, 695.0], [1304.0, 169.0], [1298.0, 733.0], [1299.0, 719.0], [1302.0, 616.0], [1329.0, 78.0], [1308.0, 741.0], [1310.0, 760.0], [1309.0, 658.0], [1343.0, 584.0], [1317.0, 665.0], [1318.0, 665.0], [1337.0, 662.0], [1338.0, 741.0], [1294.0, 594.0], [1289.0, 723.0], [1283.0, 757.0], [1401.0, 5.0], [1388.0, 181.0], [1353.0, 179.0], [1362.0, 616.0], [1346.0, 704.0], [1457.0, 854.0], [1429.0, 716.0], [1434.0, 659.0], [1451.0, 620.0], [1456.0, 600.0], [1462.0, 596.0], [1467.0, 633.0], [1444.0, 881.0], [1426.0, 991.0], [1491.0, 62.0], [1525.0, 561.0], [1508.0, 755.0], [1498.0, 656.0], [1505.0, 682.0], [1496.0, 591.0], [1506.0, 900.0], [1523.0, 611.0], [1580.0, 727.0], [1565.0, 647.0], [1657.0, 59.0], [1610.0, 108.5], [1601.0, 824.0], [1727.0, 8.0], [1709.0, 130.0], [1686.0, 168.0], [1664.0, 50.0], [1682.0, 42.0], [1715.0, 713.0], [1705.0, 725.0], [1667.0, 665.0], [1749.0, 167.0], [1781.0, 105.0], [1745.0, 117.0], [1782.0, 653.0], [1757.0, 669.0], [1773.0, 694.0], [1800.0, 139.0], [1847.0, 621.0], [1802.0, 613.0], [1797.0, 600.0], [1909.0, 113.0], [1859.0, 83.0], [1917.0, 756.0], [1896.0, 720.0], [1876.0, 811.0], [1874.0, 532.0], [1967.0, 9.0], [1945.0, 170.0], [1937.0, 33.0], [1941.0, 40.0], [1951.0, 640.0], [1927.0, 643.0], [1931.0, 735.0], [2034.0, 148.0], [1993.0, 65.0], [2029.0, 655.0], [2027.0, 665.0], [2047.0, 405.0], [2021.0, 821.0], [2007.0, 643.0], [2009.0, 1004.0], [2014.0, 769.0], [2019.0, 794.0], [2033.0, 911.0], [2124.0, 98.0], [2146.0, 10.0], [2093.0, 57.0], [2089.0, 52.0], [2138.0, 81.0], [2135.0, 695.0], [2134.0, 103.0], [2139.0, 127.0], [2125.0, 135.0], [2117.0, 52.0], [2120.0, 743.0], [2114.0, 67.0], [2154.0, 119.0], [2155.0, 149.0], [2109.0, 43.0], [2048.0, 706.0], [2057.0, 654.0], [2065.0, 919.0], [2099.0, 747.0], [2100.0, 798.0], [2096.0, 858.0], [2183.0, 627.0], [2202.0, 62.0], [2204.0, 67.0], [2274.0, 120.0], [2291.0, 110.0], [2292.0, 618.0], [2205.0, 118.0], [2211.0, 100.0], [2215.0, 72.0], [2256.0, 77.0], [2240.0, 651.0], [2269.0, 132.0], [2262.0, 144.0], [2266.0, 656.0], [2260.0, 48.0], [2192.0, 77.0], [2191.0, 115.0], [2188.0, 739.0], [2298.0, 82.0], [2216.0, 172.0], [2235.0, 675.0], [2227.0, 684.0], [2178.0, 269.0], [2239.0, 33.0], [2327.0, 148.0], [2357.0, 83.0], [2351.0, 650.0], [2371.0, 33.0], [2365.0, 144.0], [2364.0, 453.0], [2425.0, 763.0], [2417.0, 910.0], [2430.0, 623.0], [2388.0, 700.0], [2391.0, 607.0], [2312.0, 762.0], [2319.0, 558.0], [2373.0, 560.0], [2512.0, 716.0], [2479.0, 654.0], [2441.0, 685.0], [2463.0, 627.0], [2527.0, 796.0], [2494.0, 628.0], [2586.0, 715.5], [2613.0, 732.0], [2592.0, 614.0], [2626.0, 754.0], [2653.0, 926.0], [2587.0, 852.0], [2707.0, 782.0], [2849.0, 693.0], [1.0, 100181.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[589.0, 138308.0], [670.0, 14402.0], [45.0, 16269.0], [3.0, 27683.0], [1085.0, 12660.5], [1143.0, 111780.0], [1227.0, 16016.0], [1298.0, 16002.0], [1346.0, 16281.0], [1451.0, 28190.0], [1498.0, 54971.5], [1657.0, 13515.0], [1705.0, 77310.0], [114.0, 54111.0], [1917.0, 29046.0], [124.0, 17270.5], [2135.0, 14393.0], [2048.0, 38789.5], [2100.0, 22736.0], [2215.0, 19519.0], [2240.0, 144581.0], [2292.0, 108313.0], [2216.0, 17043.0], [9.0, 65314.0], [155.0, 16022.0], [2479.0, 14147.0], [2463.0, 57764.0], [10.0, 138346.0], [2849.0, 19383.0], [13.0, 14269.0], [312.0, 57371.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 2849.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 164613.0, "series": [{"data": [[2.0, 73107.0], [3.0, 94585.0], [4.0, 70877.0], [5.0, 65926.5], [6.0, 34948.0], [7.0, 93665.5], [8.0, 85336.0], [9.0, 64920.0], [10.0, 69819.0], [12.0, 7794.0], [13.0, 100489.0], [14.0, 101823.5], [15.0, 108812.0], [17.0, 128920.0], [19.0, 10042.0], [20.0, 8308.0], [22.0, 131074.0], [24.0, 85.5], [27.0, 164613.0], [29.0, 35597.5], [30.0, 64656.0], [32.0, 106399.0], [35.0, 47618.0], [45.0, 95922.0], [53.0, 100521.0], [55.0, 109947.5], [71.0, 18009.0], [75.0, 85.0], [76.0, 131090.5], [80.0, 13791.0], [87.0, 71.0], [88.0, 78.0], [95.0, 94.0], [97.0, 88.0], [96.0, 131139.0], [114.0, 63152.0], [112.0, 12121.5], [124.0, 98.0], [151.0, 139.0], [155.0, 113.0], [184.0, 141.0], [201.0, 162.0], [211.0, 334.0], [240.0, 396.0], [250.0, 166.0], [262.0, 619.0], [312.0, 188.0], [328.0, 8919.5], [343.0, 136.0], [381.0, 6697.0], [397.0, 100146.0], [407.0, 533.0], [437.0, 204.0], [458.0, 8115.0], [489.0, 173.0], [535.0, 112.0], [536.0, 12180.0], [578.0, 108.0], [589.0, 741.0], [628.0, 618.0], [662.0, 135.0], [641.0, 179.0], [667.0, 148.0], [670.0, 599.0], [688.0, 16848.0], [730.0, 107.0], [705.0, 629.0], [739.0, 6.0], [757.0, 80.0], [750.0, 663.0], [780.0, 197.0], [827.0, 115.0], [814.0, 476.0], [815.0, 606.0], [860.0, 183.0], [893.0, 649.0], [900.0, 111.0], [906.0, 730.0], [911.0, 683.0], [918.0, 589.0], [968.0, 245.0], [993.0, 211.0], [1020.0, 688.0], [1085.0, 525.0], [1030.0, 627.0], [1063.0, 558.0], [1031.0, 578.0], [1116.0, 118.0], [1122.0, 12.0], [1111.0, 123.0], [1109.0, 189.0], [1113.0, 385.0], [1110.0, 683.0], [1092.0, 666.0], [1143.0, 673.0], [1120.0, 646.0], [1168.0, 159.0], [1180.0, 147.0], [1205.0, 175.0], [1187.0, 662.0], [1181.0, 683.0], [1157.0, 668.0], [1197.0, 514.0], [1212.0, 709.0], [1217.0, 193.0], [1278.0, 718.0], [1247.0, 695.0], [1227.0, 688.0], [1239.0, 535.0], [1280.0, 695.0], [1304.0, 169.0], [1298.0, 733.0], [1299.0, 719.0], [1302.0, 616.0], [1329.0, 78.0], [1308.0, 741.0], [1310.0, 760.0], [1309.0, 658.0], [1343.0, 584.0], [1317.0, 665.0], [1318.0, 665.0], [1337.0, 662.0], [1338.0, 741.0], [1294.0, 594.0], [1289.0, 723.0], [1283.0, 757.0], [1401.0, 5.0], [1388.0, 181.0], [1353.0, 179.0], [1362.0, 616.0], [1346.0, 704.0], [1457.0, 854.0], [1429.0, 716.0], [1434.0, 659.0], [1451.0, 620.0], [1456.0, 600.0], [1462.0, 596.0], [1467.0, 633.0], [1444.0, 881.0], [1426.0, 991.0], [1491.0, 62.0], [1525.0, 561.0], [1508.0, 755.0], [1498.0, 656.0], [1505.0, 682.0], [1496.0, 590.5], [1506.0, 900.0], [1523.0, 611.0], [1580.0, 727.0], [1565.0, 647.0], [1657.0, 59.0], [1610.0, 108.5], [1601.0, 824.0], [1727.0, 8.0], [1709.0, 130.0], [1686.0, 168.0], [1664.0, 50.0], [1682.0, 42.0], [1715.0, 713.0], [1705.0, 725.0], [1667.0, 665.0], [1749.0, 167.0], [1781.0, 105.0], [1745.0, 117.0], [1782.0, 653.0], [1757.0, 669.0], [1773.0, 694.0], [1800.0, 139.0], [1847.0, 621.0], [1802.0, 613.0], [1797.0, 600.0], [1909.0, 113.0], [1859.0, 83.0], [1917.0, 756.0], [1896.0, 720.0], [1876.0, 811.0], [1874.0, 532.0], [1967.0, 9.0], [1945.0, 170.0], [1937.0, 33.0], [1941.0, 40.0], [1951.0, 640.0], [1927.0, 643.0], [1931.0, 735.0], [2034.0, 148.0], [1993.0, 65.0], [2029.0, 655.0], [2027.0, 665.0], [2047.0, 405.0], [2021.0, 821.0], [2007.0, 643.0], [2009.0, 1004.0], [2014.0, 769.0], [2019.0, 794.0], [2033.0, 911.0], [2124.0, 98.0], [2146.0, 10.0], [2093.0, 57.0], [2089.0, 52.0], [2138.0, 81.0], [2135.0, 695.0], [2134.0, 103.0], [2139.0, 127.0], [2125.0, 135.0], [2117.0, 52.0], [2120.0, 743.0], [2114.0, 67.0], [2154.0, 119.0], [2155.0, 149.0], [2109.0, 43.0], [2048.0, 706.0], [2057.0, 654.0], [2065.0, 919.0], [2099.0, 747.0], [2100.0, 798.0], [2096.0, 858.0], [2183.0, 627.0], [2202.0, 62.0], [2204.0, 67.0], [2274.0, 120.0], [2291.0, 110.0], [2292.0, 618.0], [2205.0, 118.0], [2211.0, 100.0], [2215.0, 72.0], [2256.0, 77.0], [2240.0, 651.0], [2269.0, 132.0], [2262.0, 144.0], [2266.0, 656.0], [2260.0, 48.0], [2192.0, 77.0], [2191.0, 115.0], [2188.0, 739.0], [2298.0, 82.0], [2216.0, 172.0], [2235.0, 675.0], [2227.0, 684.0], [2178.0, 269.0], [2239.0, 33.0], [2327.0, 148.0], [2357.0, 83.0], [2351.0, 650.0], [2371.0, 33.0], [2365.0, 144.0], [2364.0, 453.0], [2425.0, 763.0], [2417.0, 910.0], [2430.0, 623.0], [2388.0, 700.0], [2391.0, 607.0], [2312.0, 762.0], [2319.0, 558.0], [2373.0, 560.0], [2512.0, 716.0], [2479.0, 654.0], [2441.0, 685.0], [2463.0, 627.0], [2527.0, 796.0], [2494.0, 628.0], [2586.0, 715.5], [2613.0, 732.0], [2592.0, 614.0], [2626.0, 754.0], [2653.0, 926.0], [2587.0, 852.0], [2707.0, 782.0], [2849.0, 693.0], [1.0, 100181.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[589.0, 0.0], [670.0, 0.0], [45.0, 0.0], [3.0, 0.0], [1085.0, 0.0], [1143.0, 0.0], [1227.0, 0.0], [1298.0, 0.0], [1346.0, 0.0], [1451.0, 0.0], [1498.0, 0.0], [1657.0, 0.0], [1705.0, 0.0], [114.0, 0.0], [1917.0, 0.0], [124.0, 0.0], [2135.0, 0.0], [2048.0, 0.0], [2100.0, 0.0], [2215.0, 0.0], [2240.0, 0.0], [2292.0, 0.0], [2216.0, 0.0], [9.0, 0.0], [155.0, 0.0], [2479.0, 0.0], [2463.0, 0.0], [10.0, 0.0], [2849.0, 0.0], [13.0, 0.0], [312.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 2849.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 126.66666666666667, "minX": 1.68286458E12, "maxY": 1411.4666666666667, "series": [{"data": [[1.68286464E12, 1108.05], [1.68286482E12, 1181.6166666666666], [1.6828647E12, 1411.4666666666667], [1.68286488E12, 126.66666666666667], [1.68286458E12, 1331.9], [1.68286476E12, 1358.6333333333334]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68286488E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.11666666666666667, "minX": 1.68286458E12, "maxY": 1404.3666666666666, "series": [{"data": [[1.68286464E12, 1108.05], [1.68286482E12, 1214.45], [1.682865E12, 0.5833333333333334], [1.6828647E12, 1404.3666666666666], [1.68286488E12, 125.88333333333334], [1.68286458E12, 1277.1666666666667], [1.68286476E12, 1355.9833333333333], [1.68286494E12, 15.7]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.68286482E12, 1.55], [1.6828647E12, 7.1], [1.68286488E12, 0.11666666666666667], [1.68286458E12, 4.733333333333333], [1.68286476E12, 2.65]], "isOverall": false, "label": "Non HTTP response code: java.net.SocketException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.682865E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.11666666666666667, "minX": 1.68286458E12, "maxY": 1404.3666666666666, "series": [{"data": [[1.68286464E12, 1108.05], [1.68286482E12, 1214.45], [1.682865E12, 0.5833333333333334], [1.6828647E12, 1404.3666666666666], [1.68286488E12, 125.88333333333334], [1.68286458E12, 1277.1666666666667], [1.68286476E12, 1355.9833333333333], [1.68286494E12, 15.7]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.68286482E12, 1.55], [1.6828647E12, 7.1], [1.68286488E12, 0.11666666666666667], [1.68286458E12, 4.733333333333333], [1.68286476E12, 2.65]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.682865E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.11666666666666667, "minX": 1.68286458E12, "maxY": 1404.3666666666666, "series": [{"data": [[1.68286464E12, 1108.05], [1.68286482E12, 1214.45], [1.682865E12, 0.5833333333333334], [1.6828647E12, 1404.3666666666666], [1.68286488E12, 125.88333333333334], [1.68286458E12, 1277.1666666666667], [1.68286476E12, 1355.9833333333333], [1.68286494E12, 15.7]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.68286482E12, 1.55], [1.6828647E12, 7.1], [1.68286488E12, 0.11666666666666667], [1.68286458E12, 4.733333333333333], [1.68286476E12, 2.65]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.682865E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

