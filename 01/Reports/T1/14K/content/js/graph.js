/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 4.0, "minX": 0.0, "maxY": 233436.0, "series": [{"data": [[0.0, 4.0], [0.1, 11.0], [0.2, 14.0], [0.3, 16.0], [0.4, 17.0], [0.5, 18.0], [0.6, 20.0], [0.7, 21.0], [0.8, 22.0], [0.9, 23.0], [1.0, 24.0], [1.1, 25.0], [1.2, 26.0], [1.3, 26.0], [1.4, 27.0], [1.5, 28.0], [1.6, 29.0], [1.7, 30.0], [1.8, 31.0], [1.9, 32.0], [2.0, 33.0], [2.1, 34.0], [2.2, 35.0], [2.3, 35.0], [2.4, 36.0], [2.5, 37.0], [2.6, 38.0], [2.7, 39.0], [2.8, 39.0], [2.9, 40.0], [3.0, 41.0], [3.1, 42.0], [3.2, 43.0], [3.3, 43.0], [3.4, 44.0], [3.5, 45.0], [3.6, 46.0], [3.7, 46.0], [3.8, 47.0], [3.9, 47.0], [4.0, 48.0], [4.1, 49.0], [4.2, 49.0], [4.3, 50.0], [4.4, 51.0], [4.5, 51.0], [4.6, 52.0], [4.7, 52.0], [4.8, 53.0], [4.9, 54.0], [5.0, 54.0], [5.1, 55.0], [5.2, 55.0], [5.3, 56.0], [5.4, 57.0], [5.5, 58.0], [5.6, 58.0], [5.7, 59.0], [5.8, 60.0], [5.9, 61.0], [6.0, 61.0], [6.1, 62.0], [6.2, 62.0], [6.3, 63.0], [6.4, 64.0], [6.5, 64.0], [6.6, 65.0], [6.7, 66.0], [6.8, 67.0], [6.9, 68.0], [7.0, 68.0], [7.1, 69.0], [7.2, 70.0], [7.3, 71.0], [7.4, 71.0], [7.5, 72.0], [7.6, 73.0], [7.7, 73.0], [7.8, 74.0], [7.9, 75.0], [8.0, 75.0], [8.1, 76.0], [8.2, 76.0], [8.3, 77.0], [8.4, 78.0], [8.5, 78.0], [8.6, 79.0], [8.7, 79.0], [8.8, 80.0], [8.9, 81.0], [9.0, 81.0], [9.1, 82.0], [9.2, 83.0], [9.3, 83.0], [9.4, 84.0], [9.5, 85.0], [9.6, 86.0], [9.7, 87.0], [9.8, 87.0], [9.9, 88.0], [10.0, 89.0], [10.1, 90.0], [10.2, 91.0], [10.3, 91.0], [10.4, 92.0], [10.5, 93.0], [10.6, 93.0], [10.7, 94.0], [10.8, 95.0], [10.9, 96.0], [11.0, 97.0], [11.1, 98.0], [11.2, 99.0], [11.3, 100.0], [11.4, 102.0], [11.5, 103.0], [11.6, 104.0], [11.7, 105.0], [11.8, 106.0], [11.9, 107.0], [12.0, 108.0], [12.1, 109.0], [12.2, 110.0], [12.3, 112.0], [12.4, 112.0], [12.5, 113.0], [12.6, 114.0], [12.7, 115.0], [12.8, 116.0], [12.9, 117.0], [13.0, 118.0], [13.1, 119.0], [13.2, 120.0], [13.3, 121.0], [13.4, 122.0], [13.5, 124.0], [13.6, 125.0], [13.7, 126.0], [13.8, 128.0], [13.9, 129.0], [14.0, 131.0], [14.1, 133.0], [14.2, 135.0], [14.3, 136.0], [14.4, 139.0], [14.5, 142.0], [14.6, 145.0], [14.7, 147.0], [14.8, 149.0], [14.9, 150.0], [15.0, 151.0], [15.1, 153.0], [15.2, 154.0], [15.3, 156.0], [15.4, 157.0], [15.5, 159.0], [15.6, 160.0], [15.7, 162.0], [15.8, 166.0], [15.9, 168.0], [16.0, 171.0], [16.1, 173.0], [16.2, 174.0], [16.3, 174.0], [16.4, 176.0], [16.5, 177.0], [16.6, 178.0], [16.7, 180.0], [16.8, 182.0], [16.9, 183.0], [17.0, 183.0], [17.1, 184.0], [17.2, 185.0], [17.3, 186.0], [17.4, 187.0], [17.5, 188.0], [17.6, 189.0], [17.7, 190.0], [17.8, 190.0], [17.9, 191.0], [18.0, 192.0], [18.1, 193.0], [18.2, 193.0], [18.3, 194.0], [18.4, 195.0], [18.5, 196.0], [18.6, 197.0], [18.7, 197.0], [18.8, 198.0], [18.9, 198.0], [19.0, 199.0], [19.1, 199.0], [19.2, 199.0], [19.3, 200.0], [19.4, 200.0], [19.5, 201.0], [19.6, 201.0], [19.7, 202.0], [19.8, 202.0], [19.9, 203.0], [20.0, 203.0], [20.1, 203.0], [20.2, 204.0], [20.3, 204.0], [20.4, 205.0], [20.5, 205.0], [20.6, 205.0], [20.7, 206.0], [20.8, 206.0], [20.9, 206.0], [21.0, 207.0], [21.1, 207.0], [21.2, 208.0], [21.3, 208.0], [21.4, 209.0], [21.5, 209.0], [21.6, 210.0], [21.7, 210.0], [21.8, 211.0], [21.9, 211.0], [22.0, 212.0], [22.1, 213.0], [22.2, 213.0], [22.3, 214.0], [22.4, 215.0], [22.5, 216.0], [22.6, 216.0], [22.7, 216.0], [22.8, 217.0], [22.9, 217.0], [23.0, 218.0], [23.1, 218.0], [23.2, 219.0], [23.3, 219.0], [23.4, 220.0], [23.5, 221.0], [23.6, 221.0], [23.7, 222.0], [23.8, 222.0], [23.9, 223.0], [24.0, 223.0], [24.1, 223.0], [24.2, 224.0], [24.3, 224.0], [24.4, 225.0], [24.5, 225.0], [24.6, 226.0], [24.7, 226.0], [24.8, 227.0], [24.9, 228.0], [25.0, 228.0], [25.1, 229.0], [25.2, 229.0], [25.3, 229.0], [25.4, 230.0], [25.5, 230.0], [25.6, 230.0], [25.7, 231.0], [25.8, 231.0], [25.9, 232.0], [26.0, 232.0], [26.1, 233.0], [26.2, 234.0], [26.3, 234.0], [26.4, 235.0], [26.5, 236.0], [26.6, 236.0], [26.7, 237.0], [26.8, 238.0], [26.9, 238.0], [27.0, 239.0], [27.1, 240.0], [27.2, 240.0], [27.3, 241.0], [27.4, 241.0], [27.5, 242.0], [27.6, 243.0], [27.7, 244.0], [27.8, 245.0], [27.9, 246.0], [28.0, 247.0], [28.1, 247.0], [28.2, 248.0], [28.3, 249.0], [28.4, 249.0], [28.5, 250.0], [28.6, 250.0], [28.7, 252.0], [28.8, 254.0], [28.9, 255.0], [29.0, 256.0], [29.1, 257.0], [29.2, 258.0], [29.3, 259.0], [29.4, 260.0], [29.5, 261.0], [29.6, 262.0], [29.7, 263.0], [29.8, 264.0], [29.9, 265.0], [30.0, 267.0], [30.1, 267.0], [30.2, 268.0], [30.3, 270.0], [30.4, 272.0], [30.5, 274.0], [30.6, 274.0], [30.7, 274.0], [30.8, 275.0], [30.9, 275.0], [31.0, 275.0], [31.1, 276.0], [31.2, 276.0], [31.3, 277.0], [31.4, 277.0], [31.5, 278.0], [31.6, 279.0], [31.7, 279.0], [31.8, 280.0], [31.9, 280.0], [32.0, 281.0], [32.1, 281.0], [32.2, 282.0], [32.3, 283.0], [32.4, 283.0], [32.5, 284.0], [32.6, 285.0], [32.7, 285.0], [32.8, 286.0], [32.9, 287.0], [33.0, 287.0], [33.1, 288.0], [33.2, 288.0], [33.3, 289.0], [33.4, 290.0], [33.5, 291.0], [33.6, 292.0], [33.7, 294.0], [33.8, 296.0], [33.9, 298.0], [34.0, 299.0], [34.1, 301.0], [34.2, 301.0], [34.3, 302.0], [34.4, 303.0], [34.5, 305.0], [34.6, 307.0], [34.7, 309.0], [34.8, 311.0], [34.9, 311.0], [35.0, 312.0], [35.1, 313.0], [35.2, 317.0], [35.3, 318.0], [35.4, 319.0], [35.5, 321.0], [35.6, 324.0], [35.7, 326.0], [35.8, 330.0], [35.9, 333.0], [36.0, 334.0], [36.1, 334.0], [36.2, 335.0], [36.3, 336.0], [36.4, 339.0], [36.5, 340.0], [36.6, 341.0], [36.7, 342.0], [36.8, 343.0], [36.9, 347.0], [37.0, 350.0], [37.1, 355.0], [37.2, 357.0], [37.3, 358.0], [37.4, 359.0], [37.5, 360.0], [37.6, 361.0], [37.7, 362.0], [37.8, 363.0], [37.9, 367.0], [38.0, 369.0], [38.1, 370.0], [38.2, 372.0], [38.3, 376.0], [38.4, 378.0], [38.5, 381.0], [38.6, 385.0], [38.7, 389.0], [38.8, 393.0], [38.9, 396.0], [39.0, 398.0], [39.1, 399.0], [39.2, 401.0], [39.3, 402.0], [39.4, 404.0], [39.5, 407.0], [39.6, 412.0], [39.7, 414.0], [39.8, 417.0], [39.9, 424.0], [40.0, 428.0], [40.1, 430.0], [40.2, 435.0], [40.3, 439.0], [40.4, 445.0], [40.5, 452.0], [40.6, 457.0], [40.7, 459.0], [40.8, 461.0], [40.9, 462.0], [41.0, 463.0], [41.1, 464.0], [41.2, 465.0], [41.3, 467.0], [41.4, 469.0], [41.5, 472.0], [41.6, 475.0], [41.7, 478.0], [41.8, 484.0], [41.9, 487.0], [42.0, 490.0], [42.1, 494.0], [42.2, 497.0], [42.3, 499.0], [42.4, 501.0], [42.5, 504.0], [42.6, 506.0], [42.7, 508.0], [42.8, 511.0], [42.9, 514.0], [43.0, 515.0], [43.1, 517.0], [43.2, 518.0], [43.3, 519.0], [43.4, 520.0], [43.5, 521.0], [43.6, 522.0], [43.7, 523.0], [43.8, 524.0], [43.9, 526.0], [44.0, 527.0], [44.1, 528.0], [44.2, 529.0], [44.3, 529.0], [44.4, 530.0], [44.5, 531.0], [44.6, 532.0], [44.7, 533.0], [44.8, 536.0], [44.9, 537.0], [45.0, 538.0], [45.1, 539.0], [45.2, 541.0], [45.3, 543.0], [45.4, 544.0], [45.5, 545.0], [45.6, 547.0], [45.7, 548.0], [45.8, 549.0], [45.9, 550.0], [46.0, 551.0], [46.1, 552.0], [46.2, 553.0], [46.3, 554.0], [46.4, 555.0], [46.5, 556.0], [46.6, 556.0], [46.7, 558.0], [46.8, 559.0], [46.9, 560.0], [47.0, 561.0], [47.1, 561.0], [47.2, 562.0], [47.3, 562.0], [47.4, 563.0], [47.5, 563.0], [47.6, 564.0], [47.7, 564.0], [47.8, 565.0], [47.9, 566.0], [48.0, 566.0], [48.1, 567.0], [48.2, 567.0], [48.3, 568.0], [48.4, 569.0], [48.5, 570.0], [48.6, 571.0], [48.7, 572.0], [48.8, 573.0], [48.9, 573.0], [49.0, 574.0], [49.1, 574.0], [49.2, 575.0], [49.3, 575.0], [49.4, 576.0], [49.5, 576.0], [49.6, 577.0], [49.7, 578.0], [49.8, 579.0], [49.9, 580.0], [50.0, 581.0], [50.1, 581.0], [50.2, 582.0], [50.3, 582.0], [50.4, 583.0], [50.5, 584.0], [50.6, 584.0], [50.7, 585.0], [50.8, 586.0], [50.9, 586.0], [51.0, 587.0], [51.1, 588.0], [51.2, 588.0], [51.3, 589.0], [51.4, 589.0], [51.5, 590.0], [51.6, 590.0], [51.7, 591.0], [51.8, 591.0], [51.9, 592.0], [52.0, 592.0], [52.1, 593.0], [52.2, 593.0], [52.3, 594.0], [52.4, 594.0], [52.5, 595.0], [52.6, 595.0], [52.7, 596.0], [52.8, 597.0], [52.9, 598.0], [53.0, 598.0], [53.1, 599.0], [53.2, 599.0], [53.3, 600.0], [53.4, 601.0], [53.5, 601.0], [53.6, 602.0], [53.7, 603.0], [53.8, 604.0], [53.9, 604.0], [54.0, 605.0], [54.1, 606.0], [54.2, 607.0], [54.3, 607.0], [54.4, 608.0], [54.5, 609.0], [54.6, 610.0], [54.7, 610.0], [54.8, 611.0], [54.9, 612.0], [55.0, 613.0], [55.1, 614.0], [55.2, 615.0], [55.3, 617.0], [55.4, 620.0], [55.5, 621.0], [55.6, 623.0], [55.7, 624.0], [55.8, 624.0], [55.9, 625.0], [56.0, 626.0], [56.1, 626.0], [56.2, 627.0], [56.3, 628.0], [56.4, 628.0], [56.5, 629.0], [56.6, 629.0], [56.7, 630.0], [56.8, 631.0], [56.9, 632.0], [57.0, 633.0], [57.1, 633.0], [57.2, 634.0], [57.3, 635.0], [57.4, 636.0], [57.5, 637.0], [57.6, 637.0], [57.7, 638.0], [57.8, 638.0], [57.9, 639.0], [58.0, 639.0], [58.1, 639.0], [58.2, 640.0], [58.3, 640.0], [58.4, 640.0], [58.5, 640.0], [58.6, 641.0], [58.7, 641.0], [58.8, 642.0], [58.9, 642.0], [59.0, 642.0], [59.1, 643.0], [59.2, 643.0], [59.3, 644.0], [59.4, 644.0], [59.5, 644.0], [59.6, 645.0], [59.7, 645.0], [59.8, 646.0], [59.9, 646.0], [60.0, 646.0], [60.1, 647.0], [60.2, 647.0], [60.3, 647.0], [60.4, 648.0], [60.5, 648.0], [60.6, 649.0], [60.7, 649.0], [60.8, 649.0], [60.9, 650.0], [61.0, 650.0], [61.1, 650.0], [61.2, 651.0], [61.3, 651.0], [61.4, 652.0], [61.5, 652.0], [61.6, 653.0], [61.7, 653.0], [61.8, 653.0], [61.9, 654.0], [62.0, 654.0], [62.1, 655.0], [62.2, 655.0], [62.3, 656.0], [62.4, 656.0], [62.5, 656.0], [62.6, 657.0], [62.7, 658.0], [62.8, 658.0], [62.9, 659.0], [63.0, 660.0], [63.1, 660.0], [63.2, 661.0], [63.3, 661.0], [63.4, 662.0], [63.5, 663.0], [63.6, 663.0], [63.7, 664.0], [63.8, 664.0], [63.9, 665.0], [64.0, 665.0], [64.1, 666.0], [64.2, 666.0], [64.3, 667.0], [64.4, 667.0], [64.5, 668.0], [64.6, 669.0], [64.7, 669.0], [64.8, 669.0], [64.9, 670.0], [65.0, 670.0], [65.1, 671.0], [65.2, 671.0], [65.3, 671.0], [65.4, 671.0], [65.5, 672.0], [65.6, 672.0], [65.7, 672.0], [65.8, 673.0], [65.9, 673.0], [66.0, 673.0], [66.1, 674.0], [66.2, 674.0], [66.3, 674.0], [66.4, 675.0], [66.5, 675.0], [66.6, 675.0], [66.7, 675.0], [66.8, 676.0], [66.9, 676.0], [67.0, 677.0], [67.1, 677.0], [67.2, 677.0], [67.3, 678.0], [67.4, 678.0], [67.5, 679.0], [67.6, 679.0], [67.7, 680.0], [67.8, 680.0], [67.9, 681.0], [68.0, 681.0], [68.1, 682.0], [68.2, 682.0], [68.3, 683.0], [68.4, 683.0], [68.5, 683.0], [68.6, 684.0], [68.7, 684.0], [68.8, 685.0], [68.9, 685.0], [69.0, 685.0], [69.1, 686.0], [69.2, 686.0], [69.3, 687.0], [69.4, 687.0], [69.5, 687.0], [69.6, 688.0], [69.7, 689.0], [69.8, 689.0], [69.9, 690.0], [70.0, 691.0], [70.1, 692.0], [70.2, 693.0], [70.3, 693.0], [70.4, 694.0], [70.5, 694.0], [70.6, 695.0], [70.7, 695.0], [70.8, 695.0], [70.9, 696.0], [71.0, 696.0], [71.1, 696.0], [71.2, 697.0], [71.3, 697.0], [71.4, 697.0], [71.5, 698.0], [71.6, 698.0], [71.7, 698.0], [71.8, 699.0], [71.9, 699.0], [72.0, 699.0], [72.1, 700.0], [72.2, 700.0], [72.3, 701.0], [72.4, 701.0], [72.5, 702.0], [72.6, 702.0], [72.7, 703.0], [72.8, 703.0], [72.9, 704.0], [73.0, 704.0], [73.1, 705.0], [73.2, 705.0], [73.3, 706.0], [73.4, 706.0], [73.5, 707.0], [73.6, 707.0], [73.7, 708.0], [73.8, 708.0], [73.9, 709.0], [74.0, 709.0], [74.1, 710.0], [74.2, 711.0], [74.3, 712.0], [74.4, 713.0], [74.5, 714.0], [74.6, 715.0], [74.7, 715.0], [74.8, 716.0], [74.9, 716.0], [75.0, 717.0], [75.1, 717.0], [75.2, 718.0], [75.3, 719.0], [75.4, 719.0], [75.5, 720.0], [75.6, 721.0], [75.7, 721.0], [75.8, 722.0], [75.9, 723.0], [76.0, 723.0], [76.1, 724.0], [76.2, 725.0], [76.3, 726.0], [76.4, 727.0], [76.5, 728.0], [76.6, 728.0], [76.7, 729.0], [76.8, 730.0], [76.9, 732.0], [77.0, 732.0], [77.1, 733.0], [77.2, 733.0], [77.3, 734.0], [77.4, 734.0], [77.5, 735.0], [77.6, 735.0], [77.7, 736.0], [77.8, 737.0], [77.9, 738.0], [78.0, 739.0], [78.1, 740.0], [78.2, 741.0], [78.3, 742.0], [78.4, 744.0], [78.5, 745.0], [78.6, 745.0], [78.7, 746.0], [78.8, 746.0], [78.9, 747.0], [79.0, 748.0], [79.1, 748.0], [79.2, 749.0], [79.3, 751.0], [79.4, 752.0], [79.5, 752.0], [79.6, 753.0], [79.7, 754.0], [79.8, 755.0], [79.9, 756.0], [80.0, 757.0], [80.1, 758.0], [80.2, 758.0], [80.3, 759.0], [80.4, 760.0], [80.5, 761.0], [80.6, 761.0], [80.7, 762.0], [80.8, 762.0], [80.9, 763.0], [81.0, 764.0], [81.1, 765.0], [81.2, 767.0], [81.3, 769.0], [81.4, 771.0], [81.5, 774.0], [81.6, 777.0], [81.7, 780.0], [81.8, 784.0], [81.9, 787.0], [82.0, 789.0], [82.1, 791.0], [82.2, 792.0], [82.3, 794.0], [82.4, 797.0], [82.5, 798.0], [82.6, 801.0], [82.7, 802.0], [82.8, 804.0], [82.9, 805.0], [83.0, 813.0], [83.1, 821.0], [83.2, 823.0], [83.3, 824.0], [83.4, 827.0], [83.5, 832.0], [83.6, 835.0], [83.7, 837.0], [83.8, 839.0], [83.9, 842.0], [84.0, 844.0], [84.1, 853.0], [84.2, 865.0], [84.3, 866.0], [84.4, 868.0], [84.5, 870.0], [84.6, 872.0], [84.7, 876.0], [84.8, 883.0], [84.9, 891.0], [85.0, 898.0], [85.1, 904.0], [85.2, 907.0], [85.3, 916.0], [85.4, 926.0], [85.5, 933.0], [85.6, 939.0], [85.7, 941.0], [85.8, 948.0], [85.9, 957.0], [86.0, 975.0], [86.1, 985.0], [86.2, 988.0], [86.3, 990.0], [86.4, 992.0], [86.5, 1003.0], [86.6, 1009.0], [86.7, 1013.0], [86.8, 1016.0], [86.9, 1029.0], [87.0, 1041.0], [87.1, 1047.0], [87.2, 1049.0], [87.3, 1050.0], [87.4, 1062.0], [87.5, 1081.0], [87.6, 1099.0], [87.7, 1118.0], [87.8, 1127.0], [87.9, 1132.0], [88.0, 1135.0], [88.1, 1141.0], [88.2, 1144.0], [88.3, 1145.0], [88.4, 1149.0], [88.5, 1150.0], [88.6, 1152.0], [88.7, 1154.0], [88.8, 1157.0], [88.9, 1159.0], [89.0, 1161.0], [89.1, 1162.0], [89.2, 1163.0], [89.3, 1166.0], [89.4, 1167.0], [89.5, 1168.0], [89.6, 1170.0], [89.7, 1170.0], [89.8, 1172.0], [89.9, 1173.0], [90.0, 1175.0], [90.1, 1176.0], [90.2, 1179.0], [90.3, 1180.0], [90.4, 1181.0], [90.5, 1184.0], [90.6, 1187.0], [90.7, 1191.0], [90.8, 1192.0], [90.9, 1193.0], [91.0, 1194.0], [91.1, 1196.0], [91.2, 1197.0], [91.3, 1199.0], [91.4, 1202.0], [91.5, 1205.0], [91.6, 1209.0], [91.7, 1211.0], [91.8, 1213.0], [91.9, 1214.0], [92.0, 1215.0], [92.1, 1217.0], [92.2, 1218.0], [92.3, 1223.0], [92.4, 1228.0], [92.5, 1243.0], [92.6, 1289.0], [92.7, 1307.0], [92.8, 1328.0], [92.9, 1334.0], [93.0, 1339.0], [93.1, 1345.0], [93.2, 1348.0], [93.3, 1351.0], [93.4, 1356.0], [93.5, 1375.0], [93.6, 1402.0], [93.7, 1405.0], [93.8, 1415.0], [93.9, 1477.0], [94.0, 1495.0], [94.1, 1614.0], [94.2, 1866.0], [94.3, 2122.0], [94.4, 2587.0], [94.5, 3166.0], [94.6, 3527.0], [94.7, 3991.0], [94.8, 4443.0], [94.9, 4807.0], [95.0, 4836.0], [95.1, 5358.0], [95.2, 5539.0], [95.3, 5711.0], [95.4, 5758.0], [95.5, 5961.0], [95.6, 6073.0], [95.7, 6181.0], [95.8, 6348.0], [95.9, 6980.0], [96.0, 7060.0], [96.1, 7424.0], [96.2, 7914.0], [96.3, 8048.0], [96.4, 8170.0], [96.5, 8567.0], [96.6, 8917.0], [96.7, 9022.0], [96.8, 9162.0], [96.9, 9219.0], [97.0, 9751.0], [97.1, 9944.0], [97.2, 10186.0], [97.3, 10305.0], [97.4, 10540.0], [97.5, 11086.0], [97.6, 11246.0], [97.7, 11818.0], [97.8, 12417.0], [97.9, 14093.0], [98.0, 15258.0], [98.1, 16276.0], [98.2, 16586.0], [98.3, 17271.0], [98.4, 17470.0], [98.5, 17742.0], [98.6, 19143.0], [98.7, 21545.0], [98.8, 27244.0], [98.9, 32441.0], [99.0, 35781.0], [99.1, 42188.0], [99.2, 49053.0], [99.3, 63944.0], [99.4, 71679.0], [99.5, 86302.0], [99.6, 100458.0], [99.7, 101257.0], [99.8, 128937.0], [99.9, 133178.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 79047.0, "series": [{"data": [[0.0, 47192.0], [135200.0, 3.0], [139300.0, 11.0], [145700.0, 1.0], [66700.0, 7.0], [69900.0, 1.0], [73100.0, 39.0], [85900.0, 1.0], [82700.0, 3.0], [89100.0, 2.0], [92300.0, 2.0], [101900.0, 3.0], [108300.0, 2.0], [114700.0, 1.0], [124300.0, 1.0], [127500.0, 8.0], [130700.0, 6.0], [137000.0, 1.0], [169000.0, 1.0], [100.0, 33456.0], [34500.0, 2.0], [32900.0, 5.0], [134700.0, 11.0], [36100.0, 8.0], [37700.0, 4.0], [40900.0, 1.0], [39300.0, 10.0], [42500.0, 1.0], [44100.0, 5.0], [47300.0, 2.0], [48900.0, 2.0], [50500.0, 40.0], [200.0, 62183.0], [55300.0, 2.0], [60100.0, 2.0], [61700.0, 3.0], [63300.0, 1.0], [64900.0, 2.0], [69000.0, 2.0], [65800.0, 2.0], [72200.0, 2.0], [300.0, 21483.0], [75400.0, 2.0], [81800.0, 2.0], [78600.0, 1.0], [88200.0, 3.0], [91400.0, 2.0], [97800.0, 3.0], [94600.0, 2.0], [101000.0, 35.0], [400.0, 13460.0], [110600.0, 1.0], [120200.0, 1.0], [500.0, 45767.0], [129800.0, 6.0], [138800.0, 7.0], [132400.0, 2.0], [600.0, 79047.0], [700.0, 44113.0], [800.0, 10435.0], [900.0, 5996.0], [1000.0, 4805.0], [1100.0, 15584.0], [1200.0, 5548.0], [1300.0, 3877.0], [1400.0, 2089.0], [1500.0, 177.0], [1600.0, 106.0], [1700.0, 145.0], [1800.0, 199.0], [1900.0, 118.0], [2000.0, 121.0], [2100.0, 262.0], [2300.0, 74.0], [2200.0, 62.0], [2400.0, 104.0], [2500.0, 141.0], [2600.0, 71.0], [2700.0, 75.0], [2800.0, 31.0], [2900.0, 6.0], [3000.0, 82.0], [3100.0, 276.0], [200500.0, 1.0], [3300.0, 36.0], [3200.0, 45.0], [3400.0, 101.0], [3500.0, 102.0], [3600.0, 153.0], [3700.0, 71.0], [3800.0, 36.0], [3900.0, 114.0], [4000.0, 151.0], [4200.0, 72.0], [68100.0, 2.0], [4600.0, 115.0], [4400.0, 177.0], [71300.0, 4.0], [4800.0, 489.0], [74500.0, 2.0], [77700.0, 2.0], [5000.0, 68.0], [80900.0, 1.0], [5200.0, 65.0], [84100.0, 1.0], [5600.0, 167.0], [5400.0, 161.0], [5800.0, 109.0], [90500.0, 1.0], [6000.0, 326.0], [96900.0, 2.0], [6200.0, 280.0], [100100.0, 64.0], [6600.0, 20.0], [6400.0, 52.0], [6800.0, 29.0], [7000.0, 371.0], [112900.0, 1.0], [7400.0, 194.0], [7200.0, 29.0], [7600.0, 53.0], [7800.0, 82.0], [8000.0, 366.0], [128900.0, 45.0], [8400.0, 47.0], [134200.0, 7.0], [8800.0, 236.0], [9200.0, 248.0], [9600.0, 100.0], [10000.0, 281.0], [10400.0, 104.0], [10800.0, 57.0], [11200.0, 388.0], [11600.0, 51.0], [12000.0, 24.0], [12400.0, 75.0], [12800.0, 4.0], [13200.0, 33.0], [13600.0, 6.0], [14000.0, 78.0], [14800.0, 36.0], [14400.0, 5.0], [15200.0, 206.0], [15600.0, 73.0], [16000.0, 11.0], [16800.0, 16.0], [17600.0, 163.0], [18400.0, 1.0], [19200.0, 25.0], [20000.0, 6.0], [21600.0, 6.0], [22400.0, 2.0], [23200.0, 10.0], [24000.0, 2.0], [24800.0, 4.0], [25600.0, 21.0], [26400.0, 23.0], [27200.0, 1.0], [28000.0, 1.0], [28800.0, 11.0], [30400.0, 3.0], [32000.0, 4.0], [138300.0, 4.0], [33600.0, 8.0], [35200.0, 4.0], [36800.0, 30.0], [38400.0, 3.0], [40000.0, 3.0], [41600.0, 1.0], [43200.0, 21.0], [44800.0, 13.0], [46400.0, 2.0], [48000.0, 3.0], [49600.0, 3.0], [51200.0, 13.0], [52800.0, 1.0], [64000.0, 3.0], [70400.0, 2.0], [76800.0, 3.0], [83200.0, 2.0], [86400.0, 1.0], [92800.0, 4.0], [105600.0, 2.0], [128000.0, 4.0], [134400.0, 9.0], [140800.0, 2.0], [132100.0, 30.0], [144900.0, 2.0], [67100.0, 3.0], [70300.0, 1.0], [79900.0, 1.0], [86300.0, 34.0], [92700.0, 1.0], [102300.0, 1.0], [105500.0, 13.0], [118300.0, 1.0], [34700.0, 94.0], [33100.0, 61.0], [37900.0, 5.0], [153100.0, 1.0], [42700.0, 1.0], [44300.0, 16.0], [45900.0, 7.0], [47500.0, 4.0], [50700.0, 1.0], [52300.0, 2.0], [53900.0, 2.0], [55500.0, 2.0], [60300.0, 6.0], [65100.0, 2.0], [63500.0, 4.0], [69400.0, 9.0], [72600.0, 6.0], [75800.0, 3.0], [79000.0, 3.0], [85400.0, 1.0], [82200.0, 2.0], [88600.0, 2.0], [91800.0, 5.0], [101400.0, 5.0], [114200.0, 2.0], [111000.0, 1.0], [123800.0, 1.0], [130200.0, 5.0], [138000.0, 3.0], [131600.0, 10.0], [144400.0, 1.0], [135700.0, 12.0], [142100.0, 2.0], [154900.0, 2.0], [71700.0, 1.0], [81300.0, 1.0], [78100.0, 1.0], [84500.0, 1.0], [94100.0, 1.0], [97300.0, 3.0], [100500.0, 20.0], [116500.0, 1.0], [126100.0, 2.0], [122900.0, 1.0], [129300.0, 7.0], [133400.0, 5.0], [139800.0, 1.0], [16900.0, 94.0], [17700.0, 396.0], [19300.0, 36.0], [18500.0, 1.0], [20100.0, 8.0], [20900.0, 7.0], [21700.0, 32.0], [22500.0, 5.0], [23300.0, 12.0], [24100.0, 2.0], [25700.0, 15.0], [26500.0, 13.0], [27300.0, 1.0], [28900.0, 5.0], [29700.0, 28.0], [30500.0, 2.0], [32100.0, 40.0], [131100.0, 10.0], [137500.0, 2.0], [33800.0, 9.0], [35400.0, 2.0], [37000.0, 8.0], [41800.0, 4.0], [43400.0, 6.0], [45000.0, 4.0], [46600.0, 1.0], [48200.0, 9.0], [53000.0, 6.0], [214300.0, 1.0], [54600.0, 2.0], [57800.0, 5.0], [59400.0, 2.0], [61000.0, 2.0], [62600.0, 1.0], [64200.0, 20.0], [67600.0, 3.0], [70800.0, 1.0], [74000.0, 1.0], [90000.0, 4.0], [102800.0, 1.0], [112400.0, 3.0], [128400.0, 2.0], [140900.0, 9.0], [67500.0, 1.0], [70700.0, 5.0], [73900.0, 1.0], [77100.0, 2.0], [89900.0, 2.0], [93100.0, 1.0], [96300.0, 3.0], [102700.0, 2.0], [128300.0, 12.0], [132200.0, 3.0], [145000.0, 1.0], [33300.0, 1.0], [36500.0, 10.0], [34900.0, 6.0], [38100.0, 3.0], [42900.0, 72.0], [41300.0, 3.0], [44500.0, 6.0], [46100.0, 2.0], [47700.0, 4.0], [50900.0, 9.0], [52500.0, 12.0], [54100.0, 4.0], [55700.0, 4.0], [60500.0, 2.0], [65300.0, 3.0], [66600.0, 1.0], [73000.0, 1.0], [69800.0, 1.0], [76200.0, 2.0], [79400.0, 3.0], [85800.0, 1.0], [108200.0, 13.0], [130600.0, 3.0], [134000.0, 1.0], [140400.0, 1.0], [138100.0, 6.0], [131700.0, 1.0], [65700.0, 2.0], [68900.0, 3.0], [72100.0, 6.0], [75300.0, 6.0], [81700.0, 1.0], [84900.0, 6.0], [88100.0, 1.0], [91300.0, 4.0], [100900.0, 4.0], [107300.0, 1.0], [110500.0, 3.0], [116900.0, 2.0], [123300.0, 1.0], [129700.0, 1.0], [8500.0, 43.0], [135800.0, 1.0], [8900.0, 398.0], [9700.0, 160.0], [9300.0, 73.0], [10100.0, 88.0], [10500.0, 129.0], [10900.0, 45.0], [11700.0, 20.0], [11300.0, 38.0], [12100.0, 57.0], [12500.0, 15.0], [12900.0, 59.0], [13300.0, 2.0], [13700.0, 26.0], [14100.0, 17.0], [14500.0, 8.0], [15300.0, 11.0], [14900.0, 73.0], [15700.0, 97.0], [16100.0, 40.0], [17000.0, 151.0], [17800.0, 54.0], [18600.0, 1.0], [19400.0, 67.0], [20200.0, 5.0], [21000.0, 38.0], [21800.0, 11.0], [23400.0, 2.0], [22600.0, 3.0], [24200.0, 1.0], [25000.0, 1.0], [25800.0, 1.0], [26600.0, 1.0], [27400.0, 28.0], [28200.0, 65.0], [29000.0, 19.0], [30600.0, 2.0], [32200.0, 8.0], [34000.0, 22.0], [139900.0, 6.0], [35600.0, 1.0], [38800.0, 9.0], [37200.0, 4.0], [42000.0, 21.0], [43600.0, 2.0], [46800.0, 1.0], [48400.0, 1.0], [53200.0, 7.0], [58000.0, 3.0], [62800.0, 2.0], [64400.0, 7.0], [68000.0, 3.0], [71200.0, 2.0], [74400.0, 2.0], [87200.0, 3.0], [90400.0, 5.0], [96800.0, 1.0], [100000.0, 1.0], [128800.0, 27.0], [133700.0, 14.0], [140100.0, 5.0], [197700.0, 1.0], [67900.0, 3.0], [71100.0, 1.0], [80700.0, 2.0], [83900.0, 3.0], [87100.0, 2.0], [90300.0, 3.0], [96700.0, 1.0], [99900.0, 3.0], [128700.0, 16.0], [137800.0, 1.0], [33500.0, 3.0], [135500.0, 3.0], [36700.0, 1.0], [35100.0, 12.0], [38300.0, 6.0], [39900.0, 15.0], [41500.0, 1.0], [43100.0, 7.0], [44700.0, 2.0], [46300.0, 7.0], [47900.0, 13.0], [49500.0, 3.0], [51100.0, 6.0], [52700.0, 6.0], [54300.0, 2.0], [55900.0, 2.0], [65500.0, 15.0], [63900.0, 3.0], [67000.0, 108.0], [73400.0, 1.0], [70200.0, 1.0], [76600.0, 2.0], [89400.0, 17.0], [86200.0, 23.0], [95800.0, 3.0], [99000.0, 1.0], [118200.0, 1.0], [131000.0, 7.0], [127800.0, 3.0], [133200.0, 1.0], [139600.0, 3.0], [146000.0, 4.0], [137300.0, 6.0], [143700.0, 2.0], [66100.0, 19.0], [69300.0, 4.0], [72500.0, 3.0], [75700.0, 2.0], [85300.0, 1.0], [82100.0, 2.0], [88500.0, 1.0], [91700.0, 1.0], [101300.0, 46.0], [130100.0, 12.0], [141400.0, 1.0], [17100.0, 45.0], [17900.0, 18.0], [18700.0, 3.0], [19500.0, 4.0], [20300.0, 5.0], [21100.0, 7.0], [21900.0, 5.0], [22700.0, 5.0], [23500.0, 9.0], [25900.0, 2.0], [27500.0, 2.0], [28300.0, 6.0], [29900.0, 3.0], [30700.0, 3.0], [32300.0, 5.0], [34200.0, 12.0], [139100.0, 2.0], [132700.0, 1.0], [145500.0, 1.0], [35800.0, 3.0], [37400.0, 4.0], [39000.0, 2.0], [42200.0, 28.0], [164700.0, 8.0], [43800.0, 4.0], [45400.0, 3.0], [48600.0, 2.0], [51800.0, 1.0], [53400.0, 5.0], [55000.0, 1.0], [56600.0, 1.0], [59800.0, 1.0], [63000.0, 2.0], [64600.0, 1.0], [71600.0, 21.0], [74800.0, 5.0], [78000.0, 1.0], [81200.0, 1.0], [84400.0, 1.0], [90800.0, 4.0], [94000.0, 1.0], [100400.0, 13.0], [103600.0, 2.0], [119600.0, 1.0], [129200.0, 17.0], [132000.0, 3.0], [138400.0, 32.0], [144800.0, 2.0], [68300.0, 2.0], [71500.0, 6.0], [74700.0, 6.0], [77900.0, 4.0], [90700.0, 1.0], [100300.0, 20.0], [129100.0, 2.0], [140200.0, 5.0], [33700.0, 22.0], [144300.0, 1.0], [36900.0, 1.0], [40100.0, 5.0], [41700.0, 1.0], [44900.0, 30.0], [43300.0, 1.0], [46500.0, 15.0], [48100.0, 1.0], [49700.0, 16.0], [51300.0, 6.0], [208300.0, 1.0], [52900.0, 2.0], [54500.0, 12.0], [59300.0, 2.0], [62500.0, 2.0], [64100.0, 1.0], [70600.0, 8.0], [77000.0, 55.0], [80200.0, 2.0], [89800.0, 8.0], [93000.0, 1.0], [99400.0, 1.0], [102600.0, 5.0], [112200.0, 2.0], [128200.0, 47.0], [133300.0, 12.0], [139700.0, 2.0], [4100.0, 31.0], [4300.0, 83.0], [66500.0, 2.0], [4500.0, 51.0], [72900.0, 2.0], [69700.0, 3.0], [4700.0, 139.0], [76100.0, 2.0], [5100.0, 44.0], [4900.0, 130.0], [5300.0, 185.0], [82500.0, 2.0], [5500.0, 346.0], [5700.0, 609.0], [5900.0, 490.0], [6100.0, 255.0], [95300.0, 2.0], [6300.0, 141.0], [6500.0, 8.0], [104900.0, 3.0], [6900.0, 419.0], [6700.0, 28.0], [7100.0, 44.0], [7300.0, 178.0], [117700.0, 1.0], [7500.0, 27.0], [7900.0, 378.0], [7700.0, 22.0], [8100.0, 175.0], [130500.0, 2.0], [8600.0, 70.0], [8200.0, 142.0], [137400.0, 4.0], [9000.0, 252.0], [9400.0, 34.0], [10200.0, 376.0], [9800.0, 182.0], [10600.0, 37.0], [11000.0, 207.0], [11400.0, 3.0], [11800.0, 117.0], [12200.0, 116.0], [12600.0, 4.0], [13000.0, 55.0], [13800.0, 24.0], [13400.0, 4.0], [14200.0, 4.0], [14600.0, 6.0], [233400.0, 1.0], [15000.0, 21.0], [15800.0, 6.0], [15400.0, 15.0], [16200.0, 108.0], [17200.0, 160.0], [16400.0, 72.0], [18000.0, 16.0], [18800.0, 18.0], [19600.0, 25.0], [21200.0, 6.0], [22000.0, 21.0], [22800.0, 1.0], [23600.0, 7.0], [24400.0, 4.0], [25200.0, 21.0], [26800.0, 1.0], [27600.0, 7.0], [28400.0, 1.0], [29200.0, 4.0], [30000.0, 6.0], [31600.0, 36.0], [32400.0, 38.0], [34400.0, 7.0], [135100.0, 3.0], [32800.0, 6.0], [36000.0, 1.0], [37600.0, 3.0], [154300.0, 1.0], [39200.0, 1.0], [40800.0, 2.0], [42400.0, 5.0], [44000.0, 3.0], [45600.0, 2.0], [50400.0, 5.0], [55200.0, 3.0], [53600.0, 5.0], [56800.0, 2.0], [58400.0, 1.0], [60000.0, 2.0], [63200.0, 61.0], [64800.0, 1.0], [68800.0, 2.0], [75200.0, 1.0], [78400.0, 1.0], [84800.0, 1.0], [100800.0, 29.0], [129600.0, 7.0], [131200.0, 3.0], [135300.0, 1.0], [71900.0, 3.0], [75100.0, 1.0], [94300.0, 8.0], [100700.0, 53.0], [129500.0, 5.0], [133000.0, 14.0], [139400.0, 10.0], [145800.0, 5.0], [33900.0, 11.0], [137100.0, 1.0], [35500.0, 10.0], [38700.0, 45.0], [37100.0, 4.0], [43500.0, 4.0], [48300.0, 3.0], [49900.0, 5.0], [53100.0, 8.0], [54700.0, 1.0], [57900.0, 2.0], [59500.0, 3.0], [64300.0, 1.0], [67800.0, 7.0], [71000.0, 1.0], [80600.0, 1.0], [83800.0, 8.0], [87000.0, 1.0], [93400.0, 2.0], [96600.0, 1.0], [99800.0, 2.0], [125400.0, 1.0], [128600.0, 1.0], [134800.0, 4.0], [154000.0, 1.0], [138900.0, 1.0], [145300.0, 2.0], [66900.0, 6.0], [73300.0, 1.0], [70100.0, 3.0], [82900.0, 2.0], [86100.0, 1.0], [89300.0, 3.0], [92500.0, 1.0], [98900.0, 1.0], [108500.0, 3.0], [130900.0, 19.0], [127700.0, 2.0], [149400.0, 1.0], [16500.0, 163.0], [17300.0, 213.0], [18100.0, 9.0], [18900.0, 13.0], [19700.0, 30.0], [21300.0, 33.0], [20500.0, 11.0], [22100.0, 14.0], [22900.0, 31.0], [23700.0, 3.0], [25300.0, 2.0], [27700.0, 22.0], [28500.0, 15.0], [29300.0, 3.0], [30100.0, 3.0], [31700.0, 40.0], [32500.0, 50.0], [34600.0, 6.0], [134300.0, 1.0], [33000.0, 3.0], [36200.0, 2.0], [37800.0, 2.0], [41000.0, 3.0], [42600.0, 10.0], [44200.0, 10.0], [45800.0, 2.0], [47400.0, 2.0], [49000.0, 4.0], [50600.0, 2.0], [52200.0, 1.0], [55400.0, 1.0], [57000.0, 2.0], [63400.0, 9.0], [65000.0, 4.0], [66000.0, 8.0], [69200.0, 1.0], [72400.0, 34.0], [75600.0, 2.0], [85200.0, 3.0], [94800.0, 1.0], [101200.0, 174.0], [104400.0, 2.0], [123600.0, 5.0], [130000.0, 24.0], [133600.0, 41.0], [146400.0, 1.0], [131300.0, 1.0], [65900.0, 1.0], [69100.0, 3.0], [75500.0, 4.0], [81900.0, 1.0], [88300.0, 1.0], [94700.0, 1.0], [101100.0, 99.0], [110700.0, 1.0], [129900.0, 16.0], [135400.0, 5.0], [133100.0, 15.0], [34100.0, 1.0], [139500.0, 6.0], [35700.0, 3.0], [38900.0, 6.0], [42100.0, 27.0], [165100.0, 1.0], [45300.0, 3.0], [46900.0, 5.0], [48500.0, 4.0], [53300.0, 3.0], [54900.0, 2.0], [56500.0, 1.0], [61300.0, 2.0], [64500.0, 2.0], [68200.0, 1.0], [74600.0, 5.0], [77800.0, 1.0], [81000.0, 2.0], [84200.0, 2.0], [87400.0, 2.0], [90600.0, 3.0], [93800.0, 1.0], [100200.0, 152.0], [106600.0, 2.0], [129000.0, 63.0], [137200.0, 5.0], [156400.0, 1.0], [141300.0, 1.0], [67300.0, 6.0], [70500.0, 4.0], [76900.0, 10.0], [80100.0, 2.0], [89700.0, 1.0], [92900.0, 1.0], [99300.0, 2.0], [128100.0, 34.0], [8700.0, 54.0], [8300.0, 190.0], [139000.0, 15.0], [9100.0, 530.0], [145400.0, 14.0], [9500.0, 20.0], [9900.0, 199.0], [10300.0, 288.0], [10700.0, 27.0], [11100.0, 274.0], [11500.0, 31.0], [11900.0, 19.0], [12700.0, 9.0], [12300.0, 89.0], [13100.0, 20.0], [13500.0, 12.0], [14300.0, 10.0], [13900.0, 47.0], [14700.0, 1.0], [15100.0, 5.0], [15500.0, 36.0], [16300.0, 197.0], [15900.0, 20.0], [16600.0, 32.0], [17400.0, 137.0], [18200.0, 4.0], [19000.0, 2.0], [19800.0, 40.0], [21400.0, 5.0], [20600.0, 5.0], [22200.0, 16.0], [23000.0, 22.0], [23800.0, 29.0], [25400.0, 2.0], [24600.0, 5.0], [26200.0, 1.0], [27800.0, 4.0], [29400.0, 4.0], [31000.0, 2.0], [32600.0, 1.0], [31800.0, 1.0], [34800.0, 4.0], [33200.0, 5.0], [36400.0, 1.0], [143100.0, 2.0], [39600.0, 1.0], [155900.0, 1.0], [42800.0, 6.0], [41200.0, 9.0], [44400.0, 9.0], [46000.0, 4.0], [47600.0, 5.0], [50800.0, 5.0], [52400.0, 6.0], [54000.0, 2.0], [55600.0, 1.0], [58800.0, 2.0], [60400.0, 2.0], [62000.0, 2.0], [63600.0, 2.0], [65200.0, 9.0], [66400.0, 3.0], [69600.0, 7.0], [72800.0, 6.0], [76000.0, 8.0], [79200.0, 4.0], [82400.0, 2.0], [92000.0, 3.0], [95200.0, 2.0], [101600.0, 3.0], [98400.0, 2.0], [104800.0, 1.0], [130400.0, 14.0], [164800.0, 1.0], [156100.0, 1.0], [66300.0, 1.0], [69500.0, 3.0], [72700.0, 32.0], [75900.0, 1.0], [91900.0, 7.0], [98300.0, 2.0], [104700.0, 2.0], [130300.0, 4.0], [134600.0, 15.0], [141000.0, 16.0], [34300.0, 19.0], [138700.0, 7.0], [145100.0, 4.0], [37500.0, 4.0], [39100.0, 2.0], [42300.0, 1.0], [43900.0, 2.0], [45500.0, 3.0], [47100.0, 1.0], [50300.0, 2.0], [51900.0, 2.0], [56700.0, 3.0], [59900.0, 1.0], [61500.0, 1.0], [63100.0, 2.0], [64700.0, 6.0], [68600.0, 1.0], [81400.0, 1.0], [78200.0, 2.0], [94200.0, 1.0], [100600.0, 26.0], [103800.0, 18.0], [129400.0, 6.0], [136400.0, 1.0], [134100.0, 1.0], [140500.0, 3.0], [67700.0, 2.0], [70900.0, 50.0], [77300.0, 1.0], [74100.0, 2.0], [83700.0, 6.0], [90100.0, 1.0], [93300.0, 2.0], [99700.0, 1.0], [102900.0, 3.0], [112500.0, 9.0], [115700.0, 4.0], [125300.0, 1.0], [128500.0, 3.0], [138200.0, 5.0], [131800.0, 76.0], [163800.0, 3.0], [16700.0, 9.0], [17500.0, 96.0], [18300.0, 4.0], [19100.0, 15.0], [19900.0, 11.0], [21500.0, 47.0], [20700.0, 4.0], [22300.0, 9.0], [23100.0, 2.0], [26300.0, 19.0], [27100.0, 6.0], [27900.0, 6.0], [29500.0, 3.0], [28700.0, 2.0], [32700.0, 7.0], [31900.0, 9.0], [35000.0, 2.0], [36600.0, 5.0], [38200.0, 4.0], [39800.0, 83.0], [43000.0, 9.0], [41400.0, 49.0], [44600.0, 2.0], [46200.0, 21.0], [47800.0, 2.0], [51000.0, 38.0], [52600.0, 2.0], [55800.0, 3.0], [59000.0, 2.0], [62200.0, 2.0], [63800.0, 2.0], [65400.0, 1.0], [66800.0, 1.0], [70000.0, 2.0], [73200.0, 3.0], [79600.0, 6.0], [98800.0, 1.0], [102000.0, 2.0], [108400.0, 2.0], [127600.0, 14.0], [130800.0, 29.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 233400.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 654.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 217101.0, "series": [{"data": [[0.0, 177937.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 217101.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 24308.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 654.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 73.02097902097904, "minX": 1.682865E12, "maxY": 3000.0, "series": [{"data": [[1.68286512E12, 3000.0], [1.6828653E12, 2926.1038286347452], [1.682865E12, 3000.0], [1.68286518E12, 3000.0], [1.68286536E12, 257.732456140351], [1.68286506E12, 3000.0], [1.68286524E12, 3000.0], [1.68286542E12, 73.02097902097904]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68286542E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 256.0, "minX": 1.0, "maxY": 111054.0, "series": [{"data": [[2.0, 100327.0], [3.0, 100322.0], [5.0, 100320.0], [6.0, 100315.0], [8.0, 100306.0], [9.0, 100304.0], [10.0, 100303.0], [11.0, 100299.0], [13.0, 100298.0], [14.0, 100297.0], [16.0, 100289.0], [20.0, 100287.33333333333], [21.0, 100287.5], [24.0, 100290.0], [27.0, 100286.0], [28.0, 100285.66666666667], [29.0, 100301.0], [30.0, 100284.0], [33.0, 100282.5], [36.0, 100282.5], [41.0, 100282.0], [40.0, 100281.66666666667], [43.0, 100282.0], [42.0, 100281.5], [45.0, 100280.0], [48.0, 100280.66666666667], [53.0, 100279.5], [52.0, 100279.0], [55.0, 100278.0], [54.0, 100278.0], [59.0, 100285.5], [58.0, 100285.5], [61.0, 100277.0], [63.0, 100270.0], [67.0, 100265.0], [66.0, 100267.0], [65.0, 100268.5], [70.0, 100264.0], [75.0, 100275.0], [74.0, 100262.66666666667], [73.0, 100263.33333333333], [79.0, 100267.0], [78.0, 100271.0], [77.0, 100273.0], [82.0, 100258.0], [85.0, 100242.0], [84.0, 100257.0], [95.0, 100231.0], [94.0, 100238.0], [93.0, 100241.66666666667], [92.0, 100241.8], [98.0, 100152.0], [97.0, 100167.0], [96.0, 100193.0], [107.0, 100130.42857142857], [111.0, 100126.0], [110.0, 100128.0], [109.0, 100126.0], [108.0, 100131.0], [114.0, 100122.0], [113.0, 100123.5], [119.0, 99397.0], [118.0, 99399.0], [117.0, 100115.0], [116.0, 100117.5], [123.0, 97379.0], [122.0, 97380.0], [121.0, 98386.0], [120.0, 98389.0], [127.0, 95358.0], [126.0, 95360.0], [125.0, 96370.0], [124.0, 96371.0], [135.0, 91322.0], [134.0, 91323.0], [133.0, 92333.0], [132.0, 92335.0], [131.0, 93340.0], [130.0, 93342.0], [129.0, 94350.0], [128.0, 94352.0], [143.0, 87284.0], [142.0, 87287.0], [141.0, 88293.0], [140.0, 88296.0], [139.0, 89304.0], [138.0, 89306.0], [137.0, 90313.0], [136.0, 90314.0], [151.0, 83247.0], [150.0, 83249.0], [149.0, 84257.0], [148.0, 84258.0], [147.0, 85265.0], [146.0, 85268.0], [145.0, 86275.0], [144.0, 86277.0], [159.0, 79210.0], [158.0, 79211.0], [157.0, 80219.0], [156.0, 80220.0], [155.0, 81228.0], [154.0, 111054.0], [153.0, 82237.0], [152.0, 82240.0], [167.0, 104996.0], [166.0, 104997.0], [165.0, 76182.0], [164.0, 76183.0], [163.0, 77192.0], [162.0, 77194.0], [161.0, 78202.0], [160.0, 78203.0], [175.0, 100958.0], [174.0, 71135.0], [173.0, 72143.0], [172.0, 72146.0], [171.0, 73154.0], [170.0, 73157.0], [169.0, 74162.0], [168.0, 74143.0], [183.0, 67097.0], [182.0, 67100.0], [181.0, 68107.0], [180.0, 68108.0], [179.0, 69116.0], [178.0, 98940.0], [177.0, 99950.0], [176.0, 99952.0], [191.0, 63060.0], [190.0, 63061.0], [189.0, 64069.0], [188.0, 64071.0], [187.0, 65078.0], [186.0, 65080.0], [185.0, 66087.0], [184.0, 66090.0], [199.0, 59023.0], [198.0, 59024.0], [197.0, 60032.0], [196.0, 60034.0], [195.0, 61041.0], [194.0, 61043.0], [193.0, 62050.0], [192.0, 62052.0], [207.0, 54986.0], [206.0, 54987.0], [205.0, 55995.0], [204.0, 55997.0], [203.0, 57003.0], [202.0, 57006.0], [201.0, 58013.0], [200.0, 58015.0], [215.0, 50948.0], [214.0, 50950.0], [213.0, 51957.0], [212.0, 51959.0], [211.0, 52967.0], [210.0, 52971.0], [209.0, 53977.0], [208.0, 53977.0], [223.0, 46910.0], [222.0, 46913.0], [221.0, 47920.0], [220.0, 47922.0], [219.0, 48929.0], [218.0, 48931.0], [217.0, 49939.0], [216.0, 49940.0], [231.0, 42873.0], [230.0, 42875.0], [229.0, 43883.0], [228.0, 43885.0], [227.0, 44892.0], [226.0, 44893.0], [225.0, 45901.0], [224.0, 45903.0], [239.0, 38836.0], [238.0, 38838.0], [237.0, 39846.0], [236.0, 39848.0], [235.0, 40855.0], [234.0, 40857.0], [233.0, 41864.0], [232.0, 41866.0], [247.0, 34799.0], [246.0, 34801.0], [245.0, 35808.0], [244.0, 35810.0], [243.0, 36818.0], [242.0, 36820.0], [241.0, 37827.0], [240.0, 37829.0], [255.0, 30761.0], [254.0, 30763.0], [253.0, 31771.0], [252.0, 31772.0], [251.0, 32780.0], [250.0, 32782.0], [249.0, 33789.0], [248.0, 33791.0], [271.0, 33151.0], [269.0, 33150.333333333336], [267.0, 33151.0], [266.0, 33153.0], [265.0, 33151.0], [264.0, 33152.0], [261.0, 33154.0], [260.0, 33154.0], [259.0, 28743.0], [258.0, 28744.0], [257.0, 29752.0], [256.0, 29754.0], [286.0, 33139.0], [287.0, 33136.0], [285.0, 33139.0], [275.0, 33146.0], [273.0, 33146.0], [272.0, 33148.0], [283.0, 33142.0], [282.0, 33143.5], [281.0, 33144.0], [280.0, 33144.0], [279.0, 33144.0], [277.0, 33146.0], [276.0, 33147.0], [302.0, 33116.5], [303.0, 33110.0], [300.0, 33121.0], [291.0, 33130.0], [290.0, 33131.0], [289.0, 33132.0], [288.0, 33133.0], [299.0, 33251.0], [298.0, 33124.0], [297.0, 33124.0], [296.0, 33124.5], [294.0, 33126.0], [293.0, 33126.0], [292.0, 33129.0], [318.0, 32431.0], [319.0, 32424.0], [317.0, 32432.0], [316.0, 32434.0], [315.0, 32433.0], [314.0, 32435.5], [312.0, 32437.0], [310.0, 27717.0], [304.0, 33102.0], [307.0, 33085.0], [305.0, 33097.0], [309.0, 27719.0], [308.0, 33214.0], [323.0, 36860.0], [333.0, 36859.0], [335.0, 34609.0], [332.0, 37666.0], [330.0, 34610.5], [328.0, 36858.0], [327.0, 36860.0], [325.0, 36434.666666666664], [322.0, 36862.0], [320.0, 32422.0], [339.0, 35578.0], [350.0, 35567.0], [349.0, 36844.5], [347.0, 35569.0], [346.0, 36849.0], [345.0, 36211.0], [343.0, 36850.0], [342.0, 36851.0], [341.0, 36852.0], [338.0, 36853.0], [337.0, 36854.0], [336.0, 36857.0], [367.0, 42150.0], [366.0, 38843.0], [363.0, 35550.0], [362.0, 37479.0], [360.0, 35553.0], [358.0, 35675.5], [356.0, 34591.0], [354.0, 36843.0], [352.0, 36843.0], [371.0, 35574.5], [382.0, 34791.0], [381.0, 34794.5], [379.0, 34791.0], [377.0, 34793.0], [375.0, 34795.0], [373.0, 25947.0], [372.0, 25948.0], [369.0, 45084.0], [368.0, 36295.5], [397.0, 34784.0], [398.0, 34785.0], [396.0, 34787.0], [387.0, 34790.0], [384.0, 34791.666666666664], [395.0, 34788.0], [394.0, 34788.0], [393.0, 34788.0], [392.0, 34790.0], [391.0, 34788.0], [390.0, 34790.5], [388.0, 34790.0], [414.0, 34776.0], [415.0, 34773.0], [412.0, 34777.5], [403.0, 34783.0], [402.0, 34783.0], [401.0, 34783.0], [400.0, 34784.5], [410.0, 34777.0], [409.0, 34780.0], [408.0, 34778.0], [407.0, 34778.0], [406.0, 34781.0], [405.0, 34781.0], [404.0, 34783.0], [419.0, 34771.5], [431.0, 34766.0], [429.0, 34766.0], [427.0, 34769.5], [425.0, 34767.0], [423.0, 34769.0], [422.0, 34771.0], [421.0, 34771.0], [420.0, 34769.0], [417.0, 34772.0], [416.0, 34771.0], [444.0, 34750.0], [446.0, 34737.0], [447.0, 34736.0], [445.0, 34739.0], [443.0, 34752.5], [441.0, 34753.333333333336], [438.0, 34755.0], [433.0, 34763.0], [432.0, 34764.0], [437.0, 34757.0], [436.0, 34757.333333333336], [462.0, 34716.0], [461.0, 34723.5], [459.0, 34725.0], [458.0, 34733.0], [457.0, 34732.0], [456.0, 34734.0], [454.0, 34733.333333333336], [451.0, 34735.0], [449.0, 34735.0], [448.0, 34734.0], [478.0, 33710.0], [479.0, 33712.0], [477.0, 33712.5], [475.0, 33711.5], [473.0, 33713.5], [472.0, 33712.0], [470.0, 33714.5], [468.0, 25724.0], [467.0, 25725.0], [466.0, 34695.5], [465.0, 34699.0], [464.0, 34696.0], [492.0, 33693.0], [494.0, 33690.0], [495.0, 24092.0], [493.0, 33693.0], [491.0, 33693.333333333336], [488.0, 33697.0], [487.0, 33698.0], [481.0, 33712.0], [480.0, 33710.0], [483.0, 33704.0], [482.0, 33708.0], [486.0, 33700.0], [485.0, 33704.0], [484.0, 33707.0], [510.0, 17264.0], [511.0, 16257.0], [509.0, 17266.0], [508.0, 18273.0], [507.0, 18275.0], [506.0, 19283.0], [505.0, 19284.0], [504.0, 20291.0], [503.0, 20293.0], [497.0, 23319.0], [496.0, 24091.0], [499.0, 22311.0], [498.0, 23317.0], [502.0, 21299.0], [501.0, 21301.0], [500.0, 22308.0], [537.0, 19700.333333333332], [541.0, 19698.0], [543.0, 19696.5], [530.0, 19752.5], [528.0, 19757.0], [540.0, 19697.0], [539.0, 19698.0], [538.0, 19699.0], [527.0, 19757.0], [513.0, 15248.0], [512.0, 16255.0], [516.0, 19763.0], [514.0, 15248.0], [519.0, 19764.0], [518.0, 19763.0], [526.0, 19757.0], [525.0, 19758.0], [523.0, 19761.0], [522.0, 19761.0], [521.0, 19762.0], [520.0, 19762.5], [534.0, 19700.0], [533.0, 19701.0], [532.0, 19736.0], [531.0, 19739.0], [568.0, 19462.666666666668], [561.0, 14169.0], [574.0, 19463.0], [573.0, 18850.0], [570.0, 19461.0], [559.0, 19668.0], [544.0, 19697.0], [549.0, 19694.5], [547.0, 19695.333333333332], [551.0, 19692.0], [550.0, 19693.0], [558.0, 19675.0], [557.0, 19678.0], [556.0, 19690.0], [555.0, 19691.5], [553.0, 19691.0], [552.0, 19691.0], [567.0, 19463.0], [564.0, 19175.0], [563.0, 19181.5], [560.0, 14169.0], [604.0, 22301.0], [607.0, 19448.0], [593.0, 19457.0], [592.0, 19456.0], [596.0, 19456.0], [594.0, 19459.0], [606.0, 19453.0], [605.0, 19451.0], [603.0, 19454.0], [602.0, 19455.0], [601.0, 19455.0], [600.0, 19456.0], [591.0, 19459.0], [576.0, 19460.5], [579.0, 19460.333333333332], [578.0, 19460.0], [583.0, 19462.0], [582.0, 19460.666666666668], [590.0, 19461.0], [589.0, 19459.0], [587.0, 19459.0], [586.0, 19462.0], [599.0, 19456.0], [598.0, 19455.333333333332], [636.0, 19402.0], [627.0, 22265.0], [638.0, 19401.5], [624.0, 19420.0], [626.0, 19420.0], [625.0, 19416.0], [634.0, 19402.0], [633.0, 38250.0], [632.0, 20831.5], [615.0, 19441.0], [614.0, 19441.0], [613.0, 19442.0], [612.0, 46583.0], [611.0, 19448.0], [610.0, 19446.0], [609.0, 20873.0], [623.0, 19424.0], [622.0, 19430.0], [621.0, 19428.5], [619.0, 19432.0], [618.0, 19433.0], [617.0, 22284.0], [616.0, 19438.0], [630.0, 19407.0], [629.0, 19409.0], [628.0, 22263.0], [665.0, 13168.0], [659.0, 13184.0], [668.0, 21186.0], [669.0, 16709.5], [658.0, 13184.0], [657.0, 37971.666666666664], [666.0, 12235.0], [664.0, 13168.0], [647.0, 46533.0], [646.0, 20819.5], [645.0, 22245.0], [644.0, 34390.0], [641.0, 37491.333333333336], [654.0, 22217.0], [653.0, 46509.0], [652.0, 46520.0], [651.0, 22242.5], [649.0, 22243.5], [663.0, 19288.0], [662.0, 19287.0], [660.0, 13183.0], [697.0, 12213.0], [691.0, 12224.5], [702.0, 12212.333333333334], [699.0, 12214.0], [698.0, 12213.0], [686.0, 12227.0], [673.0, 12232.0], [672.0, 18201.0], [676.0, 12231.0], [674.0, 21184.0], [678.0, 12230.0], [677.0, 37192.0], [685.0, 21182.0], [684.0, 12228.0], [683.0, 12228.0], [681.0, 12229.0], [680.0, 12229.5], [695.0, 12214.0], [694.0, 12215.0], [692.0, 12216.0], [689.0, 12225.0], [688.0, 16701.5], [729.0, 17403.0], [723.0, 17123.25], [735.0, 11295.333333333334], [732.0, 11296.0], [731.0, 19525.5], [719.0, 11300.0], [704.0, 12211.0], [706.0, 12209.0], [705.0, 12211.0], [709.0, 12179.0], [708.0, 12207.5], [711.0, 12163.0], [710.0, 12165.0], [717.0, 20944.5], [715.0, 13335.666666666666], [713.0, 11301.0], [727.0, 11299.0], [726.0, 11299.0], [725.0, 12714.0], [720.0, 11301.0], [762.0, 14022.0], [766.0, 27729.0], [767.0, 11272.0], [752.0, 14116.0], [765.0, 11275.0], [764.0, 14105.0], [763.0, 11277.0], [760.0, 14332.0], [743.0, 11290.0], [742.0, 11291.0], [741.0, 27748.0], [740.0, 11293.0], [739.0, 11292.0], [738.0, 17399.0], [737.0, 17397.0], [736.0, 17401.0], [751.0, 11285.0], [750.0, 16772.0], [747.0, 27742.0], [746.0, 12703.0], [744.0, 12023.0], [758.0, 14332.5], [754.0, 30955.5], [792.0, 17344.0], [797.0, 14066.0], [798.0, 27687.0], [786.0, 14300.0], [785.0, 14076.0], [796.0, 22513.5], [794.0, 27694.0], [793.0, 14067.0], [783.0, 14079.0], [768.0, 17379.0], [771.0, 11268.0], [770.0, 17374.5], [775.0, 20823.333333333332], [774.0, 14100.0], [782.0, 11248.0], [781.0, 27706.0], [780.0, 11259.0], [779.0, 23178.0], [776.0, 11994.0], [791.0, 13023.0], [789.0, 27697.0], [788.0, 11976.0], [787.0, 17350.0], [830.0, 20147.0], [831.0, 17300.0], [828.0, 17308.0], [827.0, 17307.0], [826.0, 15672.0], [824.0, 17309.0], [815.0, 15600.0], [801.0, 22511.0], [800.0, 17336.0], [805.0, 17332.0], [803.0, 22136.5], [814.0, 17326.0], [813.0, 17326.0], [812.0, 17328.0], [811.0, 11224.0], [810.0, 15692.0], [809.0, 17328.333333333332], [822.0, 17312.0], [821.0, 15677.0], [819.0, 14861.5], [856.0, 14748.5], [862.0, 11688.0], [863.0, 17807.0], [848.0, 11691.0], [861.0, 11687.0], [860.0, 16858.666666666668], [857.0, 14960.0], [846.0, 13327.5], [833.0, 14019.0], [832.0, 17298.0], [835.0, 17293.0], [834.0, 17292.0], [837.0, 11165.0], [836.0, 11168.0], [839.0, 10728.0], [838.0, 10730.0], [845.0, 14751.5], [842.0, 14963.0], [841.0, 9052.0], [840.0, 9054.0], [855.0, 14961.0], [854.0, 13326.0], [851.0, 14962.0], [849.0, 11691.0], [889.0, 14939.0], [883.0, 14948.0], [893.0, 14937.5], [894.0, 17785.0], [881.0, 13312.5], [891.0, 16362.0], [888.0, 14942.0], [871.0, 14956.0], [868.0, 11685.0], [867.0, 14956.5], [865.0, 14746.0], [879.0, 14949.0], [878.0, 11678.0], [877.0, 14950.0], [876.0, 11681.0], [875.0, 14953.0], [874.0, 14954.0], [873.0, 11684.0], [872.0, 12774.333333333334], [887.0, 14944.0], [885.0, 14943.0], [884.0, 11673.0], [916.0, 13685.666666666666], [925.0, 14706.0], [922.0, 11641.0], [921.0, 13276.5], [902.0, 14932.0], [901.0, 13297.0], [900.0, 14933.0], [899.0, 14933.0], [898.0, 17782.0], [896.0, 14936.0], [910.0, 18805.0], [909.0, 14922.0], [908.0, 13295.0], [907.0, 14930.0], [906.0, 11659.0], [904.0, 14931.0], [919.0, 11643.0], [918.0, 14914.0], [917.0, 14914.0], [913.0, 14918.0], [912.0, 13286.5], [955.0, 11617.5], [946.0, 14892.0], [957.0, 11613.0], [958.0, 13159.0], [945.0, 17741.0], [944.0, 14894.0], [956.0, 11613.0], [953.0, 14582.0], [935.0, 15209.0], [933.0, 11632.0], [932.0, 14906.0], [930.0, 13271.0], [928.0, 14907.666666666666], [943.0, 14896.0], [942.0, 14897.0], [941.0, 17743.0], [940.0, 11625.0], [939.0, 14897.0], [938.0, 14902.0], [937.0, 11631.0], [936.0, 11631.0], [951.0, 13255.5], [950.0, 11619.0], [949.0, 14680.0], [988.0, 11581.0], [980.0, 14860.0], [989.0, 14852.0], [977.0, 13140.0], [979.0, 11590.0], [978.0, 13227.0], [987.0, 11582.0], [986.0, 14855.5], [985.0, 11585.0], [967.0, 14876.0], [966.0, 14875.0], [965.0, 17723.0], [964.0, 17725.0], [963.0, 14880.0], [962.0, 11609.0], [961.0, 14882.0], [960.0, 14020.5], [975.0, 17711.0], [974.0, 14867.0], [973.0, 13232.0], [971.0, 17716.0], [970.0, 14869.0], [969.0, 11601.0], [968.0, 14874.0], [983.0, 11585.0], [982.0, 11586.0], [981.0, 14858.0], [1022.0, 14837.0], [1023.0, 11547.0], [1021.0, 12346.0], [1019.0, 13179.0], [1016.0, 17692.0], [995.0, 15299.5], [993.0, 11580.0], [992.0, 11580.0], [1013.0, 13596.75], [1009.0, 14635.0], [1008.0, 14848.0], [1006.0, 14847.0], [1005.0, 14132.666666666666], [1002.0, 14850.0], [1001.0, 14674.5], [1060.0, 12362.0], [1062.0, 12362.0], [1086.0, 12346.0], [1064.0, 7792.0], [1068.0, 12358.0], [1070.0, 12358.0], [1084.0, 12346.0], [1082.0, 12349.0], [1080.0, 12350.0], [1078.0, 7786.5], [1074.0, 12356.0], [1024.0, 11538.0], [1026.0, 11530.0], [1028.0, 8662.0], [1036.0, 13268.0], [1038.0, 7014.0], [1050.0, 12363.0], [1044.0, 4166.0], [1042.0, 5173.0], [1040.0, 6116.0], [1120.0, 12323.0], [1148.0, 12293.0], [1122.0, 8726.0], [1124.0, 12322.0], [1126.0, 12318.0], [1130.0, 12319.0], [1150.0, 8695.0], [1142.0, 12297.0], [1140.0, 12314.0], [1118.0, 11125.666666666666], [1088.0, 8746.0], [1090.0, 12342.0], [1098.0, 10542.5], [1094.0, 12342.0], [1102.0, 8743.0], [1108.0, 12327.666666666666], [1106.0, 12328.0], [1212.0, 8666.0], [1184.0, 12269.0], [1188.0, 12269.0], [1190.0, 8671.0], [1192.0, 12267.0], [1206.0, 10466.0], [1200.0, 8667.0], [1154.0, 8692.0], [1152.0, 12291.0], [1158.0, 8689.5], [1156.0, 12286.5], [1160.0, 8688.0], [1162.0, 12286.0], [1166.0, 11083.666666666666], [1180.0, 12271.0], [1178.0, 12272.0], [1176.0, 12273.0], [1172.0, 8678.0], [1170.0, 8679.0], [1274.0, 8617.0], [1248.0, 12240.0], [1252.0, 8640.0], [1250.0, 12237.0], [1254.0, 12235.0], [1258.0, 12232.0], [1256.0, 12234.0], [1260.0, 8635.0], [1278.0, 8596.0], [1272.0, 12214.0], [1270.0, 12222.0], [1268.0, 9376.0], [1266.0, 12225.5], [1264.0, 12232.0], [1218.0, 8664.0], [1216.0, 12262.5], [1224.0, 12258.0], [1226.0, 7687.0], [1228.0, 12254.0], [1230.0, 8655.0], [1246.0, 12241.333333333334], [1242.0, 8647.0], [1240.0, 12242.0], [1238.0, 12250.0], [1334.0, 2032.0], [1318.0, 12161.0], [1312.0, 10264.666666666666], [1316.0, 10262.666666666666], [1320.0, 9309.0], [1324.0, 10705.5], [1322.0, 9285.0], [1326.0, 12128.0], [1336.0, 981.0], [1330.0, 12128.0], [1328.0, 12129.0], [1294.0, 8590.0], [1288.0, 8594.0], [1286.0, 8594.0], [1284.0, 8595.5], [1308.0, 12163.0], [1304.0, 9317.0], [1302.0, 9322.0], [1300.0, 9323.0], [1298.0, 9326.0], [1296.0, 8590.0], [2044.0, 624.0], [2016.0, 623.0], [2018.0, 623.375], [2020.0, 623.0], [2022.0, 623.1538461538462], [2024.0, 622.5], [2026.0, 622.3333333333334], [2028.0, 621.9444444444446], [2030.0, 623.5714285714287], [2046.0, 623.1666666666667], [2042.0, 622.7692307692307], [2040.0, 622.3333333333334], [2038.0, 622.3749999999998], [2036.0, 623.0], [2034.0, 623.0909090909089], [2032.0, 622.9444444444443], [2014.0, 623.0], [2012.0, 622.9999999999999], [2010.0, 622.0], [2008.0, 623.5000000000001], [2006.0, 623.3000000000001], [2004.0, 622.6666666666666], [2000.0, 622.0], [2060.0, 623.0], [2052.0, 623.8333333333333], [2048.0, 624.0], [2056.0, 623.2], [2064.0, 623.1999999999998], [2068.0, 623.3636363636363], [2072.0, 622.5], [2076.0, 623.6], [2104.0, 264.0], [2096.0, 640.0], [2088.0, 641.0], [2084.0, 622.6666666666667], [2080.0, 625.2], [2328.0, 258.0], [2356.0, 256.4], [2368.0, 699.5], [2332.0, 258.0], [2352.0, 258.0], [2348.0, 257.3333333333333], [2344.0, 257.625], [2340.0, 257.1875], [2528.0, 699.0], [2588.0, 703.0], [2576.0, 699.5], [2572.0, 701.0], [2832.0, 699.5], [2836.0, 697.0], [2820.0, 700.0], [2816.0, 700.0], [3000.0, 1754.1071959727294], [2057.0, 622.7777777777778], [2053.0, 622.3333333333333], [2061.0, 621.5], [2065.0, 623.5000000000001], [2069.0, 622.5], [2073.0, 622.6666666666666], [2093.0, 621.0], [2089.0, 629.0], [2085.0, 624.5454545454546], [2081.0, 624.0], [2329.0, 258.75], [2373.0, 699.5], [2369.0, 700.3333333333333], [2325.0, 257.8888888888889], [2333.0, 257.4], [2357.0, 256.6470588235294], [2353.0, 257.3333333333333], [2349.0, 257.0], [2345.0, 257.33333333333326], [2337.0, 258.0], [2589.0, 699.7142857142857], [2561.0, 701.0], [2809.0, 699.0], [2821.0, 700.6], [1079.0, 12354.0], [1083.0, 12349.0], [1057.0, 11222.0], [1059.0, 10564.5], [1067.0, 10561.0], [1065.0, 7792.0], [1069.0, 8762.0], [1071.0, 12358.0], [1085.0, 12346.0], [1081.0, 12352.0], [1077.0, 12355.0], [1073.0, 12358.5], [1053.0, 12364.0], [1027.0, 8664.0], [1031.0, 12043.333333333334], [1035.0, 14696.5], [1033.0, 10003.5], [1037.0, 13266.0], [1039.0, 7011.0], [1051.0, 9966.0], [1047.0, 10940.0], [1045.0, 4164.0], [1043.0, 5171.0], [1041.0, 6113.0], [1145.0, 10497.5], [1123.0, 12321.0], [1151.0, 12290.0], [1121.0, 8726.0], [1127.0, 8723.0], [1129.0, 7751.0], [1135.0, 12320.0], [1133.0, 11121.0], [1149.0, 12295.0], [1147.0, 10496.5], [1143.0, 12299.0], [1141.0, 8702.0], [1139.0, 8720.0], [1137.0, 11120.666666666666], [1089.0, 12342.0], [1093.0, 10543.5], [1101.0, 10542.0], [1099.0, 12338.0], [1103.0, 12327.0], [1115.0, 10526.0], [1113.0, 9104.0], [1111.0, 12328.0], [1109.0, 12327.0], [1105.0, 12326.0], [1211.0, 10838.0], [1215.0, 8665.0], [1185.0, 12270.0], [1189.0, 11068.333333333334], [1191.0, 8670.0], [1213.0, 8665.0], [1209.0, 10464.5], [1207.0, 9565.5], [1183.0, 10471.5], [1161.0, 12283.0], [1165.0, 8686.0], [1167.0, 12282.0], [1181.0, 12272.0], [1177.0, 8677.0], [1175.0, 12275.333333333334], [1171.0, 8680.0], [1169.0, 8682.0], [1197.0, 9867.0], [1195.0, 12265.5], [1271.0, 12215.0], [1253.0, 12237.0], [1279.0, 8596.0], [1249.0, 8642.0], [1259.0, 12233.5], [1263.0, 10432.0], [1261.0, 12230.0], [1275.0, 8609.0], [1273.0, 8618.0], [1269.0, 12223.0], [1247.0, 12240.0], [1223.0, 8664.0], [1225.0, 12256.0], [1227.0, 12255.0], [1229.0, 12252.0], [1243.0, 12243.5], [1239.0, 12250.0], [1237.0, 12251.0], [1235.0, 12248.0], [1233.0, 12249.666666666666], [1331.0, 12121.0], [1337.0, 979.0], [1313.0, 9315.5], [1317.0, 12162.0], [1319.0, 12159.0], [1321.0, 9286.0], [1327.0, 9280.0], [1335.0, 2030.0], [1333.0, 3161.0], [1329.0, 12129.0], [1295.0, 8590.0], [1291.0, 8591.0], [1289.0, 8593.0], [1285.0, 8594.0], [1283.0, 8595.0], [1281.0, 9344.0], [1311.0, 8566.0], [1307.0, 10365.0], [1303.0, 8570.0], [1301.0, 9321.0], [1297.0, 9331.0], [2045.0, 623.4], [2047.0, 623.0], [2017.0, 623.2], [2019.0, 622.9999999999999], [2021.0, 622.7272727272727], [2023.0, 624.0], [2025.0, 623.25], [2027.0, 622.8], [2029.0, 622.6511627906975], [2031.0, 622.1428571428572], [2043.0, 622.909090909091], [2041.0, 624.0], [2039.0, 622.7200000000003], [2037.0, 622.6], [2035.0, 623.8], [2033.0, 622.75], [2015.0, 622.6666666666666], [2013.0, 623.0], [2011.0, 622.7], [2009.0, 623.6666666666666], [2007.0, 623.25], [2005.0, 623.3000000000001], [2003.0, 622.0], [2058.0, 622.2], [2106.0, 265.5], [2050.0, 623.2272727272726], [2054.0, 622.8], [2062.0, 623.1666666666666], [2070.0, 622.6923076923078], [2074.0, 622.8125000000001], [2078.0, 623.8571428571428], [2098.0, 635.25], [2090.0, 632.0], [2086.0, 623.0], [2082.0, 623.5], [2358.0, 256.0740740740741], [2366.0, 700.0], [2326.0, 258.09999999999997], [2330.0, 257.75], [2334.0, 257.5], [2350.0, 258.0], [2346.0, 257.0], [2342.0, 257.07142857142856], [2338.0, 256.0], [2482.0, 701.0], [2578.0, 699.9], [2574.0, 701.0], [2562.0, 700.0], [2814.0, 701.5], [2834.0, 698.0], [2822.0, 699.0], [2818.0, 701.0], [2055.0, 622.4444444444445], [2091.0, 632.0], [2099.0, 267.0], [2051.0, 623.0], [2059.0, 622.25], [2067.0, 623.090909090909], [2071.0, 623.0714285714287], [2075.0, 623.1538461538462], [2079.0, 623.1999999999999], [2103.0, 265.25], [2087.0, 627.1111111111111], [2375.0, 700.0], [2335.0, 257.6666666666667], [2355.0, 257.0], [2351.0, 258.0], [2347.0, 258.0], [2339.0, 257.25], [2583.0, 699.5], [2575.0, 700.5], [2811.0, 700.5], [2835.0, 698.6666666666666], [2831.0, 700.0], [2827.0, 699.5], [2823.0, 699.25], [2819.0, 703.0], [1.0, 100369.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[2990.36872619047, 1843.7966523809564]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 3000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 1201.2, "minX": 1.682865E12, "maxY": 1091277.6333333333, "series": [{"data": [[1.68286512E12, 1091277.6333333333], [1.6828653E12, 484694.7833333333], [1.682865E12, 403142.73333333334], [1.68286518E12, 1077491.2166666666], [1.68286536E12, 2603.9333333333334], [1.68286506E12, 982674.1333333333], [1.68286524E12, 997230.4833333333], [1.68286542E12, 1722.7333333333333]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.68286512E12, 765172.8], [1.6828653E12, 341166.0], [1.682865E12, 276082.8], [1.68286518E12, 754101.6], [1.68286536E12, 1915.2], [1.68286506E12, 683541.6], [1.68286524E12, 699325.2], [1.68286542E12, 1201.2]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68286542E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 777.9176104617848, "minX": 1.682865E12, "maxY": 98994.8181818181, "series": [{"data": [[1.68286512E12, 2009.0422681995765], [1.6828653E12, 1887.711855225898], [1.682865E12, 777.9176104617848], [1.68286518E12, 2017.6919857524513], [1.68286536E12, 47172.89912280706], [1.68286506E12, 1451.1583635561644], [1.68286524E12, 1971.550599704624], [1.68286542E12, 98994.8181818181]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68286542E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 666.2801485910967, "minX": 1.682865E12, "maxY": 98994.8181818181, "series": [{"data": [[1.68286512E12, 1982.284512264672], [1.6828653E12, 1887.6606426197131], [1.682865E12, 666.2801485910967], [1.68286518E12, 1960.8848953695483], [1.68286536E12, 47172.890350877205], [1.68286506E12, 1337.9865099980289], [1.68286524E12, 1928.4783950246688], [1.68286542E12, 98994.8181818181]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68286542E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.682865E12, "maxY": 1296.3815789473688, "series": [{"data": [[1.68286512E12, 687.0814537715555], [1.6828653E12, 346.27211621322124], [1.682865E12, 65.68155597837539], [1.68286518E12, 710.3983637577949], [1.68286536E12, 1296.3815789473688], [1.68286506E12, 223.58236130170476], [1.68286524E12, 401.01926978904777], [1.68286542E12, 0.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68286542E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 4.0, "minX": 1.682865E12, "maxY": 233436.0, "series": [{"data": [[1.68286512E12, 145000.0], [1.6828653E12, 169095.0], [1.682865E12, 22528.0], [1.68286518E12, 200541.0], [1.68286536E12, 111054.0], [1.68286506E12, 84901.0], [1.68286524E12, 233436.0], [1.68286542E12, 100369.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.68286512E12, 641.0], [1.6828653E12, 1227.0], [1.682865E12, 302.0], [1.68286518E12, 759.0], [1.68286536E12, 78303.7], [1.68286506E12, 90.0], [1.68286524E12, 1307.0], [1.68286542E12, 100298.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.68286512E12, 134656.82000000004], [1.6828653E12, 33704.0], [1.682865E12, 17836.99], [1.68286518E12, 129507.71000000005], [1.68286536E12, 104996.71], [1.68286506E12, 9647.0], [1.68286524E12, 5284.0], [1.68286542E12, 100350.52]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.68286512E12, 654.0], [1.6828653E12, 11279.95], [1.682865E12, 370.0], [1.68286518E12, 5594.200000000012], [1.68286536E12, 84811.84999999998], [1.68286506E12, 5710.950000000001], [1.68286524E12, 1494.0], [1.68286542E12, 100306.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.68286512E12, 18.0], [1.6828653E12, 24.0], [1.682865E12, 30.0], [1.68286518E12, 33.0], [1.68286536E12, 27717.0], [1.68286506E12, 4.0], [1.68286524E12, 36.0], [1.68286542E12, 87284.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.68286512E12, 572.0], [1.6828653E12, 683.0], [1.682865E12, 226.0], [1.68286518E12, 623.0], [1.68286536E12, 36858.0], [1.68286506E12, 55.0], [1.68286524E12, 1134.0], [1.68286542E12, 100265.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68286542E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 16.0, "minX": 2.0, "maxY": 117706.0, "series": [{"data": [[2.0, 54153.0], [4.0, 47576.5], [5.0, 11538.0], [6.0, 12358.0], [7.0, 17378.0], [9.0, 6011.0], [11.0, 10004.0], [23.0, 36172.0], [26.0, 33709.0], [46.0, 12225.5], [47.0, 19699.0], [51.0, 33142.0], [58.0, 9794.0], [61.0, 32360.5], [97.0, 25836.0], [100.0, 122.0], [104.0, 19457.5], [117.0, 95090.5], [122.0, 7038.0], [130.0, 1145.0], [128.0, 16676.0], [139.0, 139.0], [140.0, 114.0], [148.0, 7328.0], [165.0, 7348.0], [171.0, 108.0], [175.0, 125.0], [184.0, 14871.5], [204.0, 161.0], [200.0, 100219.5], [215.0, 13653.0], [211.0, 117.0], [219.0, 157.0], [226.0, 9179.0], [244.0, 175.0], [271.0, 198.0], [282.0, 71.0], [291.0, 198.0], [288.0, 12188.5], [311.0, 178.0], [328.0, 604.0], [362.0, 210.5], [371.0, 8082.0], [390.0, 217.0], [416.0, 238.0], [447.0, 6273.0], [443.0, 3168.0], [491.0, 224.0], [499.0, 10371.0], [569.0, 26.0], [548.0, 7059.0], [580.0, 16.0], [576.0, 230.5], [618.0, 285.0], [619.0, 11244.0], [635.0, 256.0], [655.0, 75.0], [656.0, 10239.0], [658.0, 287.0], [688.0, 603.0], [757.0, 1212.0], [776.0, 414.0], [782.0, 645.0], [821.0, 343.0], [860.0, 69.0], [881.0, 52.0], [867.0, 550.0], [920.0, 1180.0], [931.0, 199.0], [988.0, 121.0], [1064.0, 225.0], [1041.0, 56.0], [1079.0, 208.0], [1109.0, 648.0], [1118.0, 642.0], [1121.0, 626.0], [1092.0, 581.0], [1134.0, 664.0], [1129.0, 531.0], [1193.0, 218.0], [1159.0, 43.0], [1182.0, 717.0], [1175.0, 749.0], [1191.0, 678.0], [1224.0, 312.0], [1253.0, 367.0], [1272.0, 656.0], [1220.0, 585.0], [1235.0, 674.0], [1269.0, 695.0], [1250.0, 697.0], [1234.0, 663.0], [1295.0, 574.0], [1289.0, 705.0], [1324.0, 647.0], [1336.0, 641.0], [1284.0, 711.0], [1330.0, 760.0], [1287.0, 755.0], [1304.0, 648.0], [1404.0, 347.0], [1383.0, 207.5], [1388.0, 690.0], [1390.0, 674.0], [1384.0, 715.0], [1378.0, 744.0], [1379.0, 665.0], [1375.0, 336.0], [1373.0, 761.0], [1365.0, 465.0], [1366.0, 760.0], [1372.0, 745.0], [1376.0, 66.0], [1402.0, 250.0], [1398.0, 676.0], [1396.0, 899.0], [1392.0, 698.0], [1394.0, 673.0], [1399.0, 697.0], [1406.0, 530.0], [1345.0, 683.0], [1419.0, 609.0], [1451.0, 390.0], [1443.0, 389.0], [1471.0, 50.0], [1424.0, 560.0], [1412.0, 686.0], [1414.0, 761.0], [1447.0, 870.0], [1416.0, 672.0], [1418.0, 1049.0], [1462.0, 747.0], [1470.0, 679.0], [1481.0, 468.0], [1498.0, 428.0], [1520.0, 64.0], [1508.0, 78.0], [1510.0, 274.0], [1482.0, 542.0], [1521.0, 695.0], [1511.0, 637.0], [1548.0, 633.0], [1574.0, 613.0], [1559.0, 687.0], [1595.0, 727.0], [1589.0, 790.0], [1587.0, 1184.0], [1601.0, 141.0], [1653.0, 606.0], [1624.0, 694.0], [1612.0, 752.0], [1650.0, 639.5], [1678.0, 350.0], [1673.0, 222.0], [1693.0, 657.0], [1726.0, 672.0], [1667.0, 708.0], [1700.0, 592.0], [1715.0, 639.0], [1666.0, 1158.0], [1767.0, 599.0], [1732.0, 728.0], [1735.0, 721.0], [1822.0, 720.0], [1798.0, 735.0], [1808.0, 734.0], [1841.0, 1128.0], [1877.0, 369.0], [1883.0, 245.0], [1881.0, 64.0], [1874.0, 60.0], [1870.0, 280.0], [1865.0, 554.0], [1949.0, 313.0], [1981.0, 45.0], [1939.0, 683.0], [1947.0, 1347.0], [2034.0, 240.0], [1999.0, 159.0], [2014.0, 507.0], [1984.0, 735.0], [2030.0, 281.0], [2022.0, 518.0], [2029.0, 641.0], [2016.0, 66.0], [2009.0, 57.0], [2019.0, 100.0], [2008.0, 99.0], [2032.0, 189.0], [2043.0, 466.0], [2038.0, 700.0], [2159.0, 325.0], [2175.0, 218.0], [2124.0, 208.0], [2161.0, 225.0], [2163.0, 94.0], [2172.0, 56.0], [2173.0, 88.0], [2081.0, 238.0], [2123.0, 368.0], [2085.0, 268.0], [2048.0, 280.0], [2108.0, 83.0], [2111.0, 645.0], [2098.0, 516.0], [2099.0, 586.0], [2062.0, 101.0], [2068.0, 361.0], [2145.0, 198.0], [2067.0, 147.0], [2131.0, 277.0], [2140.0, 39.0], [2137.0, 92.0], [2136.0, 205.0], [2129.0, 26.0], [2126.0, 772.0], [2190.0, 224.0], [2183.0, 198.0], [2243.0, 543.0], [2208.0, 281.0], [2257.0, 288.0], [2259.0, 568.0], [2261.0, 680.0], [2202.0, 26.0], [2296.0, 205.0], [2288.0, 533.0], [2250.0, 56.0], [2252.0, 712.0], [2187.0, 80.0], [2209.0, 85.0], [2214.0, 647.0], [2329.0, 575.0], [2340.0, 229.0], [2369.0, 227.0], [2430.0, 571.0], [2400.0, 579.0], [2426.0, 608.0], [2392.0, 703.0], [2419.0, 835.0], [2353.0, 1143.0], [2307.0, 1169.0], [2529.0, 546.0], [2516.0, 277.0], [2518.0, 1179.0], [2494.0, 607.0], [2480.0, 702.0], [2510.0, 680.0], [2559.0, 707.0], [2558.0, 1153.0], [2555.0, 603.0], [2551.0, 1014.0], [2444.0, 595.0], [2453.0, 1037.0], [2434.0, 703.0], [2528.0, 723.5], [2459.0, 1212.0], [2638.0, 668.0], [2573.0, 1370.0], [2740.0, 614.0], [2708.0, 616.0], [2722.0, 1197.0], [2828.0, 669.0], [2816.0, 655.0], [2820.0, 723.0], [2959.0, 802.0], [3033.0, 940.0], [3186.0, 1172.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[569.0, 67051.0], [635.0, 49768.0], [656.0, 9950.5], [821.0, 86301.0], [931.0, 19852.5], [58.0, 42172.0], [1134.0, 69418.5], [1295.0, 35774.0], [1383.0, 9668.0], [1406.0, 65866.0], [1388.0, 114757.0], [1482.0, 10311.0], [1589.0, 115721.0], [2016.0, 9502.5], [2124.0, 23689.0], [2175.0, 22750.0], [2173.0, 32155.5], [2190.0, 15704.0], [2243.0, 20741.5], [2209.0, 33914.5], [2214.0, 86249.5], [2392.0, 108267.0], [165.0, 83816.0], [2828.0, 83714.0], [204.0, 28828.0], [328.0, 117706.0], [416.0, 8720.5]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 3186.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 2.0, "maxY": 100219.5, "series": [{"data": [[2.0, 54153.0], [4.0, 47576.5], [5.0, 11538.0], [6.0, 12358.0], [7.0, 17378.0], [9.0, 6011.0], [11.0, 10004.0], [23.0, 36172.0], [26.0, 33709.0], [46.0, 12225.5], [47.0, 19699.0], [51.0, 33142.0], [58.0, 9794.0], [61.0, 32360.5], [97.0, 25836.0], [100.0, 122.0], [104.0, 19457.5], [117.0, 95090.5], [122.0, 7038.0], [130.0, 1145.0], [128.0, 16676.0], [139.0, 139.0], [140.0, 114.0], [148.0, 7328.0], [165.0, 7348.0], [171.0, 108.0], [175.0, 125.0], [184.0, 14871.5], [204.0, 161.0], [200.0, 100219.5], [215.0, 13653.0], [211.0, 117.0], [219.0, 157.0], [226.0, 9179.0], [244.0, 175.0], [271.0, 198.0], [282.0, 71.0], [291.0, 198.0], [288.0, 12188.5], [311.0, 178.0], [328.0, 604.0], [362.0, 210.0], [371.0, 8082.0], [390.0, 217.0], [416.0, 238.0], [447.0, 6272.0], [443.0, 3168.0], [491.0, 224.0], [499.0, 10371.0], [569.0, 25.5], [548.0, 7059.0], [580.0, 16.0], [576.0, 230.5], [618.0, 285.0], [619.0, 11244.0], [635.0, 256.0], [655.0, 75.0], [656.0, 10239.0], [658.0, 287.0], [688.0, 603.0], [757.0, 1212.0], [776.0, 414.0], [782.0, 645.0], [821.0, 343.0], [860.0, 69.0], [881.0, 52.0], [867.0, 550.0], [920.0, 1180.0], [931.0, 199.0], [988.0, 120.5], [1064.0, 225.0], [1041.0, 56.0], [1079.0, 208.0], [1109.0, 648.0], [1118.0, 642.0], [1121.0, 626.0], [1092.0, 581.0], [1134.0, 664.0], [1129.0, 531.0], [1193.0, 218.0], [1159.0, 43.0], [1182.0, 717.0], [1175.0, 749.0], [1191.0, 678.0], [1224.0, 312.0], [1253.0, 367.0], [1272.0, 656.0], [1220.0, 585.0], [1235.0, 674.0], [1269.0, 695.0], [1250.0, 697.0], [1234.0, 663.0], [1295.0, 574.0], [1289.0, 705.0], [1324.0, 647.0], [1336.0, 641.0], [1284.0, 711.0], [1330.0, 760.0], [1287.0, 755.0], [1304.0, 648.0], [1404.0, 347.0], [1383.0, 207.5], [1388.0, 690.0], [1390.0, 674.0], [1384.0, 715.0], [1378.0, 744.0], [1379.0, 665.0], [1375.0, 336.0], [1373.0, 761.0], [1365.0, 465.0], [1366.0, 760.0], [1372.0, 745.0], [1376.0, 66.0], [1402.0, 250.0], [1398.0, 676.0], [1396.0, 898.5], [1392.0, 698.0], [1394.0, 673.0], [1399.0, 697.0], [1406.0, 530.0], [1345.0, 683.0], [1419.0, 609.0], [1451.0, 390.0], [1443.0, 389.0], [1471.0, 50.0], [1424.0, 560.0], [1412.0, 686.0], [1414.0, 761.0], [1447.0, 870.0], [1416.0, 672.0], [1418.0, 1049.0], [1462.0, 747.0], [1470.0, 679.0], [1481.0, 468.0], [1498.0, 428.0], [1520.0, 64.0], [1508.0, 78.0], [1510.0, 274.0], [1482.0, 542.0], [1521.0, 695.0], [1511.0, 637.0], [1548.0, 633.0], [1574.0, 613.0], [1559.0, 687.0], [1595.0, 727.0], [1589.0, 790.0], [1587.0, 1184.0], [1601.0, 141.0], [1653.0, 606.0], [1624.0, 694.0], [1612.0, 752.0], [1650.0, 639.0], [1678.0, 350.0], [1673.0, 222.0], [1693.0, 657.0], [1726.0, 672.0], [1667.0, 708.0], [1700.0, 592.0], [1715.0, 639.0], [1666.0, 1158.0], [1767.0, 599.0], [1732.0, 728.0], [1735.0, 721.0], [1822.0, 720.0], [1798.0, 735.0], [1808.0, 734.0], [1841.0, 1128.0], [1877.0, 369.0], [1883.0, 245.0], [1881.0, 64.0], [1874.0, 60.0], [1870.0, 280.0], [1865.0, 554.0], [1949.0, 313.0], [1981.0, 45.0], [1939.0, 683.0], [1947.0, 1347.0], [2034.0, 240.0], [1999.0, 159.0], [2014.0, 507.0], [1984.0, 735.0], [2030.0, 281.0], [2022.0, 518.0], [2029.0, 641.0], [2016.0, 66.0], [2009.0, 57.0], [2019.0, 100.0], [2008.0, 99.0], [2032.0, 189.0], [2043.0, 466.0], [2038.0, 700.0], [2159.0, 325.0], [2175.0, 218.0], [2124.0, 208.0], [2161.0, 225.0], [2163.0, 94.0], [2172.0, 56.0], [2173.0, 88.0], [2081.0, 238.0], [2123.0, 368.0], [2085.0, 268.0], [2048.0, 280.0], [2108.0, 83.0], [2111.0, 645.0], [2098.0, 516.0], [2099.0, 586.0], [2062.0, 101.0], [2068.0, 361.0], [2145.0, 198.0], [2067.0, 147.0], [2131.0, 277.0], [2140.0, 39.0], [2137.0, 92.0], [2136.0, 205.0], [2129.0, 26.0], [2126.0, 772.0], [2190.0, 224.0], [2183.0, 198.0], [2243.0, 543.0], [2208.0, 281.0], [2257.0, 288.0], [2259.0, 568.0], [2261.0, 680.0], [2202.0, 26.0], [2296.0, 205.0], [2288.0, 533.0], [2250.0, 56.0], [2252.0, 712.0], [2187.0, 80.0], [2209.0, 85.0], [2214.0, 647.0], [2329.0, 575.0], [2340.0, 229.0], [2369.0, 227.0], [2430.0, 571.0], [2400.0, 579.0], [2426.0, 608.0], [2392.0, 703.0], [2419.0, 835.0], [2353.0, 1143.0], [2307.0, 1169.0], [2529.0, 546.0], [2516.0, 277.0], [2518.0, 1179.0], [2494.0, 607.0], [2480.0, 702.0], [2510.0, 680.0], [2559.0, 707.0], [2558.0, 1153.0], [2555.0, 603.0], [2551.0, 1014.0], [2444.0, 595.0], [2453.0, 1037.0], [2434.0, 703.0], [2528.0, 723.5], [2459.0, 1212.0], [2638.0, 668.0], [2573.0, 1370.0], [2740.0, 614.0], [2708.0, 616.0], [2722.0, 1197.0], [2828.0, 669.0], [2816.0, 655.0], [2820.0, 723.0], [2959.0, 802.0], [3033.0, 940.0], [3186.0, 1172.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[569.0, 0.0], [635.0, 0.0], [656.0, 0.0], [821.0, 0.0], [931.0, 0.0], [58.0, 0.0], [1134.0, 0.0], [1295.0, 0.0], [1383.0, 0.0], [1406.0, 0.0], [1388.0, 0.0], [1482.0, 0.0], [1589.0, 0.0], [2016.0, 0.0], [2124.0, 0.0], [2175.0, 0.0], [2173.0, 0.0], [2190.0, 0.0], [2243.0, 0.0], [2209.0, 0.0], [2214.0, 0.0], [2392.0, 0.0], [165.0, 0.0], [2828.0, 0.0], [204.0, 0.0], [328.0, 0.0], [416.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 3186.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 601.85, "minX": 1.682865E12, "maxY": 1521.3833333333334, "series": [{"data": [[1.68286512E12, 1521.3833333333334], [1.6828653E12, 676.6666666666666], [1.682865E12, 601.85], [1.68286518E12, 1488.6166666666666], [1.68286506E12, 1358.15], [1.68286524E12, 1353.3333333333333]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6828653E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.6333333333333333, "minX": 1.682865E12, "maxY": 1518.2, "series": [{"data": [[1.68286512E12, 1518.2], [1.6828653E12, 676.9166666666666], [1.682865E12, 547.7833333333333], [1.68286518E12, 1496.2333333333333], [1.68286536E12, 3.8], [1.68286506E12, 1356.2333333333333], [1.68286524E12, 1387.55], [1.68286542E12, 2.3833333333333333]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.68286512E12, 1.0666666666666667], [1.682865E12, 4.066666666666666], [1.68286518E12, 1.1], [1.68286506E12, 4.033333333333333], [1.68286524E12, 0.6333333333333333]], "isOverall": false, "label": "Non HTTP response code: java.net.SocketException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68286542E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.6333333333333333, "minX": 1.682865E12, "maxY": 1518.2, "series": [{"data": [[1.68286512E12, 1518.2], [1.6828653E12, 676.9166666666666], [1.682865E12, 547.7833333333333], [1.68286518E12, 1496.2333333333333], [1.68286536E12, 3.8], [1.68286506E12, 1356.2333333333333], [1.68286524E12, 1387.55], [1.68286542E12, 2.3833333333333333]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.68286512E12, 1.0666666666666667], [1.682865E12, 4.066666666666666], [1.68286518E12, 1.1], [1.68286506E12, 4.033333333333333], [1.68286524E12, 0.6333333333333333]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68286542E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.6333333333333333, "minX": 1.682865E12, "maxY": 1518.2, "series": [{"data": [[1.68286512E12, 1518.2], [1.6828653E12, 676.9166666666666], [1.682865E12, 547.7833333333333], [1.68286518E12, 1496.2333333333333], [1.68286536E12, 3.8], [1.68286506E12, 1356.2333333333333], [1.68286524E12, 1387.55], [1.68286542E12, 2.3833333333333333]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.68286512E12, 1.0666666666666667], [1.682865E12, 4.066666666666666], [1.68286518E12, 1.1], [1.68286506E12, 4.033333333333333], [1.68286524E12, 0.6333333333333333]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68286542E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

