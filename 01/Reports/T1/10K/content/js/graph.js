/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 3.0, "minX": 0.0, "maxY": 249288.0, "series": [{"data": [[0.0, 3.0], [0.1, 4.0], [0.2, 5.0], [0.3, 5.0], [0.4, 6.0], [0.5, 6.0], [0.6, 7.0], [0.7, 8.0], [0.8, 8.0], [0.9, 9.0], [1.0, 9.0], [1.1, 10.0], [1.2, 11.0], [1.3, 11.0], [1.4, 12.0], [1.5, 12.0], [1.6, 12.0], [1.7, 13.0], [1.8, 13.0], [1.9, 14.0], [2.0, 14.0], [2.1, 15.0], [2.2, 15.0], [2.3, 16.0], [2.4, 16.0], [2.5, 17.0], [2.6, 18.0], [2.7, 18.0], [2.8, 19.0], [2.9, 19.0], [3.0, 20.0], [3.1, 20.0], [3.2, 21.0], [3.3, 21.0], [3.4, 22.0], [3.5, 22.0], [3.6, 23.0], [3.7, 23.0], [3.8, 24.0], [3.9, 25.0], [4.0, 25.0], [4.1, 26.0], [4.2, 26.0], [4.3, 27.0], [4.4, 27.0], [4.5, 28.0], [4.6, 29.0], [4.7, 29.0], [4.8, 30.0], [4.9, 30.0], [5.0, 31.0], [5.1, 32.0], [5.2, 32.0], [5.3, 33.0], [5.4, 33.0], [5.5, 34.0], [5.6, 34.0], [5.7, 35.0], [5.8, 36.0], [5.9, 37.0], [6.0, 37.0], [6.1, 38.0], [6.2, 39.0], [6.3, 40.0], [6.4, 41.0], [6.5, 42.0], [6.6, 43.0], [6.7, 44.0], [6.8, 45.0], [6.9, 45.0], [7.0, 46.0], [7.1, 47.0], [7.2, 48.0], [7.3, 49.0], [7.4, 50.0], [7.5, 50.0], [7.6, 51.0], [7.7, 52.0], [7.8, 52.0], [7.9, 53.0], [8.0, 54.0], [8.1, 55.0], [8.2, 55.0], [8.3, 56.0], [8.4, 56.0], [8.5, 57.0], [8.6, 58.0], [8.7, 58.0], [8.8, 59.0], [8.9, 60.0], [9.0, 60.0], [9.1, 61.0], [9.2, 62.0], [9.3, 63.0], [9.4, 64.0], [9.5, 65.0], [9.6, 65.0], [9.7, 66.0], [9.8, 67.0], [9.9, 68.0], [10.0, 69.0], [10.1, 69.0], [10.2, 70.0], [10.3, 71.0], [10.4, 72.0], [10.5, 73.0], [10.6, 73.0], [10.7, 74.0], [10.8, 75.0], [10.9, 76.0], [11.0, 77.0], [11.1, 78.0], [11.2, 79.0], [11.3, 80.0], [11.4, 81.0], [11.5, 81.0], [11.6, 82.0], [11.7, 84.0], [11.8, 84.0], [11.9, 85.0], [12.0, 86.0], [12.1, 88.0], [12.2, 89.0], [12.3, 90.0], [12.4, 92.0], [12.5, 93.0], [12.6, 94.0], [12.7, 96.0], [12.8, 97.0], [12.9, 98.0], [13.0, 99.0], [13.1, 101.0], [13.2, 103.0], [13.3, 104.0], [13.4, 105.0], [13.5, 106.0], [13.6, 108.0], [13.7, 110.0], [13.8, 111.0], [13.9, 113.0], [14.0, 114.0], [14.1, 116.0], [14.2, 117.0], [14.3, 118.0], [14.4, 119.0], [14.5, 120.0], [14.6, 121.0], [14.7, 122.0], [14.8, 123.0], [14.9, 124.0], [15.0, 125.0], [15.1, 126.0], [15.2, 127.0], [15.3, 127.0], [15.4, 128.0], [15.5, 129.0], [15.6, 129.0], [15.7, 130.0], [15.8, 131.0], [15.9, 131.0], [16.0, 132.0], [16.1, 133.0], [16.2, 134.0], [16.3, 135.0], [16.4, 136.0], [16.5, 137.0], [16.6, 137.0], [16.7, 138.0], [16.8, 139.0], [16.9, 140.0], [17.0, 141.0], [17.1, 142.0], [17.2, 142.0], [17.3, 143.0], [17.4, 144.0], [17.5, 146.0], [17.6, 147.0], [17.7, 148.0], [17.8, 150.0], [17.9, 151.0], [18.0, 151.0], [18.1, 152.0], [18.2, 153.0], [18.3, 154.0], [18.4, 155.0], [18.5, 155.0], [18.6, 156.0], [18.7, 157.0], [18.8, 158.0], [18.9, 158.0], [19.0, 159.0], [19.1, 160.0], [19.2, 161.0], [19.3, 162.0], [19.4, 163.0], [19.5, 164.0], [19.6, 165.0], [19.7, 166.0], [19.8, 166.0], [19.9, 168.0], [20.0, 169.0], [20.1, 169.0], [20.2, 170.0], [20.3, 171.0], [20.4, 173.0], [20.5, 175.0], [20.6, 176.0], [20.7, 178.0], [20.8, 179.0], [20.9, 180.0], [21.0, 181.0], [21.1, 183.0], [21.2, 183.0], [21.3, 185.0], [21.4, 186.0], [21.5, 187.0], [21.6, 187.0], [21.7, 188.0], [21.8, 189.0], [21.9, 190.0], [22.0, 190.0], [22.1, 190.0], [22.2, 191.0], [22.3, 192.0], [22.4, 193.0], [22.5, 194.0], [22.6, 194.0], [22.7, 195.0], [22.8, 195.0], [22.9, 196.0], [23.0, 196.0], [23.1, 197.0], [23.2, 197.0], [23.3, 198.0], [23.4, 198.0], [23.5, 199.0], [23.6, 200.0], [23.7, 200.0], [23.8, 201.0], [23.9, 202.0], [24.0, 202.0], [24.1, 203.0], [24.2, 204.0], [24.3, 205.0], [24.4, 206.0], [24.5, 207.0], [24.6, 207.0], [24.7, 208.0], [24.8, 208.0], [24.9, 209.0], [25.0, 210.0], [25.1, 211.0], [25.2, 212.0], [25.3, 213.0], [25.4, 214.0], [25.5, 214.0], [25.6, 215.0], [25.7, 216.0], [25.8, 216.0], [25.9, 217.0], [26.0, 218.0], [26.1, 219.0], [26.2, 220.0], [26.3, 222.0], [26.4, 223.0], [26.5, 224.0], [26.6, 225.0], [26.7, 226.0], [26.8, 226.0], [26.9, 227.0], [27.0, 227.0], [27.1, 228.0], [27.2, 228.0], [27.3, 229.0], [27.4, 230.0], [27.5, 230.0], [27.6, 231.0], [27.7, 232.0], [27.8, 233.0], [27.9, 233.0], [28.0, 234.0], [28.1, 235.0], [28.2, 236.0], [28.3, 237.0], [28.4, 238.0], [28.5, 240.0], [28.6, 241.0], [28.7, 242.0], [28.8, 243.0], [28.9, 244.0], [29.0, 245.0], [29.1, 245.0], [29.2, 246.0], [29.3, 247.0], [29.4, 248.0], [29.5, 249.0], [29.6, 249.0], [29.7, 250.0], [29.8, 251.0], [29.9, 252.0], [30.0, 254.0], [30.1, 255.0], [30.2, 256.0], [30.3, 256.0], [30.4, 257.0], [30.5, 257.0], [30.6, 257.0], [30.7, 258.0], [30.8, 258.0], [30.9, 259.0], [31.0, 260.0], [31.1, 260.0], [31.2, 261.0], [31.3, 262.0], [31.4, 262.0], [31.5, 263.0], [31.6, 264.0], [31.7, 264.0], [31.8, 265.0], [31.9, 266.0], [32.0, 268.0], [32.1, 269.0], [32.2, 270.0], [32.3, 272.0], [32.4, 272.0], [32.5, 273.0], [32.6, 274.0], [32.7, 275.0], [32.8, 276.0], [32.9, 277.0], [33.0, 279.0], [33.1, 280.0], [33.2, 281.0], [33.3, 282.0], [33.4, 283.0], [33.5, 285.0], [33.6, 287.0], [33.7, 287.0], [33.8, 288.0], [33.9, 289.0], [34.0, 290.0], [34.1, 291.0], [34.2, 292.0], [34.3, 293.0], [34.4, 294.0], [34.5, 294.0], [34.6, 295.0], [34.7, 297.0], [34.8, 298.0], [34.9, 299.0], [35.0, 300.0], [35.1, 303.0], [35.2, 304.0], [35.3, 305.0], [35.4, 306.0], [35.5, 307.0], [35.6, 308.0], [35.7, 309.0], [35.8, 309.0], [35.9, 310.0], [36.0, 313.0], [36.1, 315.0], [36.2, 316.0], [36.3, 318.0], [36.4, 320.0], [36.5, 322.0], [36.6, 323.0], [36.7, 324.0], [36.8, 325.0], [36.9, 326.0], [37.0, 328.0], [37.1, 330.0], [37.2, 333.0], [37.3, 334.0], [37.4, 336.0], [37.5, 337.0], [37.6, 338.0], [37.7, 339.0], [37.8, 340.0], [37.9, 340.0], [38.0, 341.0], [38.1, 342.0], [38.2, 343.0], [38.3, 344.0], [38.4, 345.0], [38.5, 347.0], [38.6, 350.0], [38.7, 351.0], [38.8, 352.0], [38.9, 353.0], [39.0, 354.0], [39.1, 355.0], [39.2, 357.0], [39.3, 359.0], [39.4, 362.0], [39.5, 364.0], [39.6, 365.0], [39.7, 367.0], [39.8, 369.0], [39.9, 372.0], [40.0, 374.0], [40.1, 375.0], [40.2, 376.0], [40.3, 377.0], [40.4, 379.0], [40.5, 380.0], [40.6, 382.0], [40.7, 383.0], [40.8, 385.0], [40.9, 388.0], [41.0, 392.0], [41.1, 394.0], [41.2, 396.0], [41.3, 398.0], [41.4, 400.0], [41.5, 402.0], [41.6, 405.0], [41.7, 408.0], [41.8, 410.0], [41.9, 412.0], [42.0, 416.0], [42.1, 418.0], [42.2, 419.0], [42.3, 422.0], [42.4, 423.0], [42.5, 424.0], [42.6, 426.0], [42.7, 429.0], [42.8, 432.0], [42.9, 433.0], [43.0, 434.0], [43.1, 434.0], [43.2, 435.0], [43.3, 436.0], [43.4, 437.0], [43.5, 437.0], [43.6, 438.0], [43.7, 439.0], [43.8, 440.0], [43.9, 441.0], [44.0, 442.0], [44.1, 443.0], [44.2, 445.0], [44.3, 446.0], [44.4, 447.0], [44.5, 448.0], [44.6, 449.0], [44.7, 450.0], [44.8, 450.0], [44.9, 451.0], [45.0, 452.0], [45.1, 453.0], [45.2, 454.0], [45.3, 455.0], [45.4, 456.0], [45.5, 457.0], [45.6, 458.0], [45.7, 459.0], [45.8, 459.0], [45.9, 460.0], [46.0, 460.0], [46.1, 461.0], [46.2, 461.0], [46.3, 461.0], [46.4, 461.0], [46.5, 462.0], [46.6, 462.0], [46.7, 462.0], [46.8, 463.0], [46.9, 463.0], [47.0, 463.0], [47.1, 463.0], [47.2, 464.0], [47.3, 464.0], [47.4, 464.0], [47.5, 465.0], [47.6, 465.0], [47.7, 465.0], [47.8, 466.0], [47.9, 466.0], [48.0, 466.0], [48.1, 467.0], [48.2, 467.0], [48.3, 468.0], [48.4, 468.0], [48.5, 469.0], [48.6, 469.0], [48.7, 470.0], [48.8, 470.0], [48.9, 470.0], [49.0, 471.0], [49.1, 471.0], [49.2, 472.0], [49.3, 472.0], [49.4, 473.0], [49.5, 474.0], [49.6, 475.0], [49.7, 476.0], [49.8, 477.0], [49.9, 478.0], [50.0, 479.0], [50.1, 480.0], [50.2, 481.0], [50.3, 482.0], [50.4, 483.0], [50.5, 483.0], [50.6, 484.0], [50.7, 485.0], [50.8, 485.0], [50.9, 486.0], [51.0, 486.0], [51.1, 487.0], [51.2, 487.0], [51.3, 488.0], [51.4, 488.0], [51.5, 489.0], [51.6, 489.0], [51.7, 490.0], [51.8, 490.0], [51.9, 491.0], [52.0, 491.0], [52.1, 492.0], [52.2, 492.0], [52.3, 493.0], [52.4, 493.0], [52.5, 494.0], [52.6, 494.0], [52.7, 494.0], [52.8, 495.0], [52.9, 495.0], [53.0, 495.0], [53.1, 496.0], [53.2, 496.0], [53.3, 496.0], [53.4, 497.0], [53.5, 497.0], [53.6, 497.0], [53.7, 497.0], [53.8, 498.0], [53.9, 498.0], [54.0, 499.0], [54.1, 499.0], [54.2, 499.0], [54.3, 500.0], [54.4, 500.0], [54.5, 501.0], [54.6, 501.0], [54.7, 502.0], [54.8, 502.0], [54.9, 503.0], [55.0, 503.0], [55.1, 503.0], [55.2, 504.0], [55.3, 504.0], [55.4, 505.0], [55.5, 506.0], [55.6, 507.0], [55.7, 508.0], [55.8, 508.0], [55.9, 509.0], [56.0, 509.0], [56.1, 510.0], [56.2, 510.0], [56.3, 511.0], [56.4, 511.0], [56.5, 511.0], [56.6, 512.0], [56.7, 512.0], [56.8, 512.0], [56.9, 513.0], [57.0, 513.0], [57.1, 513.0], [57.2, 514.0], [57.3, 514.0], [57.4, 515.0], [57.5, 515.0], [57.6, 516.0], [57.7, 516.0], [57.8, 517.0], [57.9, 517.0], [58.0, 517.0], [58.1, 518.0], [58.2, 518.0], [58.3, 518.0], [58.4, 519.0], [58.5, 519.0], [58.6, 519.0], [58.7, 520.0], [58.8, 520.0], [58.9, 520.0], [59.0, 520.0], [59.1, 520.0], [59.2, 521.0], [59.3, 521.0], [59.4, 521.0], [59.5, 521.0], [59.6, 522.0], [59.7, 522.0], [59.8, 522.0], [59.9, 523.0], [60.0, 523.0], [60.1, 523.0], [60.2, 523.0], [60.3, 524.0], [60.4, 524.0], [60.5, 524.0], [60.6, 524.0], [60.7, 525.0], [60.8, 525.0], [60.9, 525.0], [61.0, 526.0], [61.1, 526.0], [61.2, 526.0], [61.3, 527.0], [61.4, 527.0], [61.5, 527.0], [61.6, 528.0], [61.7, 528.0], [61.8, 529.0], [61.9, 529.0], [62.0, 530.0], [62.1, 530.0], [62.2, 530.0], [62.3, 531.0], [62.4, 531.0], [62.5, 532.0], [62.6, 533.0], [62.7, 533.0], [62.8, 534.0], [62.9, 534.0], [63.0, 535.0], [63.1, 535.0], [63.2, 536.0], [63.3, 536.0], [63.4, 536.0], [63.5, 537.0], [63.6, 537.0], [63.7, 537.0], [63.8, 538.0], [63.9, 538.0], [64.0, 539.0], [64.1, 539.0], [64.2, 540.0], [64.3, 541.0], [64.4, 542.0], [64.5, 542.0], [64.6, 543.0], [64.7, 544.0], [64.8, 545.0], [64.9, 545.0], [65.0, 546.0], [65.1, 547.0], [65.2, 548.0], [65.3, 549.0], [65.4, 549.0], [65.5, 550.0], [65.6, 551.0], [65.7, 552.0], [65.8, 552.0], [65.9, 553.0], [66.0, 553.0], [66.1, 554.0], [66.2, 554.0], [66.3, 555.0], [66.4, 555.0], [66.5, 555.0], [66.6, 555.0], [66.7, 556.0], [66.8, 556.0], [66.9, 556.0], [67.0, 557.0], [67.1, 557.0], [67.2, 558.0], [67.3, 559.0], [67.4, 560.0], [67.5, 561.0], [67.6, 561.0], [67.7, 562.0], [67.8, 563.0], [67.9, 564.0], [68.0, 564.0], [68.1, 565.0], [68.2, 565.0], [68.3, 566.0], [68.4, 567.0], [68.5, 567.0], [68.6, 569.0], [68.7, 570.0], [68.8, 571.0], [68.9, 572.0], [69.0, 573.0], [69.1, 574.0], [69.2, 575.0], [69.3, 576.0], [69.4, 577.0], [69.5, 579.0], [69.6, 580.0], [69.7, 581.0], [69.8, 582.0], [69.9, 583.0], [70.0, 584.0], [70.1, 585.0], [70.2, 586.0], [70.3, 587.0], [70.4, 589.0], [70.5, 591.0], [70.6, 591.0], [70.7, 593.0], [70.8, 594.0], [70.9, 595.0], [71.0, 598.0], [71.1, 600.0], [71.2, 603.0], [71.3, 605.0], [71.4, 606.0], [71.5, 607.0], [71.6, 610.0], [71.7, 612.0], [71.8, 615.0], [71.9, 616.0], [72.0, 618.0], [72.1, 619.0], [72.2, 619.0], [72.3, 620.0], [72.4, 622.0], [72.5, 624.0], [72.6, 625.0], [72.7, 627.0], [72.8, 629.0], [72.9, 629.0], [73.0, 630.0], [73.1, 631.0], [73.2, 632.0], [73.3, 633.0], [73.4, 635.0], [73.5, 636.0], [73.6, 636.0], [73.7, 639.0], [73.8, 641.0], [73.9, 642.0], [74.0, 643.0], [74.1, 643.0], [74.2, 644.0], [74.3, 647.0], [74.4, 649.0], [74.5, 651.0], [74.6, 651.0], [74.7, 652.0], [74.8, 653.0], [74.9, 657.0], [75.0, 659.0], [75.1, 661.0], [75.2, 662.0], [75.3, 663.0], [75.4, 664.0], [75.5, 665.0], [75.6, 666.0], [75.7, 667.0], [75.8, 669.0], [75.9, 671.0], [76.0, 673.0], [76.1, 675.0], [76.2, 676.0], [76.3, 678.0], [76.4, 680.0], [76.5, 682.0], [76.6, 685.0], [76.7, 686.0], [76.8, 689.0], [76.9, 691.0], [77.0, 696.0], [77.1, 697.0], [77.2, 699.0], [77.3, 701.0], [77.4, 705.0], [77.5, 712.0], [77.6, 714.0], [77.7, 717.0], [77.8, 720.0], [77.9, 725.0], [78.0, 728.0], [78.1, 730.0], [78.2, 732.0], [78.3, 734.0], [78.4, 736.0], [78.5, 738.0], [78.6, 738.0], [78.7, 740.0], [78.8, 741.0], [78.9, 746.0], [79.0, 747.0], [79.1, 748.0], [79.2, 749.0], [79.3, 751.0], [79.4, 754.0], [79.5, 757.0], [79.6, 758.0], [79.7, 758.0], [79.8, 759.0], [79.9, 759.0], [80.0, 760.0], [80.1, 761.0], [80.2, 761.0], [80.3, 762.0], [80.4, 764.0], [80.5, 766.0], [80.6, 768.0], [80.7, 771.0], [80.8, 773.0], [80.9, 775.0], [81.0, 776.0], [81.1, 779.0], [81.2, 781.0], [81.3, 783.0], [81.4, 787.0], [81.5, 789.0], [81.6, 790.0], [81.7, 792.0], [81.8, 794.0], [81.9, 795.0], [82.0, 797.0], [82.1, 801.0], [82.2, 803.0], [82.3, 806.0], [82.4, 809.0], [82.5, 817.0], [82.6, 824.0], [82.7, 839.0], [82.8, 847.0], [82.9, 849.0], [83.0, 850.0], [83.1, 851.0], [83.2, 852.0], [83.3, 856.0], [83.4, 870.0], [83.5, 872.0], [83.6, 878.0], [83.7, 882.0], [83.8, 883.0], [83.9, 884.0], [84.0, 885.0], [84.1, 886.0], [84.2, 890.0], [84.3, 892.0], [84.4, 895.0], [84.5, 899.0], [84.6, 908.0], [84.7, 915.0], [84.8, 926.0], [84.9, 929.0], [85.0, 936.0], [85.1, 939.0], [85.2, 959.0], [85.3, 963.0], [85.4, 966.0], [85.5, 968.0], [85.6, 969.0], [85.7, 970.0], [85.8, 971.0], [85.9, 971.0], [86.0, 972.0], [86.1, 972.0], [86.2, 973.0], [86.3, 973.0], [86.4, 974.0], [86.5, 974.0], [86.6, 975.0], [86.7, 977.0], [86.8, 983.0], [86.9, 996.0], [87.0, 1017.0], [87.1, 1035.0], [87.2, 1047.0], [87.3, 1052.0], [87.4, 1056.0], [87.5, 1061.0], [87.6, 1063.0], [87.7, 1068.0], [87.8, 1070.0], [87.9, 1073.0], [88.0, 1075.0], [88.1, 1076.0], [88.2, 1078.0], [88.3, 1079.0], [88.4, 1080.0], [88.5, 1082.0], [88.6, 1083.0], [88.7, 1085.0], [88.8, 1088.0], [88.9, 1091.0], [89.0, 1098.0], [89.1, 1107.0], [89.2, 1112.0], [89.3, 1114.0], [89.4, 1117.0], [89.5, 1122.0], [89.6, 1133.0], [89.7, 1139.0], [89.8, 1144.0], [89.9, 1145.0], [90.0, 1147.0], [90.1, 1150.0], [90.2, 1151.0], [90.3, 1153.0], [90.4, 1154.0], [90.5, 1166.0], [90.6, 1170.0], [90.7, 1181.0], [90.8, 1188.0], [90.9, 1193.0], [91.0, 1196.0], [91.1, 1198.0], [91.2, 1200.0], [91.3, 1204.0], [91.4, 1207.0], [91.5, 1254.0], [91.6, 1275.0], [91.7, 1289.0], [91.8, 1298.0], [91.9, 1343.0], [92.0, 1419.0], [92.1, 1526.0], [92.2, 1646.0], [92.3, 1691.0], [92.4, 1929.0], [92.5, 2114.0], [92.6, 2837.0], [92.7, 3224.0], [92.8, 3615.0], [92.9, 3905.0], [93.0, 4390.0], [93.1, 4895.0], [93.2, 5256.0], [93.3, 5372.0], [93.4, 5521.0], [93.5, 5666.0], [93.6, 6078.0], [93.7, 6090.0], [93.8, 6215.0], [93.9, 6283.0], [94.0, 6571.0], [94.1, 6748.0], [94.2, 6869.0], [94.3, 7056.0], [94.4, 7232.0], [94.5, 7399.0], [94.6, 7599.0], [94.7, 7688.0], [94.8, 7768.0], [94.9, 7898.0], [95.0, 8018.0], [95.1, 8173.0], [95.2, 8466.0], [95.3, 8563.0], [95.4, 8775.0], [95.5, 8858.0], [95.6, 8989.0], [95.7, 9145.0], [95.8, 9320.0], [95.9, 9699.0], [96.0, 10001.0], [96.1, 10177.0], [96.2, 10669.0], [96.3, 11205.0], [96.4, 11394.0], [96.5, 11425.0], [96.6, 11488.0], [96.7, 11626.0], [96.8, 11973.0], [96.9, 12165.0], [97.0, 12429.0], [97.1, 12940.0], [97.2, 13390.0], [97.3, 13399.0], [97.4, 13483.0], [97.5, 14242.0], [97.6, 15107.0], [97.7, 15646.0], [97.8, 16388.0], [97.9, 16612.0], [98.0, 17049.0], [98.1, 17263.0], [98.2, 18554.0], [98.3, 20974.0], [98.4, 24257.0], [98.5, 26053.0], [98.6, 31392.0], [98.7, 35580.0], [98.8, 41408.0], [98.9, 48285.0], [99.0, 56128.0], [99.1, 63711.0], [99.2, 70970.0], [99.3, 80369.0], [99.4, 99726.0], [99.5, 100851.0], [99.6, 103348.0], [99.7, 129034.0], [99.8, 130863.0], [99.9, 138516.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 50516.0, "series": [{"data": [[0.0, 39092.0], [141600.0, 7.0], [148000.0, 12.0], [132900.0, 13.0], [145700.0, 22.0], [66700.0, 1.0], [73100.0, 7.0], [69900.0, 1.0], [79500.0, 1.0], [82700.0, 1.0], [130700.0, 20.0], [127500.0, 15.0], [149800.0, 6.0], [100.0, 31662.0], [34500.0, 1.0], [134700.0, 5.0], [32900.0, 21.0], [36100.0, 16.0], [40900.0, 1.0], [39300.0, 1.0], [45700.0, 3.0], [47300.0, 3.0], [50500.0, 2.0], [200.0, 34057.0], [55300.0, 14.0], [230700.0, 7.0], [63300.0, 29.0], [64900.0, 9.0], [65800.0, 2.0], [69000.0, 2.0], [72200.0, 2.0], [300.0, 19344.0], [75400.0, 1.0], [88200.0, 10.0], [400.0, 38500.0], [126600.0, 2.0], [500.0, 50516.0], [129800.0, 27.0], [600.0, 18526.0], [700.0, 14557.0], [800.0, 7256.0], [215600.0, 3.0], [900.0, 7218.0], [1000.0, 6293.0], [1100.0, 6550.0], [1200.0, 1883.0], [1300.0, 363.0], [1400.0, 477.0], [1500.0, 116.0], [1600.0, 512.0], [1700.0, 100.0], [1800.0, 125.0], [1900.0, 159.0], [2000.0, 171.0], [2100.0, 68.0], [2200.0, 32.0], [2300.0, 25.0], [149300.0, 1.0], [2400.0, 51.0], [2500.0, 13.0], [2600.0, 71.0], [2800.0, 78.0], [2700.0, 31.0], [2900.0, 164.0], [3000.0, 34.0], [3100.0, 50.0], [3200.0, 57.0], [3300.0, 80.0], [3400.0, 101.0], [3500.0, 61.0], [3600.0, 65.0], [3700.0, 62.0], [3800.0, 164.0], [3900.0, 61.0], [4000.0, 22.0], [4200.0, 81.0], [68100.0, 15.0], [4600.0, 87.0], [4400.0, 18.0], [4800.0, 126.0], [77700.0, 1.0], [5000.0, 45.0], [5200.0, 242.0], [84100.0, 7.0], [5400.0, 115.0], [5600.0, 123.0], [5800.0, 91.0], [93700.0, 1.0], [90500.0, 1.0], [6000.0, 512.0], [6200.0, 426.0], [100100.0, 96.0], [6400.0, 88.0], [6600.0, 91.0], [103300.0, 90.0], [6800.0, 314.0], [7000.0, 250.0], [7200.0, 185.0], [7400.0, 152.0], [7600.0, 338.0], [7800.0, 227.0], [8000.0, 303.0], [8400.0, 275.0], [8800.0, 221.0], [9200.0, 81.0], [9600.0, 51.0], [10000.0, 158.0], [10400.0, 15.0], [10800.0, 37.0], [11200.0, 120.0], [11600.0, 116.0], [12000.0, 60.0], [12400.0, 31.0], [12800.0, 45.0], [13200.0, 47.0], [13600.0, 10.0], [14000.0, 53.0], [14400.0, 13.0], [14800.0, 39.0], [15200.0, 32.0], [15600.0, 71.0], [16000.0, 18.0], [16800.0, 29.0], [17600.0, 9.0], [19200.0, 5.0], [20000.0, 32.0], [20800.0, 1.0], [21600.0, 2.0], [23200.0, 2.0], [24000.0, 8.0], [24800.0, 5.0], [25600.0, 72.0], [26400.0, 2.0], [27200.0, 38.0], [29600.0, 2.0], [30400.0, 1.0], [31200.0, 8.0], [138300.0, 7.0], [35200.0, 2.0], [36800.0, 34.0], [40000.0, 1.0], [41600.0, 1.0], [43200.0, 6.0], [44800.0, 1.0], [48000.0, 21.0], [49600.0, 1.0], [51200.0, 3.0], [54400.0, 2.0], [56000.0, 21.0], [59200.0, 1.0], [62400.0, 10.0], [67200.0, 3.0], [73600.0, 20.0], [76800.0, 1.0], [86400.0, 2.0], [92800.0, 4.0], [99200.0, 4.0], [105600.0, 4.0], [128000.0, 62.0], [140800.0, 1.0], [138500.0, 12.0], [67100.0, 2.0], [73500.0, 6.0], [70300.0, 3.0], [76700.0, 2.0], [79900.0, 1.0], [83100.0, 2.0], [105500.0, 2.0], [127900.0, 11.0], [33100.0, 42.0], [36300.0, 1.0], [37900.0, 1.0], [42700.0, 2.0], [44300.0, 4.0], [49100.0, 4.0], [53900.0, 2.0], [60300.0, 43.0], [61900.0, 2.0], [63500.0, 2.0], [65100.0, 7.0], [69400.0, 4.0], [66200.0, 1.0], [72600.0, 1.0], [79000.0, 17.0], [82200.0, 1.0], [85400.0, 1.0], [88600.0, 2.0], [95000.0, 5.0], [98200.0, 1.0], [101400.0, 23.0], [114200.0, 3.0], [130200.0, 52.0], [131600.0, 13.0], [144400.0, 1.0], [142100.0, 19.0], [71700.0, 2.0], [74900.0, 4.0], [78100.0, 1.0], [84500.0, 1.0], [94100.0, 1.0], [100500.0, 12.0], [129300.0, 1.0], [133400.0, 8.0], [16900.0, 77.0], [17700.0, 49.0], [18500.0, 5.0], [19300.0, 10.0], [20100.0, 11.0], [20900.0, 77.0], [21700.0, 1.0], [23300.0, 1.0], [24100.0, 4.0], [24900.0, 1.0], [25700.0, 34.0], [27300.0, 2.0], [28100.0, 9.0], [28900.0, 7.0], [31300.0, 38.0], [32100.0, 10.0], [35400.0, 4.0], [37000.0, 3.0], [40200.0, 2.0], [41800.0, 1.0], [43400.0, 5.0], [46600.0, 10.0], [48200.0, 25.0], [51400.0, 3.0], [56200.0, 16.0], [64200.0, 3.0], [67600.0, 1.0], [74000.0, 3.0], [90000.0, 1.0], [93200.0, 1.0], [128400.0, 12.0], [143200.0, 5.0], [149600.0, 5.0], [230500.0, 2.0], [67500.0, 14.0], [70700.0, 5.0], [73900.0, 4.0], [80300.0, 48.0], [83500.0, 2.0], [93100.0, 2.0], [96300.0, 5.0], [102700.0, 1.0], [115500.0, 1.0], [128300.0, 3.0], [33300.0, 6.0], [136300.0, 3.0], [34900.0, 2.0], [36500.0, 2.0], [38100.0, 7.0], [39700.0, 2.0], [41300.0, 2.0], [42900.0, 9.0], [44500.0, 3.0], [46100.0, 1.0], [49300.0, 1.0], [52500.0, 3.0], [54100.0, 4.0], [55700.0, 2.0], [63700.0, 25.0], [66600.0, 2.0], [73000.0, 20.0], [69800.0, 1.0], [76200.0, 1.0], [82600.0, 3.0], [89000.0, 5.0], [92200.0, 2.0], [98600.0, 2.0], [130600.0, 6.0], [249200.0, 1.0], [131700.0, 59.0], [65700.0, 2.0], [68900.0, 2.0], [75300.0, 1.0], [88100.0, 1.0], [91300.0, 1.0], [94500.0, 1.0], [97700.0, 1.0], [100900.0, 3.0], [104100.0, 5.0], [107300.0, 2.0], [129700.0, 1.0], [8500.0, 213.0], [8900.0, 141.0], [142200.0, 1.0], [9700.0, 93.0], [9300.0, 165.0], [10100.0, 203.0], [10500.0, 38.0], [10900.0, 21.0], [11300.0, 226.0], [11700.0, 58.0], [12100.0, 78.0], [12500.0, 43.0], [13300.0, 432.0], [12900.0, 192.0], [13700.0, 17.0], [14100.0, 37.0], [14500.0, 17.0], [15300.0, 65.0], [14900.0, 49.0], [15700.0, 155.0], [16100.0, 15.0], [17000.0, 100.0], [17800.0, 22.0], [19400.0, 4.0], [20200.0, 3.0], [21000.0, 20.0], [22600.0, 6.0], [23400.0, 2.0], [24200.0, 42.0], [25000.0, 17.0], [25800.0, 71.0], [26600.0, 21.0], [27400.0, 12.0], [28200.0, 1.0], [29000.0, 1.0], [29800.0, 3.0], [31400.0, 43.0], [32200.0, 2.0], [133500.0, 5.0], [34000.0, 13.0], [35600.0, 11.0], [37200.0, 6.0], [40400.0, 7.0], [42000.0, 26.0], [43600.0, 7.0], [46800.0, 13.0], [45200.0, 3.0], [48400.0, 12.0], [50000.0, 8.0], [53200.0, 3.0], [54800.0, 4.0], [56400.0, 3.0], [61200.0, 1.0], [64400.0, 46.0], [68000.0, 7.0], [71200.0, 5.0], [77600.0, 2.0], [74400.0, 2.0], [80800.0, 2.0], [84000.0, 7.0], [100000.0, 38.0], [128800.0, 2.0], [146500.0, 1.0], [67900.0, 1.0], [74300.0, 2.0], [80700.0, 1.0], [83900.0, 2.0], [93500.0, 6.0], [96700.0, 1.0], [103100.0, 7.0], [128700.0, 51.0], [33500.0, 10.0], [135500.0, 1.0], [35100.0, 7.0], [141900.0, 20.0], [36700.0, 15.0], [38300.0, 31.0], [41500.0, 1.0], [43100.0, 9.0], [44700.0, 2.0], [46300.0, 5.0], [51100.0, 2.0], [49500.0, 2.0], [52700.0, 1.0], [54300.0, 3.0], [59100.0, 1.0], [60700.0, 2.0], [62300.0, 16.0], [63900.0, 7.0], [65500.0, 6.0], [70200.0, 2.0], [73400.0, 2.0], [76600.0, 1.0], [79800.0, 3.0], [83000.0, 2.0], [89400.0, 4.0], [127800.0, 13.0], [131000.0, 5.0], [133200.0, 41.0], [66100.0, 4.0], [69300.0, 1.0], [72500.0, 4.0], [75700.0, 1.0], [78900.0, 1.0], [82100.0, 8.0], [101300.0, 1.0], [114100.0, 1.0], [130100.0, 8.0], [17100.0, 151.0], [17900.0, 4.0], [18700.0, 27.0], [19500.0, 55.0], [20300.0, 11.0], [21100.0, 21.0], [21900.0, 3.0], [22700.0, 8.0], [25100.0, 1.0], [25900.0, 45.0], [26700.0, 6.0], [27500.0, 1.0], [28300.0, 2.0], [29100.0, 22.0], [30700.0, 5.0], [32300.0, 2.0], [34200.0, 2.0], [35800.0, 12.0], [42200.0, 9.0], [47000.0, 1.0], [48600.0, 2.0], [50200.0, 10.0], [51800.0, 6.0], [53400.0, 2.0], [58200.0, 2.0], [64600.0, 4.0], [74800.0, 3.0], [81200.0, 1.0], [87600.0, 7.0], [97200.0, 2.0], [100400.0, 34.0], [138400.0, 18.0], [144800.0, 1.0], [74700.0, 4.0], [81100.0, 5.0], [77900.0, 1.0], [84300.0, 1.0], [87500.0, 3.0], [100300.0, 39.0], [129100.0, 5.0], [140200.0, 1.0], [35300.0, 2.0], [36900.0, 4.0], [38500.0, 2.0], [40100.0, 3.0], [41700.0, 1.0], [43300.0, 5.0], [44900.0, 7.0], [51300.0, 2.0], [52900.0, 1.0], [56100.0, 64.0], [57700.0, 1.0], [59300.0, 1.0], [64100.0, 34.0], [67400.0, 13.0], [80200.0, 3.0], [93000.0, 10.0], [96200.0, 2.0], [105800.0, 1.0], [109000.0, 1.0], [128200.0, 8.0], [142000.0, 17.0], [133300.0, 14.0], [4100.0, 89.0], [4300.0, 65.0], [72900.0, 1.0], [4500.0, 39.0], [4700.0, 41.0], [76100.0, 2.0], [4900.0, 156.0], [5100.0, 32.0], [82500.0, 23.0], [5300.0, 156.0], [85700.0, 3.0], [5500.0, 364.0], [88900.0, 2.0], [5700.0, 52.0], [92100.0, 1.0], [5900.0, 24.0], [6100.0, 62.0], [95300.0, 1.0], [6300.0, 146.0], [6500.0, 72.0], [6700.0, 250.0], [6900.0, 98.0], [108100.0, 2.0], [7100.0, 129.0], [7300.0, 185.0], [7500.0, 128.0], [120900.0, 1.0], [7700.0, 347.0], [7900.0, 219.0], [8100.0, 145.0], [8600.0, 136.0], [8200.0, 53.0], [9000.0, 148.0], [9400.0, 109.0], [9800.0, 93.0], [10200.0, 117.0], [10600.0, 89.0], [169400.0, 2.0], [11000.0, 15.0], [11400.0, 569.0], [12200.0, 142.0], [11800.0, 154.0], [12600.0, 13.0], [13000.0, 35.0], [13400.0, 416.0], [13800.0, 14.0], [14200.0, 35.0], [14600.0, 37.0], [15000.0, 69.0], [15800.0, 31.0], [15400.0, 44.0], [16200.0, 1.0], [17200.0, 162.0], [16400.0, 172.0], [18000.0, 63.0], [18800.0, 1.0], [19600.0, 13.0], [20400.0, 13.0], [21200.0, 7.0], [22000.0, 8.0], [22800.0, 14.0], [24400.0, 2.0], [23600.0, 2.0], [25200.0, 7.0], [26000.0, 6.0], [26800.0, 2.0], [27600.0, 2.0], [30000.0, 6.0], [30800.0, 55.0], [32400.0, 11.0], [32800.0, 3.0], [141500.0, 1.0], [147900.0, 8.0], [39200.0, 3.0], [42400.0, 1.0], [45600.0, 1.0], [47200.0, 4.0], [48800.0, 2.0], [50400.0, 3.0], [55200.0, 1.0], [60000.0, 2.0], [63200.0, 35.0], [64800.0, 9.0], [65600.0, 5.0], [68800.0, 1.0], [72000.0, 2.0], [75200.0, 1.0], [78400.0, 2.0], [91200.0, 1.0], [97600.0, 2.0], [100800.0, 8.0], [131200.0, 1.0], [135300.0, 13.0], [141700.0, 9.0], [81500.0, 2.0], [78300.0, 3.0], [87900.0, 1.0], [91100.0, 1.0], [94300.0, 2.0], [103900.0, 1.0], [113500.0, 1.0], [129500.0, 2.0], [133000.0, 7.0], [145800.0, 47.0], [137100.0, 7.0], [33900.0, 37.0], [35500.0, 29.0], [37100.0, 3.0], [40300.0, 25.0], [41900.0, 19.0], [43500.0, 1.0], [45100.0, 7.0], [46700.0, 4.0], [48300.0, 62.0], [51500.0, 3.0], [62700.0, 5.0], [67800.0, 1.0], [77400.0, 1.0], [80600.0, 2.0], [83800.0, 4.0], [87000.0, 3.0], [96600.0, 1.0], [103000.0, 3.0], [134800.0, 1.0], [170900.0, 3.0], [66900.0, 1.0], [73300.0, 3.0], [79700.0, 4.0], [82900.0, 1.0], [86100.0, 3.0], [111700.0, 1.0], [127700.0, 10.0], [130900.0, 9.0], [16500.0, 47.0], [17300.0, 62.0], [18100.0, 8.0], [18900.0, 18.0], [19700.0, 1.0], [21300.0, 24.0], [20500.0, 12.0], [22100.0, 18.0], [22900.0, 1.0], [24500.0, 7.0], [23700.0, 5.0], [26100.0, 3.0], [27700.0, 4.0], [30100.0, 12.0], [30900.0, 2.0], [32500.0, 1.0], [34600.0, 3.0], [33000.0, 5.0], [36200.0, 28.0], [37800.0, 6.0], [41000.0, 4.0], [42600.0, 6.0], [44200.0, 5.0], [45800.0, 1.0], [49000.0, 6.0], [50600.0, 1.0], [52200.0, 2.0], [53800.0, 24.0], [55400.0, 15.0], [63400.0, 1.0], [65000.0, 1.0], [69200.0, 2.0], [72400.0, 11.0], [98000.0, 1.0], [94800.0, 2.0], [101200.0, 133.0], [107600.0, 18.0], [130000.0, 1.0], [133600.0, 4.0], [131300.0, 2.0], [69100.0, 2.0], [65900.0, 2.0], [72300.0, 24.0], [78700.0, 2.0], [81900.0, 2.0], [88300.0, 1.0], [91500.0, 1.0], [101100.0, 8.0], [107500.0, 1.0], [129900.0, 35.0], [135400.0, 10.0], [141800.0, 22.0], [34100.0, 3.0], [133100.0, 28.0], [145900.0, 2.0], [38900.0, 11.0], [37300.0, 2.0], [42100.0, 8.0], [165100.0, 6.0], [43700.0, 3.0], [45300.0, 13.0], [50100.0, 4.0], [51700.0, 2.0], [53300.0, 2.0], [61300.0, 1.0], [62900.0, 2.0], [64500.0, 1.0], [68200.0, 3.0], [81000.0, 1.0], [84200.0, 1.0], [90600.0, 2.0], [97000.0, 1.0], [100200.0, 75.0], [103400.0, 3.0], [129000.0, 24.0], [137200.0, 2.0], [67300.0, 4.0], [70500.0, 1.0], [76900.0, 1.0], [80100.0, 2.0], [92900.0, 8.0], [96100.0, 3.0], [128100.0, 4.0], [8700.0, 352.0], [8300.0, 45.0], [132600.0, 1.0], [9100.0, 303.0], [9500.0, 29.0], [9900.0, 104.0], [10300.0, 30.0], [10700.0, 112.0], [11100.0, 67.0], [11500.0, 196.0], [11900.0, 251.0], [12700.0, 30.0], [12300.0, 129.0], [13100.0, 54.0], [13500.0, 10.0], [13900.0, 22.0], [14300.0, 4.0], [14700.0, 17.0], [15100.0, 125.0], [15500.0, 35.0], [16300.0, 85.0], [15900.0, 29.0], [16600.0, 91.0], [17400.0, 16.0], [18200.0, 1.0], [19000.0, 3.0], [19800.0, 5.0], [20600.0, 32.0], [21400.0, 8.0], [22200.0, 2.0], [23000.0, 3.0], [23800.0, 5.0], [27800.0, 3.0], [28600.0, 12.0], [30200.0, 2.0], [31800.0, 23.0], [33200.0, 14.0], [143100.0, 5.0], [36400.0, 2.0], [38000.0, 3.0], [149500.0, 4.0], [39600.0, 1.0], [42800.0, 1.0], [41200.0, 1.0], [44400.0, 1.0], [47600.0, 1.0], [50800.0, 2.0], [52400.0, 2.0], [219900.0, 2.0], [54000.0, 1.0], [60400.0, 16.0], [62000.0, 1.0], [63600.0, 13.0], [65200.0, 2.0], [69600.0, 18.0], [72800.0, 2.0], [79200.0, 2.0], [82400.0, 25.0], [85600.0, 2.0], [92000.0, 1.0], [101600.0, 4.0], [104800.0, 1.0], [124000.0, 4.0], [127200.0, 1.0], [132800.0, 4.0], [164800.0, 2.0], [149700.0, 3.0], [66300.0, 2.0], [72700.0, 4.0], [79100.0, 1.0], [82300.0, 3.0], [88700.0, 1.0], [98300.0, 1.0], [101500.0, 39.0], [107900.0, 4.0], [114300.0, 9.0], [130300.0, 83.0], [230600.0, 32.0], [34300.0, 3.0], [35900.0, 2.0], [39100.0, 3.0], [40700.0, 2.0], [42300.0, 3.0], [47100.0, 20.0], [45500.0, 4.0], [48700.0, 6.0], [50300.0, 1.0], [53500.0, 2.0], [55100.0, 2.0], [215500.0, 3.0], [56700.0, 2.0], [63100.0, 10.0], [61500.0, 2.0], [64700.0, 8.0], [71800.0, 1.0], [75000.0, 1.0], [81400.0, 3.0], [87800.0, 3.0], [94200.0, 2.0], [97400.0, 2.0], [107000.0, 8.0], [116600.0, 1.0], [136400.0, 2.0], [149200.0, 1.0], [140500.0, 1.0], [67700.0, 1.0], [70900.0, 4.0], [74100.0, 1.0], [77300.0, 5.0], [83700.0, 8.0], [86900.0, 1.0], [90100.0, 1.0], [99700.0, 1.0], [118900.0, 1.0], [128500.0, 6.0], [131800.0, 8.0], [16700.0, 47.0], [18300.0, 5.0], [17500.0, 4.0], [19100.0, 7.0], [19900.0, 1.0], [20700.0, 5.0], [21500.0, 36.0], [23100.0, 20.0], [23900.0, 4.0], [24700.0, 3.0], [25500.0, 3.0], [26300.0, 4.0], [27900.0, 1.0], [29500.0, 1.0], [28700.0, 7.0], [31100.0, 6.0], [32700.0, 2.0], [33400.0, 6.0], [35000.0, 5.0], [36600.0, 5.0], [38200.0, 5.0], [155100.0, 4.0], [39800.0, 10.0], [43000.0, 2.0], [41400.0, 18.0], [167900.0, 1.0], [46200.0, 3.0], [49400.0, 8.0], [51000.0, 1.0], [52600.0, 1.0], [54200.0, 3.0], [55800.0, 1.0], [57400.0, 2.0], [59000.0, 2.0], [62200.0, 2.0], [65400.0, 15.0], [66800.0, 12.0], [73200.0, 76.0], [86000.0, 2.0], [95600.0, 3.0], [130800.0, 50.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 249200.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 902.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 163278.0, "series": [{"data": [[0.0, 163278.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 113017.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 22803.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 902.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 6.545454545454545, "minX": 1.68286326E12, "maxY": 3000.0, "series": [{"data": [[1.6828635E12, 3000.0], [1.68286332E12, 3000.0], [1.68286362E12, 27.096774193548388], [1.68286344E12, 3000.0], [1.68286326E12, 3000.0], [1.68286356E12, 2889.9461947121285], [1.68286338E12, 3000.0], [1.68286368E12, 6.545454545454545]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68286368E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 530.0, "minX": 3.0, "maxY": 111722.0, "series": [{"data": [[3.0, 109841.66666666667], [4.0, 100291.0], [5.0, 111722.0], [6.0, 96159.0], [7.0, 93560.0], [8.0, 89433.0], [11.0, 89430.33333333333], [12.0, 103902.0], [13.0, 107534.0], [14.0, 87999.0], [15.0, 86483.0], [16.0, 100262.0], [17.0, 86080.0], [18.0, 86077.0], [19.0, 100513.0], [20.0, 100513.0], [21.0, 100540.0], [22.0, 101399.0], [23.0, 109048.0], [24.0, 88729.0], [25.0, 102795.0], [27.0, 100725.5], [28.0, 100526.0], [29.0, 78411.0], [30.0, 76692.0], [31.0, 73613.0], [33.0, 75736.0], [32.0, 76249.0], [35.0, 74827.0], [34.0, 74828.0], [37.0, 65274.0], [36.0, 73184.0], [38.0, 65190.0], [40.0, 65682.5], [43.0, 51217.0], [42.0, 64692.0], [45.0, 64193.5], [46.0, 64160.0], [49.0, 64161.0], [48.0, 64205.0], [50.0, 64157.0], [53.0, 64177.0], [52.0, 64174.5], [55.0, 64176.0], [54.0, 64155.0], [57.0, 64152.0], [56.0, 64152.0], [59.0, 64168.5], [61.0, 64179.5], [62.0, 64181.0], [67.0, 64179.0], [66.0, 64180.5], [64.0, 64180.5], [71.0, 64179.0], [70.0, 64179.0], [69.0, 64180.5], [75.0, 64177.5], [73.0, 64178.0], [79.0, 64167.0], [78.0, 64168.0], [77.0, 64173.0], [76.0, 64175.0], [82.0, 64720.0], [81.0, 64724.0], [86.0, 34080.333333333336], [84.0, 34080.0], [91.0, 34080.5], [90.0, 34079.0], [89.0, 34080.0], [88.0, 24108.0], [95.0, 34077.0], [94.0, 37311.0], [93.0, 17759.0], [92.0, 34080.0], [98.0, 34074.0], [97.0, 17755.0], [96.0, 17756.0], [103.0, 17750.0], [102.0, 17751.0], [101.0, 17753.0], [100.0, 27529.0], [106.0, 17749.0], [105.0, 17751.0], [110.0, 25909.5], [108.0, 17750.666666666668], [115.0, 17747.0], [114.0, 17748.5], [113.0, 17750.0], [112.0, 17749.0], [119.0, 17739.0], [117.0, 17748.0], [123.0, 17731.0], [121.0, 17732.0], [120.0, 17738.0], [127.0, 17715.0], [125.0, 17715.0], [124.0, 17717.0], [135.0, 17222.0], [133.0, 17222.5], [131.0, 17226.0], [130.0, 17226.0], [129.0, 17228.0], [128.0, 17709.0], [143.0, 18074.0], [142.0, 23158.666666666668], [139.0, 23160.0], [136.0, 18072.0], [149.0, 25400.0], [148.0, 25977.0], [147.0, 23159.0], [144.0, 24653.666666666668], [159.0, 25069.666666666668], [157.0, 25399.0], [156.0, 33989.0], [154.0, 31280.5], [165.0, 33983.0], [164.0, 33986.0], [163.0, 23153.0], [162.0, 18070.0], [161.0, 33988.0], [160.0, 18068.0], [175.0, 26021.0], [174.0, 28565.5], [171.0, 26022.5], [170.0, 33984.0], [168.0, 26762.666666666668], [181.0, 30365.333333333332], [176.0, 16801.0], [191.0, 23140.0], [190.0, 33975.0], [189.0, 33973.0], [187.0, 33975.5], [186.0, 27356.2], [199.0, 33922.0], [198.0, 33929.0], [196.0, 33929.0], [194.0, 33973.0], [192.0, 23140.5], [206.0, 33401.0], [205.0, 33403.0], [204.0, 33401.0], [202.0, 33918.5], [201.0, 33921.0], [214.0, 16924.0], [213.0, 17032.0], [212.0, 16978.0], [209.0, 33397.5], [208.0, 33397.0], [223.0, 16921.0], [222.0, 23994.333333333332], [220.0, 17027.0], [218.0, 16974.75], [216.0, 17028.0], [231.0, 16914.0], [230.0, 16916.0], [229.0, 19514.5], [227.0, 16920.0], [226.0, 19517.5], [224.0, 22115.0], [238.0, 17012.0], [236.0, 17010.0], [235.0, 19506.0], [233.0, 22105.0], [232.0, 15758.0], [247.0, 17006.0], [246.0, 16903.0], [245.0, 16903.0], [243.0, 22100.0], [242.0, 17009.5], [240.0, 19504.0], [255.0, 16990.0], [253.0, 22084.0], [252.0, 18657.666666666668], [249.0, 17006.0], [248.0, 16902.0], [259.0, 16425.0], [271.0, 15957.5], [269.0, 18553.0], [267.0, 15470.0], [266.0, 21099.333333333332], [264.0, 21100.0], [263.0, 17707.0], [256.0, 16992.0], [258.0, 16887.0], [257.0, 16992.0], [286.0, 21087.0], [287.0, 21086.0], [285.0, 15998.0], [275.0, 15954.5], [273.0, 16006.0], [272.0, 16007.0], [283.0, 21087.0], [281.0, 21087.0], [280.0, 21091.0], [279.0, 21092.0], [278.0, 15899.0], [277.0, 15899.0], [276.0, 16006.0], [301.0, 15042.0], [302.0, 15007.333333333334], [300.0, 20132.0], [297.0, 18517.0], [295.0, 18479.0], [294.0, 21074.5], [293.0, 21076.0], [290.0, 15940.0], [288.0, 21086.0], [318.0, 14496.0], [319.0, 15036.0], [317.0, 14986.0], [315.0, 15039.0], [313.0, 16177.5], [310.0, 14934.0], [308.0, 14989.0], [306.0, 14971.0], [305.0, 15043.0], [334.0, 35162.0], [335.0, 15024.0], [333.0, 15024.0], [332.0, 15024.0], [331.0, 15029.0], [329.0, 14925.0], [328.0, 14926.0], [327.0, 20122.0], [320.0, 15037.0], [323.0, 15036.0], [321.0, 14930.0], [326.0, 14964.0], [324.0, 15035.0], [350.0, 15002.0], [351.0, 15003.0], [349.0, 13743.0], [348.0, 14898.0], [347.0, 13743.0], [346.0, 14953.5], [344.0, 20097.0], [343.0, 15009.0], [336.0, 15020.0], [339.0, 14911.0], [338.0, 15019.0], [342.0, 15011.0], [341.0, 15011.0], [340.0, 15014.0], [364.0, 14982.0], [366.0, 14977.0], [367.0, 14977.0], [365.0, 35116.0], [362.0, 14980.0], [361.0, 14353.0], [359.0, 14987.0], [355.0, 25071.0], [353.0, 15001.0], [358.0, 25055.0], [356.0, 35139.0], [381.0, 13215.0], [383.0, 12721.0], [380.0, 14477.0], [371.0, 14945.0], [370.0, 13684.0], [369.0, 13702.0], [368.0, 14968.0], [379.0, 14478.0], [378.0, 14480.0], [377.0, 14482.0], [375.0, 13220.0], [373.0, 13681.0], [372.0, 14946.0], [398.0, 13978.0], [399.0, 12716.0], [397.0, 12717.0], [394.0, 12718.0], [393.0, 12718.0], [392.0, 12719.333333333334], [390.0, 12720.0], [388.0, 12721.0], [387.0, 13351.5], [386.0, 12720.0], [385.0, 13981.0], [384.0, 13983.0], [403.0, 23413.5], [414.0, 23398.0], [415.0, 12697.0], [412.0, 12698.0], [411.0, 13962.0], [410.0, 13547.0], [407.0, 24037.5], [405.0, 12712.0], [404.0, 12715.0], [402.0, 12716.0], [400.0, 13977.0], [431.0, 11803.0], [430.0, 22863.0], [429.0, 11801.0], [426.0, 12055.6], [424.0, 11804.0], [420.0, 12205.5], [418.0, 12211.0], [416.0, 13949.0], [445.0, 33200.0], [444.0, 11799.0], [443.0, 36237.0], [442.0, 11801.0], [441.0, 33203.0], [438.0, 11800.0], [437.0, 13060.0], [436.0, 11802.0], [435.0, 13062.0], [433.0, 11803.0], [451.0, 11795.0], [462.0, 11779.5], [463.0, 11779.0], [460.0, 11781.0], [459.0, 18917.666666666668], [458.0, 11786.0], [455.0, 11789.0], [454.0, 11790.5], [452.0, 13055.0], [450.0, 11796.0], [448.0, 11797.333333333334], [477.0, 33168.0], [479.0, 11766.0], [476.0, 13029.0], [475.0, 11768.0], [474.0, 22832.5], [473.0, 11773.0], [471.0, 12135.0], [470.0, 19148.666666666668], [466.0, 22477.5], [464.0, 18128.0], [493.0, 48797.0], [495.0, 40971.5], [492.0, 18100.0], [483.0, 13019.0], [481.0, 12390.5], [491.0, 12472.0], [490.0, 11755.0], [489.0, 13013.0], [488.0, 14930.5], [486.0, 13018.0], [485.0, 11757.0], [484.0, 11758.0], [499.0, 12464.0], [511.0, 23955.5], [509.0, 24533.0], [507.0, 26006.0], [504.0, 13001.0], [503.0, 13002.0], [502.0, 20993.666666666668], [498.0, 36180.0], [497.0, 18096.0], [496.0, 18097.0], [538.0, 18047.0], [531.0, 25577.0], [540.0, 24545.5], [541.0, 12946.0], [529.0, 18059.0], [528.0, 23039.0], [539.0, 40921.0], [537.0, 11698.0], [519.0, 23048.5], [517.0, 22779.0], [515.0, 48781.0], [514.0, 33138.0], [513.0, 11737.0], [527.0, 12863.0], [525.0, 11711.0], [524.0, 12434.0], [523.0, 40937.0], [521.0, 22778.0], [535.0, 33100.0], [533.0, 33098.0], [532.0, 12958.0], [569.0, 25936.0], [574.0, 29192.0], [575.0, 9475.0], [560.0, 10546.0], [562.0, 29197.0], [561.0, 10546.0], [573.0, 9634.0], [572.0, 9585.0], [570.0, 8760.0], [559.0, 10545.0], [545.0, 16038.0], [544.0, 10567.5], [548.0, 10756.0], [547.0, 10567.0], [550.0, 46733.0], [549.0, 10947.0], [558.0, 10546.0], [557.0, 10549.0], [556.0, 10552.0], [555.0, 10940.0], [554.0, 46733.0], [553.0, 46731.0], [552.0, 28839.0], [567.0, 9637.0], [566.0, 19416.5], [565.0, 28310.0], [563.0, 29196.0], [595.0, 27500.0], [607.0, 27488.0], [605.0, 32146.0], [603.0, 41045.0], [601.0, 50071.5], [591.0, 25785.5], [577.0, 9771.5], [580.0, 9906.0], [579.0, 47947.0], [582.0, 9627.0], [581.0, 22682.0], [589.0, 29182.0], [588.0, 15202.0], [587.0, 29183.0], [585.0, 23799.333333333332], [599.0, 45372.0], [598.0, 45785.0], [597.0, 9754.5], [594.0, 45308.0], [592.0, 9625.0], [636.0, 45330.0], [628.0, 9582.0], [637.0, 49403.0], [624.0, 44268.0], [626.0, 9582.0], [625.0, 50042.0], [635.0, 50033.0], [634.0, 50033.0], [633.0, 29630.5], [615.0, 32192.0], [614.0, 49439.5], [612.0, 49440.0], [611.0, 9603.0], [610.0, 22750.0], [609.0, 9884.0], [623.0, 45345.0], [622.0, 9588.0], [621.0, 40727.0], [620.0, 32178.0], [619.0, 49430.0], [618.0, 45280.0], [617.0, 27444.0], [631.0, 40709.0], [630.0, 45749.0], [629.0, 9576.0], [658.0, 7600.0], [671.0, 44124.25], [668.0, 50221.0], [666.0, 50225.0], [665.0, 49141.0], [655.0, 25824.0], [640.0, 16631.0], [643.0, 9833.0], [642.0, 37204.5], [646.0, 44236.0], [644.0, 25855.0], [654.0, 43287.0], [653.0, 30187.0], [651.0, 49000.5], [649.0, 46640.25], [663.0, 28914.0], [661.0, 48056.0], [660.0, 42101.333333333336], [656.0, 30187.0], [696.0, 6666.0], [700.0, 48348.0], [703.0, 49542.0], [692.0, 45629.5], [690.0, 46589.333333333336], [702.0, 49481.0], [701.0, 47342.0], [699.0, 48393.0], [698.0, 6770.0], [697.0, 6665.0], [687.0, 50198.0], [674.0, 48048.0], [673.0, 28903.0], [677.0, 48046.5], [675.0, 48048.0], [679.0, 50213.0], [678.0, 48043.0], [686.0, 49116.0], [684.0, 48030.0], [683.0, 50208.0], [682.0, 49125.5], [680.0, 48041.0], [695.0, 48011.0], [693.0, 50185.0], [708.0, 51588.0], [707.0, 51590.0], [706.0, 52599.0], [705.0, 52646.0], [704.0, 49542.0], [1274.0, 781.4468085106382], [1272.0, 701.0], [1271.0, 702.0], [1270.0, 701.0], [1269.0, 701.6666666666666], [1267.0, 702.0], [1313.0, 740.0999999999999], [1321.0, 698.0], [1319.0, 699.0], [1311.0, 698.0], [1315.0, 698.0], [1310.0, 698.75], [1407.0, 689.9615384615386], [1398.0, 741.3846153846154], [1395.0, 692.0], [1393.0, 691.0], [1383.0, 693.0], [1466.0, 736.1666666666666], [1470.0, 675.0], [1469.0, 727.3461538461538], [1465.0, 702.2388059701497], [1464.0, 721.6048387096774], [1460.0, 2260.605263157894], [1426.0, 1408.0], [1409.0, 689.2], [1413.0, 690.0], [1410.0, 690.0], [1417.0, 690.0], [1416.0, 690.0], [1422.0, 1049.5], [1467.0, 857.0], [1468.0, 1096.6666666666667], [1463.0, 679.25], [1462.0, 679.0769230769231], [1461.0, 679.2121212121211], [1525.0, 935.9], [1531.0, 665.0], [1504.0, 670.0], [1507.0, 667.5], [1505.0, 668.0833333333334], [1509.0, 667.0], [1508.0, 668.0], [1524.0, 665.6666666666666], [1523.0, 846.0], [1522.0, 740.0], [1514.0, 668.0], [1513.0, 667.0], [1518.0, 732.3636363636364], [1519.0, 667.5], [1520.0, 751.0000000000001], [1503.0, 669.6129032258063], [1502.0, 740.1111111111112], [1500.0, 671.0], [1521.0, 712.864864864865], [1590.0, 533.0], [1578.0, 555.0], [1596.0, 532.0], [1571.0, 713.1250000000001], [1570.0, 556.0], [1587.0, 1274.0], [1586.0, 1034.6666666666667], [1566.0, 556.0], [1536.0, 1079.1], [1539.0, 1383.0], [1538.0, 1565.3333333333333], [1565.0, 556.0], [1564.0, 556.5], [1563.0, 556.3333333333334], [1562.0, 556.6666666666666], [1561.0, 556.0], [1560.0, 556.5], [1583.0, 555.0], [1582.0, 555.3333333333334], [1580.0, 555.0], [1575.0, 555.0], [1574.0, 556.0], [1624.0, 1181.0], [1626.0, 1164.5], [1605.0, 533.0], [1602.0, 532.1], [1608.0, 532.0], [1607.0, 532.5], [1623.0, 1180.0], [1622.0, 1251.0], [1621.0, 926.8], [1616.0, 531.5], [1615.0, 531.25], [1611.0, 531.0], [1610.0, 530.0], [1609.0, 532.5], [1910.0, 711.0], [1908.0, 1004.0], [1907.0, 51071.0], [2676.0, 4049.333333333333], [2680.0, 6119.0], [2642.0, 1437.2727272727273], [2644.0, 873.0], [2646.0, 1028.0279069767441], [2648.0, 1212.275229357798], [2650.0, 870.0], [2652.0, 3839.8000000000006], [2654.0, 2309.0588235294117], [2682.0, 5050.0], [2678.0, 1032.0], [2668.0, 16514.5], [2666.0, 868.0], [2664.0, 1022.0], [2660.0, 5427.0], [2658.0, 869.0], [2584.0, 883.5], [2582.0, 885.0], [2580.0, 883.75], [2578.0, 884.3333333333334], [2576.0, 883.9999999999999], [2574.0, 884.0], [2830.0, 4997.0], [3000.0, 2182.2982755314347], [2451.0, 725.0], [2681.0, 5047.0], [2683.0, 644.0], [2641.0, 1331.3555555555556], [2643.0, 2212.636363636364], [2645.0, 1612.862068965517], [2649.0, 2602.5454545454545], [2651.0, 2043.2063492063492], [2653.0, 3147.0], [2655.0, 5427.5], [2679.0, 925.0], [2677.0, 5424.0], [2673.0, 2743.0], [2671.0, 867.0], [2669.0, 869.0], [2665.0, 944.5], [2661.0, 3225.0], [2657.0, 1022.0], [2585.0, 882.0], [2583.0, 883.625], [2581.0, 884.0], [2579.0, 884.2307692307693], [2577.0, 883.7631578947369], [2575.0, 883.9285714285714], [2573.0, 885.7621359223303], [2843.0, 588.0], [2833.0, 2061.6666666666665], [2831.0, 592.0], [2825.0, 593.0], [2989.0, 586.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[2987.7060100000112, 2239.5329433332486]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 3000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 92.4, "minX": 1.68286326E12, "maxY": 972218.8666666667, "series": [{"data": [[1.6828635E12, 972218.8666666667], [1.68286332E12, 632113.7833333333], [1.68286362E12, 349.2], [1.68286344E12, 606958.7666666667], [1.68286326E12, 291972.15], [1.68286356E12, 386668.06666666665], [1.68286338E12, 716382.2], [1.68286368E12, 121.65]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.6828635E12, 681004.8], [1.68286332E12, 439664.4], [1.68286362E12, 260.4], [1.68286344E12, 419773.2], [1.68286326E12, 198559.2], [1.68286356E12, 271958.4], [1.68286338E12, 501110.4], [1.68286368E12, 92.4]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68286368E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 668.3332775009432, "minX": 1.68286326E12, "maxY": 98998.27272727274, "series": [{"data": [[1.6828635E12, 2345.822807277044], [1.68286332E12, 2150.3767881600847], [1.68286362E12, 85761.41935483867], [1.68286344E12, 2335.8916032359516], [1.68286326E12, 668.3332775009432], [1.68286356E12, 1565.7212750185272], [1.68286338E12, 3023.801387611819], [1.68286368E12, 98998.27272727274]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68286368E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 618.4421087894107, "minX": 1.68286326E12, "maxY": 98998.27272727274, "series": [{"data": [[1.6828635E12, 2315.4254548143676], [1.68286332E12, 2100.473881448779], [1.68286362E12, 85761.38709677421], [1.68286344E12, 2266.1799107320667], [1.68286326E12, 618.4421087894107], [1.68286356E12, 1565.7072522856524], [1.68286338E12, 2972.651141018145], [1.68286368E12, 98998.27272727274]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68286368E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 134.36694443281212, "minX": 1.68286326E12, "maxY": 2368.363636363637, "series": [{"data": [[1.6828635E12, 680.1348296603071], [1.68286332E12, 346.79167934865217], [1.68286362E12, 227.00000000000003], [1.68286344E12, 1004.787550312832], [1.68286326E12, 134.36694443281212], [1.68286356E12, 367.7659377316545], [1.68286338E12, 1318.1450806653866], [1.68286368E12, 2368.363636363637]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68286368E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 3.0, "minX": 1.68286326E12, "maxY": 249288.0, "series": [{"data": [[1.6828635E12, 249288.0], [1.68286332E12, 82615.0], [1.68286362E12, 109048.0], [1.68286344E12, 149861.0], [1.68286326E12, 23208.0], [1.68286356E12, 138329.0], [1.68286338E12, 143262.0], [1.68286368E12, 115583.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.6828635E12, 1198.0], [1.68286332E12, 53.0], [1.68286362E12, 103680.6], [1.68286344E12, 766.0], [1.68286326E12, 298.0], [1.68286356E12, 975.0], [1.68286338E12, 3327.9000000000015], [1.68286368E12, 114810.8]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.6828635E12, 21532.99], [1.68286332E12, 67412.99], [1.68286362E12, 109048.0], [1.68286344E12, 79807.99], [1.68286326E12, 13180.990000000002], [1.68286356E12, 36290.990000000005], [1.68286338E12, 133401.99], [1.68286368E12, 115583.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.6828635E12, 1208.0], [1.68286332E12, 10011.95], [1.68286362E12, 108139.59999999999], [1.68286344E12, 861.9500000000007], [1.68286326E12, 6267.950000000001], [1.68286356E12, 6872.9000000000015], [1.68286338E12, 8470.0], [1.68286368E12, 115583.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.6828635E12, 39.0], [1.68286332E12, 3.0], [1.68286362E12, 64692.0], [1.68286344E12, 26.0], [1.68286326E12, 5.0], [1.68286356E12, 22.0], [1.68286338E12, 4.0], [1.68286368E12, 89430.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.6828635E12, 905.0], [1.68286332E12, 23.0], [1.68286362E12, 86080.0], [1.68286344E12, 559.0], [1.68286326E12, 186.0], [1.68286356E12, 544.0], [1.68286338E12, 508.0], [1.68286368E12, 96159.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68286368E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 7.0, "minX": 1.0, "maxY": 143185.5, "series": [{"data": [[2.0, 74389.0], [3.0, 94130.5], [4.0, 33362.5], [5.0, 37115.0], [6.0, 49087.0], [7.0, 36117.0], [8.0, 2062.5], [10.0, 19357.5], [12.0, 143185.5], [14.0, 30725.0], [15.0, 5268.0], [18.0, 41409.0], [20.0, 10546.0], [24.0, 7032.0], [25.0, 100468.0], [29.0, 33203.0], [30.0, 2822.5], [31.0, 12594.0], [33.0, 137.0], [36.0, 16992.0], [37.0, 64178.0], [38.0, 20658.5], [44.0, 48044.0], [50.0, 14982.5], [54.0, 16659.0], [64.0, 13020.5], [70.0, 76.0], [75.0, 298.0], [72.0, 15900.5], [77.0, 207.0], [76.0, 162.0], [81.0, 210.0], [80.0, 18157.5], [83.0, 25936.0], [90.0, 96.0], [94.0, 99.0], [98.0, 7.0], [97.0, 114.0], [96.0, 12698.0], [107.0, 98.0], [112.0, 23147.0], [125.0, 169.0], [130.0, 102.0], [140.0, 31816.5], [157.0, 121.0], [167.0, 357.0], [178.0, 143.0], [185.0, 10456.0], [200.0, 155.0], [213.0, 155.0], [263.0, 5910.0], [261.0, 341.0], [280.0, 101126.5], [297.0, 53.0], [331.0, 11404.0], [362.0, 141.0], [390.0, 16433.0], [392.0, 13398.0], [401.0, 5525.0], [432.0, 11447.0], [464.0, 13410.5], [486.0, 446.0], [504.0, 346.0], [543.0, 33.0], [529.0, 14.0], [516.0, 6216.0], [561.0, 537.0], [589.0, 337.0], [599.0, 378.0], [597.0, 431.0], [601.0, 11975.0], [603.0, 520.0], [627.0, 198.0], [642.0, 463.0], [647.0, 64.0], [660.0, 264.0], [656.0, 494.0], [714.0, 57.0], [733.0, 504.0], [728.0, 354.0], [726.0, 515.0], [751.0, 337.0], [755.0, 375.0], [753.0, 462.0], [799.0, 178.0], [827.0, 205.0], [830.0, 471.0], [814.0, 521.0], [833.0, 204.0], [845.0, 168.0], [832.0, 374.0], [838.0, 494.0], [839.0, 509.0], [865.0, 339.0], [864.0, 13.0], [895.0, 63.0], [891.0, 74.0], [882.0, 483.0], [886.0, 494.0], [912.0, 246.0], [899.0, 517.0], [911.0, 566.0], [903.0, 460.0], [923.0, 335.0], [907.0, 546.0], [913.0, 523.0], [932.0, 54.0], [959.0, 363.0], [957.0, 411.0], [965.0, 242.0], [962.0, 249.0], [973.0, 409.0], [985.0, 532.0], [995.0, 211.0], [1014.0, 247.0], [1004.0, 522.0], [1001.0, 326.0], [1016.0, 264.0], [1017.0, 497.0], [999.0, 581.0], [1006.0, 527.0], [1002.0, 506.0], [1015.0, 547.0], [994.0, 518.0], [1043.0, 231.0], [1087.0, 298.0], [1035.0, 342.0], [1074.0, 67.5], [1046.0, 464.0], [1081.0, 469.0], [1068.0, 495.0], [1083.0, 379.0], [1092.0, 228.0], [1124.0, 27.0], [1094.0, 68.0], [1106.0, 556.0], [1148.0, 627.0], [1109.0, 489.0], [1123.0, 795.0], [1210.0, 86.0], [1181.0, 415.0], [1155.0, 557.0], [1171.0, 451.0], [1207.0, 466.0], [1168.0, 453.0], [1257.0, 61.0], [1273.0, 167.0], [1234.0, 469.0], [1296.0, 187.0], [1288.0, 242.0], [1304.0, 305.0], [1289.0, 474.0], [1331.0, 460.0], [1396.0, 294.0], [1358.0, 282.0], [1387.0, 460.0], [1370.0, 526.0], [1413.0, 237.0], [1452.0, 43.0], [1493.0, 250.0], [1487.0, 68.0], [1595.0, 199.0], [1556.0, 895.0], [1648.0, 266.0], [1630.0, 59.0], [1640.0, 880.0], [1708.0, 161.0], [1685.0, 487.0], [1745.0, 257.0], [1781.0, 375.0], [1788.0, 528.0], [1743.0, 542.0], [1783.0, 633.0], [1790.0, 523.5], [1777.0, 1080.0], [1832.0, 143.0], [1853.0, 14.0], [1813.0, 89.0], [1818.0, 523.0], [1826.0, 441.0], [1798.0, 535.0], [1821.0, 972.0], [1842.0, 618.5], [1907.0, 328.0], [1913.0, 14.0], [1858.0, 480.0], [1902.0, 504.0], [1888.0, 972.0], [1900.0, 759.0], [1865.0, 848.0], [1891.0, 970.0], [1971.0, 499.0], [1922.0, 270.0], [1967.0, 244.0], [1943.0, 502.0], [1973.0, 748.0], [1945.0, 627.0], [1965.0, 525.0], [1926.0, 728.0], [1975.0, 870.0], [2014.0, 9.0], [1999.0, 202.0], [1984.0, 173.0], [2045.0, 426.0], [2039.0, 559.0], [2005.0, 272.0], [2002.0, 278.0], [2006.0, 257.0], [2012.0, 472.0], [1985.0, 564.0], [1998.0, 556.0], [2020.0, 543.0], [2017.0, 490.0], [2146.0, 518.0], [2060.0, 28.0], [2056.0, 151.0], [2111.0, 581.0], [2086.0, 514.0], [2117.0, 774.0], [2066.0, 651.0], [2134.0, 619.0], [2128.0, 604.0], [2075.0, 490.0], [2078.0, 499.5], [2079.0, 660.0], [2151.0, 463.0], [2174.0, 1078.0], [2170.0, 924.0], [2210.0, 140.0], [2264.0, 216.0], [2237.0, 28.0], [2288.0, 31.0], [2197.0, 68.0], [2178.0, 780.0], [2354.0, 146.0], [2306.0, 26.0], [2310.0, 268.0], [2359.0, 618.0], [2340.0, 700.0], [2519.0, 219.0], [2437.0, 632.0], [2551.0, 1076.0], [2508.0, 1118.0], [2500.0, 1092.0], [2641.0, 450.0], [2635.0, 1152.0], [2642.0, 1202.5], [1.0, 100291.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2237.0, 8010.0], [2288.0, 15107.0], [2354.0, 4910.0], [2306.0, 12232.0], [656.0, 19538.0], [213.0, 27287.0], [891.0, 14079.0], [15.0, 124011.0], [1094.0, 30883.0], [75.0, 82158.0], [1257.0, 15626.0], [77.0, 10766.0], [1358.0, 28927.0], [1781.0, 9003.0], [1913.0, 6217.0], [1943.0, 15088.0], [1965.0, 11277.0], [1971.0, 53873.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 2642.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 143185.5, "series": [{"data": [[2.0, 74389.0], [3.0, 94130.5], [4.0, 33362.5], [5.0, 37115.0], [6.0, 49087.0], [7.0, 36117.0], [8.0, 2062.5], [10.0, 19357.5], [12.0, 143185.5], [14.0, 30725.0], [15.0, 5268.0], [18.0, 41409.0], [20.0, 10546.0], [24.0, 7032.0], [25.0, 100468.0], [29.0, 33203.0], [30.0, 2822.5], [31.0, 12594.0], [33.0, 137.0], [36.0, 16992.0], [37.0, 64178.0], [38.0, 20658.5], [44.0, 48044.0], [50.0, 14982.5], [54.0, 16659.0], [64.0, 13020.5], [70.0, 76.0], [75.0, 298.0], [72.0, 15900.5], [77.0, 207.0], [76.0, 162.0], [81.0, 210.0], [80.0, 18157.5], [83.0, 25936.0], [90.0, 96.0], [94.0, 99.0], [98.0, 7.0], [97.0, 114.0], [96.0, 12698.0], [107.0, 98.0], [112.0, 23147.0], [125.0, 169.0], [130.0, 102.0], [140.0, 31816.5], [157.0, 121.0], [167.0, 357.0], [178.0, 143.0], [185.0, 10456.0], [200.0, 155.0], [213.0, 155.0], [263.0, 5910.0], [261.0, 341.0], [280.0, 101126.5], [297.0, 53.0], [331.0, 11404.0], [362.0, 141.0], [390.0, 16433.0], [392.0, 13398.0], [401.0, 5525.0], [432.0, 11447.0], [464.0, 13410.5], [486.0, 446.0], [504.0, 346.0], [543.0, 33.0], [529.0, 14.0], [516.0, 6216.0], [561.0, 537.0], [589.0, 337.0], [599.0, 378.0], [597.0, 431.0], [601.0, 11975.0], [603.0, 520.0], [627.0, 198.0], [642.0, 463.0], [647.0, 64.0], [660.0, 264.0], [656.0, 494.0], [714.0, 57.0], [733.0, 504.0], [728.0, 354.0], [726.0, 515.0], [751.0, 337.0], [755.0, 375.0], [753.0, 462.0], [799.0, 178.0], [827.0, 205.0], [830.0, 471.0], [814.0, 521.0], [833.0, 204.0], [845.0, 168.0], [832.0, 374.0], [838.0, 494.0], [839.0, 509.0], [865.0, 339.0], [864.0, 13.0], [895.0, 63.0], [891.0, 74.0], [882.0, 483.0], [886.0, 494.0], [912.0, 246.0], [899.0, 517.0], [911.0, 566.0], [903.0, 460.0], [923.0, 335.0], [907.0, 546.0], [913.0, 523.0], [932.0, 54.0], [959.0, 363.0], [957.0, 411.0], [965.0, 242.0], [962.0, 249.0], [973.0, 409.0], [985.0, 532.0], [995.0, 211.0], [1014.0, 247.0], [1004.0, 522.0], [1001.0, 325.5], [1016.0, 264.0], [1017.0, 497.0], [999.0, 581.0], [1006.0, 527.0], [1002.0, 506.0], [1015.0, 547.0], [994.0, 518.0], [1043.0, 231.0], [1087.0, 298.0], [1035.0, 342.0], [1074.0, 67.5], [1046.0, 464.0], [1081.0, 469.0], [1068.0, 495.0], [1083.0, 379.0], [1092.0, 228.0], [1124.0, 27.0], [1094.0, 68.0], [1106.0, 556.0], [1148.0, 627.0], [1109.0, 489.0], [1123.0, 795.0], [1210.0, 86.0], [1181.0, 415.0], [1155.0, 557.0], [1171.0, 451.0], [1207.0, 466.0], [1168.0, 453.0], [1257.0, 61.0], [1273.0, 167.0], [1234.0, 469.0], [1296.0, 187.0], [1288.0, 242.0], [1304.0, 305.0], [1289.0, 474.0], [1331.0, 460.0], [1396.0, 294.0], [1358.0, 282.0], [1387.0, 460.0], [1370.0, 526.0], [1413.0, 237.0], [1452.0, 43.0], [1493.0, 250.0], [1487.0, 68.0], [1595.0, 199.0], [1556.0, 895.0], [1648.0, 266.0], [1630.0, 59.0], [1640.0, 880.0], [1708.0, 161.0], [1685.0, 487.0], [1745.0, 257.0], [1781.0, 375.0], [1788.0, 528.0], [1743.0, 542.0], [1783.0, 633.0], [1790.0, 523.5], [1777.0, 1080.0], [1832.0, 143.0], [1853.0, 14.0], [1813.0, 89.0], [1818.0, 523.0], [1826.0, 441.0], [1798.0, 535.0], [1821.0, 972.0], [1842.0, 618.5], [1907.0, 328.0], [1913.0, 14.0], [1858.0, 480.0], [1902.0, 504.0], [1888.0, 972.0], [1900.0, 758.5], [1865.0, 848.0], [1891.0, 970.0], [1971.0, 499.0], [1922.0, 270.0], [1967.0, 244.0], [1943.0, 502.0], [1973.0, 748.0], [1945.0, 627.0], [1965.0, 525.0], [1926.0, 728.0], [1975.0, 870.0], [2014.0, 9.0], [1999.0, 202.0], [1984.0, 173.0], [2045.0, 426.0], [2039.0, 559.0], [2005.0, 272.0], [2002.0, 278.0], [2006.0, 257.0], [2012.0, 472.0], [1985.0, 564.0], [1998.0, 556.0], [2020.0, 543.0], [2017.0, 490.0], [2146.0, 518.0], [2060.0, 28.0], [2056.0, 151.0], [2111.0, 581.0], [2086.0, 514.0], [2117.0, 774.0], [2066.0, 651.0], [2134.0, 619.0], [2128.0, 604.0], [2075.0, 490.0], [2078.0, 499.5], [2079.0, 660.0], [2151.0, 463.0], [2174.0, 1078.0], [2170.0, 924.0], [2210.0, 140.0], [2264.0, 216.0], [2237.0, 28.0], [2288.0, 31.0], [2197.0, 68.0], [2178.0, 780.0], [2354.0, 146.0], [2306.0, 26.0], [2310.0, 268.0], [2359.0, 618.0], [2340.0, 700.0], [2519.0, 219.0], [2437.0, 632.0], [2551.0, 1076.0], [2508.0, 1118.0], [2500.0, 1092.0], [2641.0, 450.0], [2635.0, 1152.0], [2642.0, 1202.0], [1.0, 100291.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2237.0, 0.0], [2288.0, 0.0], [2354.0, 0.0], [2306.0, 0.0], [656.0, 0.0], [213.0, 0.0], [891.0, 0.0], [15.0, 0.0], [1094.0, 0.0], [75.0, 0.0], [1257.0, 0.0], [77.0, 0.0], [1358.0, 0.0], [1781.0, 0.0], [1913.0, 0.0], [1943.0, 0.0], [1965.0, 0.0], [1971.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 2642.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 447.96666666666664, "minX": 1.68286326E12, "maxY": 1325.8333333333333, "series": [{"data": [[1.6828635E12, 1325.8333333333333], [1.68286332E12, 875.9833333333333], [1.68286344E12, 857.5], [1.68286326E12, 447.96666666666664], [1.68286356E12, 516.6666666666666], [1.68286338E12, 976.05]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68286356E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.18333333333333332, "minX": 1.68286326E12, "maxY": 1351.2, "series": [{"data": [[1.6828635E12, 1351.2], [1.68286332E12, 872.35], [1.68286362E12, 0.5166666666666667], [1.68286344E12, 832.8833333333333], [1.68286326E12, 393.96666666666664], [1.68286356E12, 539.6], [1.68286338E12, 994.2666666666667], [1.68286368E12, 0.18333333333333332]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.6828635E12, 1.0], [1.68286332E12, 3.783333333333333], [1.68286344E12, 3.55], [1.68286326E12, 4.05], [1.68286338E12, 2.65]], "isOverall": false, "label": "Non HTTP response code: java.net.SocketException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68286368E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.18333333333333332, "minX": 1.68286326E12, "maxY": 1351.2, "series": [{"data": [[1.6828635E12, 1351.2], [1.68286332E12, 872.35], [1.68286362E12, 0.5166666666666667], [1.68286344E12, 832.8833333333333], [1.68286326E12, 393.96666666666664], [1.68286356E12, 539.6], [1.68286338E12, 994.2666666666667], [1.68286368E12, 0.18333333333333332]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.6828635E12, 1.0], [1.68286332E12, 3.783333333333333], [1.68286344E12, 3.55], [1.68286326E12, 4.05], [1.68286338E12, 2.65]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68286368E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.18333333333333332, "minX": 1.68286326E12, "maxY": 1351.2, "series": [{"data": [[1.6828635E12, 1351.2], [1.68286332E12, 872.35], [1.68286362E12, 0.5166666666666667], [1.68286344E12, 832.8833333333333], [1.68286326E12, 393.96666666666664], [1.68286356E12, 539.6], [1.68286338E12, 994.2666666666667], [1.68286368E12, 0.18333333333333332]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.6828635E12, 1.0], [1.68286332E12, 3.783333333333333], [1.68286344E12, 3.55], [1.68286326E12, 4.05], [1.68286338E12, 2.65]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68286368E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

