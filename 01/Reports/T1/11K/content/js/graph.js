/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 3.0, "minX": 0.0, "maxY": 240879.0, "series": [{"data": [[0.0, 3.0], [0.1, 5.0], [0.2, 5.0], [0.3, 6.0], [0.4, 6.0], [0.5, 7.0], [0.6, 8.0], [0.7, 9.0], [0.8, 9.0], [0.9, 10.0], [1.0, 11.0], [1.1, 12.0], [1.2, 12.0], [1.3, 13.0], [1.4, 14.0], [1.5, 15.0], [1.6, 15.0], [1.7, 16.0], [1.8, 17.0], [1.9, 18.0], [2.0, 19.0], [2.1, 20.0], [2.2, 21.0], [2.3, 22.0], [2.4, 22.0], [2.5, 23.0], [2.6, 24.0], [2.7, 25.0], [2.8, 26.0], [2.9, 27.0], [3.0, 27.0], [3.1, 28.0], [3.2, 29.0], [3.3, 29.0], [3.4, 30.0], [3.5, 30.0], [3.6, 31.0], [3.7, 31.0], [3.8, 31.0], [3.9, 32.0], [4.0, 32.0], [4.1, 33.0], [4.2, 33.0], [4.3, 34.0], [4.4, 34.0], [4.5, 34.0], [4.6, 35.0], [4.7, 35.0], [4.8, 36.0], [4.9, 36.0], [5.0, 37.0], [5.1, 37.0], [5.2, 38.0], [5.3, 38.0], [5.4, 38.0], [5.5, 39.0], [5.6, 39.0], [5.7, 40.0], [5.8, 40.0], [5.9, 41.0], [6.0, 41.0], [6.1, 42.0], [6.2, 42.0], [6.3, 43.0], [6.4, 43.0], [6.5, 44.0], [6.6, 44.0], [6.7, 45.0], [6.8, 45.0], [6.9, 46.0], [7.0, 46.0], [7.1, 47.0], [7.2, 47.0], [7.3, 48.0], [7.4, 48.0], [7.5, 49.0], [7.6, 49.0], [7.7, 50.0], [7.8, 50.0], [7.9, 51.0], [8.0, 51.0], [8.1, 52.0], [8.2, 52.0], [8.3, 52.0], [8.4, 53.0], [8.5, 54.0], [8.6, 54.0], [8.7, 55.0], [8.8, 56.0], [8.9, 56.0], [9.0, 57.0], [9.1, 58.0], [9.2, 58.0], [9.3, 59.0], [9.4, 59.0], [9.5, 60.0], [9.6, 60.0], [9.7, 61.0], [9.8, 61.0], [9.9, 62.0], [10.0, 63.0], [10.1, 63.0], [10.2, 64.0], [10.3, 64.0], [10.4, 65.0], [10.5, 66.0], [10.6, 66.0], [10.7, 67.0], [10.8, 67.0], [10.9, 67.0], [11.0, 68.0], [11.1, 68.0], [11.2, 69.0], [11.3, 69.0], [11.4, 70.0], [11.5, 70.0], [11.6, 71.0], [11.7, 71.0], [11.8, 72.0], [11.9, 72.0], [12.0, 73.0], [12.1, 73.0], [12.2, 73.0], [12.3, 74.0], [12.4, 74.0], [12.5, 75.0], [12.6, 76.0], [12.7, 76.0], [12.8, 77.0], [12.9, 77.0], [13.0, 78.0], [13.1, 78.0], [13.2, 79.0], [13.3, 79.0], [13.4, 80.0], [13.5, 80.0], [13.6, 81.0], [13.7, 81.0], [13.8, 82.0], [13.9, 82.0], [14.0, 83.0], [14.1, 83.0], [14.2, 84.0], [14.3, 84.0], [14.4, 85.0], [14.5, 85.0], [14.6, 86.0], [14.7, 86.0], [14.8, 86.0], [14.9, 87.0], [15.0, 87.0], [15.1, 88.0], [15.2, 88.0], [15.3, 89.0], [15.4, 89.0], [15.5, 90.0], [15.6, 90.0], [15.7, 91.0], [15.8, 91.0], [15.9, 92.0], [16.0, 93.0], [16.1, 93.0], [16.2, 93.0], [16.3, 94.0], [16.4, 94.0], [16.5, 95.0], [16.6, 95.0], [16.7, 96.0], [16.8, 96.0], [16.9, 97.0], [17.0, 97.0], [17.1, 98.0], [17.2, 98.0], [17.3, 99.0], [17.4, 99.0], [17.5, 100.0], [17.6, 100.0], [17.7, 100.0], [17.8, 101.0], [17.9, 101.0], [18.0, 102.0], [18.1, 102.0], [18.2, 103.0], [18.3, 104.0], [18.4, 104.0], [18.5, 104.0], [18.6, 105.0], [18.7, 105.0], [18.8, 106.0], [18.9, 107.0], [19.0, 107.0], [19.1, 108.0], [19.2, 109.0], [19.3, 109.0], [19.4, 110.0], [19.5, 110.0], [19.6, 111.0], [19.7, 112.0], [19.8, 113.0], [19.9, 113.0], [20.0, 114.0], [20.1, 114.0], [20.2, 115.0], [20.3, 115.0], [20.4, 116.0], [20.5, 116.0], [20.6, 117.0], [20.7, 118.0], [20.8, 119.0], [20.9, 119.0], [21.0, 120.0], [21.1, 120.0], [21.2, 121.0], [21.3, 121.0], [21.4, 122.0], [21.5, 123.0], [21.6, 124.0], [21.7, 124.0], [21.8, 125.0], [21.9, 126.0], [22.0, 127.0], [22.1, 128.0], [22.2, 129.0], [22.3, 130.0], [22.4, 132.0], [22.5, 133.0], [22.6, 134.0], [22.7, 134.0], [22.8, 135.0], [22.9, 136.0], [23.0, 136.0], [23.1, 137.0], [23.2, 138.0], [23.3, 138.0], [23.4, 139.0], [23.5, 140.0], [23.6, 140.0], [23.7, 141.0], [23.8, 142.0], [23.9, 143.0], [24.0, 143.0], [24.1, 144.0], [24.2, 144.0], [24.3, 145.0], [24.4, 145.0], [24.5, 146.0], [24.6, 146.0], [24.7, 147.0], [24.8, 148.0], [24.9, 149.0], [25.0, 150.0], [25.1, 151.0], [25.2, 151.0], [25.3, 151.0], [25.4, 152.0], [25.5, 153.0], [25.6, 154.0], [25.7, 155.0], [25.8, 155.0], [25.9, 156.0], [26.0, 156.0], [26.1, 156.0], [26.2, 157.0], [26.3, 157.0], [26.4, 158.0], [26.5, 158.0], [26.6, 159.0], [26.7, 160.0], [26.8, 160.0], [26.9, 160.0], [27.0, 161.0], [27.1, 161.0], [27.2, 161.0], [27.3, 161.0], [27.4, 162.0], [27.5, 162.0], [27.6, 162.0], [27.7, 163.0], [27.8, 163.0], [27.9, 163.0], [28.0, 164.0], [28.1, 164.0], [28.2, 164.0], [28.3, 164.0], [28.4, 165.0], [28.5, 165.0], [28.6, 165.0], [28.7, 166.0], [28.8, 166.0], [28.9, 166.0], [29.0, 167.0], [29.1, 167.0], [29.2, 168.0], [29.3, 168.0], [29.4, 168.0], [29.5, 169.0], [29.6, 169.0], [29.7, 169.0], [29.8, 170.0], [29.9, 170.0], [30.0, 170.0], [30.1, 170.0], [30.2, 171.0], [30.3, 171.0], [30.4, 171.0], [30.5, 172.0], [30.6, 172.0], [30.7, 172.0], [30.8, 173.0], [30.9, 173.0], [31.0, 173.0], [31.1, 174.0], [31.2, 174.0], [31.3, 175.0], [31.4, 175.0], [31.5, 175.0], [31.6, 176.0], [31.7, 177.0], [31.8, 177.0], [31.9, 178.0], [32.0, 178.0], [32.1, 179.0], [32.2, 179.0], [32.3, 179.0], [32.4, 180.0], [32.5, 180.0], [32.6, 181.0], [32.7, 181.0], [32.8, 181.0], [32.9, 182.0], [33.0, 183.0], [33.1, 183.0], [33.2, 184.0], [33.3, 184.0], [33.4, 184.0], [33.5, 185.0], [33.6, 186.0], [33.7, 186.0], [33.8, 187.0], [33.9, 187.0], [34.0, 188.0], [34.1, 188.0], [34.2, 189.0], [34.3, 190.0], [34.4, 190.0], [34.5, 191.0], [34.6, 191.0], [34.7, 192.0], [34.8, 193.0], [34.9, 193.0], [35.0, 194.0], [35.1, 194.0], [35.2, 195.0], [35.3, 196.0], [35.4, 196.0], [35.5, 197.0], [35.6, 197.0], [35.7, 198.0], [35.8, 198.0], [35.9, 199.0], [36.0, 199.0], [36.1, 201.0], [36.2, 202.0], [36.3, 204.0], [36.4, 204.0], [36.5, 205.0], [36.6, 206.0], [36.7, 206.0], [36.8, 207.0], [36.9, 208.0], [37.0, 209.0], [37.1, 210.0], [37.2, 210.0], [37.3, 211.0], [37.4, 212.0], [37.5, 214.0], [37.6, 215.0], [37.7, 216.0], [37.8, 218.0], [37.9, 220.0], [38.0, 221.0], [38.1, 221.0], [38.2, 222.0], [38.3, 222.0], [38.4, 223.0], [38.5, 225.0], [38.6, 226.0], [38.7, 227.0], [38.8, 229.0], [38.9, 230.0], [39.0, 233.0], [39.1, 236.0], [39.2, 241.0], [39.3, 243.0], [39.4, 244.0], [39.5, 247.0], [39.6, 249.0], [39.7, 253.0], [39.8, 256.0], [39.9, 258.0], [40.0, 259.0], [40.1, 261.0], [40.2, 264.0], [40.3, 266.0], [40.4, 268.0], [40.5, 271.0], [40.6, 273.0], [40.7, 275.0], [40.8, 278.0], [40.9, 282.0], [41.0, 284.0], [41.1, 287.0], [41.2, 288.0], [41.3, 291.0], [41.4, 296.0], [41.5, 301.0], [41.6, 305.0], [41.7, 310.0], [41.8, 315.0], [41.9, 316.0], [42.0, 317.0], [42.1, 320.0], [42.2, 322.0], [42.3, 328.0], [42.4, 331.0], [42.5, 333.0], [42.6, 335.0], [42.7, 339.0], [42.8, 345.0], [42.9, 348.0], [43.0, 351.0], [43.1, 354.0], [43.2, 355.0], [43.3, 357.0], [43.4, 360.0], [43.5, 369.0], [43.6, 373.0], [43.7, 376.0], [43.8, 377.0], [43.9, 380.0], [44.0, 384.0], [44.1, 387.0], [44.2, 390.0], [44.3, 392.0], [44.4, 398.0], [44.5, 399.0], [44.6, 401.0], [44.7, 403.0], [44.8, 405.0], [44.9, 407.0], [45.0, 410.0], [45.1, 411.0], [45.2, 412.0], [45.3, 413.0], [45.4, 414.0], [45.5, 416.0], [45.6, 418.0], [45.7, 419.0], [45.8, 420.0], [45.9, 421.0], [46.0, 422.0], [46.1, 422.0], [46.2, 424.0], [46.3, 425.0], [46.4, 427.0], [46.5, 428.0], [46.6, 429.0], [46.7, 430.0], [46.8, 433.0], [46.9, 434.0], [47.0, 436.0], [47.1, 439.0], [47.2, 441.0], [47.3, 442.0], [47.4, 443.0], [47.5, 444.0], [47.6, 445.0], [47.7, 446.0], [47.8, 446.0], [47.9, 447.0], [48.0, 449.0], [48.1, 451.0], [48.2, 454.0], [48.3, 456.0], [48.4, 461.0], [48.5, 462.0], [48.6, 463.0], [48.7, 464.0], [48.8, 464.0], [48.9, 465.0], [49.0, 466.0], [49.1, 466.0], [49.2, 467.0], [49.3, 467.0], [49.4, 468.0], [49.5, 469.0], [49.6, 470.0], [49.7, 471.0], [49.8, 473.0], [49.9, 474.0], [50.0, 474.0], [50.1, 475.0], [50.2, 476.0], [50.3, 477.0], [50.4, 477.0], [50.5, 478.0], [50.6, 479.0], [50.7, 479.0], [50.8, 480.0], [50.9, 480.0], [51.0, 481.0], [51.1, 482.0], [51.2, 484.0], [51.3, 485.0], [51.4, 486.0], [51.5, 487.0], [51.6, 488.0], [51.7, 488.0], [51.8, 489.0], [51.9, 489.0], [52.0, 490.0], [52.1, 490.0], [52.2, 491.0], [52.3, 492.0], [52.4, 493.0], [52.5, 493.0], [52.6, 494.0], [52.7, 495.0], [52.8, 495.0], [52.9, 496.0], [53.0, 496.0], [53.1, 497.0], [53.2, 497.0], [53.3, 497.0], [53.4, 498.0], [53.5, 498.0], [53.6, 498.0], [53.7, 499.0], [53.8, 499.0], [53.9, 500.0], [54.0, 500.0], [54.1, 501.0], [54.2, 502.0], [54.3, 503.0], [54.4, 504.0], [54.5, 505.0], [54.6, 506.0], [54.7, 507.0], [54.8, 507.0], [54.9, 508.0], [55.0, 508.0], [55.1, 509.0], [55.2, 509.0], [55.3, 510.0], [55.4, 510.0], [55.5, 511.0], [55.6, 511.0], [55.7, 511.0], [55.8, 512.0], [55.9, 512.0], [56.0, 513.0], [56.1, 513.0], [56.2, 514.0], [56.3, 514.0], [56.4, 515.0], [56.5, 515.0], [56.6, 516.0], [56.7, 516.0], [56.8, 516.0], [56.9, 517.0], [57.0, 517.0], [57.1, 518.0], [57.2, 518.0], [57.3, 518.0], [57.4, 519.0], [57.5, 519.0], [57.6, 519.0], [57.7, 520.0], [57.8, 520.0], [57.9, 521.0], [58.0, 521.0], [58.1, 522.0], [58.2, 522.0], [58.3, 523.0], [58.4, 524.0], [58.5, 524.0], [58.6, 525.0], [58.7, 525.0], [58.8, 526.0], [58.9, 526.0], [59.0, 526.0], [59.1, 527.0], [59.2, 527.0], [59.3, 528.0], [59.4, 528.0], [59.5, 528.0], [59.6, 529.0], [59.7, 529.0], [59.8, 529.0], [59.9, 530.0], [60.0, 530.0], [60.1, 531.0], [60.2, 531.0], [60.3, 531.0], [60.4, 532.0], [60.5, 532.0], [60.6, 532.0], [60.7, 533.0], [60.8, 533.0], [60.9, 533.0], [61.0, 533.0], [61.1, 534.0], [61.2, 534.0], [61.3, 534.0], [61.4, 535.0], [61.5, 535.0], [61.6, 535.0], [61.7, 536.0], [61.8, 536.0], [61.9, 536.0], [62.0, 537.0], [62.1, 538.0], [62.2, 538.0], [62.3, 539.0], [62.4, 540.0], [62.5, 541.0], [62.6, 541.0], [62.7, 542.0], [62.8, 542.0], [62.9, 543.0], [63.0, 544.0], [63.1, 545.0], [63.2, 546.0], [63.3, 546.0], [63.4, 547.0], [63.5, 547.0], [63.6, 548.0], [63.7, 548.0], [63.8, 549.0], [63.9, 549.0], [64.0, 550.0], [64.1, 550.0], [64.2, 550.0], [64.3, 551.0], [64.4, 551.0], [64.5, 552.0], [64.6, 553.0], [64.7, 553.0], [64.8, 554.0], [64.9, 554.0], [65.0, 554.0], [65.1, 555.0], [65.2, 555.0], [65.3, 556.0], [65.4, 556.0], [65.5, 557.0], [65.6, 557.0], [65.7, 557.0], [65.8, 558.0], [65.9, 558.0], [66.0, 559.0], [66.1, 559.0], [66.2, 560.0], [66.3, 561.0], [66.4, 562.0], [66.5, 563.0], [66.6, 564.0], [66.7, 564.0], [66.8, 564.0], [66.9, 565.0], [67.0, 565.0], [67.1, 565.0], [67.2, 566.0], [67.3, 566.0], [67.4, 566.0], [67.5, 566.0], [67.6, 567.0], [67.7, 567.0], [67.8, 567.0], [67.9, 568.0], [68.0, 568.0], [68.1, 568.0], [68.2, 569.0], [68.3, 569.0], [68.4, 569.0], [68.5, 570.0], [68.6, 570.0], [68.7, 570.0], [68.8, 570.0], [68.9, 571.0], [69.0, 571.0], [69.1, 571.0], [69.2, 572.0], [69.3, 572.0], [69.4, 573.0], [69.5, 573.0], [69.6, 573.0], [69.7, 574.0], [69.8, 575.0], [69.9, 575.0], [70.0, 576.0], [70.1, 576.0], [70.2, 577.0], [70.3, 578.0], [70.4, 578.0], [70.5, 579.0], [70.6, 579.0], [70.7, 580.0], [70.8, 580.0], [70.9, 581.0], [71.0, 581.0], [71.1, 582.0], [71.2, 582.0], [71.3, 583.0], [71.4, 584.0], [71.5, 585.0], [71.6, 586.0], [71.7, 586.0], [71.8, 587.0], [71.9, 588.0], [72.0, 588.0], [72.1, 589.0], [72.2, 589.0], [72.3, 590.0], [72.4, 590.0], [72.5, 591.0], [72.6, 591.0], [72.7, 592.0], [72.8, 592.0], [72.9, 592.0], [73.0, 593.0], [73.1, 593.0], [73.2, 594.0], [73.3, 594.0], [73.4, 595.0], [73.5, 595.0], [73.6, 596.0], [73.7, 596.0], [73.8, 597.0], [73.9, 597.0], [74.0, 597.0], [74.1, 597.0], [74.2, 598.0], [74.3, 598.0], [74.4, 598.0], [74.5, 599.0], [74.6, 599.0], [74.7, 600.0], [74.8, 600.0], [74.9, 600.0], [75.0, 600.0], [75.1, 601.0], [75.2, 601.0], [75.3, 601.0], [75.4, 602.0], [75.5, 602.0], [75.6, 602.0], [75.7, 603.0], [75.8, 603.0], [75.9, 603.0], [76.0, 604.0], [76.1, 604.0], [76.2, 605.0], [76.3, 605.0], [76.4, 605.0], [76.5, 606.0], [76.6, 606.0], [76.7, 607.0], [76.8, 607.0], [76.9, 608.0], [77.0, 608.0], [77.1, 609.0], [77.2, 610.0], [77.3, 610.0], [77.4, 611.0], [77.5, 611.0], [77.6, 612.0], [77.7, 613.0], [77.8, 615.0], [77.9, 616.0], [78.0, 617.0], [78.1, 620.0], [78.2, 622.0], [78.3, 623.0], [78.4, 625.0], [78.5, 627.0], [78.6, 628.0], [78.7, 629.0], [78.8, 630.0], [78.9, 631.0], [79.0, 631.0], [79.1, 632.0], [79.2, 633.0], [79.3, 634.0], [79.4, 635.0], [79.5, 636.0], [79.6, 636.0], [79.7, 637.0], [79.8, 637.0], [79.9, 638.0], [80.0, 638.0], [80.1, 639.0], [80.2, 640.0], [80.3, 642.0], [80.4, 643.0], [80.5, 645.0], [80.6, 646.0], [80.7, 648.0], [80.8, 653.0], [80.9, 654.0], [81.0, 655.0], [81.1, 656.0], [81.2, 657.0], [81.3, 660.0], [81.4, 666.0], [81.5, 668.0], [81.6, 670.0], [81.7, 672.0], [81.8, 673.0], [81.9, 674.0], [82.0, 675.0], [82.1, 677.0], [82.2, 678.0], [82.3, 680.0], [82.4, 681.0], [82.5, 682.0], [82.6, 684.0], [82.7, 686.0], [82.8, 688.0], [82.9, 699.0], [83.0, 702.0], [83.1, 703.0], [83.2, 705.0], [83.3, 707.0], [83.4, 709.0], [83.5, 710.0], [83.6, 711.0], [83.7, 711.0], [83.8, 712.0], [83.9, 712.0], [84.0, 713.0], [84.1, 713.0], [84.2, 714.0], [84.3, 715.0], [84.4, 716.0], [84.5, 716.0], [84.6, 717.0], [84.7, 718.0], [84.8, 719.0], [84.9, 720.0], [85.0, 723.0], [85.1, 725.0], [85.2, 728.0], [85.3, 731.0], [85.4, 733.0], [85.5, 735.0], [85.6, 735.0], [85.7, 736.0], [85.8, 737.0], [85.9, 739.0], [86.0, 741.0], [86.1, 745.0], [86.2, 748.0], [86.3, 749.0], [86.4, 753.0], [86.5, 760.0], [86.6, 762.0], [86.7, 763.0], [86.8, 766.0], [86.9, 769.0], [87.0, 773.0], [87.1, 779.0], [87.2, 786.0], [87.3, 790.0], [87.4, 791.0], [87.5, 793.0], [87.6, 795.0], [87.7, 796.0], [87.8, 797.0], [87.9, 798.0], [88.0, 800.0], [88.1, 803.0], [88.2, 811.0], [88.3, 818.0], [88.4, 823.0], [88.5, 828.0], [88.6, 846.0], [88.7, 858.0], [88.8, 867.0], [88.9, 883.0], [89.0, 890.0], [89.1, 894.0], [89.2, 897.0], [89.3, 900.0], [89.4, 915.0], [89.5, 917.0], [89.6, 918.0], [89.7, 918.0], [89.8, 919.0], [89.9, 921.0], [90.0, 924.0], [90.1, 934.0], [90.2, 936.0], [90.3, 938.0], [90.4, 939.0], [90.5, 940.0], [90.6, 942.0], [90.7, 944.0], [90.8, 949.0], [90.9, 953.0], [91.0, 958.0], [91.1, 967.0], [91.2, 971.0], [91.3, 996.0], [91.4, 1007.0], [91.5, 1009.0], [91.6, 1016.0], [91.7, 1059.0], [91.8, 1145.0], [91.9, 1161.0], [92.0, 1164.0], [92.1, 1166.0], [92.2, 1177.0], [92.3, 1354.0], [92.4, 1719.0], [92.5, 2259.0], [92.6, 2745.0], [92.7, 3126.0], [92.8, 3446.0], [92.9, 3641.0], [93.0, 4066.0], [93.1, 4574.0], [93.2, 4723.0], [93.3, 4867.0], [93.4, 5001.0], [93.5, 5096.0], [93.6, 5165.0], [93.7, 5277.0], [93.8, 5584.0], [93.9, 5902.0], [94.0, 6104.0], [94.1, 6143.0], [94.2, 6226.0], [94.3, 6291.0], [94.4, 6424.0], [94.5, 6804.0], [94.6, 6944.0], [94.7, 7090.0], [94.8, 7211.0], [94.9, 7282.0], [95.0, 7432.0], [95.1, 7785.0], [95.2, 7865.0], [95.3, 7951.0], [95.4, 8025.0], [95.5, 8158.0], [95.6, 8202.0], [95.7, 8361.0], [95.8, 8445.0], [95.9, 8459.0], [96.0, 8814.0], [96.1, 8859.0], [96.2, 8975.0], [96.3, 9053.0], [96.4, 9149.0], [96.5, 9324.0], [96.6, 9445.0], [96.7, 10019.0], [96.8, 10121.0], [96.9, 10386.0], [97.0, 11344.0], [97.1, 11743.0], [97.2, 12033.0], [97.3, 12067.0], [97.4, 12221.0], [97.5, 12318.0], [97.6, 13111.0], [97.7, 14178.0], [97.8, 15545.0], [97.9, 17042.0], [98.0, 18134.0], [98.1, 20541.0], [98.2, 25678.0], [98.3, 30991.0], [98.4, 35782.0], [98.5, 42949.0], [98.6, 46656.0], [98.7, 57832.0], [98.8, 64774.0], [98.9, 66309.0], [99.0, 68356.0], [99.1, 72341.0], [99.2, 82399.0], [99.3, 100021.0], [99.4, 100146.0], [99.5, 101009.0], [99.6, 127448.0], [99.7, 130117.0], [99.8, 133094.0], [99.9, 143612.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 68678.0, "series": [{"data": [[0.0, 57627.0], [164900.0, 28.0], [66700.0, 8.0], [69900.0, 2.0], [73100.0, 6.0], [76300.0, 1.0], [82700.0, 21.0], [85900.0, 1.0], [101900.0, 4.0], [98700.0, 2.0], [105100.0, 1.0], [130700.0, 2.0], [127500.0, 1.0], [143400.0, 1.0], [149800.0, 7.0], [100.0, 61193.0], [34500.0, 1.0], [32900.0, 1.0], [134700.0, 2.0], [36100.0, 1.0], [37700.0, 5.0], [39300.0, 2.0], [44100.0, 6.0], [47300.0, 5.0], [50500.0, 32.0], [200.0, 17983.0], [56900.0, 2.0], [55300.0, 10.0], [58500.0, 1.0], [60100.0, 5.0], [63300.0, 3.0], [64900.0, 7.0], [72200.0, 2.0], [300.0, 10053.0], [75400.0, 3.0], [81800.0, 1.0], [94600.0, 1.0], [97800.0, 3.0], [101000.0, 23.0], [400.0, 30972.0], [126600.0, 1.0], [500.0, 68678.0], [129800.0, 21.0], [138800.0, 1.0], [600.0, 27072.0], [151600.0, 1.0], [700.0, 16742.0], [800.0, 4294.0], [900.0, 6818.0], [1000.0, 1364.0], [1100.0, 1621.0], [1200.0, 146.0], [1300.0, 37.0], [1400.0, 98.0], [1500.0, 157.0], [1600.0, 60.0], [1700.0, 65.0], [1800.0, 71.0], [1900.0, 71.0], [2000.0, 41.0], [2100.0, 53.0], [2200.0, 41.0], [2300.0, 92.0], [2400.0, 78.0], [2500.0, 55.0], [2600.0, 14.0], [2800.0, 69.0], [2700.0, 94.0], [2900.0, 47.0], [3000.0, 60.0], [3100.0, 211.0], [3300.0, 102.0], [3200.0, 136.0], [3400.0, 171.0], [3500.0, 162.0], [3600.0, 89.0], [3700.0, 71.0], [3800.0, 101.0], [3900.0, 64.0], [4000.0, 35.0], [4200.0, 13.0], [68100.0, 4.0], [4400.0, 145.0], [4600.0, 134.0], [71300.0, 7.0], [4800.0, 215.0], [74500.0, 1.0], [5000.0, 402.0], [5200.0, 239.0], [84100.0, 7.0], [5400.0, 79.0], [5600.0, 27.0], [5800.0, 154.0], [93700.0, 1.0], [90500.0, 9.0], [6000.0, 219.0], [6200.0, 485.0], [100100.0, 164.0], [6400.0, 95.0], [6600.0, 156.0], [103300.0, 1.0], [6800.0, 172.0], [106500.0, 3.0], [7000.0, 146.0], [7400.0, 158.0], [7200.0, 611.0], [7600.0, 87.0], [7800.0, 396.0], [8000.0, 310.0], [128900.0, 28.0], [8400.0, 642.0], [9200.0, 243.0], [8800.0, 569.0], [9600.0, 20.0], [10000.0, 144.0], [159800.0, 2.0], [10400.0, 6.0], [11200.0, 62.0], [10800.0, 16.0], [11600.0, 7.0], [12000.0, 543.0], [12400.0, 112.0], [13200.0, 54.0], [12800.0, 8.0], [13600.0, 34.0], [14000.0, 5.0], [14400.0, 3.0], [14800.0, 5.0], [230200.0, 1.0], [15200.0, 5.0], [15600.0, 16.0], [16000.0, 19.0], [16800.0, 29.0], [18400.0, 8.0], [17600.0, 31.0], [19200.0, 1.0], [20000.0, 1.0], [20800.0, 9.0], [22400.0, 57.0], [21600.0, 3.0], [23200.0, 12.0], [24000.0, 2.0], [24800.0, 8.0], [25600.0, 13.0], [26400.0, 1.0], [27200.0, 1.0], [28000.0, 2.0], [29600.0, 10.0], [28800.0, 2.0], [30400.0, 1.0], [31200.0, 2.0], [32000.0, 12.0], [33600.0, 3.0], [38400.0, 3.0], [151100.0, 3.0], [41600.0, 29.0], [43200.0, 8.0], [46400.0, 2.0], [49600.0, 3.0], [52800.0, 3.0], [54400.0, 4.0], [56000.0, 2.0], [59200.0, 1.0], [60800.0, 24.0], [62400.0, 1.0], [64000.0, 9.0], [67200.0, 16.0], [70400.0, 76.0], [73600.0, 8.0], [76800.0, 2.0], [80000.0, 2.0], [89600.0, 4.0], [86400.0, 2.0], [92800.0, 2.0], [96000.0, 1.0], [138500.0, 3.0], [144900.0, 11.0], [67100.0, 2.0], [73500.0, 5.0], [70300.0, 11.0], [76700.0, 4.0], [127900.0, 40.0], [149000.0, 1.0], [161800.0, 1.0], [34700.0, 3.0], [33100.0, 4.0], [36300.0, 1.0], [140300.0, 84.0], [146700.0, 13.0], [37900.0, 2.0], [39500.0, 2.0], [42700.0, 1.0], [44300.0, 11.0], [47500.0, 2.0], [49100.0, 2.0], [50700.0, 5.0], [52300.0, 2.0], [53900.0, 4.0], [55500.0, 6.0], [57100.0, 1.0], [58700.0, 1.0], [60300.0, 4.0], [61900.0, 7.0], [65100.0, 18.0], [63500.0, 2.0], [69400.0, 6.0], [66200.0, 2.0], [75800.0, 2.0], [79000.0, 4.0], [85400.0, 1.0], [88600.0, 1.0], [95000.0, 2.0], [101400.0, 13.0], [104600.0, 21.0], [130200.0, 2.0], [127000.0, 1.0], [138000.0, 4.0], [144400.0, 1.0], [240400.0, 1.0], [135700.0, 1.0], [148500.0, 1.0], [161300.0, 34.0], [199700.0, 1.0], [68500.0, 8.0], [78100.0, 1.0], [81300.0, 2.0], [87700.0, 1.0], [94100.0, 4.0], [100500.0, 51.0], [103700.0, 3.0], [129300.0, 6.0], [146200.0, 3.0], [152600.0, 1.0], [165400.0, 1.0], [191000.0, 1.0], [16900.0, 81.0], [17700.0, 2.0], [18500.0, 5.0], [19300.0, 13.0], [20100.0, 4.0], [20900.0, 4.0], [22500.0, 17.0], [21700.0, 29.0], [24100.0, 2.0], [24900.0, 2.0], [25700.0, 4.0], [27300.0, 75.0], [28100.0, 2.0], [29700.0, 22.0], [31300.0, 1.0], [32100.0, 21.0], [33800.0, 2.0], [137500.0, 4.0], [35400.0, 1.0], [38600.0, 7.0], [37000.0, 11.0], [41800.0, 4.0], [43400.0, 24.0], [46600.0, 7.0], [53000.0, 1.0], [54600.0, 17.0], [57800.0, 8.0], [61000.0, 2.0], [64200.0, 11.0], [70800.0, 1.0], [74000.0, 2.0], [80400.0, 2.0], [83600.0, 2.0], [90000.0, 1.0], [106000.0, 3.0], [102800.0, 1.0], [128400.0, 13.0], [149600.0, 1.0], [213600.0, 1.0], [147300.0, 18.0], [67500.0, 7.0], [77100.0, 2.0], [80300.0, 1.0], [83500.0, 1.0], [93100.0, 2.0], [96300.0, 2.0], [99500.0, 1.0], [105900.0, 15.0], [102700.0, 3.0], [128300.0, 17.0], [138600.0, 3.0], [145000.0, 15.0], [151400.0, 1.0], [157800.0, 1.0], [33300.0, 3.0], [142700.0, 1.0], [34900.0, 16.0], [39700.0, 3.0], [42900.0, 3.0], [41300.0, 4.0], [44500.0, 92.0], [46100.0, 1.0], [47700.0, 2.0], [52500.0, 1.0], [55700.0, 2.0], [58900.0, 5.0], [63700.0, 15.0], [65300.0, 15.0], [66600.0, 6.0], [69800.0, 2.0], [73000.0, 1.0], [82600.0, 2.0], [85800.0, 7.0], [101800.0, 4.0], [108200.0, 2.0], [130600.0, 16.0], [127400.0, 12.0], [159600.0, 1.0], [131700.0, 5.0], [138100.0, 4.0], [65700.0, 31.0], [68900.0, 8.0], [72100.0, 1.0], [75300.0, 6.0], [78500.0, 1.0], [81700.0, 5.0], [97700.0, 1.0], [94500.0, 5.0], [100900.0, 3.0], [104100.0, 5.0], [129700.0, 7.0], [8500.0, 4.0], [135800.0, 1.0], [8900.0, 285.0], [9300.0, 290.0], [9700.0, 91.0], [148600.0, 8.0], [10100.0, 318.0], [10500.0, 22.0], [10900.0, 25.0], [11300.0, 183.0], [11700.0, 47.0], [12100.0, 228.0], [12500.0, 18.0], [12900.0, 8.0], [13300.0, 14.0], [13700.0, 6.0], [14100.0, 105.0], [14500.0, 19.0], [15300.0, 27.0], [14900.0, 9.0], [15700.0, 9.0], [16100.0, 15.0], [17000.0, 31.0], [17800.0, 7.0], [19400.0, 4.0], [18600.0, 36.0], [20200.0, 16.0], [21000.0, 1.0], [22600.0, 6.0], [24200.0, 2.0], [25000.0, 3.0], [26600.0, 3.0], [25800.0, 10.0], [28200.0, 3.0], [29800.0, 5.0], [30600.0, 29.0], [31400.0, 2.0], [32200.0, 15.0], [34000.0, 4.0], [133500.0, 2.0], [35600.0, 2.0], [37200.0, 6.0], [159100.0, 12.0], [42000.0, 1.0], [46800.0, 3.0], [45200.0, 2.0], [48400.0, 4.0], [51600.0, 3.0], [54800.0, 2.0], [216700.0, 2.0], [58000.0, 3.0], [59600.0, 2.0], [64400.0, 12.0], [68000.0, 3.0], [71200.0, 4.0], [77600.0, 1.0], [74400.0, 2.0], [84000.0, 1.0], [93600.0, 1.0], [96800.0, 3.0], [100000.0, 210.0], [103200.0, 3.0], [128800.0, 16.0], [148800.0, 8.0], [146500.0, 5.0], [67900.0, 5.0], [71100.0, 10.0], [77500.0, 1.0], [74300.0, 3.0], [99900.0, 2.0], [128700.0, 16.0], [137800.0, 4.0], [131400.0, 2.0], [150600.0, 1.0], [38300.0, 3.0], [41500.0, 7.0], [43100.0, 3.0], [47900.0, 3.0], [52700.0, 4.0], [55900.0, 1.0], [59100.0, 10.0], [60700.0, 11.0], [62300.0, 3.0], [65500.0, 11.0], [63900.0, 3.0], [67000.0, 6.0], [73400.0, 36.0], [70200.0, 1.0], [76600.0, 1.0], [83000.0, 2.0], [86200.0, 1.0], [89400.0, 2.0], [92600.0, 1.0], [95800.0, 10.0], [99000.0, 1.0], [131000.0, 97.0], [127800.0, 19.0], [146000.0, 1.0], [158800.0, 4.0], [137300.0, 2.0], [69300.0, 21.0], [66100.0, 15.0], [78900.0, 1.0], [82100.0, 2.0], [85300.0, 13.0], [88500.0, 1.0], [91700.0, 1.0], [101300.0, 4.0], [104500.0, 21.0], [130100.0, 14.0], [141400.0, 3.0], [147800.0, 11.0], [231000.0, 21.0], [17100.0, 63.0], [17900.0, 2.0], [18700.0, 4.0], [20300.0, 53.0], [19500.0, 6.0], [21100.0, 3.0], [21900.0, 4.0], [23500.0, 5.0], [22700.0, 5.0], [25100.0, 2.0], [25900.0, 4.0], [27500.0, 2.0], [28300.0, 1.0], [29100.0, 11.0], [30700.0, 3.0], [31500.0, 2.0], [32300.0, 10.0], [34200.0, 8.0], [132700.0, 5.0], [35800.0, 24.0], [37400.0, 1.0], [40600.0, 3.0], [39000.0, 5.0], [43800.0, 93.0], [45400.0, 1.0], [47000.0, 1.0], [50200.0, 2.0], [51800.0, 18.0], [55000.0, 3.0], [53400.0, 2.0], [56600.0, 1.0], [59800.0, 2.0], [61400.0, 1.0], [63000.0, 2.0], [64600.0, 10.0], [68400.0, 56.0], [71600.0, 1.0], [74800.0, 1.0], [78000.0, 2.0], [81200.0, 2.0], [84400.0, 7.0], [87600.0, 1.0], [94000.0, 1.0], [100400.0, 31.0], [103600.0, 2.0], [144800.0, 5.0], [240800.0, 3.0], [68300.0, 24.0], [71500.0, 1.0], [74700.0, 1.0], [84300.0, 20.0], [87500.0, 1.0], [97100.0, 1.0], [100300.0, 49.0], [103500.0, 1.0], [140200.0, 16.0], [146600.0, 23.0], [33700.0, 1.0], [38500.0, 54.0], [36900.0, 13.0], [41700.0, 29.0], [43300.0, 5.0], [48100.0, 1.0], [49700.0, 3.0], [52900.0, 2.0], [51300.0, 6.0], [54500.0, 2.0], [56100.0, 5.0], [57700.0, 3.0], [59300.0, 3.0], [60900.0, 1.0], [62500.0, 2.0], [64100.0, 22.0], [67400.0, 9.0], [70600.0, 5.0], [73800.0, 3.0], [80200.0, 2.0], [86600.0, 13.0], [128200.0, 4.0], [135600.0, 1.0], [161200.0, 5.0], [231600.0, 4.0], [133300.0, 8.0], [4100.0, 17.0], [66500.0, 11.0], [4300.0, 62.0], [4500.0, 134.0], [72900.0, 4.0], [69700.0, 11.0], [4700.0, 328.0], [76100.0, 1.0], [4900.0, 199.0], [5100.0, 456.0], [79300.0, 2.0], [5300.0, 150.0], [82500.0, 1.0], [5500.0, 85.0], [5700.0, 102.0], [92100.0, 2.0], [5900.0, 109.0], [6100.0, 538.0], [6300.0, 237.0], [101700.0, 2.0], [6500.0, 118.0], [6900.0, 351.0], [6700.0, 40.0], [7100.0, 225.0], [7300.0, 85.0], [7500.0, 57.0], [7900.0, 428.0], [7700.0, 126.0], [8100.0, 476.0], [127300.0, 24.0], [130500.0, 1.0], [8200.0, 118.0], [8600.0, 22.0], [137400.0, 8.0], [9000.0, 258.0], [9400.0, 114.0], [10200.0, 177.0], [9800.0, 44.0], [10600.0, 2.0], [11000.0, 23.0], [11400.0, 131.0], [12200.0, 291.0], [11800.0, 4.0], [12600.0, 13.0], [13000.0, 23.0], [13400.0, 5.0], [13800.0, 16.0], [14200.0, 6.0], [14600.0, 9.0], [15000.0, 15.0], [15400.0, 69.0], [15800.0, 13.0], [16200.0, 13.0], [16400.0, 17.0], [17200.0, 26.0], [18000.0, 5.0], [18800.0, 37.0], [19600.0, 3.0], [20400.0, 6.0], [21200.0, 7.0], [22000.0, 1.0], [23600.0, 4.0], [25200.0, 1.0], [27600.0, 1.0], [26800.0, 2.0], [28400.0, 1.0], [29200.0, 14.0], [31600.0, 7.0], [30800.0, 7.0], [32400.0, 49.0], [34400.0, 1.0], [36000.0, 3.0], [39200.0, 5.0], [42400.0, 4.0], [44000.0, 3.0], [45600.0, 1.0], [56800.0, 4.0], [60000.0, 1.0], [63200.0, 4.0], [64800.0, 6.0], [68800.0, 11.0], [65600.0, 4.0], [72000.0, 2.0], [75200.0, 2.0], [81600.0, 3.0], [88000.0, 1.0], [100800.0, 13.0], [129600.0, 7.0], [137600.0, 1.0], [135300.0, 2.0], [141700.0, 3.0], [68700.0, 2.0], [71900.0, 1.0], [78300.0, 1.0], [84700.0, 2.0], [87900.0, 1.0], [91100.0, 1.0], [100700.0, 20.0], [133000.0, 86.0], [165000.0, 7.0], [33900.0, 6.0], [137100.0, 3.0], [35500.0, 1.0], [143500.0, 22.0], [37100.0, 8.0], [41900.0, 2.0], [48300.0, 11.0], [53100.0, 2.0], [62700.0, 4.0], [64300.0, 9.0], [67800.0, 9.0], [71000.0, 1.0], [74200.0, 9.0], [80600.0, 1.0], [83800.0, 14.0], [87000.0, 1.0], [96600.0, 1.0], [128600.0, 81.0], [134800.0, 35.0], [141200.0, 2.0], [132500.0, 1.0], [222100.0, 1.0], [228500.0, 1.0], [66900.0, 3.0], [73300.0, 66.0], [70100.0, 18.0], [76500.0, 5.0], [86100.0, 1.0], [95700.0, 3.0], [98900.0, 5.0], [102100.0, 1.0], [127700.0, 8.0], [130900.0, 65.0], [17300.0, 67.0], [16500.0, 8.0], [18100.0, 74.0], [18900.0, 30.0], [21300.0, 9.0], [20500.0, 15.0], [22100.0, 7.0], [22900.0, 3.0], [24500.0, 2.0], [25300.0, 14.0], [26900.0, 1.0], [27700.0, 4.0], [28500.0, 5.0], [29300.0, 29.0], [30100.0, 1.0], [31700.0, 1.0], [30900.0, 8.0], [32500.0, 14.0], [34600.0, 6.0], [134300.0, 1.0], [39400.0, 1.0], [42600.0, 3.0], [44200.0, 7.0], [47400.0, 5.0], [50600.0, 27.0], [53800.0, 1.0], [57000.0, 1.0], [55400.0, 2.0], [58600.0, 16.0], [60200.0, 53.0], [61800.0, 2.0], [63400.0, 4.0], [65000.0, 9.0], [69200.0, 6.0], [66000.0, 5.0], [72400.0, 17.0], [78800.0, 6.0], [82000.0, 8.0], [91600.0, 2.0], [94800.0, 1.0], [98000.0, 3.0], [101200.0, 8.0], [133600.0, 18.0], [216800.0, 4.0], [137700.0, 2.0], [65900.0, 1.0], [72300.0, 2.0], [81900.0, 3.0], [94700.0, 1.0], [97900.0, 1.0], [101100.0, 3.0], [107500.0, 31.0], [129900.0, 1.0], [141800.0, 3.0], [34100.0, 2.0], [133100.0, 4.0], [35700.0, 11.0], [37300.0, 7.0], [38900.0, 1.0], [40500.0, 1.0], [158700.0, 2.0], [42100.0, 1.0], [45300.0, 1.0], [46900.0, 1.0], [48500.0, 5.0], [51700.0, 4.0], [54900.0, 13.0], [59700.0, 2.0], [61300.0, 2.0], [62900.0, 2.0], [64500.0, 3.0], [68200.0, 11.0], [71400.0, 1.0], [77800.0, 2.0], [74600.0, 2.0], [81000.0, 9.0], [84200.0, 1.0], [87400.0, 1.0], [90600.0, 2.0], [93800.0, 3.0], [100200.0, 97.0], [103400.0, 1.0], [125800.0, 1.0], [129000.0, 5.0], [137200.0, 3.0], [143600.0, 27.0], [134900.0, 13.0], [141300.0, 3.0], [147700.0, 3.0], [230900.0, 2.0], [67300.0, 88.0], [70500.0, 1.0], [73700.0, 12.0], [80100.0, 6.0], [83300.0, 7.0], [99300.0, 2.0], [128100.0, 9.0], [8300.0, 387.0], [8700.0, 89.0], [9100.0, 327.0], [9500.0, 18.0], [9900.0, 87.0], [158200.0, 1.0], [10700.0, 49.0], [10300.0, 62.0], [11100.0, 70.0], [11500.0, 39.0], [11900.0, 172.0], [12300.0, 98.0], [12700.0, 76.0], [13100.0, 74.0], [13500.0, 48.0], [14300.0, 27.0], [13900.0, 92.0], [14700.0, 1.0], [15100.0, 17.0], [15500.0, 60.0], [15900.0, 29.0], [16300.0, 13.0], [16600.0, 2.0], [17400.0, 17.0], [18200.0, 2.0], [19000.0, 24.0], [20600.0, 2.0], [21400.0, 8.0], [22200.0, 14.0], [23000.0, 21.0], [23800.0, 2.0], [25400.0, 2.0], [26200.0, 1.0], [27000.0, 9.0], [28600.0, 2.0], [27800.0, 14.0], [29400.0, 8.0], [30200.0, 4.0], [31800.0, 1.0], [32600.0, 29.0], [33200.0, 2.0], [36400.0, 1.0], [39600.0, 2.0], [42800.0, 2.0], [44400.0, 52.0], [47600.0, 1.0], [50800.0, 1.0], [49200.0, 5.0], [54000.0, 2.0], [58800.0, 5.0], [62000.0, 3.0], [63600.0, 3.0], [65200.0, 95.0], [69600.0, 2.0], [66400.0, 17.0], [72800.0, 3.0], [76000.0, 1.0], [79200.0, 1.0], [82400.0, 33.0], [85600.0, 3.0], [92000.0, 3.0], [101600.0, 50.0], [130400.0, 3.0], [164800.0, 2.0], [149700.0, 3.0], [156100.0, 1.0], [69500.0, 5.0], [66300.0, 140.0], [72700.0, 5.0], [79100.0, 1.0], [82300.0, 14.0], [85500.0, 3.0], [88700.0, 1.0], [91900.0, 5.0], [95100.0, 2.0], [101500.0, 51.0], [104700.0, 20.0], [153800.0, 1.0], [34300.0, 10.0], [138700.0, 6.0], [35900.0, 4.0], [151500.0, 2.0], [37500.0, 1.0], [40700.0, 3.0], [42300.0, 3.0], [45500.0, 2.0], [47100.0, 3.0], [48700.0, 2.0], [51900.0, 26.0], [55100.0, 1.0], [56700.0, 13.0], [59900.0, 14.0], [63100.0, 2.0], [64700.0, 21.0], [68600.0, 1.0], [71800.0, 4.0], [75000.0, 4.0], [78200.0, 1.0], [100600.0, 43.0], [129400.0, 3.0], [136400.0, 1.0], [181200.0, 1.0], [166100.0, 7.0], [230100.0, 1.0], [67700.0, 2.0], [74100.0, 8.0], [86900.0, 3.0], [106100.0, 1.0], [102900.0, 2.0], [128500.0, 16.0], [131800.0, 36.0], [138200.0, 1.0], [151000.0, 3.0], [16700.0, 6.0], [18300.0, 27.0], [17500.0, 34.0], [19100.0, 5.0], [19900.0, 27.0], [21500.0, 3.0], [22300.0, 25.0], [23100.0, 9.0], [23900.0, 1.0], [25500.0, 3.0], [24700.0, 1.0], [27100.0, 1.0], [27900.0, 2.0], [28700.0, 2.0], [29500.0, 17.0], [30300.0, 1.0], [31100.0, 42.0], [32700.0, 6.0], [31900.0, 5.0], [33400.0, 14.0], [135900.0, 4.0], [36600.0, 2.0], [35000.0, 8.0], [148700.0, 11.0], [39800.0, 1.0], [43000.0, 2.0], [41400.0, 51.0], [44600.0, 8.0], [46200.0, 2.0], [47800.0, 6.0], [49400.0, 3.0], [52600.0, 4.0], [55800.0, 2.0], [57400.0, 2.0], [59000.0, 4.0], [65400.0, 77.0], [66800.0, 6.0], [70000.0, 21.0], [73200.0, 10.0], [76400.0, 1.0], [79600.0, 1.0], [82800.0, 21.0], [89200.0, 2.0], [95600.0, 1.0], [102000.0, 1.0], [127600.0, 2.0], [130800.0, 33.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 240800.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 358.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 178283.0, "series": [{"data": [[0.0, 178283.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 126423.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 24936.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 358.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 491.4108053007134, "minX": 1.68286374E12, "maxY": 3000.0, "series": [{"data": [[1.68286386E12, 3000.0], [1.6828638E12, 3000.0], [1.68286404E12, 2939.6168329352286], [1.68286392E12, 3000.0], [1.68286374E12, 3000.0], [1.6828641E12, 491.4108053007134], [1.68286398E12, 3000.0]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6828641E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 134.0, "minX": 1.0, "maxY": 191069.0, "series": [{"data": [[3.0, 85318.0], [5.0, 85319.0], [6.0, 85318.0], [8.0, 78353.0], [10.0, 85314.0], [12.0, 78344.5], [14.0, 85306.0], [15.0, 85305.0], [17.0, 71370.0], [18.0, 71372.0], [19.0, 71367.0], [20.0, 71367.0], [21.0, 71190.0], [22.0, 71190.0], [23.0, 71186.0], [24.0, 71185.0], [25.0, 71181.0], [26.0, 71179.0], [27.0, 71179.0], [28.0, 71177.0], [29.0, 71177.0], [31.0, 70491.5], [33.0, 84418.0], [35.0, 77454.5], [34.0, 70490.0], [38.0, 75132.66666666667], [40.0, 70490.5], [43.0, 70490.0], [42.0, 70487.5], [44.0, 70488.0], [47.0, 70487.5], [46.0, 70490.0], [49.0, 70486.0], [48.0, 70486.0], [50.0, 70485.0], [53.0, 70487.0], [52.0, 77450.0], [55.0, 70487.0], [54.0, 70484.0], [57.0, 70483.5], [59.0, 84410.0], [61.0, 70482.5], [60.0, 70483.0], [67.0, 70478.0], [65.0, 70481.0], [64.0, 70481.33333333333], [70.0, 84407.0], [69.0, 70476.0], [68.0, 70479.0], [75.0, 70473.0], [74.0, 70475.0], [73.0, 70477.0], [72.0, 77440.0], [79.0, 84392.0], [78.0, 70464.0], [77.0, 77429.5], [83.0, 70457.0], [82.0, 70460.0], [81.0, 70460.0], [80.0, 70460.0], [86.0, 70458.0], [84.0, 70459.0], [91.0, 84379.0], [90.0, 84380.0], [89.0, 84383.0], [88.0, 77417.0], [95.0, 84373.0], [94.0, 77408.5], [92.0, 70448.0], [99.0, 70439.0], [98.0, 84371.0], [97.0, 70441.0], [96.0, 84371.0], [102.0, 70439.0], [100.0, 70439.0], [106.0, 70433.0], [105.0, 84365.0], [104.0, 70439.0], [111.0, 70424.0], [110.0, 77394.5], [108.0, 70430.5], [115.0, 70425.0], [114.0, 70423.0], [113.0, 70425.0], [119.0, 70411.0], [117.0, 70411.0], [116.0, 70424.0], [123.0, 70404.0], [122.0, 77369.0], [120.0, 70411.0], [127.0, 77361.0], [126.0, 70395.0], [125.0, 84326.0], [135.0, 70382.0], [134.0, 84310.0], [133.0, 70384.0], [132.0, 84317.0], [131.0, 75035.0], [128.0, 84322.0], [143.0, 100945.0], [142.0, 100950.0], [141.0, 100951.0], [140.0, 70366.0], [139.0, 70371.0], [138.0, 84307.0], [137.0, 70378.5], [150.0, 70190.0], [149.0, 70196.0], [148.0, 70196.0], [147.0, 74837.66666666667], [144.0, 84124.0], [159.0, 84106.0], [158.0, 70177.0], [157.0, 84108.0], [156.0, 70180.0], [155.0, 70186.0], [154.0, 70187.0], [153.0, 70186.0], [152.0, 84118.0], [167.0, 100853.0], [166.0, 100856.0], [165.0, 100881.0], [164.0, 100882.0], [163.0, 101043.5], [162.0, 100884.0], [160.0, 84104.0], [174.0, 101094.0], [173.0, 100981.0], [172.0, 100826.5], [168.0, 100844.0], [183.0, 100589.0], [181.0, 100794.0], [180.0, 100861.0], [179.0, 100812.33333333333], [178.0, 100867.0], [176.0, 100938.0], [191.0, 102617.0], [190.0, 104657.0], [188.0, 106460.5], [186.0, 108261.0], [185.0, 102626.0], [199.0, 83320.0], [198.0, 69394.0], [197.0, 76358.5], [195.0, 83324.0], [194.0, 69395.0], [193.0, 83324.0], [207.0, 82820.33333333333], [204.0, 75320.0], [203.0, 68476.0], [202.0, 69386.0], [201.0, 100445.0], [200.0, 69390.0], [214.0, 82819.0], [213.0, 82403.0], [212.0, 82404.5], [210.0, 82818.5], [208.0, 75318.0], [222.0, 82817.0], [221.0, 82402.0], [220.0, 82818.0], [219.0, 82401.0], [218.0, 68472.0], [217.0, 75439.0], [216.0, 82819.0], [231.0, 82812.0], [229.0, 82814.5], [227.0, 82400.0], [226.0, 82399.0], [225.0, 82816.0], [224.0, 75436.0], [239.0, 82806.0], [238.0, 82388.0], [237.0, 82393.0], [236.0, 82808.0], [235.0, 68465.0], [234.0, 68468.0], [233.0, 82812.0], [232.0, 75640.5], [246.0, 82383.5], [244.0, 68455.0], [243.0, 77885.0], [240.0, 82805.0], [255.0, 75292.0], [254.0, 79045.0], [252.0, 68451.0], [251.0, 68450.0], [250.0, 68454.0], [249.0, 68454.0], [248.0, 82592.5], [270.0, 68432.0], [271.0, 75604.5], [268.0, 68431.0], [258.0, 68444.0], [257.0, 68447.0], [256.0, 68447.0], [267.0, 82777.0], [265.0, 68432.0], [264.0, 82777.0], [263.0, 68439.0], [262.0, 82781.0], [261.0, 82786.0], [260.0, 75614.0], [275.0, 82763.0], [286.0, 68409.0], [285.0, 68409.0], [283.0, 88011.0], [280.0, 82756.0], [279.0, 82758.0], [277.0, 82757.0], [274.0, 68420.0], [273.0, 82763.0], [272.0, 68421.0], [302.0, 68385.0], [303.0, 68387.0], [301.0, 68385.0], [299.0, 68385.33333333333], [298.0, 82730.0], [295.0, 75558.0], [293.0, 82731.0], [292.0, 68407.0], [289.0, 68408.0], [288.0, 68408.5], [318.0, 67391.0], [319.0, 67391.0], [316.0, 67392.0], [307.0, 75552.0], [305.0, 68384.0], [315.0, 67395.0], [314.0, 67395.0], [313.0, 70816.5], [311.0, 82713.0], [310.0, 68370.0], [309.0, 68374.0], [335.0, 70791.0], [333.0, 67372.0], [323.0, 67389.5], [321.0, 81734.0], [320.0, 67391.0], [331.0, 67380.0], [330.0, 67384.0], [329.0, 74227.0], [328.0, 67383.0], [327.0, 67388.0], [326.0, 67388.0], [325.0, 74562.5], [338.0, 66372.0], [349.0, 65472.0], [351.0, 65470.0], [348.0, 66358.5], [346.0, 66362.0], [345.0, 66363.5], [343.0, 66369.0], [342.0, 66371.0], [340.0, 66371.5], [337.0, 66376.0], [336.0, 67368.0], [365.0, 65467.0], [367.0, 65467.0], [364.0, 65467.0], [362.0, 65469.5], [360.0, 65470.5], [359.0, 65469.0], [358.0, 65470.666666666664], [357.0, 65472.0], [353.0, 65472.5], [352.0, 65471.0], [371.0, 65463.0], [381.0, 65460.0], [379.0, 65459.0], [377.0, 65460.0], [375.0, 65462.0], [374.0, 65461.5], [373.0, 65460.0], [370.0, 65467.0], [369.0, 65465.0], [368.0, 65467.5], [397.0, 65438.0], [398.0, 65438.0], [396.0, 65441.0], [395.0, 65456.5], [393.0, 65458.0], [392.0, 65457.0], [390.0, 65457.5], [388.0, 65457.5], [387.0, 65456.0], [386.0, 65459.0], [384.0, 65459.333333333336], [414.0, 65405.0], [415.0, 65403.0], [413.0, 65406.0], [411.0, 65408.0], [410.0, 65430.0], [408.0, 71984.0], [405.0, 69446.0], [404.0, 65434.0], [403.0, 65435.0], [402.0, 65435.0], [401.0, 65435.0], [400.0, 65437.5], [429.0, 68356.0], [430.0, 65179.0], [428.0, 68356.0], [419.0, 82088.0], [418.0, 67739.0], [417.0, 75232.5], [427.0, 68355.0], [426.0, 65386.0], [425.0, 65394.5], [423.0, 68365.0], [422.0, 82080.0], [421.0, 65399.0], [420.0, 82088.0], [446.0, 73919.5], [447.0, 67377.0], [444.0, 67379.5], [443.0, 67379.0], [442.0, 64408.0], [441.0, 67381.0], [439.0, 65896.5], [438.0, 65578.5], [435.0, 81099.0], [434.0, 68147.0], [433.0, 65177.0], [432.0, 75006.0], [462.0, 67357.5], [460.0, 64388.0], [451.0, 64408.0], [450.0, 66386.66666666667], [459.0, 67359.0], [458.0, 81080.0], [457.0, 67363.0], [456.0, 67369.0], [455.0, 65884.0], [453.0, 68416.0], [452.0, 67375.0], [467.0, 67357.5], [478.0, 66417.0], [477.0, 67341.0], [475.0, 67343.0], [474.0, 67356.0], [472.0, 67355.5], [471.0, 67355.0], [470.0, 67357.0], [469.0, 67358.0], [466.0, 67355.0], [464.0, 67358.0], [482.0, 66096.5], [494.0, 65779.0], [493.0, 65780.0], [491.0, 67623.0], [489.0, 66411.0], [488.0, 65780.0], [487.0, 66202.33333333333], [484.0, 66096.0], [481.0, 66415.0], [480.0, 66415.0], [510.0, 66402.0], [511.0, 68822.0], [509.0, 65768.0], [508.0, 66403.0], [507.0, 66406.0], [506.0, 68825.0], [505.0, 65775.0], [504.0, 68825.0], [503.0, 67617.5], [499.0, 66092.0], [497.0, 66932.0], [496.0, 66410.0], [501.0, 67850.0], [537.0, 65749.0], [531.0, 68990.66666666667], [539.0, 67427.0], [542.0, 66170.33333333333], [528.0, 66387.0], [538.0, 65748.0], [536.0, 70974.0], [518.0, 66391.0], [516.0, 66395.0], [515.0, 66079.0], [514.0, 65762.0], [512.0, 66399.0], [526.0, 65755.0], [525.0, 69451.5], [523.0, 66389.0], [522.0, 66911.5], [521.0, 65755.0], [520.0, 65755.0], [534.0, 65749.0], [533.0, 73146.0], [532.0, 66388.0], [569.0, 66205.5], [574.0, 76638.0], [575.0, 82545.0], [561.0, 65704.0], [573.0, 69722.0], [572.0, 69723.0], [571.0, 69724.5], [559.0, 66341.0], [544.0, 66585.5], [546.0, 66379.0], [545.0, 72907.0], [549.0, 73140.0], [548.0, 68110.0], [551.0, 73138.0], [550.0, 67422.0], [558.0, 65712.0], [557.0, 65719.0], [556.0, 65734.0], [555.0, 67416.0], [554.0, 66756.33333333333], [567.0, 64678.0], [566.0, 65527.0], [564.0, 69225.0], [562.0, 69400.0], [606.0, 67242.0], [595.0, 54611.0], [607.0, 67240.0], [592.0, 54613.0], [594.0, 54612.0], [593.0, 54612.5], [604.0, 63705.0], [603.0, 54596.0], [602.0, 54603.666666666664], [583.0, 85865.0], [582.0, 67943.0], [581.0, 67942.0], [580.0, 85871.0], [579.0, 85870.0], [577.0, 59224.0], [576.0, 100155.0], [591.0, 54612.5], [588.0, 54614.5], [586.0, 54615.0], [585.0, 85862.0], [584.0, 85867.0], [599.0, 54604.0], [597.0, 54609.0], [596.0, 54612.0], [634.0, 100691.0], [626.0, 100701.0], [637.0, 101015.0], [638.0, 100683.0], [625.0, 101034.5], [635.0, 100688.0], [633.0, 100861.5], [614.0, 100008.0], [613.0, 52542.0], [612.0, 53185.0], [611.0, 60362.0], [609.0, 67537.5], [623.0, 100869.5], [621.0, 100706.0], [620.0, 100706.66666666667], [618.0, 100707.0], [616.0, 101039.0], [629.0, 100695.0], [628.0, 101027.0], [627.0, 100700.0], [665.0, 55381.0], [670.0, 55378.0], [671.0, 47314.0], [656.0, 64721.0], [659.0, 64715.0], [658.0, 64721.0], [669.0, 55379.5], [667.0, 55378.0], [666.0, 55380.0], [655.0, 64724.0], [640.0, 100846.0], [642.0, 101009.0], [641.0, 101011.0], [644.0, 100675.0], [643.0, 100676.0], [647.0, 100672.0], [646.0, 100672.5], [654.0, 66928.0], [653.0, 64313.0], [652.0, 64727.0], [650.0, 54510.0], [649.0, 67362.0], [648.0, 55406.0], [663.0, 55381.0], [662.0, 55382.0], [661.0, 57175.0], [660.0, 64303.0], [697.0, 67206.5], [702.0, 74236.0], [703.0, 147348.0], [690.0, 59951.0], [688.0, 91943.0], [701.0, 70596.0], [699.0, 59947.0], [698.0, 74155.0], [687.0, 103652.5], [673.0, 58679.0], [672.0, 46683.0], [675.0, 58677.0], [674.0, 58679.0], [677.0, 58675.0], [676.0, 58675.0], [679.0, 60868.0], [678.0, 58675.0], [685.0, 59952.0], [684.0, 59950.0], [683.0, 47421.0], [682.0, 60863.0], [681.0, 60865.0], [680.0, 60867.0], [695.0, 75944.5], [693.0, 59950.0], [692.0, 147343.0], [691.0, 47419.0], [730.0, 147330.0], [723.0, 47398.0], [734.0, 83860.0], [735.0, 115589.0], [721.0, 63729.666666666664], [720.0, 74135.0], [733.0, 83859.5], [729.0, 78997.0], [711.0, 147329.0], [710.0, 79008.0], [708.0, 47408.0], [707.0, 147344.0], [706.0, 74151.0], [705.0, 59944.0], [704.0, 59943.0], [717.0, 71897.0], [715.0, 60768.5], [713.0, 147336.0], [712.0, 59932.0], [727.0, 147318.0], [726.0, 147331.5], [724.0, 65629.0], [760.0, 70140.0], [756.0, 60303.75], [767.0, 53458.0], [766.0, 56721.666666666664], [763.0, 51927.0], [750.0, 51930.0], [737.0, 147326.5], [739.0, 83857.0], [738.0, 147331.0], [741.0, 147323.0], [740.0, 83853.0], [743.0, 147303.0], [742.0, 147318.0], [748.0, 56779.0], [747.0, 68223.0], [746.0, 83826.0], [745.0, 147303.0], [744.0, 83833.0], [759.0, 191069.0], [758.0, 59122.0], [757.0, 51930.0], [752.0, 54353.5], [792.0, 42407.0], [798.0, 59677.5], [799.0, 70110.0], [784.0, 56755.0], [786.0, 59101.0], [785.0, 51908.0], [796.0, 70111.5], [794.0, 56747.0], [793.0, 51899.0], [783.0, 51910.0], [769.0, 49272.0], [768.0, 51927.0], [773.0, 55520.0], [771.0, 51924.5], [775.0, 51921.0], [774.0, 73371.0], [782.0, 70123.0], [781.0, 66163.0], [779.0, 49265.0], [778.0, 51919.0], [776.0, 70131.0], [791.0, 51905.0], [790.0, 51905.0], [789.0, 54329.0], [787.0, 51906.0], [830.0, 59625.0], [831.0, 49195.0], [828.0, 51848.0], [827.0, 51856.0], [826.0, 70067.5], [824.0, 56710.0], [815.0, 68303.33333333333], [800.0, 51900.0], [803.0, 70105.0], [802.0, 51897.5], [807.0, 56743.0], [805.0, 49243.0], [812.0, 42381.0], [811.0, 51884.0], [809.0, 59090.0], [808.0, 53511.333333333336], [823.0, 47124.0], [821.0, 64014.333333333336], [818.0, 58920.0], [817.0, 54298.0], [839.0, 70050.0], [861.0, 66112.0], [863.0, 72497.0], [860.0, 66648.66666666667], [859.0, 69356.0], [856.0, 58630.5], [838.0, 70050.0], [837.0, 55438.0], [836.0, 51842.0], [834.0, 70055.0], [833.0, 70051.0], [832.0, 51844.0], [846.0, 67045.0], [845.0, 146270.0], [844.0, 51826.0], [843.0, 70036.5], [841.0, 63367.5], [854.0, 58744.333333333336], [851.0, 65813.5], [849.0, 67046.0], [848.0, 67048.0], [894.0, 82079.0], [895.0, 59920.5], [893.0, 47893.0], [892.0, 54941.0], [890.0, 62244.0], [888.0, 54941.0], [878.0, 77139.0], [865.0, 66112.0], [864.0, 42419.0], [868.0, 78881.0], [866.0, 38404.0], [871.0, 55678.0], [869.0, 66108.5], [877.0, 48788.5], [875.0, 53959.0], [873.0, 52328.0], [872.0, 47900.0], [887.0, 57119.0], [885.0, 63031.5], [884.0, 49428.0], [882.0, 54043.75], [926.0, 65445.5], [927.0, 39723.0], [912.0, 53816.0], [925.0, 75875.0], [924.0, 86657.0], [921.0, 42137.5], [920.0, 68140.0], [910.0, 61052.5], [896.0, 78873.0], [900.0, 55961.5], [898.0, 67407.0], [903.0, 60501.5], [901.0, 54924.0], [908.0, 52699.0], [907.0, 50276.5], [905.0, 53473.5], [918.0, 44233.0], [917.0, 63790.666666666664], [914.0, 69399.0], [913.0, 69290.0], [952.0, 46862.0], [957.0, 85892.0], [959.0, 69327.0], [945.0, 86643.0], [944.0, 68126.0], [956.0, 84007.5], [954.0, 64467.0], [953.0, 81049.0], [943.0, 47111.0], [928.0, 41399.0], [930.0, 65093.0], [929.0, 86656.0], [932.0, 86654.0], [931.0, 86653.0], [934.0, 42772.0], [933.0, 51725.0], [942.0, 85912.0], [941.0, 85121.5], [940.0, 37374.0], [938.0, 41392.0], [937.0, 68436.0], [936.0, 61401.5], [951.0, 49287.0], [949.0, 86636.0], [948.0, 52928.0], [946.0, 43228.0], [984.0, 81363.0], [988.0, 79012.0], [991.0, 67469.0], [978.0, 85584.0], [977.0, 70971.5], [981.0, 66150.0], [979.0, 76168.0], [990.0, 67003.0], [989.0, 79010.0], [987.0, 74436.0], [986.0, 71600.0], [985.0, 81362.0], [975.0, 50243.0], [962.0, 86618.0], [961.0, 77682.5], [964.0, 51683.0], [963.0, 86614.0], [967.0, 74806.0], [965.0, 51672.0], [974.0, 74593.0], [973.0, 61093.0], [972.0, 85594.0], [970.0, 76384.0], [968.0, 50467.5], [983.0, 73502.0], [982.0, 81974.0], [1020.0, 63314.0], [1023.0, 84029.0], [1009.0, 70216.0], [1008.0, 64632.0], [1011.0, 64103.0], [1010.0, 47535.0], [1013.0, 67351.0], [1012.0, 66862.0], [1022.0, 63037.0], [1021.0, 62304.0], [1019.0, 63316.0], [1018.0, 62008.0], [1017.0, 63016.0], [1016.0, 96830.0], [1007.0, 71224.0], [993.0, 66194.0], [992.0, 68576.0], [995.0, 72933.0], [994.0, 65187.0], [997.0, 66554.0], [996.0, 71926.0], [999.0, 65545.0], [998.0, 65547.0], [1006.0, 62437.0], [1005.0, 44531.0], [1004.0, 63155.0], [1003.0, 63157.0], [1002.0, 64164.0], [1001.0, 64536.0], [1000.0, 64169.0], [1015.0, 97837.0], [1014.0, 66343.0], [1026.0, 69886.0], [1032.0, 67871.0], [1046.0, 82109.0], [1050.0, 1685.0], [1024.0, 70606.0], [1028.0, 68878.0], [1030.0, 26282.0], [1034.0, 66724.0], [1036.0, 63649.0], [1038.0, 16072.0], [1044.0, 62531.0], [1042.0, 63541.0], [1040.0, 64705.0], [1468.0, 4737.0], [1498.0, 69866.0], [1484.0, 693.0], [1482.0, 64816.0], [1598.0, 687.0], [1660.0, 685.0], [1640.0, 687.0], [1632.0, 686.4782608695652], [1634.0, 688.6666666666666], [1636.0, 686.8181818181819], [1638.0, 688.0], [1642.0, 689.0], [1644.0, 687.0], [1646.0, 688.0], [1656.0, 685.2307692307692], [1654.0, 685.0], [1650.0, 685.8333333333333], [1648.0, 687.0], [1614.0, 688.3333333333334], [1604.0, 687.6666666666666], [1600.0, 687.0], [1628.0, 687.5], [1626.0, 689.0], [1624.0, 688.6666666666666], [1622.0, 686.5], [1618.0, 688.5714285714286], [1616.0, 687.0], [1722.0, 682.6250000000001], [1714.0, 682.8421052631579], [1726.0, 681.6666666666666], [1696.0, 684.0], [1698.0, 684.4545454545454], [1700.0, 684.6666666666666], [1702.0, 683.8333333333334], [1704.0, 684.2], [1706.0, 684.2], [1708.0, 683.0], [1710.0, 683.2499999999999], [1724.0, 681.6666666666667], [1720.0, 682.0], [1718.0, 682.0], [1712.0, 683.4], [1664.0, 685.0], [1668.0, 686.1111111111111], [1670.0, 685.5], [1672.0, 686.25], [1674.0, 684.4444444444445], [1676.0, 684.0], [1678.0, 684.7142857142858], [1694.0, 683.8888888888889], [1692.0, 684.2], [1690.0, 683.0], [1688.0, 683.8333333333334], [1686.0, 684.4285714285714], [1684.0, 684.6], [1682.0, 685.2222222222222], [1680.0, 685.0], [1734.0, 682.2], [1764.0, 681.0], [1776.0, 680.3076923076923], [1728.0, 680.0], [1732.0, 682.5], [1730.0, 682.5], [1736.0, 683.0], [1738.0, 684.0], [1740.0, 683.0], [1742.0, 682.0], [1758.0, 681.0], [1754.0, 682.0], [1752.0, 681.5], [1750.0, 680.0], [1748.0, 681.0], [1746.0, 680.8749999999999], [1744.0, 682.5714285714286], [1760.0, 681.3333333333334], [1762.0, 680.2], [1774.0, 678.0], [1772.0, 681.0], [1768.0, 681.0], [1824.0, 668.0], [1852.0, 66348.0], [1826.0, 666.0], [1830.0, 666.0], [1832.0, 666.0], [1838.0, 665.0], [1854.0, 62771.0], [1848.0, 665.0], [1846.0, 666.0], [1844.0, 664.0], [1842.0, 664.0], [1822.0, 666.3333333333334], [1820.0, 665.8], [1818.0, 666.2], [1816.0, 665.6], [1812.0, 669.0], [1858.0, 2080.5], [1866.0, 548.0], [1856.0, 559.0], [1860.0, 556.0], [1868.0, 531.0], [1864.0, 550.0], [1862.0, 2230.0], [2296.0, 500.0], [2324.0, 497.93333333333334], [2308.0, 500.0], [2364.0, 497.14285714285717], [2372.0, 495.6666666666667], [2424.0, 489.0], [2304.0, 500.0], [2320.0, 498.0], [2328.0, 499.22222222222223], [2332.0, 497.85714285714283], [2356.0, 496.8571428571429], [2352.0, 497.0], [2348.0, 497.6], [2344.0, 496.6818181818181], [2336.0, 498.3750000000001], [2444.0, 482.0], [2496.0, 386.0], [2536.0, 371.5], [2528.0, 372.0], [2432.0, 488.83333333333337], [2436.0, 488.0], [2440.0, 488.16666666666663], [2448.0, 483.0], [2456.0, 483.0], [2492.0, 386.57142857142856], [2480.0, 388.0], [2476.0, 386.3333333333333], [2464.0, 387.0], [2680.0, 209.0], [2672.0, 210.66666666666666], [2624.0, 212.0], [2636.0, 211.0], [2648.0, 211.0], [2652.0, 209.25], [2684.0, 208.33333333333334], [2668.0, 210.0], [2664.0, 209.8], [2660.0, 209.0], [2656.0, 209.0], [2568.0, 214.0], [2564.0, 214.0], [2616.0, 212.0], [2608.0, 211.0], [2596.0, 211.33333333333334], [2812.0, 199.0], [2756.0, 201.5], [2772.0, 202.0], [2780.0, 200.33333333333334], [2808.0, 198.5], [2800.0, 199.0], [2792.0, 200.0], [2788.0, 200.0], [2784.0, 200.0], [2700.0, 209.0], [2692.0, 209.0], [2936.0, 137.0], [2880.0, 190.0], [2908.0, 181.5], [2940.0, 136.0], [2916.0, 180.4], [2816.0, 199.0], [2824.0, 4703.0], [2832.0, 198.0], [2836.0, 198.33333333333334], [2844.0, 4703.0], [2872.0, 191.0], [2852.0, 196.16666666666666], [2848.0, 197.0], [2948.0, 134.0], [2952.0, 2363.0], [3000.0, 2120.3112997529265], [2956.0, 4502.0], [2984.0, 3150.4285714285716], [2976.0, 1654.0], [2972.0, 3068.5], [2421.0, 489.0], [2429.0, 489.14285714285717], [2369.0, 495.4], [2373.0, 1055.6666666666665], [2317.0, 497.6666666666667], [2325.0, 498.0], [2329.0, 498.2], [2333.0, 498.0], [2365.0, 498.0], [2361.0, 649.3636363636364], [2357.0, 497.0], [2353.0, 497.0], [2349.0, 497.462962962963], [2345.0, 497.3333333333333], [2341.0, 497.61538461538464], [2337.0, 498.2272727272727], [2377.0, 496.0], [2497.0, 944.6666666666667], [2517.0, 374.5], [2549.0, 214.6], [2509.0, 377.0], [2513.0, 375.7857142857143], [2521.0, 374.0], [2525.0, 373.0], [2533.0, 371.0], [2433.0, 488.0], [2437.0, 697.5], [2449.0, 483.0], [2457.0, 481.2], [2489.0, 386.0], [2469.0, 387.875], [2673.0, 545.0], [2633.0, 211.0], [2637.0, 211.5], [2645.0, 211.0], [2649.0, 210.66666666666666], [2653.0, 210.0], [2669.0, 210.0], [2665.0, 210.0], [2657.0, 209.0], [2561.0, 214.0], [2569.0, 400.8888888888889], [2617.0, 211.5], [2609.0, 211.0], [2601.0, 212.0], [2757.0, 203.0], [2753.0, 201.0], [2761.0, 200.0], [2769.0, 200.0], [2773.0, 200.0], [2781.0, 200.0], [2809.0, 199.0], [2805.0, 199.0], [2801.0, 199.0], [2789.0, 200.25], [2785.0, 199.66666666666666], [2693.0, 208.33333333333334], [2941.0, 2388.5], [2881.0, 190.0], [2901.0, 181.0], [2905.0, 181.5], [2909.0, 836.6666666666667], [2937.0, 137.0], [2929.0, 415.4615384615385], [2917.0, 181.0], [2817.0, 199.0], [2821.0, 198.0], [2825.0, 198.0], [2833.0, 198.0], [2841.0, 867.8], [2877.0, 190.75], [2857.0, 1869.5], [2949.0, 1806.0], [2953.0, 4504.0], [2945.0, 135.0], [2957.0, 4500.0], [2961.0, 3043.0], [2977.0, 3027.0], [2965.0, 3074.5], [1031.0, 67867.0], [1025.0, 62363.0], [1027.0, 72223.0], [1029.0, 68876.0], [1033.0, 66865.0], [1035.0, 64652.0], [1037.0, 127056.0], [1039.0, 64706.0], [1049.0, 102911.5], [1047.0, 83011.0], [1045.0, 62529.0], [1043.0, 32108.0], [1041.0, 63540.0], [1599.0, 687.0], [1595.0, 687.4], [1659.0, 687.0], [1663.0, 686.0], [1633.0, 686.2], [1635.0, 687.1111111111111], [1637.0, 688.0], [1641.0, 687.9000000000001], [1643.0, 686.3333333333333], [1645.0, 687.0], [1647.0, 686.0], [1661.0, 684.3333333333334], [1655.0, 685.25], [1651.0, 685.2], [1649.0, 684.8571428571429], [1613.0, 686.6666666666666], [1611.0, 687.1666666666667], [1609.0, 687.4], [1601.0, 689.0], [1631.0, 687.2], [1629.0, 688.5], [1627.0, 686.5], [1625.0, 687.0], [1623.0, 689.0], [1621.0, 688.5], [1619.0, 688.4], [1617.0, 689.0], [1723.0, 682.5], [1697.0, 682.0], [1699.0, 683.75], [1701.0, 685.0], [1703.0, 684.1818181818181], [1705.0, 683.8], [1707.0, 683.6], [1709.0, 682.5], [1711.0, 682.75], [1725.0, 682.0], [1721.0, 682.5], [1719.0, 683.0], [1717.0, 683.0], [1715.0, 683.2], [1713.0, 683.0400000000001], [1695.0, 684.25], [1667.0, 685.7777777777778], [1665.0, 686.5], [1669.0, 684.75], [1671.0, 687.0], [1673.0, 684.8333333333333], [1675.0, 13778.4], [1677.0, 683.3333333333334], [1679.0, 686.0], [1693.0, 684.0], [1691.0, 685.5], [1689.0, 683.5], [1687.0, 684.4], [1685.0, 684.6666666666666], [1683.0, 683.0], [1681.0, 684.6], [1735.0, 683.0], [1769.0, 681.5], [1759.0, 680.0], [1731.0, 681.5], [1733.0, 682.1111111111111], [1737.0, 682.0], [1739.0, 681.5], [1741.0, 681.0], [1755.0, 684.0], [1749.0, 680.0], [1747.0, 682.5], [1745.0, 683.3333333333334], [1763.0, 681.125], [1775.0, 680.0], [1767.0, 681.6666666666666], [1765.0, 681.0], [1825.0, 668.0], [1827.0, 666.0], [1855.0, 66081.0], [1831.0, 666.25], [1837.0, 666.0], [1835.0, 666.0], [1839.0, 665.25], [1853.0, 4049.0], [1851.0, 664.3333333333334], [1847.0, 664.0], [1845.0, 665.0], [1823.0, 665.75], [1819.0, 666.2857142857143], [1817.0, 665.5], [1815.0, 666.0], [1877.0, 513.0], [1859.0, 556.0], [1871.0, 1550.0], [1869.0, 532.0], [1865.0, 549.0], [1861.0, 551.0], [2302.0, 499.0], [2298.0, 499.77777777777777], [2422.0, 489.1666666666667], [2430.0, 489.5], [2370.0, 495.5], [2374.0, 496.0], [2306.0, 500.5], [2318.0, 498.0], [2322.0, 497.6666666666667], [2326.0, 499.0], [2330.0, 498.25], [2334.0, 498.375], [2366.0, 496.5], [2362.0, 496.25], [2358.0, 496.9166666666667], [2354.0, 496.62962962962956], [2350.0, 617.4285714285714], [2346.0, 497.0], [2338.0, 497.6666666666667], [2378.0, 496.0], [2530.0, 372.5], [2446.0, 481.5], [2498.0, 385.0], [2518.0, 375.0], [2522.0, 374.0], [2538.0, 370.5], [2494.0, 386.0], [2434.0, 488.3333333333333], [2438.0, 488.0], [2442.0, 483.5], [2450.0, 482.0], [2458.0, 482.0], [2486.0, 387.0], [2482.0, 387.3333333333333], [2474.0, 386.0], [2466.0, 387.0], [2666.0, 210.0], [2686.0, 209.0], [2634.0, 211.0], [2674.0, 209.0], [2662.0, 209.66666666666666], [2590.0, 212.0], [2622.0, 212.0], [2614.0, 211.0], [2754.0, 203.0], [2810.0, 199.0], [2758.0, 202.0], [2770.0, 200.0], [2774.0, 201.0], [2778.0, 201.0], [2802.0, 199.5], [2794.0, 200.0], [2786.0, 200.0], [2702.0, 207.88888888888889], [2698.0, 208.0], [2690.0, 209.0], [2938.0, 136.0], [2930.0, 137.0], [2942.0, 135.0], [2886.0, 747.6666666666667], [2902.0, 181.0], [2906.0, 182.0], [2818.0, 198.0], [2822.0, 1036.5], [2826.0, 198.0], [2830.0, 199.0], [2834.0, 198.0], [2838.0, 199.0], [2846.0, 196.0], [2870.0, 191.0], [2866.0, 191.25000000000003], [2858.0, 4700.0], [2850.0, 197.0], [2954.0, 4502.0], [2970.0, 3999.6666666666665], [2946.0, 135.0], [2958.0, 4499.0], [2962.0, 4498.0], [2974.0, 3030.0], [2966.0, 4488.0], [2139.0, 506.0], [2303.0, 500.0], [2367.0, 497.25], [2323.0, 497.5], [2427.0, 489.0], [2307.0, 499.5], [2331.0, 497.99999999999994], [2335.0, 499.0], [2363.0, 497.0], [2359.0, 496.5], [2355.0, 496.2857142857143], [2351.0, 497.6], [2347.0, 497.5], [2343.0, 498.1428571428571], [2339.0, 498.3888888888889], [2379.0, 496.3809523809524], [2375.0, 495.5], [2559.0, 215.0], [2535.0, 371.0], [2515.0, 374.0], [2519.0, 375.0], [2523.0, 373.0], [2527.0, 372.0], [2555.0, 214.0], [2551.0, 214.0], [2539.0, 370.0], [2531.0, 372.0], [2435.0, 488.0], [2439.0, 488.0], [2443.0, 482.0], [2447.0, 484.0], [2451.0, 481.0], [2491.0, 387.0], [2671.0, 210.5], [2675.0, 209.0], [2679.0, 209.0], [2635.0, 211.0], [2643.0, 211.5], [2667.0, 210.0], [2659.0, 209.5], [2623.0, 212.0], [2615.0, 211.0], [2595.0, 1890.0], [2759.0, 760.6666666666667], [2755.0, 201.0], [2803.0, 199.0], [2815.0, 199.0], [2767.0, 200.66666666666666], [2771.0, 200.53846153846152], [2775.0, 200.66666666666666], [2779.0, 1038.5], [2811.0, 199.0], [2799.0, 200.0], [2795.0, 200.0], [2791.0, 200.0], [2695.0, 210.0], [2691.0, 209.0], [2923.0, 181.0], [2935.0, 137.0], [2899.0, 181.66666666666666], [2883.0, 190.0], [2903.0, 181.0], [2879.0, 191.0], [2823.0, 198.0], [2827.0, 1743.25], [2831.0, 198.0], [2839.0, 199.0], [2871.0, 191.0], [2855.0, 193.33333333333334], [2963.0, 1660.0], [2947.0, 134.0], [2955.0, 4504.0], [2959.0, 4499.0], [2975.0, 33363.0], [2967.0, 65076.0], [1.0, 85319.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[2987.3335090908904, 2333.942839393946]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 3000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 8240.4, "minX": 1.68286374E12, "maxY": 825410.7, "series": [{"data": [[1.68286386E12, 730273.3166666667], [1.6828638E12, 825410.7], [1.68286404E12, 340777.7833333333], [1.68286392E12, 820186.6333333333], [1.68286374E12, 422432.76666666666], [1.6828641E12, 10426.116666666667], [1.68286398E12, 803399.9666666667]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.68286386E12, 511551.6], [1.6828638E12, 580372.8], [1.68286404E12, 239131.2], [1.68286392E12, 569872.8], [1.68286374E12, 296721.6], [1.6828641E12, 8240.4], [1.68286398E12, 563102.4]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6828641E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 605.9128354659705, "minX": 1.68286374E12, "maxY": 71849.43934760445, "series": [{"data": [[1.68286386E12, 3599.5433852809783], [1.6828638E12, 1522.9549441324687], [1.68286404E12, 2725.479310102586], [1.68286392E12, 2001.600752520682], [1.68286374E12, 605.9128354659705], [1.6828641E12, 71849.43934760445], [1.68286398E12, 2082.1894623848293]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6828641E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 605.8813837617495, "minX": 1.68286374E12, "maxY": 71849.4271151885, "series": [{"data": [[1.68286386E12, 3564.710338724753], [1.6828638E12, 1522.9422509118338], [1.68286404E12, 2725.4698960236115], [1.68286392E12, 1827.1342632058625], [1.68286374E12, 605.8813837617495], [1.6828641E12, 71849.4271151885], [1.68286398E12, 2024.2988788502266]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6828641E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 9.045861170875332, "minX": 1.68286374E12, "maxY": 8713.643221202865, "series": [{"data": [[1.68286386E12, 1727.0717270537407], [1.6828638E12, 145.8461037457287], [1.68286404E12, 1190.781544189961], [1.68286392E12, 628.6711837502597], [1.68286374E12, 9.045861170875332], [1.6828641E12, 8713.643221202865], [1.68286398E12, 523.92991323016]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6828641E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 3.0, "minX": 1.68286374E12, "maxY": 240879.0, "series": [{"data": [[1.68286386E12, 151177.0], [1.6828638E12, 90638.0], [1.68286404E12, 228562.0], [1.68286392E12, 199711.0], [1.68286374E12, 30714.0], [1.6828641E12, 191069.0], [1.68286398E12, 240879.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.68286386E12, 657.0], [1.6828638E12, 140.90000000000146], [1.68286404E12, 916.0], [1.68286392E12, 681.0], [1.68286374E12, 160.0], [1.6828641E12, 86896.60000000002], [1.68286398E12, 1162.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.68286386E12, 141354.3100000001], [1.6828638E12, 15932.990000000002], [1.68286404E12, 102006.65000000197], [1.68286392E12, 100053.99], [1.68286374E12, 21351.87000000114], [1.6828641E12, 147330.0], [1.68286398E12, 10248.140000000778]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.68286386E12, 6143.0], [1.6828638E12, 7902.0], [1.68286404E12, 4472.0], [1.68286392E12, 981.0], [1.68286374E12, 7944.0], [1.6828641E12, 100879.8], [1.68286398E12, 1179.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.68286386E12, 20.0], [1.6828638E12, 3.0], [1.68286404E12, 31.0], [1.68286392E12, 36.0], [1.68286374E12, 5.0], [1.6828641E12, 37374.0], [1.68286398E12, 23.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.68286386E12, 517.0], [1.6828638E12, 54.0], [1.68286404E12, 597.0], [1.68286392E12, 561.0], [1.68286374E12, 99.0], [1.6828641E12, 68408.0], [1.68286398E12, 734.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6828641E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 6.0, "minX": 1.0, "maxY": 107542.0, "series": [{"data": [[2.0, 67177.0], [3.0, 64594.0], [4.0, 44132.5], [5.0, 57523.5], [6.0, 65708.0], [7.0, 64689.0], [8.0, 45289.0], [9.0, 52542.0], [12.0, 56029.5], [13.0, 74692.0], [14.0, 195.0], [15.0, 13771.0], [21.0, 10964.0], [22.0, 1479.5], [25.0, 67394.0], [26.0, 54613.0], [30.0, 57820.5], [32.0, 68267.5], [33.0, 59078.0], [34.0, 63197.0], [35.0, 100704.0], [45.0, 67358.0], [47.0, 3790.5], [55.0, 65513.0], [57.0, 52.0], [61.0, 61.0], [62.0, 205.0], [67.0, 69786.0], [74.0, 59951.5], [80.0, 56749.5], [82.0, 66407.5], [93.0, 65465.0], [99.0, 74.0], [96.0, 84.0], [103.0, 82385.0], [122.0, 89.0], [123.0, 70486.0], [157.0, 104.0], [178.0, 151.0], [180.0, 20975.5], [205.0, 15546.0], [204.0, 128.0], [218.0, 15401.5], [249.0, 10120.0], [262.0, 67.0], [265.0, 180.0], [264.0, 204.0], [292.0, 197.0], [290.0, 6131.5], [305.0, 8096.0], [314.0, 180.0], [334.0, 33.5], [322.0, 12110.0], [326.0, 205.0], [336.0, 129.0], [337.0, 100094.0], [346.0, 2945.0], [348.0, 209.0], [365.0, 4851.0], [371.0, 5121.0], [397.0, 7418.0], [408.0, 8858.0], [443.0, 109.0], [439.0, 200.0], [487.0, 9223.0], [505.0, 22.0], [520.0, 9148.0], [540.0, 319.0], [547.0, 37.0], [560.0, 119.0], [605.0, 598.0], [609.0, 7003.0], [657.0, 6.0], [670.0, 712.0], [662.0, 1014.0], [688.0, 206.0], [698.0, 420.0], [723.0, 37.0], [710.0, 167.0], [756.0, 10368.0], [759.0, 198.0], [775.0, 68.0], [780.0, 465.0], [801.0, 684.0], [847.0, 268.0], [862.0, 519.0], [874.0, 17.0], [882.0, 481.0], [923.0, 19.0], [919.0, 512.0], [951.0, 301.0], [946.0, 480.0], [941.0, 605.0], [942.0, 543.0], [964.0, 46.0], [981.0, 69.0], [973.0, 654.0], [976.0, 546.0], [984.0, 551.0], [986.0, 582.0], [969.0, 565.0], [994.0, 67.0], [1006.0, 553.0], [1010.0, 528.0], [1039.0, 190.0], [1052.0, 496.0], [1045.0, 14.0], [1065.0, 469.0], [1029.0, 551.0], [1059.0, 607.0], [1048.0, 491.5], [1026.0, 514.5], [1081.0, 521.0], [1077.0, 602.0], [1073.0, 593.0], [1101.0, 561.0], [1103.0, 89.0], [1141.0, 746.0], [1104.0, 195.0], [1105.0, 590.0], [1106.0, 105.0], [1100.0, 422.0], [1098.0, 528.0], [1144.0, 582.0], [1123.0, 529.0], [1133.0, 488.0], [1135.0, 715.0], [1215.0, 67.0], [1160.0, 226.0], [1184.0, 514.0], [1196.0, 628.0], [1200.0, 508.0], [1167.0, 568.0], [1180.0, 708.0], [1177.0, 571.0], [1268.0, 46.0], [1237.0, 566.0], [1270.0, 537.0], [1218.0, 793.0], [1216.0, 560.0], [1245.0, 526.0], [1275.0, 610.0], [1340.0, 496.5], [1309.0, 516.0], [1341.0, 493.0], [1316.0, 596.0], [1298.0, 399.0], [1375.0, 143.0], [1384.0, 9.0], [1379.0, 541.0], [1346.0, 635.0], [1382.0, 711.0], [1377.0, 632.0], [1441.0, 120.0], [1436.0, 39.0], [1439.0, 175.0], [1471.0, 181.0], [1409.0, 478.0], [1480.0, 196.0], [1491.0, 187.0], [1527.0, 556.0], [1535.0, 549.0], [1506.0, 818.0], [1544.0, 86.0], [1541.0, 166.0], [1564.0, 222.0], [1559.0, 568.0], [1648.0, 146.5], [1609.0, 464.0], [1640.0, 620.0], [1679.0, 56.0], [1689.0, 53.0], [1700.0, 52.0], [1667.0, 412.0], [1708.0, 609.0], [1725.0, 642.0], [1702.0, 559.0], [1693.0, 445.0], [1734.0, 104.0], [1728.0, 90.0], [1773.0, 568.0], [1763.0, 553.0], [1757.0, 677.0], [1822.0, 39.0], [1808.0, 171.0], [1829.0, 173.0], [1797.0, 220.0], [1841.0, 603.0], [1834.0, 733.0], [1863.0, 40.0], [1905.0, 98.0], [1912.0, 160.0], [1871.0, 176.0], [1895.0, 33.0], [1907.0, 598.0], [1877.0, 505.0], [1951.0, 592.0], [1972.0, 527.0], [1942.0, 461.0], [1936.0, 636.0], [1923.0, 574.0], [1948.0, 582.0], [1940.0, 728.0], [1967.0, 969.0], [1927.0, 636.0], [2041.0, 74.0], [1995.0, 188.0], [2038.0, 500.0], [2021.0, 269.0], [2031.0, 588.0], [1988.0, 427.0], [2013.0, 554.0], [2007.0, 494.0], [2030.0, 794.0], [1986.0, 604.5], [2153.0, 169.0], [2157.0, 54.0], [2172.0, 83.0], [2121.0, 607.0], [2126.0, 584.0], [2164.0, 99.0], [2128.0, 105.0], [2133.0, 144.0], [2057.0, 286.0], [2049.0, 532.0], [2078.0, 178.0], [2076.0, 36.0], [2136.0, 77.0], [2137.0, 550.0], [2134.0, 166.0], [2074.0, 97.0], [2069.0, 1145.0], [2070.0, 700.0], [2204.0, 178.0], [2259.0, 77.0], [2229.0, 105.0], [2260.0, 107.0], [2217.0, 164.0], [2211.0, 505.0], [2184.0, 890.0], [2189.0, 478.0], [2266.0, 188.0], [2262.0, 537.0], [2261.0, 714.0], [2248.0, 178.0], [2276.0, 10.0], [2240.0, 510.0], [2241.0, 57.0], [2348.0, 565.0], [2438.0, 590.0], [2452.0, 569.0], [2528.0, 609.0], [2444.0, 762.0], [2481.0, 937.0], [2643.0, 546.0], [2648.0, 451.0], [2799.0, 475.0], [1.0, 62856.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2189.0, 18132.0], [605.0, 30611.0], [2643.0, 29701.0], [941.0, 8471.0], [942.0, 89293.5], [15.0, 22414.0], [1006.0, 58661.0], [1059.0, 8842.0], [1144.0, 71058.5], [1184.0, 12130.0], [75.0, 31129.0], [1346.0, 107542.0], [1535.0, 66513.0], [1702.0, 58909.0], [1773.0, 20849.0], [1763.0, 101698.0], [1757.0, 66007.0], [1841.0, 29160.0], [122.0, 8289.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 2799.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 100704.0, "series": [{"data": [[2.0, 67177.0], [3.0, 64594.0], [4.0, 44132.5], [5.0, 57523.5], [6.0, 65708.0], [7.0, 64689.0], [8.0, 45289.0], [9.0, 52542.0], [12.0, 56029.5], [13.0, 74692.0], [14.0, 194.5], [15.0, 13771.0], [21.0, 10964.0], [22.0, 1474.5], [25.0, 67394.0], [26.0, 54613.0], [30.0, 57820.0], [32.0, 68267.5], [33.0, 59078.0], [34.0, 63197.0], [35.0, 100704.0], [45.0, 67358.0], [47.0, 3790.5], [55.0, 65513.0], [57.0, 52.0], [61.0, 61.0], [62.0, 205.0], [67.0, 69786.0], [74.0, 59951.5], [80.0, 56749.5], [82.0, 66407.5], [93.0, 65465.0], [99.0, 74.0], [96.0, 84.0], [103.0, 82385.0], [122.0, 89.0], [123.0, 70486.0], [157.0, 104.0], [178.0, 151.0], [180.0, 20975.5], [205.0, 15546.0], [204.0, 128.0], [218.0, 15401.5], [249.0, 10120.0], [262.0, 67.0], [265.0, 180.0], [264.0, 204.0], [292.0, 197.0], [290.0, 6131.5], [305.0, 8095.0], [314.0, 180.0], [334.0, 32.5], [322.0, 12110.0], [326.0, 205.0], [336.0, 129.0], [337.0, 100094.0], [346.0, 2945.0], [348.0, 209.0], [365.0, 4851.0], [371.0, 5121.0], [397.0, 7418.0], [408.0, 8858.0], [443.0, 109.0], [439.0, 200.0], [487.0, 9223.0], [505.0, 22.0], [520.0, 9148.0], [540.0, 319.0], [547.0, 37.0], [560.0, 119.0], [605.0, 598.0], [609.0, 7003.0], [657.0, 6.0], [670.0, 712.0], [662.0, 1014.0], [688.0, 206.0], [698.0, 420.0], [723.0, 37.0], [710.0, 167.0], [756.0, 10368.0], [759.0, 198.0], [775.0, 68.0], [780.0, 465.0], [801.0, 684.0], [847.0, 268.0], [862.0, 519.0], [874.0, 17.0], [882.0, 481.0], [923.0, 19.0], [919.0, 512.0], [951.0, 301.0], [946.0, 480.0], [941.0, 605.0], [942.0, 543.0], [964.0, 46.0], [981.0, 69.0], [973.0, 654.0], [976.0, 546.0], [984.0, 551.0], [986.0, 582.0], [969.0, 565.0], [994.0, 67.0], [1006.0, 553.0], [1010.0, 528.0], [1039.0, 190.0], [1052.0, 496.0], [1045.0, 14.0], [1065.0, 469.0], [1029.0, 551.0], [1059.0, 607.0], [1048.0, 491.5], [1026.0, 514.0], [1081.0, 521.0], [1077.0, 602.0], [1073.0, 593.0], [1101.0, 561.0], [1103.0, 89.0], [1141.0, 746.0], [1104.0, 195.0], [1105.0, 590.0], [1106.0, 105.0], [1100.0, 422.0], [1098.0, 528.0], [1144.0, 582.0], [1123.0, 529.0], [1133.0, 488.0], [1135.0, 715.0], [1215.0, 67.0], [1160.0, 226.0], [1184.0, 514.0], [1196.0, 628.0], [1200.0, 508.0], [1167.0, 568.0], [1180.0, 708.0], [1177.0, 571.0], [1268.0, 46.0], [1237.0, 566.0], [1270.0, 537.0], [1218.0, 793.0], [1216.0, 560.0], [1245.0, 526.0], [1275.0, 610.0], [1340.0, 496.5], [1309.0, 516.0], [1341.0, 493.0], [1316.0, 596.0], [1298.0, 399.0], [1375.0, 143.0], [1384.0, 9.0], [1379.0, 541.0], [1346.0, 635.0], [1382.0, 711.0], [1377.0, 632.0], [1441.0, 120.0], [1436.0, 39.0], [1439.0, 175.0], [1471.0, 181.0], [1409.0, 478.0], [1480.0, 196.0], [1491.0, 187.0], [1527.0, 556.0], [1535.0, 549.0], [1506.0, 818.0], [1544.0, 86.0], [1541.0, 166.0], [1564.0, 222.0], [1559.0, 568.0], [1648.0, 146.5], [1609.0, 464.0], [1640.0, 620.0], [1679.0, 56.0], [1689.0, 53.0], [1700.0, 52.0], [1667.0, 412.0], [1708.0, 609.0], [1725.0, 642.0], [1702.0, 559.0], [1693.0, 445.0], [1734.0, 104.0], [1728.0, 90.0], [1773.0, 568.0], [1763.0, 553.0], [1757.0, 677.0], [1822.0, 39.0], [1808.0, 171.0], [1829.0, 173.0], [1797.0, 220.0], [1841.0, 603.0], [1834.0, 733.0], [1863.0, 40.0], [1905.0, 98.0], [1912.0, 160.0], [1871.0, 176.0], [1895.0, 33.0], [1907.0, 598.0], [1877.0, 505.0], [1951.0, 592.0], [1972.0, 527.0], [1942.0, 461.0], [1936.0, 636.0], [1923.0, 574.0], [1948.0, 582.0], [1940.0, 728.0], [1967.0, 969.0], [1927.0, 636.0], [2041.0, 74.0], [1995.0, 188.0], [2038.0, 500.0], [2021.0, 269.0], [2031.0, 588.0], [1988.0, 427.0], [2013.0, 554.0], [2007.0, 494.0], [2030.0, 794.0], [1986.0, 604.5], [2153.0, 169.0], [2157.0, 54.0], [2172.0, 83.0], [2121.0, 607.0], [2126.0, 584.0], [2164.0, 99.0], [2128.0, 105.0], [2133.0, 144.0], [2057.0, 286.0], [2049.0, 532.0], [2078.0, 178.0], [2076.0, 36.0], [2136.0, 77.0], [2137.0, 550.0], [2134.0, 166.0], [2074.0, 97.0], [2069.0, 1145.0], [2070.0, 700.0], [2204.0, 178.0], [2259.0, 77.0], [2229.0, 105.0], [2260.0, 107.0], [2217.0, 164.0], [2211.0, 505.0], [2184.0, 890.0], [2189.0, 478.0], [2266.0, 188.0], [2262.0, 537.0], [2261.0, 714.0], [2248.0, 178.0], [2276.0, 10.0], [2240.0, 510.0], [2241.0, 57.0], [2348.0, 565.0], [2438.0, 590.0], [2452.0, 569.0], [2528.0, 609.0], [2444.0, 762.0], [2481.0, 937.0], [2643.0, 546.0], [2648.0, 451.0], [2799.0, 475.0], [1.0, 62856.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2189.0, 0.0], [605.0, 0.0], [2643.0, 0.0], [941.0, 0.0], [942.0, 0.0], [15.0, 0.0], [1006.0, 0.0], [1059.0, 0.0], [1144.0, 0.0], [1184.0, 0.0], [75.0, 0.0], [1346.0, 0.0], [1535.0, 0.0], [1702.0, 0.0], [1773.0, 0.0], [1763.0, 0.0], [1757.0, 0.0], [1841.0, 0.0], [122.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 2799.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 440.81666666666666, "minX": 1.68286374E12, "maxY": 1151.5333333333333, "series": [{"data": [[1.68286386E12, 1014.7333333333333], [1.6828638E12, 1151.5333333333333], [1.68286404E12, 440.81666666666666], [1.68286392E12, 1136.2833333333333], [1.68286374E12, 638.7333333333333], [1.68286398E12, 1117.9]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68286404E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.6333333333333333, "minX": 1.68286374E12, "maxY": 1151.5333333333333, "series": [{"data": [[1.68286386E12, 1014.9833333333333], [1.6828638E12, 1151.5333333333333], [1.68286404E12, 474.46666666666664], [1.68286392E12, 1130.7], [1.68286374E12, 588.7333333333333], [1.6828641E12, 16.35], [1.68286398E12, 1117.2666666666667]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.68286386E12, 2.066666666666667], [1.68286392E12, 3.2666666666666666], [1.68286398E12, 0.6333333333333333]], "isOverall": false, "label": "Non HTTP response code: java.net.SocketException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6828641E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.6333333333333333, "minX": 1.68286374E12, "maxY": 1151.5333333333333, "series": [{"data": [[1.68286386E12, 1014.9833333333333], [1.6828638E12, 1151.5333333333333], [1.68286404E12, 474.46666666666664], [1.68286392E12, 1130.7], [1.68286374E12, 588.7333333333333], [1.6828641E12, 16.35], [1.68286398E12, 1117.2666666666667]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.68286386E12, 2.066666666666667], [1.68286392E12, 3.2666666666666666], [1.68286398E12, 0.6333333333333333]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6828641E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.6333333333333333, "minX": 1.68286374E12, "maxY": 1151.5333333333333, "series": [{"data": [[1.68286386E12, 1014.9833333333333], [1.6828638E12, 1151.5333333333333], [1.68286404E12, 474.46666666666664], [1.68286392E12, 1130.7], [1.68286374E12, 588.7333333333333], [1.6828641E12, 16.35], [1.68286398E12, 1117.2666666666667]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.68286386E12, 2.066666666666667], [1.68286392E12, 3.2666666666666666], [1.68286398E12, 0.6333333333333333]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6828641E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

