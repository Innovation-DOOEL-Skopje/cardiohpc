/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 3.0, "minX": 0.0, "maxY": 230138.0, "series": [{"data": [[0.0, 3.0], [0.1, 12.0], [0.2, 15.0], [0.3, 17.0], [0.4, 18.0], [0.5, 19.0], [0.6, 20.0], [0.7, 20.0], [0.8, 21.0], [0.9, 22.0], [1.0, 23.0], [1.1, 23.0], [1.2, 24.0], [1.3, 24.0], [1.4, 25.0], [1.5, 25.0], [1.6, 26.0], [1.7, 26.0], [1.8, 27.0], [1.9, 27.0], [2.0, 28.0], [2.1, 28.0], [2.2, 29.0], [2.3, 29.0], [2.4, 30.0], [2.5, 30.0], [2.6, 31.0], [2.7, 31.0], [2.8, 32.0], [2.9, 32.0], [3.0, 32.0], [3.1, 33.0], [3.2, 33.0], [3.3, 34.0], [3.4, 34.0], [3.5, 34.0], [3.6, 35.0], [3.7, 35.0], [3.8, 36.0], [3.9, 36.0], [4.0, 36.0], [4.1, 37.0], [4.2, 37.0], [4.3, 38.0], [4.4, 38.0], [4.5, 38.0], [4.6, 39.0], [4.7, 39.0], [4.8, 39.0], [4.9, 40.0], [5.0, 40.0], [5.1, 40.0], [5.2, 41.0], [5.3, 41.0], [5.4, 42.0], [5.5, 42.0], [5.6, 42.0], [5.7, 43.0], [5.8, 43.0], [5.9, 44.0], [6.0, 44.0], [6.1, 44.0], [6.2, 45.0], [6.3, 45.0], [6.4, 46.0], [6.5, 46.0], [6.6, 46.0], [6.7, 47.0], [6.8, 47.0], [6.9, 48.0], [7.0, 48.0], [7.1, 48.0], [7.2, 49.0], [7.3, 49.0], [7.4, 50.0], [7.5, 50.0], [7.6, 50.0], [7.7, 51.0], [7.8, 51.0], [7.9, 52.0], [8.0, 52.0], [8.1, 52.0], [8.2, 53.0], [8.3, 53.0], [8.4, 54.0], [8.5, 54.0], [8.6, 54.0], [8.7, 55.0], [8.8, 55.0], [8.9, 55.0], [9.0, 56.0], [9.1, 56.0], [9.2, 56.0], [9.3, 57.0], [9.4, 57.0], [9.5, 58.0], [9.6, 58.0], [9.7, 58.0], [9.8, 59.0], [9.9, 59.0], [10.0, 60.0], [10.1, 60.0], [10.2, 60.0], [10.3, 60.0], [10.4, 61.0], [10.5, 61.0], [10.6, 61.0], [10.7, 62.0], [10.8, 62.0], [10.9, 62.0], [11.0, 63.0], [11.1, 63.0], [11.2, 64.0], [11.3, 64.0], [11.4, 64.0], [11.5, 65.0], [11.6, 65.0], [11.7, 66.0], [11.8, 66.0], [11.9, 66.0], [12.0, 67.0], [12.1, 67.0], [12.2, 68.0], [12.3, 68.0], [12.4, 69.0], [12.5, 69.0], [12.6, 70.0], [12.7, 70.0], [12.8, 71.0], [12.9, 71.0], [13.0, 72.0], [13.1, 72.0], [13.2, 73.0], [13.3, 74.0], [13.4, 74.0], [13.5, 75.0], [13.6, 76.0], [13.7, 77.0], [13.8, 78.0], [13.9, 79.0], [14.0, 79.0], [14.1, 80.0], [14.2, 81.0], [14.3, 81.0], [14.4, 82.0], [14.5, 83.0], [14.6, 83.0], [14.7, 84.0], [14.8, 85.0], [14.9, 86.0], [15.0, 87.0], [15.1, 87.0], [15.2, 88.0], [15.3, 88.0], [15.4, 89.0], [15.5, 90.0], [15.6, 91.0], [15.7, 92.0], [15.8, 92.0], [15.9, 93.0], [16.0, 94.0], [16.1, 95.0], [16.2, 95.0], [16.3, 96.0], [16.4, 97.0], [16.5, 97.0], [16.6, 98.0], [16.7, 99.0], [16.8, 99.0], [16.9, 100.0], [17.0, 101.0], [17.1, 101.0], [17.2, 102.0], [17.3, 103.0], [17.4, 104.0], [17.5, 105.0], [17.6, 106.0], [17.7, 106.0], [17.8, 107.0], [17.9, 108.0], [18.0, 109.0], [18.1, 110.0], [18.2, 111.0], [18.3, 112.0], [18.4, 112.0], [18.5, 113.0], [18.6, 114.0], [18.7, 115.0], [18.8, 116.0], [18.9, 117.0], [19.0, 117.0], [19.1, 119.0], [19.2, 120.0], [19.3, 120.0], [19.4, 121.0], [19.5, 122.0], [19.6, 122.0], [19.7, 123.0], [19.8, 124.0], [19.9, 124.0], [20.0, 125.0], [20.1, 126.0], [20.2, 127.0], [20.3, 128.0], [20.4, 129.0], [20.5, 130.0], [20.6, 131.0], [20.7, 132.0], [20.8, 133.0], [20.9, 134.0], [21.0, 135.0], [21.1, 136.0], [21.2, 137.0], [21.3, 138.0], [21.4, 139.0], [21.5, 140.0], [21.6, 142.0], [21.7, 143.0], [21.8, 144.0], [21.9, 145.0], [22.0, 145.0], [22.1, 146.0], [22.2, 147.0], [22.3, 148.0], [22.4, 150.0], [22.5, 151.0], [22.6, 152.0], [22.7, 154.0], [22.8, 155.0], [22.9, 155.0], [23.0, 156.0], [23.1, 158.0], [23.2, 159.0], [23.3, 160.0], [23.4, 161.0], [23.5, 163.0], [23.6, 164.0], [23.7, 165.0], [23.8, 167.0], [23.9, 168.0], [24.0, 169.0], [24.1, 170.0], [24.2, 171.0], [24.3, 172.0], [24.4, 173.0], [24.5, 174.0], [24.6, 175.0], [24.7, 176.0], [24.8, 177.0], [24.9, 179.0], [25.0, 180.0], [25.1, 182.0], [25.2, 183.0], [25.3, 185.0], [25.4, 188.0], [25.5, 190.0], [25.6, 190.0], [25.7, 191.0], [25.8, 192.0], [25.9, 193.0], [26.0, 194.0], [26.1, 195.0], [26.2, 196.0], [26.3, 197.0], [26.4, 198.0], [26.5, 199.0], [26.6, 200.0], [26.7, 201.0], [26.8, 202.0], [26.9, 204.0], [27.0, 205.0], [27.1, 206.0], [27.2, 207.0], [27.3, 207.0], [27.4, 208.0], [27.5, 209.0], [27.6, 210.0], [27.7, 211.0], [27.8, 213.0], [27.9, 214.0], [28.0, 214.0], [28.1, 215.0], [28.2, 216.0], [28.3, 217.0], [28.4, 217.0], [28.5, 218.0], [28.6, 219.0], [28.7, 220.0], [28.8, 221.0], [28.9, 222.0], [29.0, 223.0], [29.1, 224.0], [29.2, 225.0], [29.3, 225.0], [29.4, 226.0], [29.5, 227.0], [29.6, 228.0], [29.7, 230.0], [29.8, 231.0], [29.9, 232.0], [30.0, 234.0], [30.1, 235.0], [30.2, 236.0], [30.3, 237.0], [30.4, 238.0], [30.5, 239.0], [30.6, 240.0], [30.7, 241.0], [30.8, 242.0], [30.9, 243.0], [31.0, 244.0], [31.1, 245.0], [31.2, 246.0], [31.3, 248.0], [31.4, 250.0], [31.5, 251.0], [31.6, 253.0], [31.7, 254.0], [31.8, 255.0], [31.9, 256.0], [32.0, 257.0], [32.1, 258.0], [32.2, 259.0], [32.3, 260.0], [32.4, 261.0], [32.5, 263.0], [32.6, 265.0], [32.7, 266.0], [32.8, 266.0], [32.9, 267.0], [33.0, 268.0], [33.1, 270.0], [33.2, 272.0], [33.3, 274.0], [33.4, 275.0], [33.5, 278.0], [33.6, 280.0], [33.7, 281.0], [33.8, 283.0], [33.9, 284.0], [34.0, 284.0], [34.1, 286.0], [34.2, 288.0], [34.3, 289.0], [34.4, 290.0], [34.5, 291.0], [34.6, 294.0], [34.7, 297.0], [34.8, 299.0], [34.9, 299.0], [35.0, 300.0], [35.1, 301.0], [35.2, 303.0], [35.3, 304.0], [35.4, 306.0], [35.5, 309.0], [35.6, 314.0], [35.7, 318.0], [35.8, 321.0], [35.9, 323.0], [36.0, 325.0], [36.1, 327.0], [36.2, 330.0], [36.3, 332.0], [36.4, 333.0], [36.5, 335.0], [36.6, 336.0], [36.7, 339.0], [36.8, 341.0], [36.9, 343.0], [37.0, 345.0], [37.1, 348.0], [37.2, 353.0], [37.3, 359.0], [37.4, 366.0], [37.5, 372.0], [37.6, 375.0], [37.7, 376.0], [37.8, 385.0], [37.9, 398.0], [38.0, 405.0], [38.1, 407.0], [38.2, 411.0], [38.3, 413.0], [38.4, 414.0], [38.5, 415.0], [38.6, 416.0], [38.7, 418.0], [38.8, 420.0], [38.9, 421.0], [39.0, 424.0], [39.1, 426.0], [39.2, 430.0], [39.3, 433.0], [39.4, 435.0], [39.5, 437.0], [39.6, 439.0], [39.7, 441.0], [39.8, 443.0], [39.9, 445.0], [40.0, 447.0], [40.1, 450.0], [40.2, 454.0], [40.3, 456.0], [40.4, 457.0], [40.5, 459.0], [40.6, 460.0], [40.7, 461.0], [40.8, 463.0], [40.9, 464.0], [41.0, 464.0], [41.1, 465.0], [41.2, 466.0], [41.3, 468.0], [41.4, 469.0], [41.5, 470.0], [41.6, 470.0], [41.7, 471.0], [41.8, 472.0], [41.9, 473.0], [42.0, 474.0], [42.1, 475.0], [42.2, 476.0], [42.3, 477.0], [42.4, 479.0], [42.5, 480.0], [42.6, 482.0], [42.7, 483.0], [42.8, 484.0], [42.9, 484.0], [43.0, 485.0], [43.1, 486.0], [43.2, 487.0], [43.3, 487.0], [43.4, 488.0], [43.5, 489.0], [43.6, 489.0], [43.7, 490.0], [43.8, 492.0], [43.9, 493.0], [44.0, 494.0], [44.1, 496.0], [44.2, 497.0], [44.3, 498.0], [44.4, 500.0], [44.5, 501.0], [44.6, 501.0], [44.7, 502.0], [44.8, 503.0], [44.9, 503.0], [45.0, 504.0], [45.1, 505.0], [45.2, 505.0], [45.3, 506.0], [45.4, 507.0], [45.5, 508.0], [45.6, 509.0], [45.7, 509.0], [45.8, 510.0], [45.9, 511.0], [46.0, 511.0], [46.1, 512.0], [46.2, 513.0], [46.3, 513.0], [46.4, 514.0], [46.5, 514.0], [46.6, 515.0], [46.7, 516.0], [46.8, 516.0], [46.9, 517.0], [47.0, 517.0], [47.1, 518.0], [47.2, 518.0], [47.3, 519.0], [47.4, 519.0], [47.5, 520.0], [47.6, 520.0], [47.7, 521.0], [47.8, 521.0], [47.9, 522.0], [48.0, 523.0], [48.1, 524.0], [48.2, 525.0], [48.3, 527.0], [48.4, 528.0], [48.5, 528.0], [48.6, 530.0], [48.7, 531.0], [48.8, 532.0], [48.9, 533.0], [49.0, 533.0], [49.1, 534.0], [49.2, 535.0], [49.3, 536.0], [49.4, 537.0], [49.5, 538.0], [49.6, 538.0], [49.7, 539.0], [49.8, 540.0], [49.9, 540.0], [50.0, 541.0], [50.1, 541.0], [50.2, 542.0], [50.3, 542.0], [50.4, 542.0], [50.5, 543.0], [50.6, 543.0], [50.7, 544.0], [50.8, 544.0], [50.9, 544.0], [51.0, 545.0], [51.1, 545.0], [51.2, 546.0], [51.3, 546.0], [51.4, 546.0], [51.5, 547.0], [51.6, 547.0], [51.7, 548.0], [51.8, 549.0], [51.9, 550.0], [52.0, 550.0], [52.1, 551.0], [52.2, 551.0], [52.3, 552.0], [52.4, 552.0], [52.5, 553.0], [52.6, 553.0], [52.7, 553.0], [52.8, 554.0], [52.9, 554.0], [53.0, 554.0], [53.1, 555.0], [53.2, 555.0], [53.3, 556.0], [53.4, 556.0], [53.5, 557.0], [53.6, 557.0], [53.7, 558.0], [53.8, 558.0], [53.9, 559.0], [54.0, 560.0], [54.1, 560.0], [54.2, 561.0], [54.3, 562.0], [54.4, 563.0], [54.5, 563.0], [54.6, 564.0], [54.7, 564.0], [54.8, 565.0], [54.9, 565.0], [55.0, 566.0], [55.1, 566.0], [55.2, 566.0], [55.3, 567.0], [55.4, 567.0], [55.5, 568.0], [55.6, 568.0], [55.7, 569.0], [55.8, 570.0], [55.9, 571.0], [56.0, 571.0], [56.1, 572.0], [56.2, 572.0], [56.3, 572.0], [56.4, 573.0], [56.5, 573.0], [56.6, 573.0], [56.7, 574.0], [56.8, 574.0], [56.9, 574.0], [57.0, 574.0], [57.1, 575.0], [57.2, 575.0], [57.3, 575.0], [57.4, 576.0], [57.5, 576.0], [57.6, 576.0], [57.7, 576.0], [57.8, 577.0], [57.9, 577.0], [58.0, 577.0], [58.1, 578.0], [58.2, 578.0], [58.3, 578.0], [58.4, 579.0], [58.5, 579.0], [58.6, 580.0], [58.7, 580.0], [58.8, 581.0], [58.9, 581.0], [59.0, 582.0], [59.1, 582.0], [59.2, 583.0], [59.3, 583.0], [59.4, 584.0], [59.5, 584.0], [59.6, 585.0], [59.7, 585.0], [59.8, 586.0], [59.9, 586.0], [60.0, 587.0], [60.1, 587.0], [60.2, 588.0], [60.3, 588.0], [60.4, 588.0], [60.5, 589.0], [60.6, 589.0], [60.7, 589.0], [60.8, 590.0], [60.9, 590.0], [61.0, 591.0], [61.1, 591.0], [61.2, 591.0], [61.3, 592.0], [61.4, 592.0], [61.5, 592.0], [61.6, 593.0], [61.7, 593.0], [61.8, 594.0], [61.9, 595.0], [62.0, 595.0], [62.1, 596.0], [62.2, 597.0], [62.3, 598.0], [62.4, 598.0], [62.5, 599.0], [62.6, 601.0], [62.7, 603.0], [62.8, 604.0], [62.9, 604.0], [63.0, 605.0], [63.1, 606.0], [63.2, 606.0], [63.3, 606.0], [63.4, 607.0], [63.5, 607.0], [63.6, 607.0], [63.7, 608.0], [63.8, 608.0], [63.9, 608.0], [64.0, 609.0], [64.1, 609.0], [64.2, 609.0], [64.3, 610.0], [64.4, 610.0], [64.5, 611.0], [64.6, 611.0], [64.7, 612.0], [64.8, 612.0], [64.9, 612.0], [65.0, 613.0], [65.1, 613.0], [65.2, 614.0], [65.3, 614.0], [65.4, 615.0], [65.5, 615.0], [65.6, 616.0], [65.7, 616.0], [65.8, 617.0], [65.9, 618.0], [66.0, 618.0], [66.1, 619.0], [66.2, 620.0], [66.3, 621.0], [66.4, 621.0], [66.5, 622.0], [66.6, 623.0], [66.7, 623.0], [66.8, 624.0], [66.9, 625.0], [67.0, 626.0], [67.1, 627.0], [67.2, 627.0], [67.3, 628.0], [67.4, 628.0], [67.5, 629.0], [67.6, 629.0], [67.7, 629.0], [67.8, 630.0], [67.9, 630.0], [68.0, 631.0], [68.1, 631.0], [68.2, 631.0], [68.3, 632.0], [68.4, 632.0], [68.5, 633.0], [68.6, 633.0], [68.7, 634.0], [68.8, 634.0], [68.9, 634.0], [69.0, 635.0], [69.1, 635.0], [69.2, 636.0], [69.3, 636.0], [69.4, 637.0], [69.5, 638.0], [69.6, 638.0], [69.7, 639.0], [69.8, 640.0], [69.9, 640.0], [70.0, 641.0], [70.1, 642.0], [70.2, 642.0], [70.3, 643.0], [70.4, 643.0], [70.5, 643.0], [70.6, 644.0], [70.7, 644.0], [70.8, 645.0], [70.9, 645.0], [71.0, 645.0], [71.1, 646.0], [71.2, 646.0], [71.3, 647.0], [71.4, 647.0], [71.5, 648.0], [71.6, 648.0], [71.7, 649.0], [71.8, 650.0], [71.9, 650.0], [72.0, 651.0], [72.1, 651.0], [72.2, 652.0], [72.3, 652.0], [72.4, 652.0], [72.5, 653.0], [72.6, 653.0], [72.7, 654.0], [72.8, 654.0], [72.9, 655.0], [73.0, 656.0], [73.1, 657.0], [73.2, 658.0], [73.3, 659.0], [73.4, 660.0], [73.5, 661.0], [73.6, 662.0], [73.7, 663.0], [73.8, 665.0], [73.9, 666.0], [74.0, 667.0], [74.1, 668.0], [74.2, 669.0], [74.3, 670.0], [74.4, 670.0], [74.5, 671.0], [74.6, 671.0], [74.7, 672.0], [74.8, 673.0], [74.9, 674.0], [75.0, 676.0], [75.1, 679.0], [75.2, 681.0], [75.3, 684.0], [75.4, 685.0], [75.5, 687.0], [75.6, 689.0], [75.7, 690.0], [75.8, 691.0], [75.9, 691.0], [76.0, 692.0], [76.1, 694.0], [76.2, 696.0], [76.3, 698.0], [76.4, 700.0], [76.5, 703.0], [76.6, 705.0], [76.7, 708.0], [76.8, 712.0], [76.9, 715.0], [77.0, 717.0], [77.1, 718.0], [77.2, 719.0], [77.3, 721.0], [77.4, 722.0], [77.5, 725.0], [77.6, 726.0], [77.7, 729.0], [77.8, 731.0], [77.9, 734.0], [78.0, 741.0], [78.1, 745.0], [78.2, 748.0], [78.3, 750.0], [78.4, 753.0], [78.5, 764.0], [78.6, 767.0], [78.7, 768.0], [78.8, 769.0], [78.9, 772.0], [79.0, 775.0], [79.1, 776.0], [79.2, 777.0], [79.3, 777.0], [79.4, 778.0], [79.5, 780.0], [79.6, 787.0], [79.7, 791.0], [79.8, 794.0], [79.9, 797.0], [80.0, 800.0], [80.1, 804.0], [80.2, 809.0], [80.3, 813.0], [80.4, 819.0], [80.5, 834.0], [80.6, 839.0], [80.7, 841.0], [80.8, 844.0], [80.9, 851.0], [81.0, 856.0], [81.1, 858.0], [81.2, 862.0], [81.3, 865.0], [81.4, 877.0], [81.5, 879.0], [81.6, 885.0], [81.7, 887.0], [81.8, 889.0], [81.9, 896.0], [82.0, 899.0], [82.1, 903.0], [82.2, 905.0], [82.3, 906.0], [82.4, 909.0], [82.5, 919.0], [82.6, 928.0], [82.7, 937.0], [82.8, 943.0], [82.9, 944.0], [83.0, 945.0], [83.1, 946.0], [83.2, 947.0], [83.3, 949.0], [83.4, 952.0], [83.5, 956.0], [83.6, 957.0], [83.7, 958.0], [83.8, 960.0], [83.9, 963.0], [84.0, 967.0], [84.1, 970.0], [84.2, 972.0], [84.3, 974.0], [84.4, 975.0], [84.5, 978.0], [84.6, 982.0], [84.7, 983.0], [84.8, 985.0], [84.9, 986.0], [85.0, 991.0], [85.1, 994.0], [85.2, 996.0], [85.3, 1001.0], [85.4, 1003.0], [85.5, 1006.0], [85.6, 1007.0], [85.7, 1009.0], [85.8, 1010.0], [85.9, 1011.0], [86.0, 1015.0], [86.1, 1016.0], [86.2, 1018.0], [86.3, 1019.0], [86.4, 1019.0], [86.5, 1020.0], [86.6, 1021.0], [86.7, 1023.0], [86.8, 1026.0], [86.9, 1027.0], [87.0, 1032.0], [87.1, 1035.0], [87.2, 1037.0], [87.3, 1039.0], [87.4, 1049.0], [87.5, 1054.0], [87.6, 1055.0], [87.7, 1056.0], [87.8, 1056.0], [87.9, 1057.0], [88.0, 1058.0], [88.1, 1059.0], [88.2, 1061.0], [88.3, 1062.0], [88.4, 1063.0], [88.5, 1064.0], [88.6, 1065.0], [88.7, 1066.0], [88.8, 1067.0], [88.9, 1071.0], [89.0, 1072.0], [89.1, 1075.0], [89.2, 1080.0], [89.3, 1082.0], [89.4, 1083.0], [89.5, 1084.0], [89.6, 1085.0], [89.7, 1088.0], [89.8, 1090.0], [89.9, 1093.0], [90.0, 1095.0], [90.1, 1098.0], [90.2, 1101.0], [90.3, 1104.0], [90.4, 1105.0], [90.5, 1106.0], [90.6, 1107.0], [90.7, 1110.0], [90.8, 1116.0], [90.9, 1122.0], [91.0, 1124.0], [91.1, 1126.0], [91.2, 1128.0], [91.3, 1132.0], [91.4, 1134.0], [91.5, 1135.0], [91.6, 1137.0], [91.7, 1138.0], [91.8, 1149.0], [91.9, 1160.0], [92.0, 1162.0], [92.1, 1166.0], [92.2, 1169.0], [92.3, 1176.0], [92.4, 1181.0], [92.5, 1187.0], [92.6, 1206.0], [92.7, 1247.0], [92.8, 1290.0], [92.9, 1422.0], [93.0, 1428.0], [93.1, 1500.0], [93.2, 1951.0], [93.3, 2195.0], [93.4, 2431.0], [93.5, 2626.0], [93.6, 2982.0], [93.7, 3424.0], [93.8, 3706.0], [93.9, 3930.0], [94.0, 4475.0], [94.1, 5030.0], [94.2, 5567.0], [94.3, 6069.0], [94.4, 6464.0], [94.5, 6623.0], [94.6, 6719.0], [94.7, 7101.0], [94.8, 7156.0], [94.9, 7308.0], [95.0, 7397.0], [95.1, 7525.0], [95.2, 7549.0], [95.3, 7581.0], [95.4, 7650.0], [95.5, 7815.0], [95.6, 7983.0], [95.7, 8021.0], [95.8, 8130.0], [95.9, 8200.0], [96.0, 8322.0], [96.1, 8421.0], [96.2, 8565.0], [96.3, 8765.0], [96.4, 8918.0], [96.5, 9106.0], [96.6, 9222.0], [96.7, 9287.0], [96.8, 9451.0], [96.9, 9617.0], [97.0, 9896.0], [97.1, 10018.0], [97.2, 10180.0], [97.3, 10523.0], [97.4, 11033.0], [97.5, 11599.0], [97.6, 12125.0], [97.7, 12602.0], [97.8, 13000.0], [97.9, 13715.0], [98.0, 14536.0], [98.1, 16264.0], [98.2, 19052.0], [98.3, 21713.0], [98.4, 23616.0], [98.5, 27830.0], [98.6, 32859.0], [98.7, 36693.0], [98.8, 41990.0], [98.9, 47515.0], [99.0, 63454.0], [99.1, 67841.0], [99.2, 70958.0], [99.3, 78018.0], [99.4, 100008.0], [99.5, 100395.0], [99.6, 101887.0], [99.7, 129022.0], [99.8, 130719.0], [99.9, 132607.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 65252.0, "series": [{"data": [[0.0, 60529.0], [135200.0, 10.0], [141600.0, 2.0], [160800.0, 1.0], [132900.0, 12.0], [158500.0, 2.0], [66700.0, 4.0], [73100.0, 2.0], [69900.0, 1.0], [92300.0, 4.0], [98700.0, 2.0], [114700.0, 1.0], [127500.0, 2.0], [130700.0, 33.0], [100.0, 34985.0], [34500.0, 12.0], [134700.0, 22.0], [32900.0, 1.0], [36100.0, 4.0], [37700.0, 21.0], [39300.0, 3.0], [44100.0, 4.0], [45700.0, 1.0], [47300.0, 8.0], [48900.0, 16.0], [192300.0, 1.0], [200.0, 29989.0], [56900.0, 1.0], [58500.0, 2.0], [60100.0, 3.0], [61700.0, 4.0], [63300.0, 1.0], [64900.0, 3.0], [69000.0, 1.0], [300.0, 10854.0], [75400.0, 2.0], [85000.0, 1.0], [97800.0, 2.0], [101000.0, 2.0], [400.0, 23223.0], [104200.0, 53.0], [500.0, 65252.0], [129800.0, 36.0], [132400.0, 2.0], [600.0, 49807.0], [700.0, 12971.0], [196400.0, 1.0], [800.0, 7376.0], [900.0, 11489.0], [1000.0, 17667.0], [1100.0, 8711.0], [1200.0, 926.0], [1300.0, 120.0], [1400.0, 839.0], [1500.0, 137.0], [1600.0, 76.0], [1700.0, 83.0], [1800.0, 33.0], [1900.0, 164.0], [2000.0, 103.0], [2100.0, 196.0], [136500.0, 1.0], [2200.0, 162.0], [2300.0, 77.0], [2400.0, 160.0], [2500.0, 155.0], [2600.0, 136.0], [2800.0, 85.0], [2700.0, 64.0], [2900.0, 190.0], [3000.0, 50.0], [3100.0, 79.0], [200500.0, 2.0], [3300.0, 59.0], [3200.0, 110.0], [3400.0, 184.0], [3500.0, 132.0], [3600.0, 79.0], [3700.0, 198.0], [3800.0, 148.0], [3900.0, 86.0], [4000.0, 122.0], [4200.0, 54.0], [68100.0, 3.0], [4400.0, 36.0], [4600.0, 49.0], [4800.0, 58.0], [74500.0, 1.0], [5000.0, 328.0], [80900.0, 4.0], [5200.0, 14.0], [84100.0, 8.0], [5400.0, 20.0], [5600.0, 59.0], [87300.0, 1.0], [5800.0, 43.0], [93700.0, 1.0], [6000.0, 219.0], [96900.0, 2.0], [6200.0, 82.0], [100100.0, 109.0], [6400.0, 196.0], [6600.0, 338.0], [6800.0, 51.0], [7000.0, 127.0], [7400.0, 234.0], [7200.0, 181.0], [7600.0, 461.0], [7800.0, 181.0], [8000.0, 372.0], [128900.0, 29.0], [8400.0, 424.0], [8800.0, 64.0], [9200.0, 687.0], [9600.0, 183.0], [153400.0, 1.0], [10000.0, 201.0], [10400.0, 21.0], [10800.0, 113.0], [11200.0, 126.0], [11600.0, 39.0], [12000.0, 158.0], [12400.0, 15.0], [12800.0, 68.0], [13200.0, 23.0], [13600.0, 9.0], [14000.0, 94.0], [14400.0, 33.0], [14800.0, 11.0], [15200.0, 20.0], [15600.0, 13.0], [16000.0, 22.0], [16800.0, 7.0], [17600.0, 3.0], [19200.0, 10.0], [20000.0, 5.0], [20800.0, 1.0], [21600.0, 8.0], [23200.0, 87.0], [24000.0, 5.0], [24800.0, 31.0], [25600.0, 2.0], [26400.0, 6.0], [27200.0, 9.0], [28800.0, 1.0], [29600.0, 8.0], [31200.0, 3.0], [131900.0, 1.0], [33600.0, 1.0], [36800.0, 7.0], [35200.0, 33.0], [38400.0, 45.0], [40000.0, 5.0], [41600.0, 17.0], [163900.0, 2.0], [43200.0, 4.0], [44800.0, 1.0], [46400.0, 6.0], [48000.0, 8.0], [52800.0, 11.0], [56000.0, 3.0], [59200.0, 2.0], [60800.0, 3.0], [64000.0, 7.0], [67200.0, 25.0], [70400.0, 2.0], [73600.0, 3.0], [76800.0, 1.0], [80000.0, 2.0], [83200.0, 1.0], [89600.0, 13.0], [86400.0, 10.0], [128000.0, 10.0], [134400.0, 2.0], [192000.0, 5.0], [198400.0, 1.0], [132100.0, 2.0], [67100.0, 6.0], [70300.0, 1.0], [79900.0, 1.0], [83100.0, 2.0], [92700.0, 2.0], [95900.0, 1.0], [99100.0, 1.0], [102300.0, 2.0], [127900.0, 2.0], [136200.0, 14.0], [142600.0, 3.0], [34700.0, 2.0], [33100.0, 26.0], [133900.0, 3.0], [36300.0, 11.0], [37900.0, 3.0], [153100.0, 1.0], [42700.0, 1.0], [41100.0, 2.0], [44300.0, 28.0], [45900.0, 6.0], [47500.0, 53.0], [52300.0, 8.0], [53900.0, 1.0], [55500.0, 1.0], [61900.0, 1.0], [65100.0, 2.0], [66200.0, 3.0], [69400.0, 2.0], [72600.0, 69.0], [75800.0, 2.0], [85400.0, 3.0], [101400.0, 34.0], [104600.0, 1.0], [114200.0, 2.0], [130200.0, 17.0], [131600.0, 26.0], [68500.0, 4.0], [71700.0, 4.0], [74900.0, 2.0], [78100.0, 1.0], [81300.0, 1.0], [84500.0, 2.0], [87700.0, 2.0], [94100.0, 1.0], [100500.0, 10.0], [110100.0, 3.0], [129300.0, 13.0], [133400.0, 1.0], [16900.0, 5.0], [17700.0, 2.0], [18500.0, 19.0], [19300.0, 8.0], [20100.0, 21.0], [20900.0, 6.0], [21700.0, 22.0], [22500.0, 4.0], [23300.0, 1.0], [24100.0, 12.0], [24900.0, 1.0], [25700.0, 5.0], [26500.0, 1.0], [27300.0, 13.0], [28100.0, 2.0], [29700.0, 3.0], [30500.0, 9.0], [32100.0, 1.0], [131100.0, 4.0], [33800.0, 2.0], [137500.0, 1.0], [35400.0, 6.0], [38600.0, 12.0], [40200.0, 9.0], [45000.0, 30.0], [43400.0, 1.0], [48200.0, 3.0], [49800.0, 6.0], [51400.0, 1.0], [54600.0, 2.0], [57800.0, 3.0], [59400.0, 3.0], [61000.0, 2.0], [62600.0, 2.0], [64200.0, 8.0], [67600.0, 2.0], [70800.0, 24.0], [74000.0, 3.0], [80400.0, 3.0], [86800.0, 2.0], [102800.0, 8.0], [128400.0, 8.0], [136800.0, 2.0], [192100.0, 1.0], [198500.0, 1.0], [67500.0, 3.0], [70700.0, 2.0], [77100.0, 1.0], [80300.0, 2.0], [83500.0, 1.0], [93100.0, 2.0], [115500.0, 3.0], [157800.0, 1.0], [164200.0, 5.0], [33300.0, 2.0], [136300.0, 7.0], [36500.0, 15.0], [38100.0, 1.0], [39700.0, 2.0], [41300.0, 6.0], [44500.0, 15.0], [46100.0, 10.0], [50900.0, 2.0], [49300.0, 2.0], [52500.0, 2.0], [55700.0, 2.0], [58900.0, 2.0], [60500.0, 5.0], [62100.0, 1.0], [65300.0, 2.0], [63700.0, 13.0], [66600.0, 2.0], [76200.0, 1.0], [79400.0, 2.0], [95400.0, 3.0], [101800.0, 10.0], [98600.0, 1.0], [121000.0, 2.0], [127400.0, 1.0], [130600.0, 39.0], [134000.0, 8.0], [131700.0, 7.0], [68900.0, 15.0], [72100.0, 1.0], [97700.0, 1.0], [94500.0, 1.0], [100900.0, 10.0], [104100.0, 2.0], [110500.0, 2.0], [120100.0, 1.0], [129700.0, 11.0], [8500.0, 334.0], [8900.0, 191.0], [9300.0, 97.0], [9700.0, 80.0], [10100.0, 251.0], [10500.0, 26.0], [10900.0, 224.0], [11700.0, 8.0], [11300.0, 84.0], [12100.0, 300.0], [12500.0, 131.0], [199800.0, 1.0], [13300.0, 15.0], [12900.0, 62.0], [13700.0, 55.0], [14100.0, 44.0], [14500.0, 14.0], [15300.0, 15.0], [14900.0, 11.0], [15700.0, 8.0], [16100.0, 10.0], [17000.0, 19.0], [17800.0, 5.0], [18600.0, 9.0], [19400.0, 1.0], [20200.0, 3.0], [21000.0, 8.0], [21800.0, 17.0], [22600.0, 8.0], [23400.0, 4.0], [24200.0, 2.0], [25000.0, 19.0], [26600.0, 16.0], [25800.0, 3.0], [28200.0, 22.0], [29800.0, 14.0], [30600.0, 3.0], [32200.0, 1.0], [34000.0, 3.0], [35600.0, 3.0], [38800.0, 2.0], [37200.0, 2.0], [40400.0, 3.0], [42000.0, 3.0], [43600.0, 2.0], [46800.0, 1.0], [45200.0, 19.0], [48400.0, 2.0], [51600.0, 22.0], [53200.0, 1.0], [54800.0, 3.0], [56400.0, 3.0], [61200.0, 8.0], [64400.0, 1.0], [68000.0, 15.0], [74400.0, 15.0], [77600.0, 2.0], [80800.0, 1.0], [84000.0, 3.0], [87200.0, 3.0], [93600.0, 2.0], [96800.0, 1.0], [100000.0, 173.0], [128800.0, 6.0], [136000.0, 14.0], [140100.0, 1.0], [159300.0, 1.0], [67900.0, 3.0], [71100.0, 1.0], [74300.0, 3.0], [77500.0, 1.0], [93500.0, 2.0], [96700.0, 1.0], [99900.0, 1.0], [119100.0, 1.0], [128700.0, 1.0], [131400.0, 34.0], [137800.0, 2.0], [33500.0, 6.0], [36700.0, 7.0], [38300.0, 1.0], [41500.0, 10.0], [43100.0, 5.0], [59100.0, 6.0], [60700.0, 2.0], [65500.0, 47.0], [63900.0, 25.0], [67000.0, 2.0], [73400.0, 32.0], [70200.0, 52.0], [76600.0, 2.0], [79800.0, 4.0], [83000.0, 3.0], [89400.0, 1.0], [92600.0, 1.0], [102200.0, 1.0], [127800.0, 12.0], [131000.0, 1.0], [133200.0, 3.0], [146000.0, 1.0], [152400.0, 1.0], [210000.0, 1.0], [162900.0, 2.0], [66100.0, 1.0], [72500.0, 8.0], [75700.0, 1.0], [91700.0, 2.0], [98100.0, 2.0], [94900.0, 2.0], [101300.0, 17.0], [104500.0, 3.0], [114100.0, 1.0], [130100.0, 1.0], [135000.0, 9.0], [17100.0, 17.0], [17900.0, 14.0], [18700.0, 6.0], [19500.0, 49.0], [21100.0, 4.0], [21900.0, 3.0], [23500.0, 22.0], [22700.0, 12.0], [24300.0, 25.0], [25100.0, 4.0], [25900.0, 8.0], [27500.0, 1.0], [26700.0, 4.0], [28300.0, 1.0], [29100.0, 2.0], [31500.0, 1.0], [132700.0, 2.0], [34200.0, 1.0], [35800.0, 2.0], [145500.0, 10.0], [37400.0, 2.0], [43800.0, 4.0], [47000.0, 1.0], [45400.0, 4.0], [58200.0, 1.0], [59800.0, 8.0], [64600.0, 6.0], [68400.0, 5.0], [71600.0, 3.0], [74800.0, 3.0], [78000.0, 61.0], [81200.0, 57.0], [87600.0, 3.0], [90800.0, 1.0], [94000.0, 2.0], [97200.0, 1.0], [100400.0, 29.0], [110000.0, 4.0], [113200.0, 3.0], [129200.0, 20.0], [138400.0, 2.0], [164000.0, 4.0], [170400.0, 1.0], [136100.0, 1.0], [142500.0, 2.0], [71500.0, 3.0], [74700.0, 1.0], [77900.0, 34.0], [81100.0, 21.0], [87500.0, 3.0], [90700.0, 4.0], [93900.0, 1.0], [100300.0, 22.0], [103500.0, 1.0], [129100.0, 3.0], [133800.0, 1.0], [191400.0, 2.0], [131500.0, 14.0], [35300.0, 33.0], [144300.0, 1.0], [36900.0, 3.0], [38500.0, 32.0], [40100.0, 13.0], [41700.0, 2.0], [43300.0, 5.0], [44900.0, 5.0], [48100.0, 1.0], [52900.0, 4.0], [57700.0, 2.0], [60900.0, 1.0], [64100.0, 24.0], [67400.0, 9.0], [70600.0, 6.0], [73800.0, 2.0], [80200.0, 1.0], [86600.0, 1.0], [89800.0, 2.0], [93000.0, 1.0], [99400.0, 1.0], [105800.0, 1.0], [115400.0, 9.0], [128200.0, 6.0], [148400.0, 1.0], [133300.0, 9.0], [4300.0, 31.0], [4100.0, 70.0], [66500.0, 11.0], [69700.0, 4.0], [4500.0, 59.0], [72900.0, 2.0], [4700.0, 37.0], [4900.0, 59.0], [5100.0, 45.0], [5300.0, 19.0], [82500.0, 2.0], [85700.0, 1.0], [5500.0, 36.0], [5700.0, 45.0], [5900.0, 68.0], [6100.0, 40.0], [95300.0, 1.0], [6300.0, 52.0], [101700.0, 2.0], [6500.0, 86.0], [6700.0, 280.0], [6900.0, 54.0], [7100.0, 431.0], [7300.0, 514.0], [7500.0, 902.0], [7700.0, 170.0], [7900.0, 365.0], [8100.0, 543.0], [127300.0, 1.0], [130500.0, 2.0], [8600.0, 54.0], [8200.0, 345.0], [9000.0, 252.0], [9400.0, 294.0], [10200.0, 113.0], [9800.0, 227.0], [10600.0, 2.0], [11000.0, 5.0], [11400.0, 5.0], [12200.0, 11.0], [11800.0, 3.0], [12600.0, 61.0], [13000.0, 131.0], [13400.0, 7.0], [13800.0, 81.0], [14200.0, 50.0], [14600.0, 5.0], [15000.0, 58.0], [15400.0, 14.0], [15800.0, 1.0], [16200.0, 63.0], [16400.0, 106.0], [17200.0, 4.0], [18000.0, 6.0], [18800.0, 1.0], [19600.0, 14.0], [20400.0, 24.0], [21200.0, 5.0], [22000.0, 24.0], [22800.0, 5.0], [23600.0, 35.0], [25200.0, 2.0], [26000.0, 2.0], [26800.0, 1.0], [28400.0, 1.0], [29200.0, 33.0], [30000.0, 2.0], [31600.0, 16.0], [30800.0, 1.0], [32400.0, 3.0], [32800.0, 12.0], [34400.0, 33.0], [135100.0, 3.0], [37600.0, 41.0], [39200.0, 6.0], [40800.0, 2.0], [44000.0, 9.0], [45600.0, 1.0], [48800.0, 12.0], [50400.0, 2.0], [56800.0, 1.0], [60000.0, 1.0], [61600.0, 2.0], [63200.0, 3.0], [68800.0, 6.0], [72000.0, 4.0], [78400.0, 2.0], [91200.0, 17.0], [94400.0, 2.0], [100800.0, 49.0], [104000.0, 1.0], [110400.0, 2.0], [129600.0, 75.0], [131200.0, 14.0], [137600.0, 4.0], [135300.0, 1.0], [68700.0, 3.0], [71900.0, 1.0], [75100.0, 12.0], [81500.0, 5.0], [87900.0, 2.0], [91100.0, 1.0], [97500.0, 9.0], [94300.0, 1.0], [100700.0, 64.0], [103900.0, 3.0], [110300.0, 1.0], [123100.0, 1.0], [129500.0, 40.0], [133000.0, 1.0], [139400.0, 2.0], [33900.0, 3.0], [137100.0, 1.0], [35500.0, 6.0], [37100.0, 2.0], [40300.0, 3.0], [41900.0, 42.0], [43500.0, 1.0], [45100.0, 36.0], [46700.0, 21.0], [53100.0, 2.0], [54700.0, 7.0], [56300.0, 1.0], [57900.0, 7.0], [59500.0, 2.0], [61100.0, 2.0], [62700.0, 1.0], [67800.0, 48.0], [74200.0, 1.0], [80600.0, 1.0], [93400.0, 3.0], [103000.0, 1.0], [128600.0, 1.0], [134800.0, 35.0], [132500.0, 8.0], [66900.0, 2.0], [70100.0, 5.0], [73300.0, 9.0], [76500.0, 1.0], [79700.0, 1.0], [82900.0, 1.0], [89300.0, 1.0], [95700.0, 2.0], [102100.0, 1.0], [105300.0, 1.0], [118100.0, 2.0], [127700.0, 3.0], [130900.0, 17.0], [162200.0, 1.0], [16500.0, 14.0], [17300.0, 8.0], [18100.0, 9.0], [18900.0, 4.0], [19700.0, 6.0], [21300.0, 1.0], [22100.0, 22.0], [22900.0, 18.0], [23700.0, 19.0], [24500.0, 1.0], [25300.0, 33.0], [26100.0, 6.0], [26900.0, 3.0], [27700.0, 3.0], [28500.0, 2.0], [29300.0, 2.0], [31700.0, 77.0], [30900.0, 3.0], [32500.0, 14.0], [134300.0, 1.0], [33000.0, 2.0], [36200.0, 3.0], [140700.0, 1.0], [37800.0, 8.0], [39400.0, 1.0], [41000.0, 5.0], [45800.0, 2.0], [47400.0, 47.0], [49000.0, 8.0], [53800.0, 1.0], [55400.0, 2.0], [58600.0, 4.0], [60200.0, 10.0], [63400.0, 16.0], [61800.0, 3.0], [69200.0, 7.0], [66000.0, 2.0], [72400.0, 17.0], [75600.0, 2.0], [82000.0, 3.0], [88400.0, 1.0], [91600.0, 2.0], [94800.0, 2.0], [98000.0, 1.0], [101200.0, 10.0], [104400.0, 27.0], [130000.0, 1.0], [133600.0, 8.0], [159200.0, 1.0], [191200.0, 1.0], [197600.0, 1.0], [131300.0, 2.0], [144100.0, 1.0], [69100.0, 7.0], [65900.0, 1.0], [72300.0, 4.0], [81900.0, 2.0], [78700.0, 1.0], [85100.0, 1.0], [88300.0, 1.0], [94700.0, 1.0], [101100.0, 1.0], [104300.0, 5.0], [110700.0, 10.0], [129900.0, 10.0], [141800.0, 2.0], [34100.0, 1.0], [35700.0, 1.0], [145900.0, 4.0], [37300.0, 4.0], [38900.0, 4.0], [40500.0, 2.0], [42100.0, 9.0], [43700.0, 1.0], [45300.0, 7.0], [46900.0, 1.0], [51700.0, 2.0], [53300.0, 2.0], [54900.0, 8.0], [59700.0, 25.0], [61300.0, 1.0], [62900.0, 1.0], [64500.0, 2.0], [68200.0, 1.0], [71400.0, 4.0], [77800.0, 5.0], [74600.0, 13.0], [81000.0, 1.0], [84200.0, 1.0], [87400.0, 3.0], [90600.0, 1.0], [93800.0, 1.0], [97000.0, 4.0], [100200.0, 58.0], [116200.0, 2.0], [129000.0, 89.0], [134900.0, 1.0], [67300.0, 3.0], [70500.0, 3.0], [76900.0, 6.0], [80100.0, 2.0], [86500.0, 2.0], [89700.0, 1.0], [92900.0, 1.0], [96100.0, 1.0], [108900.0, 2.0], [115300.0, 2.0], [128100.0, 3.0], [8700.0, 322.0], [8300.0, 149.0], [132600.0, 42.0], [9100.0, 186.0], [145400.0, 2.0], [9500.0, 107.0], [9900.0, 234.0], [10300.0, 212.0], [10700.0, 2.0], [11100.0, 39.0], [11500.0, 106.0], [11900.0, 32.0], [12300.0, 10.0], [12700.0, 159.0], [13100.0, 111.0], [13500.0, 55.0], [14300.0, 8.0], [13900.0, 18.0], [14700.0, 11.0], [15100.0, 1.0], [15500.0, 59.0], [16300.0, 14.0], [15900.0, 27.0], [17400.0, 1.0], [16600.0, 13.0], [18200.0, 33.0], [19000.0, 52.0], [19800.0, 30.0], [20600.0, 16.0], [21400.0, 39.0], [22200.0, 83.0], [23000.0, 11.0], [23800.0, 13.0], [24600.0, 4.0], [25400.0, 3.0], [27000.0, 2.0], [27800.0, 28.0], [28600.0, 86.0], [29400.0, 1.0], [30200.0, 1.0], [31000.0, 4.0], [32600.0, 3.0], [31800.0, 10.0], [33200.0, 3.0], [34800.0, 2.0], [36400.0, 3.0], [143100.0, 2.0], [38000.0, 2.0], [41200.0, 4.0], [42800.0, 1.0], [44400.0, 15.0], [47600.0, 2.0], [49200.0, 1.0], [55600.0, 1.0], [60400.0, 6.0], [62000.0, 1.0], [63600.0, 6.0], [65200.0, 1.0], [66400.0, 2.0], [69600.0, 2.0], [72800.0, 3.0], [76000.0, 2.0], [79200.0, 3.0], [85600.0, 1.0], [82400.0, 11.0], [88800.0, 1.0], [101600.0, 1.0], [124000.0, 1.0], [130400.0, 1.0], [132800.0, 3.0], [66300.0, 2.0], [72700.0, 2.0], [82300.0, 2.0], [85500.0, 1.0], [91900.0, 1.0], [98300.0, 2.0], [104700.0, 50.0], [130300.0, 2.0], [134600.0, 1.0], [147400.0, 1.0], [192200.0, 1.0], [34300.0, 59.0], [132300.0, 145.0], [35900.0, 3.0], [37500.0, 1.0], [39100.0, 3.0], [40700.0, 1.0], [164300.0, 44.0], [42300.0, 3.0], [43900.0, 3.0], [47100.0, 7.0], [45500.0, 1.0], [51900.0, 1.0], [56700.0, 1.0], [59900.0, 3.0], [61500.0, 3.0], [63100.0, 4.0], [64700.0, 1.0], [71800.0, 3.0], [75000.0, 3.0], [78200.0, 2.0], [81400.0, 3.0], [84600.0, 3.0], [87800.0, 4.0], [94200.0, 2.0], [100600.0, 121.0], [103800.0, 8.0], [110200.0, 1.0], [129400.0, 24.0], [142800.0, 1.0], [146900.0, 1.0], [230100.0, 1.0], [67700.0, 7.0], [70900.0, 168.0], [77300.0, 1.0], [74100.0, 3.0], [80500.0, 2.0], [83700.0, 2.0], [86900.0, 1.0], [96500.0, 1.0], [102900.0, 3.0], [115700.0, 1.0], [128500.0, 8.0], [131800.0, 6.0], [163800.0, 20.0], [16700.0, 4.0], [17500.0, 4.0], [18300.0, 5.0], [19100.0, 14.0], [19900.0, 2.0], [21500.0, 43.0], [20700.0, 8.0], [22300.0, 5.0], [23100.0, 9.0], [23900.0, 27.0], [24700.0, 8.0], [25500.0, 1.0], [26300.0, 12.0], [27100.0, 2.0], [30300.0, 4.0], [31100.0, 1.0], [31900.0, 4.0], [32700.0, 13.0], [33400.0, 1.0], [36600.0, 66.0], [35000.0, 4.0], [38200.0, 25.0], [39800.0, 3.0], [161500.0, 1.0], [43000.0, 1.0], [46200.0, 5.0], [49400.0, 2.0], [51000.0, 2.0], [54200.0, 2.0], [57400.0, 13.0], [65400.0, 82.0], [63800.0, 1.0], [73200.0, 6.0], [70000.0, 1.0], [82800.0, 1.0], [89200.0, 1.0], [92400.0, 2.0], [95600.0, 1.0], [127600.0, 4.0], [130800.0, 37.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 230100.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 880.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 174846.0, "series": [{"data": [[0.0, 159923.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 174846.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 23910.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 880.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 279.50089766606794, "minX": 1.68286416E12, "maxY": 3000.0, "series": [{"data": [[1.68286416E12, 3000.0], [1.68286434E12, 3000.0], [1.68286452E12, 279.50089766606794], [1.68286422E12, 3000.0], [1.6828644E12, 3000.0], [1.68286428E12, 3000.0], [1.68286446E12, 2967.681363565587]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68286452E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 789.5, "minX": 1.0, "maxY": 192265.0, "series": [{"data": [[2.0, 67225.0], [3.0, 67224.0], [5.0, 67222.5], [6.0, 67224.0], [7.0, 67221.0], [8.0, 67216.0], [9.0, 82447.0], [11.0, 82448.0], [12.0, 82443.5], [13.0, 82445.0], [14.0, 82440.0], [15.0, 82443.0], [16.0, 82441.0], [17.0, 82437.0], [18.0, 82436.0], [19.0, 84586.0], [20.0, 64948.0], [21.0, 64655.0], [22.0, 64655.0], [23.0, 93456.0], [24.0, 84168.0], [26.0, 84167.0], [28.0, 84167.0], [29.0, 85463.0], [30.0, 84165.0], [31.0, 84166.0], [33.0, 82500.0], [35.0, 52346.0], [34.0, 52348.0], [37.0, 52349.0], [36.0, 52353.0], [39.0, 52346.0], [38.0, 52345.0], [41.0, 52344.0], [40.0, 52342.0], [43.0, 81333.0], [42.0, 43840.0], [45.0, 55446.0], [44.0, 43844.0], [47.0, 53109.0], [46.0, 56391.0], [49.0, 47270.5], [51.0, 74944.5], [53.0, 48050.0], [55.0, 63149.0], [54.0, 48064.0], [57.0, 63163.0], [56.0, 63164.0], [58.0, 63165.0], [61.0, 47139.0], [60.0, 47133.5], [63.0, 48271.0], [62.0, 48270.0], [67.0, 54241.0], [66.0, 64104.0], [65.0, 48138.0], [64.0, 48269.0], [70.0, 70256.0], [68.0, 47136.0], [74.0, 75145.0], [73.0, 75939.33333333333], [79.0, 57663.0], [77.0, 38808.0], [76.0, 52739.666666666664], [83.0, 75139.0], [82.0, 75139.0], [80.0, 75140.0], [87.0, 75116.0], [86.0, 75123.0], [85.0, 75133.0], [84.0, 75138.0], [91.0, 46459.0], [90.0, 42763.0], [88.0, 39377.0], [95.0, 38799.5], [93.0, 39747.5], [99.0, 40279.0], [98.0, 42978.0], [97.0, 46157.0], [103.0, 46147.0], [102.0, 71425.0], [101.0, 40094.0], [100.0, 46452.0], [107.0, 46142.0], [106.0, 38298.0], [105.0, 71416.0], [104.0, 38401.0], [111.0, 38422.0], [110.0, 46142.0], [109.0, 61814.0], [115.0, 71188.0], [114.0, 44335.0], [113.0, 56396.0], [118.0, 47610.5], [116.0, 46216.0], [123.0, 39222.0], [121.0, 57458.0], [120.0, 69277.0], [127.0, 46061.0], [125.0, 57194.5], [124.0, 45910.0], [135.0, 44127.0], [134.0, 38176.0], [133.0, 46208.0], [132.0, 71636.0], [131.0, 42517.5], [129.0, 55382.0], [142.0, 46198.0], [141.0, 38982.0], [140.0, 53209.666666666664], [137.0, 45907.0], [136.0, 46208.0], [150.0, 46170.0], [149.0, 45885.0], [148.0, 48981.0], [147.0, 44475.5], [145.0, 46191.0], [144.0, 43723.0], [159.0, 59201.333333333336], [156.0, 61951.333333333336], [153.0, 45862.0], [152.0, 43021.5], [167.0, 38215.0], [166.0, 46699.5], [164.0, 37255.0], [163.0, 70273.0], [162.0, 70274.0], [161.0, 45303.0], [175.0, 70268.0], [174.0, 73249.0], [173.0, 48091.0], [172.0, 73970.0], [170.0, 70269.0], [169.0, 57633.5], [183.0, 74686.0], [182.0, 71755.0], [181.0, 70267.0], [180.0, 74688.0], [178.0, 57631.0], [177.0, 70268.0], [191.0, 57775.0], [189.0, 74681.0], [188.0, 45288.0], [186.0, 43536.0], [185.0, 45291.0], [184.0, 45292.0], [199.0, 45287.5], [198.0, 74680.0], [196.0, 71397.33333333333], [194.0, 60027.5], [207.0, 59166.5], [205.0, 73957.0], [203.0, 42363.0], [202.0, 43184.0], [201.0, 43550.5], [215.0, 73661.0], [214.0, 70247.0], [212.0, 45273.0], [211.0, 45276.0], [209.0, 48077.0], [208.0, 74676.0], [223.0, 56704.5], [221.0, 74661.0], [220.0, 70244.0], [219.0, 70246.0], [218.0, 70245.5], [216.0, 59970.5], [231.0, 74643.0], [230.0, 46648.5], [228.0, 70222.0], [227.0, 57586.5], [225.0, 70238.5], [238.0, 70219.5], [236.0, 59440.0], [235.0, 70219.0], [233.0, 43901.0], [232.0, 70222.0], [247.0, 42345.0], [246.0, 42347.0], [245.0, 70212.0], [244.0, 45243.0], [243.0, 57728.5], [241.0, 70214.5], [240.0, 70214.0], [254.0, 74626.0], [253.0, 70207.0], [252.0, 70206.0], [251.0, 62663.666666666664], [248.0, 43142.0], [269.0, 73479.0], [271.0, 72071.0], [268.0, 70244.0], [259.0, 74604.0], [258.0, 70188.0], [257.0, 70189.0], [256.0, 56852.0], [267.0, 69130.0], [266.0, 69132.0], [265.0, 58044.5], [263.0, 69133.0], [262.0, 45192.0], [261.0, 70169.0], [260.0, 70168.0], [284.0, 70662.0], [286.0, 67258.0], [287.0, 61067.0], [285.0, 67257.0], [282.0, 56113.0], [280.0, 70240.0], [279.0, 71461.0], [277.0, 58664.0], [275.0, 67441.0], [274.0, 73477.0], [273.0, 69375.0], [300.0, 70364.0], [302.0, 70234.0], [303.0, 58656.0], [301.0, 73470.0], [298.0, 71854.5], [297.0, 73472.0], [295.0, 73472.0], [289.0, 73476.0], [288.0, 72073.0], [294.0, 70660.0], [293.0, 72619.0], [292.0, 56166.5], [318.0, 67243.0], [319.0, 67240.0], [317.0, 71756.0], [316.0, 68494.0], [315.0, 73463.0], [314.0, 67249.0], [313.0, 70447.0], [311.0, 70653.0], [304.0, 70233.0], [306.0, 73468.0], [305.0, 41979.0], [310.0, 71758.0], [309.0, 73465.0], [308.0, 68741.0], [322.0, 67237.0], [334.0, 70340.0], [332.0, 60395.666666666664], [329.0, 59252.0], [327.0, 73452.0], [326.0, 73452.0], [325.0, 73454.0], [324.0, 71834.0], [321.0, 73455.0], [320.0, 73455.0], [350.0, 40449.0], [351.0, 42197.0], [349.0, 67632.0], [348.0, 73434.0], [347.0, 73430.0], [346.0, 67214.5], [344.0, 67215.0], [343.0, 70415.5], [339.0, 67221.0], [338.0, 45042.0], [337.0, 73438.0], [341.0, 70327.5], [355.0, 56915.5], [366.0, 71977.0], [364.0, 73382.0], [362.0, 70580.0], [361.0, 73386.0], [360.0, 72055.0], [359.0, 71679.0], [357.0, 51356.0], [354.0, 70574.0], [353.0, 73388.0], [371.0, 40414.0], [376.0, 67851.0], [381.0, 48903.0], [379.0, 59032.0], [375.0, 67851.0], [374.0, 37399.0], [373.0, 55774.0], [372.0, 55782.0], [370.0, 42186.0], [369.0, 73381.0], [368.0, 65058.0], [399.0, 67923.33333333333], [396.0, 57039.333333333336], [393.0, 67962.5], [391.0, 68080.0], [390.0, 63124.333333333336], [388.0, 67847.0], [386.0, 62345.2], [415.0, 67841.0], [414.0, 30326.0], [412.0, 55336.0], [409.0, 63746.0], [408.0, 39115.5], [406.0, 67844.0], [405.0, 55509.333333333336], [402.0, 56066.333333333336], [419.0, 41385.0], [431.0, 67837.0], [429.0, 67954.5], [427.0, 55981.5], [425.0, 62183.333333333336], [423.0, 53214.0], [422.0, 68071.0], [420.0, 68072.0], [417.0, 67840.0], [416.0, 67841.0], [447.0, 67835.0], [445.0, 67911.66666666667], [443.0, 67834.0], [441.0, 54960.5], [439.0, 67836.66666666667], [436.0, 56070.5], [435.0, 68380.0], [433.0, 61401.0], [462.0, 67833.0], [463.0, 46769.0], [460.0, 50897.0], [458.0, 67832.0], [457.0, 66829.0], [456.0, 67833.0], [453.0, 52560.0], [451.0, 68065.5], [449.0, 59812.0], [479.0, 68914.0], [478.0, 68060.0], [476.0, 45891.25], [472.0, 43398.0], [470.0, 65853.0], [468.0, 59618.666666666664], [467.0, 66534.0], [466.0, 38583.0], [494.0, 69144.0], [492.0, 58339.75], [488.0, 59549.666666666664], [485.0, 59139.333333333336], [482.0, 57627.0], [480.0, 68059.0], [509.0, 54716.0], [511.0, 67804.5], [508.0, 67821.0], [498.0, 68910.5], [496.0, 67183.33333333333], [507.0, 67821.0], [506.0, 63206.0], [505.0, 65702.33333333333], [502.0, 45253.0], [501.0, 68909.0], [500.0, 66966.0], [540.0, 58289.0], [543.0, 191256.0], [528.0, 65425.0], [530.0, 63656.0], [529.0, 63697.0], [532.0, 62008.0], [531.0, 68784.0], [542.0, 57899.0], [541.0, 192265.0], [539.0, 59297.0], [538.0, 59298.0], [537.0, 191492.0], [536.0, 60074.0], [525.0, 68514.33333333333], [512.0, 67802.0], [515.0, 67798.0], [513.0, 67802.0], [519.0, 67074.0], [516.0, 68884.0], [523.0, 68881.0], [521.0, 59268.0], [520.0, 43177.0], [535.0, 61632.0], [533.0, 61030.0], [569.0, 100404.0], [574.0, 100631.0], [575.0, 100630.0], [560.0, 100609.0], [573.0, 108037.5], [571.0, 100379.0], [570.0, 100395.0], [568.0, 100404.0], [551.0, 62109.0], [550.0, 63403.0], [549.0, 64411.0], [548.0, 60454.0], [547.0, 60774.0], [546.0, 59743.0], [545.0, 60142.0], [544.0, 56892.0], [559.0, 59798.0], [558.0, 59800.0], [557.0, 60808.5], [555.0, 61818.0], [554.0, 75016.0], [553.0, 76024.0], [552.0, 61102.0], [564.0, 100523.0], [563.0, 100607.33333333333], [595.0, 852.0], [602.0, 857.0], [583.0, 96936.0], [582.0, 68955.0], [581.0, 69959.0], [580.0, 60942.0], [579.0, 70968.0], [578.0, 59488.0], [577.0, 60498.0], [576.0, 59910.0], [599.0, 853.0], [598.0, 852.0], [597.0, 852.0], [593.0, 852.0], [592.0, 852.0], [587.0, 94916.0], [586.0, 94918.0], [585.0, 96192.0], [584.0, 95928.0], [627.0, 851.0], [636.0, 852.0], [634.0, 856.0], [633.0, 855.0], [613.0, 857.0], [609.0, 852.0], [621.0, 852.0], [619.0, 855.2], [617.0, 855.3333333333334], [616.0, 2050.285714285714], [631.0, 856.0], [630.0, 852.0], [629.0, 853.3333333333334], [625.0, 852.0], [624.0, 851.0], [649.0, 880.0], [648.0, 853.0], [646.0, 880.0], [645.0, 860.0], [644.0, 856.0], [640.0, 861.0], [702.0, 841.0], [700.0, 1075.0], [699.0, 842.0], [698.0, 1075.0], [697.0, 843.0], [693.0, 842.0], [733.0, 1075.0], [735.0, 842.0], [731.0, 958.25], [730.0, 841.0], [729.0, 1074.5], [710.0, 1077.0], [708.0, 1076.0], [704.0, 1076.0], [716.0, 1028.8], [715.0, 1075.0], [734.0, 841.0], [727.0, 1075.0], [726.0, 1016.5], [720.0, 1075.0], [736.0, 842.0], [753.0, 846.0], [754.0, 855.6], [751.0, 846.0], [750.0, 873.0], [748.0, 845.0], [737.0, 959.5], [741.0, 847.0], [743.0, 859.5], [739.0, 842.0], [747.0, 1075.0], [746.0, 890.6666666666666], [817.0, 870.0], [819.0, 1017.2222222222222], [830.0, 999.0], [816.0, 1012.0], [820.0, 1010.25], [827.0, 975.1111111111112], [829.0, 987.0], [818.0, 1010.0], [823.0, 1042.25], [824.0, 1004.2352941176472], [813.0, 948.0], [812.0, 953.0], [811.0, 951.0], [808.0, 950.0], [862.0, 1039.0], [858.0, 1009.25], [839.0, 950.0], [837.0, 950.0], [836.0, 1069.5], [835.0, 1069.0], [832.0, 987.1666666666666], [855.0, 1009.0], [853.0, 1069.0], [852.0, 1069.0], [849.0, 1069.0], [848.0, 1009.25], [846.0, 1070.0], [845.0, 1009.0], [843.0, 1070.0], [840.0, 1039.5], [866.0, 1068.0], [865.0, 1068.25], [991.0, 1067.0], [965.0, 1066.0], [963.0, 1067.2], [981.0, 1065.5], [978.0, 1068.0], [1012.0, 1065.0], [1022.0, 1055.6923076923076], [1023.0, 1033.75], [1008.0, 1063.0], [1011.0, 1065.25], [1010.0, 1065.5], [1021.0, 1067.0], [1019.0, 1065.0], [1017.0, 1065.888888888889], [1007.0, 1069.0], [1004.0, 1066.5], [1005.0, 1066.0], [1006.0, 1074.0], [1003.0, 1064.0], [1015.0, 1045.3333333333335], [1014.0, 1069.0], [1013.0, 1065.0], [1086.0, 1002.5], [1080.0, 1070.6666666666667], [1058.0, 1065.0], [1060.0, 1063.5], [1062.0, 941.0], [1064.0, 1003.5], [1066.0, 1063.0], [1078.0, 1023.6666666666666], [1074.0, 1036.5], [1072.0, 1073.0], [1026.0, 1066.0], [1028.0, 1044.1666666666667], [1030.0, 1065.6666666666667], [1032.0, 1058.8461538461538], [1050.0, 1063.0], [1048.0, 1062.0], [1044.0, 1064.0], [1040.0, 1065.0], [1146.0, 1064.0], [1120.0, 1007.0], [1122.0, 1063.0], [1128.0, 1065.0], [1132.0, 1064.3333333333333], [1150.0, 1064.5], [1142.0, 1025.3333333333333], [1136.0, 1066.0], [1118.0, 1063.0], [1088.0, 1064.5], [1092.0, 943.0], [1098.0, 1063.0], [1094.0, 1065.0], [1102.0, 1064.3333333333333], [1114.0, 1072.0], [1110.0, 1063.0], [1108.0, 942.0], [1106.0, 1063.0], [1104.0, 47765.5], [1158.0, 1063.8], [1154.0, 1066.3333333333333], [1652.0, 1110.0], [1654.0, 1110.0], [1634.0, 1111.5], [1632.0, 1111.0], [1636.0, 1111.25], [1630.0, 1112.0], [1626.0, 1111.6666666666667], [1624.0, 1097.6666666666665], [1620.0, 1110.754098360656], [1618.0, 1113.2857142857142], [1646.0, 1111.0], [1642.0, 1111.0], [1702.0, 1104.0], [1976.0, 1081.0], [1980.0, 1081.0], [1982.0, 1081.0], [1978.0, 1081.0], [1974.0, 1080.4062500000002], [1970.0, 1082.5], [1934.0, 1080.0], [1932.0, 1081.0], [1942.0, 1082.0], [1940.0, 1083.0], [1938.0, 1082.2580645161288], [1936.0, 1105.4548736462107], [1986.0, 1080.0], [2284.0, 4370.0], [2268.0, 1172.3333333333335], [2300.0, 1091.0], [2292.0, 1092.0], [2280.0, 1175.857142857143], [2272.0, 1173.0], [2224.0, 1180.75], [2220.0, 1176.1999999999998], [2212.0, 1174.8823529411766], [2372.0, 1081.9166666666667], [2392.0, 1088.0], [2400.0, 4955.5], [2308.0, 1091.0], [2364.0, 1083.4210526315787], [2368.0, 1083.0], [2376.0, 1090.0], [2396.0, 1083.0], [2388.0, 1082.0], [2548.0, 1139.6923076923074], [2520.0, 1237.0], [2540.0, 1233.0], [2536.0, 1043.5], [2532.0, 1265.0], [2628.0, 1297.6666666666667], [2640.0, 1342.0], [2684.0, 3577.6666666666665], [2624.0, 1291.0], [2632.0, 1288.5], [2644.0, 4824.0], [2648.0, 1100.0], [2680.0, 1098.0], [2936.0, 1071.0], [2880.0, 8353.0], [2884.0, 1126.5454545454547], [2940.0, 838.8333333333334], [2932.0, 1012.6363636363635], [2876.0, 1811.4444444444443], [2856.0, 1094.6521739130435], [2868.0, 1086.2957746478874], [2892.0, 1068.0], [2944.0, 827.0], [2960.0, 1057.2413793103447], [3000.0, 2042.7547470358254], [2956.0, 1055.0], [2964.0, 1057.2307692307693], [2968.0, 1058.282051282051], [2972.0, 1061.1649484536085], [2996.0, 987.3333333333334], [2992.0, 995.4827586206897], [2988.0, 998.5384615384617], [2984.0, 1055.1818181818185], [2980.0, 977.3846153846155], [2976.0, 983.6666666666666], [2281.0, 1174.6666666666667], [2289.0, 1092.0], [2301.0, 1091.0], [2285.0, 1175.0], [2277.0, 1174.4210526315787], [2221.0, 1175.357142857143], [2217.0, 1175.0], [2213.0, 1176.5], [2309.0, 1091.0], [2365.0, 1083.0], [2361.0, 1084.0], [2373.0, 1082.0], [2377.0, 1084.0], [2381.0, 1082.0], [2541.0, 790.0], [2525.0, 1386.682926829268], [2529.0, 1084.0], [2637.0, 1343.0], [2633.0, 1293.2666666666667], [2641.0, 1286.5], [2653.0, 1099.0], [2681.0, 1097.0], [2673.0, 1098.0], [2669.0, 1098.0], [2661.0, 1099.0], [2941.0, 920.71875], [2881.0, 1126.0], [2873.0, 1056.0], [2857.0, 1043.0], [2869.0, 1126.0], [2953.0, 1054.111111111111], [2993.0, 986.5000000000001], [2997.0, 1031.4615384615386], [2945.0, 909.0], [2957.0, 1055.4583333333335], [2961.0, 1055.8333333333333], [2965.0, 1060.3636363636365], [2969.0, 1059.0714285714284], [2973.0, 1061.2], [2989.0, 1030.25], [2985.0, 4140.6290322580635], [2981.0, 2790.244444444444], [2977.0, 985.3333333333333], [1079.0, 1007.5], [1061.0, 1023.6666666666666], [1059.0, 944.0], [1063.0, 1044.3333333333335], [1067.0, 1063.0], [1071.0, 1045.5], [1069.0, 1064.0], [1085.0, 1068.5], [1081.0, 1063.0], [1077.0, 1074.0], [1073.0, 943.0], [1053.0, 1032.75], [1025.0, 1024.6666666666667], [1027.0, 1064.5], [1029.0, 1067.2], [1031.0, 1065.8], [1039.0, 1065.0], [1037.0, 1065.0], [1049.0, 1062.5], [1047.0, 1063.5], [1045.0, 1034.25], [1043.0, 1064.0], [1041.0, 1064.5], [1121.0, 1065.0], [1125.0, 1063.0], [1151.0, 1064.0], [1127.0, 1073.0], [1129.0, 1067.6666666666667], [1131.0, 1068.0], [1149.0, 1064.5], [1143.0, 1037.5], [1137.0, 1055.8600000000001], [1139.0, 1064.0], [1089.0, 942.0], [1091.0, 1004.5], [1101.0, 1039.6], [1099.0, 1047.7142857142856], [1103.0, 1062.3333333333333], [1117.0, 1065.6], [1111.0, 1063.0], [1105.0, 973.5], [1135.0, 1005.0], [1133.0, 1067.4], [1155.0, 1066.8], [1651.0, 1110.0], [1637.0, 1111.0], [1643.0, 1110.0], [1635.0, 1112.0], [1639.0, 1110.5], [1649.0, 1111.0], [1631.0, 1111.0], [1629.0, 1112.0], [1627.0, 1112.0], [1625.0, 1102.77868852459], [1619.0, 1097.5], [1617.0, 1105.0833333333333], [1647.0, 1111.0], [1645.0, 1110.6666666666667], [1641.0, 1111.0], [1699.0, 1104.0], [1977.0, 1081.5], [1983.0, 1081.0], [1981.0, 1081.0], [1979.0, 1686.0909090909092], [1975.0, 1082.0], [1971.0, 1083.076923076923], [1969.0, 1082.6190476190477], [1935.0, 1091.0], [1933.0, 1081.25], [1929.0, 2327.7866666666673], [1941.0, 1083.0], [1985.0, 1080.0], [2286.0, 1174.0], [2298.0, 1091.0], [2266.0, 1176.0], [2294.0, 1092.0], [2282.0, 1175.0], [2278.0, 1175.0], [2222.0, 1176.5263157894733], [2214.0, 1285.1724137931037], [2210.0, 1175.0], [2382.0, 1089.0], [2310.0, 1091.0], [2386.0, 3022.5], [2306.0, 1092.0], [2366.0, 1083.0], [2370.0, 1082.6], [2398.0, 1082.5], [2394.0, 1087.0], [2390.0, 1084.5], [2542.0, 1068.6], [2518.0, 1237.5], [2526.0, 1044.0], [2538.0, 1083.0], [2534.0, 1297.0], [2530.0, 1233.0], [2626.0, 1262.5384615384612], [2678.0, 1097.8], [2630.0, 1289.0], [2642.0, 1341.0], [2654.0, 1099.0], [2674.0, 1098.0], [2666.0, 1098.5], [2662.0, 1098.0], [2658.0, 1099.0], [2938.0, 944.3571428571429], [2874.0, 1126.6], [2858.0, 1077.6666666666667], [2862.0, 1041.75], [2866.0, 1039.5], [2870.0, 985.3333333333334], [2954.0, 1054.5454545454547], [2950.0, 1193.448275862069], [2958.0, 1061.0], [2962.0, 1061.0], [2966.0, 1057.625], [2970.0, 1058.375], [2974.0, 1055.8437499999998], [2998.0, 1022.7606837606836], [2994.0, 1015.2564102564103], [2990.0, 1008.9000000000001], [2982.0, 1054.5], [2978.0, 986.5405405405407], [2279.0, 1175.0], [2295.0, 1092.0], [2303.0, 1091.5], [2267.0, 1175.5], [2275.0, 1175.0], [2219.0, 1175.0000000000002], [2215.0, 1177.0], [2211.0, 5052.5], [2371.0, 1083.0], [2311.0, 1091.0], [2367.0, 1082.5], [2363.0, 1084.0], [2375.0, 1084.0], [2379.0, 1085.0], [2383.0, 1086.6666666666667], [2387.0, 1082.0], [2519.0, 1268.5], [2543.0, 1121.25], [2535.0, 1233.0], [2531.0, 789.5], [2635.0, 1315.4545454545455], [2627.0, 1293.3333333333335], [2639.0, 1286.0], [2647.0, 1100.0], [2675.0, 1098.0], [2667.0, 1098.5], [2623.0, 1243.0], [2943.0, 828.0], [2939.0, 962.4285714285714], [2883.0, 1126.0], [2875.0, 8353.0], [2871.0, 1126.6666666666667], [2863.0, 1086.5714285714284], [2867.0, 1074.3333333333333], [2891.0, 1072.0], [2999.0, 1011.9499999999999], [2959.0, 1056.636363636364], [2963.0, 47290.5], [2967.0, 1057.3750000000002], [2971.0, 1059.25], [2975.0, 10125.69230769231], [2995.0, 998.8636363636365], [2991.0, 1036.0], [2987.0, 1009.8571428571428], [2983.0, 1055.1333333333334], [2979.0, 980.2999999999998], [1.0, 94162.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[2988.2813919273503, 2136.071109331156]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 3000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 4678.8, "minX": 1.68286416E12, "maxY": 999119.0833333334, "series": [{"data": [[1.68286416E12, 104557.56666666667], [1.68286434E12, 838913.5333333333], [1.68286452E12, 5903.1], [1.68286422E12, 762188.35], [1.6828644E12, 821684.2333333333], [1.68286428E12, 791322.2166666667], [1.68286446E12, 999119.0833333334]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.68286416E12, 73558.8], [1.68286434E12, 588646.8], [1.68286452E12, 4678.8], [1.68286422E12, 523555.2], [1.6828644E12, 575022.0], [1.68286428E12, 546176.4], [1.68286446E12, 701265.6]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68286452E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 241.67009249742847, "minX": 1.68286416E12, "maxY": 62213.03411131067, "series": [{"data": [[1.68286416E12, 241.67009249742847], [1.68286434E12, 1601.479694055206], [1.68286452E12, 62213.03411131067], [1.68286422E12, 1455.7200127469816], [1.6828644E12, 2901.7934622400735], [1.68286428E12, 2631.8987690190474], [1.68286446E12, 1877.2590702744358]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68286452E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 241.64965170720572, "minX": 1.68286416E12, "maxY": 62213.019748653525, "series": [{"data": [[1.68286416E12, 241.64965170720572], [1.68286434E12, 1600.0749593310272], [1.68286452E12, 62213.019748653525], [1.68286422E12, 1367.8671446781416], [1.6828644E12, 2796.461160160539], [1.68286428E12, 2309.35410964141], [1.68286446E12, 1873.1608873238276]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68286452E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 118.13109512390079, "minX": 1.68286416E12, "maxY": 24533.95691202871, "series": [{"data": [[1.68286416E12, 118.13109512390079], [1.68286434E12, 663.319001683848], [1.68286452E12, 24533.95691202871], [1.68286422E12, 239.72205226258862], [1.6828644E12, 1110.0777380518111], [1.68286428E12, 451.0741188164257], [1.68286446E12, 590.3459340975213]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68286452E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 3.0, "minX": 1.68286416E12, "maxY": 230138.0, "series": [{"data": [[1.68286416E12, 6716.0], [1.68286434E12, 164385.0], [1.68286452E12, 192265.0], [1.68286422E12, 66467.0], [1.6828644E12, 210066.0], [1.68286428E12, 124078.0], [1.68286446E12, 230138.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.68286416E12, 64.0], [1.68286434E12, 665.0], [1.68286452E12, 74646.6], [1.68286422E12, 7489.9000000000015], [1.6828644E12, 895.0], [1.68286428E12, 7995.0], [1.68286446E12, 1177.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.68286416E12, 3713.0], [1.68286434E12, 11288.990000000002], [1.68286452E12, 88820.05999999968], [1.68286422E12, 53156.890000000334], [1.6828644E12, 32571.44000000009], [1.68286428E12, 30532.99], [1.68286446E12, 6968.94000000001]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.68286416E12, 2494.1000000000004], [1.68286434E12, 673.0], [1.68286452E12, 77859.20000000007], [1.68286422E12, 10115.0], [1.6828644E12, 6696.0], [1.68286428E12, 8759.0], [1.68286446E12, 1421.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.68286416E12, 3.0], [1.68286434E12, 30.0], [1.68286452E12, 30326.0], [1.68286422E12, 6.0], [1.6828644E12, 16.0], [1.68286428E12, 6.0], [1.68286446E12, 40.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.68286416E12, 38.0], [1.68286434E12, 577.0], [1.68286452E12, 67802.0], [1.68286422E12, 227.0], [1.6828644E12, 589.0], [1.68286428E12, 262.0], [1.68286446E12, 1081.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68286452E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 23.0, "minX": 1.0, "maxY": 170405.0, "series": [{"data": [[2.0, 60875.5], [3.0, 52685.5], [4.0, 43739.0], [5.0, 58043.5], [6.0, 14309.5], [7.0, 63163.0], [8.0, 52347.0], [10.0, 84167.0], [12.0, 82443.0], [14.0, 13760.5], [18.0, 100404.0], [21.0, 7575.0], [23.0, 110.0], [30.0, 38468.0], [37.0, 6357.0], [39.0, 45909.0], [41.0, 48.0], [46.0, 46455.0], [50.0, 8655.0], [51.0, 1171.0], [52.0, 62.5], [55.0, 24241.0], [77.0, 7547.0], [79.0, 18534.5], [83.0, 60.0], [86.0, 383.0], [104.0, 70616.5], [108.0, 8750.0], [109.0, 70214.0], [119.0, 122.0], [130.0, 330.0], [135.0, 96.0], [136.0, 587.0], [138.0, 5947.0], [149.0, 113.0], [158.0, 67824.5], [175.0, 34482.0], [179.0, 403.0], [181.0, 131.0], [192.0, 131.0], [222.0, 14086.0], [261.0, 192.0], [281.0, 314.0], [328.0, 53.0], [330.0, 8782.0], [344.0, 172.0], [349.0, 528.0], [348.0, 288.0], [356.0, 9213.0], [378.0, 12131.5], [371.0, 8996.0], [394.0, 299.0], [439.0, 237.0], [449.0, 139.0], [460.0, 8499.0], [472.0, 414.0], [487.0, 289.0], [502.0, 288.0], [535.0, 5030.0], [549.0, 7549.0], [603.0, 9456.0], [589.0, 20631.0], [607.0, 343.0], [618.0, 63.0], [639.0, 8132.0], [661.0, 81.0], [664.0, 491.0], [657.0, 683.0], [709.0, 437.0], [718.0, 111.0], [757.0, 54.0], [794.0, 443.0], [814.0, 287.0], [850.0, 146.0], [847.0, 65.0], [851.0, 8413.0], [853.0, 768.0], [883.0, 42.0], [891.0, 266.0], [865.0, 27.0], [879.0, 45.0], [870.0, 405.0], [924.0, 331.0], [956.0, 115.0], [975.0, 695.0], [1010.0, 58.0], [1019.0, 552.0], [1020.0, 606.0], [1052.0, 39.0], [1040.0, 50.0], [1066.0, 128.0], [1043.0, 564.0], [1078.0, 614.0], [1138.0, 151.0], [1145.0, 223.0], [1130.0, 581.0], [1091.0, 614.0], [1123.0, 520.0], [1126.0, 532.0], [1203.0, 263.0], [1168.0, 156.0], [1177.0, 808.0], [1204.0, 642.0], [1208.0, 985.0], [1206.0, 655.0], [1181.0, 516.0], [1186.0, 531.0], [1212.0, 635.0], [1214.0, 609.0], [1211.0, 545.0], [1210.0, 652.0], [1209.0, 634.0], [1191.0, 566.0], [1157.0, 674.0], [1183.0, 566.0], [1200.0, 607.0], [1162.0, 487.0], [1218.0, 272.0], [1230.0, 200.0], [1245.0, 215.0], [1273.0, 23.0], [1219.0, 219.0], [1227.0, 445.0], [1217.0, 578.0], [1251.0, 595.0], [1224.0, 643.0], [1294.0, 154.0], [1323.0, 223.0], [1316.0, 553.0], [1329.0, 418.0], [1326.0, 570.0], [1394.0, 122.0], [1407.0, 302.0], [1368.0, 544.0], [1373.0, 485.0], [1378.0, 640.0], [1379.0, 644.0], [1367.0, 652.0], [1395.0, 1011.0], [1415.0, 345.0], [1457.0, 376.0], [1421.0, 205.0], [1424.0, 510.0], [1453.0, 545.0], [1429.0, 556.0], [1455.0, 520.0], [1448.0, 633.0], [1531.0, 41.0], [1472.0, 68.0], [1480.0, 303.0], [1518.0, 244.0], [1506.0, 600.0], [1527.0, 494.0], [1555.0, 687.0], [1592.0, 55.0], [1581.0, 43.0], [1545.0, 61.0], [1553.0, 62.0], [1543.0, 519.0], [1575.0, 691.0], [1598.0, 628.0], [1630.0, 96.0], [1644.0, 230.0], [1653.0, 604.0], [1682.0, 208.0], [1703.0, 257.0], [1687.0, 615.0], [1788.0, 136.0], [1791.0, 563.0], [1773.0, 593.0], [1754.0, 516.0], [1838.0, 38.0], [1805.0, 37.0], [1801.0, 299.0], [1798.0, 474.0], [1823.0, 645.0], [1815.0, 582.0], [1852.0, 659.0], [1909.0, 73.0], [1891.0, 530.0], [1856.0, 590.0], [1919.0, 514.0], [1896.0, 576.0], [1935.0, 268.0], [1934.0, 81.0], [1982.0, 28.0], [1933.0, 472.0], [1932.0, 468.0], [1959.0, 635.0], [1951.0, 588.0], [1945.0, 695.0], [1956.0, 1059.0], [2014.0, 113.0], [2036.0, 242.0], [2027.0, 562.0], [2010.0, 1013.0], [2076.0, 72.0], [2165.0, 36.0], [2156.0, 35.0], [2154.0, 558.0], [2128.0, 47.0], [2116.0, 180.0], [2115.0, 642.0], [2121.0, 721.0], [2127.0, 66.0], [2122.0, 523.0], [2108.0, 208.0], [2106.0, 62.0], [2087.0, 544.0], [2101.0, 953.0], [2085.0, 890.0], [2107.0, 464.0], [2055.0, 31.0], [2111.0, 123.0], [2061.0, 77.0], [2136.0, 33.0], [2133.0, 608.0], [2143.0, 558.0], [2157.0, 62.0], [2158.0, 540.0], [2188.0, 52.0], [2185.0, 83.0], [2233.0, 848.0], [2223.0, 565.0], [2221.0, 669.0], [2194.0, 156.0], [2191.0, 956.0], [2219.0, 64.0], [2244.0, 572.0], [2303.0, 1056.0], [2265.0, 994.0], [2203.0, 517.0], [2208.0, 575.0], [2199.0, 553.0], [2278.0, 611.0], [2281.0, 984.0], [2302.0, 731.0], [2334.0, 223.0], [2405.0, 126.0], [2403.0, 1083.0], [2326.0, 155.0], [2427.0, 259.0], [2393.0, 1103.0], [2325.0, 474.0], [2410.0, 571.0], [2308.0, 587.0], [2330.0, 986.0], [2413.0, 1135.0], [2496.0, 670.0], [2445.0, 1030.0], [2612.0, 593.0], [2606.0, 698.0], [2560.0, 674.0], [2581.0, 583.0], [2577.0, 943.0], [2615.0, 753.0], [2609.0, 956.0], [2803.0, 1011.0], [3168.0, 1085.0], [1.0, 84740.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[603.0, 9970.0], [757.0, 11221.0], [853.0, 136045.0], [55.0, 23250.0], [891.0, 97570.0], [956.0, 20461.0], [1066.0, 19509.0], [1210.0, 95427.0], [1230.0, 91220.0], [1378.0, 110053.0], [1531.0, 7637.0], [1472.0, 81201.0], [1581.0, 70940.0], [1553.0, 72400.0], [1630.0, 22387.5], [1805.0, 8421.0], [119.0, 81185.0], [2027.0, 110175.0], [2010.0, 113263.0], [2076.0, 11235.0], [2188.0, 11597.0], [2185.0, 11228.0], [149.0, 170405.0], [2308.0, 104787.0], [222.0, 15235.0], [371.0, 81562.0], [439.0, 89652.0], [449.0, 23610.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 3168.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 100404.0, "series": [{"data": [[2.0, 60875.5], [3.0, 52685.5], [4.0, 43739.0], [5.0, 58043.5], [6.0, 14309.5], [7.0, 63163.0], [8.0, 52347.0], [10.0, 84167.0], [12.0, 82443.0], [14.0, 13760.5], [18.0, 100404.0], [21.0, 7575.0], [23.0, 110.0], [30.0, 38468.0], [37.0, 6357.0], [39.0, 45909.0], [41.0, 48.0], [46.0, 46455.0], [50.0, 8655.0], [51.0, 1171.0], [52.0, 62.5], [55.0, 24241.0], [77.0, 7547.0], [79.0, 18534.5], [83.0, 60.0], [86.0, 383.0], [104.0, 70616.5], [108.0, 8750.0], [109.0, 70214.0], [119.0, 122.0], [130.0, 330.0], [135.0, 96.0], [136.0, 587.0], [138.0, 5947.0], [149.0, 113.0], [158.0, 67824.5], [175.0, 34481.0], [179.0, 403.0], [181.0, 131.0], [192.0, 131.0], [222.0, 14086.0], [261.0, 192.0], [281.0, 314.0], [328.0, 53.0], [330.0, 8782.0], [344.0, 172.0], [349.0, 528.0], [348.0, 288.0], [356.0, 9213.0], [378.0, 12131.5], [371.0, 8996.0], [394.0, 299.0], [439.0, 237.0], [449.0, 139.0], [460.0, 8499.0], [472.0, 414.0], [487.0, 289.0], [502.0, 288.0], [535.0, 5030.0], [549.0, 7549.0], [603.0, 9456.0], [589.0, 20631.0], [607.0, 343.0], [618.0, 63.0], [639.0, 8132.0], [661.0, 81.0], [664.0, 491.0], [657.0, 683.0], [709.0, 437.0], [718.0, 111.0], [757.0, 54.0], [794.0, 443.0], [814.0, 287.0], [850.0, 146.0], [847.0, 65.0], [851.0, 8413.0], [853.0, 768.0], [883.0, 42.0], [891.0, 266.0], [865.0, 27.0], [879.0, 45.0], [870.0, 405.0], [924.0, 331.0], [956.0, 115.0], [975.0, 694.0], [1010.0, 58.0], [1019.0, 552.0], [1020.0, 606.0], [1052.0, 39.0], [1040.0, 50.0], [1066.0, 128.0], [1043.0, 564.0], [1078.0, 614.0], [1138.0, 151.0], [1145.0, 223.0], [1130.0, 581.0], [1091.0, 614.0], [1123.0, 520.0], [1126.0, 532.0], [1203.0, 263.0], [1168.0, 156.0], [1177.0, 808.0], [1204.0, 642.0], [1208.0, 985.0], [1206.0, 655.0], [1181.0, 516.0], [1186.0, 531.0], [1212.0, 635.0], [1214.0, 609.0], [1211.0, 545.0], [1210.0, 652.0], [1209.0, 634.0], [1191.0, 566.0], [1157.0, 674.0], [1183.0, 566.0], [1200.0, 607.0], [1162.0, 487.0], [1218.0, 272.0], [1230.0, 200.0], [1245.0, 215.0], [1273.0, 23.0], [1219.0, 219.0], [1227.0, 445.0], [1217.0, 578.0], [1251.0, 595.0], [1224.0, 643.0], [1294.0, 154.0], [1323.0, 223.0], [1316.0, 553.0], [1329.0, 418.0], [1326.0, 570.0], [1394.0, 122.0], [1407.0, 302.0], [1368.0, 544.0], [1373.0, 485.0], [1378.0, 640.0], [1379.0, 644.0], [1367.0, 652.0], [1395.0, 1011.0], [1415.0, 345.0], [1457.0, 376.0], [1421.0, 205.0], [1424.0, 510.0], [1453.0, 545.0], [1429.0, 556.0], [1455.0, 520.0], [1448.0, 633.0], [1531.0, 41.0], [1472.0, 68.0], [1480.0, 303.0], [1518.0, 244.0], [1506.0, 600.0], [1527.0, 494.0], [1555.0, 687.0], [1592.0, 55.0], [1581.0, 43.0], [1545.0, 61.0], [1553.0, 62.0], [1543.0, 519.0], [1575.0, 691.0], [1598.0, 628.0], [1630.0, 96.0], [1644.0, 230.0], [1653.0, 604.0], [1682.0, 208.0], [1703.0, 257.0], [1687.0, 615.0], [1788.0, 136.0], [1791.0, 563.0], [1773.0, 593.0], [1754.0, 516.0], [1838.0, 38.0], [1805.0, 37.0], [1801.0, 299.0], [1798.0, 474.0], [1823.0, 645.0], [1815.0, 582.0], [1852.0, 659.0], [1909.0, 73.0], [1891.0, 530.0], [1856.0, 590.0], [1919.0, 514.0], [1896.0, 576.0], [1935.0, 268.0], [1934.0, 81.0], [1982.0, 28.0], [1933.0, 472.0], [1932.0, 468.0], [1959.0, 635.0], [1951.0, 588.0], [1945.0, 695.0], [1956.0, 1059.0], [2014.0, 113.0], [2036.0, 242.0], [2027.0, 562.0], [2010.0, 1013.0], [2076.0, 72.0], [2165.0, 36.0], [2156.0, 35.0], [2154.0, 558.0], [2128.0, 47.0], [2116.0, 180.0], [2115.0, 642.0], [2121.0, 720.0], [2127.0, 66.0], [2122.0, 523.0], [2108.0, 208.0], [2106.0, 62.0], [2087.0, 544.0], [2101.0, 953.0], [2085.0, 890.0], [2107.0, 464.0], [2055.0, 31.0], [2111.0, 123.0], [2061.0, 77.0], [2136.0, 33.0], [2133.0, 608.0], [2143.0, 558.0], [2157.0, 62.0], [2158.0, 540.0], [2188.0, 52.0], [2185.0, 83.0], [2233.0, 848.0], [2223.0, 565.0], [2221.0, 669.0], [2194.0, 156.0], [2191.0, 956.0], [2219.0, 64.0], [2244.0, 572.0], [2303.0, 1056.0], [2265.0, 994.0], [2203.0, 517.0], [2208.0, 575.0], [2199.0, 553.0], [2278.0, 611.0], [2281.0, 984.0], [2302.0, 731.0], [2334.0, 222.0], [2405.0, 126.0], [2403.0, 1083.0], [2326.0, 155.0], [2427.0, 259.0], [2393.0, 1103.0], [2325.0, 474.0], [2410.0, 571.0], [2308.0, 587.0], [2330.0, 986.0], [2413.0, 1135.0], [2496.0, 670.0], [2445.0, 1030.0], [2612.0, 593.0], [2606.0, 698.0], [2560.0, 674.0], [2581.0, 583.0], [2577.0, 943.0], [2615.0, 753.0], [2609.0, 956.0], [2803.0, 1011.0], [3168.0, 1085.0], [1.0, 84740.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[603.0, 0.0], [757.0, 0.0], [853.0, 0.0], [55.0, 0.0], [891.0, 0.0], [956.0, 0.0], [1066.0, 0.0], [1210.0, 0.0], [1230.0, 0.0], [1378.0, 0.0], [1531.0, 0.0], [1472.0, 0.0], [1581.0, 0.0], [1553.0, 0.0], [1630.0, 0.0], [1805.0, 0.0], [119.0, 0.0], [2027.0, 0.0], [2010.0, 0.0], [2076.0, 0.0], [2188.0, 0.0], [2185.0, 0.0], [149.0, 0.0], [2308.0, 0.0], [222.0, 0.0], [371.0, 0.0], [439.0, 0.0], [449.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 3168.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 195.93333333333334, "minX": 1.68286416E12, "maxY": 1372.65, "series": [{"data": [[1.68286416E12, 195.93333333333334], [1.68286434E12, 1160.0], [1.68286422E12, 1046.0166666666667], [1.6828644E12, 1140.0], [1.68286428E12, 1078.05], [1.68286446E12, 1372.65]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68286446E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.68286416E12, "maxY": 1391.4, "series": [{"data": [[1.68286416E12, 145.95], [1.68286434E12, 1167.95], [1.68286452E12, 9.283333333333333], [1.68286422E12, 1038.8], [1.6828644E12, 1140.9166666666667], [1.68286428E12, 1083.6833333333334], [1.68286446E12, 1391.4]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.68286434E12, 0.016666666666666666], [1.68286422E12, 7.2], [1.6828644E12, 1.1666666666666667], [1.68286428E12, 6.233333333333333], [1.68286446E12, 0.05]], "isOverall": false, "label": "Non HTTP response code: java.net.SocketException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68286452E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.68286416E12, "maxY": 1391.4, "series": [{"data": [[1.68286416E12, 145.95], [1.68286434E12, 1167.95], [1.68286452E12, 9.283333333333333], [1.68286422E12, 1038.8], [1.6828644E12, 1140.9166666666667], [1.68286428E12, 1083.6833333333334], [1.68286446E12, 1391.4]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.68286434E12, 0.016666666666666666], [1.68286422E12, 7.2], [1.6828644E12, 1.1666666666666667], [1.68286428E12, 6.233333333333333], [1.68286446E12, 0.05]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68286452E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.68286416E12, "maxY": 1391.4, "series": [{"data": [[1.68286416E12, 145.95], [1.68286434E12, 1167.95], [1.68286452E12, 9.283333333333333], [1.68286422E12, 1038.8], [1.6828644E12, 1140.9166666666667], [1.68286428E12, 1083.6833333333334], [1.68286446E12, 1391.4]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.68286434E12, 0.016666666666666666], [1.68286422E12, 7.2], [1.6828644E12, 1.1666666666666667], [1.68286428E12, 6.233333333333333], [1.68286446E12, 0.05]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68286452E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

