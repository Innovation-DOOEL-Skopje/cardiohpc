/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 4.0, "minX": 0.0, "maxY": 210711.0, "series": [{"data": [[0.0, 4.0], [0.1, 4.0], [0.2, 4.0], [0.3, 4.0], [0.4, 4.0], [0.5, 4.0], [0.6, 5.0], [0.7, 5.0], [0.8, 5.0], [0.9, 5.0], [1.0, 5.0], [1.1, 5.0], [1.2, 5.0], [1.3, 5.0], [1.4, 5.0], [1.5, 5.0], [1.6, 5.0], [1.7, 5.0], [1.8, 5.0], [1.9, 5.0], [2.0, 5.0], [2.1, 5.0], [2.2, 5.0], [2.3, 5.0], [2.4, 6.0], [2.5, 6.0], [2.6, 6.0], [2.7, 6.0], [2.8, 6.0], [2.9, 6.0], [3.0, 6.0], [3.1, 6.0], [3.2, 6.0], [3.3, 6.0], [3.4, 6.0], [3.5, 6.0], [3.6, 6.0], [3.7, 6.0], [3.8, 7.0], [3.9, 7.0], [4.0, 7.0], [4.1, 7.0], [4.2, 7.0], [4.3, 7.0], [4.4, 7.0], [4.5, 7.0], [4.6, 7.0], [4.7, 7.0], [4.8, 7.0], [4.9, 8.0], [5.0, 8.0], [5.1, 8.0], [5.2, 8.0], [5.3, 8.0], [5.4, 9.0], [5.5, 9.0], [5.6, 9.0], [5.7, 10.0], [5.8, 10.0], [5.9, 11.0], [6.0, 11.0], [6.1, 12.0], [6.2, 12.0], [6.3, 13.0], [6.4, 13.0], [6.5, 14.0], [6.6, 14.0], [6.7, 15.0], [6.8, 15.0], [6.9, 16.0], [7.0, 16.0], [7.1, 17.0], [7.2, 17.0], [7.3, 18.0], [7.4, 18.0], [7.5, 19.0], [7.6, 19.0], [7.7, 20.0], [7.8, 20.0], [7.9, 21.0], [8.0, 22.0], [8.1, 22.0], [8.2, 23.0], [8.3, 24.0], [8.4, 25.0], [8.5, 26.0], [8.6, 27.0], [8.7, 27.0], [8.8, 28.0], [8.9, 29.0], [9.0, 30.0], [9.1, 31.0], [9.2, 32.0], [9.3, 32.0], [9.4, 33.0], [9.5, 34.0], [9.6, 35.0], [9.7, 35.0], [9.8, 36.0], [9.9, 36.0], [10.0, 37.0], [10.1, 38.0], [10.2, 38.0], [10.3, 39.0], [10.4, 40.0], [10.5, 41.0], [10.6, 41.0], [10.7, 42.0], [10.8, 43.0], [10.9, 43.0], [11.0, 44.0], [11.1, 45.0], [11.2, 46.0], [11.3, 46.0], [11.4, 47.0], [11.5, 48.0], [11.6, 48.0], [11.7, 49.0], [11.8, 49.0], [11.9, 50.0], [12.0, 50.0], [12.1, 51.0], [12.2, 51.0], [12.3, 52.0], [12.4, 52.0], [12.5, 53.0], [12.6, 53.0], [12.7, 53.0], [12.8, 54.0], [12.9, 54.0], [13.0, 54.0], [13.1, 55.0], [13.2, 55.0], [13.3, 56.0], [13.4, 56.0], [13.5, 56.0], [13.6, 56.0], [13.7, 57.0], [13.8, 57.0], [13.9, 58.0], [14.0, 58.0], [14.1, 59.0], [14.2, 59.0], [14.3, 60.0], [14.4, 60.0], [14.5, 60.0], [14.6, 61.0], [14.7, 61.0], [14.8, 62.0], [14.9, 62.0], [15.0, 63.0], [15.1, 63.0], [15.2, 63.0], [15.3, 64.0], [15.4, 64.0], [15.5, 65.0], [15.6, 65.0], [15.7, 65.0], [15.8, 66.0], [15.9, 66.0], [16.0, 67.0], [16.1, 67.0], [16.2, 67.0], [16.3, 68.0], [16.4, 68.0], [16.5, 69.0], [16.6, 69.0], [16.7, 70.0], [16.8, 70.0], [16.9, 70.0], [17.0, 71.0], [17.1, 71.0], [17.2, 71.0], [17.3, 72.0], [17.4, 72.0], [17.5, 72.0], [17.6, 73.0], [17.7, 73.0], [17.8, 73.0], [17.9, 74.0], [18.0, 74.0], [18.1, 74.0], [18.2, 74.0], [18.3, 75.0], [18.4, 75.0], [18.5, 75.0], [18.6, 76.0], [18.7, 76.0], [18.8, 76.0], [18.9, 77.0], [19.0, 77.0], [19.1, 77.0], [19.2, 78.0], [19.3, 78.0], [19.4, 79.0], [19.5, 79.0], [19.6, 79.0], [19.7, 80.0], [19.8, 80.0], [19.9, 81.0], [20.0, 81.0], [20.1, 82.0], [20.2, 82.0], [20.3, 82.0], [20.4, 83.0], [20.5, 83.0], [20.6, 83.0], [20.7, 84.0], [20.8, 85.0], [20.9, 85.0], [21.0, 86.0], [21.1, 86.0], [21.2, 87.0], [21.3, 87.0], [21.4, 88.0], [21.5, 88.0], [21.6, 89.0], [21.7, 89.0], [21.8, 89.0], [21.9, 90.0], [22.0, 90.0], [22.1, 90.0], [22.2, 90.0], [22.3, 91.0], [22.4, 91.0], [22.5, 91.0], [22.6, 91.0], [22.7, 92.0], [22.8, 92.0], [22.9, 92.0], [23.0, 92.0], [23.1, 92.0], [23.2, 93.0], [23.3, 93.0], [23.4, 93.0], [23.5, 93.0], [23.6, 94.0], [23.7, 94.0], [23.8, 95.0], [23.9, 95.0], [24.0, 95.0], [24.1, 95.0], [24.2, 96.0], [24.3, 96.0], [24.4, 97.0], [24.5, 97.0], [24.6, 98.0], [24.7, 98.0], [24.8, 98.0], [24.9, 98.0], [25.0, 99.0], [25.1, 99.0], [25.2, 99.0], [25.3, 100.0], [25.4, 100.0], [25.5, 100.0], [25.6, 101.0], [25.7, 101.0], [25.8, 101.0], [25.9, 102.0], [26.0, 102.0], [26.1, 103.0], [26.2, 103.0], [26.3, 103.0], [26.4, 104.0], [26.5, 104.0], [26.6, 105.0], [26.7, 105.0], [26.8, 105.0], [26.9, 106.0], [27.0, 106.0], [27.1, 106.0], [27.2, 107.0], [27.3, 107.0], [27.4, 108.0], [27.5, 109.0], [27.6, 109.0], [27.7, 109.0], [27.8, 110.0], [27.9, 110.0], [28.0, 111.0], [28.1, 111.0], [28.2, 111.0], [28.3, 112.0], [28.4, 112.0], [28.5, 113.0], [28.6, 113.0], [28.7, 114.0], [28.8, 114.0], [28.9, 115.0], [29.0, 115.0], [29.1, 116.0], [29.2, 116.0], [29.3, 117.0], [29.4, 117.0], [29.5, 117.0], [29.6, 118.0], [29.7, 118.0], [29.8, 118.0], [29.9, 119.0], [30.0, 119.0], [30.1, 119.0], [30.2, 119.0], [30.3, 120.0], [30.4, 120.0], [30.5, 121.0], [30.6, 121.0], [30.7, 121.0], [30.8, 121.0], [30.9, 121.0], [31.0, 122.0], [31.1, 122.0], [31.2, 122.0], [31.3, 123.0], [31.4, 123.0], [31.5, 123.0], [31.6, 123.0], [31.7, 124.0], [31.8, 124.0], [31.9, 124.0], [32.0, 124.0], [32.1, 125.0], [32.2, 125.0], [32.3, 125.0], [32.4, 125.0], [32.5, 126.0], [32.6, 126.0], [32.7, 126.0], [32.8, 126.0], [32.9, 127.0], [33.0, 127.0], [33.1, 127.0], [33.2, 127.0], [33.3, 127.0], [33.4, 128.0], [33.5, 128.0], [33.6, 128.0], [33.7, 128.0], [33.8, 129.0], [33.9, 129.0], [34.0, 129.0], [34.1, 130.0], [34.2, 130.0], [34.3, 131.0], [34.4, 131.0], [34.5, 132.0], [34.6, 132.0], [34.7, 132.0], [34.8, 133.0], [34.9, 133.0], [35.0, 133.0], [35.1, 133.0], [35.2, 133.0], [35.3, 134.0], [35.4, 134.0], [35.5, 134.0], [35.6, 134.0], [35.7, 135.0], [35.8, 135.0], [35.9, 135.0], [36.0, 136.0], [36.1, 136.0], [36.2, 136.0], [36.3, 137.0], [36.4, 137.0], [36.5, 138.0], [36.6, 138.0], [36.7, 138.0], [36.8, 139.0], [36.9, 139.0], [37.0, 140.0], [37.1, 140.0], [37.2, 140.0], [37.3, 140.0], [37.4, 141.0], [37.5, 141.0], [37.6, 141.0], [37.7, 141.0], [37.8, 141.0], [37.9, 142.0], [38.0, 142.0], [38.1, 142.0], [38.2, 143.0], [38.3, 143.0], [38.4, 143.0], [38.5, 144.0], [38.6, 144.0], [38.7, 144.0], [38.8, 144.0], [38.9, 145.0], [39.0, 145.0], [39.1, 145.0], [39.2, 146.0], [39.3, 146.0], [39.4, 146.0], [39.5, 146.0], [39.6, 147.0], [39.7, 147.0], [39.8, 148.0], [39.9, 148.0], [40.0, 148.0], [40.1, 149.0], [40.2, 149.0], [40.3, 149.0], [40.4, 150.0], [40.5, 150.0], [40.6, 150.0], [40.7, 151.0], [40.8, 151.0], [40.9, 152.0], [41.0, 152.0], [41.1, 152.0], [41.2, 153.0], [41.3, 153.0], [41.4, 153.0], [41.5, 154.0], [41.6, 154.0], [41.7, 154.0], [41.8, 154.0], [41.9, 155.0], [42.0, 155.0], [42.1, 155.0], [42.2, 155.0], [42.3, 156.0], [42.4, 156.0], [42.5, 156.0], [42.6, 156.0], [42.7, 156.0], [42.8, 157.0], [42.9, 157.0], [43.0, 157.0], [43.1, 157.0], [43.2, 157.0], [43.3, 157.0], [43.4, 158.0], [43.5, 158.0], [43.6, 158.0], [43.7, 158.0], [43.8, 159.0], [43.9, 159.0], [44.0, 159.0], [44.1, 159.0], [44.2, 160.0], [44.3, 160.0], [44.4, 161.0], [44.5, 161.0], [44.6, 161.0], [44.7, 162.0], [44.8, 162.0], [44.9, 162.0], [45.0, 162.0], [45.1, 162.0], [45.2, 163.0], [45.3, 163.0], [45.4, 163.0], [45.5, 163.0], [45.6, 163.0], [45.7, 164.0], [45.8, 164.0], [45.9, 164.0], [46.0, 164.0], [46.1, 164.0], [46.2, 164.0], [46.3, 165.0], [46.4, 165.0], [46.5, 165.0], [46.6, 165.0], [46.7, 165.0], [46.8, 165.0], [46.9, 165.0], [47.0, 166.0], [47.1, 166.0], [47.2, 166.0], [47.3, 166.0], [47.4, 166.0], [47.5, 166.0], [47.6, 166.0], [47.7, 166.0], [47.8, 166.0], [47.9, 166.0], [48.0, 167.0], [48.1, 167.0], [48.2, 167.0], [48.3, 167.0], [48.4, 167.0], [48.5, 167.0], [48.6, 167.0], [48.7, 167.0], [48.8, 168.0], [48.9, 168.0], [49.0, 168.0], [49.1, 168.0], [49.2, 168.0], [49.3, 168.0], [49.4, 168.0], [49.5, 168.0], [49.6, 168.0], [49.7, 169.0], [49.8, 169.0], [49.9, 169.0], [50.0, 169.0], [50.1, 169.0], [50.2, 169.0], [50.3, 169.0], [50.4, 170.0], [50.5, 170.0], [50.6, 170.0], [50.7, 170.0], [50.8, 170.0], [50.9, 170.0], [51.0, 170.0], [51.1, 170.0], [51.2, 171.0], [51.3, 171.0], [51.4, 171.0], [51.5, 171.0], [51.6, 171.0], [51.7, 171.0], [51.8, 171.0], [51.9, 171.0], [52.0, 171.0], [52.1, 171.0], [52.2, 172.0], [52.3, 172.0], [52.4, 172.0], [52.5, 172.0], [52.6, 172.0], [52.7, 172.0], [52.8, 172.0], [52.9, 172.0], [53.0, 172.0], [53.1, 172.0], [53.2, 172.0], [53.3, 173.0], [53.4, 173.0], [53.5, 173.0], [53.6, 173.0], [53.7, 173.0], [53.8, 173.0], [53.9, 173.0], [54.0, 173.0], [54.1, 173.0], [54.2, 174.0], [54.3, 174.0], [54.4, 174.0], [54.5, 174.0], [54.6, 174.0], [54.7, 174.0], [54.8, 174.0], [54.9, 175.0], [55.0, 175.0], [55.1, 175.0], [55.2, 175.0], [55.3, 175.0], [55.4, 175.0], [55.5, 175.0], [55.6, 175.0], [55.7, 176.0], [55.8, 176.0], [55.9, 176.0], [56.0, 176.0], [56.1, 176.0], [56.2, 177.0], [56.3, 177.0], [56.4, 177.0], [56.5, 177.0], [56.6, 177.0], [56.7, 177.0], [56.8, 178.0], [56.9, 178.0], [57.0, 178.0], [57.1, 178.0], [57.2, 178.0], [57.3, 178.0], [57.4, 178.0], [57.5, 178.0], [57.6, 179.0], [57.7, 179.0], [57.8, 179.0], [57.9, 179.0], [58.0, 179.0], [58.1, 179.0], [58.2, 179.0], [58.3, 179.0], [58.4, 179.0], [58.5, 180.0], [58.6, 180.0], [58.7, 180.0], [58.8, 180.0], [58.9, 180.0], [59.0, 180.0], [59.1, 181.0], [59.2, 181.0], [59.3, 181.0], [59.4, 181.0], [59.5, 181.0], [59.6, 181.0], [59.7, 181.0], [59.8, 182.0], [59.9, 182.0], [60.0, 182.0], [60.1, 182.0], [60.2, 182.0], [60.3, 182.0], [60.4, 182.0], [60.5, 182.0], [60.6, 183.0], [60.7, 183.0], [60.8, 183.0], [60.9, 183.0], [61.0, 183.0], [61.1, 183.0], [61.2, 183.0], [61.3, 184.0], [61.4, 184.0], [61.5, 184.0], [61.6, 184.0], [61.7, 184.0], [61.8, 185.0], [61.9, 185.0], [62.0, 185.0], [62.1, 185.0], [62.2, 185.0], [62.3, 185.0], [62.4, 186.0], [62.5, 186.0], [62.6, 186.0], [62.7, 186.0], [62.8, 186.0], [62.9, 187.0], [63.0, 187.0], [63.1, 187.0], [63.2, 187.0], [63.3, 187.0], [63.4, 187.0], [63.5, 188.0], [63.6, 188.0], [63.7, 188.0], [63.8, 188.0], [63.9, 188.0], [64.0, 189.0], [64.1, 189.0], [64.2, 189.0], [64.3, 189.0], [64.4, 190.0], [64.5, 190.0], [64.6, 190.0], [64.7, 190.0], [64.8, 190.0], [64.9, 191.0], [65.0, 191.0], [65.1, 191.0], [65.2, 191.0], [65.3, 191.0], [65.4, 192.0], [65.5, 192.0], [65.6, 192.0], [65.7, 192.0], [65.8, 192.0], [65.9, 193.0], [66.0, 193.0], [66.1, 193.0], [66.2, 193.0], [66.3, 194.0], [66.4, 194.0], [66.5, 194.0], [66.6, 194.0], [66.7, 195.0], [66.8, 195.0], [66.9, 195.0], [67.0, 195.0], [67.1, 196.0], [67.2, 196.0], [67.3, 196.0], [67.4, 196.0], [67.5, 197.0], [67.6, 197.0], [67.7, 198.0], [67.8, 198.0], [67.9, 199.0], [68.0, 199.0], [68.1, 199.0], [68.2, 200.0], [68.3, 200.0], [68.4, 200.0], [68.5, 201.0], [68.6, 201.0], [68.7, 201.0], [68.8, 201.0], [68.9, 201.0], [69.0, 202.0], [69.1, 202.0], [69.2, 202.0], [69.3, 203.0], [69.4, 203.0], [69.5, 203.0], [69.6, 204.0], [69.7, 204.0], [69.8, 205.0], [69.9, 205.0], [70.0, 205.0], [70.1, 206.0], [70.2, 207.0], [70.3, 207.0], [70.4, 207.0], [70.5, 208.0], [70.6, 209.0], [70.7, 209.0], [70.8, 210.0], [70.9, 211.0], [71.0, 211.0], [71.1, 212.0], [71.2, 213.0], [71.3, 214.0], [71.4, 216.0], [71.5, 218.0], [71.6, 219.0], [71.7, 219.0], [71.8, 220.0], [71.9, 220.0], [72.0, 221.0], [72.1, 221.0], [72.2, 222.0], [72.3, 222.0], [72.4, 223.0], [72.5, 224.0], [72.6, 225.0], [72.7, 225.0], [72.8, 226.0], [72.9, 226.0], [73.0, 227.0], [73.1, 227.0], [73.2, 227.0], [73.3, 228.0], [73.4, 229.0], [73.5, 230.0], [73.6, 231.0], [73.7, 232.0], [73.8, 233.0], [73.9, 235.0], [74.0, 235.0], [74.1, 236.0], [74.2, 240.0], [74.3, 244.0], [74.4, 258.0], [74.5, 264.0], [74.6, 267.0], [74.7, 268.0], [74.8, 269.0], [74.9, 269.0], [75.0, 270.0], [75.1, 274.0], [75.2, 282.0], [75.3, 285.0], [75.4, 291.0], [75.5, 292.0], [75.6, 293.0], [75.7, 293.0], [75.8, 294.0], [75.9, 298.0], [76.0, 303.0], [76.1, 303.0], [76.2, 304.0], [76.3, 305.0], [76.4, 306.0], [76.5, 308.0], [76.6, 311.0], [76.7, 313.0], [76.8, 314.0], [76.9, 314.0], [77.0, 315.0], [77.1, 317.0], [77.2, 318.0], [77.3, 320.0], [77.4, 321.0], [77.5, 322.0], [77.6, 323.0], [77.7, 325.0], [77.8, 327.0], [77.9, 328.0], [78.0, 332.0], [78.1, 336.0], [78.2, 345.0], [78.3, 351.0], [78.4, 355.0], [78.5, 369.0], [78.6, 373.0], [78.7, 375.0], [78.8, 377.0], [78.9, 388.0], [79.0, 394.0], [79.1, 406.0], [79.2, 436.0], [79.3, 483.0], [79.4, 510.0], [79.5, 548.0], [79.6, 592.0], [79.7, 631.0], [79.8, 680.0], [79.9, 848.0], [80.0, 954.0], [80.1, 1020.0], [80.2, 1050.0], [80.3, 1061.0], [80.4, 1147.0], [80.5, 1237.0], [80.6, 1255.0], [80.7, 1319.0], [80.8, 1391.0], [80.9, 1487.0], [81.0, 1549.0], [81.1, 1664.0], [81.2, 1800.0], [81.3, 1889.0], [81.4, 1977.0], [81.5, 2111.0], [81.6, 2191.0], [81.7, 2455.0], [81.8, 2564.0], [81.9, 2617.0], [82.0, 2718.0], [82.1, 2812.0], [82.2, 3024.0], [82.3, 3109.0], [82.4, 3301.0], [82.5, 3427.0], [82.6, 3444.0], [82.7, 3505.0], [82.8, 3543.0], [82.9, 3765.0], [83.0, 3904.0], [83.1, 3947.0], [83.2, 4046.0], [83.3, 4138.0], [83.4, 4178.0], [83.5, 4297.0], [83.6, 4421.0], [83.7, 4502.0], [83.8, 4678.0], [83.9, 4748.0], [84.0, 4755.0], [84.1, 4863.0], [84.2, 4972.0], [84.3, 5418.0], [84.4, 5665.0], [84.5, 5715.0], [84.6, 5737.0], [84.7, 5797.0], [84.8, 5987.0], [84.9, 6142.0], [85.0, 6408.0], [85.1, 6545.0], [85.2, 6806.0], [85.3, 6839.0], [85.4, 6893.0], [85.5, 6946.0], [85.6, 7078.0], [85.7, 7086.0], [85.8, 7205.0], [85.9, 7354.0], [86.0, 7404.0], [86.1, 7471.0], [86.2, 7508.0], [86.3, 7551.0], [86.4, 7651.0], [86.5, 7856.0], [86.6, 7902.0], [86.7, 7946.0], [86.8, 8011.0], [86.9, 8049.0], [87.0, 8064.0], [87.1, 8073.0], [87.2, 8081.0], [87.3, 8092.0], [87.4, 8110.0], [87.5, 8149.0], [87.6, 8195.0], [87.7, 8322.0], [87.8, 8450.0], [87.9, 8479.0], [88.0, 8520.0], [88.1, 8647.0], [88.2, 8660.0], [88.3, 8667.0], [88.4, 8688.0], [88.5, 8845.0], [88.6, 8899.0], [88.7, 8933.0], [88.8, 8973.0], [88.9, 9373.0], [89.0, 9637.0], [89.1, 9894.0], [89.2, 9984.0], [89.3, 10021.0], [89.4, 10064.0], [89.5, 10081.0], [89.6, 10106.0], [89.7, 10142.0], [89.8, 10263.0], [89.9, 10296.0], [90.0, 10385.0], [90.1, 10474.0], [90.2, 10924.0], [90.3, 11066.0], [90.4, 11143.0], [90.5, 11472.0], [90.6, 11926.0], [90.7, 12319.0], [90.8, 12723.0], [90.9, 12821.0], [91.0, 12889.0], [91.1, 12967.0], [91.2, 13015.0], [91.3, 13059.0], [91.4, 13163.0], [91.5, 13833.0], [91.6, 13923.0], [91.7, 14015.0], [91.8, 14041.0], [91.9, 14456.0], [92.0, 14689.0], [92.1, 14927.0], [92.2, 15062.0], [92.3, 15111.0], [92.4, 15252.0], [92.5, 15820.0], [92.6, 15951.0], [92.7, 16083.0], [92.8, 16139.0], [92.9, 16288.0], [93.0, 16720.0], [93.1, 17126.0], [93.2, 17312.0], [93.3, 17677.0], [93.4, 17978.0], [93.5, 18275.0], [93.6, 18376.0], [93.7, 19151.0], [93.8, 20042.0], [93.9, 20961.0], [94.0, 22558.0], [94.1, 23025.0], [94.2, 24318.0], [94.3, 24573.0], [94.4, 25180.0], [94.5, 28792.0], [94.6, 29878.0], [94.7, 31467.0], [94.8, 32139.0], [94.9, 32324.0], [95.0, 33110.0], [95.1, 33557.0], [95.2, 34266.0], [95.3, 34544.0], [95.4, 36048.0], [95.5, 38474.0], [95.6, 41397.0], [95.7, 44920.0], [95.8, 46757.0], [95.9, 48764.0], [96.0, 53771.0], [96.1, 57863.0], [96.2, 63235.0], [96.3, 63282.0], [96.4, 64256.0], [96.5, 64902.0], [96.6, 66783.0], [96.7, 67197.0], [96.8, 67445.0], [96.9, 68753.0], [97.0, 73293.0], [97.1, 74982.0], [97.2, 75918.0], [97.3, 80439.0], [97.4, 82819.0], [97.5, 85969.0], [97.6, 92963.0], [97.7, 100019.0], [97.8, 100072.0], [97.9, 100094.0], [98.0, 100119.0], [98.1, 100136.0], [98.2, 100161.0], [98.3, 100197.0], [98.4, 100234.0], [98.5, 128271.0], [98.6, 129958.0], [98.7, 134023.0], [98.8, 134577.0], [98.9, 135584.0], [99.0, 136342.0], [99.1, 137006.0], [99.2, 138134.0], [99.3, 138145.0], [99.4, 139614.0], [99.5, 144858.0], [99.6, 146079.0], [99.7, 147305.0], [99.8, 154907.0], [99.9, 161513.0], [100.0, 210711.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 38679.0, "series": [{"data": [[0.0, 22778.0], [148000.0, 1.0], [160800.0, 10.0], [132900.0, 1.0], [145700.0, 1.0], [158500.0, 1.0], [66700.0, 17.0], [69900.0, 2.0], [73100.0, 2.0], [76300.0, 3.0], [79500.0, 3.0], [85900.0, 19.0], [89100.0, 1.0], [92300.0, 10.0], [137000.0, 50.0], [156200.0, 10.0], [175400.0, 2.0], [100.0, 38679.0], [34500.0, 39.0], [141100.0, 2.0], [36100.0, 3.0], [147500.0, 1.0], [40900.0, 1.0], [39300.0, 19.0], [47300.0, 2.0], [48900.0, 2.0], [200.0, 7027.0], [53700.0, 9.0], [63300.0, 20.0], [64900.0, 12.0], [65800.0, 1.0], [72200.0, 1.0], [300.0, 2818.0], [75400.0, 1.0], [85000.0, 2.0], [91400.0, 1.0], [97800.0, 1.0], [101000.0, 17.0], [400.0, 270.0], [113800.0, 2.0], [500.0, 235.0], [129800.0, 12.0], [138800.0, 11.0], [132400.0, 1.0], [145200.0, 1.0], [600.0, 170.0], [700.0, 50.0], [800.0, 109.0], [900.0, 65.0], [1000.0, 276.0], [1100.0, 52.0], [1200.0, 213.0], [1300.0, 162.0], [1400.0, 79.0], [1500.0, 124.0], [1600.0, 61.0], [1700.0, 61.0], [1800.0, 110.0], [1900.0, 95.0], [2000.0, 64.0], [2100.0, 122.0], [136500.0, 32.0], [2300.0, 18.0], [2200.0, 6.0], [2400.0, 78.0], [2500.0, 88.0], [2600.0, 135.0], [2800.0, 36.0], [2700.0, 80.0], [2900.0, 37.0], [3000.0, 112.0], [3100.0, 58.0], [3300.0, 61.0], [3200.0, 41.0], [3400.0, 203.0], [3500.0, 125.0], [3700.0, 82.0], [3600.0, 11.0], [3800.0, 53.0], [3900.0, 140.0], [4000.0, 119.0], [4200.0, 57.0], [68100.0, 24.0], [4600.0, 59.0], [71300.0, 2.0], [4400.0, 127.0], [4800.0, 118.0], [74500.0, 7.0], [5000.0, 29.0], [80900.0, 2.0], [84100.0, 30.0], [5200.0, 15.0], [5600.0, 97.0], [5400.0, 36.0], [5800.0, 59.0], [6000.0, 20.0], [100100.0, 395.0], [6200.0, 34.0], [6600.0, 16.0], [6400.0, 78.0], [6800.0, 245.0], [7000.0, 196.0], [112900.0, 1.0], [7400.0, 157.0], [7200.0, 20.0], [7600.0, 98.0], [7800.0, 121.0], [8000.0, 504.0], [128900.0, 1.0], [8400.0, 209.0], [8800.0, 157.0], [147000.0, 18.0], [9200.0, 11.0], [9600.0, 62.0], [10000.0, 269.0], [10400.0, 85.0], [10800.0, 24.0], [11200.0, 57.0], [11600.0, 11.0], [12000.0, 18.0], [12400.0, 5.0], [12800.0, 111.0], [13200.0, 8.0], [13600.0, 2.0], [14000.0, 182.0], [14800.0, 23.0], [14400.0, 13.0], [15200.0, 36.0], [15600.0, 3.0], [16000.0, 105.0], [16800.0, 1.0], [17600.0, 45.0], [18400.0, 16.0], [19200.0, 5.0], [20000.0, 56.0], [20800.0, 3.0], [21600.0, 12.0], [22400.0, 6.0], [23200.0, 17.0], [24000.0, 6.0], [24800.0, 7.0], [26400.0, 4.0], [27200.0, 2.0], [28000.0, 2.0], [28800.0, 39.0], [29600.0, 5.0], [30400.0, 1.0], [31200.0, 2.0], [32000.0, 14.0], [33600.0, 6.0], [131900.0, 2.0], [138300.0, 13.0], [35200.0, 2.0], [144700.0, 1.0], [36800.0, 2.0], [38400.0, 53.0], [44800.0, 4.0], [43200.0, 3.0], [48000.0, 1.0], [195900.0, 5.0], [51200.0, 28.0], [54400.0, 19.0], [56000.0, 2.0], [60800.0, 1.0], [64000.0, 19.0], [67200.0, 1.0], [73600.0, 2.0], [76800.0, 3.0], [83200.0, 2.0], [86400.0, 1.0], [96000.0, 2.0], [134400.0, 12.0], [132100.0, 1.0], [144900.0, 13.0], [67100.0, 73.0], [73500.0, 2.0], [76700.0, 1.0], [83100.0, 1.0], [86300.0, 1.0], [92700.0, 2.0], [99100.0, 4.0], [127900.0, 1.0], [33100.0, 10.0], [34700.0, 16.0], [153100.0, 1.0], [159500.0, 1.0], [42700.0, 2.0], [41100.0, 13.0], [44300.0, 5.0], [45900.0, 4.0], [47500.0, 8.0], [210700.0, 1.0], [57100.0, 2.0], [58700.0, 1.0], [61900.0, 2.0], [63500.0, 1.0], [65100.0, 2.0], [66200.0, 4.0], [72600.0, 2.0], [75800.0, 25.0], [79000.0, 2.0], [95000.0, 2.0], [111000.0, 1.0], [131600.0, 1.0], [144400.0, 10.0], [135700.0, 15.0], [148500.0, 1.0], [154900.0, 8.0], [161300.0, 4.0], [206100.0, 1.0], [68500.0, 2.0], [71700.0, 1.0], [74900.0, 56.0], [81300.0, 5.0], [87700.0, 2.0], [90900.0, 1.0], [100500.0, 1.0], [129300.0, 1.0], [159000.0, 3.0], [16900.0, 24.0], [17700.0, 30.0], [18500.0, 2.0], [20100.0, 22.0], [20900.0, 23.0], [21700.0, 2.0], [22500.0, 9.0], [23300.0, 12.0], [24100.0, 9.0], [24900.0, 7.0], [25700.0, 6.0], [26500.0, 7.0], [28100.0, 1.0], [28900.0, 22.0], [30500.0, 16.0], [29700.0, 10.0], [31300.0, 2.0], [32100.0, 52.0], [137500.0, 2.0], [33800.0, 3.0], [35400.0, 9.0], [37000.0, 1.0], [163100.0, 45.0], [40200.0, 3.0], [41800.0, 2.0], [48200.0, 1.0], [49800.0, 2.0], [56200.0, 2.0], [57800.0, 3.0], [61000.0, 2.0], [64200.0, 40.0], [67600.0, 1.0], [74000.0, 1.0], [80400.0, 35.0], [83600.0, 2.0], [90000.0, 2.0], [86800.0, 2.0], [99600.0, 2.0], [102800.0, 1.0], [128400.0, 1.0], [136800.0, 18.0], [156000.0, 2.0], [134500.0, 50.0], [147300.0, 23.0], [67500.0, 2.0], [80300.0, 2.0], [83500.0, 2.0], [89900.0, 2.0], [86700.0, 1.0], [138600.0, 20.0], [145000.0, 3.0], [33300.0, 31.0], [136300.0, 32.0], [34900.0, 15.0], [142700.0, 2.0], [36500.0, 1.0], [168300.0, 2.0], [41300.0, 8.0], [42900.0, 1.0], [50900.0, 2.0], [55700.0, 1.0], [60500.0, 2.0], [65300.0, 8.0], [63700.0, 2.0], [66600.0, 13.0], [69800.0, 1.0], [73000.0, 9.0], [76200.0, 4.0], [79400.0, 1.0], [89000.0, 3.0], [92200.0, 1.0], [108200.0, 2.0], [130600.0, 2.0], [127400.0, 1.0], [134000.0, 26.0], [153200.0, 9.0], [138100.0, 120.0], [144500.0, 1.0], [65700.0, 2.0], [72100.0, 4.0], [75300.0, 6.0], [78500.0, 2.0], [84900.0, 6.0], [88100.0, 7.0], [100900.0, 1.0], [107300.0, 1.0], [8500.0, 109.0], [135800.0, 12.0], [8900.0, 198.0], [9700.0, 50.0], [9300.0, 8.0], [10100.0, 196.0], [161400.0, 23.0], [10500.0, 2.0], [10900.0, 25.0], [11300.0, 4.0], [11700.0, 10.0], [12100.0, 33.0], [12500.0, 6.0], [12900.0, 166.0], [13300.0, 6.0], [13700.0, 11.0], [14100.0, 12.0], [14900.0, 64.0], [15300.0, 8.0], [15700.0, 31.0], [16100.0, 148.0], [17000.0, 19.0], [17800.0, 11.0], [18600.0, 34.0], [19400.0, 7.0], [20200.0, 5.0], [21000.0, 21.0], [22600.0, 9.0], [23400.0, 4.0], [24200.0, 1.0], [25000.0, 12.0], [25800.0, 3.0], [27400.0, 4.0], [29000.0, 1.0], [29800.0, 15.0], [30600.0, 1.0], [31400.0, 4.0], [32200.0, 44.0], [34000.0, 5.0], [146300.0, 1.0], [38800.0, 2.0], [40400.0, 2.0], [43600.0, 20.0], [46800.0, 12.0], [54800.0, 6.0], [58000.0, 2.0], [64400.0, 12.0], [68000.0, 11.0], [71200.0, 1.0], [77600.0, 1.0], [80800.0, 2.0], [84000.0, 31.0], [100000.0, 206.0], [136000.0, 1.0], [146500.0, 14.0], [159300.0, 4.0], [67900.0, 2.0], [74300.0, 3.0], [90300.0, 1.0], [112700.0, 1.0], [128700.0, 1.0], [163400.0, 1.0], [33500.0, 47.0], [135500.0, 28.0], [35100.0, 4.0], [38300.0, 2.0], [39900.0, 2.0], [41500.0, 1.0], [43100.0, 2.0], [47900.0, 15.0], [49500.0, 4.0], [52700.0, 8.0], [60700.0, 1.0], [62300.0, 3.0], [63900.0, 1.0], [65500.0, 2.0], [67000.0, 17.0], [73400.0, 3.0], [79800.0, 4.0], [86200.0, 1.0], [99000.0, 2.0], [102200.0, 1.0], [131000.0, 17.0], [127800.0, 2.0], [139600.0, 2.0], [146000.0, 33.0], [152400.0, 2.0], [143700.0, 2.0], [69300.0, 3.0], [66100.0, 3.0], [72500.0, 2.0], [75700.0, 3.0], [91700.0, 1.0], [98100.0, 3.0], [104500.0, 1.0], [117300.0, 2.0], [154200.0, 1.0], [160600.0, 1.0], [17100.0, 14.0], [17900.0, 47.0], [18700.0, 6.0], [20300.0, 1.0], [19500.0, 4.0], [21100.0, 1.0], [23500.0, 2.0], [24300.0, 35.0], [25100.0, 75.0], [27500.0, 2.0], [29100.0, 3.0], [30700.0, 6.0], [31500.0, 7.0], [32300.0, 31.0], [34200.0, 64.0], [35800.0, 2.0], [42200.0, 1.0], [43800.0, 11.0], [45400.0, 5.0], [55000.0, 3.0], [58200.0, 1.0], [63000.0, 2.0], [78000.0, 3.0], [81200.0, 1.0], [87600.0, 1.0], [90800.0, 1.0], [94000.0, 5.0], [129200.0, 37.0], [138400.0, 2.0], [144800.0, 53.0], [136100.0, 1.0], [142500.0, 1.0], [68300.0, 25.0], [84300.0, 1.0], [97100.0, 9.0], [103500.0, 4.0], [129100.0, 11.0], [159400.0, 2.0], [33700.0, 2.0], [150700.0, 1.0], [40100.0, 16.0], [44900.0, 25.0], [52900.0, 2.0], [59300.0, 1.0], [60900.0, 4.0], [64100.0, 3.0], [67400.0, 97.0], [73800.0, 3.0], [77000.0, 16.0], [80200.0, 1.0], [93000.0, 17.0], [109000.0, 1.0], [128200.0, 8.0], [135600.0, 31.0], [154800.0, 6.0], [161200.0, 3.0], [133300.0, 4.0], [146100.0, 1.0], [152500.0, 1.0], [158900.0, 7.0], [4100.0, 148.0], [4300.0, 49.0], [66500.0, 10.0], [4500.0, 43.0], [72900.0, 2.0], [4700.0, 202.0], [4900.0, 31.0], [5100.0, 11.0], [79300.0, 1.0], [5300.0, 23.0], [82500.0, 2.0], [5500.0, 41.0], [5700.0, 205.0], [6100.0, 108.0], [5900.0, 28.0], [6300.0, 12.0], [101700.0, 1.0], [6500.0, 19.0], [104900.0, 2.0], [6700.0, 24.0], [6900.0, 107.0], [7100.0, 35.0], [7300.0, 158.0], [7500.0, 161.0], [7700.0, 1.0], [7900.0, 185.0], [8100.0, 229.0], [8600.0, 317.0], [8200.0, 76.0], [137400.0, 14.0], [9000.0, 40.0], [9400.0, 9.0], [9800.0, 9.0], [10200.0, 153.0], [10600.0, 33.0], [169400.0, 1.0], [11000.0, 110.0], [11400.0, 8.0], [12200.0, 9.0], [11800.0, 21.0], [12600.0, 5.0], [13000.0, 124.0], [13800.0, 56.0], [13400.0, 8.0], [14200.0, 2.0], [14600.0, 90.0], [15000.0, 118.0], [15400.0, 10.0], [15800.0, 56.0], [16200.0, 12.0], [17200.0, 56.0], [16400.0, 8.0], [18800.0, 7.0], [22000.0, 15.0], [24400.0, 2.0], [27600.0, 1.0], [30000.0, 15.0], [30800.0, 2.0], [31600.0, 7.0], [32400.0, 2.0], [32800.0, 12.0], [135100.0, 42.0], [34400.0, 27.0], [36000.0, 9.0], [154300.0, 3.0], [40800.0, 2.0], [44000.0, 4.0], [45600.0, 3.0], [48800.0, 3.0], [56800.0, 35.0], [60000.0, 2.0], [63200.0, 107.0], [64800.0, 55.0], [68800.0, 7.0], [65600.0, 3.0], [72000.0, 4.0], [75200.0, 22.0], [78400.0, 3.0], [81600.0, 2.0], [88000.0, 2.0], [91200.0, 1.0], [94400.0, 1.0], [100800.0, 1.0], [129600.0, 7.0], [144000.0, 1.0], [163200.0, 6.0], [205700.0, 1.0], [68700.0, 20.0], [71900.0, 3.0], [81500.0, 2.0], [100700.0, 1.0], [133000.0, 2.0], [139400.0, 2.0], [184200.0, 2.0], [33900.0, 7.0], [137100.0, 15.0], [35500.0, 1.0], [46700.0, 34.0], [45100.0, 5.0], [49900.0, 2.0], [54700.0, 2.0], [57900.0, 5.0], [61100.0, 3.0], [64300.0, 9.0], [67800.0, 5.0], [71000.0, 5.0], [77400.0, 3.0], [74200.0, 3.0], [80600.0, 3.0], [83800.0, 8.0], [87000.0, 2.0], [93400.0, 2.0], [154000.0, 3.0], [205200.0, 3.0], [145300.0, 5.0], [66900.0, 1.0], [70100.0, 1.0], [73300.0, 3.0], [79700.0, 3.0], [86100.0, 2.0], [89300.0, 1.0], [98900.0, 1.0], [111700.0, 11.0], [130900.0, 25.0], [127700.0, 1.0], [136600.0, 9.0], [143000.0, 1.0], [155800.0, 2.0], [162200.0, 1.0], [16500.0, 12.0], [17300.0, 71.0], [18100.0, 12.0], [18900.0, 8.0], [20500.0, 2.0], [22900.0, 79.0], [23700.0, 2.0], [24500.0, 83.0], [25300.0, 4.0], [26100.0, 1.0], [26900.0, 2.0], [28500.0, 4.0], [27700.0, 1.0], [29300.0, 1.0], [30100.0, 1.0], [30900.0, 1.0], [31700.0, 22.0], [33000.0, 28.0], [34600.0, 4.0], [147100.0, 35.0], [37800.0, 2.0], [39400.0, 1.0], [41000.0, 3.0], [44200.0, 2.0], [45800.0, 3.0], [47400.0, 30.0], [50600.0, 1.0], [53800.0, 3.0], [57000.0, 2.0], [60200.0, 16.0], [65000.0, 2.0], [66000.0, 8.0], [75600.0, 14.0], [82000.0, 4.0], [98000.0, 2.0], [101200.0, 2.0], [130000.0, 16.0], [133600.0, 1.0], [146400.0, 3.0], [137700.0, 2.0], [163300.0, 1.0], [65900.0, 5.0], [69100.0, 1.0], [72300.0, 1.0], [75500.0, 2.0], [81900.0, 1.0], [85100.0, 1.0], [88300.0, 2.0], [101100.0, 1.0], [129900.0, 22.0], [135400.0, 10.0], [148200.0, 10.0], [34100.0, 7.0], [139500.0, 3.0], [145900.0, 23.0], [152300.0, 1.0], [37300.0, 3.0], [158700.0, 1.0], [40500.0, 1.0], [43700.0, 17.0], [45300.0, 23.0], [46900.0, 4.0], [54900.0, 7.0], [53300.0, 1.0], [56500.0, 3.0], [61300.0, 1.0], [64500.0, 3.0], [68200.0, 1.0], [77800.0, 3.0], [74600.0, 3.0], [81000.0, 11.0], [87400.0, 1.0], [100200.0, 54.0], [103400.0, 3.0], [150000.0, 14.0], [147700.0, 2.0], [67300.0, 2.0], [73700.0, 4.0], [76900.0, 1.0], [92900.0, 21.0], [96100.0, 1.0], [128100.0, 1.0], [8300.0, 28.0], [8700.0, 3.0], [139000.0, 25.0], [9100.0, 13.0], [145400.0, 8.0], [9500.0, 48.0], [9900.0, 115.0], [158200.0, 1.0], [10300.0, 102.0], [10700.0, 2.0], [11100.0, 76.0], [11500.0, 6.0], [11900.0, 56.0], [12700.0, 115.0], [12300.0, 46.0], [13100.0, 118.0], [13500.0, 6.0], [13900.0, 96.0], [14300.0, 11.0], [14700.0, 48.0], [15100.0, 82.0], [15500.0, 2.0], [15900.0, 59.0], [16300.0, 56.0], [16600.0, 5.0], [17400.0, 5.0], [18200.0, 142.0], [19000.0, 3.0], [19800.0, 4.0], [20600.0, 4.0], [23000.0, 6.0], [26200.0, 3.0], [28600.0, 8.0], [27800.0, 1.0], [30200.0, 3.0], [31000.0, 13.0], [32600.0, 24.0], [31800.0, 2.0], [33200.0, 24.0], [34800.0, 2.0], [143100.0, 15.0], [42800.0, 4.0], [44400.0, 2.0], [46000.0, 2.0], [54000.0, 2.0], [60400.0, 7.0], [62000.0, 2.0], [65200.0, 1.0], [63600.0, 3.0], [66400.0, 3.0], [79200.0, 14.0], [82400.0, 1.0], [85600.0, 1.0], [92000.0, 1.0], [108000.0, 1.0], [127200.0, 1.0], [136900.0, 16.0], [143300.0, 1.0], [149700.0, 1.0], [156100.0, 3.0], [66300.0, 8.0], [69500.0, 1.0], [75900.0, 14.0], [82300.0, 14.0], [91900.0, 3.0], [95100.0, 2.0], [111100.0, 3.0], [153800.0, 1.0], [145100.0, 3.0], [40700.0, 1.0], [39100.0, 7.0], [42300.0, 1.0], [43900.0, 2.0], [183500.0, 2.0], [48700.0, 4.0], [51900.0, 2.0], [63100.0, 2.0], [75000.0, 8.0], [81400.0, 2.0], [110200.0, 1.0], [134100.0, 23.0], [146900.0, 11.0], [153300.0, 3.0], [74100.0, 2.0], [80500.0, 4.0], [83700.0, 2.0], [90100.0, 1.0], [93300.0, 2.0], [99700.0, 2.0], [102900.0, 1.0], [144600.0, 6.0], [16700.0, 47.0], [18300.0, 34.0], [19100.0, 33.0], [19900.0, 19.0], [20700.0, 2.0], [21500.0, 16.0], [22300.0, 1.0], [23100.0, 7.0], [23900.0, 6.0], [24700.0, 2.0], [25500.0, 4.0], [27100.0, 4.0], [27900.0, 2.0], [28700.0, 6.0], [29500.0, 2.0], [30300.0, 7.0], [31100.0, 5.0], [31900.0, 12.0], [32700.0, 11.0], [135900.0, 1.0], [33400.0, 3.0], [35000.0, 29.0], [36600.0, 1.0], [38200.0, 27.0], [148700.0, 1.0], [161500.0, 25.0], [39800.0, 2.0], [41400.0, 2.0], [46200.0, 2.0], [52600.0, 23.0], [59000.0, 14.0], [65400.0, 1.0], [66800.0, 1.0], [73200.0, 17.0], [79600.0, 4.0], [86000.0, 9.0], [82800.0, 4.0], [92400.0, 2.0], [105200.0, 3.0], [127600.0, 2.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 210700.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 512.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 71575.0, "series": [{"data": [[0.0, 71575.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 1408.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 16689.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 512.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 468.5, "minX": 1.68286062E12, "maxY": 3000.0, "series": [{"data": [[1.68286092E12, 1066.8146513680506], [1.68286062E12, 3000.0], [1.68286074E12, 3000.0], [1.68286068E12, 3000.0], [1.68286086E12, 2938.037473741273], [1.6828608E12, 3000.0], [1.68286098E12, 468.5]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68286098E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 58.2, "minX": 461.0, "maxY": 146050.0, "series": [{"data": [[463.0, 74197.0], [462.0, 75209.0], [461.0, 74108.0], [478.0, 67128.0], [479.0, 66120.0], [477.0, 67131.0], [476.0, 68139.0], [475.0, 67039.0], [474.0, 68047.0], [473.0, 69151.0], [472.0, 65526.0], [471.0, 65526.0], [465.0, 68555.0], [464.0, 73093.0], [467.0, 67546.0], [466.0, 68553.0], [470.0, 66535.0], [469.0, 66537.0], [468.0, 67544.0], [494.0, 59052.0], [495.0, 58046.0], [493.0, 59056.0], [492.0, 60061.0], [491.0, 60064.0], [490.0, 61072.0], [489.0, 61075.0], [488.0, 62080.0], [487.0, 62082.0], [481.0, 65112.0], [480.0, 66117.0], [483.0, 64102.0], [482.0, 65111.0], [486.0, 63090.0], [485.0, 63094.0], [484.0, 64102.0], [510.0, 50976.0], [511.0, 49968.0], [509.0, 50978.0], [508.0, 51985.0], [507.0, 51988.0], [506.0, 52994.0], [505.0, 52999.0], [504.0, 54006.0], [503.0, 54008.0], [497.0, 57035.0], [496.0, 58044.0], [499.0, 56027.0], [498.0, 57034.0], [502.0, 55015.0], [501.0, 55017.0], [500.0, 56024.0], [540.0, 35832.0], [543.0, 33816.0], [529.0, 40882.0], [528.0, 41890.0], [531.0, 39873.0], [530.0, 40880.0], [533.0, 38863.0], [532.0, 39871.0], [542.0, 34823.0], [541.0, 34824.0], [539.0, 35835.0], [538.0, 36841.0], [537.0, 36842.0], [536.0, 37852.0], [527.0, 41892.0], [513.0, 48960.0], [512.0, 49967.0], [515.0, 47949.0], [514.0, 48957.0], [517.0, 46939.0], [516.0, 47946.0], [519.0, 45930.0], [518.0, 46936.0], [526.0, 42899.0], [525.0, 42900.0], [524.0, 43909.0], [523.0, 43911.0], [522.0, 44919.0], [521.0, 44920.0], [520.0, 45927.0], [535.0, 37853.0], [534.0, 38861.0], [572.0, 39340.0], [575.0, 39340.0], [560.0, 40141.0], [571.0, 39340.0], [570.0, 39341.0], [569.0, 39341.0], [568.0, 39341.0], [559.0, 40180.0], [545.0, 32807.0], [544.0, 33814.0], [547.0, 31796.0], [546.0, 32804.0], [550.0, 40188.0], [548.0, 31793.0], [558.0, 40182.0], [556.0, 40183.0], [555.0, 40187.5], [554.0, 40187.333333333336], [565.0, 40111.0], [564.0, 40112.5], [562.0, 30755.0], [561.0, 30755.0], [600.0, 32322.0], [606.0, 32318.5], [607.0, 32311.0], [592.0, 32325.0], [604.0, 32319.0], [603.0, 32321.0], [601.0, 32321.0], [589.0, 32325.0], [576.0, 39339.0], [578.0, 39335.0], [577.0, 39338.0], [580.0, 39334.0], [579.0, 39335.0], [583.0, 32327.0], [582.0, 35827.5], [588.0, 32325.0], [586.0, 32326.0], [585.0, 35826.5], [598.0, 32322.0], [597.0, 32323.0], [596.0, 32324.0], [593.0, 32324.5], [636.0, 25557.0], [639.0, 24546.0], [625.0, 32267.0], [624.0, 32273.0], [627.0, 29746.0], [626.0, 29748.0], [629.0, 29558.0], [628.0, 29568.0], [638.0, 24548.0], [637.0, 25555.0], [635.0, 26565.0], [634.0, 26566.0], [633.0, 27574.0], [632.0, 27576.0], [623.0, 32279.0], [609.0, 32306.0], [608.0, 32310.0], [611.0, 32300.0], [610.0, 32303.0], [613.0, 32300.0], [612.0, 32299.0], [615.0, 32296.0], [614.0, 32297.0], [622.0, 32280.0], [621.0, 32287.0], [619.0, 32288.0], [618.0, 32293.0], [616.0, 32294.0], [631.0, 28584.0], [630.0, 28586.0], [665.0, 19188.0], [670.0, 19180.0], [671.0, 19178.0], [657.0, 19193.0], [660.0, 19192.0], [658.0, 19192.0], [668.0, 19186.0], [667.0, 19187.0], [666.0, 19188.0], [664.0, 19190.0], [647.0, 20508.0], [646.0, 20510.0], [645.0, 21518.0], [644.0, 21520.0], [643.0, 22527.0], [642.0, 22529.0], [641.0, 23537.0], [640.0, 23538.0], [654.0, 20267.0], [652.0, 19194.0], [651.0, 18489.0], [650.0, 18491.0], [649.0, 19498.0], [648.0, 19500.0], [663.0, 19190.0], [662.0, 19191.0], [689.0, 18683.0], [701.0, 18680.0], [703.0, 18678.5], [688.0, 18683.0], [700.0, 18680.0], [699.0, 18680.0], [698.0, 18681.0], [678.0, 19162.0], [677.0, 19166.0], [676.0, 19167.0], [675.0, 19169.5], [674.0, 19170.0], [672.0, 19177.0], [687.0, 18683.0], [685.0, 18684.0], [682.0, 19151.0], [680.0, 19162.0], [695.0, 18681.5], [693.0, 18682.0], [691.0, 18682.0], [730.0, 146050.0], [734.0, 18284.0], [735.0, 18283.0], [720.0, 18288.0], [724.0, 18287.0], [722.0, 18287.333333333332], [733.0, 18284.0], [732.0, 18284.0], [731.0, 18285.0], [728.0, 18286.0], [711.0, 18656.0], [710.0, 18660.0], [709.0, 18662.0], [708.0, 18663.0], [707.0, 18673.0], [706.0, 18674.0], [705.0, 18677.0], [704.0, 18678.0], [718.0, 18288.0], [714.0, 16947.0], [713.0, 16949.0], [712.0, 18656.0], [726.0, 18286.0], [725.0, 18286.0], [761.0, 18270.0], [766.0, 18263.0], [767.0, 146028.0], [753.0, 18275.333333333332], [756.0, 18272.0], [755.0, 82157.5], [765.0, 18265.0], [764.0, 18266.0], [763.0, 18268.0], [760.0, 146036.0], [743.0, 18281.0], [742.0, 18281.0], [740.0, 18281.0], [739.0, 18281.5], [737.0, 18282.0], [736.0, 18283.0], [750.0, 18276.0], [749.0, 18277.0], [748.0, 146041.0], [747.0, 18278.0], [746.0, 18279.0], [745.0, 18279.0], [744.0, 18280.0], [759.0, 18272.0], [758.0, 18272.0], [794.0, 18239.0], [798.0, 18232.0], [799.0, 145997.0], [784.0, 18249.0], [787.0, 18248.0], [786.0, 18247.0], [789.0, 18244.0], [788.0, 18244.0], [797.0, 145998.0], [796.0, 18235.0], [795.0, 18238.0], [793.0, 18240.0], [775.0, 18254.0], [774.0, 18256.0], [773.0, 18256.0], [771.0, 18258.0], [770.0, 146023.0], [769.0, 18261.0], [768.0, 18261.0], [783.0, 18248.0], [782.0, 18249.0], [781.0, 18252.0], [780.0, 50193.25], [776.0, 18254.0], [791.0, 18241.0], [790.0, 18242.0], [824.0, 145961.0], [830.0, 18190.0], [831.0, 145989.5], [818.0, 18207.0], [817.0, 82098.0], [828.0, 19269.0], [827.0, 145961.0], [826.0, 18196.0], [815.0, 82098.0], [800.0, 18232.0], [802.0, 18228.0], [801.0, 18232.0], [807.0, 18221.0], [805.0, 18227.0], [813.0, 82099.5], [812.0, 18217.0], [811.0, 18218.0], [809.0, 18220.0], [808.0, 18220.0], [823.0, 18197.0], [822.0, 18205.0], [820.0, 18206.0], [819.0, 145971.0], [862.0, 144952.5], [863.0, 144952.0], [850.0, 82054.5], [848.0, 145938.0], [861.0, 144953.0], [859.0, 81608.5], [857.0, 16459.0], [856.0, 16460.0], [847.0, 18174.0], [833.0, 145954.0], [832.0, 145954.0], [836.0, 145946.5], [834.0, 145946.0], [839.0, 19254.0], [838.0, 145945.0], [844.0, 18174.0], [843.0, 18177.0], [842.0, 82633.0], [840.0, 18180.0], [855.0, 19231.0], [853.0, 145931.0], [852.0, 145933.0], [851.0, 145937.0], [881.0, 17713.0], [895.0, 17328.333333333332], [892.0, 17328.25], [889.0, 17329.0], [871.0, 144932.0], [869.0, 18254.0], [868.0, 144948.5], [866.0, 144952.0], [865.0, 18261.0], [864.0, 144952.0], [886.0, 17329.0], [883.0, 14941.0], [882.0, 14943.0], [880.0, 144408.0], [878.0, 17718.0], [877.0, 81064.5], [875.0, 144929.0], [874.0, 144931.0], [873.0, 81585.5], [872.0, 18242.0], [913.0, 17316.0], [925.0, 17309.0], [927.0, 17307.0], [912.0, 17319.0], [924.0, 17310.0], [922.0, 17312.0], [920.0, 17314.5], [901.0, 17326.0], [900.0, 17326.0], [898.0, 17327.5], [896.0, 17327.0], [911.0, 17320.0], [910.0, 17321.0], [908.0, 17322.0], [907.0, 17323.0], [905.0, 17324.0], [904.0, 17323.666666666668], [918.0, 17315.0], [917.0, 17315.0], [915.0, 17316.0], [953.0, 17271.0], [958.0, 17267.0], [959.0, 17267.0], [945.0, 17302.5], [948.0, 17294.0], [946.0, 17296.0], [957.0, 17269.0], [956.0, 17269.5], [954.0, 17270.0], [952.0, 17290.0], [933.0, 17305.0], [932.0, 17305.0], [931.0, 17305.0], [930.0, 17305.0], [943.0, 17303.0], [942.0, 17303.0], [941.0, 17303.0], [940.0, 17303.0], [939.0, 17303.0], [938.0, 17303.5], [937.0, 17304.0], [951.0, 17294.0], [950.0, 17294.0], [988.0, 16384.0], [990.0, 11452.333333333334], [986.0, 15579.5], [967.0, 17261.0], [966.0, 17261.0], [964.0, 17263.0], [962.0, 17266.0], [960.0, 17266.0], [982.0, 16385.0], [979.0, 13937.0], [978.0, 13938.0], [977.0, 16709.0], [975.0, 16708.0], [974.0, 17239.0], [973.0, 17240.0], [972.0, 17242.0], [971.0, 17243.0], [969.0, 17258.0], [968.0, 17258.0], [1019.0, 16376.0], [1011.0, 16378.0], [1021.0, 8978.0], [1023.0, 8978.0], [1010.0, 16379.0], [1008.0, 16379.0], [1020.0, 16376.0], [1017.0, 15840.0], [999.0, 15308.0], [998.0, 8984.0], [997.0, 16382.0], [995.0, 16382.5], [993.0, 13918.0], [1007.0, 16379.0], [1006.0, 15306.0], [1005.0, 15843.0], [1003.0, 12680.5], [1001.0, 16381.0], [1000.0, 16382.0], [1015.0, 16376.5], [1014.0, 8978.0], [1012.0, 15841.0], [1086.0, 11397.0], [1080.0, 15256.0], [1056.0, 15265.0], [1060.0, 15801.0], [1058.0, 15264.0], [1064.0, 16336.0], [1068.0, 8937.0], [1076.0, 13866.0], [1072.0, 12634.5], [1054.0, 13517.0], [1024.0, 8978.0], [1026.0, 16374.0], [1030.0, 15294.0], [1032.0, 8969.5], [1036.0, 12131.0], [1038.0, 15293.0], [1050.0, 8947.0], [1048.0, 15271.0], [1046.0, 11056.333333333334], [1044.0, 12647.0], [1040.0, 8964.0], [1070.0, 16334.0], [1148.0, 8891.0], [1126.0, 13124.0], [1124.0, 16306.0], [1132.0, 8906.0], [1150.0, 8890.0], [1146.0, 8891.0], [1144.0, 15222.0], [1140.0, 13116.0], [1136.0, 8901.0], [1088.0, 8931.5], [1092.0, 8929.0], [1094.0, 16325.0], [1098.0, 12089.0], [1102.0, 15785.0], [1118.0, 13131.0], [1114.0, 8916.5], [1110.0, 8921.0], [1108.0, 8922.0], [1106.0, 8923.0], [1212.0, 13176.0], [1184.0, 11484.0], [1186.0, 14645.0], [1188.0, 14644.0], [1190.0, 8319.0], [1192.0, 8310.0], [1194.0, 12754.0], [1196.0, 12467.0], [1198.0, 13190.0], [1214.0, 11470.0], [1208.0, 13184.0], [1204.0, 6864.0], [1202.0, 6865.0], [1152.0, 8886.0], [1156.0, 8849.0], [1154.0, 8885.5], [1162.0, 8846.666666666666], [1166.0, 15154.0], [1164.0, 8831.0], [1180.0, 15721.0], [1178.0, 10933.0], [1174.0, 16225.0], [1172.0, 8828.0], [1170.0, 8829.0], [1274.0, 8506.0], [1254.0, 8520.0], [1276.0, 8506.0], [1250.0, 10455.5], [1248.0, 8523.0], [1252.0, 8521.0], [1256.0, 8519.0], [1258.0, 8518.0], [1262.0, 8515.0], [1278.0, 8502.0], [1272.0, 8509.0], [1266.0, 10445.5], [1264.0, 8514.0], [1230.0, 9822.0], [1220.0, 8534.0], [1216.0, 10492.0], [1246.0, 8524.0], [1244.0, 12394.0], [1242.0, 8529.0], [1240.0, 8531.0], [1238.0, 8531.0], [1236.0, 8531.0], [1334.0, 8476.0], [1336.0, 8475.0], [1312.0, 8481.0], [1314.0, 8480.0], [1316.0, 8480.0], [1322.0, 8479.0], [1332.0, 8477.0], [1330.0, 8478.0], [1328.0, 12464.0], [1292.0, 8486.0], [1290.0, 12354.0], [1288.0, 8491.0], [1286.0, 8493.0], [1282.0, 8499.0], [1310.0, 8481.0], [1300.0, 9034.5], [1298.0, 8484.0], [1296.0, 8484.0], [1510.0, 8462.0], [1526.0, 8461.0], [1518.0, 8461.0], [1516.0, 9566.0], [1514.0, 8462.0], [1506.0, 8462.0], [1594.0, 11718.0], [1574.0, 28818.955223880595], [1570.0, 11218.461538461539], [1572.0, 45272.66216216217], [1576.0, 8780.571428571428], [1580.0, 8448.0], [1590.0, 7853.333333333333], [1584.0, 135199.0], [1564.0, 9699.5], [1542.0, 8460.0], [1544.0, 9748.666666666666], [1562.0, 9009.5], [1558.0, 9424.75], [1556.0, 8458.5], [1582.0, 8448.0], [1610.0, 6806.0], [1612.0, 5798.0], [1608.0, 7818.0], [1606.0, 8827.0], [1604.0, 7840.0], [1602.0, 11711.0], [1600.0, 7850.333333333333], [1788.0, 196.0], [1786.0, 197.0], [1784.0, 196.0], [1746.0, 201.0], [1740.0, 202.0], [1854.0, 189.33333333333334], [1850.0, 218.66666666666666], [1830.0, 193.25], [1832.0, 192.0], [1834.0, 204.8148148148148], [1836.0, 306.3333333333333], [1838.0, 191.0], [1848.0, 363.0], [1846.0, 234.12500000000003], [1844.0, 191.0], [1842.0, 277.5], [1840.0, 191.0], [1822.0, 193.0], [1802.0, 195.5], [1794.0, 196.0], [1820.0, 195.0], [1914.0, 7900.5], [1894.0, 7204.666666666667], [1892.0, 5801.5], [1896.0, 5799.0], [1900.0, 5797.0], [1916.0, 5792.0], [1912.0, 5794.0], [1910.0, 5795.0], [1908.0, 5795.0], [1864.0, 361.0], [1862.0, 362.0], [1856.0, 275.5], [1886.0, 5803.666666666667], [1880.0, 3922.0], [1952.0, 5760.0], [1978.0, 6926.5], [1954.0, 5757.0], [1960.0, 7152.666666666667], [1964.0, 5744.0], [1966.0, 5739.0], [1980.0, 5716.0], [1976.0, 9038.0], [1974.0, 8144.0], [1972.0, 5734.0], [1924.0, 6596.666666666667], [1922.0, 5791.0], [1928.0, 6595.666666666667], [1930.0, 5789.0], [1948.0, 6973.5], [1946.0, 5767.0], [1944.0, 9980.0], [1942.0, 5772.0], [1938.0, 8204.0], [2036.0, 15956.0], [2032.0, 7981.5], [2040.0, 6207.0], [2024.0, 11399.625], [2038.0, 13771.5], [2034.0, 6225.0], [1998.0, 2414.0], [1996.0, 2912.0], [1986.0, 9921.0], [2030.0, 11027.125], [2128.0, 15818.0], [2124.0, 15821.0], [2132.0, 16034.0], [2096.0, 15844.0], [2060.0, 15887.0], [2068.0, 15903.0], [2076.0, 15920.0], [2092.0, 15830.0], [2088.0, 15831.0], [2248.0, 7155.619047619048], [2244.0, 6143.0], [2240.0, 6143.0], [2232.0, 17231.0], [2384.0, 196.54545454545453], [2388.0, 195.0], [2392.0, 195.0], [2396.0, 195.0], [2416.0, 10634.0], [2400.0, 194.0], [2624.0, 208.0], [2664.0, 84.0], [2628.0, 207.0], [2636.0, 179.5], [2632.0, 179.66666666666666], [2640.0, 178.0], [2648.0, 87.0], [2672.0, 78.0], [2656.0, 85.77777777777777], [2620.0, 208.66666666666666], [2616.0, 209.38095238095235], [2596.0, 215.0], [2808.0, 1061.0], [2752.0, 7049.0], [2764.0, 7033.0], [2768.0, 7033.25], [2772.0, 8825.0], [2792.0, 1061.0], [2784.0, 1063.0], [2696.0, 59.0], [2700.0, 58.2], [2708.0, 7103.0], [2704.0, 7104.0], [2712.0, 7096.0], [2716.0, 7093.0], [2744.0, 7057.0], [2736.0, 7080.0], [2732.0, 7083.0], [2728.0, 7087.0], [2724.0, 7089.0], [2720.0, 7090.0], [2892.0, 175.0], [2816.0, 1059.9999999999998], [2904.0, 173.5161290322581], [2900.0, 174.0], [2896.0, 174.0], [2948.0, 165.1818181818182], [2992.0, 222.6], [3000.0, 5925.697057509828], [2944.0, 165.0], [2952.0, 164.0], [2956.0, 164.0], [2964.0, 84.0], [2968.0, 131.9090909090909], [2972.0, 97.45454545454545], [2988.0, 185.0], [2980.0, 204.7575757575757], [2976.0, 213.5], [2073.0, 15834.0], [2129.0, 16333.250000000002], [2069.0, 15946.0], [2077.0, 16545.5], [2093.0, 15914.0], [2089.0, 15953.0], [2085.0, 15889.333333333334], [2081.0, 17897.0], [2245.0, 6791.933333333333], [2253.0, 166.5], [2241.0, 6143.0], [2193.0, 16029.0], [2237.0, 5569.666666666666], [2389.0, 195.58666666666664], [2417.0, 10632.0], [2393.0, 194.44444444444446], [2397.0, 195.2], [2413.0, 85028.0], [2409.0, 131.75], [2405.0, 193.0], [2401.0, 193.25], [2677.0, 77.33333333333333], [2681.0, 75.5], [2637.0, 179.0], [2653.0, 87.0], [2673.0, 78.0], [2665.0, 79.0], [2617.0, 208.6], [2613.0, 209.8], [2605.0, 210.5], [2601.0, 211.0], [2797.0, 1061.0], [2793.0, 1062.5], [2813.0, 1060.0], [2773.0, 11727.0], [2809.0, 1060.5], [2785.0, 1062.5], [2701.0, 7109.0], [2713.0, 7095.0], [2717.0, 7093.0], [2745.0, 7057.0], [2741.0, 7059.0], [2733.0, 7083.0], [2905.0, 172.91666666666666], [2897.0, 174.0], [2945.0, 165.0769230769231], [2949.0, 164.14285714285714], [2997.0, 275.79999999999995], [2961.0, 227.28571428571428], [2969.0, 149.0], [2993.0, 185.57142857142856], [2989.0, 185.6], [2985.0, 185.0], [2981.0, 187.0], [1083.0, 8931.0], [1061.0, 8940.0], [1057.0, 15802.0], [1063.0, 8939.0], [1065.0, 8938.0], [1067.0, 12099.0], [1081.0, 8932.0], [1079.0, 13865.0], [1073.0, 8935.0], [1025.0, 12676.0], [1027.0, 16368.0], [1029.0, 12669.0], [1035.0, 8970.0], [1037.0, 8969.0], [1039.0, 8968.0], [1053.0, 16341.0], [1049.0, 8947.0], [1041.0, 8949.0], [1071.0, 16334.0], [1143.0, 8899.5], [1151.0, 8889.0], [1123.0, 8909.0], [1121.0, 12608.0], [1131.0, 13839.333333333334], [1129.0, 8907.5], [1133.0, 8901.0], [1149.0, 16288.5], [1145.0, 8897.0], [1141.0, 8899.0], [1137.0, 16297.666666666666], [1119.0, 8910.0], [1091.0, 12629.0], [1089.0, 8930.0], [1093.0, 15253.0], [1097.0, 15252.0], [1099.0, 8926.0], [1103.0, 8924.0], [1117.0, 15239.0], [1113.0, 12615.0], [1109.0, 15246.0], [1107.0, 8923.0], [1213.0, 6843.0], [1191.0, 15710.0], [1215.0, 11468.0], [1185.0, 14646.0], [1187.0, 8321.0], [1189.0, 8319.0], [1193.0, 12756.0], [1195.0, 12469.0], [1199.0, 6865.0], [1211.0, 6856.0], [1209.0, 13184.0], [1207.0, 10023.0], [1205.0, 13187.0], [1201.0, 11081.333333333334], [1183.0, 8322.5], [1159.0, 8846.5], [1157.0, 8849.0], [1163.0, 16244.0], [1179.0, 15721.0], [1175.0, 15151.5], [1171.0, 12528.0], [1169.0, 10937.666666666666], [1269.0, 8511.0], [1279.0, 8502.0], [1253.0, 8521.0], [1255.0, 139078.0], [1257.0, 8519.0], [1259.0, 8517.0], [1263.0, 8513.0], [1277.0, 8506.5], [1273.0, 8509.0], [1267.0, 8512.0], [1231.0, 8532.0], [1227.0, 8533.0], [1225.0, 8534.0], [1223.0, 8534.0], [1217.0, 10490.0], [1247.0, 8524.0], [1245.0, 8525.0], [1243.0, 8529.0], [1239.0, 8530.0], [1237.0, 8531.0], [1233.0, 8532.5], [1333.0, 8477.0], [1337.0, 9872.0], [1315.0, 8480.0], [1319.0, 8480.0], [1321.0, 8479.0], [1295.0, 10417.5], [1293.0, 8485.0], [1291.0, 8487.0], [1289.0, 8491.0], [1285.0, 8494.0], [1283.0, 8498.0], [1281.0, 8499.0], [1309.0, 8481.0], [1307.0, 9879.0], [1305.0, 8482.333333333334], [1303.0, 8482.0], [1301.0, 8483.0], [1299.0, 8484.0], [1327.0, 8479.0], [1323.0, 8479.0], [1529.0, 73739.25], [1525.0, 8461.0], [1501.0, 139021.0], [1509.0, 8462.0], [1597.0, 41188.25], [1591.0, 7852.0], [1569.0, 65676.42857142857], [1571.0, 139013.0], [1575.0, 10669.0], [1579.0, 8449.0], [1581.0, 8448.0], [1593.0, 7851.0], [1587.0, 7853.0], [1585.0, 8958.0], [1537.0, 8460.0], [1539.0, 8460.0], [1543.0, 8460.0], [1549.0, 139017.0], [1547.0, 8459.0], [1559.0, 8458.0], [1583.0, 8448.0], [1611.0, 6804.0], [1613.0, 5796.0], [1609.0, 7816.0], [1607.0, 8825.0], [1605.0, 11697.0], [1603.0, 7841.0], [1601.0, 138407.0], [1853.0, 225.3448275862069], [1831.0, 192.5], [1833.0, 192.0], [1837.0, 191.25], [1835.0, 205.86486486486487], [1839.0, 208.3], [1851.0, 190.0], [1847.0, 225.1142857142857], [1845.0, 191.0], [1841.0, 248.77777777777777], [1807.0, 195.0], [1805.0, 194.33333333333334], [1801.0, 196.18181818181816], [1797.0, 196.0], [1795.0, 196.0], [1915.0, 5792.0], [1917.0, 8209.0], [1891.0, 5802.0], [1893.0, 5801.0], [1895.0, 5801.0], [1897.0, 5799.0], [1899.0, 5798.0], [1903.0, 7903.5], [1901.0, 5798.0], [1907.0, 5796.0], [1905.0, 5796.0], [1869.0, 355.0], [1863.0, 258.4], [1861.0, 189.0], [1859.0, 189.0], [1857.0, 189.66666666666666], [1883.0, 5808.0], [1881.0, 3920.0], [1879.0, 4858.5], [1877.0, 225.0], [1875.0, 225.0], [1953.0, 8176.0], [1983.0, 5711.5], [1955.0, 8172.0], [1957.0, 7858.5], [1963.0, 8553.666666666666], [1965.0, 5743.0], [1981.0, 5716.0], [1973.0, 5731.0], [1971.0, 7842.5], [1969.0, 5737.333333333333], [1951.0, 7973.0], [1921.0, 6596.333333333333], [1925.0, 5790.0], [1931.0, 10003.0], [1935.0, 5788.0], [1933.0, 5788.5], [1945.0, 5767.0], [1943.0, 5770.0], [1941.0, 5784.5], [1939.0, 7191.0], [2033.0, 10107.0], [2027.0, 11353.888888888889], [2039.0, 6208.0], [2035.0, 16103.0], [1999.0, 2414.0], [1997.0, 2910.0], [1995.0, 8110.0], [1991.0, 8118.0], [1989.0, 8118.0], [1987.0, 5707.0], [1985.0, 6918.5], [2031.0, 6226.0], [2070.0, 9709.0], [2126.0, 15844.0], [2130.0, 16351.6], [2118.0, 16517.4], [2058.0, 13700.176470588236], [2062.0, 13480.25], [2066.0, 13848.0], [2074.0, 15860.0], [2090.0, 15887.0], [2250.0, 8084.2], [2246.0, 6142.0], [2242.0, 6144.0], [2390.0, 195.0], [2414.0, 8798.0], [2394.0, 194.6], [2398.0, 195.0], [2410.0, 9807.0], [2402.0, 194.0], [2582.0, 216.0], [2674.0, 78.0], [2670.0, 80.0], [2662.0, 85.0], [2618.0, 208.65116279069764], [2610.0, 210.66666666666666], [2602.0, 210.0], [2598.0, 212.81818181818184], [2614.0, 209.5], [2802.0, 1061.0], [2806.0, 1060.8], [2766.0, 7033.0], [2770.0, 7033.0], [2782.0, 1062.6666666666667], [2798.0, 1061.0], [2794.0, 1062.0], [2750.0, 7055.5], [2698.0, 59.0], [2702.0, 7109.0], [2710.0, 7097.0], [2714.0, 7094.0], [2718.0, 7090.0], [2742.0, 7058.0], [2734.0, 7082.0], [2726.0, 7088.0], [2902.0, 174.0], [2882.0, 175.0], [2906.0, 172.17391304347828], [2950.0, 164.125], [2946.0, 165.0], [2958.0, 208.79999999999998], [2962.0, 90.0], [2966.0, 139.5], [2974.0, 131.83333333333334], [2998.0, 230.125], [2994.0, 185.0], [2990.0, 185.125], [2986.0, 186.33333333333334], [2982.0, 187.0], [2978.0, 212.0], [2127.0, 16366.333333333334], [2115.0, 16385.857142857145], [2131.0, 15962.0], [2063.0, 15947.0], [2071.0, 15944.0], [2075.0, 15860.0], [2079.0, 16545.0], [2091.0, 15915.0], [2083.0, 15888.0], [2251.0, 7685.624999999999], [2247.0, 6966.500000000001], [2243.0, 6143.0], [2239.0, 6144.0], [2387.0, 196.42857142857144], [2391.0, 194.0], [2399.0, 193.33333333333334], [2415.0, 8795.0], [2411.0, 11008.0], [2403.0, 193.0], [2627.0, 207.0], [2679.0, 76.0], [2631.0, 180.0], [2639.0, 178.5], [2643.0, 140.66666666666666], [2647.0, 86.0], [2651.0, 87.0], [2671.0, 78.33333333333333], [2663.0, 84.0], [2659.0, 85.33333333333333], [2623.0, 208.14285714285714], [2587.0, 215.0], [2619.0, 208.74999999999997], [2615.0, 209.79999999999995], [2607.0, 212.0], [2603.0, 211.0], [2795.0, 1061.5], [2771.0, 7032.5], [2803.0, 1061.0], [2799.0, 1061.0], [2787.0, 1062.0], [2703.0, 7108.0], [2711.0, 7097.0], [2715.0, 7094.0], [2719.0, 7090.0], [2747.0, 7056.25], [2735.0, 7080.0], [2731.0, 7086.0], [2727.0, 7087.0], [2723.0, 7089.0], [2879.0, 175.0], [2943.0, 165.16666666666666], [2871.0, 176.0], [2903.0, 175.0], [2895.0, 175.0], [2951.0, 164.0], [2947.0, 165.0], [2955.0, 164.0], [2963.0, 108.45454545454545], [2967.0, 88.40000000000002], [2975.0, 144.0], [2999.0, 286.25], [2995.0, 215.66666666666669], [2987.0, 186.2], [2983.0, 186.55555555555557]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[2965.124589727666, 6143.567329016363]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 3000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 134.4, "minX": 1.68286062E12, "maxY": 264547.35, "series": [{"data": [[1.68286092E12, 12329.966666666667], [1.68286062E12, 240033.96666666667], [1.68286074E12, 264547.35], [1.68286068E12, 219237.43333333332], [1.68286086E12, 176123.5], [1.6828608E12, 173104.48333333334], [1.68286098E12, 196.03333333333333]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.68286092E12, 9517.2], [1.68286062E12, 167613.6], [1.68286074E12, 176064.0], [1.68286068E12, 156105.6], [1.68286086E12, 123816.0], [1.6828608E12, 119994.0], [1.68286098E12, 134.4]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68286098E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 1433.049912565575, "minX": 1.68286062E12, "maxY": 69081.5625, "series": [{"data": [[1.68286092E12, 27323.107678729044], [1.68286062E12, 1433.049912565575], [1.68286074E12, 9348.828850396689], [1.68286068E12, 8169.1781565928695], [1.68286086E12, 3687.714847191158], [1.6828608E12, 6113.537315511013], [1.68286098E12, 69081.5625]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68286098E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 1304.7016737446925, "minX": 1.68286062E12, "maxY": 69081.5625, "series": [{"data": [[1.68286092E12, 27323.095322153575], [1.68286062E12, 1304.7016737446925], [1.68286074E12, 8225.238886541809], [1.68286068E12, 8130.413476016289], [1.68286086E12, 3560.36599579861], [1.6828608E12, 5863.157894736846], [1.68286098E12, 69081.5625]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68286098E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.18749999999999997, "minX": 1.68286062E12, "maxY": 10136.819947043252, "series": [{"data": [[1.68286092E12, 10136.819947043252], [1.68286062E12, 447.7682737946527], [1.68286074E12, 7404.861334084383], [1.68286068E12, 1051.8399118089908], [1.68286086E12, 758.6847597750228], [1.6828608E12, 1618.029239766081], [1.68286098E12, 0.18749999999999997]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68286098E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 4.0, "minX": 1.68286062E12, "maxY": 210711.0, "series": [{"data": [[1.68286092E12, 146050.0], [1.68286062E12, 58728.0], [1.68286074E12, 175470.0], [1.68286068E12, 101111.0], [1.68286086E12, 129689.0], [1.6828608E12, 210711.0], [1.68286098E12, 75209.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.68286092E12, 56025.8], [1.68286062E12, 318.0], [1.68286074E12, 6010.200000000012], [1.68286068E12, 16042.0], [1.68286086E12, 4655.499999999998], [1.6828608E12, 11926.0], [1.68286098E12, 74500.6]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.68286092E12, 145991.9], [1.68286062E12, 34971.0], [1.68286074E12, 152429.26000000013], [1.68286068E12, 100116.0], [1.68286086E12, 77087.0], [1.6828608E12, 100188.14], [1.68286098E12, 75209.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.68286092E12, 139013.3], [1.68286062E12, 7396.25], [1.68286074E12, 129957.65000000001], [1.68286068E12, 66618.75], [1.68286086E12, 14993.0], [1.6828608E12, 34499.7], [1.68286098E12, 75209.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.68286092E12, 6843.0], [1.68286062E12, 4.0], [1.68286074E12, 20.0], [1.68286068E12, 4.0], [1.68286086E12, 9.0], [1.6828608E12, 20.0], [1.68286098E12, 65526.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.68286092E12, 16376.0], [1.68286062E12, 103.0], [1.68286074E12, 178.0], [1.68286068E12, 118.0], [1.68286086E12, 180.0], [1.6828608E12, 178.0], [1.68286098E12, 68093.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68286098E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 5.0, "minX": 1.0, "maxY": 160861.0, "series": [{"data": [[2.0, 44415.0], [3.0, 13190.0], [4.0, 11748.5], [5.0, 64820.0], [6.0, 28698.0], [7.0, 36000.0], [8.0, 27188.0], [9.0, 42804.0], [10.0, 33850.0], [11.0, 14100.5], [13.0, 4862.0], [14.0, 19191.0], [15.0, 29879.0], [16.0, 6904.0], [17.0, 2624.0], [18.0, 6856.0], [21.0, 13863.0], [24.0, 7853.0], [25.0, 117358.5], [27.0, 6376.0], [28.0, 145935.0], [30.0, 1020.5], [33.0, 1428.0], [32.0, 5.5], [37.0, 37.0], [40.0, 8848.0], [42.0, 56861.0], [44.0, 34269.0], [48.0, 4683.5], [54.0, 64822.5], [63.0, 87783.0], [69.0, 79.0], [68.0, 5919.5], [79.0, 99.0], [77.0, 32325.0], [102.0, 11264.0], [106.0, 163.0], [105.0, 17319.0], [111.0, 34545.0], [116.0, 7671.5], [120.0, 160861.0], [124.0, 6482.0], [139.0, 1243.0], [143.0, 13.0], [142.0, 150.5], [151.0, 7033.0], [156.0, 70.0], [154.0, 101669.0], [158.0, 195.0], [166.0, 18284.0], [191.0, 156.0], [199.0, 31.0], [192.0, 15252.0], [209.0, 124.0], [222.0, 14071.5], [219.0, 14743.0], [216.0, 171.0], [225.0, 100.0], [240.0, 59.0], [247.0, 154.0], [252.0, 7937.0], [267.0, 227.0], [271.0, 115.0], [258.0, 17698.5], [269.0, 9966.5], [257.0, 157.0], [266.0, 192.0], [276.0, 7.0], [287.0, 170.0], [273.0, 145.0], [281.0, 173.0], [283.0, 209.0], [289.0, 170.0], [302.0, 125.0], [301.0, 140.0], [299.0, 179.0], [298.0, 174.5], [294.0, 170.0], [295.0, 176.0], [288.0, 172.0], [293.0, 181.0], [292.0, 178.0], [303.0, 196.0], [290.0, 165.0], [300.0, 159.0], [304.0, 135.0], [315.0, 173.0], [310.0, 5676.0], [311.0, 24.0], [314.0, 51.0], [318.0, 65.0], [306.0, 7328.0], [313.0, 195.0], [308.0, 174.0], [331.0, 320.0], [330.0, 100097.0], [320.0, 7869.5], [334.0, 194.0], [324.0, 167.5], [326.0, 172.0], [343.0, 55.0], [345.0, 134.0], [348.0, 8667.0], [381.0, 185.0], [382.0, 167.0], [379.0, 148.0], [376.0, 182.0], [368.0, 8517.5], [393.0, 92.0], [395.0, 60.5], [398.0, 6.0], [392.0, 6.0], [389.0, 6.0], [397.0, 209.0], [410.0, 6.0], [409.0, 6.0], [405.0, 6.0], [406.0, 10900.0], [401.0, 166.0], [425.0, 174.0], [427.0, 323.0], [428.0, 1489.0], [426.0, 171.0], [439.0, 7.0], [444.0, 28.0], [440.0, 150.0], [463.0, 15.0], [452.0, 71.0], [470.0, 16105.0], [468.0, 156.0], [486.0, 111.0], [492.0, 8.0], [484.0, 7.0], [494.0, 177.0], [487.0, 184.0], [509.0, 166.0], [528.0, 186.0], [540.0, 162.0], [527.0, 3925.0], [534.0, 170.0], [572.0, 174.0], [548.0, 179.0], [558.0, 225.0], [575.0, 159.0], [562.0, 168.0], [607.0, 142.0], [602.0, 132.0], [588.0, 10.5], [594.0, 5.0], [587.0, 4746.0], [604.0, 166.0], [606.0, 291.0], [605.0, 160.0], [597.0, 165.0], [599.0, 203.0], [592.0, 172.0], [591.0, 303.0], [583.0, 375.0], [632.0, 113.0], [619.0, 134.0], [639.0, 306.0], [611.0, 43.0], [612.0, 181.0], [616.0, 150.0], [617.0, 173.0], [635.0, 179.5], [638.0, 269.0], [614.0, 173.0], [613.0, 164.0], [644.0, 182.0], [660.0, 236.0], [766.0, 10296.0], [796.0, 293.0], [812.0, 8065.0], [838.0, 64.5], [853.0, 172.0], [862.0, 182.0], [888.0, 166.0], [889.0, 195.0], [894.0, 185.0], [902.0, 118.0], [923.0, 169.0], [920.0, 176.0], [936.0, 373.0], [1008.0, 228.0], [1102.0, 172.0], [1202.0, 83.0], [1165.0, 51.0], [1191.0, 298.0], [1257.0, 225.0], [1.0, 19499.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[527.0, 53387.0], [594.0, 60229.0], [583.0, 111787.0], [639.0, 38224.0], [635.0, 8816.0], [3.0, 58233.0], [54.0, 13834.0], [923.0, 54416.0], [63.0, 15118.0], [6.0, 28687.0], [120.0, 20041.5], [124.0, 45349.0], [8.0, 27179.0], [142.0, 76800.0], [154.0, 138137.0], [10.0, 60448.0], [191.0, 46036.0], [14.0, 15066.0], [271.0, 60212.0], [257.0, 137438.0], [16.0, 110258.0], [276.0, 43619.0], [303.0, 59082.0], [290.0, 23942.5], [295.0, 83700.5], [313.0, 136817.0], [306.0, 8802.5], [308.0, 56511.0], [320.0, 14816.0], [381.0, 10938.0], [389.0, 57193.0], [25.0, 20106.0], [440.0, 111178.0], [468.0, 100528.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1257.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 160861.0, "series": [{"data": [[2.0, 44415.0], [3.0, 13190.0], [4.0, 11748.5], [5.0, 64820.0], [6.0, 28698.0], [7.0, 36000.0], [8.0, 27188.0], [9.0, 42804.0], [10.0, 33850.0], [11.0, 14100.5], [13.0, 4862.0], [14.0, 19191.0], [15.0, 29879.0], [16.0, 6904.0], [17.0, 2624.0], [18.0, 6856.0], [21.0, 13863.0], [24.0, 7853.0], [25.0, 117358.5], [27.0, 6376.0], [28.0, 145935.0], [30.0, 1020.5], [33.0, 1428.0], [32.0, 5.5], [37.0, 37.0], [40.0, 8848.0], [42.0, 56861.0], [44.0, 34269.0], [48.0, 4683.5], [54.0, 64822.5], [63.0, 87783.0], [69.0, 79.0], [68.0, 5919.5], [79.0, 99.0], [77.0, 32325.0], [102.0, 11264.0], [106.0, 163.0], [105.0, 17318.0], [111.0, 34545.0], [116.0, 7671.5], [120.0, 160861.0], [124.0, 6482.0], [139.0, 1239.0], [143.0, 13.0], [142.0, 150.5], [151.0, 7033.0], [156.0, 70.0], [154.0, 101669.0], [158.0, 195.0], [166.0, 18284.0], [191.0, 156.0], [199.0, 31.0], [192.0, 15252.0], [209.0, 124.0], [222.0, 14071.5], [219.0, 14743.0], [216.0, 171.0], [225.0, 100.0], [240.0, 59.0], [247.0, 154.0], [252.0, 7937.0], [267.0, 227.0], [271.0, 115.0], [258.0, 17698.5], [269.0, 9966.5], [257.0, 157.0], [266.0, 192.0], [276.0, 7.0], [287.0, 170.0], [273.0, 145.0], [281.0, 173.0], [283.0, 209.0], [289.0, 170.0], [302.0, 125.0], [301.0, 140.0], [299.0, 179.0], [298.0, 174.0], [294.0, 170.0], [295.0, 176.0], [288.0, 172.0], [293.0, 181.0], [292.0, 178.0], [303.0, 196.0], [290.0, 165.0], [300.0, 159.0], [304.0, 135.0], [315.0, 173.0], [310.0, 5676.0], [311.0, 24.0], [314.0, 51.0], [318.0, 65.0], [306.0, 7328.0], [313.0, 195.0], [308.0, 174.0], [331.0, 320.0], [330.0, 100097.0], [320.0, 7869.5], [334.0, 194.0], [324.0, 167.0], [326.0, 172.0], [343.0, 55.0], [345.0, 134.0], [348.0, 8667.0], [381.0, 185.0], [382.0, 167.0], [379.0, 148.0], [376.0, 182.0], [368.0, 8517.5], [393.0, 92.0], [395.0, 60.5], [398.0, 6.0], [392.0, 6.0], [389.0, 6.0], [397.0, 209.0], [410.0, 6.0], [409.0, 6.0], [405.0, 6.0], [406.0, 10900.0], [401.0, 166.0], [425.0, 174.0], [427.0, 323.0], [428.0, 1488.5], [426.0, 171.0], [439.0, 7.0], [444.0, 28.0], [440.0, 150.0], [463.0, 15.0], [452.0, 71.0], [470.0, 16105.0], [468.0, 156.0], [486.0, 111.0], [492.0, 8.0], [484.0, 7.0], [494.0, 177.0], [487.0, 184.0], [509.0, 166.0], [528.0, 186.0], [540.0, 162.0], [527.0, 3925.0], [534.0, 170.0], [572.0, 174.0], [548.0, 179.0], [558.0, 225.0], [575.0, 159.0], [562.0, 168.0], [607.0, 142.0], [602.0, 132.0], [588.0, 10.5], [594.0, 5.0], [587.0, 4746.0], [604.0, 166.0], [606.0, 291.0], [605.0, 160.0], [597.0, 165.0], [599.0, 203.0], [592.0, 172.0], [591.0, 303.0], [583.0, 375.0], [632.0, 113.0], [619.0, 134.0], [639.0, 297.0], [611.0, 43.0], [612.0, 181.0], [616.0, 150.0], [617.0, 173.0], [635.0, 179.5], [638.0, 269.0], [614.0, 173.0], [613.0, 164.0], [644.0, 182.0], [660.0, 236.0], [766.0, 10296.0], [796.0, 293.0], [812.0, 8065.0], [838.0, 64.0], [853.0, 172.0], [862.0, 182.0], [888.0, 166.0], [889.0, 195.0], [894.0, 185.0], [902.0, 118.0], [923.0, 169.0], [920.0, 176.0], [936.0, 373.0], [1008.0, 228.0], [1102.0, 172.0], [1202.0, 83.0], [1165.0, 51.0], [1191.0, 298.0], [1257.0, 225.0], [1.0, 19499.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[527.0, 0.0], [594.0, 0.0], [583.0, 0.0], [639.0, 0.0], [635.0, 0.0], [3.0, 0.0], [54.0, 0.0], [923.0, 0.0], [63.0, 0.0], [6.0, 0.0], [120.0, 0.0], [124.0, 0.0], [8.0, 0.0], [142.0, 0.0], [154.0, 0.0], [10.0, 0.0], [191.0, 0.0], [14.0, 0.0], [271.0, 0.0], [257.0, 0.0], [16.0, 0.0], [276.0, 0.0], [303.0, 0.0], [290.0, 0.0], [295.0, 0.0], [313.0, 0.0], [306.0, 0.0], [308.0, 0.0], [320.0, 0.0], [381.0, 0.0], [389.0, 0.0], [25.0, 0.0], [440.0, 0.0], [468.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1257.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 20.0, "minX": 1.68286056E12, "maxY": 363.5833333333333, "series": [{"data": [[1.68286062E12, 363.5833333333333], [1.68286056E12, 20.0], [1.68286074E12, 345.0], [1.68286068E12, 291.4166666666667], [1.68286086E12, 248.06666666666666], [1.6828608E12, 235.0]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68286086E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.2, "minX": 1.68286062E12, "maxY": 349.3333333333333, "series": [{"data": [[1.68286092E12, 18.883333333333333], [1.68286062E12, 332.56666666666666], [1.68286074E12, 349.3333333333333], [1.68286068E12, 309.73333333333335], [1.68286086E12, 245.66666666666666], [1.6828608E12, 238.08333333333334], [1.68286098E12, 0.26666666666666666]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.68286062E12, 1.0166666666666666], [1.68286074E12, 5.716666666666667], [1.68286068E12, 0.2], [1.68286086E12, 0.2833333333333333], [1.6828608E12, 1.3166666666666667]], "isOverall": false, "label": "Non HTTP response code: java.net.SocketException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68286098E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.2, "minX": 1.68286062E12, "maxY": 349.3333333333333, "series": [{"data": [[1.68286092E12, 18.883333333333333], [1.68286062E12, 332.56666666666666], [1.68286074E12, 349.3333333333333], [1.68286068E12, 309.73333333333335], [1.68286086E12, 245.66666666666666], [1.6828608E12, 238.08333333333334], [1.68286098E12, 0.26666666666666666]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.68286062E12, 1.0166666666666666], [1.68286074E12, 5.716666666666667], [1.68286068E12, 0.2], [1.68286086E12, 0.2833333333333333], [1.6828608E12, 1.3166666666666667]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68286098E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.2, "minX": 1.68286062E12, "maxY": 349.3333333333333, "series": [{"data": [[1.68286092E12, 18.883333333333333], [1.68286062E12, 332.56666666666666], [1.68286074E12, 349.3333333333333], [1.68286068E12, 309.73333333333335], [1.68286086E12, 245.66666666666666], [1.6828608E12, 238.08333333333334], [1.68286098E12, 0.26666666666666666]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.68286062E12, 1.0166666666666666], [1.68286074E12, 5.716666666666667], [1.68286068E12, 0.2], [1.68286086E12, 0.2833333333333333], [1.6828608E12, 1.3166666666666667]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68286098E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

