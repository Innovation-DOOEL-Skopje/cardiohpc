/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 9.0, "minX": 0.0, "maxY": 217459.0, "series": [{"data": [[0.0, 9.0], [0.1, 27.0], [0.2, 30.0], [0.3, 32.0], [0.4, 34.0], [0.5, 35.0], [0.6, 37.0], [0.7, 38.0], [0.8, 39.0], [0.9, 40.0], [1.0, 42.0], [1.1, 43.0], [1.2, 44.0], [1.3, 45.0], [1.4, 46.0], [1.5, 47.0], [1.6, 47.0], [1.7, 48.0], [1.8, 49.0], [1.9, 50.0], [2.0, 51.0], [2.1, 52.0], [2.2, 52.0], [2.3, 53.0], [2.4, 54.0], [2.5, 54.0], [2.6, 55.0], [2.7, 56.0], [2.8, 56.0], [2.9, 57.0], [3.0, 58.0], [3.1, 58.0], [3.2, 59.0], [3.3, 59.0], [3.4, 60.0], [3.5, 60.0], [3.6, 61.0], [3.7, 61.0], [3.8, 61.0], [3.9, 62.0], [4.0, 62.0], [4.1, 63.0], [4.2, 63.0], [4.3, 63.0], [4.4, 64.0], [4.5, 64.0], [4.6, 65.0], [4.7, 65.0], [4.8, 66.0], [4.9, 66.0], [5.0, 66.0], [5.1, 67.0], [5.2, 67.0], [5.3, 68.0], [5.4, 68.0], [5.5, 69.0], [5.6, 69.0], [5.7, 70.0], [5.8, 70.0], [5.9, 71.0], [6.0, 71.0], [6.1, 71.0], [6.2, 72.0], [6.3, 72.0], [6.4, 72.0], [6.5, 73.0], [6.6, 73.0], [6.7, 74.0], [6.8, 74.0], [6.9, 75.0], [7.0, 75.0], [7.1, 76.0], [7.2, 76.0], [7.3, 77.0], [7.4, 77.0], [7.5, 78.0], [7.6, 78.0], [7.7, 78.0], [7.8, 79.0], [7.9, 79.0], [8.0, 79.0], [8.1, 80.0], [8.2, 80.0], [8.3, 80.0], [8.4, 81.0], [8.5, 81.0], [8.6, 81.0], [8.7, 82.0], [8.8, 82.0], [8.9, 83.0], [9.0, 83.0], [9.1, 84.0], [9.2, 84.0], [9.3, 84.0], [9.4, 85.0], [9.5, 85.0], [9.6, 86.0], [9.7, 86.0], [9.8, 87.0], [9.9, 87.0], [10.0, 88.0], [10.1, 88.0], [10.2, 89.0], [10.3, 89.0], [10.4, 90.0], [10.5, 90.0], [10.6, 91.0], [10.7, 91.0], [10.8, 92.0], [10.9, 92.0], [11.0, 93.0], [11.1, 94.0], [11.2, 94.0], [11.3, 95.0], [11.4, 95.0], [11.5, 96.0], [11.6, 96.0], [11.7, 96.0], [11.8, 97.0], [11.9, 98.0], [12.0, 99.0], [12.1, 99.0], [12.2, 100.0], [12.3, 100.0], [12.4, 101.0], [12.5, 101.0], [12.6, 102.0], [12.7, 103.0], [12.8, 103.0], [12.9, 104.0], [13.0, 104.0], [13.1, 105.0], [13.2, 106.0], [13.3, 106.0], [13.4, 107.0], [13.5, 108.0], [13.6, 108.0], [13.7, 109.0], [13.8, 109.0], [13.9, 110.0], [14.0, 110.0], [14.1, 111.0], [14.2, 111.0], [14.3, 112.0], [14.4, 113.0], [14.5, 113.0], [14.6, 114.0], [14.7, 115.0], [14.8, 116.0], [14.9, 117.0], [15.0, 118.0], [15.1, 119.0], [15.2, 120.0], [15.3, 120.0], [15.4, 121.0], [15.5, 121.0], [15.6, 122.0], [15.7, 123.0], [15.8, 124.0], [15.9, 124.0], [16.0, 125.0], [16.1, 126.0], [16.2, 127.0], [16.3, 128.0], [16.4, 130.0], [16.5, 132.0], [16.6, 134.0], [16.7, 135.0], [16.8, 137.0], [16.9, 139.0], [17.0, 141.0], [17.1, 142.0], [17.2, 144.0], [17.3, 145.0], [17.4, 147.0], [17.5, 149.0], [17.6, 150.0], [17.7, 151.0], [17.8, 155.0], [17.9, 157.0], [18.0, 159.0], [18.1, 161.0], [18.2, 162.0], [18.3, 164.0], [18.4, 166.0], [18.5, 168.0], [18.6, 169.0], [18.7, 170.0], [18.8, 170.0], [18.9, 171.0], [19.0, 172.0], [19.1, 173.0], [19.2, 174.0], [19.3, 176.0], [19.4, 178.0], [19.5, 180.0], [19.6, 182.0], [19.7, 183.0], [19.8, 184.0], [19.9, 184.0], [20.0, 185.0], [20.1, 185.0], [20.2, 186.0], [20.3, 187.0], [20.4, 188.0], [20.5, 189.0], [20.6, 190.0], [20.7, 191.0], [20.8, 191.0], [20.9, 192.0], [21.0, 193.0], [21.1, 193.0], [21.2, 194.0], [21.3, 195.0], [21.4, 197.0], [21.5, 198.0], [21.6, 199.0], [21.7, 201.0], [21.8, 202.0], [21.9, 204.0], [22.0, 205.0], [22.1, 207.0], [22.2, 208.0], [22.3, 209.0], [22.4, 210.0], [22.5, 211.0], [22.6, 212.0], [22.7, 213.0], [22.8, 214.0], [22.9, 215.0], [23.0, 215.0], [23.1, 216.0], [23.2, 218.0], [23.3, 219.0], [23.4, 220.0], [23.5, 221.0], [23.6, 222.0], [23.7, 223.0], [23.8, 224.0], [23.9, 225.0], [24.0, 226.0], [24.1, 227.0], [24.2, 229.0], [24.3, 231.0], [24.4, 235.0], [24.5, 237.0], [24.6, 238.0], [24.7, 241.0], [24.8, 243.0], [24.9, 244.0], [25.0, 246.0], [25.1, 249.0], [25.2, 250.0], [25.3, 252.0], [25.4, 253.0], [25.5, 254.0], [25.6, 255.0], [25.7, 256.0], [25.8, 258.0], [25.9, 259.0], [26.0, 260.0], [26.1, 261.0], [26.2, 263.0], [26.3, 265.0], [26.4, 267.0], [26.5, 269.0], [26.6, 271.0], [26.7, 275.0], [26.8, 277.0], [26.9, 278.0], [27.0, 280.0], [27.1, 284.0], [27.2, 285.0], [27.3, 286.0], [27.4, 288.0], [27.5, 291.0], [27.6, 295.0], [27.7, 297.0], [27.8, 300.0], [27.9, 303.0], [28.0, 304.0], [28.1, 305.0], [28.2, 308.0], [28.3, 309.0], [28.4, 310.0], [28.5, 314.0], [28.6, 316.0], [28.7, 319.0], [28.8, 323.0], [28.9, 325.0], [29.0, 326.0], [29.1, 328.0], [29.2, 331.0], [29.3, 332.0], [29.4, 334.0], [29.5, 335.0], [29.6, 337.0], [29.7, 339.0], [29.8, 340.0], [29.9, 341.0], [30.0, 344.0], [30.1, 346.0], [30.2, 347.0], [30.3, 349.0], [30.4, 350.0], [30.5, 352.0], [30.6, 354.0], [30.7, 356.0], [30.8, 358.0], [30.9, 359.0], [31.0, 360.0], [31.1, 361.0], [31.2, 362.0], [31.3, 363.0], [31.4, 365.0], [31.5, 366.0], [31.6, 367.0], [31.7, 369.0], [31.8, 371.0], [31.9, 373.0], [32.0, 374.0], [32.1, 376.0], [32.2, 378.0], [32.3, 379.0], [32.4, 380.0], [32.5, 381.0], [32.6, 382.0], [32.7, 382.0], [32.8, 383.0], [32.9, 384.0], [33.0, 385.0], [33.1, 388.0], [33.2, 390.0], [33.3, 391.0], [33.4, 392.0], [33.5, 392.0], [33.6, 393.0], [33.7, 393.0], [33.8, 394.0], [33.9, 394.0], [34.0, 395.0], [34.1, 395.0], [34.2, 396.0], [34.3, 396.0], [34.4, 397.0], [34.5, 397.0], [34.6, 398.0], [34.7, 398.0], [34.8, 398.0], [34.9, 399.0], [35.0, 400.0], [35.1, 400.0], [35.2, 401.0], [35.3, 401.0], [35.4, 401.0], [35.5, 402.0], [35.6, 403.0], [35.7, 404.0], [35.8, 405.0], [35.9, 406.0], [36.0, 407.0], [36.1, 408.0], [36.2, 409.0], [36.3, 410.0], [36.4, 411.0], [36.5, 412.0], [36.6, 412.0], [36.7, 412.0], [36.8, 413.0], [36.9, 413.0], [37.0, 414.0], [37.1, 414.0], [37.2, 415.0], [37.3, 415.0], [37.4, 416.0], [37.5, 416.0], [37.6, 416.0], [37.7, 417.0], [37.8, 418.0], [37.9, 418.0], [38.0, 419.0], [38.1, 420.0], [38.2, 421.0], [38.3, 422.0], [38.4, 422.0], [38.5, 423.0], [38.6, 423.0], [38.7, 423.0], [38.8, 424.0], [38.9, 424.0], [39.0, 425.0], [39.1, 425.0], [39.2, 425.0], [39.3, 426.0], [39.4, 427.0], [39.5, 428.0], [39.6, 429.0], [39.7, 430.0], [39.8, 432.0], [39.9, 432.0], [40.0, 433.0], [40.1, 433.0], [40.2, 434.0], [40.3, 434.0], [40.4, 434.0], [40.5, 435.0], [40.6, 435.0], [40.7, 435.0], [40.8, 436.0], [40.9, 436.0], [41.0, 436.0], [41.1, 437.0], [41.2, 437.0], [41.3, 438.0], [41.4, 438.0], [41.5, 438.0], [41.6, 439.0], [41.7, 439.0], [41.8, 439.0], [41.9, 440.0], [42.0, 440.0], [42.1, 440.0], [42.2, 441.0], [42.3, 441.0], [42.4, 441.0], [42.5, 442.0], [42.6, 442.0], [42.7, 442.0], [42.8, 443.0], [42.9, 443.0], [43.0, 443.0], [43.1, 444.0], [43.2, 444.0], [43.3, 444.0], [43.4, 444.0], [43.5, 445.0], [43.6, 445.0], [43.7, 445.0], [43.8, 445.0], [43.9, 445.0], [44.0, 446.0], [44.1, 446.0], [44.2, 446.0], [44.3, 446.0], [44.4, 447.0], [44.5, 447.0], [44.6, 447.0], [44.7, 447.0], [44.8, 448.0], [44.9, 448.0], [45.0, 448.0], [45.1, 448.0], [45.2, 449.0], [45.3, 449.0], [45.4, 449.0], [45.5, 449.0], [45.6, 450.0], [45.7, 450.0], [45.8, 450.0], [45.9, 451.0], [46.0, 451.0], [46.1, 451.0], [46.2, 451.0], [46.3, 451.0], [46.4, 452.0], [46.5, 452.0], [46.6, 452.0], [46.7, 453.0], [46.8, 453.0], [46.9, 453.0], [47.0, 453.0], [47.1, 454.0], [47.2, 454.0], [47.3, 454.0], [47.4, 455.0], [47.5, 455.0], [47.6, 455.0], [47.7, 456.0], [47.8, 456.0], [47.9, 457.0], [48.0, 457.0], [48.1, 458.0], [48.2, 458.0], [48.3, 458.0], [48.4, 459.0], [48.5, 459.0], [48.6, 460.0], [48.7, 460.0], [48.8, 461.0], [48.9, 461.0], [49.0, 461.0], [49.1, 462.0], [49.2, 462.0], [49.3, 462.0], [49.4, 463.0], [49.5, 463.0], [49.6, 463.0], [49.7, 464.0], [49.8, 464.0], [49.9, 464.0], [50.0, 465.0], [50.1, 465.0], [50.2, 465.0], [50.3, 466.0], [50.4, 466.0], [50.5, 466.0], [50.6, 467.0], [50.7, 467.0], [50.8, 467.0], [50.9, 468.0], [51.0, 468.0], [51.1, 469.0], [51.2, 469.0], [51.3, 469.0], [51.4, 470.0], [51.5, 470.0], [51.6, 470.0], [51.7, 470.0], [51.8, 471.0], [51.9, 471.0], [52.0, 471.0], [52.1, 472.0], [52.2, 472.0], [52.3, 472.0], [52.4, 473.0], [52.5, 473.0], [52.6, 473.0], [52.7, 474.0], [52.8, 474.0], [52.9, 474.0], [53.0, 475.0], [53.1, 475.0], [53.2, 475.0], [53.3, 475.0], [53.4, 475.0], [53.5, 476.0], [53.6, 476.0], [53.7, 476.0], [53.8, 476.0], [53.9, 476.0], [54.0, 477.0], [54.1, 477.0], [54.2, 477.0], [54.3, 477.0], [54.4, 477.0], [54.5, 477.0], [54.6, 478.0], [54.7, 478.0], [54.8, 478.0], [54.9, 478.0], [55.0, 478.0], [55.1, 479.0], [55.2, 479.0], [55.3, 479.0], [55.4, 479.0], [55.5, 480.0], [55.6, 480.0], [55.7, 480.0], [55.8, 480.0], [55.9, 481.0], [56.0, 481.0], [56.1, 481.0], [56.2, 481.0], [56.3, 482.0], [56.4, 482.0], [56.5, 482.0], [56.6, 482.0], [56.7, 483.0], [56.8, 483.0], [56.9, 483.0], [57.0, 483.0], [57.1, 483.0], [57.2, 484.0], [57.3, 484.0], [57.4, 484.0], [57.5, 484.0], [57.6, 484.0], [57.7, 485.0], [57.8, 485.0], [57.9, 485.0], [58.0, 485.0], [58.1, 485.0], [58.2, 486.0], [58.3, 486.0], [58.4, 486.0], [58.5, 486.0], [58.6, 486.0], [58.7, 487.0], [58.8, 487.0], [58.9, 487.0], [59.0, 487.0], [59.1, 487.0], [59.2, 487.0], [59.3, 488.0], [59.4, 488.0], [59.5, 488.0], [59.6, 488.0], [59.7, 488.0], [59.8, 489.0], [59.9, 489.0], [60.0, 489.0], [60.1, 489.0], [60.2, 489.0], [60.3, 489.0], [60.4, 490.0], [60.5, 490.0], [60.6, 490.0], [60.7, 490.0], [60.8, 490.0], [60.9, 491.0], [61.0, 491.0], [61.1, 491.0], [61.2, 491.0], [61.3, 491.0], [61.4, 492.0], [61.5, 492.0], [61.6, 492.0], [61.7, 493.0], [61.8, 493.0], [61.9, 493.0], [62.0, 494.0], [62.1, 494.0], [62.2, 495.0], [62.3, 495.0], [62.4, 496.0], [62.5, 496.0], [62.6, 497.0], [62.7, 497.0], [62.8, 498.0], [62.9, 498.0], [63.0, 498.0], [63.1, 499.0], [63.2, 499.0], [63.3, 500.0], [63.4, 500.0], [63.5, 500.0], [63.6, 501.0], [63.7, 501.0], [63.8, 501.0], [63.9, 502.0], [64.0, 502.0], [64.1, 503.0], [64.2, 503.0], [64.3, 504.0], [64.4, 504.0], [64.5, 504.0], [64.6, 505.0], [64.7, 505.0], [64.8, 506.0], [64.9, 507.0], [65.0, 509.0], [65.1, 510.0], [65.2, 510.0], [65.3, 511.0], [65.4, 511.0], [65.5, 512.0], [65.6, 513.0], [65.7, 513.0], [65.8, 514.0], [65.9, 515.0], [66.0, 515.0], [66.1, 517.0], [66.2, 518.0], [66.3, 519.0], [66.4, 520.0], [66.5, 521.0], [66.6, 521.0], [66.7, 522.0], [66.8, 523.0], [66.9, 524.0], [67.0, 524.0], [67.1, 525.0], [67.2, 526.0], [67.3, 527.0], [67.4, 528.0], [67.5, 529.0], [67.6, 531.0], [67.7, 535.0], [67.8, 539.0], [67.9, 542.0], [68.0, 548.0], [68.1, 549.0], [68.2, 550.0], [68.3, 551.0], [68.4, 555.0], [68.5, 559.0], [68.6, 560.0], [68.7, 562.0], [68.8, 564.0], [68.9, 566.0], [69.0, 569.0], [69.1, 571.0], [69.2, 572.0], [69.3, 573.0], [69.4, 574.0], [69.5, 576.0], [69.6, 577.0], [69.7, 579.0], [69.8, 580.0], [69.9, 582.0], [70.0, 585.0], [70.1, 587.0], [70.2, 588.0], [70.3, 589.0], [70.4, 589.0], [70.5, 590.0], [70.6, 591.0], [70.7, 592.0], [70.8, 594.0], [70.9, 596.0], [71.0, 597.0], [71.1, 599.0], [71.2, 600.0], [71.3, 601.0], [71.4, 602.0], [71.5, 603.0], [71.6, 608.0], [71.7, 609.0], [71.8, 611.0], [71.9, 613.0], [72.0, 615.0], [72.1, 616.0], [72.2, 617.0], [72.3, 619.0], [72.4, 626.0], [72.5, 630.0], [72.6, 633.0], [72.7, 634.0], [72.8, 635.0], [72.9, 637.0], [73.0, 641.0], [73.1, 646.0], [73.2, 650.0], [73.3, 652.0], [73.4, 654.0], [73.5, 655.0], [73.6, 655.0], [73.7, 656.0], [73.8, 657.0], [73.9, 658.0], [74.0, 659.0], [74.1, 669.0], [74.2, 672.0], [74.3, 675.0], [74.4, 676.0], [74.5, 678.0], [74.6, 679.0], [74.7, 681.0], [74.8, 682.0], [74.9, 683.0], [75.0, 684.0], [75.1, 685.0], [75.2, 688.0], [75.3, 690.0], [75.4, 691.0], [75.5, 693.0], [75.6, 694.0], [75.7, 696.0], [75.8, 698.0], [75.9, 701.0], [76.0, 703.0], [76.1, 708.0], [76.2, 710.0], [76.3, 711.0], [76.4, 713.0], [76.5, 720.0], [76.6, 722.0], [76.7, 731.0], [76.8, 735.0], [76.9, 737.0], [77.0, 739.0], [77.1, 740.0], [77.2, 742.0], [77.3, 743.0], [77.4, 745.0], [77.5, 747.0], [77.6, 749.0], [77.7, 750.0], [77.8, 752.0], [77.9, 752.0], [78.0, 753.0], [78.1, 754.0], [78.2, 755.0], [78.3, 757.0], [78.4, 759.0], [78.5, 761.0], [78.6, 762.0], [78.7, 762.0], [78.8, 763.0], [78.9, 764.0], [79.0, 765.0], [79.1, 766.0], [79.2, 768.0], [79.3, 769.0], [79.4, 772.0], [79.5, 773.0], [79.6, 773.0], [79.7, 774.0], [79.8, 774.0], [79.9, 775.0], [80.0, 776.0], [80.1, 777.0], [80.2, 779.0], [80.3, 783.0], [80.4, 786.0], [80.5, 789.0], [80.6, 791.0], [80.7, 793.0], [80.8, 794.0], [80.9, 796.0], [81.0, 801.0], [81.1, 804.0], [81.2, 805.0], [81.3, 807.0], [81.4, 813.0], [81.5, 815.0], [81.6, 816.0], [81.7, 817.0], [81.8, 818.0], [81.9, 820.0], [82.0, 822.0], [82.1, 823.0], [82.2, 824.0], [82.3, 826.0], [82.4, 829.0], [82.5, 831.0], [82.6, 835.0], [82.7, 838.0], [82.8, 840.0], [82.9, 841.0], [83.0, 842.0], [83.1, 843.0], [83.2, 844.0], [83.3, 845.0], [83.4, 845.0], [83.5, 846.0], [83.6, 847.0], [83.7, 848.0], [83.8, 850.0], [83.9, 851.0], [84.0, 852.0], [84.1, 853.0], [84.2, 853.0], [84.3, 854.0], [84.4, 854.0], [84.5, 855.0], [84.6, 856.0], [84.7, 858.0], [84.8, 860.0], [84.9, 863.0], [85.0, 868.0], [85.1, 873.0], [85.2, 874.0], [85.3, 875.0], [85.4, 876.0], [85.5, 878.0], [85.6, 880.0], [85.7, 882.0], [85.8, 884.0], [85.9, 885.0], [86.0, 885.0], [86.1, 886.0], [86.2, 887.0], [86.3, 888.0], [86.4, 889.0], [86.5, 890.0], [86.6, 891.0], [86.7, 892.0], [86.8, 893.0], [86.9, 893.0], [87.0, 894.0], [87.1, 895.0], [87.2, 896.0], [87.3, 898.0], [87.4, 900.0], [87.5, 901.0], [87.6, 904.0], [87.7, 907.0], [87.8, 909.0], [87.9, 911.0], [88.0, 920.0], [88.1, 931.0], [88.2, 943.0], [88.3, 944.0], [88.4, 946.0], [88.5, 949.0], [88.6, 970.0], [88.7, 977.0], [88.8, 1004.0], [88.9, 1015.0], [89.0, 1018.0], [89.1, 1019.0], [89.2, 1021.0], [89.3, 1024.0], [89.4, 1026.0], [89.5, 1028.0], [89.6, 1029.0], [89.7, 1035.0], [89.8, 1038.0], [89.9, 1040.0], [90.0, 1044.0], [90.1, 1047.0], [90.2, 1100.0], [90.3, 1153.0], [90.4, 1195.0], [90.5, 1226.0], [90.6, 1257.0], [90.7, 1304.0], [90.8, 1358.0], [90.9, 1439.0], [91.0, 1517.0], [91.1, 1740.0], [91.2, 1983.0], [91.3, 2259.0], [91.4, 2741.0], [91.5, 3035.0], [91.6, 3538.0], [91.7, 3924.0], [91.8, 4254.0], [91.9, 4362.0], [92.0, 4593.0], [92.1, 5034.0], [92.2, 5320.0], [92.3, 5601.0], [92.4, 5679.0], [92.5, 5976.0], [92.6, 6048.0], [92.7, 6139.0], [92.8, 6203.0], [92.9, 6223.0], [93.0, 6266.0], [93.1, 6284.0], [93.2, 6315.0], [93.3, 6418.0], [93.4, 6605.0], [93.5, 6734.0], [93.6, 7001.0], [93.7, 7141.0], [93.8, 7216.0], [93.9, 7225.0], [94.0, 7336.0], [94.1, 7759.0], [94.2, 7991.0], [94.3, 8199.0], [94.4, 8268.0], [94.5, 8363.0], [94.6, 8777.0], [94.7, 8818.0], [94.8, 8867.0], [94.9, 8955.0], [95.0, 9112.0], [95.1, 9185.0], [95.2, 9345.0], [95.3, 9447.0], [95.4, 9481.0], [95.5, 9764.0], [95.6, 9971.0], [95.7, 10062.0], [95.8, 10145.0], [95.9, 10273.0], [96.0, 10599.0], [96.1, 10628.0], [96.2, 10815.0], [96.3, 11293.0], [96.4, 11361.0], [96.5, 12020.0], [96.6, 12097.0], [96.7, 12810.0], [96.8, 12878.0], [96.9, 12950.0], [97.0, 13156.0], [97.1, 13405.0], [97.2, 13891.0], [97.3, 14052.0], [97.4, 14760.0], [97.5, 15171.0], [97.6, 15216.0], [97.7, 15589.0], [97.8, 16202.0], [97.9, 17137.0], [98.0, 17952.0], [98.1, 19290.0], [98.2, 22396.0], [98.3, 25376.0], [98.4, 27164.0], [98.5, 31716.0], [98.6, 34663.0], [98.7, 37613.0], [98.8, 43431.0], [98.9, 48666.0], [99.0, 60996.0], [99.1, 75212.0], [99.2, 83960.0], [99.3, 96938.0], [99.4, 100300.0], [99.5, 100596.0], [99.6, 101132.0], [99.7, 128558.0], [99.8, 130228.0], [99.9, 136760.0], [100.0, 217459.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 76621.0, "series": [{"data": [[0.0, 32938.0], [160800.0, 4.0], [132900.0, 1.0], [139300.0, 23.0], [152100.0, 19.0], [66700.0, 1.0], [73100.0, 3.0], [76300.0, 1.0], [79500.0, 1.0], [82700.0, 3.0], [85900.0, 1.0], [92300.0, 1.0], [95500.0, 2.0], [101900.0, 2.0], [105100.0, 2.0], [111500.0, 13.0], [127500.0, 5.0], [130700.0, 2.0], [137000.0, 3.0], [169000.0, 3.0], [100.0, 25615.0], [141100.0, 7.0], [37700.0, 13.0], [40900.0, 1.0], [39300.0, 2.0], [44100.0, 8.0], [48900.0, 1.0], [50500.0, 1.0], [200.0, 16725.0], [53700.0, 2.0], [55300.0, 1.0], [58500.0, 2.0], [60100.0, 6.0], [63300.0, 5.0], [65800.0, 1.0], [69000.0, 1.0], [300.0, 19497.0], [78600.0, 1.0], [81800.0, 2.0], [85000.0, 1.0], [88200.0, 2.0], [97800.0, 2.0], [101000.0, 2.0], [400.0, 76621.0], [500.0, 21272.0], [129800.0, 1.0], [132400.0, 1.0], [600.0, 12734.0], [170800.0, 3.0], [700.0, 13823.0], [800.0, 17417.0], [900.0, 3751.0], [1000.0, 3910.0], [1100.0, 581.0], [1200.0, 756.0], [1300.0, 399.0], [1400.0, 323.0], [1500.0, 236.0], [1600.0, 79.0], [1700.0, 93.0], [1800.0, 83.0], [1900.0, 166.0], [2000.0, 214.0], [2100.0, 14.0], [136500.0, 1.0], [142900.0, 2.0], [2200.0, 39.0], [2300.0, 9.0], [2400.0, 23.0], [2500.0, 116.0], [2600.0, 74.0], [2700.0, 121.0], [2800.0, 50.0], [2900.0, 118.0], [3000.0, 76.0], [3100.0, 120.0], [3300.0, 21.0], [3200.0, 31.0], [3400.0, 41.0], [3500.0, 63.0], [3600.0, 22.0], [3700.0, 96.0], [3800.0, 37.0], [3900.0, 102.0], [4000.0, 119.0], [4200.0, 155.0], [68100.0, 1.0], [4400.0, 84.0], [4600.0, 85.0], [71300.0, 31.0], [4800.0, 11.0], [77700.0, 4.0], [5000.0, 69.0], [5200.0, 41.0], [84100.0, 23.0], [5400.0, 30.0], [5600.0, 314.0], [5800.0, 16.0], [6000.0, 435.0], [96900.0, 1.0], [6200.0, 881.0], [100100.0, 91.0], [6400.0, 126.0], [6600.0, 287.0], [6800.0, 61.0], [7000.0, 117.0], [7400.0, 74.0], [7200.0, 379.0], [116100.0, 4.0], [7600.0, 7.0], [7800.0, 40.0], [8000.0, 175.0], [8400.0, 32.0], [8800.0, 426.0], [9200.0, 103.0], [140600.0, 13.0], [9600.0, 90.0], [10000.0, 225.0], [10400.0, 63.0], [11200.0, 97.0], [10800.0, 106.0], [11600.0, 10.0], [12000.0, 308.0], [12400.0, 27.0], [198200.0, 1.0], [12800.0, 548.0], [13200.0, 112.0], [217400.0, 1.0], [13600.0, 8.0], [14000.0, 62.0], [14400.0, 26.0], [14800.0, 72.0], [15200.0, 301.0], [15600.0, 128.0], [16000.0, 16.0], [16800.0, 53.0], [17600.0, 7.0], [18400.0, 11.0], [19200.0, 78.0], [20000.0, 15.0], [20800.0, 5.0], [22400.0, 8.0], [21600.0, 2.0], [23200.0, 7.0], [25600.0, 5.0], [26400.0, 2.0], [28000.0, 3.0], [28800.0, 4.0], [30400.0, 1.0], [31200.0, 19.0], [32000.0, 22.0], [131900.0, 1.0], [35200.0, 12.0], [36800.0, 1.0], [38400.0, 1.0], [40000.0, 1.0], [44800.0, 4.0], [46400.0, 4.0], [48000.0, 2.0], [49600.0, 2.0], [51200.0, 1.0], [52800.0, 2.0], [54400.0, 3.0], [56000.0, 1.0], [60800.0, 1.0], [64000.0, 1.0], [73600.0, 5.0], [76800.0, 44.0], [89600.0, 1.0], [92800.0, 4.0], [96000.0, 2.0], [108800.0, 1.0], [128000.0, 3.0], [67100.0, 1.0], [70300.0, 2.0], [76700.0, 6.0], [79900.0, 1.0], [83100.0, 1.0], [89500.0, 3.0], [95900.0, 1.0], [127900.0, 3.0], [33100.0, 8.0], [34700.0, 2.0], [140300.0, 2.0], [36300.0, 2.0], [42700.0, 14.0], [41100.0, 2.0], [44300.0, 9.0], [45900.0, 2.0], [47500.0, 5.0], [49100.0, 4.0], [52300.0, 1.0], [55500.0, 1.0], [60300.0, 12.0], [61900.0, 1.0], [65100.0, 2.0], [63500.0, 2.0], [72600.0, 23.0], [75800.0, 1.0], [82200.0, 1.0], [91800.0, 3.0], [95000.0, 1.0], [101400.0, 4.0], [104600.0, 3.0], [130200.0, 41.0], [142100.0, 2.0], [174100.0, 1.0], [68500.0, 11.0], [71700.0, 16.0], [81300.0, 2.0], [78100.0, 1.0], [87700.0, 1.0], [90900.0, 1.0], [94100.0, 1.0], [97300.0, 1.0], [100500.0, 64.0], [129300.0, 79.0], [133400.0, 1.0], [139800.0, 1.0], [152600.0, 1.0], [17700.0, 3.0], [19300.0, 9.0], [18500.0, 13.0], [20100.0, 2.0], [20900.0, 1.0], [21700.0, 5.0], [22500.0, 5.0], [23300.0, 3.0], [24100.0, 5.0], [26500.0, 3.0], [25700.0, 2.0], [28100.0, 2.0], [28900.0, 1.0], [29700.0, 9.0], [30500.0, 2.0], [31300.0, 2.0], [32100.0, 22.0], [35400.0, 7.0], [38600.0, 13.0], [150300.0, 1.0], [45000.0, 4.0], [43400.0, 71.0], [48200.0, 2.0], [53000.0, 1.0], [51400.0, 3.0], [54600.0, 3.0], [56200.0, 1.0], [59400.0, 1.0], [64200.0, 1.0], [67600.0, 4.0], [77200.0, 14.0], [86800.0, 1.0], [96400.0, 2.0], [128400.0, 27.0], [156000.0, 1.0], [168800.0, 14.0], [140900.0, 2.0], [67500.0, 2.0], [70700.0, 3.0], [80300.0, 1.0], [83500.0, 1.0], [86700.0, 2.0], [93100.0, 3.0], [96300.0, 1.0], [105900.0, 2.0], [128300.0, 6.0], [132200.0, 2.0], [33300.0, 2.0], [136300.0, 9.0], [34900.0, 8.0], [142700.0, 1.0], [36500.0, 1.0], [38100.0, 1.0], [41300.0, 18.0], [44500.0, 5.0], [46100.0, 5.0], [47700.0, 2.0], [49300.0, 10.0], [55700.0, 1.0], [57300.0, 23.0], [60500.0, 3.0], [66600.0, 2.0], [69800.0, 2.0], [73000.0, 2.0], [85800.0, 11.0], [92200.0, 1.0], [95400.0, 2.0], [111400.0, 13.0], [127400.0, 16.0], [140400.0, 4.0], [150900.0, 1.0], [170100.0, 1.0], [68900.0, 2.0], [72100.0, 2.0], [81700.0, 4.0], [84900.0, 1.0], [91300.0, 2.0], [100900.0, 2.0], [104100.0, 2.0], [107300.0, 2.0], [8500.0, 136.0], [8900.0, 215.0], [9300.0, 226.0], [9700.0, 28.0], [10100.0, 375.0], [10500.0, 137.0], [10900.0, 34.0], [11300.0, 301.0], [11700.0, 24.0], [12100.0, 3.0], [12500.0, 13.0], [12900.0, 202.0], [13300.0, 39.0], [13700.0, 72.0], [14100.0, 12.0], [14500.0, 139.0], [15300.0, 136.0], [14900.0, 79.0], [15700.0, 64.0], [16100.0, 7.0], [17000.0, 59.0], [17800.0, 13.0], [18600.0, 10.0], [19400.0, 5.0], [21000.0, 3.0], [23400.0, 18.0], [22600.0, 55.0], [24200.0, 8.0], [26600.0, 8.0], [25800.0, 22.0], [27400.0, 6.0], [28200.0, 59.0], [32200.0, 3.0], [37200.0, 4.0], [152700.0, 3.0], [40400.0, 9.0], [43600.0, 1.0], [45200.0, 3.0], [48400.0, 2.0], [50000.0, 1.0], [53200.0, 3.0], [54800.0, 2.0], [58000.0, 1.0], [62800.0, 1.0], [68000.0, 1.0], [74400.0, 2.0], [80800.0, 3.0], [84000.0, 35.0], [96800.0, 3.0], [100000.0, 7.0], [106400.0, 2.0], [128800.0, 7.0], [136000.0, 5.0], [133700.0, 10.0], [152900.0, 3.0], [67900.0, 1.0], [71100.0, 4.0], [77500.0, 1.0], [80700.0, 7.0], [83900.0, 14.0], [99900.0, 4.0], [128700.0, 21.0], [131400.0, 2.0], [135500.0, 1.0], [35100.0, 38.0], [36700.0, 2.0], [38300.0, 3.0], [39900.0, 3.0], [41500.0, 5.0], [44700.0, 2.0], [46300.0, 6.0], [47900.0, 2.0], [51100.0, 1.0], [55900.0, 2.0], [59100.0, 2.0], [57500.0, 2.0], [65500.0, 3.0], [63900.0, 2.0], [73400.0, 2.0], [76600.0, 3.0], [79800.0, 2.0], [86200.0, 8.0], [95800.0, 2.0], [105400.0, 1.0], [118200.0, 2.0], [127800.0, 4.0], [133200.0, 2.0], [137300.0, 4.0], [69300.0, 3.0], [72500.0, 12.0], [91700.0, 7.0], [101300.0, 1.0], [114100.0, 5.0], [130100.0, 1.0], [135000.0, 42.0], [199000.0, 2.0], [17100.0, 250.0], [17900.0, 12.0], [18700.0, 38.0], [19500.0, 4.0], [21900.0, 9.0], [22700.0, 1.0], [23500.0, 18.0], [24300.0, 1.0], [25100.0, 5.0], [25900.0, 18.0], [27500.0, 8.0], [26700.0, 5.0], [28300.0, 9.0], [30700.0, 2.0], [34200.0, 4.0], [132700.0, 1.0], [35800.0, 2.0], [42200.0, 2.0], [43800.0, 2.0], [45400.0, 4.0], [48600.0, 23.0], [53400.0, 2.0], [56600.0, 1.0], [58200.0, 3.0], [59800.0, 1.0], [61400.0, 1.0], [64600.0, 1.0], [68400.0, 3.0], [71600.0, 2.0], [81200.0, 3.0], [84400.0, 2.0], [90800.0, 4.0], [94000.0, 1.0], [97200.0, 1.0], [100400.0, 49.0], [106800.0, 1.0], [129200.0, 25.0], [132000.0, 66.0], [136100.0, 12.0], [68300.0, 2.0], [71500.0, 3.0], [74700.0, 1.0], [87500.0, 1.0], [90700.0, 5.0], [93900.0, 1.0], [100300.0, 163.0], [109900.0, 1.0], [106700.0, 1.0], [129100.0, 41.0], [133800.0, 7.0], [153000.0, 15.0], [131500.0, 6.0], [33700.0, 2.0], [35300.0, 5.0], [38500.0, 17.0], [41700.0, 3.0], [43300.0, 11.0], [48100.0, 1.0], [51300.0, 2.0], [52900.0, 1.0], [56100.0, 1.0], [59300.0, 1.0], [57700.0, 9.0], [60900.0, 4.0], [62500.0, 2.0], [67400.0, 1.0], [70600.0, 3.0], [77000.0, 19.0], [80200.0, 8.0], [83400.0, 1.0], [86600.0, 2.0], [89800.0, 3.0], [93000.0, 1.0], [105800.0, 3.0], [128200.0, 4.0], [135600.0, 10.0], [4300.0, 254.0], [4100.0, 28.0], [4500.0, 227.0], [4700.0, 14.0], [76100.0, 1.0], [5100.0, 164.0], [4900.0, 46.0], [5300.0, 81.0], [82500.0, 1.0], [85700.0, 2.0], [5500.0, 143.0], [88900.0, 1.0], [5700.0, 85.0], [5900.0, 213.0], [6100.0, 276.0], [95300.0, 1.0], [6300.0, 492.0], [6500.0, 141.0], [6900.0, 66.0], [6700.0, 161.0], [7100.0, 356.0], [7300.0, 315.0], [7500.0, 89.0], [7700.0, 203.0], [7900.0, 55.0], [8100.0, 95.0], [130500.0, 2.0], [127300.0, 73.0], [8600.0, 42.0], [8200.0, 343.0], [9000.0, 148.0], [9400.0, 446.0], [10200.0, 127.0], [9800.0, 13.0], [10600.0, 435.0], [11000.0, 65.0], [11400.0, 6.0], [12200.0, 64.0], [11800.0, 43.0], [12600.0, 7.0], [13000.0, 110.0], [13400.0, 2.0], [13800.0, 302.0], [14200.0, 18.0], [14600.0, 3.0], [15000.0, 83.0], [15800.0, 13.0], [15400.0, 15.0], [16200.0, 47.0], [17200.0, 3.0], [16400.0, 1.0], [18800.0, 13.0], [19600.0, 8.0], [21200.0, 8.0], [22000.0, 23.0], [22800.0, 4.0], [23600.0, 2.0], [25200.0, 20.0], [26000.0, 10.0], [27600.0, 3.0], [26800.0, 2.0], [30800.0, 2.0], [31600.0, 3.0], [32800.0, 1.0], [135100.0, 1.0], [37600.0, 24.0], [40800.0, 1.0], [160700.0, 2.0], [44000.0, 18.0], [45600.0, 2.0], [47200.0, 41.0], [48800.0, 2.0], [50400.0, 2.0], [52000.0, 1.0], [56800.0, 1.0], [58400.0, 5.0], [60000.0, 2.0], [63200.0, 2.0], [68800.0, 3.0], [75200.0, 94.0], [84800.0, 2.0], [88000.0, 1.0], [94400.0, 4.0], [100800.0, 11.0], [131200.0, 10.0], [160900.0, 13.0], [75100.0, 4.0], [84700.0, 3.0], [91100.0, 7.0], [94300.0, 1.0], [100700.0, 59.0], [129500.0, 1.0], [37100.0, 1.0], [40300.0, 5.0], [43500.0, 1.0], [45100.0, 4.0], [51500.0, 1.0], [54700.0, 2.0], [57900.0, 1.0], [61100.0, 1.0], [59500.0, 2.0], [62700.0, 6.0], [80600.0, 1.0], [83800.0, 10.0], [109400.0, 2.0], [128600.0, 14.0], [132500.0, 1.0], [170900.0, 6.0], [66900.0, 1.0], [70100.0, 2.0], [73300.0, 1.0], [79700.0, 2.0], [82900.0, 2.0], [89300.0, 44.0], [86100.0, 1.0], [92500.0, 1.0], [98900.0, 2.0], [136600.0, 10.0], [16500.0, 49.0], [17300.0, 3.0], [18100.0, 6.0], [18900.0, 7.0], [20500.0, 1.0], [22100.0, 14.0], [22900.0, 1.0], [24500.0, 5.0], [23700.0, 13.0], [25300.0, 134.0], [29300.0, 2.0], [30100.0, 32.0], [31700.0, 63.0], [32500.0, 7.0], [33000.0, 2.0], [34600.0, 66.0], [36200.0, 125.0], [41000.0, 1.0], [44200.0, 15.0], [49000.0, 1.0], [47400.0, 2.0], [50600.0, 1.0], [52200.0, 20.0], [53800.0, 4.0], [57000.0, 3.0], [55400.0, 1.0], [60200.0, 7.0], [63400.0, 4.0], [66000.0, 1.0], [69200.0, 1.0], [72400.0, 1.0], [75600.0, 4.0], [78800.0, 3.0], [91600.0, 2.0], [94800.0, 3.0], [98000.0, 3.0], [101200.0, 5.0], [114000.0, 1.0], [126800.0, 1.0], [140000.0, 1.0], [69100.0, 7.0], [75500.0, 4.0], [78700.0, 2.0], [97900.0, 1.0], [101100.0, 33.0], [126700.0, 1.0], [161000.0, 8.0], [34100.0, 12.0], [35700.0, 12.0], [38900.0, 2.0], [37300.0, 2.0], [46900.0, 1.0], [48500.0, 2.0], [53300.0, 1.0], [54900.0, 5.0], [56500.0, 4.0], [62900.0, 1.0], [64500.0, 4.0], [68200.0, 1.0], [71400.0, 2.0], [77800.0, 1.0], [74600.0, 2.0], [87400.0, 7.0], [93800.0, 2.0], [100200.0, 149.0], [116200.0, 1.0], [129000.0, 2.0], [134900.0, 9.0], [160500.0, 1.0], [70500.0, 1.0], [73700.0, 2.0], [76900.0, 9.0], [89700.0, 4.0], [128100.0, 3.0], [8300.0, 200.0], [8700.0, 252.0], [9100.0, 457.0], [9500.0, 124.0], [9900.0, 356.0], [10300.0, 40.0], [10700.0, 22.0], [11100.0, 54.0], [11500.0, 92.0], [11900.0, 23.0], [12700.0, 28.0], [12300.0, 16.0], [13100.0, 184.0], [13500.0, 12.0], [14300.0, 34.0], [13900.0, 117.0], [14700.0, 23.0], [15100.0, 80.0], [15500.0, 65.0], [15900.0, 6.0], [16300.0, 35.0], [16600.0, 6.0], [18200.0, 7.0], [19000.0, 45.0], [19800.0, 48.0], [20600.0, 3.0], [22200.0, 40.0], [23000.0, 2.0], [23800.0, 13.0], [24600.0, 3.0], [26200.0, 39.0], [27000.0, 1.0], [27800.0, 1.0], [28600.0, 8.0], [29400.0, 5.0], [31000.0, 63.0], [31800.0, 10.0], [32600.0, 66.0], [33200.0, 7.0], [34800.0, 1.0], [136700.0, 9.0], [36400.0, 3.0], [42800.0, 11.0], [41200.0, 19.0], [44400.0, 32.0], [46000.0, 11.0], [49200.0, 3.0], [50800.0, 3.0], [52400.0, 4.0], [57200.0, 1.0], [60400.0, 25.0], [62000.0, 1.0], [66400.0, 1.0], [69600.0, 2.0], [82400.0, 6.0], [88800.0, 2.0], [104800.0, 1.0], [127200.0, 1.0], [130400.0, 2.0], [139200.0, 36.0], [152000.0, 2.0], [136900.0, 7.0], [168900.0, 4.0], [66300.0, 1.0], [72700.0, 2.0], [75900.0, 1.0], [79100.0, 1.0], [85500.0, 2.0], [82300.0, 1.0], [98300.0, 2.0], [101500.0, 1.0], [107900.0, 2.0], [141000.0, 3.0], [34300.0, 2.0], [151500.0, 35.0], [40700.0, 11.0], [42300.0, 4.0], [170700.0, 3.0], [47100.0, 30.0], [45500.0, 2.0], [48700.0, 25.0], [55100.0, 3.0], [58300.0, 1.0], [59900.0, 2.0], [61500.0, 2.0], [64700.0, 1.0], [68600.0, 7.0], [75000.0, 2.0], [84600.0, 2.0], [87800.0, 7.0], [91000.0, 1.0], [94200.0, 1.0], [97400.0, 1.0], [100600.0, 168.0], [113400.0, 1.0], [129400.0, 33.0], [136400.0, 11.0], [153300.0, 8.0], [198100.0, 3.0], [67700.0, 1.0], [80500.0, 1.0], [83700.0, 2.0], [86900.0, 2.0], [106100.0, 3.0], [128500.0, 53.0], [131800.0, 1.0], [16700.0, 4.0], [17500.0, 5.0], [18300.0, 2.0], [19100.0, 81.0], [21500.0, 6.0], [20700.0, 5.0], [22300.0, 10.0], [23100.0, 36.0], [23900.0, 1.0], [24700.0, 2.0], [25500.0, 4.0], [26300.0, 34.0], [27100.0, 25.0], [27900.0, 2.0], [29500.0, 5.0], [28700.0, 1.0], [30300.0, 2.0], [31100.0, 2.0], [31900.0, 9.0], [32700.0, 2.0], [33400.0, 2.0], [135900.0, 6.0], [35000.0, 1.0], [38200.0, 1.0], [39800.0, 9.0], [43000.0, 1.0], [44600.0, 2.0], [46200.0, 12.0], [49400.0, 3.0], [51000.0, 1.0], [59000.0, 1.0], [62200.0, 2.0], [73200.0, 1.0], [76400.0, 1.0], [79600.0, 1.0], [82800.0, 2.0], [92400.0, 12.0], [95600.0, 1.0], [98800.0, 1.0], [127600.0, 17.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 217400.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 808.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 172202.0, "series": [{"data": [[0.0, 172202.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 74163.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 23675.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 808.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 162.63551401869154, "minX": 1.68286284E12, "maxY": 3000.0, "series": [{"data": [[1.68286302E12, 3000.0], [1.68286284E12, 3000.0], [1.68286314E12, 2878.4038519410196], [1.68286296E12, 3000.0], [1.68286326E12, 162.63551401869154], [1.68286308E12, 3000.0], [1.6828629E12, 3000.0], [1.6828632E12, 380.5]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68286326E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 31.0, "minX": 1.0, "maxY": 170961.0, "series": [{"data": [[2.0, 100432.0], [3.0, 100426.0], [4.0, 100421.0], [7.0, 100417.33333333333], [9.0, 100417.5], [10.0, 100414.0], [11.0, 100415.0], [13.0, 100415.5], [16.0, 100412.33333333333], [17.0, 100411.0], [20.0, 100365.66666666667], [25.0, 100365.0], [26.0, 100367.0], [27.0, 100364.0], [28.0, 100364.0], [30.0, 100363.0], [31.0, 100366.0], [32.0, 100364.0], [35.0, 100364.0], [34.0, 100363.5], [37.0, 100364.5], [39.0, 100361.5], [40.0, 100362.0], [42.0, 100363.0], [47.0, 100361.0], [51.0, 100361.66666666667], [50.0, 100361.0], [53.0, 100360.0], [52.0, 100361.5], [54.0, 100356.0], [57.0, 100355.0], [56.0, 100355.0], [59.0, 100354.5], [61.0, 100355.5], [63.0, 100349.0], [62.0, 100353.0], [67.0, 100345.0], [64.0, 100347.0], [71.0, 100342.0], [70.0, 100343.5], [68.0, 100345.5], [74.0, 100342.0], [79.0, 100336.0], [78.0, 100339.0], [77.0, 100343.0], [76.0, 100342.0], [83.0, 100334.0], [81.0, 100334.5], [87.0, 100333.0], [86.0, 100335.0], [85.0, 100334.0], [84.0, 100332.0], [90.0, 100333.0], [89.0, 100333.0], [88.0, 100334.0], [95.0, 100330.0], [94.0, 100331.5], [92.0, 100333.0], [96.0, 100332.0], [106.0, 100329.66666666667], [110.0, 100330.0], [109.0, 100331.5], [108.0, 100331.0], [113.0, 100328.16666666667], [119.0, 100325.0], [118.0, 100328.0], [121.0, 100321.0], [120.0, 100321.0], [132.0, 100321.0], [130.0, 100322.0], [129.0, 100320.57142857142], [143.0, 100319.0], [141.0, 100319.0], [140.0, 100320.0], [150.0, 100310.0], [149.0, 100310.0], [148.0, 100311.0], [147.0, 100318.6], [146.0, 100318.0], [145.0, 100320.0], [159.0, 100303.5], [157.0, 100304.5], [156.0, 100304.0], [153.0, 100304.0], [152.0, 100305.0], [166.0, 100301.66666666667], [163.0, 100302.0], [162.0, 100303.5], [161.0, 100304.0], [175.0, 100299.5], [174.0, 100300.0], [172.0, 100300.5], [170.0, 100300.0], [168.0, 100302.0], [181.0, 100299.5], [179.0, 100300.0], [178.0, 100299.0], [176.0, 100299.0], [190.0, 100298.0], [189.0, 100298.0], [186.0, 100299.0], [194.0, 100297.0], [193.0, 100297.0], [207.0, 100291.0], [203.0, 100292.5], [215.0, 100285.0], [214.0, 100291.0], [213.0, 100290.44444444444], [212.0, 100291.5], [211.0, 100291.0], [209.0, 100289.0], [222.0, 100279.0], [221.0, 100278.0], [220.0, 100281.5], [218.0, 100282.0], [217.0, 100285.0], [216.0, 100285.0], [231.0, 100277.5], [230.0, 100276.0], [229.0, 100279.0], [227.0, 100278.66666666667], [226.0, 100281.0], [225.0, 100280.0], [239.0, 100273.0], [238.0, 100274.33333333333], [235.0, 100274.33333333333], [232.0, 100278.0], [247.0, 100270.0], [246.0, 100271.66666666667], [245.0, 100272.0], [243.0, 100272.0], [255.0, 100250.5], [254.0, 100251.0], [251.0, 100252.0], [248.0, 100252.0], [270.0, 100238.0], [268.0, 100240.0], [267.0, 100239.0], [266.0, 100240.0], [265.0, 100241.8], [260.0, 100243.0], [259.0, 100243.25], [287.0, 100233.75], [285.0, 100234.0], [282.0, 100235.0], [281.0, 100236.0], [277.0, 100236.0], [275.0, 100236.5], [273.0, 100237.0], [272.0, 100239.0], [302.0, 97902.0], [303.0, 97898.0], [301.0, 98908.0], [300.0, 98910.0], [299.0, 99918.0], [298.0, 99919.0], [297.0, 100222.0], [295.0, 100225.33333333333], [291.0, 100229.0], [290.0, 100231.0], [289.0, 100231.0], [288.0, 100233.0], [292.0, 100227.0], [318.0, 89825.0], [319.0, 89821.0], [317.0, 90833.0], [316.0, 90834.0], [315.0, 91842.0], [314.0, 91846.0], [313.0, 92851.0], [312.0, 92855.0], [311.0, 93860.0], [305.0, 96889.0], [304.0, 96893.0], [307.0, 95879.0], [306.0, 95881.0], [310.0, 93865.0], [309.0, 94869.0], [308.0, 94874.0], [334.0, 81749.0], [335.0, 81749.0], [333.0, 82756.0], [332.0, 82758.0], [331.0, 83768.0], [330.0, 83767.0], [329.0, 84778.0], [328.0, 84780.0], [327.0, 85785.0], [321.0, 88813.0], [320.0, 88815.0], [323.0, 87806.0], [322.0, 87806.0], [326.0, 85789.0], [325.0, 86795.0], [324.0, 86796.0], [350.0, 73673.0], [351.0, 73671.0], [349.0, 74680.0], [348.0, 74684.0], [347.0, 75691.0], [346.0, 75695.0], [345.0, 76699.0], [344.0, 76704.0], [343.0, 77709.0], [337.0, 80738.0], [336.0, 80742.0], [339.0, 79730.0], [338.0, 79730.0], [342.0, 77711.0], [341.0, 78720.0], [340.0, 78721.0], [366.0, 65598.0], [367.0, 65596.0], [365.0, 66604.0], [364.0, 66608.0], [363.0, 67617.0], [362.0, 67617.0], [361.0, 68623.0], [360.0, 68625.0], [359.0, 69633.0], [353.0, 72661.0], [352.0, 72665.0], [355.0, 71653.0], [354.0, 71656.0], [358.0, 69635.0], [357.0, 70644.0], [356.0, 70645.0], [382.0, 57519.0], [383.0, 57519.0], [381.0, 58527.0], [380.0, 58530.0], [379.0, 59538.0], [378.0, 59538.0], [377.0, 60548.0], [376.0, 60548.0], [375.0, 61558.0], [369.0, 64585.0], [368.0, 64589.0], [371.0, 63577.0], [370.0, 63578.0], [374.0, 61560.0], [373.0, 62568.0], [372.0, 62568.0], [398.0, 49444.0], [399.0, 49441.0], [397.0, 50451.0], [396.0, 50453.0], [395.0, 51462.0], [394.0, 51464.0], [393.0, 52473.0], [392.0, 52474.0], [391.0, 53481.0], [385.0, 56508.0], [384.0, 56512.0], [387.0, 55498.0], [386.0, 55500.0], [390.0, 53482.0], [389.0, 54489.0], [388.0, 54493.0], [414.0, 41367.0], [415.0, 41367.0], [413.0, 42376.0], [412.0, 42378.0], [411.0, 43387.0], [410.0, 43387.0], [409.0, 44394.0], [408.0, 44396.0], [407.0, 45404.0], [401.0, 48433.0], [400.0, 48437.0], [403.0, 47423.0], [402.0, 47425.0], [406.0, 45408.0], [405.0, 46413.0], [404.0, 46415.0], [430.0, 36772.0], [431.0, 36768.0], [429.0, 34300.0], [428.0, 34302.0], [427.0, 35309.0], [426.0, 35311.0], [425.0, 36319.0], [424.0, 36321.0], [423.0, 37329.0], [417.0, 40356.0], [416.0, 40362.0], [419.0, 39348.0], [418.0, 39350.0], [422.0, 37331.0], [421.0, 38338.0], [420.0, 38338.0], [446.0, 28691.0], [447.0, 28692.0], [445.0, 29700.0], [444.0, 29703.0], [443.0, 30711.0], [442.0, 30713.0], [441.0, 31720.0], [440.0, 31720.0], [439.0, 32729.0], [433.0, 35758.0], [432.0, 35761.0], [435.0, 34748.0], [434.0, 34752.0], [438.0, 32732.0], [437.0, 33738.0], [436.0, 33741.0], [462.0, 20617.0], [463.0, 20615.0], [461.0, 21625.0], [460.0, 21627.0], [459.0, 22636.0], [458.0, 22637.0], [457.0, 23644.0], [456.0, 23646.0], [455.0, 24654.0], [449.0, 27680.0], [448.0, 27684.0], [451.0, 26672.0], [450.0, 26673.0], [454.0, 24655.0], [453.0, 25662.0], [452.0, 25664.0], [478.0, 12543.0], [479.0, 12542.0], [477.0, 13551.0], [476.0, 13552.0], [475.0, 14560.0], [474.0, 14562.0], [473.0, 15569.0], [472.0, 15570.0], [471.0, 16579.0], [465.0, 19609.0], [464.0, 19610.0], [467.0, 18597.0], [466.0, 18599.0], [470.0, 16581.0], [469.0, 17588.0], [468.0, 17590.0], [494.0, 7056.0], [495.0, 7054.0], [493.0, 7059.0], [492.0, 7059.0], [491.0, 7064.0], [490.0, 7061.5], [488.0, 7064.0], [486.0, 7066.0], [480.0, 11534.0], [483.0, 7066.5], [481.0, 11531.0], [510.0, 7044.0], [511.0, 7044.0], [509.0, 7046.0], [508.0, 7049.0], [507.0, 7052.0], [506.0, 7052.0], [505.0, 7053.0], [504.0, 7054.0], [503.0, 7055.5], [499.0, 7055.5], [497.0, 7057.5], [501.0, 7055.0], [538.0, 7020.0], [542.0, 7015.0], [543.0, 7009.0], [529.0, 7033.0], [528.0, 7033.0], [531.0, 7029.0], [530.0, 7029.0], [533.0, 10505.0], [532.0, 7025.0], [541.0, 7013.0], [540.0, 7018.0], [539.0, 7018.0], [537.0, 7020.0], [518.0, 7040.0], [517.0, 7039.5], [516.0, 7039.0], [514.0, 7042.0], [513.0, 7041.0], [512.0, 7042.0], [527.0, 7036.0], [526.0, 7036.0], [525.0, 7037.0], [524.0, 7037.0], [523.0, 7037.0], [522.0, 7038.0], [521.0, 7039.0], [520.0, 7040.0], [535.0, 7021.0], [534.0, 10503.0], [568.0, 6991.0], [574.0, 6977.0], [575.0, 6975.0], [560.0, 6997.0], [562.0, 6995.0], [561.0, 6995.0], [572.0, 6978.0], [571.0, 6988.0], [570.0, 6988.0], [559.0, 6995.0], [544.0, 7008.0], [546.0, 7005.0], [545.0, 7008.0], [549.0, 7001.0], [547.0, 7006.0], [551.0, 7001.0], [550.0, 6999.5], [558.0, 6995.0], [557.0, 6996.0], [555.0, 6996.0], [554.0, 6999.0], [553.0, 6999.5], [567.0, 6992.0], [566.0, 6990.0], [565.0, 6992.0], [563.0, 6992.0], [604.0, 9099.0], [596.0, 6930.0], [606.0, 6333.5], [593.0, 6937.0], [592.0, 6937.0], [603.0, 8072.0], [600.0, 11012.0], [591.0, 6940.0], [576.0, 6971.0], [578.0, 6965.0], [577.0, 6966.0], [580.0, 6963.0], [579.0, 6966.0], [583.0, 6959.0], [582.0, 6960.5], [590.0, 6941.0], [589.0, 6943.0], [588.0, 6946.0], [587.0, 6950.0], [586.0, 6953.0], [585.0, 6953.0], [584.0, 6955.0], [599.0, 6334.0], [598.0, 11863.0], [597.0, 9809.0], [595.0, 6931.0], [594.0, 6934.0], [633.0, 6325.0], [637.0, 11577.0], [638.0, 6322.0], [627.0, 7485.333333333333], [624.0, 11906.0], [636.0, 6324.0], [635.0, 6324.0], [634.0, 6325.0], [632.0, 6326.0], [615.0, 6331.0], [614.0, 11860.0], [613.0, 6331.0], [612.0, 11587.0], [611.0, 6332.0], [610.0, 6333.0], [609.0, 8193.333333333334], [623.0, 11906.0], [622.0, 9116.5], [620.0, 6328.0], [619.0, 6328.0], [618.0, 11860.0], [616.0, 9807.0], [631.0, 11855.0], [630.0, 31411.666666666668], [666.0, 8048.0], [670.0, 6308.0], [671.0, 6296.0], [658.0, 6310.5], [656.0, 8939.0], [660.0, 41582.0], [659.0, 6310.0], [669.0, 46297.0], [668.0, 6308.0], [667.0, 29092.0], [664.0, 6309.0], [647.0, 6313.0], [646.0, 6314.0], [645.0, 41586.0], [644.0, 46305.0], [643.0, 6316.0], [642.0, 6316.0], [641.0, 11898.0], [640.0, 26314.0], [654.0, 8155.333333333333], [651.0, 6312.0], [650.0, 10015.666666666666], [662.0, 41580.0], [661.0, 11564.0], [701.0, 6266.0], [692.0, 8901.5], [703.0, 6265.5], [688.0, 46266.0], [691.0, 6273.0], [689.0, 45148.0], [700.0, 6265.0], [698.0, 6269.0], [696.0, 6271.0], [679.0, 6286.0], [677.0, 6286.0], [676.0, 6288.0], [675.0, 6287.0], [674.0, 46275.0], [673.0, 6295.5], [687.0, 9753.0], [686.0, 6279.5], [685.0, 6279.0], [683.0, 6284.666666666667], [680.0, 26279.5], [695.0, 46260.0], [694.0, 45145.0], [693.0, 6273.0], [733.0, 46228.0], [734.0, 6241.0], [721.0, 6254.0], [720.0, 6252.0], [732.0, 6242.0], [731.0, 9032.0], [729.0, 6243.0], [728.0, 6246.0], [719.0, 6255.0], [706.0, 6260.0], [704.0, 6260.0], [709.0, 43889.5], [708.0, 6261.0], [711.0, 6259.0], [710.0, 6258.0], [718.0, 9977.0], [716.0, 6257.0], [714.0, 88200.0], [713.0, 6256.0], [727.0, 170961.0], [726.0, 6248.0], [724.0, 6249.0], [723.0, 6251.5], [765.0, 9004.5], [766.0, 170927.0], [753.0, 46221.0], [752.0, 6232.0], [755.0, 6228.0], [754.0, 6230.0], [763.0, 6215.0], [762.0, 6219.0], [761.0, 6220.0], [760.0, 6219.0], [751.0, 6231.666666666667], [738.0, 6239.0], [736.0, 26233.5], [740.0, 6237.0], [739.0, 6239.0], [743.0, 11818.0], [742.0, 170951.0], [748.0, 6233.0], [747.0, 6237.5], [746.0, 6237.0], [745.0, 6238.0], [759.0, 6222.0], [758.0, 6223.0], [757.0, 6225.0], [756.0, 6227.0], [775.0, 6213.0], [798.0, 6198.0], [799.0, 6197.0], [797.0, 6199.5], [795.0, 6200.0], [794.0, 6201.0], [774.0, 170927.0], [773.0, 6213.0], [772.0, 108564.5], [770.0, 6213.0], [769.0, 6213.0], [768.0, 7953.0], [791.0, 6204.0], [790.0, 40266.8], [786.0, 7944.5], [783.0, 6207.0], [782.0, 6208.0], [781.0, 6208.0], [780.0, 6209.0], [779.0, 6209.0], [778.0, 46200.0], [777.0, 8977.0], [830.0, 6187.0], [831.0, 11768.0], [816.0, 7930.5], [821.0, 6189.0], [818.0, 9912.0], [829.0, 6186.0], [828.0, 6187.0], [826.0, 6186.0], [825.0, 6187.0], [824.0, 13629.0], [807.0, 7351.666666666667], [804.0, 8983.0], [802.0, 6193.0], [801.0, 6194.0], [800.0, 6194.0], [815.0, 6192.0], [814.0, 6191.0], [811.0, 11723.0], [810.0, 6192.666666666667], [823.0, 6190.0], [822.0, 6191.0], [856.0, 9865.0], [861.0, 6138.0], [862.0, 6135.0], [848.0, 11730.0], [860.0, 6139.0], [858.0, 11673.0], [857.0, 6144.0], [847.0, 6150.0], [833.0, 6166.0], [832.0, 9663.0], [837.0, 6165.5], [835.0, 6165.0], [839.0, 6159.0], [838.0, 6162.0], [846.0, 9630.0], [845.0, 6155.0], [844.0, 6156.0], [843.0, 6156.5], [841.0, 8946.5], [854.0, 6148.0], [853.0, 8008.333333333333], [852.0, 6149.0], [849.0, 6149.0], [890.0, 46095.0], [883.0, 6113.0], [894.0, 6106.0], [895.0, 8896.0], [882.0, 11692.5], [880.0, 6114.0], [892.0, 8897.0], [889.0, 26101.5], [870.0, 26125.5], [868.0, 170847.0], [867.0, 6132.0], [866.0, 11549.5], [864.0, 11687.0], [879.0, 11669.5], [877.0, 26113.5], [875.0, 92198.0], [873.0, 11651.0], [872.0, 9842.5], [887.0, 6108.0], [886.0, 28892.0], [884.0, 6109.0], [921.0, 9640.0], [926.0, 11373.0], [927.0, 9638.5], [913.0, 10581.0], [912.0, 10584.0], [924.0, 12504.0], [923.0, 9639.0], [922.0, 11072.5], [920.0, 11073.0], [902.0, 6080.0], [901.0, 170794.0], [900.0, 46068.0], [899.0, 46071.0], [898.0, 46072.0], [897.0, 6084.0], [896.0, 170810.0], [911.0, 9545.0], [910.0, 9548.0], [909.0, 6075.0], [908.0, 108426.5], [906.0, 46065.5], [904.0, 108428.0], [917.0, 11073.5], [915.0, 11075.0], [954.0, 9630.0], [958.0, 9629.0], [959.0, 9629.0], [946.0, 9633.0], [944.0, 11066.0], [948.0, 9631.0], [947.0, 169091.0], [957.0, 12495.0], [956.0, 9630.0], [955.0, 10497.0], [952.0, 9631.0], [935.0, 9636.0], [934.0, 12503.0], [932.0, 9636.0], [931.0, 12503.0], [930.0, 11070.5], [928.0, 9637.0], [942.0, 9633.0], [940.0, 9635.0], [938.0, 9635.0], [937.0, 44369.0], [936.0, 9635.0], [951.0, 9631.0], [950.0, 9631.0], [985.0, 9598.0], [990.0, 9595.0], [991.0, 9593.0], [978.0, 9603.0], [977.0, 9608.0], [980.0, 9602.0], [979.0, 9603.0], [989.0, 9595.0], [988.0, 11028.5], [986.0, 9597.0], [984.0, 12464.0], [967.0, 12479.0], [966.0, 12479.0], [965.0, 9615.0], [964.0, 9615.0], [963.0, 9116.0], [962.0, 9628.0], [961.0, 9123.0], [975.0, 12474.0], [974.0, 14544.0], [973.0, 9609.0], [972.0, 12475.0], [971.0, 9611.5], [969.0, 9611.0], [968.0, 9612.0], [983.0, 10468.0], [982.0, 169061.0], [1022.0, 9574.5], [1011.0, 9578.0], [1023.0, 9574.0], [1008.0, 9580.0], [1020.0, 9575.5], [1018.0, 10531.333333333334], [1007.0, 9581.0], [992.0, 14529.0], [996.0, 9591.0], [993.0, 9592.0], [999.0, 9590.0], [998.0, 12455.0], [1006.0, 9587.0], [1005.0, 14283.5], [1003.0, 9588.5], [1001.0, 9588.0], [1000.0, 12455.0], [1015.0, 9576.0], [1014.0, 9577.0], [1013.0, 11009.5], [1010.0, 9579.0], [1009.0, 12444.0], [1076.0, 13844.0], [1060.0, 9540.0], [1056.0, 9545.0], [1066.0, 9536.0], [1064.0, 10971.5], [1068.0, 9535.0], [1070.0, 9533.0], [1082.0, 11170.666666666666], [1078.0, 9529.5], [1074.0, 10964.5], [1072.0, 9532.0], [1038.0, 12431.0], [1036.0, 12432.0], [1054.0, 12016.5], [1026.0, 12435.0], [1030.0, 9569.0], [1028.0, 9569.0], [1034.0, 9567.0], [1032.0, 44302.0], [1048.0, 9553.0], [1046.0, 14493.0], [1044.0, 11295.0], [1042.0, 9562.0], [1142.0, 44217.0], [1124.0, 10928.0], [1128.0, 9495.25], [1126.0, 16021.0], [1130.0, 14427.0], [1132.0, 10924.5], [1134.0, 9489.0], [1148.0, 9474.0], [1144.0, 14415.0], [1140.0, 44220.0], [1138.0, 9488.0], [1136.0, 9488.0], [1090.0, 9525.0], [1092.0, 9520.0], [1094.0, 44248.0], [1096.0, 9510.0], [1098.0, 9507.0], [1100.0, 9506.0], [1116.0, 9497.0], [1114.0, 9501.0], [1112.0, 9501.0], [1110.0, 14438.0], [1108.0, 9503.0], [1106.0, 9504.0], [1206.0, 12025.666666666666], [1210.0, 9424.0], [1184.0, 9442.0], [1188.0, 9436.0], [1192.0, 12302.0], [1194.0, 9436.0], [1198.0, 9433.0], [1214.0, 11068.666666666666], [1212.0, 9424.0], [1204.0, 9425.0], [1202.0, 12297.0], [1200.0, 10149.5], [1152.0, 44206.0], [1156.0, 89197.5], [1154.0, 9470.0], [1158.0, 9467.0], [1162.0, 26831.5], [1160.0, 9465.0], [1166.0, 9464.0], [1178.0, 13343.5], [1176.0, 168902.0], [1174.0, 9459.0], [1170.0, 9460.0], [1168.0, 14394.0], [1252.0, 9402.666666666666], [1254.0, 9402.0], [1248.0, 9404.0], [1256.0, 10835.0], [1258.0, 12265.0], [1260.0, 9382.0], [1278.0, 12239.0], [1276.0, 12241.0], [1274.0, 10809.5], [1272.0, 10812.0], [1270.0, 9380.0], [1266.0, 12247.0], [1230.0, 9411.666666666666], [1226.0, 11323.666666666666], [1224.0, 10851.666666666666], [1246.0, 9404.5], [1238.0, 9408.0], [1234.0, 11320.333333333334], [1338.0, 9352.0], [1342.0, 9352.0], [1314.0, 9357.0], [1312.0, 9358.0], [1316.0, 9356.0], [1318.0, 9356.0], [1322.0, 12220.5], [1320.0, 10789.0], [1340.0, 9352.0], [1336.0, 9353.0], [1334.0, 9353.0], [1332.0, 9354.0], [1330.0, 9354.0], [1328.0, 9354.333333333334], [1294.0, 9367.0], [1292.0, 12236.0], [1290.0, 10804.0], [1288.0, 12237.0], [1286.0, 12238.0], [1284.0, 9372.0], [1282.0, 10805.0], [1280.0, 9374.0], [1308.0, 9358.0], [1306.0, 10796.5], [1304.0, 9363.0], [1302.0, 9365.0], [1300.0, 9365.0], [1298.0, 11525.0], [1296.0, 9366.0], [1398.0, 11081.0], [1392.0, 9347.0], [1390.0, 9347.0], [1388.0, 12214.0], [1376.0, 16868.4], [1460.0, 12205.0], [1464.0, 9338.0], [1470.0, 9338.0], [1444.0, 9340.0], [1450.0, 22562.666666666664], [1420.0, 153211.5], [1418.0, 168801.0], [1416.0, 106440.0], [1414.0, 23238.0], [1412.0, 10262.4], [1410.0, 11158.999999999998], [1408.0, 9345.0], [1434.0, 9341.0], [1432.0, 26709.0], [1424.0, 27426.0], [1486.0, 9337.0], [1508.0, 6766.0], [1506.0, 7726.0], [1504.0, 8786.0], [1482.0, 9337.5], [1472.0, 9337.8], [1502.0, 9334.0], [1494.0, 10269.888888888889], [1488.0, 13652.0], [1598.0, 411.0], [1592.0, 412.0], [1574.0, 413.0], [1576.0, 410.0], [1578.0, 410.5], [1588.0, 412.4], [1586.0, 412.5], [1584.0, 414.0], [1654.0, 10278.0], [1660.0, 6614.0], [1634.0, 4791.0], [1638.0, 6623.0], [1640.0, 6623.0], [1644.0, 6621.0], [1646.0, 6620.0], [1662.0, 6612.0], [1656.0, 6615.0], [1648.0, 6619.0], [1614.0, 410.0], [1612.0, 412.0], [1608.0, 410.5], [1606.0, 410.0], [1602.0, 411.0], [1630.0, 7441.0], [1628.0, 7447.0], [1626.0, 7450.0], [1624.0, 7450.0], [1620.0, 7456.0], [1618.0, 7456.0], [1718.0, 6573.0], [1724.0, 6565.0], [1698.0, 6586.0], [1700.0, 10247.0], [1702.0, 6582.0], [1704.0, 10246.0], [1706.0, 6580.0], [1710.0, 6578.0], [1726.0, 6562.0], [1720.0, 6566.0], [1716.0, 8007.0], [1714.0, 6578.0], [1678.0, 6604.0], [1676.0, 6605.0], [1674.0, 6606.0], [1672.0, 6606.0], [1670.0, 6607.0], [1668.0, 10271.0], [1666.0, 6610.5], [1664.0, 6612.0], [1694.0, 7327.0], [1692.0, 6595.0], [1686.0, 9466.0], [1684.0, 6598.0], [1682.0, 6601.0], [1680.0, 6601.0], [1784.0, 6523.0], [1760.0, 6537.0], [1762.0, 8366.0], [1768.0, 6532.0], [1770.0, 10190.0], [1788.0, 6521.666666666667], [1782.0, 6523.0], [1728.0, 6561.0], [1736.0, 6557.0], [1738.0, 6555.0], [1742.0, 6555.333333333333], [1740.0, 6556.0], [1750.0, 6555.0], [1746.0, 9427.0], [1744.0, 6556.0], [1774.0, 6527.0], [1852.0, 6476.0], [1830.0, 6502.0], [1824.0, 10167.0], [1826.0, 10166.0], [1828.0, 6503.0], [1834.0, 10162.0], [1832.0, 10163.0], [1836.0, 8941.0], [1838.0, 10159.0], [1848.0, 6484.0], [1846.0, 6486.0], [1844.0, 8317.0], [1842.0, 9757.0], [1840.0, 6494.0], [1792.0, 6520.333333333333], [1796.0, 10182.0], [1794.0, 10183.0], [1800.0, 8350.0], [1802.0, 10180.0], [1806.0, 6519.0], [1822.0, 6507.0], [1818.0, 8958.333333333334], [1814.0, 6518.0], [1812.0, 8349.5], [1810.0, 8959.0], [1808.0, 10181.0], [1888.0, 10091.0], [1914.0, 6399.0], [1892.0, 8259.0], [1896.0, 10088.0], [1898.0, 10087.0], [1902.0, 6416.0], [1916.0, 6397.0], [1912.0, 10062.666666666666], [1906.0, 10073.0], [1904.0, 10076.5], [1866.0, 10113.0], [1864.0, 8282.0], [1862.0, 6453.0], [1858.0, 6470.5], [1856.0, 8305.5], [1882.0, 10095.0], [1880.0, 6437.0], [1872.0, 6441.0], [1948.0, 500.0], [1924.0, 6382.5], [1946.0, 2606.0], [1944.0, 8812.0], [1942.0, 8813.0], [1938.0, 8817.0], [2104.0, 467.38554216867476], [2100.0, 476.0], [2096.0, 476.0], [2196.0, 459.8], [2188.0, 462.0], [2200.0, 458.8], [2204.0, 459.0], [2236.0, 456.0], [2232.0, 456.0], [2224.0, 458.0], [2208.0, 459.2], [2384.0, 415.0], [2396.0, 413.0], [2428.0, 411.0], [2424.0, 410.0], [2420.0, 411.44444444444446], [2416.0, 412.16666666666663], [2404.0, 412.6], [2528.0, 373.0], [2548.0, 371.6666666666667], [2540.0, 372.0], [2536.0, 373.0], [2460.0, 407.5], [2452.0, 410.5], [2448.0, 409.5714285714286], [2444.0, 410.0], [2440.0, 409.25], [2436.0, 410.0], [2432.0, 410.0], [2636.0, 368.0], [2684.0, 348.0], [2644.0, 366.5], [2648.0, 366.0], [2656.0, 364.5], [2788.0, 1825.5], [2808.0, 1809.0], [2804.0, 8011.0], [2768.0, 285.0], [2776.0, 75.0], [2772.0, 75.5], [2780.0, 1803.0], [2812.0, 5608.5], [2796.0, 3669.0], [2792.0, 1809.0], [2784.0, 1838.0], [2716.0, 347.0], [2712.0, 348.0], [2708.0, 348.0], [2704.0, 347.6666666666667], [2688.0, 348.6666666666667], [2744.0, 347.0], [2740.0, 347.0], [2736.0, 347.5], [2732.0, 350.0], [2828.0, 894.0], [2932.0, 886.0], [2936.0, 886.0], [2816.0, 8004.0], [2820.0, 894.0], [2824.0, 895.0], [2832.0, 894.0], [2844.0, 892.0], [2956.0, 885.125], [3000.0, 2210.600289144762], [2944.0, 886.2], [2960.0, 885.0], [2952.0, 887.3333333333334], [2105.0, 465.0], [2097.0, 474.5], [2093.0, 475.0], [2185.0, 461.0], [2189.0, 459.5], [2237.0, 457.0], [2197.0, 459.0], [2201.0, 459.03846153846155], [2205.0, 459.0], [2229.0, 457.0], [2217.0, 459.0], [2425.0, 411.5], [2385.0, 412.0], [2389.0, 413.0], [2393.0, 413.4], [2417.0, 412.5], [2413.0, 412.0], [2405.0, 412.0], [2401.0, 411.5], [2529.0, 372.0], [2537.0, 373.0], [2525.0, 373.20588235294116], [2541.0, 372.6666666666667], [2461.0, 408.0], [2457.0, 408.0], [2453.0, 408.0], [2441.0, 409.3333333333333], [2437.0, 409.6666666666667], [2433.0, 410.5], [2645.0, 365.77777777777777], [2641.0, 366.0], [2649.0, 364.8518518518519], [2653.0, 365.0], [2801.0, 3668.0], [2809.0, 3665.0], [2757.0, 347.5], [2761.0, 286.0], [2781.0, 1800.0], [2793.0, 1809.0], [2709.0, 349.0], [2701.0, 349.0], [2693.0, 348.25], [2737.0, 347.6666666666667], [2721.0, 348.5], [2833.0, 894.0], [2941.0, 5189.0], [2825.0, 895.0], [2853.0, 891.0], [2849.0, 891.0], [2945.0, 885.5], [2949.0, 887.1428571428571], [2961.0, 885.0999999999999], [2957.0, 886.0], [1039.0, 9563.0], [1079.0, 9528.0], [1087.0, 63633.66666666667], [1059.0, 9541.0], [1057.0, 9546.0], [1063.0, 12140.333333333334], [1067.0, 9536.0], [1071.0, 9532.0], [1085.0, 89255.0], [1075.0, 9531.0], [1037.0, 12433.0], [1035.0, 9567.0], [1055.0, 12413.0], [1025.0, 11004.5], [1033.0, 10999.5], [1027.0, 9570.0], [1053.0, 14484.0], [1051.0, 12019.0], [1049.0, 12419.0], [1047.0, 9555.0], [1045.0, 9560.0], [1043.0, 169023.0], [1041.0, 10996.5], [1143.0, 8976.0], [1147.0, 9477.0], [1151.0, 11940.5], [1121.0, 9496.0], [1129.0, 13809.0], [1133.0, 9490.0], [1135.0, 9489.0], [1149.0, 9474.0], [1145.0, 9479.0], [1141.0, 9484.0], [1139.0, 12354.0], [1137.0, 12353.0], [1119.0, 9497.0], [1089.0, 11683.5], [1091.0, 12389.0], [1093.0, 13830.0], [1095.0, 9510.0], [1097.0, 14443.0], [1099.0, 9507.0], [1103.0, 9504.0], [1101.0, 9504.0], [1115.0, 9498.0], [1113.0, 14435.0], [1109.0, 26870.0], [1107.0, 9502.0], [1185.0, 9437.0], [1215.0, 9423.0], [1187.0, 11904.0], [1189.0, 13750.0], [1193.0, 12726.0], [1195.0, 12301.0], [1209.0, 10900.666666666666], [1201.0, 12297.0], [1183.0, 9442.333333333334], [1153.0, 9471.0], [1159.0, 9466.0], [1165.0, 34265.333333333336], [1181.0, 9443.0], [1179.0, 9443.0], [1175.0, 9459.0], [1173.0, 12325.0], [1171.0, 9460.0], [1169.0, 9460.0], [1265.0, 9381.0], [1275.0, 12242.0], [1279.0, 10807.0], [1249.0, 12269.0], [1257.0, 9399.0], [1259.0, 9398.0], [1263.0, 9381.0], [1261.0, 9381.0], [1269.0, 10813.5], [1267.0, 10813.0], [1231.0, 13727.0], [1229.0, 9412.0], [1227.0, 9412.0], [1219.0, 9414.0], [1217.0, 9414.5], [1247.0, 9405.0], [1245.0, 9405.0], [1243.0, 9405.5], [1241.0, 9406.5], [1239.0, 9408.5], [1237.0, 12273.0], [1339.0, 12219.0], [1315.0, 9357.0], [1317.0, 12222.0], [1325.0, 9355.0], [1323.0, 14290.0], [1335.0, 9353.0], [1331.0, 12221.0], [1293.0, 9368.0], [1291.0, 9372.0], [1287.0, 10804.5], [1285.0, 12239.0], [1311.0, 10790.5], [1309.0, 9358.0], [1305.0, 12229.0], [1301.0, 12231.0], [1403.0, 14282.0], [1405.0, 10062.25], [1377.0, 14284.0], [1375.0, 13662.0], [1371.0, 11952.0], [1469.0, 10484.6], [1471.0, 9338.0], [1441.0, 9340.0], [1447.0, 9340.0], [1449.0, 10295.333333333334], [1467.0, 8833.0], [1465.0, 10814.333333333334], [1423.0, 137257.8], [1421.0, 9343.0], [1415.0, 42727.8], [1413.0, 14279.0], [1409.0, 10300.0], [1433.0, 9341.0], [1431.0, 26708.0], [1429.0, 26709.5], [1427.0, 10297.333333333334], [1455.0, 30078.6], [1451.0, 26454.0], [1479.0, 20914.666666666668], [1505.0, 7729.0], [1507.0, 6719.0], [1481.0, 9337.0], [1473.0, 12205.0], [1503.0, 8739.0], [1501.0, 9335.0], [1497.0, 9336.0], [1491.0, 9683.4], [1489.0, 9337.0], [1577.0, 412.0], [1583.0, 689.15], [1595.0, 411.75], [1593.0, 411.0], [1589.0, 412.0], [1587.0, 411.3333333333333], [1585.0, 411.3333333333333], [1659.0, 6613.5], [1655.0, 6614.0], [1639.0, 6623.0], [1663.0, 6611.0], [1633.0, 7435.0], [1635.0, 4788.0], [1637.0, 6625.0], [1643.0, 6623.0], [1641.0, 6622.0], [1645.0, 6621.0], [1647.0, 6619.0], [1661.0, 6612.0], [1657.0, 6613.0], [1653.0, 6616.5], [1651.0, 6616.0], [1649.0, 6618.0], [1613.0, 410.85714285714283], [1611.0, 411.0], [1609.0, 410.5], [1607.0, 409.0], [1605.0, 410.0], [1601.0, 411.0], [1631.0, 7435.0], [1629.0, 7444.0], [1627.0, 7449.0], [1625.0, 7449.0], [1623.0, 7454.666666666667], [1619.0, 7456.0], [1617.0, 7456.333333333333], [1725.0, 6563.0], [1703.0, 6582.0], [1727.0, 6562.0], [1697.0, 6586.5], [1699.0, 6584.0], [1701.0, 6584.0], [1705.0, 6581.0], [1709.0, 6581.0], [1707.0, 6582.0], [1711.0, 6577.0], [1723.0, 7785.333333333333], [1719.0, 6573.0], [1713.0, 6577.5], [1679.0, 6602.0], [1677.0, 6605.0], [1671.0, 6606.0], [1669.0, 6609.0], [1667.0, 6611.0], [1695.0, 6589.0], [1693.0, 6596.0], [1689.0, 6593.0], [1687.0, 6596.0], [1683.0, 6600.0], [1785.0, 6522.0], [1791.0, 6521.0], [1763.0, 6534.0], [1765.0, 8365.5], [1769.0, 6530.0], [1783.0, 6523.0], [1781.0, 6524.0], [1777.0, 6525.333333333333], [1759.0, 7759.666666666667], [1729.0, 6559.0], [1733.0, 6557.5], [1731.0, 6557.5], [1735.0, 10219.0], [1737.0, 6557.0], [1757.0, 6537.0], [1755.0, 8370.0], [1753.0, 6552.0], [1751.0, 6555.0], [1749.0, 8386.0], [1747.0, 7776.333333333333], [1773.0, 6526.333333333333], [1855.0, 8305.0], [1849.0, 10147.0], [1825.0, 6504.0], [1827.0, 6502.0], [1831.0, 6501.0], [1837.0, 6498.0], [1839.0, 10157.0], [1851.0, 10138.0], [1845.0, 6486.0], [1823.0, 6508.0], [1793.0, 6521.0], [1801.0, 8349.5], [1803.0, 8961.0], [1805.0, 6519.0], [1821.0, 8347.5], [1819.0, 10179.0], [1815.0, 8347.5], [1809.0, 10179.0], [1917.0, 8227.5], [1919.0, 6397.5], [1891.0, 8258.5], [1897.0, 9172.75], [1899.0, 10088.0], [1901.0, 9288.5], [1913.0, 10061.0], [1909.0, 10064.0], [1907.0, 6405.0], [1905.0, 10075.0], [1871.0, 6443.0], [1869.0, 6448.0], [1861.0, 7690.333333333333], [1887.0, 8264.0], [1885.0, 8874.333333333334], [1881.0, 10096.0], [1879.0, 8269.5], [1877.0, 10102.0], [1875.0, 6439.333333333333], [1925.0, 6382.0], [1945.0, 8812.0], [1921.0, 10045.0], [1923.0, 6383.0], [1927.0, 8210.5], [1931.0, 6370.5], [1929.0, 6377.0], [1935.0, 6592.0], [1933.0, 3793.0], [1947.0, 2555.0], [1941.0, 8813.5], [1939.0, 8813.0], [1937.0, 6986.5], [2102.0, 470.62499999999994], [2106.0, 465.5], [2190.0, 460.0], [2194.0, 458.85714285714283], [2234.0, 457.0], [2198.0, 458.6666666666667], [2202.0, 459.375], [2218.0, 457.0], [2214.0, 458.5], [2210.0, 459.0], [2426.0, 411.16666666666674], [2430.0, 409.8], [2386.0, 416.0], [2390.0, 413.0], [2394.0, 412.0], [2422.0, 411.14285714285717], [2418.0, 411.6666666666667], [2414.0, 412.0], [2406.0, 412.5], [2534.0, 373.0], [2538.0, 373.0], [2522.0, 377.0], [2518.0, 377.0], [2530.0, 373.625], [2458.0, 410.0], [2446.0, 408.5], [2442.0, 409.5], [2434.0, 410.0], [2646.0, 365.6818181818182], [2638.0, 368.0], [2642.0, 368.0], [2666.0, 363.0], [2662.0, 365.0], [2654.0, 364.99999999999994], [2806.0, 1807.0], [2758.0, 287.0], [2762.0, 286.0], [2766.0, 285.5], [2770.0, 286.0], [2782.0, 1837.0], [2802.0, 4495.333333333333], [2786.0, 4938.0], [2714.0, 348.0], [2706.0, 347.3333333333333], [2702.0, 348.0], [2694.0, 349.5], [2690.0, 348.5], [2750.0, 347.0], [2738.0, 347.0], [2730.0, 348.4285714285714], [2722.0, 348.5], [2938.0, 886.0], [2934.0, 886.0], [2942.0, 2320.0], [2858.0, 892.0], [2818.0, 4318.0], [2830.0, 895.0], [2842.0, 892.1666666666666], [2854.0, 891.0], [2946.0, 886.0], [2962.0, 1294.7619047619053], [2958.0, 886.0263157894736], [2954.0, 1379.4347826086955], [2095.0, 475.0], [2235.0, 458.0], [2187.0, 461.0], [2191.0, 460.0], [2195.0, 459.875], [2199.0, 460.0], [2203.0, 460.0], [2231.0, 457.5], [2227.0, 457.875], [2223.0, 457.6666666666667], [2211.0, 457.5], [2427.0, 410.0], [2423.0, 411.8181818181818], [2431.0, 410.0], [2387.0, 413.0], [2391.0, 413.0], [2399.0, 412.3333333333333], [2419.0, 412.0], [2415.0, 411.57142857142856], [2403.0, 413.0], [2511.0, 377.0], [2531.0, 373.25], [2527.0, 373.0], [2455.0, 409.2857142857143], [2447.0, 408.0], [2443.0, 409.7142857142857], [2435.0, 410.8], [2643.0, 368.0], [2683.0, 349.0], [2647.0, 364.57142857142856], [2651.0, 365.0], [2667.0, 364.0], [2663.0, 366.0], [2655.0, 364.4], [2811.0, 1803.0], [2815.0, 2421.6666666666665], [2755.0, 347.5], [2763.0, 285.0], [2779.0, 31.0], [2807.0, 4495.333333333333], [2799.0, 2738.0], [2795.0, 2739.25], [2791.0, 8012.0], [2699.0, 348.6666666666667], [2695.0, 349.0], [2691.0, 350.0], [2751.0, 347.0], [2739.0, 347.0], [2731.0, 348.0], [2935.0, 886.0], [2943.0, 3254.666666666667], [2827.0, 894.0], [2831.0, 894.0], [2835.0, 893.0], [2847.0, 891.0], [2855.0, 891.0], [2851.0, 891.0], [2951.0, 886.4499999999999], [2959.0, 885.9285714285714], [2947.0, 886.0999999999999], [2955.0, 1039.6145833333328], [1.0, 100439.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[2983.5611671490897, 2407.4609781132076]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 3000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 991.2, "minX": 1.68286284E12, "maxY": 748482.6, "series": [{"data": [[1.68286302E12, 556414.3333333334], [1.68286284E12, 271252.81666666665], [1.68286314E12, 315513.6666666667], [1.68286296E12, 718014.5166666667], [1.68286326E12, 3859.5833333333335], [1.68286308E12, 748482.6], [1.6828629E12, 643594.6666666666], [1.6828632E12, 1445.95]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.68286302E12, 386610.0], [1.68286284E12, 188034.0], [1.68286314E12, 223280.4], [1.68286296E12, 503512.8], [1.68286326E12, 2696.4], [1.68286308E12, 521808.0], [1.6828629E12, 441403.2], [1.6828632E12, 991.2]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68286326E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 1049.3318800605043, "minX": 1.68286284E12, "maxY": 99866.73208722736, "series": [{"data": [[1.68286302E12, 3072.788894425579], [1.68286284E12, 1049.3318800605043], [1.68286314E12, 2489.066844718638], [1.68286296E12, 2409.4744361278294], [1.68286326E12, 99866.73208722736], [1.68286308E12, 2085.5604702707956], [1.6828629E12, 2022.6714833493916], [1.6828632E12, 58824.220338983054]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68286326E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 990.4371830233981, "minX": 1.68286284E12, "maxY": 99866.71651090348, "series": [{"data": [[1.68286302E12, 2918.4255042571976], [1.68286284E12, 990.4371830233981], [1.68286314E12, 2477.084261209744], [1.68286296E12, 2372.4139230166697], [1.68286326E12, 99866.71651090348], [1.68286308E12, 1960.6074331052748], [1.6828629E12, 1806.9490753858076], [1.6828632E12, 58824.220338983054]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68286326E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.19937694704049846, "minX": 1.68286284E12, "maxY": 1271.0057412743467, "series": [{"data": [[1.68286302E12, 1271.0057412743467], [1.68286284E12, 20.31497464187196], [1.68286314E12, 386.36676196208134], [1.68286296E12, 821.2332005267814], [1.68286326E12, 0.19937694704049846], [1.68286308E12, 310.72718512094025], [1.6828629E12, 233.47311157703842], [1.6828632E12, 0.25423728813559343]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68286326E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 9.0, "minX": 1.68286284E12, "maxY": 217459.0, "series": [{"data": [[1.68286302E12, 199047.0], [1.68286284E12, 28325.0], [1.68286314E12, 170961.0], [1.68286296E12, 142927.0], [1.68286326E12, 100439.0], [1.68286308E12, 217459.0], [1.6828629E12, 87834.0], [1.6828632E12, 87806.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.68286302E12, 846.0], [1.68286284E12, 595.0], [1.68286314E12, 7336.0], [1.68286296E12, 4219.0], [1.68286326E12, 100363.8], [1.68286308E12, 1038.0], [1.6828629E12, 4079.0], [1.6828632E12, 82756.2]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.68286302E12, 129304.0], [1.68286284E12, 15303.980000000163], [1.68286314E12, 25910.0], [1.68286296E12, 134988.81000000003], [1.68286326E12, 100424.9], [1.68286308E12, 41311.990000000005], [1.6828629E12, 23527.850000000024], [1.6828632E12, 87806.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.68286302E12, 6493.0], [1.68286284E12, 2754.000000000102], [1.68286314E12, 9408.0], [1.68286296E12, 7160.850000000279], [1.68286326E12, 100410.9], [1.68286308E12, 4347.0], [1.6828629E12, 9385.95], [1.6828632E12, 85785.2]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.68286302E12, 21.0], [1.68286284E12, 9.0], [1.68286314E12, 30.0], [1.68286296E12, 20.0], [1.68286326E12, 88813.0], [1.68286308E12, 18.0], [1.6828629E12, 9.0], [1.6828632E12, 32729.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.68286302E12, 491.0], [1.68286284E12, 434.0], [1.68286314E12, 846.0], [1.68286296E12, 474.0], [1.68286326E12, 100303.0], [1.68286308E12, 587.0], [1.6828629E12, 72.0], [1.6828632E12, 58528.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68286326E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 46.0, "minX": 2.0, "maxY": 151508.0, "series": [{"data": [[2.0, 50957.5], [4.0, 11475.0], [5.0, 28289.0], [6.0, 71966.0], [7.0, 3547.0], [8.0, 49290.5], [13.0, 12802.0], [14.0, 39833.0], [16.0, 101220.5], [20.0, 4433.5], [21.0, 7450.0], [25.0, 624.0], [43.0, 46.0], [46.0, 3156.5], [47.0, 10311.0], [53.0, 48927.5], [55.0, 104.0], [67.0, 12823.0], [82.0, 220.0], [81.0, 69.0], [84.0, 39276.5], [87.0, 9219.0], [95.0, 77.0], [92.0, 9916.0], [94.0, 119.0], [97.0, 6778.0], [100.0, 2110.5], [106.0, 410.0], [112.0, 120.0], [115.0, 7018.0], [116.0, 93.0], [122.0, 2242.0], [129.0, 80.0], [136.0, 105.0], [150.0, 120.0], [163.0, 348.0], [221.0, 144.0], [220.0, 126.0], [225.0, 157.0], [227.0, 6203.0], [228.0, 4257.5], [246.0, 338.0], [251.0, 143.0], [248.0, 179.0], [298.0, 5093.5], [299.0, 100310.0], [315.0, 6287.0], [325.0, 15203.0], [328.0, 256.0], [358.0, 11347.5], [367.0, 9476.0], [427.0, 291.0], [432.0, 254.0], [481.0, 71.0], [530.0, 9985.0], [535.0, 5602.0], [518.0, 296.0], [537.0, 6166.0], [554.0, 10627.0], [548.0, 82.0], [569.0, 426.0], [553.0, 13892.0], [576.0, 438.5], [591.0, 397.0], [605.0, 424.0], [579.0, 474.0], [589.0, 7834.0], [627.0, 447.0], [628.0, 55.0], [610.0, 270.0], [625.0, 370.0], [615.0, 279.0], [670.0, 464.0], [662.0, 265.0], [663.0, 513.0], [682.0, 395.0], [726.0, 400.0], [719.0, 375.0], [727.0, 380.0], [733.0, 484.0], [715.0, 447.0], [743.0, 400.0], [758.0, 477.0], [751.0, 67.0], [755.0, 484.0], [767.0, 472.0], [747.0, 471.0], [746.0, 524.5], [750.0, 404.0], [770.0, 510.0], [783.0, 447.0], [781.0, 89.0], [786.0, 120.0], [796.0, 361.0], [782.0, 410.0], [797.0, 423.0], [801.0, 59.0], [829.0, 97.0], [813.0, 482.0], [803.0, 435.0], [836.0, 510.0], [844.0, 6053.5], [834.0, 99.0], [847.0, 499.0], [849.0, 456.0], [837.0, 411.0], [892.0, 520.5], [867.0, 463.0], [872.0, 413.0], [889.0, 445.0], [895.0, 380.0], [894.0, 4936.5], [879.0, 504.0], [884.0, 452.0], [890.0, 397.0], [880.0, 357.0], [898.0, 484.0], [904.0, 478.0], [906.0, 376.0], [901.0, 466.0], [900.0, 446.0], [902.0, 384.0], [920.0, 393.0], [908.0, 7141.0], [897.0, 469.0], [909.0, 500.0], [910.0, 400.0], [915.0, 101.0], [923.0, 455.0], [917.0, 472.0], [927.0, 414.0], [912.0, 482.0], [949.0, 478.0], [960.0, 493.0], [985.0, 498.0], [978.0, 476.0], [984.0, 486.0], [1003.0, 474.0], [996.0, 390.0], [997.0, 464.0], [1020.0, 461.0], [1085.0, 423.0], [1049.0, 447.0], [1055.0, 485.0], [1064.0, 504.0], [1087.0, 444.0], [1030.0, 435.0], [1113.0, 675.0], [1102.0, 575.0], [1134.0, 791.0], [1176.0, 737.0], [1195.0, 691.0], [1209.0, 450.0], [1230.0, 321.0], [1265.0, 404.0], [1253.0, 88.0], [1244.0, 417.0], [1231.0, 499.0], [1338.0, 711.0], [1392.0, 474.5], [1388.0, 615.0], [1396.0, 335.0], [1398.0, 884.0], [1415.0, 581.0], [1457.0, 91.0], [1436.0, 201.0], [1434.0, 238.0], [1421.0, 448.0], [1460.0, 892.0], [1447.0, 894.0], [1486.0, 401.0], [1518.0, 63.0], [1513.0, 108.0], [1582.0, 69.0], [1548.0, 254.0], [1594.0, 459.5], [1583.0, 655.0], [1555.0, 463.0], [1623.0, 71.0], [1612.0, 210.0], [1635.0, 213.0], [1651.0, 468.0], [1614.0, 519.0], [1655.0, 815.0], [1675.0, 646.0], [1671.0, 490.0], [1687.0, 454.0], [1716.0, 852.0], [1701.0, 485.0], [1733.0, 463.0], [1750.0, 68.0], [1773.0, 211.0], [1780.0, 221.0], [1729.0, 471.0], [1772.0, 729.0], [1792.0, 491.0], [1800.0, 488.0], [1823.0, 599.0], [1818.0, 763.0], [1812.0, 677.0], [1805.0, 467.0], [1816.0, 820.0], [1793.0, 450.0], [1854.0, 720.0], [1830.0, 589.0], [1858.0, 102.0], [1892.0, 830.0], [1934.0, 385.0], [1921.0, 471.0], [2012.0, 72.0], [2035.0, 776.0], [2000.0, 885.0], [2111.0, 54.0], [2099.0, 48.0], [2090.0, 610.0], [2175.0, 50.0], [2105.0, 79.0], [2168.0, 82.0], [2166.0, 83.0], [2144.0, 976.0], [2101.0, 120.0], [2053.0, 363.0], [2054.0, 700.0], [2181.0, 113.0], [2216.0, 185.0], [2252.0, 226.0], [2244.0, 749.0], [2211.0, 821.0], [2195.0, 910.0], [2350.0, 457.0], [2414.0, 80.0], [2325.0, 754.0], [2403.0, 590.0], [2405.0, 876.0], [2384.0, 1021.0], [2354.0, 845.0], [2513.0, 773.0], [2605.0, 435.0], [2643.0, 480.0], [2699.0, 509.0], [2845.0, 672.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2168.0, 25266.0], [796.0, 8254.0], [803.0, 19893.0], [53.0, 16881.0], [220.0, 9428.0], [898.0, 13136.5], [897.0, 4321.0], [949.0, 89361.0], [997.0, 36247.0], [1020.0, 106135.0], [1102.0, 151508.0], [325.0, 44473.0], [82.0, 31731.0], [84.0, 84094.0], [1486.0, 13333.0], [1582.0, 15302.0], [1623.0, 29422.0], [1675.0, 136953.0], [1800.0, 59985.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 2845.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 2.0, "maxY": 101220.5, "series": [{"data": [[2.0, 50957.5], [4.0, 11475.0], [5.0, 28289.0], [6.0, 71966.0], [7.0, 3547.0], [8.0, 49290.5], [13.0, 12802.0], [14.0, 39833.0], [16.0, 101220.5], [20.0, 4433.5], [21.0, 7450.0], [25.0, 624.0], [43.0, 46.0], [46.0, 3156.5], [47.0, 10311.0], [53.0, 48927.5], [55.0, 104.0], [67.0, 12823.0], [82.0, 220.0], [81.0, 69.0], [84.0, 39276.5], [87.0, 9219.0], [95.0, 77.0], [92.0, 9916.0], [94.0, 119.0], [97.0, 6778.0], [100.0, 2110.5], [106.0, 410.0], [112.0, 120.0], [115.0, 7018.0], [116.0, 93.0], [122.0, 2241.5], [129.0, 80.0], [136.0, 105.0], [150.0, 120.0], [163.0, 348.0], [221.0, 144.0], [220.0, 126.0], [225.0, 157.0], [227.0, 6203.0], [228.0, 4257.0], [246.0, 338.0], [251.0, 143.0], [248.0, 179.0], [298.0, 5093.5], [299.0, 100310.0], [315.0, 6287.0], [325.0, 15203.0], [328.0, 256.0], [358.0, 11347.5], [367.0, 9476.0], [427.0, 291.0], [432.0, 254.0], [481.0, 71.0], [530.0, 9985.0], [535.0, 5602.0], [518.0, 296.0], [537.0, 6166.0], [554.0, 10627.0], [548.0, 82.0], [569.0, 426.0], [553.0, 13892.0], [576.0, 438.5], [591.0, 397.0], [605.0, 424.0], [579.0, 474.0], [589.0, 7834.0], [627.0, 447.0], [628.0, 55.0], [610.0, 270.0], [625.0, 370.0], [615.0, 279.0], [670.0, 464.0], [662.0, 265.0], [663.0, 513.0], [682.0, 395.0], [726.0, 400.0], [719.0, 375.0], [727.0, 380.0], [733.0, 484.0], [715.0, 447.0], [743.0, 400.0], [758.0, 477.0], [751.0, 67.0], [755.0, 484.0], [767.0, 472.0], [747.0, 471.0], [746.0, 524.5], [750.0, 404.0], [770.0, 510.0], [783.0, 447.0], [781.0, 89.0], [786.0, 120.0], [796.0, 361.0], [782.0, 410.0], [797.0, 423.0], [801.0, 59.0], [829.0, 97.0], [813.0, 482.0], [803.0, 435.0], [836.0, 510.0], [844.0, 6053.5], [834.0, 99.0], [847.0, 499.0], [849.0, 456.0], [837.0, 411.0], [892.0, 520.5], [867.0, 463.0], [872.0, 413.0], [889.0, 445.0], [895.0, 380.0], [894.0, 4936.5], [879.0, 504.0], [884.0, 452.0], [890.0, 397.0], [880.0, 357.0], [898.0, 484.0], [904.0, 478.0], [906.0, 376.0], [901.0, 466.0], [900.0, 446.0], [902.0, 384.0], [920.0, 393.0], [908.0, 7141.0], [897.0, 469.0], [909.0, 500.0], [910.0, 400.0], [915.0, 101.0], [923.0, 455.0], [917.0, 472.0], [927.0, 414.0], [912.0, 482.0], [949.0, 478.0], [960.0, 493.0], [985.0, 498.0], [978.0, 476.0], [984.0, 486.0], [1003.0, 474.0], [996.0, 390.0], [997.0, 464.0], [1020.0, 461.0], [1085.0, 423.0], [1049.0, 447.0], [1055.0, 485.0], [1064.0, 504.0], [1087.0, 444.0], [1030.0, 435.0], [1113.0, 675.0], [1102.0, 575.0], [1134.0, 791.0], [1176.0, 737.0], [1195.0, 691.0], [1209.0, 450.0], [1230.0, 321.0], [1265.0, 404.0], [1253.0, 88.0], [1244.0, 417.0], [1231.0, 499.0], [1338.0, 711.0], [1392.0, 474.5], [1388.0, 615.0], [1396.0, 335.0], [1398.0, 884.0], [1415.0, 581.0], [1457.0, 91.0], [1436.0, 201.0], [1434.0, 238.0], [1421.0, 447.0], [1460.0, 891.5], [1447.0, 894.0], [1486.0, 401.0], [1518.0, 62.5], [1513.0, 108.0], [1582.0, 69.0], [1548.0, 254.0], [1594.0, 459.5], [1583.0, 594.0], [1555.0, 463.0], [1623.0, 71.0], [1612.0, 210.0], [1635.0, 213.0], [1651.0, 468.0], [1614.0, 519.0], [1655.0, 815.0], [1675.0, 646.0], [1671.0, 490.0], [1687.0, 454.0], [1716.0, 852.0], [1701.0, 485.0], [1733.0, 463.0], [1750.0, 68.0], [1773.0, 211.0], [1780.0, 221.0], [1729.0, 471.0], [1772.0, 729.0], [1792.0, 491.0], [1800.0, 488.0], [1823.0, 599.0], [1818.0, 763.0], [1812.0, 677.0], [1805.0, 467.0], [1816.0, 820.0], [1793.0, 450.0], [1854.0, 720.0], [1830.0, 589.0], [1858.0, 102.0], [1892.0, 830.0], [1934.0, 385.0], [1921.0, 471.0], [2012.0, 72.0], [2035.0, 776.0], [2000.0, 885.0], [2111.0, 54.0], [2099.0, 48.0], [2090.0, 610.0], [2175.0, 50.0], [2105.0, 79.0], [2168.0, 82.0], [2166.0, 83.0], [2144.0, 976.0], [2101.0, 120.0], [2053.0, 363.0], [2054.0, 700.0], [2181.0, 113.0], [2216.0, 185.0], [2252.0, 226.0], [2244.0, 749.0], [2211.0, 821.0], [2195.0, 910.0], [2350.0, 457.0], [2414.0, 80.0], [2325.0, 754.0], [2403.0, 590.0], [2405.0, 876.0], [2384.0, 1021.0], [2354.0, 845.0], [2513.0, 773.0], [2605.0, 435.0], [2643.0, 480.0], [2699.0, 509.0], [2845.0, 672.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2168.0, 0.0], [796.0, 0.0], [803.0, 0.0], [53.0, 0.0], [220.0, 0.0], [898.0, 0.0], [897.0, 0.0], [949.0, 0.0], [997.0, 0.0], [1020.0, 0.0], [1102.0, 0.0], [325.0, 0.0], [82.0, 0.0], [84.0, 0.0], [1486.0, 0.0], [1582.0, 0.0], [1623.0, 0.0], [1675.0, 0.0], [1800.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 2845.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 405.0, "minX": 1.68286284E12, "maxY": 1050.0, "series": [{"data": [[1.68286302E12, 750.0], [1.68286284E12, 405.0], [1.68286314E12, 419.1333333333333], [1.68286296E12, 988.0166666666667], [1.68286308E12, 1050.0], [1.6828629E12, 901.9833333333333]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68286314E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.05, "minX": 1.68286284E12, "maxY": 1035.3333333333333, "series": [{"data": [[1.68286302E12, 767.0833333333334], [1.68286284E12, 373.0833333333333], [1.68286314E12, 443.01666666666665], [1.68286296E12, 999.0333333333333], [1.68286326E12, 5.35], [1.68286308E12, 1035.3333333333333], [1.6828629E12, 875.8], [1.6828632E12, 1.9666666666666666]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.68286302E12, 2.2], [1.68286284E12, 1.55], [1.68286314E12, 0.05], [1.68286296E12, 0.75], [1.68286308E12, 2.3666666666666667], [1.6828629E12, 6.55]], "isOverall": false, "label": "Non HTTP response code: java.net.SocketException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68286326E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.05, "minX": 1.68286284E12, "maxY": 1035.3333333333333, "series": [{"data": [[1.68286302E12, 767.0833333333334], [1.68286284E12, 373.0833333333333], [1.68286314E12, 443.01666666666665], [1.68286296E12, 999.0333333333333], [1.68286326E12, 5.35], [1.68286308E12, 1035.3333333333333], [1.6828629E12, 875.8], [1.6828632E12, 1.9666666666666666]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.68286302E12, 2.2], [1.68286284E12, 1.55], [1.68286314E12, 0.05], [1.68286296E12, 0.75], [1.68286308E12, 2.3666666666666667], [1.6828629E12, 6.55]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68286326E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.05, "minX": 1.68286284E12, "maxY": 1035.3333333333333, "series": [{"data": [[1.68286302E12, 767.0833333333334], [1.68286284E12, 373.0833333333333], [1.68286314E12, 443.01666666666665], [1.68286296E12, 999.0333333333333], [1.68286326E12, 5.35], [1.68286308E12, 1035.3333333333333], [1.6828629E12, 875.8], [1.6828632E12, 1.9666666666666666]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.68286302E12, 2.2], [1.68286284E12, 1.55], [1.68286314E12, 0.05], [1.68286296E12, 0.75], [1.68286308E12, 2.3666666666666667], [1.6828629E12, 6.55]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68286326E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

