/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 6.0, "minX": 0.0, "maxY": 198230.0, "series": [{"data": [[0.0, 6.0], [0.1, 31.0], [0.2, 36.0], [0.3, 39.0], [0.4, 41.0], [0.5, 44.0], [0.6, 48.0], [0.7, 49.0], [0.8, 52.0], [0.9, 53.0], [1.0, 56.0], [1.1, 57.0], [1.2, 60.0], [1.3, 61.0], [1.4, 62.0], [1.5, 64.0], [1.6, 67.0], [1.7, 69.0], [1.8, 70.0], [1.9, 72.0], [2.0, 73.0], [2.1, 75.0], [2.2, 76.0], [2.3, 77.0], [2.4, 78.0], [2.5, 80.0], [2.6, 81.0], [2.7, 82.0], [2.8, 83.0], [2.9, 83.0], [3.0, 84.0], [3.1, 85.0], [3.2, 87.0], [3.3, 87.0], [3.4, 88.0], [3.5, 89.0], [3.6, 89.0], [3.7, 90.0], [3.8, 90.0], [3.9, 91.0], [4.0, 91.0], [4.1, 92.0], [4.2, 93.0], [4.3, 94.0], [4.4, 94.0], [4.5, 95.0], [4.6, 96.0], [4.7, 97.0], [4.8, 98.0], [4.9, 99.0], [5.0, 99.0], [5.1, 100.0], [5.2, 102.0], [5.3, 102.0], [5.4, 103.0], [5.5, 103.0], [5.6, 104.0], [5.7, 105.0], [5.8, 105.0], [5.9, 106.0], [6.0, 107.0], [6.1, 107.0], [6.2, 108.0], [6.3, 109.0], [6.4, 110.0], [6.5, 111.0], [6.6, 111.0], [6.7, 112.0], [6.8, 112.0], [6.9, 113.0], [7.0, 114.0], [7.1, 114.0], [7.2, 115.0], [7.3, 115.0], [7.4, 116.0], [7.5, 116.0], [7.6, 117.0], [7.7, 118.0], [7.8, 118.0], [7.9, 119.0], [8.0, 119.0], [8.1, 120.0], [8.2, 120.0], [8.3, 121.0], [8.4, 121.0], [8.5, 122.0], [8.6, 122.0], [8.7, 123.0], [8.8, 123.0], [8.9, 124.0], [9.0, 125.0], [9.1, 125.0], [9.2, 126.0], [9.3, 127.0], [9.4, 127.0], [9.5, 128.0], [9.6, 128.0], [9.7, 129.0], [9.8, 129.0], [9.9, 129.0], [10.0, 130.0], [10.1, 130.0], [10.2, 130.0], [10.3, 131.0], [10.4, 131.0], [10.5, 132.0], [10.6, 132.0], [10.7, 132.0], [10.8, 133.0], [10.9, 133.0], [11.0, 134.0], [11.1, 134.0], [11.2, 134.0], [11.3, 135.0], [11.4, 135.0], [11.5, 136.0], [11.6, 136.0], [11.7, 137.0], [11.8, 138.0], [11.9, 138.0], [12.0, 139.0], [12.1, 140.0], [12.2, 141.0], [12.3, 141.0], [12.4, 142.0], [12.5, 143.0], [12.6, 143.0], [12.7, 143.0], [12.8, 144.0], [12.9, 144.0], [13.0, 144.0], [13.1, 145.0], [13.2, 145.0], [13.3, 145.0], [13.4, 146.0], [13.5, 146.0], [13.6, 147.0], [13.7, 148.0], [13.8, 148.0], [13.9, 149.0], [14.0, 149.0], [14.1, 150.0], [14.2, 150.0], [14.3, 151.0], [14.4, 152.0], [14.5, 152.0], [14.6, 152.0], [14.7, 152.0], [14.8, 153.0], [14.9, 153.0], [15.0, 153.0], [15.1, 154.0], [15.2, 154.0], [15.3, 155.0], [15.4, 155.0], [15.5, 155.0], [15.6, 156.0], [15.7, 156.0], [15.8, 157.0], [15.9, 157.0], [16.0, 158.0], [16.1, 158.0], [16.2, 158.0], [16.3, 159.0], [16.4, 159.0], [16.5, 160.0], [16.6, 160.0], [16.7, 160.0], [16.8, 161.0], [16.9, 161.0], [17.0, 162.0], [17.1, 162.0], [17.2, 162.0], [17.3, 163.0], [17.4, 163.0], [17.5, 164.0], [17.6, 164.0], [17.7, 164.0], [17.8, 165.0], [17.9, 165.0], [18.0, 165.0], [18.1, 166.0], [18.2, 166.0], [18.3, 166.0], [18.4, 166.0], [18.5, 166.0], [18.6, 167.0], [18.7, 167.0], [18.8, 167.0], [18.9, 167.0], [19.0, 168.0], [19.1, 168.0], [19.2, 168.0], [19.3, 169.0], [19.4, 169.0], [19.5, 170.0], [19.6, 170.0], [19.7, 170.0], [19.8, 170.0], [19.9, 171.0], [20.0, 171.0], [20.1, 172.0], [20.2, 172.0], [20.3, 172.0], [20.4, 172.0], [20.5, 173.0], [20.6, 173.0], [20.7, 173.0], [20.8, 173.0], [20.9, 173.0], [21.0, 174.0], [21.1, 174.0], [21.2, 174.0], [21.3, 175.0], [21.4, 175.0], [21.5, 176.0], [21.6, 176.0], [21.7, 176.0], [21.8, 177.0], [21.9, 177.0], [22.0, 178.0], [22.1, 178.0], [22.2, 178.0], [22.3, 178.0], [22.4, 179.0], [22.5, 179.0], [22.6, 179.0], [22.7, 180.0], [22.8, 180.0], [22.9, 180.0], [23.0, 181.0], [23.1, 181.0], [23.2, 181.0], [23.3, 182.0], [23.4, 182.0], [23.5, 183.0], [23.6, 183.0], [23.7, 184.0], [23.8, 184.0], [23.9, 185.0], [24.0, 185.0], [24.1, 186.0], [24.2, 186.0], [24.3, 187.0], [24.4, 187.0], [24.5, 188.0], [24.6, 188.0], [24.7, 189.0], [24.8, 189.0], [24.9, 190.0], [25.0, 190.0], [25.1, 191.0], [25.2, 191.0], [25.3, 191.0], [25.4, 192.0], [25.5, 192.0], [25.6, 192.0], [25.7, 193.0], [25.8, 194.0], [25.9, 194.0], [26.0, 194.0], [26.1, 195.0], [26.2, 195.0], [26.3, 195.0], [26.4, 196.0], [26.5, 196.0], [26.6, 196.0], [26.7, 197.0], [26.8, 197.0], [26.9, 197.0], [27.0, 197.0], [27.1, 198.0], [27.2, 198.0], [27.3, 198.0], [27.4, 198.0], [27.5, 198.0], [27.6, 199.0], [27.7, 199.0], [27.8, 199.0], [27.9, 199.0], [28.0, 199.0], [28.1, 199.0], [28.2, 200.0], [28.3, 200.0], [28.4, 200.0], [28.5, 200.0], [28.6, 200.0], [28.7, 201.0], [28.8, 201.0], [28.9, 201.0], [29.0, 202.0], [29.1, 202.0], [29.2, 202.0], [29.3, 203.0], [29.4, 203.0], [29.5, 204.0], [29.6, 205.0], [29.7, 206.0], [29.8, 206.0], [29.9, 206.0], [30.0, 207.0], [30.1, 207.0], [30.2, 207.0], [30.3, 207.0], [30.4, 208.0], [30.5, 208.0], [30.6, 208.0], [30.7, 208.0], [30.8, 209.0], [30.9, 209.0], [31.0, 209.0], [31.1, 209.0], [31.2, 210.0], [31.3, 210.0], [31.4, 210.0], [31.5, 210.0], [31.6, 210.0], [31.7, 210.0], [31.8, 210.0], [31.9, 211.0], [32.0, 211.0], [32.1, 211.0], [32.2, 211.0], [32.3, 211.0], [32.4, 211.0], [32.5, 211.0], [32.6, 212.0], [32.7, 212.0], [32.8, 212.0], [32.9, 212.0], [33.0, 212.0], [33.1, 212.0], [33.2, 213.0], [33.3, 213.0], [33.4, 213.0], [33.5, 213.0], [33.6, 213.0], [33.7, 213.0], [33.8, 213.0], [33.9, 214.0], [34.0, 214.0], [34.1, 214.0], [34.2, 214.0], [34.3, 214.0], [34.4, 214.0], [34.5, 215.0], [34.6, 215.0], [34.7, 215.0], [34.8, 215.0], [34.9, 215.0], [35.0, 215.0], [35.1, 216.0], [35.2, 216.0], [35.3, 216.0], [35.4, 216.0], [35.5, 216.0], [35.6, 216.0], [35.7, 217.0], [35.8, 217.0], [35.9, 217.0], [36.0, 217.0], [36.1, 217.0], [36.2, 217.0], [36.3, 217.0], [36.4, 217.0], [36.5, 218.0], [36.6, 218.0], [36.7, 218.0], [36.8, 218.0], [36.9, 218.0], [37.0, 218.0], [37.1, 218.0], [37.2, 219.0], [37.3, 219.0], [37.4, 219.0], [37.5, 219.0], [37.6, 219.0], [37.7, 219.0], [37.8, 220.0], [37.9, 220.0], [38.0, 220.0], [38.1, 220.0], [38.2, 220.0], [38.3, 220.0], [38.4, 220.0], [38.5, 221.0], [38.6, 221.0], [38.7, 221.0], [38.8, 221.0], [38.9, 221.0], [39.0, 221.0], [39.1, 221.0], [39.2, 222.0], [39.3, 222.0], [39.4, 222.0], [39.5, 222.0], [39.6, 222.0], [39.7, 222.0], [39.8, 223.0], [39.9, 223.0], [40.0, 223.0], [40.1, 223.0], [40.2, 223.0], [40.3, 224.0], [40.4, 224.0], [40.5, 224.0], [40.6, 224.0], [40.7, 224.0], [40.8, 224.0], [40.9, 225.0], [41.0, 225.0], [41.1, 225.0], [41.2, 225.0], [41.3, 225.0], [41.4, 225.0], [41.5, 225.0], [41.6, 225.0], [41.7, 226.0], [41.8, 226.0], [41.9, 226.0], [42.0, 226.0], [42.1, 226.0], [42.2, 226.0], [42.3, 226.0], [42.4, 226.0], [42.5, 226.0], [42.6, 227.0], [42.7, 227.0], [42.8, 227.0], [42.9, 227.0], [43.0, 227.0], [43.1, 227.0], [43.2, 227.0], [43.3, 227.0], [43.4, 228.0], [43.5, 228.0], [43.6, 228.0], [43.7, 228.0], [43.8, 228.0], [43.9, 228.0], [44.0, 228.0], [44.1, 228.0], [44.2, 228.0], [44.3, 228.0], [44.4, 228.0], [44.5, 229.0], [44.6, 229.0], [44.7, 229.0], [44.8, 229.0], [44.9, 229.0], [45.0, 229.0], [45.1, 229.0], [45.2, 229.0], [45.3, 229.0], [45.4, 229.0], [45.5, 229.0], [45.6, 230.0], [45.7, 230.0], [45.8, 230.0], [45.9, 230.0], [46.0, 230.0], [46.1, 230.0], [46.2, 230.0], [46.3, 230.0], [46.4, 231.0], [46.5, 231.0], [46.6, 231.0], [46.7, 231.0], [46.8, 231.0], [46.9, 231.0], [47.0, 231.0], [47.1, 231.0], [47.2, 231.0], [47.3, 232.0], [47.4, 232.0], [47.5, 232.0], [47.6, 232.0], [47.7, 232.0], [47.8, 232.0], [47.9, 233.0], [48.0, 233.0], [48.1, 233.0], [48.2, 233.0], [48.3, 233.0], [48.4, 233.0], [48.5, 234.0], [48.6, 234.0], [48.7, 234.0], [48.8, 234.0], [48.9, 234.0], [49.0, 235.0], [49.1, 235.0], [49.2, 235.0], [49.3, 235.0], [49.4, 235.0], [49.5, 236.0], [49.6, 236.0], [49.7, 236.0], [49.8, 236.0], [49.9, 236.0], [50.0, 236.0], [50.1, 237.0], [50.2, 237.0], [50.3, 237.0], [50.4, 237.0], [50.5, 238.0], [50.6, 238.0], [50.7, 238.0], [50.8, 238.0], [50.9, 239.0], [51.0, 239.0], [51.1, 239.0], [51.2, 240.0], [51.3, 240.0], [51.4, 240.0], [51.5, 240.0], [51.6, 240.0], [51.7, 241.0], [51.8, 241.0], [51.9, 241.0], [52.0, 241.0], [52.1, 242.0], [52.2, 242.0], [52.3, 242.0], [52.4, 242.0], [52.5, 242.0], [52.6, 243.0], [52.7, 243.0], [52.8, 243.0], [52.9, 243.0], [53.0, 243.0], [53.1, 244.0], [53.2, 244.0], [53.3, 244.0], [53.4, 244.0], [53.5, 245.0], [53.6, 245.0], [53.7, 246.0], [53.8, 246.0], [53.9, 246.0], [54.0, 247.0], [54.1, 247.0], [54.2, 247.0], [54.3, 247.0], [54.4, 248.0], [54.5, 248.0], [54.6, 248.0], [54.7, 248.0], [54.8, 249.0], [54.9, 250.0], [55.0, 250.0], [55.1, 251.0], [55.2, 251.0], [55.3, 251.0], [55.4, 252.0], [55.5, 252.0], [55.6, 252.0], [55.7, 253.0], [55.8, 253.0], [55.9, 253.0], [56.0, 254.0], [56.1, 254.0], [56.2, 255.0], [56.3, 255.0], [56.4, 255.0], [56.5, 256.0], [56.6, 256.0], [56.7, 257.0], [56.8, 257.0], [56.9, 258.0], [57.0, 258.0], [57.1, 259.0], [57.2, 259.0], [57.3, 260.0], [57.4, 260.0], [57.5, 261.0], [57.6, 261.0], [57.7, 262.0], [57.8, 263.0], [57.9, 263.0], [58.0, 264.0], [58.1, 264.0], [58.2, 265.0], [58.3, 266.0], [58.4, 266.0], [58.5, 266.0], [58.6, 267.0], [58.7, 267.0], [58.8, 268.0], [58.9, 268.0], [59.0, 269.0], [59.1, 270.0], [59.2, 272.0], [59.3, 274.0], [59.4, 275.0], [59.5, 276.0], [59.6, 276.0], [59.7, 277.0], [59.8, 277.0], [59.9, 278.0], [60.0, 279.0], [60.1, 280.0], [60.2, 281.0], [60.3, 281.0], [60.4, 282.0], [60.5, 282.0], [60.6, 283.0], [60.7, 284.0], [60.8, 285.0], [60.9, 286.0], [61.0, 286.0], [61.1, 287.0], [61.2, 287.0], [61.3, 288.0], [61.4, 289.0], [61.5, 290.0], [61.6, 295.0], [61.7, 298.0], [61.8, 300.0], [61.9, 301.0], [62.0, 301.0], [62.1, 302.0], [62.2, 303.0], [62.3, 304.0], [62.4, 305.0], [62.5, 307.0], [62.6, 309.0], [62.7, 310.0], [62.8, 311.0], [62.9, 311.0], [63.0, 312.0], [63.1, 312.0], [63.2, 313.0], [63.3, 313.0], [63.4, 315.0], [63.5, 315.0], [63.6, 317.0], [63.7, 318.0], [63.8, 319.0], [63.9, 319.0], [64.0, 320.0], [64.1, 320.0], [64.2, 321.0], [64.3, 322.0], [64.4, 323.0], [64.5, 323.0], [64.6, 324.0], [64.7, 325.0], [64.8, 326.0], [64.9, 328.0], [65.0, 330.0], [65.1, 331.0], [65.2, 332.0], [65.3, 333.0], [65.4, 335.0], [65.5, 336.0], [65.6, 337.0], [65.7, 338.0], [65.8, 338.0], [65.9, 338.0], [66.0, 339.0], [66.1, 340.0], [66.2, 343.0], [66.3, 344.0], [66.4, 346.0], [66.5, 348.0], [66.6, 349.0], [66.7, 350.0], [66.8, 350.0], [66.9, 351.0], [67.0, 352.0], [67.1, 353.0], [67.2, 353.0], [67.3, 354.0], [67.4, 354.0], [67.5, 356.0], [67.6, 357.0], [67.7, 358.0], [67.8, 358.0], [67.9, 358.0], [68.0, 359.0], [68.1, 362.0], [68.2, 362.0], [68.3, 364.0], [68.4, 365.0], [68.5, 366.0], [68.6, 367.0], [68.7, 367.0], [68.8, 367.0], [68.9, 368.0], [69.0, 368.0], [69.1, 369.0], [69.2, 372.0], [69.3, 373.0], [69.4, 373.0], [69.5, 374.0], [69.6, 375.0], [69.7, 376.0], [69.8, 377.0], [69.9, 377.0], [70.0, 378.0], [70.1, 378.0], [70.2, 379.0], [70.3, 379.0], [70.4, 380.0], [70.5, 381.0], [70.6, 381.0], [70.7, 382.0], [70.8, 382.0], [70.9, 382.0], [71.0, 383.0], [71.1, 383.0], [71.2, 383.0], [71.3, 384.0], [71.4, 384.0], [71.5, 385.0], [71.6, 386.0], [71.7, 393.0], [71.8, 395.0], [71.9, 396.0], [72.0, 401.0], [72.1, 402.0], [72.2, 403.0], [72.3, 404.0], [72.4, 405.0], [72.5, 406.0], [72.6, 407.0], [72.7, 408.0], [72.8, 408.0], [72.9, 409.0], [73.0, 413.0], [73.1, 414.0], [73.2, 416.0], [73.3, 416.0], [73.4, 417.0], [73.5, 419.0], [73.6, 421.0], [73.7, 422.0], [73.8, 423.0], [73.9, 424.0], [74.0, 425.0], [74.1, 426.0], [74.2, 427.0], [74.3, 427.0], [74.4, 428.0], [74.5, 428.0], [74.6, 429.0], [74.7, 430.0], [74.8, 431.0], [74.9, 433.0], [75.0, 434.0], [75.1, 435.0], [75.2, 436.0], [75.3, 437.0], [75.4, 438.0], [75.5, 438.0], [75.6, 440.0], [75.7, 441.0], [75.8, 444.0], [75.9, 445.0], [76.0, 446.0], [76.1, 447.0], [76.2, 449.0], [76.3, 454.0], [76.4, 456.0], [76.5, 461.0], [76.6, 463.0], [76.7, 464.0], [76.8, 466.0], [76.9, 468.0], [77.0, 473.0], [77.1, 474.0], [77.2, 482.0], [77.3, 483.0], [77.4, 484.0], [77.5, 485.0], [77.6, 489.0], [77.7, 491.0], [77.8, 492.0], [77.9, 493.0], [78.0, 501.0], [78.1, 503.0], [78.2, 504.0], [78.3, 506.0], [78.4, 516.0], [78.5, 517.0], [78.6, 519.0], [78.7, 529.0], [78.8, 532.0], [78.9, 547.0], [79.0, 549.0], [79.1, 554.0], [79.2, 555.0], [79.3, 556.0], [79.4, 558.0], [79.5, 559.0], [79.6, 571.0], [79.7, 616.0], [79.8, 728.0], [79.9, 985.0], [80.0, 1060.0], [80.1, 1139.0], [80.2, 1263.0], [80.3, 1348.0], [80.4, 1420.0], [80.5, 1483.0], [80.6, 1556.0], [80.7, 1622.0], [80.8, 1646.0], [80.9, 1799.0], [81.0, 1964.0], [81.1, 2033.0], [81.2, 2076.0], [81.3, 2356.0], [81.4, 2571.0], [81.5, 2736.0], [81.6, 2824.0], [81.7, 2870.0], [81.8, 2935.0], [81.9, 3149.0], [82.0, 3424.0], [82.1, 3427.0], [82.2, 3619.0], [82.3, 3736.0], [82.4, 3745.0], [82.5, 3796.0], [82.6, 3895.0], [82.7, 3897.0], [82.8, 3968.0], [82.9, 4023.0], [83.0, 4130.0], [83.1, 4213.0], [83.2, 4227.0], [83.3, 4283.0], [83.4, 4400.0], [83.5, 4564.0], [83.6, 4570.0], [83.7, 4609.0], [83.8, 4614.0], [83.9, 4657.0], [84.0, 4680.0], [84.1, 4684.0], [84.2, 4734.0], [84.3, 4753.0], [84.4, 4757.0], [84.5, 4815.0], [84.6, 4847.0], [84.7, 4852.0], [84.8, 4895.0], [84.9, 4954.0], [85.0, 5012.0], [85.1, 5014.0], [85.2, 5036.0], [85.3, 5192.0], [85.4, 5289.0], [85.5, 5389.0], [85.6, 5644.0], [85.7, 5646.0], [85.8, 5671.0], [85.9, 5739.0], [86.0, 5741.0], [86.1, 5760.0], [86.2, 5776.0], [86.3, 5797.0], [86.4, 5824.0], [86.5, 5877.0], [86.6, 5923.0], [86.7, 5945.0], [86.8, 5961.0], [86.9, 6003.0], [87.0, 6046.0], [87.1, 6081.0], [87.2, 6128.0], [87.3, 6200.0], [87.4, 6229.0], [87.5, 6232.0], [87.6, 6306.0], [87.7, 6367.0], [87.8, 6379.0], [87.9, 6386.0], [88.0, 6421.0], [88.1, 6465.0], [88.2, 6772.0], [88.3, 6778.0], [88.4, 6784.0], [88.5, 6848.0], [88.6, 6914.0], [88.7, 7005.0], [88.8, 7093.0], [88.9, 7213.0], [89.0, 7327.0], [89.1, 7432.0], [89.2, 7440.0], [89.3, 7453.0], [89.4, 7527.0], [89.5, 7589.0], [89.6, 7596.0], [89.7, 7649.0], [89.8, 7683.0], [89.9, 7751.0], [90.0, 7805.0], [90.1, 7853.0], [90.2, 7889.0], [90.3, 7934.0], [90.4, 7993.0], [90.5, 8037.0], [90.6, 8145.0], [90.7, 8320.0], [90.8, 8338.0], [90.9, 8354.0], [91.0, 8427.0], [91.1, 8547.0], [91.2, 8708.0], [91.3, 8759.0], [91.4, 8804.0], [91.5, 8843.0], [91.6, 8886.0], [91.7, 8971.0], [91.8, 9127.0], [91.9, 9163.0], [92.0, 9188.0], [92.1, 9217.0], [92.2, 9414.0], [92.3, 9532.0], [92.4, 9619.0], [92.5, 9679.0], [92.6, 9911.0], [92.7, 10037.0], [92.8, 10050.0], [92.9, 10068.0], [93.0, 10093.0], [93.1, 10094.0], [93.2, 10151.0], [93.3, 10212.0], [93.4, 10213.0], [93.5, 10298.0], [93.6, 10357.0], [93.7, 10774.0], [93.8, 10838.0], [93.9, 10848.0], [94.0, 10931.0], [94.1, 10951.0], [94.2, 10972.0], [94.3, 11161.0], [94.4, 11333.0], [94.5, 11794.0], [94.6, 11927.0], [94.7, 12333.0], [94.8, 12627.0], [94.9, 12744.0], [95.0, 12875.0], [95.1, 12951.0], [95.2, 13043.0], [95.3, 13094.0], [95.4, 13137.0], [95.5, 13143.0], [95.6, 13673.0], [95.7, 13895.0], [95.8, 14086.0], [95.9, 14225.0], [96.0, 14710.0], [96.1, 15346.0], [96.2, 15861.0], [96.3, 16215.0], [96.4, 16724.0], [96.5, 17769.0], [96.6, 19145.0], [96.7, 19496.0], [96.8, 22447.0], [96.9, 24250.0], [97.0, 25427.0], [97.1, 27058.0], [97.2, 27958.0], [97.3, 32174.0], [97.4, 32603.0], [97.5, 33507.0], [97.6, 37132.0], [97.7, 38890.0], [97.8, 41123.0], [97.9, 44348.0], [98.0, 46004.0], [98.1, 53589.0], [98.2, 57505.0], [98.3, 63556.0], [98.4, 64450.0], [98.5, 64984.0], [98.6, 67569.0], [98.7, 73023.0], [98.8, 75921.0], [98.9, 94450.0], [99.0, 100181.0], [99.1, 100251.0], [99.2, 101130.0], [99.3, 103021.0], [99.4, 130890.0], [99.5, 140379.0], [99.6, 147374.0], [99.7, 156590.0], [99.8, 158951.0], [99.9, 161868.0], [100.0, 198230.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 40242.0, "series": [{"data": [[0.0, 6041.0], [148000.0, 1.0], [154400.0, 5.0], [160800.0, 60.0], [136100.0, 1.0], [142500.0, 1.0], [158500.0, 6.0], [168100.0, 58.0], [66700.0, 4.0], [69900.0, 1.0], [74700.0, 1.0], [81100.0, 1.0], [84300.0, 1.0], [101900.0, 9.0], [100300.0, 9.0], [106700.0, 1.0], [130700.0, 1.0], [127500.0, 5.0], [140200.0, 6.0], [143400.0, 21.0], [149800.0, 2.0], [156200.0, 1.0], [159400.0, 1.0], [100.0, 27632.0], [131500.0, 2.0], [32900.0, 8.0], [33700.0, 1.0], [35300.0, 5.0], [36100.0, 1.0], [36900.0, 1.0], [37700.0, 3.0], [38500.0, 6.0], [39300.0, 6.0], [41700.0, 4.0], [45700.0, 5.0], [48900.0, 4.0], [50500.0, 2.0], [200.0, 40242.0], [51300.0, 7.0], [52100.0, 2.0], [54500.0, 2.0], [56900.0, 5.0], [56100.0, 1.0], [58500.0, 2.0], [63300.0, 2.0], [64100.0, 3.0], [64900.0, 12.0], [67400.0, 1.0], [69000.0, 1.0], [65800.0, 1.0], [72200.0, 2.0], [300.0, 12228.0], [73800.0, 3.0], [75400.0, 2.0], [78600.0, 4.0], [83400.0, 1.0], [91400.0, 2.0], [96200.0, 2.0], [97800.0, 3.0], [101000.0, 16.0], [99400.0, 4.0], [400.0, 7143.0], [500.0, 2090.0], [128200.0, 1.0], [129800.0, 5.0], [600.0, 111.0], [151600.0, 1.0], [154800.0, 10.0], [158000.0, 1.0], [161200.0, 5.0], [700.0, 83.0], [800.0, 19.0], [900.0, 58.0], [1000.0, 159.0], [1100.0, 103.0], [1200.0, 112.0], [1300.0, 145.0], [1400.0, 208.0], [1500.0, 131.0], [1600.0, 247.0], [1700.0, 70.0], [1800.0, 77.0], [1900.0, 67.0], [2000.0, 219.0], [2100.0, 73.0], [133300.0, 13.0], [2200.0, 25.0], [142900.0, 1.0], [2300.0, 38.0], [2400.0, 75.0], [2500.0, 47.0], [158900.0, 20.0], [162100.0, 1.0], [2600.0, 64.0], [2800.0, 264.0], [2700.0, 85.0], [2900.0, 81.0], [3000.0, 56.0], [3100.0, 35.0], [3300.0, 36.0], [3200.0, 54.0], [3400.0, 196.0], [3500.0, 50.0], [3600.0, 57.0], [3700.0, 324.0], [3800.0, 271.0], [3900.0, 129.0], [4000.0, 136.0], [4100.0, 121.0], [4200.0, 295.0], [4300.0, 114.0], [68100.0, 2.0], [66500.0, 1.0], [4400.0, 51.0], [4600.0, 623.0], [72900.0, 1.0], [4500.0, 255.0], [69700.0, 1.0], [71300.0, 2.0], [4800.0, 403.0], [4700.0, 358.0], [74500.0, 8.0], [4900.0, 166.0], [5100.0, 74.0], [5000.0, 354.0], [80900.0, 1.0], [5200.0, 126.0], [5300.0, 118.0], [84100.0, 1.0], [5500.0, 12.0], [5600.0, 302.0], [87300.0, 2.0], [5400.0, 54.0], [5800.0, 231.0], [5700.0, 629.0], [6000.0, 353.0], [6100.0, 153.0], [5900.0, 406.0], [6300.0, 411.0], [6200.0, 355.0], [100100.0, 155.0], [6500.0, 11.0], [6400.0, 228.0], [6600.0, 21.0], [103300.0, 12.0], [6700.0, 352.0], [6800.0, 157.0], [6900.0, 136.0], [7000.0, 131.0], [7100.0, 68.0], [7400.0, 392.0], [7200.0, 104.0], [7300.0, 123.0], [7500.0, 265.0], [7600.0, 268.0], [7800.0, 269.0], [7900.0, 219.0], [7700.0, 203.0], [8000.0, 209.0], [8100.0, 63.0], [127300.0, 7.0], [8400.0, 103.0], [8600.0, 55.0], [8200.0, 37.0], [9000.0, 63.0], [9200.0, 107.0], [8800.0, 287.0], [147000.0, 6.0], [9400.0, 130.0], [9600.0, 154.0], [9800.0, 15.0], [10000.0, 581.0], [10200.0, 394.0], [156600.0, 40.0], [163000.0, 4.0], [10400.0, 9.0], [10600.0, 12.0], [10800.0, 252.0], [11000.0, 50.0], [11200.0, 26.0], [11600.0, 3.0], [11400.0, 2.0], [11800.0, 59.0], [12000.0, 20.0], [12200.0, 44.0], [12600.0, 56.0], [12400.0, 29.0], [198200.0, 4.0], [12800.0, 74.0], [13000.0, 214.0], [13200.0, 42.0], [13600.0, 45.0], [13800.0, 75.0], [13400.0, 4.0], [14200.0, 97.0], [14000.0, 53.0], [14600.0, 8.0], [14800.0, 34.0], [15200.0, 9.0], [15000.0, 7.0], [15400.0, 4.0], [15800.0, 20.0], [15600.0, 22.0], [16000.0, 39.0], [16200.0, 28.0], [17200.0, 33.0], [16400.0, 29.0], [16800.0, 2.0], [17600.0, 3.0], [18000.0, 10.0], [18400.0, 3.0], [19200.0, 6.0], [20400.0, 3.0], [19600.0, 9.0], [21200.0, 3.0], [22000.0, 2.0], [22400.0, 22.0], [21600.0, 6.0], [22800.0, 15.0], [23200.0, 4.0], [24000.0, 1.0], [24800.0, 24.0], [25200.0, 4.0], [25600.0, 3.0], [27600.0, 4.0], [27200.0, 31.0], [28400.0, 1.0], [29200.0, 8.0], [30800.0, 7.0], [31600.0, 2.0], [32400.0, 8.0], [32000.0, 1.0], [32800.0, 6.0], [135100.0, 1.0], [35200.0, 1.0], [141500.0, 1.0], [36000.0, 1.0], [154300.0, 1.0], [38400.0, 4.0], [37600.0, 2.0], [40000.0, 4.0], [39200.0, 8.0], [40800.0, 4.0], [41600.0, 1.0], [42400.0, 2.0], [44800.0, 1.0], [46400.0, 2.0], [48800.0, 8.0], [48000.0, 1.0], [50400.0, 2.0], [49600.0, 1.0], [51200.0, 1.0], [55200.0, 3.0], [53600.0, 7.0], [56000.0, 2.0], [57600.0, 9.0], [60000.0, 2.0], [63200.0, 3.0], [61600.0, 2.0], [64800.0, 45.0], [65600.0, 4.0], [72000.0, 2.0], [73600.0, 12.0], [75200.0, 2.0], [83200.0, 1.0], [84800.0, 1.0], [91200.0, 2.0], [92800.0, 1.0], [96000.0, 2.0], [94400.0, 2.0], [100800.0, 2.0], [131200.0, 4.0], [134400.0, 1.0], [147200.0, 1.0], [160000.0, 3.0], [144900.0, 4.0], [151300.0, 1.0], [154500.0, 24.0], [157700.0, 1.0], [67100.0, 5.0], [71900.0, 1.0], [75100.0, 1.0], [81500.0, 1.0], [79900.0, 2.0], [83100.0, 1.0], [86300.0, 1.0], [87900.0, 1.0], [92700.0, 3.0], [94300.0, 2.0], [97500.0, 1.0], [95900.0, 1.0], [139400.0, 6.0], [158600.0, 38.0], [161800.0, 15.0], [33900.0, 2.0], [133900.0, 12.0], [140300.0, 3.0], [143500.0, 24.0], [146700.0, 1.0], [35500.0, 3.0], [36300.0, 2.0], [37100.0, 5.0], [40300.0, 2.0], [39500.0, 17.0], [159500.0, 1.0], [162700.0, 1.0], [41900.0, 3.0], [42700.0, 3.0], [41100.0, 25.0], [44300.0, 10.0], [43500.0, 14.0], [45100.0, 34.0], [45900.0, 18.0], [49100.0, 2.0], [47500.0, 1.0], [52300.0, 2.0], [53100.0, 2.0], [51500.0, 2.0], [54700.0, 2.0], [53900.0, 2.0], [55500.0, 4.0], [56300.0, 5.0], [57900.0, 1.0], [60300.0, 8.0], [59500.0, 2.0], [61900.0, 2.0], [65100.0, 2.0], [64300.0, 13.0], [63500.0, 8.0], [66200.0, 1.0], [69400.0, 1.0], [67800.0, 1.0], [71000.0, 2.0], [74200.0, 12.0], [75800.0, 41.0], [80600.0, 1.0], [79000.0, 2.0], [93400.0, 2.0], [103000.0, 20.0], [141200.0, 16.0], [147600.0, 1.0], [157200.0, 3.0], [148500.0, 1.0], [161300.0, 10.0], [68500.0, 2.0], [71700.0, 2.0], [73300.0, 1.0], [79700.0, 2.0], [81300.0, 1.0], [84500.0, 2.0], [82900.0, 2.0], [87700.0, 1.0], [97300.0, 2.0], [95700.0, 1.0], [100500.0, 2.0], [139800.0, 1.0], [149400.0, 2.0], [152600.0, 1.0], [159000.0, 1.0], [17300.0, 6.0], [16900.0, 7.0], [16500.0, 7.0], [18100.0, 9.0], [17700.0, 28.0], [19300.0, 45.0], [18500.0, 2.0], [20100.0, 1.0], [19700.0, 1.0], [20500.0, 5.0], [20900.0, 3.0], [22500.0, 5.0], [21700.0, 1.0], [23300.0, 11.0], [22900.0, 4.0], [24500.0, 4.0], [24100.0, 2.0], [23700.0, 1.0], [24900.0, 54.0], [26500.0, 17.0], [26100.0, 23.0], [25700.0, 1.0], [27300.0, 14.0], [26900.0, 12.0], [27700.0, 26.0], [28900.0, 4.0], [29300.0, 11.0], [29700.0, 3.0], [31300.0, 7.0], [31700.0, 2.0], [32100.0, 24.0], [32500.0, 88.0], [34600.0, 3.0], [33000.0, 3.0], [36200.0, 2.0], [35400.0, 1.0], [147100.0, 1.0], [38600.0, 6.0], [150300.0, 2.0], [41000.0, 2.0], [45000.0, 12.0], [43400.0, 2.0], [45800.0, 2.0], [46600.0, 1.0], [47400.0, 4.0], [51400.0, 1.0], [54600.0, 3.0], [57000.0, 2.0], [57800.0, 3.0], [58600.0, 1.0], [61000.0, 2.0], [62600.0, 4.0], [64200.0, 2.0], [65000.0, 5.0], [66000.0, 3.0], [67600.0, 29.0], [80400.0, 2.0], [78800.0, 1.0], [82000.0, 2.0], [90000.0, 2.0], [98000.0, 3.0], [101200.0, 22.0], [130000.0, 1.0], [149600.0, 2.0], [156000.0, 1.0], [134500.0, 7.0], [147300.0, 2.0], [150500.0, 2.0], [156900.0, 1.0], [69100.0, 1.0], [67500.0, 15.0], [65900.0, 2.0], [72300.0, 1.0], [70700.0, 2.0], [75500.0, 1.0], [80300.0, 4.0], [81900.0, 1.0], [91500.0, 2.0], [101100.0, 37.0], [129900.0, 5.0], [154600.0, 19.0], [161000.0, 8.0], [133100.0, 1.0], [34100.0, 3.0], [33300.0, 2.0], [35700.0, 2.0], [36500.0, 2.0], [139500.0, 2.0], [34900.0, 8.0], [37300.0, 76.0], [39700.0, 3.0], [161900.0, 9.0], [42900.0, 6.0], [45300.0, 10.0], [50100.0, 2.0], [52500.0, 3.0], [54100.0, 2.0], [53300.0, 3.0], [57300.0, 23.0], [56500.0, 3.0], [58900.0, 11.0], [58100.0, 2.0], [61300.0, 2.0], [60500.0, 2.0], [62100.0, 2.0], [64500.0, 17.0], [63700.0, 4.0], [65300.0, 1.0], [68200.0, 1.0], [66600.0, 3.0], [73000.0, 2.0], [71400.0, 1.0], [69800.0, 1.0], [74600.0, 3.0], [79400.0, 3.0], [85800.0, 2.0], [89000.0, 2.0], [95400.0, 3.0], [100200.0, 103.0], [101800.0, 24.0], [103400.0, 23.0], [127400.0, 2.0], [129000.0, 8.0], [134000.0, 8.0], [140400.0, 1.0], [143600.0, 6.0], [146800.0, 2.0], [156400.0, 4.0], [159600.0, 1.0], [131700.0, 2.0], [141300.0, 14.0], [144500.0, 1.0], [157300.0, 12.0], [160500.0, 3.0], [65700.0, 5.0], [68900.0, 1.0], [67300.0, 1.0], [70500.0, 1.0], [72100.0, 2.0], [80100.0, 1.0], [99300.0, 10.0], [104100.0, 9.0], [110500.0, 1.0], [8700.0, 233.0], [8300.0, 375.0], [8500.0, 97.0], [9100.0, 337.0], [8900.0, 112.0], [9500.0, 134.0], [9300.0, 37.0], [9700.0, 13.0], [151800.0, 2.0], [9900.0, 118.0], [10100.0, 160.0], [10300.0, 23.0], [10700.0, 135.0], [10500.0, 3.0], [10900.0, 322.0], [11100.0, 72.0], [11700.0, 80.0], [11300.0, 125.0], [11500.0, 4.0], [11900.0, 68.0], [12100.0, 15.0], [12700.0, 136.0], [12300.0, 62.0], [12500.0, 18.0], [12900.0, 188.0], [13100.0, 237.0], [13300.0, 4.0], [13500.0, 4.0], [13700.0, 25.0], [13900.0, 62.0], [14100.0, 88.0], [14300.0, 30.0], [14500.0, 5.0], [14700.0, 25.0], [14900.0, 6.0], [15300.0, 10.0], [15100.0, 39.0], [15500.0, 71.0], [15700.0, 11.0], [16100.0, 44.0], [16300.0, 12.0], [15900.0, 11.0], [16600.0, 14.0], [17400.0, 9.0], [17000.0, 6.0], [17800.0, 4.0], [18200.0, 18.0], [19400.0, 49.0], [18600.0, 5.0], [19000.0, 1.0], [19800.0, 19.0], [20200.0, 15.0], [21000.0, 4.0], [20600.0, 5.0], [21400.0, 1.0], [21800.0, 2.0], [22200.0, 2.0], [22600.0, 2.0], [23000.0, 1.0], [23400.0, 6.0], [24200.0, 9.0], [23800.0, 35.0], [25000.0, 11.0], [25400.0, 7.0], [25800.0, 3.0], [26200.0, 25.0], [26600.0, 3.0], [27400.0, 8.0], [27000.0, 18.0], [27800.0, 4.0], [28200.0, 2.0], [29400.0, 9.0], [29000.0, 4.0], [29800.0, 5.0], [32600.0, 7.0], [32200.0, 9.0], [31800.0, 2.0], [33200.0, 59.0], [34800.0, 6.0], [35600.0, 8.0], [36400.0, 19.0], [38800.0, 7.0], [37200.0, 2.0], [149500.0, 5.0], [40400.0, 2.0], [42800.0, 44.0], [44400.0, 10.0], [43600.0, 4.0], [45200.0, 2.0], [46800.0, 1.0], [46000.0, 1.0], [48400.0, 2.0], [49200.0, 5.0], [53200.0, 2.0], [52400.0, 1.0], [51600.0, 3.0], [57200.0, 2.0], [55600.0, 2.0], [58000.0, 1.0], [60400.0, 5.0], [65200.0, 24.0], [63600.0, 8.0], [64400.0, 96.0], [69600.0, 3.0], [66400.0, 1.0], [72800.0, 3.0], [71200.0, 2.0], [74400.0, 7.0], [80800.0, 2.0], [79200.0, 2.0], [87200.0, 1.0], [88800.0, 1.0], [96800.0, 2.0], [100000.0, 2.0], [98400.0, 1.0], [136000.0, 1.0], [132800.0, 1.0], [168000.0, 6.0], [140100.0, 2.0], [156100.0, 4.0], [162500.0, 2.0], [67900.0, 14.0], [69500.0, 1.0], [71100.0, 19.0], [72700.0, 3.0], [74300.0, 15.0], [75900.0, 16.0], [77500.0, 2.0], [80700.0, 2.0], [88700.0, 4.0], [93500.0, 1.0], [128700.0, 5.0], [130300.0, 2.0], [134600.0, 8.0], [150600.0, 1.0], [157000.0, 1.0], [33500.0, 29.0], [132300.0, 10.0], [34300.0, 2.0], [36700.0, 3.0], [35900.0, 4.0], [141900.0, 8.0], [35100.0, 1.0], [37500.0, 2.0], [154700.0, 2.0], [38300.0, 9.0], [40700.0, 2.0], [39900.0, 28.0], [39100.0, 15.0], [161100.0, 9.0], [41500.0, 3.0], [42300.0, 2.0], [43900.0, 2.0], [44700.0, 2.0], [51100.0, 6.0], [49500.0, 1.0], [53500.0, 27.0], [55100.0, 1.0], [55900.0, 2.0], [57500.0, 50.0], [61500.0, 1.0], [65500.0, 3.0], [64700.0, 8.0], [63900.0, 1.0], [67000.0, 34.0], [68600.0, 2.0], [71800.0, 1.0], [75000.0, 2.0], [79800.0, 3.0], [81400.0, 1.0], [83000.0, 1.0], [86200.0, 3.0], [87800.0, 12.0], [97400.0, 1.0], [99000.0, 2.0], [100600.0, 1.0], [131000.0, 6.0], [133200.0, 8.0], [155600.0, 1.0], [146900.0, 9.0], [156500.0, 16.0], [66100.0, 4.0], [72500.0, 1.0], [85300.0, 1.0], [91700.0, 2.0], [93300.0, 2.0], [94900.0, 2.0], [96500.0, 1.0], [106100.0, 12.0], [130100.0, 4.0], [135000.0, 3.0], [160600.0, 2.0], [17100.0, 16.0], [16700.0, 57.0], [18300.0, 4.0], [17500.0, 12.0], [17900.0, 14.0], [18700.0, 1.0], [19100.0, 62.0], [19900.0, 7.0], [19500.0, 4.0], [20300.0, 6.0], [20700.0, 6.0], [21500.0, 1.0], [23100.0, 2.0], [22700.0, 2.0], [23900.0, 9.0], [24300.0, 8.0], [25100.0, 5.0], [25500.0, 6.0], [24700.0, 1.0], [26300.0, 4.0], [27100.0, 16.0], [26700.0, 7.0], [27500.0, 3.0], [27900.0, 10.0], [28700.0, 2.0], [29100.0, 8.0], [29500.0, 1.0], [29900.0, 2.0], [30300.0, 5.0], [31500.0, 7.0], [32300.0, 7.0], [31900.0, 1.0], [32700.0, 26.0], [34200.0, 3.0], [33400.0, 12.0], [132700.0, 1.0], [135900.0, 3.0], [35000.0, 6.0], [151900.0, 10.0], [39000.0, 7.0], [43000.0, 12.0], [167900.0, 28.0], [42200.0, 2.0], [41400.0, 2.0], [43800.0, 2.0], [45400.0, 19.0], [47000.0, 1.0], [47800.0, 3.0], [49400.0, 3.0], [51800.0, 2.0], [53400.0, 12.0], [55800.0, 33.0], [57400.0, 8.0], [59800.0, 2.0], [63800.0, 3.0], [64600.0, 26.0], [68400.0, 2.0], [66800.0, 1.0], [76400.0, 2.0], [79600.0, 1.0], [78000.0, 1.0], [81200.0, 1.0], [92400.0, 2.0], [100400.0, 19.0], [102000.0, 20.0], [129200.0, 3.0], [127600.0, 1.0], [130800.0, 15.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 198200.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 119.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 93300.0, "series": [{"data": [[0.0, 93300.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 3076.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 23184.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 119.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 391.5131578947369, "minX": 1.68286098E12, "maxY": 3000.0, "series": [{"data": [[1.6828611E12, 3000.0], [1.68286104E12, 3000.0], [1.68286122E12, 3000.0], [1.68286116E12, 3000.0], [1.68286134E12, 391.5131578947369], [1.68286128E12, 2692.891106906345], [1.68286098E12, 3000.0]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68286134E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 83.0, "minX": 354.0, "maxY": 64637.0, "series": [{"data": [[366.0, 58579.0], [367.0, 58577.0], [365.0, 59587.0], [364.0, 59589.0], [363.0, 60596.0], [362.0, 60599.0], [361.0, 61606.0], [360.0, 61608.0], [359.0, 62616.0], [355.0, 64634.0], [354.0, 64637.0], [358.0, 62618.0], [357.0, 63626.0], [356.0, 63627.0], [382.0, 50502.0], [383.0, 50499.0], [381.0, 51507.0], [380.0, 51511.0], [379.0, 52519.0], [378.0, 52519.0], [377.0, 53529.0], [376.0, 53530.0], [375.0, 54535.0], [369.0, 57570.5], [371.0, 56559.0], [370.0, 56557.0], [374.0, 54540.0], [373.0, 55548.0], [372.0, 55549.0], [398.0, 42426.0], [399.0, 42423.0], [397.0, 43432.0], [396.0, 43434.0], [395.0, 44443.0], [394.0, 44445.0], [393.0, 45453.0], [392.0, 45453.0], [391.0, 46460.0], [385.0, 49490.0], [384.0, 49490.0], [387.0, 48480.0], [386.0, 48484.0], [390.0, 46463.0], [389.0, 47470.0], [388.0, 47471.0], [414.0, 34348.0], [415.0, 34347.0], [413.0, 35355.0], [412.0, 35355.0], [411.0, 36366.0], [410.0, 36367.0], [409.0, 37376.0], [408.0, 37378.0], [407.0, 38385.0], [401.0, 41414.0], [400.0, 41415.0], [403.0, 40404.0], [402.0, 40405.0], [406.0, 38384.0], [405.0, 39395.0], [404.0, 39397.0], [430.0, 26269.0], [431.0, 26270.0], [429.0, 27277.0], [428.0, 27282.0], [427.0, 28288.0], [426.0, 28291.0], [425.0, 29297.0], [424.0, 29301.0], [423.0, 30309.0], [417.0, 33337.0], [416.0, 33336.0], [419.0, 32328.0], [418.0, 32329.0], [422.0, 30309.0], [421.0, 31315.0], [420.0, 31320.0], [446.0, 18190.0], [447.0, 18191.0], [445.0, 19198.0], [444.0, 19201.0], [443.0, 20208.0], [442.0, 20211.0], [441.0, 21217.0], [440.0, 21220.0], [439.0, 22228.0], [433.0, 25259.0], [432.0, 25261.0], [435.0, 24250.0], [434.0, 24253.0], [438.0, 22231.0], [437.0, 23239.0], [436.0, 23242.0], [462.0, 16509.0], [463.0, 16493.0], [461.0, 16526.0], [460.0, 16528.0], [459.0, 16529.0], [458.0, 16526.0], [457.0, 16531.0], [456.0, 16530.0], [455.0, 14151.0], [449.0, 17178.0], [448.0, 17182.0], [451.0, 16168.0], [450.0, 16171.0], [454.0, 14151.0], [453.0, 15161.0], [452.0, 15160.0], [478.0, 4132.0], [479.0, 4131.0], [476.0, 4133.0], [467.0, 13084.0], [466.0, 13085.0], [465.0, 16470.0], [464.0, 16484.0], [475.0, 4133.0], [473.0, 4133.0], [472.0, 4134.0], [471.0, 4134.0], [470.0, 4134.0], [469.0, 11348.0], [468.0, 11351.0], [494.0, 13748.0], [495.0, 4121.0], [493.0, 4123.0], [492.0, 13749.0], [491.0, 4123.0], [490.0, 4123.0], [489.0, 4124.0], [488.0, 4125.0], [487.0, 4126.0], [480.0, 4131.0], [482.0, 4130.0], [481.0, 4131.0], [486.0, 4128.0], [485.0, 4128.0], [484.0, 4129.5], [499.0, 13748.0], [511.0, 13742.5], [509.0, 13742.5], [498.0, 8934.0], [496.0, 4120.0], [507.0, 13743.0], [506.0, 8931.5], [504.0, 4117.0], [503.0, 4118.0], [502.0, 4118.0], [501.0, 4118.0], [500.0, 4119.0], [540.0, 13648.0], [543.0, 13646.0], [528.0, 13696.0], [531.0, 13692.0], [530.0, 13694.0], [533.0, 10313.0], [532.0, 10313.0], [542.0, 13646.0], [541.0, 13648.0], [539.0, 13652.0], [538.0, 13652.0], [537.0, 13655.0], [536.0, 13656.0], [527.0, 13697.0], [513.0, 13741.5], [517.0, 13738.0], [515.0, 13739.5], [519.0, 13731.0], [518.0, 13739.0], [526.0, 13698.0], [525.0, 13702.0], [524.0, 13703.0], [523.0, 13713.0], [522.0, 13715.0], [521.0, 13714.0], [520.0, 13729.0], [535.0, 13673.0], [534.0, 13673.0], [570.0, 9683.5], [562.0, 10240.0], [572.0, 9682.0], [574.0, 8080.5], [561.0, 10239.0], [560.0, 10244.0], [571.0, 9683.0], [568.0, 9684.0], [551.0, 10258.0], [550.0, 10259.0], [549.0, 10260.0], [548.0, 13636.0], [547.0, 13640.0], [546.0, 13640.0], [545.0, 13641.0], [544.0, 13645.0], [559.0, 10243.0], [558.0, 10245.0], [557.0, 10248.0], [556.0, 10248.0], [555.0, 10253.0], [554.0, 10255.0], [553.0, 10256.0], [552.0, 10256.0], [566.0, 9686.0], [565.0, 9684.5], [563.0, 10239.0], [600.0, 9675.5], [606.0, 9675.0], [607.0, 8073.0], [604.0, 9676.0], [602.0, 9676.0], [601.0, 13047.0], [591.0, 6475.0], [577.0, 9681.5], [576.0, 9681.0], [580.0, 8077.5], [578.0, 9681.0], [583.0, 9680.0], [581.0, 9682.0], [590.0, 8077.0], [588.0, 9679.0], [587.0, 9680.0], [585.0, 9680.0], [584.0, 8077.5], [598.0, 9676.0], [597.0, 9676.5], [595.0, 8075.5], [593.0, 8076.5], [632.0, 8066.0], [638.0, 6462.666666666667], [639.0, 9667.0], [624.0, 9671.0], [626.0, 6465.0], [625.0, 9669.0], [635.0, 6464.0], [634.0, 9668.0], [633.0, 6465.0], [623.0, 9670.5], [608.0, 9675.0], [611.0, 9673.0], [610.0, 9674.5], [613.0, 9672.0], [612.0, 9674.0], [615.0, 9673.0], [614.0, 9672.0], [621.0, 13042.0], [620.0, 9671.0], [619.0, 9755.0], [617.0, 6467.0], [616.0, 9673.0], [631.0, 6465.0], [630.0, 6465.0], [629.0, 9669.0], [628.0, 6466.0], [665.0, 6454.0], [659.0, 9659.0], [671.0, 8054.5], [669.0, 6454.0], [666.0, 6453.0], [655.0, 6457.0], [640.0, 9665.0], [645.0, 9665.333333333334], [642.0, 9666.5], [647.0, 9664.0], [646.0, 6461.0], [654.0, 8059.5], [652.0, 13032.0], [651.0, 9662.0], [650.0, 9662.0], [649.0, 6458.0], [648.0, 9664.0], [663.0, 9659.0], [662.0, 9658.0], [660.0, 6455.0], [658.0, 9743.5], [656.0, 6457.0], [696.0, 13007.0], [701.0, 6431.0], [703.0, 8033.0], [689.0, 7504.333333333333], [700.0, 6431.0], [699.0, 9636.0], [697.0, 6431.0], [686.0, 8039.5], [672.0, 6452.0], [675.0, 6441.0], [673.0, 6452.0], [677.0, 6440.0], [676.0, 8042.5], [679.0, 6438.0], [678.0, 6439.0], [684.0, 9642.0], [683.0, 6437.5], [681.0, 9643.0], [680.0, 6440.0], [695.0, 9720.0], [693.0, 8035.0], [691.0, 6435.0], [690.0, 9640.0], [734.0, 6404.5], [735.0, 9609.0], [720.0, 9626.0], [722.0, 9623.0], [721.0, 6420.0], [732.0, 6405.0], [731.0, 9610.0], [730.0, 6406.0], [728.0, 6411.0], [719.0, 8022.0], [705.0, 9634.0], [708.0, 6428.0], [707.0, 6429.5], [711.0, 8024.5], [709.0, 9627.0], [717.0, 8023.0], [715.0, 6422.0], [714.0, 6422.0], [713.0, 8024.5], [727.0, 6419.0], [726.0, 9706.0], [725.0, 9622.0], [724.0, 9624.0], [764.0, 6378.0], [755.0, 6382.0], [766.0, 6378.333333333333], [752.0, 6387.0], [754.0, 6387.0], [753.0, 6388.0], [763.0, 9585.0], [762.0, 6380.0], [760.0, 6380.0], [742.0, 6395.0], [741.0, 6396.0], [740.0, 9607.0], [739.0, 8004.5], [738.0, 6403.5], [736.0, 6404.0], [750.0, 6388.0], [749.0, 6394.0], [747.0, 6393.0], [746.0, 7997.0], [745.0, 6395.0], [744.0, 9599.0], [759.0, 6381.5], [757.0, 6381.0], [756.0, 6382.0], [793.0, 6343.5], [797.0, 6342.0], [799.0, 6342.0], [784.0, 6348.0], [786.0, 6346.0], [785.0, 6348.0], [796.0, 6342.0], [795.0, 6342.0], [794.0, 6342.0], [783.0, 6348.0], [769.0, 6372.0], [768.0, 6378.5], [772.0, 6365.0], [771.0, 7973.5], [774.0, 6364.0], [773.0, 9569.0], [782.0, 6354.0], [781.0, 9560.0], [780.0, 9565.0], [779.0, 9566.0], [778.0, 6363.0], [777.0, 6363.0], [776.0, 6362.5], [791.0, 6344.0], [790.0, 6345.0], [789.0, 6345.5], [787.0, 6345.0], [828.0, 6262.0], [831.0, 6261.0], [816.0, 7915.0], [818.0, 6268.0], [817.0, 6312.0], [830.0, 9465.0], [829.0, 9466.0], [827.0, 6262.0], [826.0, 6265.0], [825.0, 6265.0], [824.0, 6264.5], [814.0, 6313.0], [801.0, 6335.0], [800.0, 6340.0], [806.0, 6327.666666666667], [803.0, 6333.5], [813.0, 6325.666666666667], [811.0, 6326.0], [809.0, 6325.0], [808.0, 6327.0], [822.0, 6266.0], [820.0, 7868.0], [856.0, 9431.0], [861.0, 12796.0], [862.0, 9426.0], [849.0, 6234.0], [848.0, 6235.0], [860.0, 6226.5], [858.0, 6227.0], [857.0, 6228.0], [847.0, 6236.0], [834.0, 9464.0], [833.0, 6259.5], [836.0, 6259.0], [835.0, 6259.0], [839.0, 6256.0], [837.0, 6258.0], [846.0, 6234.0], [844.0, 9447.0], [843.0, 7852.5], [841.0, 6252.0], [840.0, 6254.0], [855.0, 9515.5], [853.0, 6229.0], [852.0, 12805.0], [851.0, 6230.5], [889.0, 6209.0], [893.0, 12783.0], [894.0, 9411.0], [880.0, 9417.5], [884.0, 9498.0], [882.0, 7815.0], [892.0, 6209.0], [891.0, 6210.0], [890.0, 9414.0], [888.0, 9415.5], [871.0, 7818.0], [870.0, 6218.0], [868.0, 7820.0], [866.0, 6219.0], [865.0, 8355.666666666666], [879.0, 9417.0], [877.0, 9418.0], [876.0, 7817.0], [874.0, 9420.0], [872.0, 6215.0], [886.0, 9416.0], [885.0, 9415.0], [921.0, 9391.0], [926.0, 9374.0], [927.0, 12744.0], [912.0, 6189.0], [915.0, 9393.0], [913.0, 9393.0], [925.0, 9388.5], [923.0, 9390.0], [922.0, 9391.0], [920.0, 6187.0], [902.0, 11095.0], [900.0, 7808.0], [898.0, 12782.0], [897.0, 6207.0], [896.0, 7809.5], [911.0, 9395.0], [910.0, 6190.5], [908.0, 7260.0], [905.0, 9397.0], [904.0, 7795.5], [919.0, 9392.0], [917.0, 9475.5], [953.0, 9204.0], [958.0, 5833.0], [959.0, 9207.0], [945.0, 6245.0], [944.0, 6245.0], [947.0, 6242.0], [946.0, 9615.0], [949.0, 6240.0], [948.0, 6241.0], [957.0, 9209.0], [956.0, 9202.0], [955.0, 9202.5], [952.0, 5834.0], [935.0, 11714.0], [934.0, 11714.0], [933.0, 9334.0], [932.0, 9335.0], [931.0, 9455.0], [929.0, 6169.5], [943.0, 6246.0], [941.0, 7301.0], [940.0, 7303.0], [939.0, 7308.0], [938.0, 7312.0], [937.0, 8318.0], [936.0, 8321.0], [951.0, 9608.0], [950.0, 6239.0], [984.0, 17595.0], [988.0, 9200.0], [991.0, 29364.0], [976.0, 9203.0], [980.0, 8077.333333333333], [977.0, 9201.0], [990.0, 9194.0], [989.0, 9200.0], [987.0, 9201.0], [986.0, 9197.0], [985.0, 9201.0], [975.0, 9202.5], [960.0, 9207.0], [962.0, 9206.0], [961.0, 9207.0], [964.0, 9205.0], [963.0, 9199.0], [967.0, 19287.0], [966.0, 5831.0], [973.0, 9204.0], [972.0, 9204.0], [971.0, 9203.5], [969.0, 9201.0], [968.0, 9205.0], [982.0, 9201.0], [981.0, 9198.0], [1018.0, 9193.0], [1010.0, 21025.0], [1021.0, 9192.0], [1023.0, 9190.0], [1008.0, 9195.0], [1020.0, 9191.5], [1017.0, 21107.0], [999.0, 9197.0], [998.0, 7510.0], [996.0, 9197.0], [995.0, 9198.0], [994.0, 9200.0], [993.0, 9199.0], [992.0, 5824.0], [1007.0, 9192.5], [1005.0, 9196.0], [1004.0, 16688.0], [1002.0, 9193.0], [1001.0, 9197.5], [1015.0, 9192.5], [1013.0, 16685.0], [1011.0, 9193.0], [1072.0, 9178.0], [1080.0, 33003.0], [1084.0, 9173.0], [1056.0, 9180.5], [1062.0, 9176.0], [1058.0, 5806.0], [1078.0, 9174.5], [1076.0, 9170.0], [1074.0, 29340.0], [1054.0, 9178.0], [1028.0, 9190.0], [1024.0, 9191.0], [1034.0, 5813.0], [1030.0, 9186.5], [1038.0, 9187.0], [1036.0, 19360.5], [1052.0, 19262.5], [1050.0, 9183.0], [1044.0, 9184.0], [1042.0, 9185.0], [1040.0, 9186.0], [1070.0, 9178.5], [1068.0, 9178.0], [1066.0, 9177.0], [1064.0, 9178.0], [1124.0, 9158.0], [1150.0, 10042.0], [1146.0, 9151.0], [1144.0, 7466.0], [1138.0, 17041.333333333332], [1118.0, 9158.0], [1094.0, 9170.0], [1088.0, 9171.0], [1098.0, 9167.5], [1096.0, 29332.0], [1102.0, 9168.0], [1100.0, 9163.0], [1116.0, 9161.0], [1114.0, 9161.0], [1110.0, 9163.0], [1106.0, 9165.0], [1134.0, 9154.0], [1128.0, 9156.0], [1126.0, 9158.0], [1120.0, 9159.0], [1208.0, 9134.0], [1186.0, 19223.0], [1188.0, 9140.0], [1194.0, 8464.8], [1198.0, 9136.0], [1212.0, 9131.333333333334], [1206.0, 29298.0], [1204.0, 9137.0], [1202.0, 7449.25], [1166.0, 9148.0], [1164.0, 9144.0], [1160.0, 9148.666666666666], [1156.0, 9743.333333333334], [1178.0, 5770.0], [1176.0, 9144.5], [1170.0, 32976.0], [1168.0, 10927.0], [1276.0, 9087.0], [1278.0, 29250.0], [1248.0, 19203.5], [1252.0, 9121.0], [1250.0, 9121.0], [1254.0, 9116.0], [1256.0, 9101.0], [1258.0, 9103.0], [1262.0, 32763.0], [1272.0, 9092.0], [1270.0, 29438.0], [1266.0, 9101.0], [1264.0, 32929.0], [1246.0, 9118.0], [1220.0, 9128.0], [1222.0, 9129.0], [1230.0, 19207.5], [1244.0, 7996.666666666667], [1238.0, 9123.5], [1236.0, 19207.5], [1234.0, 21041.0], [1332.0, 8974.0], [1338.0, 9859.5], [1312.0, 9016.0], [1316.0, 9010.5], [1314.0, 9017.0], [1318.0, 9007.0], [1324.0, 9003.666666666666], [1326.0, 8984.0], [1336.0, 8974.5], [1334.0, 8976.0], [1330.0, 10762.0], [1328.0, 10761.0], [1294.0, 9063.5], [1292.0, 9068.0], [1290.0, 10854.0], [1288.0, 10857.0], [1286.0, 32823.0], [1284.0, 29426.0], [1282.0, 9083.0], [1280.0, 20914.5], [1310.0, 10806.0], [1308.0, 7902.666666666667], [1306.0, 9025.0], [1304.0, 9032.0], [1302.0, 9030.0], [1300.0, 9038.5], [1298.0, 10820.0], [1296.0, 9064.0], [1378.0, 10698.0], [1376.0, 8917.0], [1382.0, 20829.0], [1380.0, 8915.0], [1384.0, 8914.0], [1386.0, 18090.0], [1388.0, 29075.0], [1392.0, 8900.0], [1348.0, 8938.0], [1350.0, 20849.5], [1354.0, 8930.5], [1352.0, 8934.0], [1356.0, 8926.0], [1358.0, 8929.0], [1374.0, 8920.0], [1372.0, 27278.0], [1370.0, 8922.5], [1368.0, 15041.666666666666], [1362.0, 8922.5], [1360.0, 8928.0], [1390.0, 8909.0], [1420.0, 27239.0], [1460.0, 8758.0], [1456.0, 8756.0], [1422.0, 8882.0], [1418.0, 8883.0], [1414.0, 18968.5], [1408.0, 8888.0], [1430.0, 8876.0], [1428.0, 8876.0], [1426.0, 8879.0], [1424.0, 8880.0], [1452.0, 5388.0], [1450.0, 8759.0], [1448.0, 7635.666666666667], [1446.0, 8761.0], [1482.0, 8755.0], [1516.0, 10491.0], [1510.0, 8757.0], [1506.0, 8758.0], [1472.0, 8757.0], [1502.0, 8383.0], [1498.0, 7629.0], [1496.0, 8757.5], [1494.0, 8756.2], [1492.0, 14878.333333333334], [1488.0, 7070.5], [1660.0, 287.6923076923077], [1658.0, 289.33333333333326], [1656.0, 288.58333333333337], [1630.0, 292.0], [1662.0, 288.16666666666663], [1640.0, 290.0], [1676.0, 287.3636363636364], [1702.0, 224.0], [1704.0, 222.42857142857142], [1700.0, 224.0], [1674.0, 288.55555555555554], [1672.0, 288.0], [1670.0, 288.2], [1668.0, 288.6666666666667], [1664.0, 288.0], [1666.0, 288.09090909090907], [1786.0, 149.33333333333334], [1790.0, 148.33333333333334], [1788.0, 149.0], [1782.0, 200.77777777777777], [1776.0, 201.76470588235293], [1852.0, 5612.0], [1828.0, 2150.0], [1824.0, 3425.0], [1826.0, 3159.0], [1830.0, 1091.0], [1836.0, 8884.0], [1850.0, 8881.0], [1848.0, 8882.0], [1844.0, 8881.5], [1842.0, 8883.0], [1822.0, 83.0], [1798.0, 136.66666666666666], [1796.0, 136.66666666666666], [1820.0, 84.66666666666667], [1816.0, 86.0], [1810.0, 134.5], [1914.0, 8841.0], [1888.0, 8863.0], [1890.0, 8861.0], [1896.0, 8859.0], [1898.0, 8859.0], [1902.0, 8849.0], [1912.0, 8842.0], [1910.0, 8844.0], [1906.0, 8848.0], [1870.0, 8870.0], [1868.0, 8872.0], [1866.0, 8873.0], [1864.0, 8875.0], [1862.0, 8877.0], [1860.0, 8877.0], [1884.0, 8865.0], [1880.0, 8867.0], [1876.0, 5601.0], [1872.0, 8871.5], [1974.0, 8775.0], [1958.0, 8791.0], [1982.0, 8768.0], [1954.0, 8804.5], [1956.0, 8796.0], [1960.0, 8788.0], [1962.0, 8786.0], [1964.0, 8780.0], [1980.0, 8770.0], [1976.0, 8774.0], [1972.0, 8777.0], [1968.0, 8780.0], [1922.0, 8837.0], [1924.0, 8833.0], [1926.0, 8833.0], [1928.0, 8829.0], [1950.0, 8807.5], [1948.0, 8808.0], [1944.0, 8809.0], [1942.0, 8810.0], [1940.0, 8813.0], [2044.0, 12558.0], [2046.0, 8396.5], [2018.0, 9076.5], [2016.0, 8731.0], [2022.0, 9423.0], [2026.0, 8729.0], [2034.0, 8700.0], [2032.0, 8703.0], [2014.0, 9087.5], [1984.0, 8767.0], [1988.0, 8762.0], [1986.0, 8766.0], [1990.0, 8759.0], [2012.0, 9436.0], [2010.0, 8748.0], [2008.0, 8752.5], [2004.0, 8754.0], [2002.0, 8755.0], [2000.0, 8755.0], [2064.0, 8388.5], [2068.0, 7805.0], [2140.0, 8845.0], [2072.0, 8383.5], [2060.0, 8971.0], [2056.0, 7813.0], [2048.0, 7817.0], [2108.0, 8348.5], [2104.0, 7770.0], [2100.0, 7774.0], [2096.0, 8939.0], [2092.0, 10977.5], [2084.0, 7792.0], [2080.0, 8955.0], [2136.0, 7692.0], [2132.0, 7696.5], [2120.0, 8339.5], [2116.0, 8920.0], [2112.0, 8347.5], [2420.0, 429.6], [2428.0, 428.5], [2392.0, 433.6], [2396.0, 430.6666666666667], [2416.0, 430.375], [2412.0, 430.1666666666667], [2408.0, 433.0], [2404.0, 431.2857142857143], [2400.0, 431.25], [2548.0, 10389.0], [2496.0, 8817.666666666666], [2500.0, 6135.0], [2504.0, 8162.5], [2524.0, 7192.25], [2556.0, 6081.0], [2540.0, 6096.0], [2536.0, 6104.0], [2532.0, 6116.0], [2528.0, 10136.5], [2452.0, 6154.0], [2448.0, 6154.0], [2480.0, 6146.0], [2476.0, 6146.0], [2464.0, 6148.0], [2656.0, 6002.0], [2680.0, 5992.0], [2628.0, 8714.0], [2632.0, 10100.0], [2640.0, 10041.0], [2644.0, 6010.0], [2684.0, 5987.0], [2668.0, 5999.0], [2664.0, 6000.0], [2660.0, 6000.0], [2588.0, 6058.0], [2584.0, 6059.0], [2580.0, 10082.5], [2576.0, 6068.0], [2572.0, 14109.0], [2568.0, 6071.0], [2564.0, 7094.0], [2620.0, 6036.0], [2616.0, 6037.0], [2608.0, 6045.0], [2600.0, 6048.0], [2596.0, 8735.0], [2688.0, 8665.0], [2720.0, 8594.0], [2716.0, 5942.5], [2940.0, 209.0], [2936.0, 210.0], [2884.0, 213.0], [2888.0, 213.2], [2892.0, 213.0], [2896.0, 213.0], [2928.0, 210.1818181818182], [2924.0, 211.0], [2920.0, 211.0], [2916.0, 212.0], [2912.0, 212.14285714285714], [3000.0, 3788.0190582001724], [2988.0, 156.0], [2944.0, 209.0], [2968.0, 202.0], [2972.0, 201.0], [2984.0, 158.0], [2980.0, 159.0], [2065.0, 8967.0], [2145.0, 6919.0], [2077.0, 8378.5], [2073.0, 7803.0], [2061.0, 7811.0], [2057.0, 8972.0], [2053.0, 8201.333333333334], [2049.0, 8977.0], [2109.0, 7769.0], [2105.0, 8929.0], [2101.0, 7774.0], [2097.0, 7779.0], [2089.0, 8368.5], [2081.0, 7796.0], [2141.0, 7682.0], [2133.0, 8855.0], [2129.0, 9440.0], [2125.0, 7699.0], [2121.0, 8919.0], [2117.0, 8919.0], [2113.0, 8925.0], [2425.0, 428.0], [2381.0, 432.0], [2421.0, 428.6666666666667], [2389.0, 432.25], [2393.0, 433.3333333333333], [2397.0, 432.9230769230769], [2429.0, 429.0], [2417.0, 429.99999999999994], [2409.0, 429.7142857142857], [2401.0, 432.2], [2497.0, 6137.0], [2553.0, 6082.5], [2501.0, 6131.0], [2509.0, 8807.666666666666], [2513.0, 6126.5], [2517.0, 6119.0], [2525.0, 6117.0], [2545.0, 6094.0], [2541.0, 6096.0], [2537.0, 6103.0], [2461.0, 6149.0], [2457.0, 6153.5], [2445.0, 389.5], [2441.0, 387.6666666666667], [2433.0, 428.06666666666666], [2489.0, 10163.5], [2485.0, 8824.666666666666], [2469.0, 8826.666666666666], [2465.0, 6147.0], [2681.0, 5991.0], [2625.0, 6035.5], [2629.0, 6033.0], [2633.0, 6032.666666666667], [2641.0, 6022.0], [2649.0, 6005.666666666667], [2677.0, 5992.0], [2669.0, 14038.0], [2661.0, 10020.0], [2585.0, 6058.0], [2581.0, 6063.0], [2577.0, 10134.0], [2573.0, 6071.0], [2565.0, 6075.0], [2621.0, 6035.5], [2613.0, 10061.0], [2605.0, 6045.5], [2597.0, 6055.0], [2593.0, 6056.5], [2689.0, 14024.0], [2693.0, 5984.0], [2749.0, 5902.777777777777], [2697.0, 5983.0], [2709.0, 13983.0], [2713.0, 5944.0], [2745.0, 7690.111111111111], [2721.0, 13948.0], [2717.0, 9961.5], [2885.0, 213.4], [2937.0, 210.0], [2889.0, 213.5], [2929.0, 210.0], [2925.0, 211.0], [2921.0, 211.0], [2913.0, 213.0], [2949.0, 209.0], [2953.0, 208.6], [2969.0, 202.0], [2985.0, 159.0], [2981.0, 159.0], [2977.0, 200.5], [1075.0, 7488.5], [1085.0, 9166.0], [1087.0, 9172.0], [1057.0, 5806.0], [1083.0, 19315.0], [1081.0, 9174.0], [1079.0, 9170.0], [1053.0, 9183.0], [1027.0, 9188.5], [1025.0, 9191.0], [1033.0, 9188.0], [1031.0, 9189.0], [1039.0, 29351.0], [1037.0, 9182.0], [1049.0, 9181.0], [1047.0, 9184.5], [1045.0, 9185.0], [1043.0, 9179.0], [1041.0, 33014.0], [1071.0, 29341.0], [1069.0, 9173.0], [1061.0, 9180.0], [1059.0, 9180.0], [1149.0, 7464.0], [1129.0, 9155.0], [1151.0, 9151.0], [1123.0, 9160.0], [1121.0, 5785.0], [1127.0, 29320.0], [1125.0, 9158.0], [1143.0, 9154.0], [1141.0, 9150.0], [1139.0, 9154.0], [1103.0, 9167.0], [1099.0, 9168.0], [1095.0, 9169.0], [1093.0, 9167.5], [1091.0, 9171.0], [1089.0, 9171.0], [1119.0, 9159.0], [1115.0, 9163.0], [1113.0, 9163.0], [1111.0, 9159.0], [1109.0, 18342.5], [1107.0, 9159.0], [1105.0, 9164.5], [1135.0, 9155.0], [1133.0, 9153.0], [1131.0, 9154.5], [1209.0, 9126.0], [1215.0, 16446.333333333332], [1185.0, 9142.0], [1189.0, 9141.0], [1195.0, 9140.0], [1197.0, 9139.0], [1207.0, 9128.0], [1205.0, 29298.0], [1183.0, 7454.0], [1153.0, 9150.5], [1163.0, 9145.333333333334], [1157.0, 9151.0], [1181.0, 7455.0], [1179.0, 32974.0], [1177.0, 9144.0], [1175.0, 10926.0], [1173.0, 9146.0], [1171.0, 5772.0], [1169.0, 5772.0], [1275.0, 9086.5], [1253.0, 10307.333333333334], [1255.0, 9119.0], [1259.0, 9100.0], [1261.0, 9103.5], [1277.0, 9086.0], [1273.0, 9086.0], [1269.0, 20926.0], [1267.0, 32759.0], [1265.0, 19274.0], [1217.0, 9127.5], [1221.0, 10910.0], [1223.0, 10019.5], [1227.0, 11649.0], [1225.0, 9128.5], [1231.0, 10015.0], [1241.0, 18302.5], [1239.0, 9124.0], [1237.0, 9125.0], [1339.0, 10748.0], [1331.0, 10758.0], [1317.0, 5635.0], [1343.0, 9854.0], [1313.0, 9017.0], [1321.0, 19089.0], [1319.0, 9004.0], [1325.0, 9001.0], [1327.0, 10763.0], [1341.0, 19048.0], [1329.0, 27338.0], [1295.0, 9059.0], [1291.0, 9071.0], [1289.0, 32906.0], [1287.0, 10859.0], [1283.0, 9081.0], [1281.0, 9084.0], [1311.0, 9019.0], [1309.0, 5651.0], [1301.0, 9032.0], [1297.0, 9040.0], [1407.0, 8889.0], [1383.0, 8915.0], [1399.0, 8890.5], [1377.0, 8918.0], [1379.0, 8916.0], [1387.0, 8911.0], [1389.0, 8910.0], [1405.0, 10224.25], [1401.0, 20804.5], [1397.0, 8892.0], [1395.0, 8892.5], [1393.0, 8901.0], [1375.0, 8919.0], [1345.0, 8942.0], [1347.0, 8941.5], [1351.0, 8935.0], [1355.0, 8931.0], [1359.0, 8929.0], [1373.0, 32580.0], [1365.0, 21764.666666666668], [1391.0, 32560.0], [1421.0, 8879.0], [1423.0, 8881.0], [1449.0, 8759.0], [1461.0, 18843.0], [1419.0, 8882.0], [1417.0, 18965.5], [1415.0, 8887.0], [1413.0, 8887.0], [1411.0, 16830.333333333332], [1409.0, 32718.0], [1429.0, 10657.0], [1427.0, 8879.0], [1425.0, 8881.0], [1455.0, 8759.5], [1505.0, 8758.0], [1511.0, 7070.25], [1517.0, 304.0], [1515.0, 18831.75], [1509.0, 8758.0], [1503.0, 8757.000000000002], [1487.0, 11293.75], [1501.0, 8759.0], [1497.0, 7914.375], [1491.0, 8758.5], [1659.0, 288.1333333333334], [1657.0, 288.9], [1629.0, 291.0], [1661.0, 288.0], [1663.0, 288.5], [1641.0, 290.0], [1697.0, 224.25], [1705.0, 222.20000000000002], [1703.0, 222.33333333333334], [1699.0, 223.33333333333334], [1675.0, 287.77777777777777], [1671.0, 288.42857142857144], [1669.0, 286.5], [1667.0, 288.8], [1665.0, 1068.8333333333333], [1783.0, 200.4], [1791.0, 149.0], [1773.0, 202.0], [1771.0, 202.0], [1781.0, 200.53333333333333], [1779.0, 200.5], [1777.0, 200.79999999999998], [1751.0, 207.0], [1827.0, 2151.0], [1851.0, 8881.0], [1855.0, 8879.0], [1825.0, 3162.0], [1829.0, 1093.0], [1831.0, 8886.0], [1835.0, 7796.0], [1833.0, 8885.0], [1839.0, 8883.0], [1853.0, 8880.0], [1843.0, 8882.0], [1841.0, 8883.0], [1795.0, 136.0], [1803.0, 135.0], [1801.0, 135.33333333333334], [1817.0, 85.0], [1815.0, 102.8], [1809.0, 134.5], [1907.0, 8848.0], [1913.0, 8841.0], [1917.0, 8838.0], [1889.0, 8862.0], [1893.0, 8860.666666666666], [1895.0, 5592.0], [1899.0, 8858.5], [1901.0, 7769.666666666667], [1915.0, 8839.0], [1909.0, 8843.5], [1869.0, 8872.0], [1865.0, 8873.0], [1861.0, 8877.333333333334], [1857.0, 8878.0], [1887.0, 8863.5], [1885.0, 8864.5], [1883.0, 7231.0], [1879.0, 8867.0], [1877.0, 8868.0], [1875.0, 8869.0], [1873.0, 8870.0], [1979.0, 10513.0], [1953.0, 8805.0], [1955.0, 8796.0], [1957.0, 8792.0], [1959.0, 8788.0], [1961.0, 8787.0], [1963.0, 8783.0], [1965.0, 8780.0], [1981.0, 8771.0], [1975.0, 9121.0], [1971.0, 8779.25], [1951.0, 8807.0], [1921.0, 8837.0], [1923.0, 8836.0], [1925.0, 8833.0], [1927.0, 8831.0], [1931.0, 8827.0], [1935.0, 11549.0], [1933.0, 8827.5], [1943.0, 8810.0], [1941.0, 8812.0], [1939.0, 8817.5], [1937.0, 8818.0], [2039.0, 224.5], [2021.0, 11343.0], [2025.0, 9075.5], [2023.0, 9075.5], [2027.0, 8719.0], [2043.0, 8397.5], [2035.0, 9854.0], [2033.0, 8700.0], [1985.0, 8766.0], [1989.0, 8761.0], [1993.0, 9105.0], [1991.0, 9452.0], [1999.0, 8756.0], [1997.0, 8929.5], [2011.0, 8749.0], [2009.0, 8752.0], [2007.0, 8753.0], [2005.0, 9446.0], [2001.0, 8755.0], [2031.0, 8954.0], [2029.0, 8704.0], [2074.0, 8960.0], [2122.0, 8910.0], [2134.0, 7696.0], [2078.0, 7799.0], [2070.0, 7805.0], [2066.0, 7807.0], [2062.0, 7809.0], [2054.0, 8973.0], [2050.0, 7816.0], [2102.0, 7772.0], [2098.0, 8936.0], [2094.0, 7782.5], [2090.0, 7788.0], [2086.0, 7791.0], [2082.0, 7795.0], [2142.0, 7888.0], [2138.0, 7690.0], [2118.0, 8919.0], [2114.0, 8920.0], [2426.0, 429.0], [2390.0, 435.5], [2394.0, 432.88888888888886], [2398.0, 431.125], [2418.0, 425.6666666666667], [2414.0, 431.26666666666665], [2410.0, 430.0], [2402.0, 429.38095238095235], [2550.0, 10107.5], [2518.0, 6119.0], [2522.0, 6118.0], [2526.0, 10136.5], [2546.0, 14132.0], [2538.0, 14141.0], [2458.0, 6153.0], [2450.0, 6154.0], [2494.0, 6138.0], [2486.0, 6144.0], [2478.0, 7579.666666666667], [2474.0, 6146.0], [2466.0, 6148.0], [2634.0, 6024.0], [2674.0, 5992.5], [2638.0, 6023.666666666667], [2642.0, 6019.0], [2646.0, 6009.5], [2650.0, 14045.0], [2654.0, 6002.333333333333], [2678.0, 5991.5], [2670.0, 5993.0], [2666.0, 5999.0], [2658.0, 10022.0], [2590.0, 6057.5], [2574.0, 6070.5], [2570.0, 6072.0], [2618.0, 6037.0], [2614.0, 6038.0], [2610.0, 6044.0], [2606.0, 6045.0], [2602.0, 6047.0], [2746.0, 5903.666666666667], [2694.0, 5983.0], [2698.0, 14020.0], [2702.0, 5947.0], [2706.0, 8095.5], [2722.0, 5908.0], [2930.0, 210.0], [2890.0, 213.125], [2910.0, 212.0], [2938.0, 209.0], [2926.0, 211.0], [2922.0, 211.0], [2918.0, 211.14285714285714], [2914.0, 212.0], [2958.0, 208.5], [2954.0, 208.16666666666666], [2962.0, 204.0], [2966.0, 203.0], [2974.0, 201.0], [2990.0, 156.0], [2986.0, 157.0], [2982.0, 159.0], [2978.0, 199.0], [2067.0, 7807.0], [2151.0, 7003.285714285715], [2079.0, 7797.0], [2075.0, 8960.0], [2059.0, 8391.0], [2055.0, 8973.0], [2111.0, 8927.0], [2107.0, 7769.0], [2103.0, 7770.0], [2099.0, 7777.0], [2095.0, 8940.0], [2087.0, 7789.0], [2083.0, 7795.0], [2143.0, 7888.0], [2139.0, 7690.5], [2131.0, 7697.0], [2127.0, 7698.0], [2123.0, 8910.0], [2423.0, 429.2], [2427.0, 429.25], [2431.0, 427.0], [2391.0, 431.4285714285714], [2395.0, 435.0], [2399.0, 429.21428571428567], [2419.0, 434.0], [2415.0, 428.5], [2411.0, 432.0], [2407.0, 430.17391304347825], [2403.0, 431.22222222222223], [2539.0, 6102.0], [2547.0, 14132.0], [2559.0, 6081.0], [2499.0, 6135.0], [2503.0, 6128.0], [2507.0, 6128.5], [2511.0, 6127.5], [2515.0, 8275.5], [2555.0, 7873.0], [2551.0, 10154.0], [2543.0, 6095.0], [2535.0, 6103.666666666667], [2531.0, 11475.0], [2463.0, 6147.0], [2459.0, 14188.0], [2455.0, 6154.0], [2451.0, 6155.0], [2443.0, 390.5], [2439.0, 387.6], [2495.0, 14177.0], [2491.0, 6144.5], [2487.0, 6145.0], [2483.0, 10164.5], [2475.0, 10166.0], [2471.0, 6147.0], [2467.0, 6148.0], [2663.0, 6000.0], [2659.0, 6001.0], [2687.0, 5986.0], [2635.0, 6024.0], [2643.0, 10031.0], [2647.0, 6008.0], [2651.0, 6003.0], [2675.0, 5992.0], [2671.0, 5993.0], [2667.0, 6000.0], [2591.0, 6056.0], [2587.0, 6058.0], [2583.0, 6062.0], [2579.0, 10363.0], [2567.0, 6072.0], [2563.0, 6077.0], [2623.0, 6035.5], [2619.0, 6036.0], [2615.0, 6038.0], [2611.0, 6042.0], [2603.0, 6046.0], [2599.0, 6054.0], [2703.0, 7301.333333333333], [2707.0, 5946.0], [2691.0, 5985.0], [2695.0, 5983.0], [2699.0, 14016.0], [2711.0, 7020.0], [2719.0, 5940.0], [2715.0, 8623.0], [2939.0, 209.0], [2887.0, 214.0], [2891.0, 213.5], [2895.0, 213.0], [2903.0, 212.5], [2911.0, 212.0], [2935.0, 210.1818181818182], [2931.0, 210.0], [2927.0, 211.0], [2923.0, 211.0], [2919.0, 211.0], [2915.0, 212.0], [2955.0, 208.0], [2947.0, 209.0], [2959.0, 207.0], [2967.0, 203.0], [2971.0, 201.0], [2975.0, 200.0], [2991.0, 156.0], [2987.0, 157.0], [2983.0, 158.0], [2979.0, 160.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[2971.219729442914, 3870.4465779293178]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 3000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 638.4, "minX": 1.68286098E12, "maxY": 361654.88333333336, "series": [{"data": [[1.6828611E12, 323369.4166666667], [1.68286104E12, 361654.88333333336], [1.68286122E12, 335254.0833333333], [1.68286116E12, 250852.2], [1.68286134E12, 931.3166666666667], [1.68286128E12, 123155.01666666666], [1.68286098E12, 27170.683333333334]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.6828611E12, 230193.6], [1.68286104E12, 256132.8], [1.68286122E12, 235485.6], [1.68286116E12, 173334.0], [1.68286134E12, 638.4], [1.68286128E12, 88788.0], [1.68286098E12, 19731.6]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68286134E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 2655.2024597918535, "minX": 1.68286098E12, "maxY": 45957.51315789475, "series": [{"data": [[1.6828611E12, 3752.9969735642535], [1.68286104E12, 2856.1712908303975], [1.68286122E12, 3487.0308498876307], [1.68286116E12, 6579.196979930515], [1.68286134E12, 45957.51315789475], [1.68286128E12, 2655.2024597918535], [1.68286098E12, 3188.6526181353734]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68286134E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 2655.195269631031, "minX": 1.68286098E12, "maxY": 45957.51315789475, "series": [{"data": [[1.6828611E12, 3672.2541476754436], [1.68286104E12, 2856.148137216308], [1.68286122E12, 3472.9610185812503], [1.68286116E12, 5903.024845619433], [1.68286134E12, 45957.51315789475], [1.68286128E12, 2655.195269631031], [1.68286098E12, 3188.5202213707944]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68286134E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.23684210526315794, "minX": 1.68286098E12, "maxY": 4424.553840216136, "series": [{"data": [[1.6828611E12, 587.1850501367358], [1.68286104E12, 172.34431982159222], [1.68286122E12, 987.0053496915077], [1.68286116E12, 4424.553840216136], [1.68286134E12, 0.23684210526315794], [1.68286128E12, 176.84824976348153], [1.68286098E12, 112.25627926777373]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68286134E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 6.0, "minX": 1.68286098E12, "maxY": 198230.0, "series": [{"data": [[1.6828611E12, 103021.0], [1.68286104E12, 74623.0], [1.68286122E12, 198230.0], [1.68286116E12, 168146.0], [1.68286134E12, 64637.0], [1.68286128E12, 132317.0], [1.68286098E12, 19995.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.6828611E12, 6268.800000000003], [1.68286104E12, 10213.0], [1.68286122E12, 4566.0], [1.68286116E12, 3047.9000000000015], [1.68286134E12, 61606.6], [1.68286128E12, 8908.199999999997], [1.68286098E12, 9580.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.6828611E12, 100155.99], [1.68286104E12, 57322.990000000005], [1.68286122E12, 67132.68000000005], [1.68286116E12, 160841.0], [1.68286134E12, 64637.0], [1.68286128E12, 20208.869999999995], [1.68286098E12, 16228.5]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.6828611E12, 8217.30000000001], [1.68286104E12, 12952.0], [1.68286122E12, 15545.0], [1.68286116E12, 17764.0], [1.68286134E12, 63626.15], [1.68286128E12, 9676.0], [1.68286098E12, 12961.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.6828611E12, 12.0], [1.68286104E12, 18.0], [1.68286122E12, 15.0], [1.68286116E12, 6.0], [1.68286134E12, 27277.0], [1.68286128E12, 45.0], [1.68286098E12, 27.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.6828611E12, 268.0], [1.68286104E12, 251.0], [1.68286122E12, 249.0], [1.68286116E12, 230.0], [1.68286134E12, 45956.5], [1.68286128E12, 373.0], [1.68286098E12, 231.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68286134E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 32.0, "minX": 1.0, "maxY": 160843.0, "series": [{"data": [[2.0, 38384.5], [3.0, 6761.0], [4.0, 34087.0], [5.0, 10818.0], [6.0, 11029.5], [7.0, 15856.5], [8.0, 6506.5], [9.0, 17957.0], [10.0, 5362.0], [11.0, 71787.0], [12.0, 16517.5], [14.0, 6829.5], [15.0, 17485.0], [16.0, 9585.5], [17.0, 13922.0], [18.0, 26907.0], [20.0, 5813.5], [22.0, 15916.0], [23.0, 24910.0], [24.0, 5408.0], [29.0, 5007.0], [33.0, 4008.0], [34.0, 4274.0], [37.0, 32.0], [40.0, 579.5], [47.0, 5962.0], [51.0, 13894.0], [53.0, 61.0], [56.0, 4894.5], [59.0, 51.0], [62.0, 153.0], [64.0, 2016.0], [71.0, 160843.0], [80.0, 8033.0], [81.0, 4728.0], [90.0, 7863.0], [95.0, 33281.0], [94.0, 10286.5], [102.0, 7811.0], [105.0, 6063.0], [112.0, 97.0], [134.0, 7875.5], [135.0, 152.0], [140.0, 133.0], [148.0, 179.0], [146.0, 213.0], [154.0, 104.0], [156.0, 100187.5], [153.0, 483.0], [191.0, 253.0], [202.0, 128.0], [200.0, 4522.0], [209.0, 8833.0], [220.0, 158.0], [222.0, 8258.0], [226.0, 9187.0], [230.0, 191.0], [233.0, 222.0], [243.0, 24895.0], [254.0, 4011.0], [267.0, 175.0], [271.0, 214.0], [289.0, 11916.0], [317.0, 209.0], [319.0, 5990.0], [306.0, 286.5], [337.0, 383.0], [349.0, 240.0], [356.0, 10856.5], [362.0, 236.0], [374.0, 173.0], [376.0, 171.0], [370.0, 6189.5], [380.0, 180.0], [377.0, 237.0], [381.0, 222.0], [395.0, 253.0], [397.0, 224.0], [398.0, 217.0], [391.0, 212.0], [393.0, 224.0], [400.0, 223.0], [404.0, 213.0], [411.0, 4690.0], [410.0, 461.0], [414.0, 208.0], [415.0, 223.0], [406.0, 238.0], [407.0, 245.0], [402.0, 218.0], [403.0, 183.0], [405.0, 241.0], [416.0, 10080.5], [420.0, 122.0], [418.0, 4232.0], [422.0, 207.0], [428.0, 251.0], [437.0, 6053.0], [434.0, 4864.5], [445.0, 267.0], [441.0, 264.0], [452.0, 5011.0], [456.0, 7213.0], [449.0, 6783.0], [478.0, 225.0], [465.0, 358.0], [490.0, 332.0], [488.0, 4621.5], [481.0, 237.5], [494.0, 332.0], [498.0, 13137.0], [526.0, 13003.0], [520.0, 142.0], [524.0, 267.0], [544.0, 226.0], [565.0, 9141.0], [605.0, 139.0], [588.0, 7591.0], [577.0, 172.0], [592.0, 195.0], [594.0, 240.0], [617.0, 237.0], [612.0, 5903.0], [643.0, 147.0], [666.0, 6379.0], [649.0, 5739.0], [671.0, 200.0], [697.0, 257.0], [730.0, 241.0], [712.0, 382.0], [731.0, 220.0], [735.0, 407.0], [760.0, 128.0], [757.0, 141.0], [737.0, 3427.0], [745.0, 206.0], [748.0, 408.0], [743.0, 229.0], [794.0, 204.0], [776.0, 226.0], [799.0, 218.0], [797.0, 258.0], [772.0, 228.0], [784.0, 221.0], [788.0, 228.0], [771.0, 204.0], [779.0, 337.0], [793.0, 427.0], [774.0, 207.0], [804.0, 231.0], [816.0, 202.0], [808.0, 217.0], [806.0, 232.0], [807.0, 210.0], [830.0, 7751.0], [811.0, 354.0], [803.0, 301.0], [801.0, 253.0], [857.0, 350.0], [861.0, 7434.0], [843.0, 312.0], [850.0, 228.0], [832.0, 427.0], [837.0, 548.0], [862.0, 422.0], [925.0, 215.0], [897.0, 248.0], [911.0, 374.0], [959.0, 226.0], [1054.0, 326.0], [1028.0, 106.0], [1024.0, 202.0], [1148.0, 250.0], [1129.0, 244.0], [1192.0, 223.0], [1204.0, 376.0], [1176.0, 232.0], [1185.0, 209.0], [1154.0, 434.0], [1167.0, 216.0], [1159.0, 517.0], [1205.0, 236.0], [1308.0, 224.0], [1393.0, 145.0], [1486.0, 382.0], [1592.0, 261.0], [1604.0, 322.0], [1619.0, 144.0], [1854.0, 319.0], [1928.0, 493.0], [1.0, 52453.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[34.0, 104171.0], [11.0, 73622.0], [737.0, 106160.0], [1486.0, 72746.0], [843.0, 143508.0], [441.0, 100649.0], [481.0, 156641.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1928.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 160843.0, "series": [{"data": [[2.0, 38384.5], [3.0, 6761.0], [4.0, 34087.0], [5.0, 10818.0], [6.0, 11029.5], [7.0, 15856.5], [8.0, 6506.5], [9.0, 17957.0], [10.0, 5362.0], [11.0, 71787.0], [12.0, 16517.5], [14.0, 6829.5], [15.0, 17485.0], [16.0, 9585.5], [17.0, 13922.0], [18.0, 26907.0], [20.0, 5813.0], [22.0, 15916.0], [23.0, 24910.0], [24.0, 5408.0], [29.0, 5007.0], [33.0, 4007.0], [34.0, 4274.0], [37.0, 32.0], [40.0, 579.5], [47.0, 5962.0], [51.0, 13894.0], [53.0, 61.0], [56.0, 4894.5], [59.0, 51.0], [62.0, 153.0], [64.0, 2016.0], [71.0, 160843.0], [80.0, 8033.0], [81.0, 4728.0], [90.0, 7863.0], [95.0, 33281.0], [94.0, 10286.5], [102.0, 7811.0], [105.0, 6063.0], [112.0, 97.0], [134.0, 7875.5], [135.0, 152.0], [140.0, 133.0], [148.0, 179.0], [146.0, 213.0], [154.0, 104.0], [156.0, 100187.5], [153.0, 482.0], [191.0, 253.0], [202.0, 128.0], [200.0, 4522.0], [209.0, 8833.0], [220.0, 158.0], [222.0, 8258.0], [226.0, 9187.0], [230.0, 191.0], [233.0, 222.0], [243.0, 24895.0], [254.0, 4011.0], [267.0, 175.0], [271.0, 214.0], [289.0, 11916.0], [317.0, 209.0], [319.0, 5990.0], [306.0, 286.5], [337.0, 383.0], [349.0, 240.0], [356.0, 10856.5], [362.0, 236.0], [374.0, 173.0], [376.0, 171.0], [370.0, 6189.5], [380.0, 180.0], [377.0, 237.0], [381.0, 222.0], [395.0, 253.0], [397.0, 224.0], [398.0, 217.0], [391.0, 211.0], [393.0, 224.0], [400.0, 223.0], [404.0, 213.0], [411.0, 4690.0], [410.0, 461.0], [414.0, 208.0], [415.0, 223.0], [406.0, 238.0], [407.0, 245.0], [402.0, 218.0], [403.0, 183.0], [405.0, 241.0], [416.0, 10080.5], [420.0, 122.0], [418.0, 4232.0], [422.0, 207.0], [428.0, 251.0], [437.0, 6053.0], [434.0, 4864.5], [445.0, 267.0], [441.0, 264.0], [452.0, 5011.0], [456.0, 7213.0], [449.0, 6783.0], [478.0, 225.0], [465.0, 358.0], [490.0, 331.5], [488.0, 4621.5], [481.0, 237.0], [494.0, 332.0], [498.0, 13137.0], [526.0, 13003.0], [520.0, 142.0], [524.0, 267.0], [544.0, 226.0], [565.0, 9141.0], [605.0, 139.0], [588.0, 7591.0], [577.0, 172.0], [592.0, 195.0], [594.0, 240.0], [617.0, 237.0], [612.0, 5903.0], [643.0, 147.0], [666.0, 6379.0], [649.0, 5739.0], [671.0, 200.0], [697.0, 257.0], [730.0, 241.0], [712.0, 382.0], [731.0, 220.0], [735.0, 407.0], [760.0, 128.0], [757.0, 141.0], [737.0, 3427.0], [745.0, 206.0], [748.0, 408.0], [743.0, 229.0], [794.0, 204.0], [776.0, 226.0], [799.0, 218.0], [797.0, 258.0], [772.0, 228.0], [784.0, 221.0], [788.0, 228.0], [771.0, 204.0], [779.0, 337.0], [793.0, 427.0], [774.0, 207.0], [804.0, 231.0], [816.0, 202.0], [808.0, 217.0], [806.0, 232.0], [807.0, 210.0], [830.0, 7751.0], [811.0, 354.0], [803.0, 301.0], [801.0, 253.0], [857.0, 350.0], [861.0, 7434.0], [843.0, 312.0], [850.0, 228.0], [832.0, 427.0], [837.0, 548.0], [862.0, 422.0], [925.0, 215.0], [897.0, 248.0], [911.0, 374.0], [959.0, 226.0], [1054.0, 326.0], [1028.0, 106.0], [1024.0, 202.0], [1148.0, 250.0], [1129.0, 244.0], [1192.0, 223.0], [1204.0, 376.0], [1176.0, 232.0], [1185.0, 209.0], [1154.0, 434.0], [1167.0, 216.0], [1159.0, 517.0], [1205.0, 236.0], [1308.0, 224.0], [1393.0, 145.0], [1486.0, 382.0], [1592.0, 261.0], [1604.0, 322.0], [1619.0, 144.0], [1854.0, 319.0], [1928.0, 493.0], [1.0, 52453.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[34.0, 0.0], [11.0, 0.0], [737.0, 0.0], [1486.0, 0.0], [843.0, 0.0], [441.0, 0.0], [481.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1928.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 80.0, "minX": 1.68286098E12, "maxY": 513.3333333333334, "series": [{"data": [[1.6828611E12, 440.0], [1.68286104E12, 513.3333333333334], [1.68286122E12, 453.3333333333333], [1.68286116E12, 333.3333333333333], [1.68286128E12, 174.65], [1.68286098E12, 80.0]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68286128E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.08333333333333333, "minX": 1.68286098E12, "maxY": 508.2, "series": [{"data": [[1.6828611E12, 456.73333333333335], [1.68286104E12, 508.2], [1.68286122E12, 467.23333333333335], [1.68286116E12, 343.9166666666667], [1.68286134E12, 1.2666666666666666], [1.68286128E12, 176.16666666666666], [1.68286098E12, 39.15]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.6828611E12, 0.35], [1.68286122E12, 0.08333333333333333], [1.68286116E12, 1.55]], "isOverall": false, "label": "Non HTTP response code: java.net.SocketException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68286134E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.08333333333333333, "minX": 1.68286098E12, "maxY": 508.2, "series": [{"data": [[1.6828611E12, 456.73333333333335], [1.68286104E12, 508.2], [1.68286122E12, 467.23333333333335], [1.68286116E12, 343.9166666666667], [1.68286134E12, 1.2666666666666666], [1.68286128E12, 176.16666666666666], [1.68286098E12, 39.15]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.6828611E12, 0.35], [1.68286122E12, 0.08333333333333333], [1.68286116E12, 1.55]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68286134E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.08333333333333333, "minX": 1.68286098E12, "maxY": 508.2, "series": [{"data": [[1.6828611E12, 456.73333333333335], [1.68286104E12, 508.2], [1.68286122E12, 467.23333333333335], [1.68286116E12, 343.9166666666667], [1.68286134E12, 1.2666666666666666], [1.68286128E12, 176.16666666666666], [1.68286098E12, 39.15]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.6828611E12, 0.35], [1.68286122E12, 0.08333333333333333], [1.68286116E12, 1.55]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68286134E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

