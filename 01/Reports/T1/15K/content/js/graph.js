/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 13.0, "minX": 0.0, "maxY": 229179.0, "series": [{"data": [[0.0, 13.0], [0.1, 28.0], [0.2, 31.0], [0.3, 33.0], [0.4, 35.0], [0.5, 36.0], [0.6, 37.0], [0.7, 38.0], [0.8, 39.0], [0.9, 40.0], [1.0, 41.0], [1.1, 42.0], [1.2, 43.0], [1.3, 43.0], [1.4, 44.0], [1.5, 45.0], [1.6, 45.0], [1.7, 46.0], [1.8, 46.0], [1.9, 47.0], [2.0, 47.0], [2.1, 48.0], [2.2, 48.0], [2.3, 49.0], [2.4, 50.0], [2.5, 50.0], [2.6, 51.0], [2.7, 51.0], [2.8, 52.0], [2.9, 52.0], [3.0, 53.0], [3.1, 53.0], [3.2, 53.0], [3.3, 54.0], [3.4, 54.0], [3.5, 55.0], [3.6, 55.0], [3.7, 56.0], [3.8, 56.0], [3.9, 57.0], [4.0, 58.0], [4.1, 58.0], [4.2, 59.0], [4.3, 59.0], [4.4, 60.0], [4.5, 60.0], [4.6, 61.0], [4.7, 62.0], [4.8, 62.0], [4.9, 63.0], [5.0, 63.0], [5.1, 64.0], [5.2, 64.0], [5.3, 65.0], [5.4, 66.0], [5.5, 66.0], [5.6, 67.0], [5.7, 68.0], [5.8, 68.0], [5.9, 69.0], [6.0, 70.0], [6.1, 70.0], [6.2, 71.0], [6.3, 72.0], [6.4, 72.0], [6.5, 73.0], [6.6, 74.0], [6.7, 75.0], [6.8, 76.0], [6.9, 77.0], [7.0, 78.0], [7.1, 79.0], [7.2, 80.0], [7.3, 81.0], [7.4, 82.0], [7.5, 83.0], [7.6, 84.0], [7.7, 86.0], [7.8, 87.0], [7.9, 88.0], [8.0, 90.0], [8.1, 91.0], [8.2, 92.0], [8.3, 93.0], [8.4, 94.0], [8.5, 95.0], [8.6, 96.0], [8.7, 98.0], [8.8, 99.0], [8.9, 100.0], [9.0, 102.0], [9.1, 103.0], [9.2, 105.0], [9.3, 106.0], [9.4, 108.0], [9.5, 109.0], [9.6, 111.0], [9.7, 115.0], [9.8, 117.0], [9.9, 120.0], [10.0, 122.0], [10.1, 125.0], [10.2, 127.0], [10.3, 130.0], [10.4, 131.0], [10.5, 133.0], [10.6, 134.0], [10.7, 135.0], [10.8, 135.0], [10.9, 136.0], [11.0, 137.0], [11.1, 139.0], [11.2, 141.0], [11.3, 142.0], [11.4, 143.0], [11.5, 144.0], [11.6, 144.0], [11.7, 145.0], [11.8, 146.0], [11.9, 146.0], [12.0, 147.0], [12.1, 148.0], [12.2, 148.0], [12.3, 149.0], [12.4, 149.0], [12.5, 150.0], [12.6, 151.0], [12.7, 152.0], [12.8, 153.0], [12.9, 154.0], [13.0, 156.0], [13.1, 156.0], [13.2, 157.0], [13.3, 158.0], [13.4, 159.0], [13.5, 160.0], [13.6, 161.0], [13.7, 162.0], [13.8, 163.0], [13.9, 164.0], [14.0, 166.0], [14.1, 167.0], [14.2, 169.0], [14.3, 171.0], [14.4, 173.0], [14.5, 175.0], [14.6, 178.0], [14.7, 183.0], [14.8, 186.0], [14.9, 187.0], [15.0, 190.0], [15.1, 196.0], [15.2, 199.0], [15.3, 202.0], [15.4, 204.0], [15.5, 209.0], [15.6, 212.0], [15.7, 213.0], [15.8, 215.0], [15.9, 218.0], [16.0, 220.0], [16.1, 222.0], [16.2, 225.0], [16.3, 230.0], [16.4, 232.0], [16.5, 234.0], [16.6, 235.0], [16.7, 237.0], [16.8, 239.0], [16.9, 240.0], [17.0, 241.0], [17.1, 242.0], [17.2, 243.0], [17.3, 244.0], [17.4, 247.0], [17.5, 249.0], [17.6, 250.0], [17.7, 251.0], [17.8, 252.0], [17.9, 253.0], [18.0, 254.0], [18.1, 255.0], [18.2, 256.0], [18.3, 257.0], [18.4, 257.0], [18.5, 258.0], [18.6, 259.0], [18.7, 260.0], [18.8, 260.0], [18.9, 261.0], [19.0, 262.0], [19.1, 263.0], [19.2, 264.0], [19.3, 265.0], [19.4, 266.0], [19.5, 266.0], [19.6, 267.0], [19.7, 267.0], [19.8, 268.0], [19.9, 269.0], [20.0, 269.0], [20.1, 270.0], [20.2, 271.0], [20.3, 272.0], [20.4, 273.0], [20.5, 274.0], [20.6, 274.0], [20.7, 275.0], [20.8, 276.0], [20.9, 277.0], [21.0, 277.0], [21.1, 278.0], [21.2, 279.0], [21.3, 279.0], [21.4, 280.0], [21.5, 280.0], [21.6, 280.0], [21.7, 281.0], [21.8, 281.0], [21.9, 282.0], [22.0, 282.0], [22.1, 282.0], [22.2, 283.0], [22.3, 283.0], [22.4, 283.0], [22.5, 284.0], [22.6, 284.0], [22.7, 285.0], [22.8, 286.0], [22.9, 286.0], [23.0, 287.0], [23.1, 288.0], [23.2, 289.0], [23.3, 289.0], [23.4, 290.0], [23.5, 290.0], [23.6, 291.0], [23.7, 293.0], [23.8, 293.0], [23.9, 294.0], [24.0, 295.0], [24.1, 295.0], [24.2, 295.0], [24.3, 296.0], [24.4, 296.0], [24.5, 297.0], [24.6, 297.0], [24.7, 298.0], [24.8, 299.0], [24.9, 300.0], [25.0, 300.0], [25.1, 301.0], [25.2, 302.0], [25.3, 303.0], [25.4, 303.0], [25.5, 304.0], [25.6, 304.0], [25.7, 305.0], [25.8, 305.0], [25.9, 305.0], [26.0, 306.0], [26.1, 306.0], [26.2, 307.0], [26.3, 307.0], [26.4, 307.0], [26.5, 308.0], [26.6, 308.0], [26.7, 309.0], [26.8, 309.0], [26.9, 310.0], [27.0, 310.0], [27.1, 311.0], [27.2, 311.0], [27.3, 311.0], [27.4, 312.0], [27.5, 313.0], [27.6, 313.0], [27.7, 314.0], [27.8, 315.0], [27.9, 316.0], [28.0, 316.0], [28.1, 316.0], [28.2, 317.0], [28.3, 318.0], [28.4, 318.0], [28.5, 319.0], [28.6, 319.0], [28.7, 319.0], [28.8, 320.0], [28.9, 320.0], [29.0, 321.0], [29.1, 321.0], [29.2, 322.0], [29.3, 322.0], [29.4, 323.0], [29.5, 324.0], [29.6, 324.0], [29.7, 325.0], [29.8, 326.0], [29.9, 328.0], [30.0, 330.0], [30.1, 332.0], [30.2, 333.0], [30.3, 334.0], [30.4, 335.0], [30.5, 335.0], [30.6, 336.0], [30.7, 337.0], [30.8, 338.0], [30.9, 340.0], [31.0, 342.0], [31.1, 343.0], [31.2, 344.0], [31.3, 346.0], [31.4, 347.0], [31.5, 348.0], [31.6, 349.0], [31.7, 350.0], [31.8, 351.0], [31.9, 352.0], [32.0, 353.0], [32.1, 354.0], [32.2, 355.0], [32.3, 356.0], [32.4, 357.0], [32.5, 359.0], [32.6, 361.0], [32.7, 362.0], [32.8, 363.0], [32.9, 364.0], [33.0, 365.0], [33.1, 366.0], [33.2, 367.0], [33.3, 368.0], [33.4, 369.0], [33.5, 370.0], [33.6, 370.0], [33.7, 371.0], [33.8, 372.0], [33.9, 372.0], [34.0, 373.0], [34.1, 374.0], [34.2, 375.0], [34.3, 376.0], [34.4, 377.0], [34.5, 378.0], [34.6, 379.0], [34.7, 380.0], [34.8, 380.0], [34.9, 381.0], [35.0, 382.0], [35.1, 383.0], [35.2, 383.0], [35.3, 385.0], [35.4, 386.0], [35.5, 387.0], [35.6, 388.0], [35.7, 389.0], [35.8, 390.0], [35.9, 391.0], [36.0, 393.0], [36.1, 394.0], [36.2, 395.0], [36.3, 396.0], [36.4, 397.0], [36.5, 398.0], [36.6, 399.0], [36.7, 401.0], [36.8, 403.0], [36.9, 404.0], [37.0, 405.0], [37.1, 407.0], [37.2, 408.0], [37.3, 410.0], [37.4, 413.0], [37.5, 415.0], [37.6, 417.0], [37.7, 419.0], [37.8, 422.0], [37.9, 425.0], [38.0, 428.0], [38.1, 433.0], [38.2, 434.0], [38.3, 435.0], [38.4, 436.0], [38.5, 437.0], [38.6, 439.0], [38.7, 442.0], [38.8, 444.0], [38.9, 446.0], [39.0, 447.0], [39.1, 450.0], [39.2, 453.0], [39.3, 455.0], [39.4, 458.0], [39.5, 460.0], [39.6, 461.0], [39.7, 463.0], [39.8, 467.0], [39.9, 470.0], [40.0, 471.0], [40.1, 472.0], [40.2, 473.0], [40.3, 474.0], [40.4, 477.0], [40.5, 479.0], [40.6, 481.0], [40.7, 482.0], [40.8, 484.0], [40.9, 486.0], [41.0, 489.0], [41.1, 494.0], [41.2, 497.0], [41.3, 502.0], [41.4, 505.0], [41.5, 507.0], [41.6, 508.0], [41.7, 510.0], [41.8, 511.0], [41.9, 511.0], [42.0, 513.0], [42.1, 515.0], [42.2, 517.0], [42.3, 519.0], [42.4, 521.0], [42.5, 523.0], [42.6, 525.0], [42.7, 528.0], [42.8, 529.0], [42.9, 530.0], [43.0, 532.0], [43.1, 533.0], [43.2, 534.0], [43.3, 535.0], [43.4, 537.0], [43.5, 538.0], [43.6, 539.0], [43.7, 541.0], [43.8, 545.0], [43.9, 548.0], [44.0, 550.0], [44.1, 552.0], [44.2, 554.0], [44.3, 556.0], [44.4, 558.0], [44.5, 559.0], [44.6, 560.0], [44.7, 561.0], [44.8, 562.0], [44.9, 564.0], [45.0, 566.0], [45.1, 568.0], [45.2, 569.0], [45.3, 571.0], [45.4, 572.0], [45.5, 573.0], [45.6, 574.0], [45.7, 575.0], [45.8, 576.0], [45.9, 576.0], [46.0, 577.0], [46.1, 578.0], [46.2, 579.0], [46.3, 580.0], [46.4, 580.0], [46.5, 581.0], [46.6, 582.0], [46.7, 583.0], [46.8, 584.0], [46.9, 585.0], [47.0, 586.0], [47.1, 587.0], [47.2, 588.0], [47.3, 589.0], [47.4, 590.0], [47.5, 591.0], [47.6, 592.0], [47.7, 592.0], [47.8, 593.0], [47.9, 594.0], [48.0, 594.0], [48.1, 595.0], [48.2, 595.0], [48.3, 596.0], [48.4, 597.0], [48.5, 598.0], [48.6, 599.0], [48.7, 600.0], [48.8, 601.0], [48.9, 602.0], [49.0, 602.0], [49.1, 603.0], [49.2, 604.0], [49.3, 605.0], [49.4, 606.0], [49.5, 608.0], [49.6, 609.0], [49.7, 610.0], [49.8, 611.0], [49.9, 612.0], [50.0, 613.0], [50.1, 614.0], [50.2, 615.0], [50.3, 616.0], [50.4, 617.0], [50.5, 618.0], [50.6, 619.0], [50.7, 620.0], [50.8, 620.0], [50.9, 621.0], [51.0, 622.0], [51.1, 623.0], [51.2, 624.0], [51.3, 625.0], [51.4, 626.0], [51.5, 627.0], [51.6, 628.0], [51.7, 628.0], [51.8, 629.0], [51.9, 629.0], [52.0, 630.0], [52.1, 630.0], [52.2, 631.0], [52.3, 631.0], [52.4, 631.0], [52.5, 632.0], [52.6, 632.0], [52.7, 633.0], [52.8, 633.0], [52.9, 634.0], [53.0, 634.0], [53.1, 634.0], [53.2, 635.0], [53.3, 635.0], [53.4, 635.0], [53.5, 636.0], [53.6, 636.0], [53.7, 636.0], [53.8, 637.0], [53.9, 637.0], [54.0, 638.0], [54.1, 638.0], [54.2, 639.0], [54.3, 639.0], [54.4, 639.0], [54.5, 640.0], [54.6, 641.0], [54.7, 641.0], [54.8, 642.0], [54.9, 643.0], [55.0, 644.0], [55.1, 645.0], [55.2, 646.0], [55.3, 646.0], [55.4, 648.0], [55.5, 649.0], [55.6, 650.0], [55.7, 651.0], [55.8, 652.0], [55.9, 653.0], [56.0, 653.0], [56.1, 654.0], [56.2, 655.0], [56.3, 655.0], [56.4, 656.0], [56.5, 656.0], [56.6, 657.0], [56.7, 658.0], [56.8, 659.0], [56.9, 660.0], [57.0, 661.0], [57.1, 661.0], [57.2, 662.0], [57.3, 663.0], [57.4, 664.0], [57.5, 665.0], [57.6, 666.0], [57.7, 668.0], [57.8, 669.0], [57.9, 669.0], [58.0, 671.0], [58.1, 672.0], [58.2, 673.0], [58.3, 674.0], [58.4, 675.0], [58.5, 676.0], [58.6, 676.0], [58.7, 677.0], [58.8, 677.0], [58.9, 678.0], [59.0, 679.0], [59.1, 680.0], [59.2, 681.0], [59.3, 681.0], [59.4, 682.0], [59.5, 683.0], [59.6, 684.0], [59.7, 685.0], [59.8, 685.0], [59.9, 686.0], [60.0, 686.0], [60.1, 686.0], [60.2, 687.0], [60.3, 687.0], [60.4, 687.0], [60.5, 688.0], [60.6, 688.0], [60.7, 689.0], [60.8, 690.0], [60.9, 690.0], [61.0, 691.0], [61.1, 691.0], [61.2, 692.0], [61.3, 692.0], [61.4, 693.0], [61.5, 693.0], [61.6, 693.0], [61.7, 694.0], [61.8, 694.0], [61.9, 694.0], [62.0, 695.0], [62.1, 695.0], [62.2, 696.0], [62.3, 696.0], [62.4, 697.0], [62.5, 697.0], [62.6, 698.0], [62.7, 698.0], [62.8, 699.0], [62.9, 700.0], [63.0, 701.0], [63.1, 702.0], [63.2, 702.0], [63.3, 703.0], [63.4, 704.0], [63.5, 704.0], [63.6, 705.0], [63.7, 705.0], [63.8, 706.0], [63.9, 707.0], [64.0, 707.0], [64.1, 708.0], [64.2, 709.0], [64.3, 710.0], [64.4, 710.0], [64.5, 711.0], [64.6, 711.0], [64.7, 712.0], [64.8, 712.0], [64.9, 713.0], [65.0, 713.0], [65.1, 714.0], [65.2, 715.0], [65.3, 715.0], [65.4, 716.0], [65.5, 717.0], [65.6, 717.0], [65.7, 718.0], [65.8, 720.0], [65.9, 720.0], [66.0, 721.0], [66.1, 723.0], [66.2, 724.0], [66.3, 725.0], [66.4, 727.0], [66.5, 728.0], [66.6, 729.0], [66.7, 729.0], [66.8, 730.0], [66.9, 731.0], [67.0, 732.0], [67.1, 733.0], [67.2, 734.0], [67.3, 737.0], [67.4, 739.0], [67.5, 740.0], [67.6, 742.0], [67.7, 744.0], [67.8, 746.0], [67.9, 747.0], [68.0, 748.0], [68.1, 749.0], [68.2, 750.0], [68.3, 750.0], [68.4, 751.0], [68.5, 752.0], [68.6, 752.0], [68.7, 752.0], [68.8, 753.0], [68.9, 753.0], [69.0, 754.0], [69.1, 754.0], [69.2, 755.0], [69.3, 756.0], [69.4, 756.0], [69.5, 757.0], [69.6, 758.0], [69.7, 758.0], [69.8, 759.0], [69.9, 760.0], [70.0, 761.0], [70.1, 762.0], [70.2, 764.0], [70.3, 765.0], [70.4, 765.0], [70.5, 766.0], [70.6, 767.0], [70.7, 768.0], [70.8, 770.0], [70.9, 771.0], [71.0, 772.0], [71.1, 773.0], [71.2, 774.0], [71.3, 775.0], [71.4, 775.0], [71.5, 776.0], [71.6, 776.0], [71.7, 777.0], [71.8, 778.0], [71.9, 779.0], [72.0, 780.0], [72.1, 780.0], [72.2, 781.0], [72.3, 782.0], [72.4, 783.0], [72.5, 784.0], [72.6, 785.0], [72.7, 786.0], [72.8, 786.0], [72.9, 787.0], [73.0, 788.0], [73.1, 788.0], [73.2, 789.0], [73.3, 789.0], [73.4, 790.0], [73.5, 790.0], [73.6, 790.0], [73.7, 791.0], [73.8, 791.0], [73.9, 792.0], [74.0, 792.0], [74.1, 793.0], [74.2, 793.0], [74.3, 794.0], [74.4, 795.0], [74.5, 795.0], [74.6, 796.0], [74.7, 797.0], [74.8, 798.0], [74.9, 798.0], [75.0, 799.0], [75.1, 800.0], [75.2, 801.0], [75.3, 802.0], [75.4, 802.0], [75.5, 803.0], [75.6, 804.0], [75.7, 804.0], [75.8, 805.0], [75.9, 806.0], [76.0, 806.0], [76.1, 807.0], [76.2, 808.0], [76.3, 809.0], [76.4, 809.0], [76.5, 810.0], [76.6, 810.0], [76.7, 810.0], [76.8, 811.0], [76.9, 811.0], [77.0, 812.0], [77.1, 812.0], [77.2, 812.0], [77.3, 813.0], [77.4, 814.0], [77.5, 815.0], [77.6, 816.0], [77.7, 817.0], [77.8, 817.0], [77.9, 817.0], [78.0, 818.0], [78.1, 818.0], [78.2, 819.0], [78.3, 820.0], [78.4, 820.0], [78.5, 821.0], [78.6, 822.0], [78.7, 822.0], [78.8, 823.0], [78.9, 824.0], [79.0, 825.0], [79.1, 827.0], [79.2, 828.0], [79.3, 828.0], [79.4, 829.0], [79.5, 830.0], [79.6, 830.0], [79.7, 832.0], [79.8, 834.0], [79.9, 836.0], [80.0, 837.0], [80.1, 838.0], [80.2, 839.0], [80.3, 841.0], [80.4, 843.0], [80.5, 845.0], [80.6, 847.0], [80.7, 848.0], [80.8, 849.0], [80.9, 852.0], [81.0, 855.0], [81.1, 859.0], [81.2, 861.0], [81.3, 862.0], [81.4, 863.0], [81.5, 866.0], [81.6, 870.0], [81.7, 874.0], [81.8, 881.0], [81.9, 884.0], [82.0, 886.0], [82.1, 887.0], [82.2, 887.0], [82.3, 888.0], [82.4, 889.0], [82.5, 891.0], [82.6, 892.0], [82.7, 895.0], [82.8, 898.0], [82.9, 900.0], [83.0, 901.0], [83.1, 905.0], [83.2, 907.0], [83.3, 909.0], [83.4, 913.0], [83.5, 916.0], [83.6, 920.0], [83.7, 922.0], [83.8, 925.0], [83.9, 927.0], [84.0, 930.0], [84.1, 933.0], [84.2, 935.0], [84.3, 937.0], [84.4, 939.0], [84.5, 940.0], [84.6, 943.0], [84.7, 948.0], [84.8, 951.0], [84.9, 953.0], [85.0, 956.0], [85.1, 958.0], [85.2, 959.0], [85.3, 961.0], [85.4, 962.0], [85.5, 964.0], [85.6, 966.0], [85.7, 968.0], [85.8, 970.0], [85.9, 971.0], [86.0, 974.0], [86.1, 977.0], [86.2, 980.0], [86.3, 982.0], [86.4, 984.0], [86.5, 987.0], [86.6, 989.0], [86.7, 991.0], [86.8, 992.0], [86.9, 993.0], [87.0, 995.0], [87.1, 997.0], [87.2, 998.0], [87.3, 1000.0], [87.4, 1001.0], [87.5, 1003.0], [87.6, 1004.0], [87.7, 1005.0], [87.8, 1007.0], [87.9, 1010.0], [88.0, 1013.0], [88.1, 1014.0], [88.2, 1016.0], [88.3, 1019.0], [88.4, 1022.0], [88.5, 1025.0], [88.6, 1026.0], [88.7, 1028.0], [88.8, 1029.0], [88.9, 1030.0], [89.0, 1031.0], [89.1, 1032.0], [89.2, 1033.0], [89.3, 1034.0], [89.4, 1035.0], [89.5, 1036.0], [89.6, 1037.0], [89.7, 1038.0], [89.8, 1039.0], [89.9, 1040.0], [90.0, 1040.0], [90.1, 1041.0], [90.2, 1041.0], [90.3, 1042.0], [90.4, 1043.0], [90.5, 1044.0], [90.6, 1045.0], [90.7, 1048.0], [90.8, 1050.0], [90.9, 1052.0], [91.0, 1055.0], [91.1, 1057.0], [91.2, 1058.0], [91.3, 1060.0], [91.4, 1061.0], [91.5, 1062.0], [91.6, 1063.0], [91.7, 1064.0], [91.8, 1066.0], [91.9, 1068.0], [92.0, 1069.0], [92.1, 1071.0], [92.2, 1072.0], [92.3, 1075.0], [92.4, 1078.0], [92.5, 1081.0], [92.6, 1084.0], [92.7, 1091.0], [92.8, 1098.0], [92.9, 1100.0], [93.0, 1102.0], [93.1, 1104.0], [93.2, 1111.0], [93.3, 1114.0], [93.4, 1120.0], [93.5, 1133.0], [93.6, 1138.0], [93.7, 1142.0], [93.8, 1150.0], [93.9, 1159.0], [94.0, 1167.0], [94.1, 1179.0], [94.2, 1191.0], [94.3, 1201.0], [94.4, 1205.0], [94.5, 1217.0], [94.6, 1242.0], [94.7, 1286.0], [94.8, 1328.0], [94.9, 1379.0], [95.0, 1528.0], [95.1, 1797.0], [95.2, 2197.0], [95.3, 2487.0], [95.4, 2864.0], [95.5, 3193.0], [95.6, 3747.0], [95.7, 4143.0], [95.8, 4803.0], [95.9, 5593.0], [96.0, 6145.0], [96.1, 6683.0], [96.2, 7504.0], [96.3, 7912.0], [96.4, 8016.0], [96.5, 8123.0], [96.6, 8631.0], [96.7, 8916.0], [96.8, 9197.0], [96.9, 9316.0], [97.0, 9583.0], [97.1, 9775.0], [97.2, 10042.0], [97.3, 10454.0], [97.4, 10675.0], [97.5, 10858.0], [97.6, 11078.0], [97.7, 11196.0], [97.8, 11326.0], [97.9, 11990.0], [98.0, 12128.0], [98.1, 12484.0], [98.2, 13080.0], [98.3, 13262.0], [98.4, 13821.0], [98.5, 14038.0], [98.6, 14921.0], [98.7, 16602.0], [98.8, 19474.0], [98.9, 25197.0], [99.0, 31798.0], [99.1, 37420.0], [99.2, 44247.0], [99.3, 63189.0], [99.4, 72719.0], [99.5, 84959.0], [99.6, 100616.0], [99.7, 101679.0], [99.8, 128921.0], [99.9, 133068.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 63797.0, "series": [{"data": [[0.0, 39714.0], [132900.0, 45.0], [152100.0, 4.0], [184100.0, 1.0], [66700.0, 2.0], [69900.0, 1.0], [76300.0, 1.0], [79500.0, 2.0], [82700.0, 2.0], [95500.0, 2.0], [101900.0, 3.0], [105100.0, 1.0], [108300.0, 1.0], [117900.0, 3.0], [127500.0, 13.0], [130700.0, 2.0], [100.0, 28450.0], [32900.0, 4.0], [134700.0, 13.0], [34500.0, 4.0], [37700.0, 4.0], [39300.0, 6.0], [40900.0, 1.0], [42500.0, 3.0], [44100.0, 1.0], [45700.0, 2.0], [47300.0, 4.0], [50500.0, 1.0], [200.0, 43300.0], [52100.0, 2.0], [53700.0, 1.0], [58500.0, 2.0], [60100.0, 5.0], [63300.0, 2.0], [64900.0, 3.0], [65800.0, 4.0], [72200.0, 5.0], [300.0, 52691.0], [78600.0, 5.0], [81800.0, 1.0], [85000.0, 1.0], [88200.0, 8.0], [97800.0, 2.0], [101000.0, 77.0], [400.0, 20613.0], [107400.0, 2.0], [113800.0, 3.0], [110600.0, 1.0], [500.0, 33111.0], [129800.0, 6.0], [138800.0, 2.0], [132400.0, 2.0], [600.0, 63797.0], [700.0, 54542.0], [800.0, 35122.0], [900.0, 19695.0], [1000.0, 25034.0], [1100.0, 6391.0], [1200.0, 1875.0], [1300.0, 898.0], [1400.0, 273.0], [1500.0, 378.0], [1600.0, 77.0], [1700.0, 141.0], [1800.0, 206.0], [1900.0, 46.0], [2000.0, 31.0], [2100.0, 173.0], [2200.0, 176.0], [2300.0, 131.0], [2400.0, 137.0], [2500.0, 124.0], [2600.0, 111.0], [2800.0, 116.0], [2700.0, 122.0], [2900.0, 97.0], [3000.0, 149.0], [3100.0, 184.0], [3200.0, 124.0], [3300.0, 49.0], [3400.0, 33.0], [3500.0, 99.0], [3600.0, 62.0], [3700.0, 109.0], [3800.0, 96.0], [3900.0, 93.0], [4000.0, 167.0], [4200.0, 62.0], [68100.0, 1.0], [4400.0, 52.0], [4600.0, 66.0], [71300.0, 1.0], [4800.0, 33.0], [77700.0, 12.0], [74500.0, 4.0], [5000.0, 75.0], [5200.0, 35.0], [84100.0, 2.0], [5400.0, 71.0], [5600.0, 44.0], [87300.0, 1.0], [5800.0, 59.0], [93700.0, 1.0], [6000.0, 32.0], [6200.0, 61.0], [100100.0, 63.0], [6600.0, 232.0], [6400.0, 23.0], [103300.0, 1.0], [6800.0, 40.0], [106500.0, 4.0], [109700.0, 3.0], [7000.0, 54.0], [112900.0, 1.0], [7200.0, 100.0], [7400.0, 33.0], [116100.0, 1.0], [7600.0, 156.0], [7800.0, 83.0], [125700.0, 1.0], [8000.0, 405.0], [128900.0, 8.0], [8400.0, 81.0], [134200.0, 2.0], [9200.0, 406.0], [8800.0, 238.0], [9600.0, 33.0], [153400.0, 1.0], [10000.0, 165.0], [159800.0, 4.0], [10400.0, 363.0], [10800.0, 362.0], [11200.0, 128.0], [11600.0, 39.0], [12000.0, 362.0], [12400.0, 55.0], [13200.0, 91.0], [12800.0, 15.0], [13600.0, 12.0], [14000.0, 203.0], [14800.0, 14.0], [14400.0, 90.0], [15200.0, 28.0], [15600.0, 6.0], [16000.0, 9.0], [16800.0, 18.0], [17600.0, 10.0], [18400.0, 24.0], [20000.0, 30.0], [20800.0, 4.0], [21600.0, 3.0], [22400.0, 1.0], [23200.0, 6.0], [24000.0, 1.0], [25600.0, 5.0], [26400.0, 12.0], [27200.0, 1.0], [28000.0, 6.0], [30400.0, 2.0], [31200.0, 1.0], [32000.0, 2.0], [35200.0, 30.0], [36800.0, 62.0], [38400.0, 2.0], [40000.0, 33.0], [43200.0, 14.0], [46400.0, 3.0], [52800.0, 4.0], [56000.0, 1.0], [57600.0, 2.0], [59200.0, 1.0], [60800.0, 1.0], [62400.0, 2.0], [64000.0, 2.0], [67200.0, 1.0], [73600.0, 29.0], [70400.0, 5.0], [76800.0, 8.0], [80000.0, 4.0], [83200.0, 3.0], [92800.0, 4.0], [102400.0, 2.0], [115200.0, 1.0], [128000.0, 17.0], [134400.0, 22.0], [140800.0, 41.0], [67100.0, 1.0], [73500.0, 6.0], [76700.0, 10.0], [83100.0, 5.0], [86300.0, 3.0], [95900.0, 1.0], [102300.0, 12.0], [99100.0, 1.0], [105500.0, 2.0], [111900.0, 1.0], [115100.0, 1.0], [118300.0, 1.0], [127900.0, 10.0], [136200.0, 1.0], [34700.0, 3.0], [33100.0, 24.0], [133900.0, 2.0], [36300.0, 63.0], [37900.0, 1.0], [41100.0, 2.0], [42700.0, 14.0], [44300.0, 6.0], [45900.0, 1.0], [49100.0, 4.0], [47500.0, 3.0], [53900.0, 3.0], [57100.0, 2.0], [55500.0, 1.0], [61900.0, 1.0], [63500.0, 2.0], [65100.0, 13.0], [69400.0, 13.0], [66200.0, 8.0], [72600.0, 16.0], [75800.0, 2.0], [79000.0, 1.0], [82200.0, 1.0], [101400.0, 3.0], [120600.0, 1.0], [123800.0, 1.0], [130200.0, 5.0], [138000.0, 2.0], [131600.0, 1.0], [135700.0, 3.0], [142100.0, 7.0], [68500.0, 5.0], [71700.0, 21.0], [81300.0, 2.0], [97300.0, 2.0], [100500.0, 30.0], [129300.0, 74.0], [133400.0, 21.0], [16900.0, 33.0], [17700.0, 10.0], [18500.0, 31.0], [19300.0, 2.0], [20100.0, 15.0], [20900.0, 5.0], [22500.0, 2.0], [23300.0, 19.0], [24100.0, 4.0], [26500.0, 1.0], [27300.0, 3.0], [28100.0, 10.0], [30500.0, 1.0], [31300.0, 1.0], [32100.0, 7.0], [33800.0, 7.0], [35400.0, 21.0], [37000.0, 2.0], [38600.0, 7.0], [40200.0, 1.0], [41800.0, 2.0], [43400.0, 1.0], [45000.0, 1.0], [195100.0, 1.0], [49800.0, 2.0], [51400.0, 2.0], [53000.0, 1.0], [54600.0, 2.0], [56200.0, 2.0], [57800.0, 1.0], [59400.0, 2.0], [61000.0, 1.0], [62600.0, 1.0], [64200.0, 2.0], [67600.0, 4.0], [74000.0, 5.0], [80400.0, 4.0], [83600.0, 3.0], [90000.0, 1.0], [99600.0, 2.0], [102800.0, 2.0], [115600.0, 1.0], [128400.0, 27.0], [134500.0, 15.0], [140900.0, 3.0], [67500.0, 1.0], [70700.0, 1.0], [73900.0, 1.0], [80300.0, 1.0], [86700.0, 1.0], [96300.0, 1.0], [99500.0, 1.0], [105900.0, 1.0], [115500.0, 1.0], [128300.0, 7.0], [138600.0, 1.0], [136300.0, 3.0], [36500.0, 1.0], [38100.0, 2.0], [39700.0, 1.0], [41300.0, 2.0], [44500.0, 3.0], [46100.0, 2.0], [47700.0, 18.0], [54100.0, 2.0], [58900.0, 1.0], [60500.0, 2.0], [62100.0, 1.0], [65300.0, 1.0], [63700.0, 4.0], [66600.0, 1.0], [69800.0, 6.0], [76200.0, 2.0], [85800.0, 1.0], [82600.0, 1.0], [92200.0, 3.0], [101800.0, 2.0], [98600.0, 1.0], [114600.0, 2.0], [121000.0, 2.0], [127400.0, 5.0], [130600.0, 7.0], [131700.0, 1.0], [68900.0, 4.0], [65700.0, 1.0], [72100.0, 13.0], [75300.0, 1.0], [78500.0, 3.0], [84900.0, 2.0], [88100.0, 7.0], [91300.0, 6.0], [100900.0, 72.0], [110500.0, 2.0], [113700.0, 1.0], [116900.0, 1.0], [126500.0, 1.0], [129700.0, 21.0], [8500.0, 40.0], [8900.0, 416.0], [9300.0, 331.0], [9700.0, 409.0], [10100.0, 86.0], [10500.0, 74.0], [10900.0, 149.0], [11700.0, 16.0], [11300.0, 432.0], [12100.0, 405.0], [12500.0, 23.0], [13300.0, 76.0], [12900.0, 125.0], [13700.0, 178.0], [14100.0, 129.0], [14500.0, 12.0], [15300.0, 29.0], [14900.0, 28.0], [15700.0, 98.0], [16100.0, 52.0], [17000.0, 10.0], [17800.0, 10.0], [18600.0, 20.0], [19400.0, 24.0], [20200.0, 4.0], [21000.0, 45.0], [21800.0, 1.0], [22600.0, 2.0], [23400.0, 89.0], [24200.0, 1.0], [25000.0, 12.0], [26600.0, 1.0], [27400.0, 6.0], [28200.0, 1.0], [29000.0, 2.0], [30600.0, 30.0], [29800.0, 2.0], [31400.0, 11.0], [32200.0, 2.0], [133500.0, 1.0], [34000.0, 2.0], [139900.0, 1.0], [35600.0, 2.0], [38800.0, 2.0], [37200.0, 21.0], [40400.0, 4.0], [43600.0, 1.0], [46800.0, 8.0], [50000.0, 1.0], [51600.0, 3.0], [53200.0, 3.0], [54800.0, 1.0], [56400.0, 1.0], [62800.0, 83.0], [64400.0, 1.0], [68000.0, 4.0], [71200.0, 1.0], [77600.0, 1.0], [84000.0, 1.0], [87200.0, 3.0], [96800.0, 3.0], [100000.0, 3.0], [106400.0, 1.0], [112800.0, 1.0], [116000.0, 2.0], [128800.0, 26.0], [136000.0, 1.0], [133700.0, 8.0], [67900.0, 2.0], [71100.0, 13.0], [74300.0, 5.0], [80700.0, 4.0], [87100.0, 2.0], [122300.0, 4.0], [128700.0, 44.0], [33500.0, 1.0], [35100.0, 1.0], [39900.0, 1.0], [41500.0, 1.0], [43100.0, 2.0], [44700.0, 6.0], [49500.0, 1.0], [51100.0, 1.0], [52700.0, 2.0], [55900.0, 1.0], [59100.0, 2.0], [62300.0, 3.0], [65500.0, 7.0], [67000.0, 13.0], [76600.0, 3.0], [83000.0, 7.0], [86200.0, 10.0], [92600.0, 2.0], [95800.0, 1.0], [99000.0, 2.0], [111800.0, 3.0], [115000.0, 2.0], [118200.0, 1.0], [127800.0, 5.0], [137300.0, 8.0], [201300.0, 1.0], [66100.0, 4.0], [69300.0, 33.0], [72500.0, 2.0], [75700.0, 1.0], [78900.0, 1.0], [82100.0, 3.0], [88500.0, 2.0], [101300.0, 3.0], [107700.0, 1.0], [114100.0, 1.0], [126900.0, 2.0], [135000.0, 3.0], [141400.0, 7.0], [17100.0, 7.0], [17900.0, 57.0], [18700.0, 6.0], [19500.0, 6.0], [20300.0, 1.0], [21100.0, 3.0], [21900.0, 10.0], [22700.0, 4.0], [23500.0, 2.0], [24300.0, 15.0], [25100.0, 52.0], [28300.0, 3.0], [29100.0, 35.0], [30700.0, 8.0], [31500.0, 21.0], [32300.0, 7.0], [132700.0, 1.0], [35800.0, 3.0], [37400.0, 70.0], [39000.0, 9.0], [42200.0, 1.0], [45400.0, 3.0], [50200.0, 1.0], [58200.0, 1.0], [59800.0, 3.0], [61400.0, 2.0], [64600.0, 3.0], [68400.0, 42.0], [71600.0, 21.0], [74800.0, 5.0], [81200.0, 2.0], [84400.0, 14.0], [87600.0, 2.0], [90800.0, 2.0], [100400.0, 16.0], [103600.0, 2.0], [106800.0, 1.0], [116400.0, 1.0], [129200.0, 25.0], [142500.0, 106.0], [68300.0, 11.0], [74700.0, 3.0], [77900.0, 5.0], [84300.0, 6.0], [87500.0, 1.0], [100300.0, 63.0], [113100.0, 1.0], [122700.0, 5.0], [129100.0, 2.0], [133800.0, 2.0], [204200.0, 1.0], [33700.0, 1.0], [35300.0, 47.0], [144300.0, 1.0], [38500.0, 1.0], [36900.0, 1.0], [40100.0, 4.0], [41700.0, 69.0], [48100.0, 6.0], [51300.0, 1.0], [54500.0, 2.0], [56100.0, 1.0], [59300.0, 2.0], [57700.0, 2.0], [62500.0, 10.0], [67400.0, 2.0], [70600.0, 3.0], [73800.0, 4.0], [77000.0, 2.0], [80200.0, 17.0], [89800.0, 2.0], [86600.0, 6.0], [93000.0, 4.0], [102600.0, 2.0], [112200.0, 1.0], [128200.0, 3.0], [133300.0, 5.0], [4300.0, 41.0], [4100.0, 100.0], [66500.0, 1.0], [4500.0, 128.0], [69700.0, 2.0], [4700.0, 47.0], [76100.0, 3.0], [5100.0, 80.0], [4900.0, 64.0], [79300.0, 18.0], [5300.0, 75.0], [5500.0, 19.0], [88900.0, 1.0], [5700.0, 135.0], [6100.0, 234.0], [5900.0, 17.0], [6300.0, 46.0], [101700.0, 7.0], [6500.0, 19.0], [6900.0, 47.0], [6700.0, 40.0], [108100.0, 1.0], [7100.0, 70.0], [7300.0, 42.0], [7500.0, 69.0], [120900.0, 5.0], [7700.0, 81.0], [7900.0, 498.0], [8100.0, 185.0], [130500.0, 23.0], [127300.0, 1.0], [8200.0, 44.0], [8600.0, 110.0], [9000.0, 24.0], [9400.0, 94.0], [10200.0, 62.0], [9800.0, 268.0], [10600.0, 466.0], [11000.0, 43.0], [11400.0, 90.0], [11800.0, 18.0], [12200.0, 24.0], [12600.0, 21.0], [13000.0, 285.0], [13400.0, 82.0], [13800.0, 285.0], [14200.0, 36.0], [14600.0, 10.0], [15000.0, 21.0], [15400.0, 42.0], [15800.0, 28.0], [16200.0, 36.0], [17200.0, 12.0], [16400.0, 1.0], [18000.0, 18.0], [18800.0, 9.0], [19600.0, 1.0], [20400.0, 3.0], [21200.0, 1.0], [22000.0, 16.0], [22800.0, 2.0], [23600.0, 1.0], [25200.0, 37.0], [27600.0, 2.0], [26800.0, 1.0], [30000.0, 2.0], [31600.0, 4.0], [32400.0, 18.0], [32800.0, 1.0], [141500.0, 13.0], [40800.0, 5.0], [39200.0, 3.0], [42400.0, 9.0], [45600.0, 3.0], [186300.0, 1.0], [48800.0, 2.0], [47200.0, 2.0], [50400.0, 4.0], [52000.0, 1.0], [53600.0, 4.0], [55200.0, 3.0], [56800.0, 1.0], [58400.0, 1.0], [60000.0, 2.0], [61600.0, 4.0], [63200.0, 1.0], [64800.0, 3.0], [65600.0, 2.0], [68800.0, 3.0], [75200.0, 1.0], [91200.0, 1.0], [100800.0, 203.0], [116800.0, 1.0], [129600.0, 40.0], [131200.0, 41.0], [208000.0, 1.0], [135300.0, 2.0], [68700.0, 2.0], [75100.0, 15.0], [81500.0, 19.0], [84700.0, 1.0], [97500.0, 1.0], [100700.0, 42.0], [107100.0, 1.0], [119900.0, 1.0], [129500.0, 1.0], [133000.0, 5.0], [152200.0, 1.0], [33900.0, 5.0], [35500.0, 1.0], [37100.0, 10.0], [40300.0, 3.0], [43500.0, 7.0], [46700.0, 1.0], [45100.0, 1.0], [48300.0, 1.0], [53100.0, 15.0], [51500.0, 5.0], [54700.0, 2.0], [56300.0, 3.0], [57900.0, 1.0], [59500.0, 4.0], [61100.0, 3.0], [62700.0, 1.0], [71000.0, 2.0], [74200.0, 4.0], [80600.0, 16.0], [83800.0, 1.0], [93400.0, 1.0], [90200.0, 1.0], [112600.0, 3.0], [115800.0, 1.0], [128600.0, 25.0], [134800.0, 2.0], [132500.0, 5.0], [151700.0, 1.0], [66900.0, 1.0], [70100.0, 3.0], [73300.0, 7.0], [76500.0, 4.0], [79700.0, 2.0], [82900.0, 8.0], [86100.0, 2.0], [95700.0, 1.0], [111700.0, 1.0], [114900.0, 1.0], [118100.0, 4.0], [136600.0, 1.0], [17300.0, 11.0], [16500.0, 2.0], [18100.0, 10.0], [18900.0, 8.0], [19700.0, 6.0], [20500.0, 5.0], [21300.0, 1.0], [22900.0, 1.0], [23700.0, 8.0], [24500.0, 9.0], [25300.0, 9.0], [26100.0, 1.0], [26900.0, 1.0], [28500.0, 2.0], [29300.0, 4.0], [30100.0, 4.0], [31700.0, 25.0], [30900.0, 1.0], [32500.0, 1.0], [34600.0, 18.0], [33000.0, 7.0], [134300.0, 1.0], [140700.0, 1.0], [36200.0, 20.0], [147100.0, 1.0], [37800.0, 14.0], [159900.0, 4.0], [39400.0, 1.0], [41000.0, 3.0], [42600.0, 7.0], [44200.0, 23.0], [45800.0, 1.0], [47400.0, 3.0], [49000.0, 10.0], [55400.0, 3.0], [60200.0, 2.0], [61800.0, 1.0], [65000.0, 10.0], [66000.0, 2.0], [69200.0, 5.0], [72400.0, 14.0], [75600.0, 4.0], [78800.0, 7.0], [82000.0, 1.0], [91600.0, 8.0], [94800.0, 2.0], [98000.0, 2.0], [101200.0, 3.0], [107600.0, 1.0], [114000.0, 5.0], [130000.0, 2.0], [133600.0, 13.0], [131300.0, 1.0], [69100.0, 30.0], [65900.0, 2.0], [72300.0, 3.0], [75500.0, 1.0], [78700.0, 2.0], [85100.0, 2.0], [101100.0, 4.0], [107500.0, 1.0], [117100.0, 2.0], [135400.0, 32.0], [34100.0, 3.0], [35700.0, 4.0], [38900.0, 29.0], [37300.0, 5.0], [42100.0, 1.0], [43700.0, 1.0], [50100.0, 4.0], [51700.0, 1.0], [53300.0, 1.0], [56500.0, 1.0], [229100.0, 2.0], [58100.0, 1.0], [61300.0, 3.0], [62900.0, 4.0], [64500.0, 3.0], [68200.0, 2.0], [71400.0, 5.0], [74600.0, 5.0], [81000.0, 2.0], [84200.0, 1.0], [93800.0, 2.0], [97000.0, 1.0], [100200.0, 50.0], [103400.0, 3.0], [109800.0, 1.0], [129000.0, 37.0], [67300.0, 4.0], [73700.0, 5.0], [70500.0, 2.0], [76900.0, 2.0], [80100.0, 17.0], [83300.0, 2.0], [86500.0, 2.0], [89700.0, 1.0], [102500.0, 1.0], [128100.0, 6.0], [8300.0, 88.0], [8700.0, 134.0], [9100.0, 50.0], [9500.0, 105.0], [9900.0, 22.0], [158200.0, 7.0], [10300.0, 66.0], [10700.0, 93.0], [11100.0, 438.0], [11500.0, 80.0], [11900.0, 100.0], [12300.0, 49.0], [12700.0, 76.0], [13100.0, 277.0], [13500.0, 6.0], [14300.0, 35.0], [13900.0, 119.0], [14700.0, 12.0], [15100.0, 2.0], [15500.0, 7.0], [15900.0, 36.0], [16300.0, 38.0], [17400.0, 39.0], [16600.0, 29.0], [18200.0, 12.0], [19000.0, 7.0], [19800.0, 4.0], [20600.0, 1.0], [22200.0, 1.0], [23000.0, 3.0], [25400.0, 71.0], [24600.0, 3.0], [26200.0, 6.0], [27000.0, 3.0], [27800.0, 33.0], [29400.0, 38.0], [30200.0, 1.0], [31800.0, 3.0], [32600.0, 3.0], [33200.0, 2.0], [36400.0, 4.0], [38000.0, 5.0], [39600.0, 3.0], [41200.0, 5.0], [42800.0, 7.0], [44400.0, 3.0], [46000.0, 1.0], [47600.0, 1.0], [50800.0, 2.0], [52400.0, 6.0], [54000.0, 4.0], [57200.0, 2.0], [55600.0, 3.0], [62000.0, 2.0], [63600.0, 2.0], [66400.0, 3.0], [72800.0, 2.0], [76000.0, 1.0], [79200.0, 28.0], [88800.0, 2.0], [95200.0, 33.0], [101600.0, 11.0], [98400.0, 1.0], [104800.0, 3.0], [120800.0, 15.0], [130400.0, 46.0], [139200.0, 2.0], [132800.0, 7.0], [66300.0, 7.0], [69500.0, 1.0], [72700.0, 11.0], [79100.0, 11.0], [85500.0, 4.0], [82300.0, 1.0], [88700.0, 6.0], [91900.0, 2.0], [98300.0, 5.0], [101500.0, 8.0], [107900.0, 1.0], [114300.0, 1.0], [117500.0, 2.0], [120700.0, 9.0], [130300.0, 9.0], [127100.0, 1.0], [134600.0, 22.0], [141000.0, 1.0], [34300.0, 4.0], [138700.0, 24.0], [145100.0, 1.0], [151500.0, 1.0], [39100.0, 47.0], [40700.0, 1.0], [42300.0, 3.0], [47100.0, 13.0], [45500.0, 3.0], [50300.0, 2.0], [51900.0, 1.0], [55100.0, 3.0], [53500.0, 2.0], [58300.0, 1.0], [59900.0, 5.0], [63100.0, 24.0], [64700.0, 1.0], [68600.0, 6.0], [71800.0, 7.0], [75000.0, 1.0], [78200.0, 1.0], [87800.0, 3.0], [91000.0, 2.0], [100600.0, 63.0], [103800.0, 1.0], [129400.0, 35.0], [200400.0, 1.0], [70900.0, 1.0], [77300.0, 1.0], [80500.0, 16.0], [90100.0, 1.0], [93300.0, 1.0], [118900.0, 1.0], [128500.0, 47.0], [138200.0, 14.0], [208600.0, 1.0], [16700.0, 18.0], [17500.0, 15.0], [18300.0, 10.0], [19100.0, 2.0], [19900.0, 29.0], [21500.0, 7.0], [20700.0, 6.0], [23100.0, 3.0], [23900.0, 1.0], [24700.0, 6.0], [25500.0, 4.0], [26300.0, 10.0], [27100.0, 2.0], [27900.0, 3.0], [30300.0, 1.0], [31100.0, 5.0], [32700.0, 1.0], [31900.0, 2.0], [33400.0, 1.0], [36600.0, 5.0], [39800.0, 23.0], [43000.0, 4.0], [41400.0, 3.0], [51000.0, 2.0], [57400.0, 2.0], [60600.0, 10.0], [62200.0, 2.0], [65400.0, 5.0], [63800.0, 1.0], [66800.0, 3.0], [73200.0, 7.0], [76400.0, 3.0], [79600.0, 12.0], [86000.0, 3.0], [89200.0, 4.0], [98800.0, 2.0], [105200.0, 1.0], [108400.0, 3.0], [114800.0, 1.0], [127600.0, 30.0], [130800.0, 2.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 229100.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 220.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 240668.0, "series": [{"data": [[0.0, 184840.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 240668.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 22324.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 220.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 2.0, "minX": 1.68286542E12, "maxY": 3000.0, "series": [{"data": [[1.6828656E12, 3000.0], [1.68286578E12, 246.9526748971193], [1.68286548E12, 3000.0], [1.68286566E12, 3000.0], [1.68286584E12, 2.0], [1.68286554E12, 3000.0], [1.68286572E12, 2947.323933863612], [1.68286542E12, 3000.0]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68286584E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 545.0, "minX": 1.0, "maxY": 229179.0, "series": [{"data": [[2.0, 118355.0], [3.0, 107462.0], [4.0, 116185.0], [6.0, 107200.5], [8.0, 103620.5], [10.0, 88302.5], [12.0, 114047.5], [13.0, 114042.0], [14.0, 114045.0], [15.0, 80307.0], [16.0, 113147.0], [18.0, 95584.5], [19.0, 80210.0], [20.0, 72274.0], [21.0, 101423.0], [22.0, 117971.0], [23.0, 107901.0], [24.0, 102482.0], [25.0, 81013.0], [26.0, 77762.0], [28.0, 81016.0], [29.0, 76114.0], [30.0, 71125.5], [31.0, 77761.0], [33.0, 77301.0], [32.0, 76110.0], [34.0, 75163.0], [37.0, 70995.0], [36.0, 65182.0], [39.0, 76806.0], [41.0, 76806.0], [40.0, 75161.0], [42.0, 75076.0], [45.0, 80061.0], [44.0, 77608.0], [47.0, 70725.0], [48.0, 76804.0], [51.0, 75979.0], [50.0, 76803.0], [52.0, 76799.0], [55.0, 73763.0], [54.0, 75153.0], [59.0, 75137.0], [58.0, 80221.33333333333], [61.0, 76783.0], [60.0, 65157.0], [63.0, 74249.0], [66.0, 75133.0], [65.0, 73844.0], [64.0, 90058.0], [71.0, 75131.0], [70.0, 82205.0], [69.0, 74338.0], [75.0, 75947.5], [73.0, 82677.5], [79.0, 76756.0], [78.0, 70680.0], [76.0, 65135.0], [83.0, 64591.0], [82.0, 65124.0], [81.0, 76754.0], [80.0, 75108.0], [87.0, 100849.0], [85.0, 70669.0], [91.0, 100833.0], [90.0, 100838.0], [89.0, 100845.0], [88.0, 100847.0], [95.0, 101435.0], [94.0, 100392.0], [92.0, 100831.0], [99.0, 100400.0], [98.0, 100715.0], [103.0, 100907.0], [101.0, 100389.0], [100.0, 100817.0], [107.0, 100834.0], [106.0, 100852.0], [105.0, 100855.0], [104.0, 100882.0], [111.0, 101214.0], [110.0, 101110.0], [109.0, 101110.0], [108.0, 101112.0], [113.0, 100799.0], [112.0, 101104.0], [118.0, 66622.0], [116.0, 102043.66666666667], [123.0, 101330.0], [122.0, 64870.0], [121.0, 97546.0], [120.0, 77051.0], [127.0, 101786.5], [125.0, 101805.0], [124.0, 101317.0], [135.0, 100880.0], [134.0, 100881.0], [132.0, 100881.0], [131.0, 100879.0], [130.0, 100262.0], [129.0, 100220.0], [128.0, 100840.0], [143.0, 100815.0], [142.0, 100861.33333333333], [141.0, 100861.0], [138.0, 100929.0], [137.0, 100955.0], [136.0, 100882.0], [151.0, 86635.0], [150.0, 86643.0], [148.0, 86643.0], [147.0, 100481.0], [146.0, 101054.0], [145.0, 229178.0], [144.0, 229179.0], [159.0, 63186.0], [158.0, 63187.0], [156.0, 63184.0], [155.0, 63191.0], [153.0, 86629.0], [152.0, 86609.0], [167.0, 63177.0], [165.0, 63181.0], [164.0, 63182.0], [163.0, 63185.0], [161.0, 63183.0], [175.0, 74851.0], [173.0, 84744.0], [172.0, 63164.0], [171.0, 63172.5], [169.0, 63174.0], [183.0, 102807.0], [182.0, 101532.0], [181.0, 102479.0], [180.0, 100489.0], [178.0, 100525.0], [177.0, 84394.0], [176.0, 74850.0], [191.0, 82999.5], [189.0, 83000.5], [187.0, 83002.0], [185.0, 83383.0], [184.0, 102549.0], [199.0, 95297.0], [198.0, 84414.0], [197.0, 82989.0], [195.0, 82994.0], [194.0, 82994.0], [193.0, 82996.0], [192.0, 82997.0], [205.0, 95296.0], [204.0, 95295.0], [202.0, 95297.0], [215.0, 95288.0], [213.0, 95293.0], [212.0, 95294.0], [211.0, 95294.5], [209.0, 95295.0], [208.0, 95295.0], [223.0, 95273.0], [222.0, 95275.0], [221.0, 95278.0], [220.0, 95278.0], [219.0, 95279.0], [218.0, 95280.0], [217.0, 95283.0], [216.0, 95286.0], [230.0, 95257.0], [229.0, 95259.0], [228.0, 95260.0], [227.0, 95266.66666666667], [224.0, 95272.0], [239.0, 84441.5], [238.0, 84441.0], [236.0, 84442.0], [234.0, 84443.0], [245.0, 64858.0], [244.0, 85563.0], [243.0, 84430.0], [242.0, 84435.0], [241.0, 84435.0], [240.0, 84438.0], [255.0, 80223.0], [252.0, 80285.0], [251.0, 91312.0], [250.0, 91319.0], [249.0, 91318.0], [248.0, 91320.66666666667], [268.0, 80191.5], [271.0, 80180.0], [270.0, 80184.0], [269.0, 80189.5], [265.0, 80224.0], [263.0, 80217.0], [256.0, 80224.5], [259.0, 80224.0], [257.0, 80226.0], [262.0, 80219.0], [261.0, 80221.0], [260.0, 80219.0], [284.0, 79320.5], [286.0, 79326.0], [287.0, 79318.0], [285.0, 79317.0], [282.0, 79322.33333333333], [280.0, 79319.0], [279.0, 79325.0], [275.0, 80183.75], [278.0, 79321.0], [276.0, 80139.0], [301.0, 79292.0], [303.0, 79286.0], [300.0, 79292.0], [291.0, 63275.5], [290.0, 79318.0], [299.0, 79296.0], [298.0, 79298.0], [297.0, 79309.0], [296.0, 63271.0], [295.0, 63316.0], [293.0, 79319.0], [292.0, 79324.0], [307.0, 79275.0], [318.0, 79195.0], [316.0, 79230.0], [315.0, 79231.0], [313.0, 80129.0], [312.0, 79174.0], [311.0, 79654.0], [309.0, 80134.0], [306.0, 63716.0], [304.0, 79287.0], [334.0, 90531.5], [335.0, 92256.0], [332.0, 88796.0], [323.0, 79193.0], [322.0, 79194.66666666667], [320.0, 79194.5], [331.0, 88796.5], [330.0, 92267.0], [328.0, 47119.0], [327.0, 76496.0], [325.0, 79184.0], [324.0, 79192.0], [348.0, 71661.0], [350.0, 71664.0], [351.0, 71662.0], [349.0, 71664.0], [346.0, 71659.5], [344.0, 71663.33333333333], [341.0, 47126.0], [337.0, 60506.0], [336.0, 88785.0], [339.0, 47126.0], [338.0, 63143.0], [355.0, 71659.5], [365.0, 73308.0], [366.0, 86235.0], [364.0, 73320.0], [362.0, 73325.0], [361.0, 73352.5], [359.0, 72501.0], [357.0, 71649.0], [356.0, 71655.0], [353.0, 71658.0], [352.0, 71651.0], [382.0, 70533.0], [383.0, 72455.0], [381.0, 72676.0], [379.0, 72553.5], [377.0, 56905.5], [376.0, 72460.0], [375.0, 72687.0], [374.0, 72556.5], [371.0, 72574.0], [369.0, 72559.0], [368.0, 86234.0], [398.0, 72674.0], [399.0, 86211.0], [397.0, 86217.0], [396.0, 66438.0], [395.0, 72415.0], [393.0, 79338.5], [392.0, 72473.0], [390.0, 72681.0], [384.0, 86229.0], [386.0, 73742.0], [385.0, 72674.0], [389.0, 72675.0], [388.0, 72553.0], [403.0, 86207.0], [415.0, 60895.5], [413.0, 73380.0], [402.0, 35616.0], [401.0, 72654.0], [400.0, 72664.0], [411.0, 79290.0], [409.0, 36643.0], [408.0, 73737.0], [407.0, 51036.0], [406.0, 36646.0], [405.0, 86202.0], [404.0, 86203.0], [431.0, 44905.666666666664], [428.0, 34634.0], [418.0, 72414.0], [417.0, 41082.0], [416.0, 42233.0], [427.0, 34635.0], [426.0, 35537.0], [425.0, 74302.0], [424.0, 74304.0], [423.0, 58697.0], [421.0, 64470.5], [420.0, 77639.0], [447.0, 74585.0], [445.0, 64638.5], [434.0, 38201.5], [433.0, 45079.0], [443.0, 71415.0], [442.0, 76684.0], [441.0, 60017.0], [440.0, 39700.0], [439.0, 34633.0], [438.0, 71819.0], [437.0, 51405.333333333336], [451.0, 55957.0], [463.0, 71789.0], [462.0, 59604.333333333336], [459.0, 72750.0], [458.0, 64600.333333333336], [457.0, 37332.0], [454.0, 53032.0], [452.0, 34615.0], [449.0, 34623.0], [448.0, 56997.0], [478.0, 54573.5], [476.0, 53005.0], [475.0, 34596.0], [473.0, 72740.0], [472.0, 53026.5], [471.0, 35153.0], [469.0, 53127.0], [467.0, 53674.5], [465.0, 38173.0], [483.0, 82292.0], [493.0, 39101.0], [492.0, 39102.0], [491.0, 47418.5], [489.0, 80362.0], [488.0, 50001.0], [486.0, 59339.0], [484.0, 76624.0], [482.0, 80001.5], [480.0, 67659.0], [510.0, 83137.0], [511.0, 49030.0], [509.0, 65980.0], [498.0, 69344.0], [497.0, 87675.0], [496.0, 81318.33333333333], [507.0, 58997.0], [506.0, 34160.0], [505.0, 70175.0], [504.0, 87210.0], [503.0, 59742.5], [501.0, 75667.0], [500.0, 78863.5], [538.0, 70235.66666666667], [531.0, 70418.0], [542.0, 65704.0], [541.0, 82129.0], [539.0, 88200.0], [527.0, 34127.0], [512.0, 70443.0], [514.0, 70681.0], [513.0, 49025.0], [516.0, 70440.0], [515.0, 83096.0], [519.0, 74700.0], [518.0, 69131.0], [526.0, 83113.0], [525.0, 49012.0], [524.0, 45210.5], [522.0, 68567.33333333333], [535.0, 87171.0], [534.0, 77082.5], [532.0, 49005.0], [530.0, 87229.0], [529.0, 83097.0], [573.0, 131758.0], [574.0, 100651.0], [561.0, 200458.0], [560.0, 201359.0], [563.0, 75506.0], [562.0, 76514.0], [565.0, 66349.0], [564.0, 64637.0], [572.0, 61653.0], [571.0, 73275.0], [570.0, 74285.0], [569.0, 61613.0], [568.0, 64250.0], [548.0, 88592.0], [547.0, 82121.0], [545.0, 69440.0], [544.0, 78919.0], [559.0, 68543.0], [558.0, 73772.33333333333], [555.0, 86232.0], [554.0, 72544.0], [553.0, 88561.0], [552.0, 75328.25], [567.0, 62622.0], [566.0, 65536.0], [604.0, 52723.0], [607.0, 186300.0], [593.0, 57426.0], [592.0, 57461.0], [595.0, 57761.0], [594.0, 55601.0], [597.0, 69235.0], [596.0, 54592.0], [606.0, 51713.0], [605.0, 52722.0], [603.0, 52837.0], [602.0, 56253.0], [601.0, 54733.0], [600.0, 55583.0], [591.0, 60562.0], [579.0, 101976.8], [582.0, 102308.0], [581.0, 101476.5], [590.0, 61471.0], [589.0, 102304.75], [585.0, 101475.5], [584.0, 102306.0], [599.0, 53598.0], [598.0, 68229.0], [632.0, 57186.0], [628.0, 54165.0], [631.0, 57188.0], [630.0, 51564.0], [629.0, 53157.0], [627.0, 53103.0], [626.0, 54640.5], [624.0, 61179.0], [623.0, 82661.0], [609.0, 52822.0], [608.0, 51559.0], [611.0, 53753.0], [610.0, 184165.0], [613.0, 51597.0], [612.0, 51598.0], [615.0, 50591.0], [614.0, 60151.0], [622.0, 56131.0], [621.0, 54654.0], [620.0, 86343.0], [619.0, 55661.0], [618.0, 58132.0], [617.0, 59159.0], [616.0, 59160.0], [693.0, 53985.0], [692.0, 56555.0], [732.0, 20967.0], [728.0, 37384.0], [742.0, 6843.5], [756.0, 5512.750000000001], [754.0, 13929.75], [752.0, 545.0], [751.0, 547.0], [736.0, 8538.611111111111], [741.0, 547.0], [739.0, 551.0], [738.0, 6981.580000000001], [737.0, 8737.857142857141], [1212.0, 975.6], [1215.0, 981.5], [1194.0, 984.5], [1191.0, 959.0], [1186.0, 980.0], [1199.0, 982.5], [1195.0, 984.0], [1214.0, 986.0], [1213.0, 985.0], [1209.0, 976.6666666666666], [1208.0, 983.0], [1206.0, 961.0], [1205.0, 983.5], [1204.0, 984.0], [1200.0, 974.0], [1182.0, 976.25], [1155.0, 983.0], [1153.0, 960.0], [1181.0, 985.0], [1253.0, 960.5], [1259.0, 959.5], [1275.0, 975.0], [1274.0, 980.0], [1231.0, 980.3333333333334], [1230.0, 960.0], [1229.0, 958.0], [1224.0, 959.0], [1226.0, 968.5], [1223.0, 959.0], [1218.0, 981.0], [1217.0, 981.0], [1242.0, 956.0], [1233.0, 980.0], [1235.0, 983.0], [1262.0, 958.8333333333334], [1261.0, 967.0], [1260.0, 957.0], [1256.0, 956.0], [1255.0, 959.3333333333334], [1254.0, 958.6666666666666], [1251.0, 958.0], [1248.0, 982.0], [1294.0, 968.5], [1300.0, 956.5], [1302.0, 960.5], [1303.0, 958.2], [1306.0, 959.0], [1304.0, 957.0], [1309.0, 959.0], [1308.0, 959.0], [1311.0, 959.1428571428571], [1310.0, 959.0], [1307.0, 958.75], [1295.0, 958.0], [1330.0, 978.0], [1332.0, 963.0], [1328.0, 959.0], [1292.0, 959.0], [1289.0, 962.0], [1336.0, 958.0], [1335.0, 958.3333333333334], [1343.0, 975.0], [1327.0, 956.0], [1319.0, 969.7], [1321.0, 980.5], [1318.0, 960.0], [1317.0, 963.4444444444445], [1316.0, 958.6666666666666], [1314.0, 958.6], [1313.0, 958.625], [1312.0, 955.0], [1404.0, 957.5555555555555], [1407.0, 957.4285714285714], [1380.0, 958.0], [1383.0, 955.0], [1381.0, 959.0], [1387.0, 955.0], [1385.0, 977.0], [1390.0, 957.0], [1388.0, 958.0], [1406.0, 956.0], [1405.0, 963.25], [1403.0, 959.0], [1402.0, 956.0], [1401.0, 955.0], [1400.0, 957.4], [1399.0, 955.0], [1398.0, 958.5], [1397.0, 958.25], [1394.0, 955.0], [1373.0, 955.0], [1344.0, 957.3333333333334], [1345.0, 957.75], [1346.0, 959.25], [1350.0, 956.0], [1349.0, 956.8333333333334], [1352.0, 958.6666666666666], [1351.0, 957.5], [1354.0, 957.25], [1353.0, 957.8636363636363], [1357.0, 957.0], [1356.0, 959.0], [1355.0, 958.2727272727273], [1359.0, 958.2857142857142], [1358.0, 959.6], [1372.0, 955.0], [1369.0, 954.3333333333334], [1368.0, 957.0], [1367.0, 971.3333333333334], [1366.0, 957.6666666666666], [1365.0, 955.6666666666666], [1364.0, 958.0], [1363.0, 957.0], [1362.0, 961.5], [1361.0, 957.25], [1360.0, 956.0], [1468.0, 957.4], [1471.0, 957.0], [1445.0, 958.0], [1440.0, 959.0], [1447.0, 957.0], [1446.0, 964.0], [1451.0, 955.0], [1449.0, 956.0], [1453.0, 955.6], [1452.0, 957.0], [1455.0, 954.0], [1454.0, 955.0], [1470.0, 955.75], [1469.0, 957.0], [1466.0, 955.1666666666666], [1464.0, 957.6666666666666], [1463.0, 954.0], [1462.0, 955.8], [1461.0, 955.0], [1458.0, 957.0], [1456.0, 956.0], [1423.0, 957.1500000000002], [1422.0, 957.3333333333334], [1420.0, 957.0952380952381], [1419.0, 957.0], [1418.0, 960.0000000000001], [1416.0, 956.5454545454545], [1414.0, 960.8333333333333], [1411.0, 956.5], [1412.0, 957.0], [1410.0, 957.3333333333334], [1409.0, 957.5], [1438.0, 956.0], [1434.0, 958.0], [1431.0, 956.5], [1428.0, 958.0], [1426.0, 958.0], [1506.0, 955.7777777777778], [1511.0, 958.7142857142858], [1534.0, 967.0], [1535.0, 957.5], [1504.0, 956.75], [1505.0, 956.0], [1507.0, 954.0], [1510.0, 957.5], [1509.0, 956.0], [1533.0, 974.0], [1525.0, 956.0], [1522.0, 957.0], [1487.0, 955.0], [1486.0, 955.0], [1482.0, 958.1428571428571], [1480.0, 957.0], [1481.0, 957.5], [1478.0, 956.9999999999999], [1476.0, 981.0], [1475.0, 958.3636363636364], [1473.0, 956.0], [1472.0, 955.7499999999999], [1503.0, 955.0], [1502.0, 956.1666666666667], [1501.0, 957.8], [1500.0, 955.5], [1499.0, 956.0], [1498.0, 958.0], [1497.0, 957.0], [1495.0, 955.0], [1491.0, 955.0], [1490.0, 954.5], [1489.0, 956.0], [1517.0, 952.0], [1516.0, 965.0], [1512.0, 976.0], [1543.0, 968.1428571428571], [1560.0, 978.5], [1566.0, 1724.6973684210525], [1537.0, 966.5], [1539.0, 973.2], [1538.0, 955.0], [1542.0, 970.8333333333334], [1541.0, 958.0], [1544.0, 967.5], [1546.0, 967.1428571428571], [1545.0, 975.9], [1549.0, 974.1111111111112], [1547.0, 976.0], [1563.0, 978.0], [1562.0, 976.0], [1555.0, 957.0], [1554.0, 964.75], [1553.0, 956.2857142857143], [1552.0, 968.0], [1551.0, 972.2857142857142], [1550.0, 971.8333333333334], [2742.0, 1034.0], [2690.0, 1039.0], [2688.0, 1035.3111111111111], [2744.0, 1402.0], [2734.0, 1036.0], [2732.0, 3135.4583333333335], [2730.0, 1141.0189274447941], [2728.0, 1028.6296296296296], [3000.0, 1668.7116487801004], [2687.0, 1035.643504531721], [2739.0, 1026.0], [2749.0, 4746.181818181818], [2743.0, 1027.0], [2741.0, 1028.1666666666667], [2737.0, 5619.714285714286], [2733.0, 1031.111111111111], [2731.0, 1027.8], [2729.0, 1027.2692307692307], [2727.0, 1153.5115207373274], [1.0, 147154.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[2991.9238369653544, 1775.781391445601]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 3000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 25.2, "minX": 1.68286542E12, "maxY": 1141657.6833333333, "series": [{"data": [[1.6828656E12, 971589.6], [1.68286578E12, 5205.733333333334], [1.68286548E12, 1017162.7333333333], [1.68286566E12, 1141657.6833333333], [1.68286584E12, 31.583333333333332], [1.68286554E12, 1073887.95], [1.68286572E12, 516183.88333333336], [1.68286542E12, 639943.7333333333]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.6828656E12, 679963.2], [1.68286578E12, 4082.4], [1.68286548E12, 710682.0], [1.68286566E12, 801595.2], [1.68286584E12, 25.2], [1.68286554E12, 753900.0], [1.68286572E12, 362233.2], [1.68286542E12, 449307.6]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68286584E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 839.6351876775825, "minX": 1.68286542E12, "maxY": 124323.66666666667, "series": [{"data": [[1.6828656E12, 1931.9735961782926], [1.68286578E12, 79025.31275720165], [1.68286548E12, 1293.308384858648], [1.68286566E12, 1925.1981493901255], [1.68286584E12, 124323.66666666667], [1.68286554E12, 2194.9850039551307], [1.68286572E12, 1509.5544604967195], [1.68286542E12, 839.6351876775825]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68286584E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 838.6784993270546, "minX": 1.68286542E12, "maxY": 124323.66666666667, "series": [{"data": [[1.6828656E12, 1895.9634370640933], [1.68286578E12, 79025.30864197541], [1.68286548E12, 1206.6260324727402], [1.68286566E12, 1925.1751163180559], [1.68286584E12, 124323.66666666667], [1.68286554E12, 2183.861247590704], [1.68286572E12, 1509.5492428634352], [1.68286542E12, 838.6784993270546]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68286584E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 33.02366532077235, "minX": 1.68286542E12, "maxY": 32399.0, "series": [{"data": [[1.6828656E12, 541.3803187221461], [1.68286578E12, 31153.4691358025], [1.68286548E12, 99.91912493510259], [1.68286566E12, 542.5387202917386], [1.68286584E12, 32399.0], [1.68286554E12, 822.8242365497961], [1.68286572E12, 101.07091343366612], [1.68286542E12, 33.02366532077235]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68286584E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 13.0, "minX": 1.68286542E12, "maxY": 229179.0, "series": [{"data": [[1.6828656E12, 208665.0], [1.68286578E12, 229179.0], [1.68286548E12, 94856.0], [1.68286566E12, 204277.0], [1.68286584E12, 147154.0], [1.68286554E12, 153498.0], [1.68286572E12, 201359.0], [1.68286542E12, 34382.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.6828656E12, 927.0], [1.68286578E12, 100861.0], [1.68286548E12, 219.0], [1.68286566E12, 1115.0], [1.68286584E12, 147154.0], [1.68286554E12, 786.0], [1.68286572E12, 1140.0], [1.68286542E12, 484.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.6828656E12, 72187.99], [1.68286578E12, 115400.26], [1.68286548E12, 14096.0], [1.68286566E12, 2632.9900000000016], [1.68286584E12, 147154.0], [1.68286554E12, 10362.0], [1.68286572E12, 36612.93000000001], [1.68286542E12, 23426.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.6828656E12, 1032.0], [1.68286578E12, 101523.25], [1.68286548E12, 10858.0], [1.68286566E12, 1168.0], [1.68286584E12, 147154.0], [1.68286554E12, 833.0], [1.68286572E12, 1204.0], [1.68286542E12, 7981.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.6828656E12, 36.0], [1.68286578E12, 34577.0], [1.68286548E12, 13.0], [1.68286566E12, 16.0], [1.68286584E12, 107462.0], [1.68286554E12, 38.0], [1.68286572E12, 33.0], [1.68286542E12, 47.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.6828656E12, 813.0], [1.68286578E12, 79292.0], [1.68286548E12, 104.0], [1.68286566E12, 1000.0], [1.68286584E12, 118355.0], [1.68286554E12, 650.0], [1.68286572E12, 1035.0], [1.68286542E12, 334.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68286584E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 48.0, "minX": 1.0, "maxY": 158271.0, "series": [{"data": [[2.0, 59736.5], [3.0, 79231.0], [4.0, 39318.0], [5.0, 114045.0], [6.0, 43162.0], [7.0, 78746.0], [8.0, 100861.5], [9.0, 79194.0], [10.0, 77761.5], [11.0, 100517.0], [12.0, 139.0], [13.0, 23761.0], [14.0, 82999.5], [19.0, 102305.0], [20.0, 63182.5], [23.0, 66752.5], [27.0, 71662.0], [31.0, 64017.0], [32.0, 80221.0], [37.0, 79318.0], [41.0, 1039.0], [45.0, 95278.0], [46.0, 70443.5], [53.0, 75155.0], [54.0, 53138.0], [58.0, 155.0], [61.0, 72654.0], [63.0, 50001.0], [71.0, 6181.0], [68.0, 7899.5], [86.0, 36349.0], [89.0, 105.0], [106.0, 94.0], [108.0, 48.0], [149.0, 109.0], [178.0, 10464.0], [184.0, 149.0], [195.0, 141.0], [206.0, 8428.0], [202.0, 127.0], [223.0, 6639.0], [217.0, 135.0], [216.0, 157.0], [234.0, 690.5], [244.0, 93.0], [247.0, 9213.0], [294.0, 100108.0], [304.0, 229.0], [335.0, 241.0], [329.0, 198.0], [352.0, 13122.0], [375.0, 81.0], [369.0, 215.0], [368.0, 721.0], [397.0, 173.0], [388.0, 224.0], [468.0, 50.0], [479.0, 9316.0], [542.0, 61.0], [537.0, 13095.0], [531.0, 697.0], [607.0, 368.0], [668.0, 273.0], [672.0, 394.0], [750.0, 350.0], [741.0, 529.0], [815.0, 76.0], [830.0, 12045.0], [881.0, 587.0], [911.0, 280.0], [916.0, 446.0], [899.0, 584.0], [928.0, 460.0], [934.0, 958.0], [983.0, 782.0], [996.0, 316.0], [1001.0, 73.0], [1039.0, 366.0], [1083.0, 480.0], [1046.0, 685.0], [1085.0, 596.0], [1145.0, 470.0], [1184.0, 527.0], [1195.0, 635.0], [1203.0, 665.0], [1252.0, 713.0], [1232.0, 824.0], [1249.0, 677.0], [1278.0, 580.0], [1289.0, 479.0], [1302.0, 482.0], [1315.0, 620.0], [1294.0, 594.0], [1282.0, 794.0], [1326.0, 1040.0], [1381.0, 299.0], [1350.0, 622.0], [1374.0, 802.0], [1402.0, 637.0], [1369.0, 784.0], [1394.0, 708.0], [1400.0, 750.0], [1347.0, 767.0], [1422.0, 382.0], [1416.0, 306.0], [1427.0, 295.0], [1454.0, 744.0], [1442.0, 827.0], [1419.0, 628.0], [1455.0, 713.0], [1471.0, 752.0], [1465.0, 694.0], [1522.0, 305.0], [1497.0, 546.5], [1504.0, 448.5], [1500.0, 52.0], [1501.0, 603.0], [1502.0, 727.0], [1475.0, 654.0], [1505.0, 67.0], [1490.0, 685.0], [1489.0, 636.0], [1534.0, 600.0], [1516.0, 685.0], [1508.0, 639.0], [1493.0, 933.0], [1494.0, 820.0], [1544.0, 344.5], [1567.0, 160.0], [1599.0, 305.0], [1554.0, 506.0], [1585.0, 54.0], [1546.0, 959.0], [1596.0, 759.0], [1543.0, 688.0], [1562.0, 704.0], [1559.0, 789.0], [1575.0, 741.0], [1573.0, 474.0], [1619.0, 447.0], [1649.0, 95.0], [1611.0, 887.0], [1639.0, 772.0], [1629.0, 653.0], [1626.0, 550.0], [1697.0, 258.0], [1698.0, 311.0], [1684.0, 657.0], [1719.0, 576.0], [1679.0, 699.0], [1671.0, 806.0], [1696.0, 707.0], [1713.0, 723.0], [1728.0, 317.0], [1729.0, 69.0], [1739.0, 63.0], [1742.0, 472.0], [1789.0, 601.0], [1755.0, 1099.0], [1775.0, 1030.0], [1731.0, 892.0], [1836.0, 277.0], [1854.0, 434.0], [1853.0, 400.0], [1796.0, 576.0], [1818.0, 728.0], [1844.0, 794.0], [1802.0, 1014.0], [1865.0, 295.0], [1872.0, 56.0], [1864.0, 652.0], [1905.0, 767.0], [1916.0, 821.0], [1873.0, 647.0], [1882.0, 720.0], [1895.0, 1048.0], [1972.0, 618.0], [1960.0, 512.0], [1965.0, 313.0], [1951.0, 303.0], [1964.0, 307.0], [1962.0, 898.0], [1945.0, 710.0], [1968.0, 705.0], [1942.0, 664.0], [1978.0, 711.0], [1952.0, 630.0], [2022.0, 243.0], [2031.0, 308.0], [2012.0, 347.0], [2027.0, 383.0], [1992.0, 48.0], [2043.0, 814.0], [1987.0, 980.0], [2044.0, 891.5], [1988.0, 1081.0], [2051.0, 58.0], [2155.0, 374.0], [2118.0, 336.0], [2138.0, 287.0], [2090.0, 380.0], [2173.0, 562.0], [2092.0, 377.0], [2049.0, 57.0], [2095.0, 959.0], [2089.0, 52.0], [2081.0, 929.0], [2165.0, 57.0], [2169.0, 925.0], [2160.0, 640.0], [2162.0, 920.0], [2170.0, 156.0], [2172.0, 267.5], [2062.0, 66.0], [2053.0, 824.0], [2067.0, 152.0], [2078.0, 152.0], [2079.0, 90.0], [2147.0, 106.0], [2153.0, 1064.0], [2154.0, 1012.0], [2188.0, 811.0], [2176.0, 700.0], [2184.0, 501.0], [2196.0, 322.0], [2228.0, 403.0], [2226.0, 66.0], [2205.0, 67.0], [2207.0, 148.0], [2293.0, 797.0], [2259.0, 1054.0], [2278.0, 716.5], [2282.0, 803.0], [2276.0, 1064.0], [2189.0, 55.0], [2208.0, 904.0], [2231.0, 98.0], [2360.0, 290.0], [2355.0, 289.0], [2358.0, 277.0], [2407.0, 284.0], [2403.0, 295.0], [2326.0, 285.0], [2335.0, 552.0], [2412.0, 363.0], [2377.0, 693.0], [2381.0, 327.0], [2398.0, 266.0], [2325.0, 382.0], [2311.0, 48.0], [2306.0, 680.0], [2324.0, 513.0], [2336.0, 150.0], [2340.0, 1036.0], [2344.0, 160.0], [2559.0, 635.0], [2478.0, 381.0], [2514.0, 624.0], [2511.0, 789.0], [2499.0, 555.0], [2485.0, 590.0], [2537.0, 631.0], [2446.0, 1037.0], [2447.0, 1048.0], [2658.0, 705.0], [2592.0, 774.0], [2626.0, 803.0], [2661.0, 800.0], [2576.0, 582.0], [2672.0, 694.0], [2622.0, 686.0], [2590.0, 1008.0], [2674.0, 1111.0], [2801.0, 643.0], [2784.0, 680.0], [2744.0, 773.0], [2701.0, 819.0], [2782.0, 697.0], [2741.0, 791.0], [2839.0, 364.0], [2938.0, 833.0], [2925.0, 749.0], [3423.0, 758.0], [3531.0, 1059.0], [1.0, 101423.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2089.0, 62851.0], [2079.0, 25333.0], [2293.0, 77972.0], [2360.0, 7046.0], [1232.0, 28191.0], [2626.0, 14915.0], [178.0, 14343.0], [1619.0, 39105.5], [1719.0, 142161.0], [7.0, 158271.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 3531.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 114045.0, "series": [{"data": [[2.0, 59736.5], [3.0, 79231.0], [4.0, 39318.0], [5.0, 114045.0], [6.0, 43162.0], [7.0, 78746.0], [8.0, 100861.5], [9.0, 79194.0], [10.0, 77761.5], [11.0, 100517.0], [12.0, 139.0], [13.0, 23761.0], [14.0, 82999.5], [19.0, 102305.0], [20.0, 63182.5], [23.0, 66752.5], [27.0, 71662.0], [31.0, 64017.0], [32.0, 80221.0], [37.0, 79318.0], [41.0, 1039.0], [45.0, 95278.0], [46.0, 70443.5], [53.0, 75155.0], [54.0, 53138.0], [58.0, 155.0], [61.0, 72654.0], [63.0, 50001.0], [71.0, 6181.0], [68.0, 7899.5], [86.0, 36349.0], [89.0, 105.0], [106.0, 94.0], [108.0, 48.0], [149.0, 109.0], [178.0, 10464.0], [184.0, 149.0], [195.0, 141.0], [206.0, 8428.0], [202.0, 127.0], [223.0, 6639.0], [217.0, 135.0], [216.0, 157.0], [234.0, 685.5], [244.0, 93.0], [247.0, 9213.0], [294.0, 100108.0], [304.0, 229.0], [335.0, 241.0], [329.0, 198.0], [352.0, 13122.0], [375.0, 81.0], [369.0, 215.0], [368.0, 721.0], [397.0, 173.0], [388.0, 224.0], [468.0, 50.0], [479.0, 9316.0], [542.0, 61.0], [537.0, 13095.0], [531.0, 697.0], [607.0, 368.0], [668.0, 273.0], [672.0, 394.0], [750.0, 350.0], [741.0, 529.0], [815.0, 76.0], [830.0, 12045.0], [881.0, 587.0], [911.0, 280.0], [916.0, 446.0], [899.0, 584.0], [928.0, 460.0], [934.0, 958.0], [983.0, 782.0], [996.0, 316.0], [1001.0, 73.0], [1039.0, 366.0], [1083.0, 480.0], [1046.0, 685.0], [1085.0, 596.0], [1145.0, 470.0], [1184.0, 527.0], [1195.0, 635.0], [1203.0, 665.0], [1252.0, 713.0], [1232.0, 824.0], [1249.0, 677.0], [1278.0, 580.0], [1289.0, 478.0], [1302.0, 482.0], [1315.0, 620.0], [1294.0, 594.0], [1282.0, 794.0], [1326.0, 1040.0], [1381.0, 299.0], [1350.0, 622.0], [1374.0, 802.0], [1402.0, 637.0], [1369.0, 784.0], [1394.0, 708.0], [1400.0, 750.0], [1347.0, 767.0], [1422.0, 382.0], [1416.0, 306.0], [1427.0, 295.0], [1454.0, 744.0], [1442.0, 827.0], [1419.0, 628.0], [1455.0, 713.0], [1471.0, 752.0], [1465.0, 694.0], [1522.0, 305.0], [1497.0, 546.5], [1504.0, 448.5], [1500.0, 52.0], [1501.0, 603.0], [1502.0, 727.0], [1475.0, 654.0], [1505.0, 67.0], [1490.0, 685.0], [1489.0, 636.0], [1534.0, 600.0], [1516.0, 685.0], [1508.0, 639.0], [1493.0, 933.0], [1494.0, 820.0], [1544.0, 344.5], [1567.0, 160.0], [1599.0, 305.0], [1554.0, 506.0], [1585.0, 54.0], [1546.0, 959.0], [1596.0, 759.0], [1543.0, 688.0], [1562.0, 704.0], [1559.0, 789.0], [1575.0, 741.0], [1573.0, 474.0], [1619.0, 447.0], [1649.0, 95.0], [1611.0, 887.0], [1639.0, 772.0], [1629.0, 653.0], [1626.0, 550.0], [1697.0, 258.0], [1698.0, 311.0], [1684.0, 657.0], [1719.0, 576.0], [1679.0, 699.0], [1671.0, 806.0], [1696.0, 707.0], [1713.0, 723.0], [1728.0, 317.0], [1729.0, 69.0], [1739.0, 63.0], [1742.0, 472.0], [1789.0, 601.0], [1755.0, 1099.0], [1775.0, 1030.0], [1731.0, 892.0], [1836.0, 277.0], [1854.0, 434.0], [1853.0, 400.0], [1796.0, 576.0], [1818.0, 728.0], [1844.0, 794.0], [1802.0, 1014.0], [1865.0, 295.0], [1872.0, 56.0], [1864.0, 652.0], [1905.0, 767.0], [1916.0, 821.0], [1873.0, 647.0], [1882.0, 720.0], [1895.0, 1048.0], [1972.0, 618.0], [1960.0, 512.0], [1965.0, 313.0], [1951.0, 303.0], [1964.0, 307.0], [1962.0, 898.0], [1945.0, 710.0], [1968.0, 705.0], [1942.0, 664.0], [1978.0, 711.0], [1952.0, 630.0], [2022.0, 243.0], [2031.0, 308.0], [2012.0, 347.0], [2027.0, 383.0], [1992.0, 48.0], [2043.0, 814.0], [1987.0, 980.0], [2044.0, 891.5], [1988.0, 1081.0], [2051.0, 58.0], [2155.0, 374.0], [2118.0, 336.0], [2138.0, 287.0], [2090.0, 380.0], [2173.0, 562.0], [2092.0, 377.0], [2049.0, 57.0], [2095.0, 959.0], [2089.0, 52.0], [2081.0, 929.0], [2165.0, 57.0], [2169.0, 925.0], [2160.0, 640.0], [2162.0, 920.0], [2170.0, 156.0], [2172.0, 267.5], [2062.0, 66.0], [2053.0, 824.0], [2067.0, 152.0], [2078.0, 152.0], [2079.0, 90.0], [2147.0, 106.0], [2153.0, 1064.0], [2154.0, 1012.0], [2188.0, 811.0], [2176.0, 700.0], [2184.0, 501.0], [2196.0, 322.0], [2228.0, 403.0], [2226.0, 66.0], [2205.0, 67.0], [2207.0, 148.0], [2293.0, 797.0], [2259.0, 1054.0], [2278.0, 716.5], [2282.0, 803.0], [2276.0, 1064.0], [2189.0, 55.0], [2208.0, 904.0], [2231.0, 98.0], [2360.0, 290.0], [2355.0, 289.0], [2358.0, 277.0], [2407.0, 284.0], [2403.0, 295.0], [2326.0, 285.0], [2335.0, 552.0], [2412.0, 363.0], [2377.0, 693.0], [2381.0, 327.0], [2398.0, 266.0], [2325.0, 382.0], [2311.0, 48.0], [2306.0, 680.0], [2324.0, 513.0], [2336.0, 150.0], [2340.0, 1036.0], [2344.0, 160.0], [2559.0, 635.0], [2478.0, 381.0], [2514.0, 624.0], [2511.0, 789.0], [2499.0, 555.0], [2485.0, 590.0], [2537.0, 631.0], [2446.0, 1037.0], [2447.0, 1048.0], [2658.0, 705.0], [2592.0, 774.0], [2626.0, 803.0], [2661.0, 800.0], [2576.0, 582.0], [2672.0, 694.0], [2622.0, 686.0], [2590.0, 1008.0], [2674.0, 1111.0], [2801.0, 643.0], [2784.0, 680.0], [2744.0, 773.0], [2701.0, 819.0], [2782.0, 697.0], [2741.0, 791.0], [2839.0, 364.0], [2938.0, 833.0], [2925.0, 749.0], [3423.0, 758.0], [3531.0, 1059.0], [1.0, 101423.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2089.0, 0.0], [2079.0, 0.0], [2293.0, 0.0], [2360.0, 0.0], [1232.0, 0.0], [2626.0, 0.0], [178.0, 0.0], [1619.0, 0.0], [1719.0, 0.0], [7.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 3531.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 676.8666666666667, "minX": 1.68286542E12, "maxY": 1615.6666666666667, "series": [{"data": [[1.6828656E12, 1325.0], [1.68286548E12, 1429.0666666666666], [1.68286566E12, 1615.6666666666667], [1.68286554E12, 1495.9333333333334], [1.68286572E12, 676.8666666666667], [1.68286542E12, 925.0]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68286572E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.05, "minX": 1.68286542E12, "maxY": 1590.4666666666667, "series": [{"data": [[1.6828656E12, 1349.1333333333334], [1.68286578E12, 8.1], [1.68286548E12, 1410.0833333333333], [1.68286566E12, 1590.4666666666667], [1.68286584E12, 0.05], [1.68286554E12, 1495.8333333333333], [1.68286572E12, 718.7166666666667], [1.68286542E12, 891.4833333333333]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.6828656E12, 1.05], [1.68286548E12, 2.3833333333333333], [1.68286554E12, 0.11666666666666667], [1.68286542E12, 0.11666666666666667]], "isOverall": false, "label": "Non HTTP response code: java.net.SocketException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68286584E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.05, "minX": 1.68286542E12, "maxY": 1590.4666666666667, "series": [{"data": [[1.6828656E12, 1349.1333333333334], [1.68286578E12, 8.1], [1.68286548E12, 1410.0833333333333], [1.68286566E12, 1590.4666666666667], [1.68286584E12, 0.05], [1.68286554E12, 1495.8333333333333], [1.68286572E12, 718.7166666666667], [1.68286542E12, 891.4833333333333]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.6828656E12, 1.05], [1.68286548E12, 2.3833333333333333], [1.68286554E12, 0.11666666666666667], [1.68286542E12, 0.11666666666666667]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68286584E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.05, "minX": 1.68286542E12, "maxY": 1590.4666666666667, "series": [{"data": [[1.6828656E12, 1349.1333333333334], [1.68286578E12, 8.1], [1.68286548E12, 1410.0833333333333], [1.68286566E12, 1590.4666666666667], [1.68286584E12, 0.05], [1.68286554E12, 1495.8333333333333], [1.68286572E12, 718.7166666666667], [1.68286542E12, 891.4833333333333]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.6828656E12, 1.05], [1.68286548E12, 2.3833333333333333], [1.68286554E12, 0.11666666666666667], [1.68286542E12, 0.11666666666666667]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68286584E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

