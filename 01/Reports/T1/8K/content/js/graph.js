/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 4.0, "minX": 0.0, "maxY": 229264.0, "series": [{"data": [[0.0, 4.0], [0.1, 24.0], [0.2, 29.0], [0.3, 31.0], [0.4, 33.0], [0.5, 34.0], [0.6, 35.0], [0.7, 36.0], [0.8, 37.0], [0.9, 38.0], [1.0, 39.0], [1.1, 40.0], [1.2, 41.0], [1.3, 42.0], [1.4, 43.0], [1.5, 44.0], [1.6, 44.0], [1.7, 45.0], [1.8, 46.0], [1.9, 46.0], [2.0, 47.0], [2.1, 47.0], [2.2, 48.0], [2.3, 49.0], [2.4, 49.0], [2.5, 50.0], [2.6, 50.0], [2.7, 51.0], [2.8, 51.0], [2.9, 52.0], [3.0, 52.0], [3.1, 53.0], [3.2, 53.0], [3.3, 54.0], [3.4, 54.0], [3.5, 54.0], [3.6, 55.0], [3.7, 55.0], [3.8, 56.0], [3.9, 56.0], [4.0, 57.0], [4.1, 57.0], [4.2, 58.0], [4.3, 58.0], [4.4, 59.0], [4.5, 59.0], [4.6, 59.0], [4.7, 60.0], [4.8, 60.0], [4.9, 60.0], [5.0, 61.0], [5.1, 61.0], [5.2, 61.0], [5.3, 62.0], [5.4, 62.0], [5.5, 62.0], [5.6, 62.0], [5.7, 63.0], [5.8, 63.0], [5.9, 63.0], [6.0, 64.0], [6.1, 64.0], [6.2, 64.0], [6.3, 65.0], [6.4, 65.0], [6.5, 65.0], [6.6, 66.0], [6.7, 66.0], [6.8, 66.0], [6.9, 67.0], [7.0, 67.0], [7.1, 68.0], [7.2, 68.0], [7.3, 68.0], [7.4, 69.0], [7.5, 69.0], [7.6, 70.0], [7.7, 70.0], [7.8, 70.0], [7.9, 71.0], [8.0, 71.0], [8.1, 72.0], [8.2, 72.0], [8.3, 72.0], [8.4, 73.0], [8.5, 73.0], [8.6, 73.0], [8.7, 74.0], [8.8, 74.0], [8.9, 74.0], [9.0, 75.0], [9.1, 75.0], [9.2, 75.0], [9.3, 75.0], [9.4, 76.0], [9.5, 76.0], [9.6, 76.0], [9.7, 76.0], [9.8, 77.0], [9.9, 77.0], [10.0, 78.0], [10.1, 78.0], [10.2, 78.0], [10.3, 79.0], [10.4, 79.0], [10.5, 80.0], [10.6, 80.0], [10.7, 80.0], [10.8, 81.0], [10.9, 81.0], [11.0, 82.0], [11.1, 82.0], [11.2, 83.0], [11.3, 83.0], [11.4, 84.0], [11.5, 84.0], [11.6, 84.0], [11.7, 85.0], [11.8, 85.0], [11.9, 85.0], [12.0, 86.0], [12.1, 86.0], [12.2, 86.0], [12.3, 87.0], [12.4, 87.0], [12.5, 87.0], [12.6, 88.0], [12.7, 88.0], [12.8, 88.0], [12.9, 89.0], [13.0, 89.0], [13.1, 89.0], [13.2, 90.0], [13.3, 90.0], [13.4, 90.0], [13.5, 90.0], [13.6, 91.0], [13.7, 91.0], [13.8, 91.0], [13.9, 91.0], [14.0, 92.0], [14.1, 92.0], [14.2, 92.0], [14.3, 92.0], [14.4, 93.0], [14.5, 93.0], [14.6, 93.0], [14.7, 93.0], [14.8, 94.0], [14.9, 94.0], [15.0, 94.0], [15.1, 95.0], [15.2, 95.0], [15.3, 95.0], [15.4, 96.0], [15.5, 96.0], [15.6, 96.0], [15.7, 97.0], [15.8, 97.0], [15.9, 97.0], [16.0, 98.0], [16.1, 98.0], [16.2, 98.0], [16.3, 98.0], [16.4, 99.0], [16.5, 99.0], [16.6, 99.0], [16.7, 100.0], [16.8, 100.0], [16.9, 100.0], [17.0, 100.0], [17.1, 101.0], [17.2, 101.0], [17.3, 101.0], [17.4, 102.0], [17.5, 102.0], [17.6, 102.0], [17.7, 103.0], [17.8, 103.0], [17.9, 103.0], [18.0, 103.0], [18.1, 104.0], [18.2, 104.0], [18.3, 104.0], [18.4, 105.0], [18.5, 105.0], [18.6, 105.0], [18.7, 106.0], [18.8, 106.0], [18.9, 106.0], [19.0, 107.0], [19.1, 107.0], [19.2, 107.0], [19.3, 107.0], [19.4, 108.0], [19.5, 108.0], [19.6, 108.0], [19.7, 108.0], [19.8, 109.0], [19.9, 109.0], [20.0, 109.0], [20.1, 109.0], [20.2, 110.0], [20.3, 110.0], [20.4, 110.0], [20.5, 111.0], [20.6, 111.0], [20.7, 111.0], [20.8, 111.0], [20.9, 112.0], [21.0, 112.0], [21.1, 112.0], [21.2, 113.0], [21.3, 113.0], [21.4, 113.0], [21.5, 114.0], [21.6, 114.0], [21.7, 114.0], [21.8, 115.0], [21.9, 115.0], [22.0, 115.0], [22.1, 116.0], [22.2, 116.0], [22.3, 116.0], [22.4, 116.0], [22.5, 117.0], [22.6, 117.0], [22.7, 117.0], [22.8, 118.0], [22.9, 118.0], [23.0, 118.0], [23.1, 119.0], [23.2, 119.0], [23.3, 119.0], [23.4, 119.0], [23.5, 120.0], [23.6, 120.0], [23.7, 120.0], [23.8, 121.0], [23.9, 121.0], [24.0, 121.0], [24.1, 122.0], [24.2, 122.0], [24.3, 122.0], [24.4, 123.0], [24.5, 123.0], [24.6, 123.0], [24.7, 123.0], [24.8, 124.0], [24.9, 124.0], [25.0, 124.0], [25.1, 125.0], [25.2, 125.0], [25.3, 126.0], [25.4, 126.0], [25.5, 126.0], [25.6, 127.0], [25.7, 127.0], [25.8, 128.0], [25.9, 128.0], [26.0, 128.0], [26.1, 129.0], [26.2, 129.0], [26.3, 129.0], [26.4, 130.0], [26.5, 130.0], [26.6, 130.0], [26.7, 130.0], [26.8, 131.0], [26.9, 131.0], [27.0, 131.0], [27.1, 132.0], [27.2, 132.0], [27.3, 132.0], [27.4, 133.0], [27.5, 133.0], [27.6, 134.0], [27.7, 134.0], [27.8, 135.0], [27.9, 135.0], [28.0, 135.0], [28.1, 136.0], [28.2, 136.0], [28.3, 136.0], [28.4, 137.0], [28.5, 137.0], [28.6, 137.0], [28.7, 138.0], [28.8, 138.0], [28.9, 138.0], [29.0, 139.0], [29.1, 139.0], [29.2, 139.0], [29.3, 140.0], [29.4, 140.0], [29.5, 140.0], [29.6, 141.0], [29.7, 141.0], [29.8, 141.0], [29.9, 142.0], [30.0, 142.0], [30.1, 142.0], [30.2, 143.0], [30.3, 143.0], [30.4, 143.0], [30.5, 144.0], [30.6, 144.0], [30.7, 144.0], [30.8, 145.0], [30.9, 145.0], [31.0, 145.0], [31.1, 145.0], [31.2, 146.0], [31.3, 146.0], [31.4, 146.0], [31.5, 146.0], [31.6, 147.0], [31.7, 147.0], [31.8, 147.0], [31.9, 148.0], [32.0, 148.0], [32.1, 148.0], [32.2, 148.0], [32.3, 149.0], [32.4, 149.0], [32.5, 149.0], [32.6, 150.0], [32.7, 150.0], [32.8, 150.0], [32.9, 151.0], [33.0, 151.0], [33.1, 152.0], [33.2, 152.0], [33.3, 152.0], [33.4, 153.0], [33.5, 153.0], [33.6, 154.0], [33.7, 154.0], [33.8, 154.0], [33.9, 154.0], [34.0, 155.0], [34.1, 155.0], [34.2, 155.0], [34.3, 155.0], [34.4, 156.0], [34.5, 156.0], [34.6, 156.0], [34.7, 157.0], [34.8, 157.0], [34.9, 157.0], [35.0, 157.0], [35.1, 158.0], [35.2, 158.0], [35.3, 158.0], [35.4, 158.0], [35.5, 159.0], [35.6, 159.0], [35.7, 159.0], [35.8, 159.0], [35.9, 160.0], [36.0, 160.0], [36.1, 161.0], [36.2, 161.0], [36.3, 162.0], [36.4, 162.0], [36.5, 162.0], [36.6, 163.0], [36.7, 163.0], [36.8, 163.0], [36.9, 163.0], [37.0, 164.0], [37.1, 164.0], [37.2, 164.0], [37.3, 165.0], [37.4, 166.0], [37.5, 166.0], [37.6, 167.0], [37.7, 167.0], [37.8, 167.0], [37.9, 168.0], [38.0, 168.0], [38.1, 168.0], [38.2, 169.0], [38.3, 169.0], [38.4, 169.0], [38.5, 170.0], [38.6, 170.0], [38.7, 170.0], [38.8, 171.0], [38.9, 171.0], [39.0, 171.0], [39.1, 172.0], [39.2, 172.0], [39.3, 172.0], [39.4, 173.0], [39.5, 173.0], [39.6, 173.0], [39.7, 174.0], [39.8, 174.0], [39.9, 175.0], [40.0, 175.0], [40.1, 176.0], [40.2, 176.0], [40.3, 176.0], [40.4, 177.0], [40.5, 177.0], [40.6, 178.0], [40.7, 178.0], [40.8, 178.0], [40.9, 179.0], [41.0, 179.0], [41.1, 179.0], [41.2, 180.0], [41.3, 180.0], [41.4, 180.0], [41.5, 181.0], [41.6, 181.0], [41.7, 182.0], [41.8, 182.0], [41.9, 182.0], [42.0, 182.0], [42.1, 183.0], [42.2, 183.0], [42.3, 183.0], [42.4, 184.0], [42.5, 184.0], [42.6, 184.0], [42.7, 184.0], [42.8, 185.0], [42.9, 185.0], [43.0, 186.0], [43.1, 186.0], [43.2, 187.0], [43.3, 188.0], [43.4, 188.0], [43.5, 188.0], [43.6, 189.0], [43.7, 189.0], [43.8, 189.0], [43.9, 190.0], [44.0, 190.0], [44.1, 190.0], [44.2, 191.0], [44.3, 191.0], [44.4, 192.0], [44.5, 192.0], [44.6, 193.0], [44.7, 193.0], [44.8, 194.0], [44.9, 195.0], [45.0, 195.0], [45.1, 196.0], [45.2, 196.0], [45.3, 197.0], [45.4, 198.0], [45.5, 198.0], [45.6, 199.0], [45.7, 200.0], [45.8, 201.0], [45.9, 202.0], [46.0, 202.0], [46.1, 203.0], [46.2, 205.0], [46.3, 206.0], [46.4, 207.0], [46.5, 208.0], [46.6, 209.0], [46.7, 209.0], [46.8, 210.0], [46.9, 210.0], [47.0, 211.0], [47.1, 212.0], [47.2, 212.0], [47.3, 214.0], [47.4, 215.0], [47.5, 216.0], [47.6, 217.0], [47.7, 218.0], [47.8, 219.0], [47.9, 221.0], [48.0, 222.0], [48.1, 223.0], [48.2, 225.0], [48.3, 226.0], [48.4, 227.0], [48.5, 228.0], [48.6, 228.0], [48.7, 229.0], [48.8, 230.0], [48.9, 230.0], [49.0, 231.0], [49.1, 232.0], [49.2, 232.0], [49.3, 233.0], [49.4, 234.0], [49.5, 234.0], [49.6, 235.0], [49.7, 236.0], [49.8, 237.0], [49.9, 239.0], [50.0, 240.0], [50.1, 242.0], [50.2, 243.0], [50.3, 245.0], [50.4, 246.0], [50.5, 247.0], [50.6, 248.0], [50.7, 250.0], [50.8, 252.0], [50.9, 254.0], [51.0, 256.0], [51.1, 258.0], [51.2, 260.0], [51.3, 262.0], [51.4, 264.0], [51.5, 268.0], [51.6, 270.0], [51.7, 273.0], [51.8, 277.0], [51.9, 279.0], [52.0, 281.0], [52.1, 284.0], [52.2, 288.0], [52.3, 293.0], [52.4, 296.0], [52.5, 300.0], [52.6, 303.0], [52.7, 306.0], [52.8, 308.0], [52.9, 310.0], [53.0, 313.0], [53.1, 316.0], [53.2, 318.0], [53.3, 320.0], [53.4, 322.0], [53.5, 323.0], [53.6, 325.0], [53.7, 327.0], [53.8, 329.0], [53.9, 332.0], [54.0, 334.0], [54.1, 335.0], [54.2, 336.0], [54.3, 338.0], [54.4, 342.0], [54.5, 345.0], [54.6, 348.0], [54.7, 350.0], [54.8, 351.0], [54.9, 353.0], [55.0, 354.0], [55.1, 356.0], [55.2, 357.0], [55.3, 358.0], [55.4, 359.0], [55.5, 361.0], [55.6, 362.0], [55.7, 363.0], [55.8, 364.0], [55.9, 368.0], [56.0, 371.0], [56.1, 372.0], [56.2, 374.0], [56.3, 374.0], [56.4, 375.0], [56.5, 376.0], [56.6, 377.0], [56.7, 377.0], [56.8, 378.0], [56.9, 378.0], [57.0, 379.0], [57.1, 379.0], [57.2, 380.0], [57.3, 380.0], [57.4, 381.0], [57.5, 381.0], [57.6, 381.0], [57.7, 382.0], [57.8, 382.0], [57.9, 383.0], [58.0, 383.0], [58.1, 384.0], [58.2, 384.0], [58.3, 385.0], [58.4, 386.0], [58.5, 387.0], [58.6, 387.0], [58.7, 388.0], [58.8, 388.0], [58.9, 389.0], [59.0, 389.0], [59.1, 390.0], [59.2, 391.0], [59.3, 392.0], [59.4, 393.0], [59.5, 394.0], [59.6, 395.0], [59.7, 396.0], [59.8, 397.0], [59.9, 398.0], [60.0, 399.0], [60.1, 400.0], [60.2, 401.0], [60.3, 402.0], [60.4, 402.0], [60.5, 403.0], [60.6, 403.0], [60.7, 404.0], [60.8, 404.0], [60.9, 405.0], [61.0, 405.0], [61.1, 406.0], [61.2, 406.0], [61.3, 406.0], [61.4, 407.0], [61.5, 407.0], [61.6, 407.0], [61.7, 408.0], [61.8, 408.0], [61.9, 408.0], [62.0, 409.0], [62.1, 409.0], [62.2, 409.0], [62.3, 410.0], [62.4, 410.0], [62.5, 411.0], [62.6, 411.0], [62.7, 412.0], [62.8, 412.0], [62.9, 413.0], [63.0, 413.0], [63.1, 414.0], [63.2, 414.0], [63.3, 415.0], [63.4, 416.0], [63.5, 416.0], [63.6, 416.0], [63.7, 417.0], [63.8, 417.0], [63.9, 418.0], [64.0, 418.0], [64.1, 418.0], [64.2, 419.0], [64.3, 419.0], [64.4, 419.0], [64.5, 420.0], [64.6, 420.0], [64.7, 421.0], [64.8, 422.0], [64.9, 422.0], [65.0, 423.0], [65.1, 423.0], [65.2, 424.0], [65.3, 424.0], [65.4, 424.0], [65.5, 425.0], [65.6, 425.0], [65.7, 426.0], [65.8, 426.0], [65.9, 426.0], [66.0, 427.0], [66.1, 427.0], [66.2, 427.0], [66.3, 428.0], [66.4, 428.0], [66.5, 429.0], [66.6, 429.0], [66.7, 430.0], [66.8, 430.0], [66.9, 431.0], [67.0, 431.0], [67.1, 432.0], [67.2, 432.0], [67.3, 433.0], [67.4, 433.0], [67.5, 434.0], [67.6, 435.0], [67.7, 435.0], [67.8, 436.0], [67.9, 436.0], [68.0, 436.0], [68.1, 437.0], [68.2, 437.0], [68.3, 438.0], [68.4, 438.0], [68.5, 439.0], [68.6, 439.0], [68.7, 440.0], [68.8, 441.0], [68.9, 441.0], [69.0, 442.0], [69.1, 443.0], [69.2, 444.0], [69.3, 445.0], [69.4, 446.0], [69.5, 446.0], [69.6, 447.0], [69.7, 447.0], [69.8, 448.0], [69.9, 448.0], [70.0, 449.0], [70.1, 449.0], [70.2, 449.0], [70.3, 450.0], [70.4, 450.0], [70.5, 451.0], [70.6, 452.0], [70.7, 452.0], [70.8, 453.0], [70.9, 454.0], [71.0, 455.0], [71.1, 455.0], [71.2, 456.0], [71.3, 456.0], [71.4, 457.0], [71.5, 457.0], [71.6, 457.0], [71.7, 458.0], [71.8, 458.0], [71.9, 459.0], [72.0, 459.0], [72.1, 461.0], [72.2, 462.0], [72.3, 464.0], [72.4, 465.0], [72.5, 466.0], [72.6, 467.0], [72.7, 468.0], [72.8, 475.0], [72.9, 479.0], [73.0, 486.0], [73.1, 489.0], [73.2, 490.0], [73.3, 491.0], [73.4, 491.0], [73.5, 492.0], [73.6, 492.0], [73.7, 493.0], [73.8, 496.0], [73.9, 499.0], [74.0, 500.0], [74.1, 502.0], [74.2, 505.0], [74.3, 516.0], [74.4, 519.0], [74.5, 527.0], [74.6, 528.0], [74.7, 529.0], [74.8, 530.0], [74.9, 530.0], [75.0, 531.0], [75.1, 531.0], [75.2, 532.0], [75.3, 534.0], [75.4, 535.0], [75.5, 536.0], [75.6, 536.0], [75.7, 537.0], [75.8, 538.0], [75.9, 540.0], [76.0, 541.0], [76.1, 542.0], [76.2, 543.0], [76.3, 544.0], [76.4, 546.0], [76.5, 549.0], [76.6, 557.0], [76.7, 558.0], [76.8, 559.0], [76.9, 560.0], [77.0, 560.0], [77.1, 561.0], [77.2, 562.0], [77.3, 562.0], [77.4, 563.0], [77.5, 563.0], [77.6, 564.0], [77.7, 564.0], [77.8, 566.0], [77.9, 570.0], [78.0, 573.0], [78.1, 578.0], [78.2, 582.0], [78.3, 586.0], [78.4, 589.0], [78.5, 590.0], [78.6, 591.0], [78.7, 599.0], [78.8, 605.0], [78.9, 606.0], [79.0, 607.0], [79.1, 608.0], [79.2, 610.0], [79.3, 611.0], [79.4, 612.0], [79.5, 613.0], [79.6, 615.0], [79.7, 618.0], [79.8, 621.0], [79.9, 624.0], [80.0, 626.0], [80.1, 628.0], [80.2, 629.0], [80.3, 630.0], [80.4, 632.0], [80.5, 640.0], [80.6, 642.0], [80.7, 643.0], [80.8, 644.0], [80.9, 652.0], [81.0, 659.0], [81.1, 665.0], [81.2, 666.0], [81.3, 667.0], [81.4, 668.0], [81.5, 673.0], [81.6, 675.0], [81.7, 677.0], [81.8, 684.0], [81.9, 692.0], [82.0, 702.0], [82.1, 703.0], [82.2, 703.0], [82.3, 705.0], [82.4, 706.0], [82.5, 707.0], [82.6, 711.0], [82.7, 718.0], [82.8, 721.0], [82.9, 723.0], [83.0, 726.0], [83.1, 729.0], [83.2, 736.0], [83.3, 738.0], [83.4, 739.0], [83.5, 740.0], [83.6, 740.0], [83.7, 741.0], [83.8, 742.0], [83.9, 744.0], [84.0, 745.0], [84.1, 747.0], [84.2, 748.0], [84.3, 749.0], [84.4, 751.0], [84.5, 752.0], [84.6, 753.0], [84.7, 754.0], [84.8, 755.0], [84.9, 756.0], [85.0, 757.0], [85.1, 759.0], [85.2, 760.0], [85.3, 761.0], [85.4, 762.0], [85.5, 764.0], [85.6, 765.0], [85.7, 767.0], [85.8, 768.0], [85.9, 769.0], [86.0, 770.0], [86.1, 771.0], [86.2, 772.0], [86.3, 777.0], [86.4, 780.0], [86.5, 782.0], [86.6, 787.0], [86.7, 788.0], [86.8, 799.0], [86.9, 801.0], [87.0, 808.0], [87.1, 813.0], [87.2, 815.0], [87.3, 820.0], [87.4, 825.0], [87.5, 826.0], [87.6, 828.0], [87.7, 832.0], [87.8, 837.0], [87.9, 840.0], [88.0, 842.0], [88.1, 843.0], [88.2, 844.0], [88.3, 845.0], [88.4, 846.0], [88.5, 847.0], [88.6, 851.0], [88.7, 852.0], [88.8, 853.0], [88.9, 854.0], [89.0, 856.0], [89.1, 863.0], [89.2, 878.0], [89.3, 880.0], [89.4, 885.0], [89.5, 889.0], [89.6, 891.0], [89.7, 893.0], [89.8, 894.0], [89.9, 896.0], [90.0, 897.0], [90.1, 899.0], [90.2, 900.0], [90.3, 905.0], [90.4, 907.0], [90.5, 908.0], [90.6, 910.0], [90.7, 915.0], [90.8, 916.0], [90.9, 918.0], [91.0, 929.0], [91.1, 933.0], [91.2, 941.0], [91.3, 962.0], [91.4, 997.0], [91.5, 1037.0], [91.6, 1080.0], [91.7, 1104.0], [91.8, 1105.0], [91.9, 1106.0], [92.0, 1127.0], [92.1, 1238.0], [92.2, 1464.0], [92.3, 1602.0], [92.4, 1863.0], [92.5, 2070.0], [92.6, 2330.0], [92.7, 2701.0], [92.8, 3102.0], [92.9, 3396.0], [93.0, 3739.0], [93.1, 4164.0], [93.2, 4682.0], [93.3, 5039.0], [93.4, 5451.0], [93.5, 6038.0], [93.6, 6571.0], [93.7, 6818.0], [93.8, 7239.0], [93.9, 7452.0], [94.0, 8019.0], [94.1, 8209.0], [94.2, 8272.0], [94.3, 8542.0], [94.4, 8849.0], [94.5, 9392.0], [94.6, 10027.0], [94.7, 10108.0], [94.8, 10110.0], [94.9, 10125.0], [95.0, 10367.0], [95.1, 10512.0], [95.2, 10589.0], [95.3, 11083.0], [95.4, 11187.0], [95.5, 11602.0], [95.6, 11994.0], [95.7, 12453.0], [95.8, 12510.0], [95.9, 13043.0], [96.0, 13128.0], [96.1, 13225.0], [96.2, 14120.0], [96.3, 14417.0], [96.4, 15370.0], [96.5, 15565.0], [96.6, 16143.0], [96.7, 16511.0], [96.8, 17017.0], [96.9, 17186.0], [97.0, 17709.0], [97.1, 18104.0], [97.2, 18869.0], [97.3, 19701.0], [97.4, 21264.0], [97.5, 22392.0], [97.6, 24883.0], [97.7, 27776.0], [97.8, 29646.0], [97.9, 32477.0], [98.0, 33321.0], [98.1, 34327.0], [98.2, 40045.0], [98.3, 44139.0], [98.4, 46748.0], [98.5, 52684.0], [98.6, 64104.0], [98.7, 67110.0], [98.8, 72680.0], [98.9, 87918.0], [99.0, 100049.0], [99.1, 100185.0], [99.2, 100226.0], [99.3, 100452.0], [99.4, 107115.0], [99.5, 130385.0], [99.6, 133766.0], [99.7, 148003.0], [99.8, 156140.0], [99.9, 168440.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 69490.0, "series": [{"data": [[0.0, 39972.0], [148000.0, 14.0], [173600.0, 3.0], [199200.0, 1.0], [218400.0, 1.0], [145700.0, 28.0], [152100.0, 1.0], [164900.0, 2.0], [66700.0, 7.0], [73100.0, 1.0], [82700.0, 2.0], [89100.0, 1.0], [92300.0, 1.0], [108300.0, 1.0], [130700.0, 3.0], [149800.0, 1.0], [156200.0, 34.0], [201000.0, 2.0], [226600.0, 1.0], [100.0, 69490.0], [32900.0, 12.0], [34500.0, 4.0], [36100.0, 3.0], [37700.0, 5.0], [39300.0, 2.0], [40900.0, 2.0], [44100.0, 131.0], [48900.0, 2.0], [47300.0, 2.0], [50500.0, 4.0], [200.0, 16520.0], [205100.0, 1.0], [211500.0, 1.0], [53700.0, 1.0], [55300.0, 1.0], [56900.0, 1.0], [58500.0, 2.0], [60100.0, 9.0], [63300.0, 3.0], [64900.0, 15.0], [65800.0, 2.0], [69000.0, 2.0], [300.0, 18180.0], [78600.0, 3.0], [88200.0, 1.0], [91400.0, 1.0], [101000.0, 34.0], [400.0, 33297.0], [107400.0, 3.0], [500.0, 11424.0], [600.0, 7779.0], [700.0, 11678.0], [800.0, 7998.0], [900.0, 3028.0], [1000.0, 561.0], [1100.0, 1046.0], [1200.0, 172.0], [1300.0, 61.0], [1400.0, 135.0], [1500.0, 175.0], [1600.0, 104.0], [1700.0, 68.0], [1800.0, 127.0], [1900.0, 96.0], [2000.0, 139.0], [2100.0, 75.0], [2200.0, 70.0], [2300.0, 100.0], [2400.0, 109.0], [149300.0, 3.0], [155700.0, 20.0], [2500.0, 27.0], [2600.0, 46.0], [168500.0, 1.0], [2700.0, 70.0], [2800.0, 50.0], [2900.0, 24.0], [3000.0, 99.0], [3100.0, 91.0], [3300.0, 166.0], [3200.0, 29.0], [3400.0, 94.0], [3500.0, 40.0], [3600.0, 31.0], [3700.0, 37.0], [3800.0, 34.0], [3900.0, 56.0], [4000.0, 40.0], [4200.0, 52.0], [68100.0, 2.0], [4600.0, 107.0], [4400.0, 33.0], [71300.0, 8.0], [4800.0, 90.0], [77700.0, 2.0], [74500.0, 1.0], [5000.0, 76.0], [80900.0, 1.0], [5200.0, 35.0], [5400.0, 19.0], [5600.0, 24.0], [87300.0, 1.0], [5800.0, 41.0], [6000.0, 48.0], [96900.0, 2.0], [100100.0, 166.0], [6200.0, 6.0], [6400.0, 17.0], [6600.0, 119.0], [6800.0, 119.0], [109700.0, 1.0], [7000.0, 29.0], [7200.0, 49.0], [7400.0, 191.0], [7600.0, 16.0], [7800.0, 11.0], [8000.0, 161.0], [128900.0, 4.0], [8400.0, 32.0], [9200.0, 12.0], [8800.0, 168.0], [9600.0, 36.0], [10000.0, 151.0], [159800.0, 1.0], [10400.0, 57.0], [11200.0, 52.0], [10800.0, 16.0], [11600.0, 36.0], [12000.0, 59.0], [12400.0, 250.0], [12800.0, 26.0], [13200.0, 7.0], [13600.0, 7.0], [14000.0, 17.0], [14800.0, 8.0], [14400.0, 72.0], [15200.0, 25.0], [15600.0, 29.0], [16000.0, 51.0], [16800.0, 69.0], [18400.0, 47.0], [17600.0, 3.0], [20000.0, 3.0], [20800.0, 33.0], [22400.0, 5.0], [21600.0, 54.0], [23200.0, 4.0], [24000.0, 3.0], [24800.0, 11.0], [26400.0, 2.0], [25600.0, 1.0], [27200.0, 12.0], [28000.0, 3.0], [29600.0, 10.0], [32000.0, 2.0], [131900.0, 5.0], [36800.0, 4.0], [38400.0, 3.0], [40000.0, 21.0], [157500.0, 2.0], [44800.0, 66.0], [49600.0, 1.0], [52800.0, 7.0], [51200.0, 1.0], [54400.0, 2.0], [215100.0, 1.0], [62400.0, 1.0], [67200.0, 20.0], [73600.0, 7.0], [70400.0, 15.0], [80000.0, 1.0], [89600.0, 1.0], [92800.0, 1.0], [118400.0, 2.0], [128000.0, 4.0], [153600.0, 1.0], [160000.0, 1.0], [224000.0, 1.0], [132100.0, 3.0], [208900.0, 1.0], [67100.0, 8.0], [70300.0, 3.0], [73500.0, 35.0], [76700.0, 2.0], [83100.0, 1.0], [86300.0, 2.0], [136200.0, 1.0], [149000.0, 1.0], [155400.0, 1.0], [193800.0, 1.0], [200200.0, 2.0], [33100.0, 58.0], [34700.0, 25.0], [36300.0, 3.0], [153100.0, 41.0], [39500.0, 2.0], [41100.0, 2.0], [44300.0, 2.0], [45900.0, 2.0], [47500.0, 2.0], [52300.0, 6.0], [53900.0, 2.0], [57100.0, 1.0], [55500.0, 3.0], [60300.0, 17.0], [63500.0, 2.0], [65100.0, 3.0], [66200.0, 2.0], [72600.0, 108.0], [82200.0, 1.0], [88600.0, 3.0], [91800.0, 4.0], [101400.0, 26.0], [107800.0, 2.0], [117400.0, 2.0], [130200.0, 20.0], [131600.0, 8.0], [163600.0, 6.0], [202000.0, 1.0], [208400.0, 1.0], [135700.0, 3.0], [212500.0, 1.0], [71700.0, 1.0], [90900.0, 2.0], [103700.0, 3.0], [119700.0, 1.0], [133400.0, 4.0], [139800.0, 1.0], [146200.0, 6.0], [159000.0, 7.0], [171800.0, 9.0], [223000.0, 1.0], [16900.0, 86.0], [17700.0, 341.0], [19300.0, 35.0], [18500.0, 41.0], [20100.0, 2.0], [20900.0, 13.0], [22500.0, 27.0], [21700.0, 33.0], [23300.0, 3.0], [24100.0, 7.0], [24900.0, 4.0], [26500.0, 7.0], [25700.0, 3.0], [27300.0, 13.0], [28900.0, 23.0], [30500.0, 18.0], [31300.0, 4.0], [32100.0, 9.0], [33800.0, 1.0], [131100.0, 23.0], [35400.0, 2.0], [38600.0, 5.0], [41800.0, 3.0], [43400.0, 36.0], [45000.0, 1.0], [48200.0, 1.0], [49800.0, 3.0], [53000.0, 1.0], [207900.0, 2.0], [54600.0, 27.0], [56200.0, 1.0], [227100.0, 9.0], [59400.0, 1.0], [61000.0, 2.0], [62600.0, 1.0], [67600.0, 4.0], [70800.0, 7.0], [74000.0, 1.0], [80400.0, 1.0], [83600.0, 1.0], [128400.0, 6.0], [136800.0, 2.0], [156000.0, 8.0], [200800.0, 1.0], [220000.0, 1.0], [160100.0, 2.0], [67500.0, 2.0], [77100.0, 1.0], [118700.0, 1.0], [33300.0, 59.0], [36500.0, 15.0], [155500.0, 48.0], [38100.0, 2.0], [41300.0, 49.0], [168300.0, 7.0], [46100.0, 5.0], [47700.0, 7.0], [193900.0, 2.0], [50900.0, 2.0], [49300.0, 10.0], [52500.0, 3.0], [54100.0, 3.0], [60500.0, 5.0], [65300.0, 2.0], [66600.0, 33.0], [73000.0, 2.0], [76200.0, 1.0], [89000.0, 3.0], [108200.0, 1.0], [127400.0, 2.0], [130600.0, 13.0], [146800.0, 1.0], [153200.0, 6.0], [159600.0, 3.0], [172400.0, 3.0], [198000.0, 2.0], [217200.0, 1.0], [223600.0, 2.0], [131700.0, 4.0], [150900.0, 4.0], [68900.0, 2.0], [72100.0, 2.0], [88100.0, 1.0], [97700.0, 2.0], [94500.0, 1.0], [107300.0, 1.0], [8500.0, 50.0], [135800.0, 31.0], [8900.0, 37.0], [9700.0, 54.0], [9300.0, 71.0], [155000.0, 1.0], [10100.0, 640.0], [161400.0, 9.0], [10500.0, 331.0], [10900.0, 32.0], [11300.0, 32.0], [11700.0, 134.0], [12100.0, 79.0], [12500.0, 57.0], [199800.0, 3.0], [13300.0, 75.0], [12900.0, 17.0], [13700.0, 45.0], [14100.0, 224.0], [14500.0, 1.0], [15300.0, 233.0], [14900.0, 5.0], [15700.0, 26.0], [16100.0, 70.0], [17000.0, 196.0], [17800.0, 2.0], [19400.0, 20.0], [18600.0, 7.0], [20200.0, 29.0], [21000.0, 8.0], [21800.0, 3.0], [22600.0, 21.0], [23400.0, 1.0], [24200.0, 8.0], [25000.0, 20.0], [25800.0, 2.0], [26600.0, 5.0], [27400.0, 9.0], [29000.0, 11.0], [30600.0, 3.0], [31400.0, 10.0], [32200.0, 17.0], [133500.0, 5.0], [34000.0, 26.0], [38800.0, 3.0], [40400.0, 5.0], [43600.0, 15.0], [45200.0, 6.0], [50000.0, 3.0], [51600.0, 2.0], [56400.0, 2.0], [61200.0, 3.0], [68000.0, 1.0], [71200.0, 15.0], [80800.0, 1.0], [87200.0, 1.0], [90400.0, 2.0], [100000.0, 254.0], [106400.0, 2.0], [128800.0, 30.0], [136000.0, 3.0], [155200.0, 1.0], [206400.0, 1.0], [219200.0, 1.0], [133700.0, 39.0], [140100.0, 1.0], [146500.0, 1.0], [152900.0, 5.0], [204100.0, 1.0], [67900.0, 1.0], [80700.0, 3.0], [106300.0, 1.0], [115900.0, 1.0], [128700.0, 2.0], [131400.0, 1.0], [150600.0, 6.0], [135500.0, 10.0], [33500.0, 16.0], [35100.0, 8.0], [36700.0, 1.0], [38300.0, 1.0], [39900.0, 5.0], [41500.0, 8.0], [46300.0, 24.0], [47900.0, 2.0], [51100.0, 4.0], [49500.0, 2.0], [52700.0, 3.0], [205900.0, 1.0], [54300.0, 11.0], [55900.0, 1.0], [57500.0, 2.0], [65500.0, 38.0], [67000.0, 1.0], [70200.0, 17.0], [73400.0, 1.0], [89400.0, 1.0], [95800.0, 2.0], [99000.0, 2.0], [127800.0, 2.0], [131000.0, 15.0], [133200.0, 14.0], [165200.0, 2.0], [229200.0, 14.0], [143700.0, 2.0], [156500.0, 1.0], [214100.0, 2.0], [69300.0, 2.0], [66100.0, 6.0], [72500.0, 1.0], [75700.0, 5.0], [91700.0, 3.0], [94900.0, 1.0], [98100.0, 1.0], [101300.0, 22.0], [130100.0, 14.0], [167000.0, 21.0], [205400.0, 1.0], [224600.0, 1.0], [17100.0, 84.0], [17900.0, 18.0], [18700.0, 5.0], [20300.0, 9.0], [19500.0, 5.0], [21100.0, 9.0], [21900.0, 4.0], [22700.0, 4.0], [23500.0, 1.0], [24300.0, 11.0], [25100.0, 1.0], [25900.0, 4.0], [27500.0, 2.0], [28300.0, 6.0], [29100.0, 21.0], [30700.0, 15.0], [29900.0, 7.0], [31500.0, 4.0], [32300.0, 3.0], [34200.0, 5.0], [132700.0, 1.0], [139100.0, 2.0], [35800.0, 2.0], [145500.0, 1.0], [37400.0, 10.0], [39000.0, 4.0], [42200.0, 4.0], [47000.0, 2.0], [45400.0, 1.0], [48600.0, 2.0], [51800.0, 1.0], [53400.0, 3.0], [56600.0, 6.0], [61400.0, 1.0], [63000.0, 1.0], [64600.0, 5.0], [71600.0, 44.0], [78000.0, 1.0], [81200.0, 2.0], [84400.0, 1.0], [87600.0, 1.0], [90800.0, 1.0], [100400.0, 25.0], [129200.0, 37.0], [132000.0, 6.0], [170400.0, 2.0], [196000.0, 1.0], [193700.0, 2.0], [71500.0, 10.0], [81100.0, 1.0], [90700.0, 1.0], [97100.0, 3.0], [100300.0, 63.0], [129100.0, 8.0], [140200.0, 2.0], [197800.0, 1.0], [131500.0, 14.0], [33700.0, 24.0], [38500.0, 5.0], [36900.0, 8.0], [150700.0, 2.0], [41700.0, 3.0], [169900.0, 7.0], [43300.0, 14.0], [44900.0, 3.0], [46500.0, 3.0], [49700.0, 16.0], [51300.0, 58.0], [52900.0, 1.0], [54500.0, 5.0], [214700.0, 2.0], [56100.0, 1.0], [59300.0, 3.0], [57700.0, 1.0], [62500.0, 2.0], [64100.0, 24.0], [67400.0, 4.0], [70600.0, 3.0], [80200.0, 1.0], [86600.0, 2.0], [133300.0, 34.0], [158900.0, 1.0], [171700.0, 44.0], [190900.0, 1.0], [4100.0, 124.0], [66500.0, 6.0], [4300.0, 21.0], [69700.0, 1.0], [4500.0, 27.0], [4700.0, 62.0], [4900.0, 55.0], [5100.0, 49.0], [5300.0, 77.0], [85700.0, 2.0], [5500.0, 65.0], [5700.0, 19.0], [5900.0, 80.0], [6100.0, 4.0], [6300.0, 106.0], [98500.0, 2.0], [104900.0, 2.0], [6500.0, 139.0], [6700.0, 22.0], [6900.0, 36.0], [7100.0, 69.0], [7300.0, 76.0], [7500.0, 12.0], [7900.0, 20.0], [7700.0, 76.0], [8100.0, 68.0], [130500.0, 4.0], [127300.0, 2.0], [8200.0, 378.0], [8600.0, 17.0], [9000.0, 62.0], [143800.0, 3.0], [9400.0, 17.0], [10200.0, 115.0], [9800.0, 8.0], [156600.0, 1.0], [10600.0, 34.0], [11000.0, 122.0], [11400.0, 40.0], [12200.0, 38.0], [11800.0, 23.0], [12600.0, 83.0], [13000.0, 258.0], [13400.0, 37.0], [13800.0, 21.0], [220600.0, 1.0], [14200.0, 6.0], [14600.0, 4.0], [15000.0, 20.0], [15400.0, 55.0], [15800.0, 20.0], [16200.0, 18.0], [16400.0, 51.0], [17200.0, 26.0], [18000.0, 34.0], [18800.0, 60.0], [20400.0, 22.0], [19600.0, 9.0], [21200.0, 38.0], [22000.0, 1.0], [22800.0, 11.0], [23600.0, 12.0], [24400.0, 27.0], [25200.0, 9.0], [26800.0, 9.0], [27600.0, 2.0], [28400.0, 2.0], [29200.0, 21.0], [31600.0, 3.0], [32400.0, 31.0], [32800.0, 17.0], [34400.0, 1.0], [147900.0, 24.0], [37600.0, 12.0], [40800.0, 2.0], [160700.0, 6.0], [167100.0, 12.0], [44000.0, 1.0], [48800.0, 5.0], [47200.0, 3.0], [192700.0, 4.0], [52000.0, 4.0], [53600.0, 2.0], [55200.0, 1.0], [58400.0, 2.0], [60000.0, 1.0], [63200.0, 4.0], [61600.0, 2.0], [64800.0, 1.0], [68800.0, 1.0], [65600.0, 8.0], [81600.0, 2.0], [88000.0, 5.0], [91200.0, 2.0], [100800.0, 3.0], [104000.0, 2.0], [107200.0, 2.0], [227200.0, 34.0], [135300.0, 1.0], [192900.0, 2.0], [199300.0, 1.0], [71900.0, 1.0], [75100.0, 1.0], [81500.0, 1.0], [78300.0, 1.0], [87900.0, 1.0], [107100.0, 14.0], [116700.0, 1.0], [129500.0, 1.0], [133000.0, 2.0], [145800.0, 14.0], [152200.0, 1.0], [158600.0, 2.0], [165000.0, 2.0], [197000.0, 1.0], [33900.0, 5.0], [35500.0, 1.0], [143500.0, 2.0], [37100.0, 2.0], [40300.0, 4.0], [41900.0, 1.0], [43500.0, 2.0], [46700.0, 18.0], [45100.0, 23.0], [48300.0, 2.0], [53100.0, 2.0], [51500.0, 3.0], [54700.0, 22.0], [59500.0, 4.0], [64300.0, 10.0], [67800.0, 3.0], [71000.0, 1.0], [77400.0, 1.0], [80600.0, 3.0], [87000.0, 14.0], [90200.0, 2.0], [96600.0, 1.0], [103000.0, 12.0], [109400.0, 2.0], [115800.0, 1.0], [128600.0, 1.0], [141200.0, 2.0], [198800.0, 1.0], [218000.0, 1.0], [132500.0, 1.0], [138900.0, 4.0], [151700.0, 4.0], [158100.0, 10.0], [66900.0, 28.0], [70100.0, 2.0], [79700.0, 1.0], [89300.0, 2.0], [98900.0, 2.0], [130900.0, 2.0], [127700.0, 2.0], [136600.0, 5.0], [149400.0, 18.0], [155800.0, 9.0], [168600.0, 1.0], [207000.0, 1.0], [17300.0, 23.0], [16500.0, 20.0], [18100.0, 19.0], [18900.0, 84.0], [19700.0, 6.0], [20500.0, 7.0], [21300.0, 6.0], [22100.0, 20.0], [22900.0, 1.0], [24500.0, 18.0], [26100.0, 2.0], [26900.0, 103.0], [28500.0, 2.0], [27700.0, 1.0], [29300.0, 15.0], [30100.0, 4.0], [32500.0, 4.0], [33000.0, 32.0], [34600.0, 15.0], [147100.0, 1.0], [37800.0, 2.0], [153500.0, 4.0], [159900.0, 1.0], [39400.0, 2.0], [42600.0, 2.0], [191900.0, 1.0], [198300.0, 1.0], [57000.0, 3.0], [60200.0, 13.0], [65000.0, 2.0], [66000.0, 2.0], [75600.0, 1.0], [85200.0, 1.0], [94800.0, 1.0], [101200.0, 9.0], [110800.0, 1.0], [130000.0, 5.0], [146400.0, 1.0], [159200.0, 3.0], [216800.0, 4.0], [150500.0, 1.0], [208100.0, 2.0], [65900.0, 16.0], [69100.0, 1.0], [81900.0, 1.0], [88300.0, 1.0], [91500.0, 1.0], [94700.0, 2.0], [104300.0, 1.0], [107500.0, 3.0], [110700.0, 1.0], [129900.0, 9.0], [135400.0, 27.0], [193000.0, 1.0], [133100.0, 35.0], [34100.0, 9.0], [35700.0, 12.0], [37300.0, 5.0], [40500.0, 1.0], [43700.0, 1.0], [46900.0, 1.0], [48500.0, 5.0], [50100.0, 2.0], [53300.0, 7.0], [56500.0, 2.0], [64500.0, 1.0], [71400.0, 6.0], [74600.0, 3.0], [81000.0, 1.0], [90600.0, 1.0], [93800.0, 2.0], [97000.0, 15.0], [100200.0, 369.0], [129000.0, 10.0], [137200.0, 1.0], [143600.0, 1.0], [194800.0, 3.0], [160500.0, 1.0], [224500.0, 1.0], [67300.0, 8.0], [73700.0, 3.0], [70500.0, 9.0], [80100.0, 1.0], [89700.0, 1.0], [92900.0, 1.0], [96100.0, 2.0], [99300.0, 2.0], [105700.0, 2.0], [102500.0, 62.0], [8300.0, 101.0], [139000.0, 2.0], [8700.0, 51.0], [9100.0, 51.0], [9500.0, 30.0], [9900.0, 71.0], [158200.0, 5.0], [10300.0, 165.0], [10700.0, 33.0], [11100.0, 236.0], [11500.0, 97.0], [11900.0, 63.0], [12300.0, 34.0], [12700.0, 6.0], [13100.0, 286.0], [13500.0, 11.0], [14300.0, 19.0], [13900.0, 15.0], [14700.0, 2.0], [15100.0, 18.0], [15500.0, 70.0], [15900.0, 33.0], [16300.0, 147.0], [17400.0, 8.0], [16600.0, 26.0], [18200.0, 54.0], [19000.0, 19.0], [19800.0, 50.0], [21400.0, 22.0], [22200.0, 18.0], [23000.0, 24.0], [23800.0, 2.0], [25400.0, 10.0], [24600.0, 2.0], [26200.0, 4.0], [27000.0, 7.0], [28600.0, 8.0], [29400.0, 7.0], [30200.0, 37.0], [31000.0, 7.0], [31800.0, 7.0], [33200.0, 100.0], [136700.0, 2.0], [149500.0, 3.0], [38000.0, 3.0], [39600.0, 2.0], [155900.0, 10.0], [42800.0, 2.0], [41200.0, 2.0], [44400.0, 2.0], [46000.0, 3.0], [194300.0, 1.0], [49200.0, 26.0], [207100.0, 1.0], [54000.0, 2.0], [219900.0, 1.0], [55600.0, 4.0], [60400.0, 5.0], [65200.0, 1.0], [69600.0, 3.0], [66400.0, 10.0], [95200.0, 1.0], [124000.0, 1.0], [130400.0, 14.0], [139200.0, 1.0], [145600.0, 20.0], [171200.0, 1.0], [196800.0, 1.0], [156100.0, 7.0], [66300.0, 2.0], [72700.0, 8.0], [101500.0, 1.0], [130300.0, 15.0], [153800.0, 8.0], [205000.0, 1.0], [34300.0, 64.0], [132300.0, 3.0], [35900.0, 8.0], [37500.0, 3.0], [42300.0, 2.0], [48700.0, 1.0], [51900.0, 3.0], [209100.0, 1.0], [55100.0, 4.0], [53500.0, 2.0], [228300.0, 1.0], [59900.0, 1.0], [61500.0, 4.0], [64700.0, 8.0], [68600.0, 4.0], [75000.0, 1.0], [81400.0, 1.0], [84600.0, 2.0], [87800.0, 1.0], [91000.0, 2.0], [100600.0, 10.0], [103800.0, 1.0], [107000.0, 33.0], [129400.0, 5.0], [149200.0, 4.0], [168400.0, 116.0], [194000.0, 1.0], [153300.0, 5.0], [159700.0, 5.0], [172500.0, 3.0], [191700.0, 2.0], [67700.0, 4.0], [74100.0, 1.0], [86900.0, 14.0], [90100.0, 1.0], [99700.0, 2.0], [128500.0, 12.0], [131800.0, 10.0], [138200.0, 4.0], [195800.0, 2.0], [16700.0, 10.0], [17500.0, 14.0], [18300.0, 31.0], [19100.0, 45.0], [19900.0, 23.0], [21500.0, 5.0], [20700.0, 10.0], [22300.0, 56.0], [23100.0, 20.0], [23900.0, 2.0], [25500.0, 3.0], [24700.0, 13.0], [26300.0, 4.0], [27100.0, 1.0], [27900.0, 114.0], [28700.0, 3.0], [31100.0, 5.0], [31900.0, 49.0], [32700.0, 3.0], [33400.0, 68.0], [36600.0, 2.0], [35000.0, 1.0], [38200.0, 2.0], [155100.0, 5.0], [161500.0, 1.0], [41400.0, 2.0], [43000.0, 1.0], [46200.0, 33.0], [47800.0, 2.0], [49400.0, 3.0], [51000.0, 1.0], [52600.0, 41.0], [57400.0, 2.0], [62200.0, 2.0], [65400.0, 2.0], [63800.0, 3.0], [66800.0, 6.0], [79600.0, 2.0], [92400.0, 1.0], [95600.0, 1.0], [118000.0, 1.0], [121200.0, 1.0], [127600.0, 13.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 229200.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 749.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 177633.0, "series": [{"data": [[0.0, 177633.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 43708.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 17910.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 749.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 42.49999999999999, "minX": 1.68286242E12, "maxY": 3000.0, "series": [{"data": [[1.68286254E12, 3000.0], [1.68286284E12, 42.49999999999999], [1.68286266E12, 3000.0], [1.68286248E12, 3000.0], [1.68286278E12, 164.74390243902445], [1.6828626E12, 3000.0], [1.68286242E12, 3000.0], [1.68286272E12, 2854.8709356667046]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68286284E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 100.0, "minX": 2.0, "maxY": 229264.0, "series": [{"data": [[2.0, 216801.0], [5.0, 217865.66666666666], [6.0, 214707.0], [7.0, 214706.0], [15.0, 227285.0], [17.0, 227283.5], [18.0, 227284.0], [20.0, 227284.0], [24.0, 227283.0], [26.0, 227282.66666666666], [27.0, 227281.0], [28.0, 227281.0], [31.0, 227278.66666666666], [33.0, 227279.0], [32.0, 227280.0], [35.0, 214162.0], [34.0, 214166.0], [37.0, 227196.5], [39.0, 227196.0], [41.0, 227194.0], [45.0, 208954.0], [44.0, 227193.5], [47.0, 207943.0], [46.0, 224524.0], [49.0, 224082.0], [48.0, 207941.0], [51.0, 209113.0], [50.0, 223072.0], [53.0, 208108.0], [52.0, 208109.0], [55.0, 207096.0], [54.0, 207100.0], [57.0, 218466.0], [56.0, 220044.0], [59.0, 227260.0], [58.0, 227266.0], [67.0, 226659.0], [66.0, 205081.0], [65.0, 227255.0], [64.0, 227259.6], [71.0, 224639.0], [70.0, 199865.0], [69.0, 200873.0], [68.0, 218024.0], [75.0, 101022.0], [72.0, 101025.0], [79.0, 223628.0], [78.0, 223631.0], [77.0, 101001.0], [76.0, 101013.0], [83.0, 101043.0], [82.0, 100022.0], [80.0, 100039.0], [87.0, 101033.0], [85.0, 101035.0], [84.0, 101040.0], [91.0, 101479.0], [90.0, 101494.0], [89.0, 201035.0], [88.0, 197846.0], [95.0, 101477.0], [99.0, 100634.0], [98.0, 101476.0], [96.0, 101477.0], [100.0, 101054.0], [107.0, 101472.0], [106.0, 100632.0], [105.0, 101054.5], [111.0, 101471.25], [115.0, 100606.0], [114.0, 100616.0], [113.0, 100846.0], [112.0, 100628.0], [119.0, 229263.5], [118.0, 229264.0], [116.0, 100604.0], [123.0, 229263.0], [122.0, 229262.0], [127.0, 229258.0], [126.0, 229259.0], [125.0, 229260.0], [124.0, 229262.5], [135.0, 198009.0], [134.0, 220600.0], [133.0, 195827.0], [132.0, 196834.0], [131.0, 228354.0], [130.0, 229255.0], [128.0, 229257.0], [143.0, 193973.0], [142.0, 94871.0], [141.0, 191789.0], [140.0, 192796.0], [139.0, 192798.0], [138.0, 193805.0], [137.0, 96662.0], [136.0, 194816.0], [151.0, 211518.0], [150.0, 212522.0], [149.0, 219266.0], [148.0, 205908.0], [147.0, 191955.0], [146.0, 192959.0], [145.0, 192964.0], [144.0, 193969.0], [159.0, 199850.0], [158.0, 208487.0], [157.0, 199282.0], [156.0, 200291.0], [155.0, 200292.0], [154.0, 217246.0], [153.0, 87268.0], [152.0, 88274.0], [167.0, 80208.0], [166.0, 81215.0], [165.0, 81217.0], [164.0, 82216.0], [163.0, 205460.0], [162.0, 206468.0], [161.0, 198842.0], [160.0, 199848.0], [175.0, 191774.0], [174.0, 192782.0], [173.0, 192782.0], [172.0, 193789.0], [171.0, 193793.0], [170.0, 194801.0], [169.0, 194802.0], [168.0, 195810.0], [183.0, 73669.0], [182.0, 74676.0], [181.0, 73131.0], [180.0, 74139.0], [179.0, 204122.0], [178.0, 205129.0], [177.0, 198389.0], [176.0, 199397.0], [191.0, 69631.0], [190.0, 69099.0], [189.0, 69093.0], [188.0, 70108.0], [187.0, 71650.0], [186.0, 201091.0], [185.0, 194351.0], [184.0, 202099.0], [199.0, 65592.0], [198.0, 67212.0], [197.0, 66602.0], [196.0, 196042.0], [195.0, 67611.0], [194.0, 68619.0], [193.0, 197054.0], [192.0, 198061.0], [207.0, 61553.0], [206.0, 64984.0], [205.0, 190996.0], [204.0, 63342.0], [203.0, 64343.0], [202.0, 193014.0], [201.0, 64584.0], [200.0, 194021.0], [215.0, 59937.0], [214.0, 63264.0], [213.0, 63267.0], [212.0, 60302.0], [211.0, 59533.0], [210.0, 60541.0], [209.0, 60543.0], [208.0, 61551.0], [223.0, 61094.0], [222.0, 59389.0], [221.0, 59392.0], [220.0, 60397.0], [219.0, 60401.0], [218.0, 64118.0], [217.0, 61409.0], [216.0, 62417.0], [231.0, 59587.0], [230.0, 60446.0], [229.0, 60596.0], [228.0, 61606.0], [227.0, 61606.0], [226.0, 62614.0], [225.0, 60084.0], [224.0, 61091.0], [239.0, 55549.0], [238.0, 56557.0], [237.0, 56560.0], [236.0, 57566.0], [235.0, 57569.0], [234.0, 58575.0], [233.0, 58578.0], [232.0, 59437.0], [247.0, 52095.0], [246.0, 53041.0], [244.0, 53982.0], [243.0, 53728.0], [242.0, 54538.0], [241.0, 54541.0], [240.0, 55547.0], [255.0, 63298.0], [254.0, 64305.0], [253.0, 64308.0], [252.0, 65315.0], [251.0, 65317.0], [250.0, 66325.0], [249.0, 51142.0], [248.0, 52092.0], [270.0, 41372.0], [271.0, 55600.0], [269.0, 171271.0], [268.0, 42382.0], [267.0, 42384.0], [266.0, 43392.0], [265.0, 43500.0], [264.0, 44401.0], [263.0, 44078.0], [257.0, 62285.0], [256.0, 63295.0], [259.0, 61279.0], [258.0, 62287.0], [262.0, 45086.0], [261.0, 46078.0], [260.0, 46524.0], [286.0, 48528.0], [287.0, 38503.0], [285.0, 48532.0], [284.0, 49538.0], [283.0, 49540.0], [282.0, 50552.0], [281.0, 50552.0], [280.0, 51560.0], [279.0, 51563.0], [273.0, 54592.0], [272.0, 55599.0], [275.0, 53589.0], [274.0, 54590.0], [278.0, 52570.0], [277.0, 52571.0], [276.0, 53579.0], [291.0, 46514.0], [302.0, 33510.5], [300.0, 33511.0], [290.0, 46514.0], [289.0, 47520.0], [288.0, 47521.0], [299.0, 33522.0], [298.0, 33563.0], [297.0, 33564.0], [295.0, 44934.0], [294.0, 44937.0], [293.0, 45944.0], [292.0, 45950.0], [307.0, 33509.0], [319.0, 33325.5], [318.0, 33325.0], [315.0, 33325.0], [312.0, 33498.0], [311.0, 33500.0], [310.0, 33503.0], [308.0, 33507.0], [306.0, 33508.0], [304.0, 33508.0], [333.0, 33321.0], [334.0, 34221.0], [332.0, 33321.5], [323.0, 33324.5], [322.0, 33324.0], [320.0, 34226.0], [330.0, 33321.5], [329.0, 33322.0], [328.0, 33324.0], [327.0, 34675.0], [326.0, 33323.0], [325.0, 33323.0], [350.0, 34659.0], [351.0, 161501.0], [349.0, 33309.0], [348.0, 34661.0], [347.0, 33311.0], [346.0, 33312.0], [345.0, 43688.0], [344.0, 33990.5], [342.0, 33315.0], [339.0, 33992.5], [337.0, 33994.0], [336.0, 34221.0], [340.0, 33316.0], [355.0, 33298.0], [366.0, 34642.0], [365.0, 44299.333333333336], [362.0, 102581.0], [361.0, 33293.0], [359.0, 33295.0], [358.0, 33971.5], [356.0, 34649.0], [354.0, 34652.0], [353.0, 33301.0], [352.0, 34655.0], [371.0, 34630.0], [383.0, 97800.0], [381.0, 113190.5], [379.0, 161455.0], [378.0, 113208.5], [376.0, 34178.0], [375.0, 64949.0], [374.0, 97826.5], [373.0, 34629.0], [370.0, 34181.0], [369.0, 98063.5], [368.0, 34192.0], [387.0, 43612.0], [399.0, 33465.0], [397.0, 160764.0], [395.0, 33469.0], [394.0, 97120.0], [392.0, 160768.0], [391.0, 97120.0], [390.0, 97119.5], [386.0, 43609.0], [385.0, 161445.0], [414.0, 33465.0], [415.0, 33464.0], [412.0, 33464.5], [410.0, 33464.0], [408.0, 33464.333333333336], [405.0, 33465.5], [403.0, 33466.333333333336], [402.0, 33467.0], [401.0, 33467.0], [429.0, 33448.0], [431.0, 33447.0], [428.0, 33448.0], [419.0, 33455.0], [418.0, 33459.0], [417.0, 33462.0], [416.0, 33463.0], [426.0, 33452.0], [425.0, 33450.5], [424.0, 33451.0], [422.0, 33453.0], [421.0, 33454.0], [420.0, 33453.0], [446.0, 33428.0], [447.0, 33427.0], [444.0, 33427.0], [443.0, 33436.0], [441.0, 33439.666666666664], [440.0, 33440.0], [438.0, 33440.0], [435.0, 33442.0], [433.0, 33444.0], [432.0, 33446.0], [451.0, 33407.0], [462.0, 33232.5], [460.0, 33233.0], [458.0, 33233.0], [456.0, 33235.0], [455.0, 33401.0], [453.0, 33401.0], [452.0, 33409.0], [450.0, 33421.0], [448.0, 33425.0], [479.0, 33224.0], [478.0, 33223.333333333336], [467.0, 33233.0], [466.0, 33231.0], [465.0, 33233.0], [475.0, 33224.0], [474.0, 33227.0], [473.0, 33227.0], [472.0, 33230.0], [470.0, 33230.0], [469.0, 33229.0], [468.0, 33232.0], [494.0, 33218.0], [495.0, 33217.0], [493.0, 33219.0], [492.0, 33219.0], [491.0, 33220.0], [489.0, 33219.0], [488.0, 33219.0], [487.0, 33220.0], [483.0, 33220.0], [481.0, 33222.0], [485.0, 33220.0], [484.0, 33219.5], [511.0, 33196.0], [510.0, 33197.5], [509.0, 33198.0], [507.0, 33197.666666666664], [505.0, 33200.0], [504.0, 33205.12500000001], [537.0, 33159.0], [542.0, 32467.0], [543.0, 32464.0], [530.0, 33165.0], [528.0, 33166.0], [533.0, 33163.0], [532.0, 33163.0], [540.0, 32466.0], [539.0, 42611.0], [538.0, 42612.0], [536.0, 33159.0], [517.0, 33181.0], [516.0, 33188.0], [515.0, 33190.0], [514.0, 33191.0], [513.0, 33191.0], [512.0, 33192.0], [527.0, 33166.0], [526.0, 33170.0], [524.0, 33172.0], [523.0, 33177.333333333336], [520.0, 33182.333333333336], [535.0, 33160.0], [534.0, 33161.5], [572.0, 35162.0], [575.0, 34153.0], [561.0, 40462.0], [560.0, 40462.0], [563.0, 39453.0], [562.0, 29986.0], [565.0, 28410.0], [564.0, 39448.0], [574.0, 34155.0], [573.0, 35161.0], [571.0, 36172.0], [570.0, 36173.0], [569.0, 37181.0], [568.0, 37182.0], [559.0, 40978.0], [546.0, 32433.5], [548.0, 32433.0], [547.0, 32433.0], [551.0, 32426.0], [550.0, 32427.5], [558.0, 40982.0], [557.0, 32145.0], [555.0, 32147.0], [553.0, 32148.0], [567.0, 38187.0], [566.0, 38190.0], [602.0, 22570.0], [606.0, 22562.0], [607.0, 32020.0], [593.0, 22577.0], [592.0, 22577.0], [596.0, 22576.5], [594.0, 22575.5], [605.0, 22564.0], [604.0, 22566.0], [603.0, 22568.0], [600.0, 22573.0], [583.0, 22661.0], [582.0, 22665.0], [581.0, 22666.0], [580.0, 22668.0], [579.0, 22676.5], [577.0, 33143.0], [576.0, 33149.0], [590.0, 22648.0], [588.0, 22651.0], [587.0, 22652.0], [586.0, 22653.0], [585.0, 22657.0], [584.0, 22659.0], [598.0, 22575.0], [597.0, 22575.0], [637.0, 21704.0], [628.0, 21738.0], [638.0, 21702.0], [624.0, 21739.5], [627.0, 21738.0], [625.0, 21739.0], [635.0, 20806.0], [634.0, 21725.5], [632.0, 21732.0], [613.0, 21742.333333333332], [610.0, 165217.0], [608.0, 32021.0], [622.0, 21739.0], [621.0, 25407.0], [620.0, 21741.0], [619.0, 21740.333333333332], [616.0, 21742.0], [631.0, 21735.0], [630.0, 21735.0], [629.0, 21736.0], [665.0, 21664.5], [669.0, 31125.0], [670.0, 31121.0], [657.0, 21685.0], [656.0, 21687.0], [659.0, 21681.0], [658.0, 21683.0], [668.0, 21658.0], [667.0, 21661.0], [666.0, 21663.0], [664.0, 21665.0], [646.0, 21696.0], [645.0, 21696.0], [644.0, 21700.0], [643.0, 21702.5], [641.0, 21702.0], [640.0, 21703.0], [655.0, 21687.0], [654.0, 21687.0], [652.0, 21689.0], [651.0, 21689.0], [650.0, 21689.666666666668], [648.0, 21690.0], [662.0, 21675.0], [660.0, 21677.0], [691.0, 20831.0], [703.0, 21272.0], [701.0, 21125.666666666668], [699.0, 21050.5], [698.0, 20829.0], [687.0, 21055.0], [674.0, 20835.0], [673.0, 20983.0], [678.0, 20835.0], [677.0, 20983.0], [685.0, 20833.0], [683.0, 20832.0], [682.0, 20717.25], [695.0, 21051.0], [693.0, 21274.0], [692.0, 20829.0], [690.0, 21276.0], [689.0, 71511.0], [732.0, 14896.75], [735.0, 21254.0], [728.0, 18155.75], [710.0, 21267.0], [708.0, 21267.0], [707.0, 20826.0], [705.0, 37839.666666666664], [727.0, 20818.0], [723.0, 21262.0], [722.0, 21264.0], [720.0, 8838.0], [719.0, 8676.0], [718.0, 21043.25], [717.0, 21267.0], [715.0, 21266.0], [712.0, 21044.0], [766.0, 21206.0], [767.0, 8778.0], [754.0, 46306.0], [752.0, 8805.0], [756.0, 8792.0], [755.0, 28578.0], [765.0, 71357.0], [764.0, 71357.0], [763.0, 71658.0], [762.0, 49495.0], [760.0, 71447.0], [741.0, 13786.0], [740.0, 14804.5], [738.0, 80812.5], [751.0, 54769.66666666667], [748.0, 27563.0], [744.0, 8756.666666666666], [759.0, 20774.0], [758.0, 46336.0], [787.0, 12908.333333333334], [798.0, 7755.0], [799.0, 7754.0], [786.0, 42197.66666666667], [795.0, 30184.0], [793.0, 8742.0], [792.0, 8756.0], [774.0, 8773.5], [771.0, 8777.0], [770.0, 71654.0], [769.0, 40109.0], [780.0, 8769.0], [779.0, 14981.5], [777.0, 38818.5], [776.0, 8774.0], [791.0, 14970.5], [789.0, 11472.0], [788.0, 20968.5], [824.0, 7709.0], [828.0, 29151.0], [829.0, 29152.0], [817.0, 7740.0], [816.0, 7743.0], [827.0, 7705.0], [826.0, 7705.0], [825.0, 7709.0], [815.0, 7745.0], [800.0, 7755.0], [802.0, 7754.0], [801.0, 7755.5], [804.0, 7753.0], [803.0, 7753.0], [807.0, 7751.0], [806.0, 7752.0], [814.0, 7746.0], [813.0, 7749.0], [812.0, 7749.5], [810.0, 7750.333333333333], [823.0, 7710.0], [820.0, 7711.0], [819.0, 7726.0], [818.0, 7728.0], [936.0, 19906.0], [1021.0, 19904.0], [1017.0, 19904.0], [1009.0, 7480.0], [1150.0, 1022.0], [1128.0, 7468.0], [1122.0, 1025.0], [1120.0, 7474.5], [1188.0, 6055.594444444442], [1186.0, 9897.5], [1158.0, 22041.75], [1154.0, 4242.0], [1152.0, 8821.0], [1274.0, 997.5], [1284.0, 997.0], [1282.0, 997.0], [1280.0, 997.0], [2460.0, 897.125], [2456.0, 895.0196078431372], [2508.0, 397.0], [2520.0, 390.5], [2524.0, 389.0], [2528.0, 388.0], [2452.0, 893.0], [2448.0, 895.1749999999998], [2436.0, 898.8], [2492.0, 401.0], [2484.0, 897.0], [2476.0, 896.0], [2472.0, 896.2], [2468.0, 894.0], [2464.0, 897.4], [2516.0, 391.0], [2512.0, 396.0], [2504.0, 398.6], [2496.0, 400.0], [2584.0, 194.83333333333334], [2632.0, 139.66666666666666], [2644.0, 136.0], [2668.0, 122.0], [2576.0, 196.0625], [2620.0, 154.25], [2616.0, 156.0], [2612.0, 157.0], [2608.0, 158.125], [2600.0, 159.0], [2592.0, 194.0], [2784.0, 79903.23076923077], [2752.0, 1018.6666666666667], [2756.0, 27217.0], [2780.0, 11705.416666666668], [2788.0, 129276.33333333333], [2712.0, 1038.0], [2708.0, 1038.0], [2700.0, 1016.0], [2696.0, 1017.5], [2692.0, 1023.0], [2688.0, 1026.0], [2728.0, 1024.3333333333333], [2724.0, 1033.0], [2720.0, 1036.0], [2840.0, 1570.0], [2844.0, 555.0], [2836.0, 1570.0], [2832.0, 65324.833333333336], [3000.0, 2619.768800020254], [2453.0, 890.0], [2529.0, 388.0], [2461.0, 898.0], [2457.0, 895.5408163265305], [2445.0, 896.15625], [2437.0, 898.08], [2493.0, 400.0], [2489.0, 402.5], [2485.0, 896.375], [2481.0, 897.0], [2477.0, 896.0], [2473.0, 896.875], [2469.0, 2445.6111111111118], [2465.0, 897.0], [2525.0, 389.0], [2521.0, 391.0], [2517.0, 392.0], [2509.0, 397.0], [2505.0, 398.0], [2685.0, 1027.0], [2681.0, 101.0], [2633.0, 138.0], [2629.0, 140.0], [2637.0, 136.0], [2653.0, 123.0], [2649.0, 123.5], [2673.0, 101.33333333333333], [2669.0, 121.0], [2665.0, 122.33333333333333], [2573.0, 197.0], [2581.0, 195.5], [2613.0, 157.0], [2605.0, 158.0], [2601.0, 159.0], [2597.0, 158.0], [2793.0, 1138.5], [2789.0, 612.0], [2757.0, 1471.0], [2809.0, 810.75], [2801.0, 820.5], [2797.0, 32938.25], [2785.0, 129288.0], [2705.0, 1015.0], [2701.0, 1016.0], [2697.0, 1017.0], [2745.0, 1020.0], [2725.0, 1032.0], [2721.0, 1034.0], [2845.0, 1556.0], [2837.0, 129234.0], [2833.0, 65018.5], [1151.0, 4244.0], [1121.0, 8830.0], [1119.0, 7474.0], [1117.0, 7476.0], [1115.0, 7476.0], [1109.0, 10186.0], [1107.0, 7474.0], [1189.0, 1002.0], [1187.0, 11817.974789915965], [1153.0, 9412.0], [1285.0, 996.0], [2450.0, 926.721014492754], [2462.0, 895.5], [2458.0, 895.2272727272726], [2454.0, 1085.857142857142], [2438.0, 897.0], [2494.0, 400.0], [2486.0, 401.0], [2482.0, 897.0], [2478.0, 896.6666666666666], [2474.0, 896.4285714285714], [2466.0, 897.1666666666666], [2526.0, 388.0], [2522.0, 391.0], [2518.0, 391.0], [2510.0, 396.0], [2506.0, 398.0], [2498.0, 399.0], [2658.0, 122.66666666666666], [2582.0, 195.0], [2666.0, 122.0], [2642.0, 135.5], [2638.0, 136.5], [2662.0, 121.4], [2622.0, 155.5], [2574.0, 198.0], [2586.0, 194.0], [2590.0, 194.0], [2606.0, 158.0], [2602.0, 157.0], [2798.0, 822.0], [2810.0, 810.0], [2782.0, 626.0], [2806.0, 811.3333333333334], [2790.0, 129273.0], [2718.0, 1035.5], [2714.0, 1037.3333333333333], [2710.0, 1038.5], [2706.0, 1015.0], [2690.0, 1025.0], [2742.0, 1021.0], [2738.0, 1020.6], [2722.0, 1034.0], [2846.0, 554.0], [2842.0, 39661.2], [2838.0, 129233.0], [2834.0, 43920.333333333336], [2451.0, 896.1911764705883], [2463.0, 897.0], [2459.0, 893.0294117647062], [2455.0, 895.5], [2447.0, 896.0], [2491.0, 400.5], [2487.0, 401.0], [2475.0, 898.0], [2471.0, 896.7931034482758], [2467.0, 897.4166666666666], [2527.0, 388.0], [2523.0, 390.0], [2511.0, 397.0], [2507.0, 398.0], [2499.0, 399.0], [2679.0, 100.0], [2627.0, 148.8], [2643.0, 136.0], [2683.0, 100.22222222222223], [2659.0, 122.5], [2571.0, 198.26666666666668], [2575.0, 197.25], [2583.0, 195.0], [2587.0, 195.0], [2615.0, 156.0], [2603.0, 158.0], [2799.0, 821.0], [2803.0, 812.0], [2755.0, 1018.6], [2783.0, 1469.0], [2791.0, 834.0], [2719.0, 1036.0], [2715.0, 1037.0], [2691.0, 1024.0], [2751.0, 1019.6], [2747.0, 1019.0], [2739.0, 1020.0], [2723.0, 1033.0], [2843.0, 558.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[2984.8890249999963, 2866.59251666667]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 3000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 688.8, "minX": 1.68286242E12, "maxY": 698742.7166666667, "series": [{"data": [[1.68286254E12, 571462.25], [1.68286284E12, 983.2333333333333], [1.68286266E12, 468223.0333333333], [1.68286248E12, 698742.7166666667], [1.68286278E12, 1998.3166666666666], [1.6828626E12, 628309.15], [1.68286242E12, 279717.38333333336], [1.68286272E12, 239583.28333333333]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.68286254E12, 393792.0], [1.68286284E12, 688.8], [1.68286266E12, 328120.8], [1.68286248E12, 484050.0], [1.68286278E12, 1377.6], [1.6828626E12, 435262.8], [1.68286242E12, 197475.6], [1.68286272E12, 168940.8]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68286284E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 1089.1899692371514, "minX": 1.68286242E12, "maxY": 208783.6585365854, "series": [{"data": [[1.68286254E12, 3801.9928529012436], [1.68286284E12, 208783.6585365854], [1.68286266E12, 2049.58476180731], [1.68286248E12, 1089.1899692371514], [1.68286278E12, 128785.46951219517], [1.6828626E12, 4437.188868174733], [1.68286242E12, 1443.9918329150526], [1.68286272E12, 3108.2132842796]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68286284E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 994.1769727973413, "minX": 1.68286242E12, "maxY": 208783.63414634147, "series": [{"data": [[1.68286254E12, 3420.0341873091425], [1.68286284E12, 208783.63414634147], [1.68286266E12, 1992.3776544031023], [1.68286248E12, 994.1769727973413], [1.68286278E12, 128785.44512195118], [1.6828626E12, 3927.507312948057], [1.68286242E12, 1443.979539750728], [1.68286272E12, 3091.780103410564]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68286284E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 39.17865498319779, "minX": 1.68286242E12, "maxY": 113270.57317073173, "series": [{"data": [[1.68286254E12, 1784.4528333898784], [1.68286284E12, 113270.57317073173], [1.68286266E12, 421.33590032236594], [1.68286248E12, 98.0558570391621], [1.68286278E12, 51350.310975609755], [1.6828626E12, 1842.3717783628965], [1.68286242E12, 39.17865498319779], [1.68286272E12, 1116.0560803420462]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68286284E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 4.0, "minX": 1.68286242E12, "maxY": 229264.0, "series": [{"data": [[1.68286254E12, 153598.0], [1.68286284E12, 227285.0], [1.68286266E12, 215107.0], [1.68286248E12, 92976.0], [1.68286278E12, 229264.0], [1.6828626E12, 173632.0], [1.68286242E12, 34242.0], [1.68286272E12, 171271.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.68286254E12, 428.0], [1.68286284E12, 227284.0], [1.68286266E12, 1106.0], [1.68286248E12, 155.0], [1.68286278E12, 219933.0], [1.6828626E12, 885.0], [1.68286242E12, 322.0], [1.68286272E12, 2041.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.68286254E12, 135411.99], [1.68286284E12, 227285.0], [1.68286266E12, 100383.0], [1.68286248E12, 15212.94000000001], [1.68286278E12, 229264.0], [1.6828626E12, 66547.54000000007], [1.68286242E12, 28384.980000000003], [1.68286272E12, 65537.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.68286254E12, 17711.0], [1.68286284E12, 227284.85], [1.68286266E12, 2489.0], [1.68286248E12, 168.0], [1.68286278E12, 229261.5], [1.6828626E12, 1845.8500000000022], [1.68286242E12, 11644.300000000025], [1.68286272E12, 13791.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.68286254E12, 5.0], [1.68286284E12, 100022.0], [1.68286266E12, 29.0], [1.68286248E12, 6.0], [1.68286278E12, 52977.0], [1.6828626E12, 18.0], [1.68286242E12, 4.0], [1.68286272E12, 35.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.68286254E12, 142.0], [1.68286284E12, 227194.0], [1.68286266E12, 424.0], [1.68286248E12, 107.0], [1.68286278E12, 101257.0], [1.6828626E12, 443.0], [1.68286242E12, 156.0], [1.68286272E12, 531.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68286284E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 50.0, "minX": 1.0, "maxY": 227258.0, "series": [{"data": [[2.0, 64784.0], [3.0, 19964.0], [4.0, 27779.5], [5.0, 55205.0], [6.0, 8066.5], [7.0, 67626.0], [8.0, 40982.0], [9.0, 91751.0], [10.0, 227258.0], [11.0, 53253.0], [12.0, 6304.0], [15.0, 5546.0], [17.0, 33509.0], [19.0, 89.0], [20.0, 2246.0], [22.0, 34019.0], [26.0, 90212.0], [30.0, 9046.5], [31.0, 22577.0], [32.0, 1035.0], [35.0, 1040.0], [41.0, 22511.5], [40.0, 4118.0], [44.0, 56794.5], [47.0, 46755.0], [48.0, 101476.0], [50.0, 1047.0], [62.0, 21703.0], [65.0, 366.0], [67.0, 257.0], [75.0, 43068.0], [82.0, 56199.5], [89.0, 88.0], [92.0, 1600.5], [98.0, 76.0], [96.0, 32427.5], [102.0, 91.0], [107.0, 18866.0], [110.0, 89.0], [117.0, 58817.0], [125.0, 20835.0], [131.0, 160.0], [138.0, 52358.0], [143.0, 33472.0], [139.0, 5104.0], [145.0, 175.0], [181.0, 151.0], [176.0, 474.0], [189.0, 9390.0], [194.0, 166.5], [198.0, 194.0], [200.0, 64.0], [213.0, 8847.0], [219.0, 131.0], [245.0, 6822.0], [253.0, 11180.0], [256.0, 172.0], [273.0, 71.0], [290.0, 17026.0], [291.0, 79.0], [304.0, 168.0], [314.0, 100069.5], [325.0, 239.0], [324.0, 98.0], [334.0, 282.0], [350.0, 443.0], [360.0, 100208.0], [378.0, 8262.0], [370.0, 198.0], [372.0, 54.0], [398.0, 14122.0], [414.0, 182.0], [430.0, 146.0], [419.0, 544.0], [436.0, 65.0], [450.0, 173.0], [463.0, 242.0], [461.0, 72.0], [449.0, 56.0], [506.0, 117.0], [518.0, 10057.0], [562.0, 58.0], [544.0, 249.0], [567.0, 156.0], [552.0, 442.0], [553.0, 355.0], [601.0, 119.0], [599.0, 11127.0], [603.0, 372.0], [626.0, 223.0], [612.0, 77.0], [610.0, 335.0], [659.0, 247.0], [653.0, 409.0], [675.0, 110.0], [696.0, 183.0], [701.0, 137.0], [688.0, 407.0], [714.0, 51.0], [732.0, 221.0], [726.0, 529.0], [734.0, 667.0], [727.0, 426.0], [712.0, 387.0], [733.0, 361.0], [753.0, 159.0], [739.0, 88.0], [757.0, 144.0], [736.0, 403.0], [740.0, 383.0], [758.0, 426.0], [765.0, 330.0], [797.0, 560.0], [774.0, 143.0], [786.0, 166.0], [799.0, 153.0], [787.0, 161.0], [790.0, 436.0], [793.0, 419.0], [792.0, 455.5], [781.0, 399.0], [804.0, 145.0], [822.0, 188.0], [800.0, 412.0], [807.0, 433.0], [830.0, 453.0], [829.0, 378.0], [812.0, 590.0], [813.0, 419.0], [803.0, 409.0], [802.0, 407.0], [862.0, 62.0], [843.0, 687.0], [849.0, 357.0], [842.0, 440.0], [837.0, 436.0], [838.0, 437.0], [847.0, 500.0], [868.0, 89.0], [875.0, 141.0], [866.0, 348.0], [922.0, 116.0], [914.0, 182.0], [904.0, 77.0], [902.0, 121.0], [911.0, 448.0], [913.0, 448.0], [921.0, 380.0], [949.0, 192.0], [946.0, 612.0], [986.0, 631.0], [993.0, 178.0], [995.0, 492.0], [1050.0, 80.0], [1032.0, 449.0], [1035.0, 375.0], [1104.0, 185.0], [1147.0, 120.0], [1148.0, 437.0], [1163.0, 207.0], [1204.0, 413.0], [1273.0, 196.0], [1238.0, 195.0], [1272.0, 65.0], [1261.0, 98.5], [1247.0, 116.0], [1220.0, 78.0], [1244.0, 388.0], [1230.0, 468.0], [1342.0, 168.0], [1297.0, 109.0], [1338.0, 122.0], [1290.0, 379.0], [1376.0, 79.0], [1359.0, 87.0], [1357.0, 113.0], [1393.0, 164.0], [1385.0, 73.0], [1371.0, 114.0], [1348.0, 607.0], [1440.0, 157.0], [1417.0, 449.0], [1416.0, 234.0], [1447.0, 153.0], [1412.0, 405.0], [1443.0, 852.0], [1458.0, 640.0], [1506.0, 156.0], [1511.0, 169.0], [1503.0, 837.0], [1476.0, 95.0], [1525.0, 753.0], [1569.0, 141.0], [1541.0, 72.0], [1571.0, 159.0], [1546.0, 153.0], [1562.0, 363.0], [1576.0, 527.0], [1587.0, 547.0], [1584.0, 424.0], [1604.0, 103.0], [1609.0, 180.0], [1634.0, 167.0], [1640.0, 526.0], [1617.0, 419.0], [1649.0, 906.0], [1633.0, 486.0], [1666.0, 130.0], [1671.0, 269.0], [1692.0, 182.0], [1726.0, 557.0], [1717.0, 173.0], [1690.0, 897.0], [1748.0, 109.0], [1763.0, 161.0], [1756.0, 233.0], [1770.0, 820.0], [1737.0, 604.0], [1743.0, 535.0], [1835.0, 65.0], [1809.0, 106.0], [1851.0, 114.0], [1907.0, 181.0], [1871.0, 169.0], [1911.0, 769.0], [1971.0, 130.0], [1956.0, 821.0], [1981.0, 52.0], [2006.0, 126.0], [2016.0, 50.0], [2026.0, 770.0], [2097.0, 105.0], [2166.0, 373.0], [2081.0, 77.0], [2071.0, 742.0], [2159.0, 679.0], [2198.0, 181.0], [2239.0, 67.0], [2219.0, 75.0], [2246.0, 740.0], [2411.0, 517.0], [2404.0, 610.0], [2333.0, 779.0], [2385.0, 879.0], [2706.0, 783.0], [1.0, 130915.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[599.0, 19455.0], [701.0, 153193.0], [44.0, 34317.0], [50.0, 145704.0], [830.0, 49716.0], [829.0, 133773.0], [838.0, 91850.0], [847.0, 97043.0], [866.0, 75787.0], [62.0, 165217.0], [1050.0, 14131.0], [1147.0, 135859.0], [1261.0, 18271.0], [1297.0, 16107.0], [1290.0, 36559.0], [1571.0, 33193.0], [1634.0, 156219.0], [1640.0, 15115.0], [1649.0, 104075.5], [1717.0, 155522.0], [1809.0, 16050.0], [117.0, 27994.0], [1981.0, 33058.0], [8.0, 24415.0], [138.0, 44137.0], [12.0, 8781.0], [1.0, 73726.0], [22.0, 34009.0], [26.0, 28938.0], [449.0, 29031.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 2706.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 227258.0, "series": [{"data": [[2.0, 64784.0], [3.0, 19964.0], [4.0, 27779.5], [5.0, 55205.0], [6.0, 8066.5], [7.0, 67626.0], [8.0, 40982.0], [9.0, 91751.0], [10.0, 227258.0], [11.0, 53253.0], [12.0, 6304.0], [15.0, 5546.0], [17.0, 33509.0], [19.0, 89.0], [20.0, 2246.0], [22.0, 34019.0], [26.0, 90212.0], [30.0, 9046.5], [31.0, 22577.0], [32.0, 1035.0], [35.0, 1040.0], [41.0, 22511.5], [40.0, 4118.0], [44.0, 56794.5], [47.0, 46755.0], [48.0, 101476.0], [50.0, 1047.0], [62.0, 21703.0], [65.0, 356.0], [67.0, 257.0], [75.0, 43068.0], [82.0, 56199.5], [89.0, 88.0], [92.0, 1600.5], [98.0, 76.0], [96.0, 32427.5], [102.0, 91.0], [107.0, 18866.0], [110.0, 89.0], [117.0, 58817.0], [125.0, 20835.0], [131.0, 160.0], [138.0, 52358.0], [143.0, 33472.0], [139.0, 5104.0], [145.0, 175.0], [181.0, 151.0], [176.0, 474.0], [189.0, 9390.0], [194.0, 166.5], [198.0, 194.0], [200.0, 64.0], [213.0, 8847.0], [219.0, 131.0], [245.0, 6822.0], [253.0, 11180.0], [256.0, 172.0], [273.0, 71.0], [290.0, 17026.0], [291.0, 79.0], [304.0, 168.0], [314.0, 100069.5], [325.0, 239.0], [324.0, 98.0], [334.0, 282.0], [350.0, 443.0], [360.0, 100208.0], [378.0, 8262.0], [370.0, 198.0], [372.0, 54.0], [398.0, 14122.0], [414.0, 182.0], [430.0, 146.0], [419.0, 544.0], [436.0, 65.0], [450.0, 173.0], [463.0, 242.0], [461.0, 72.0], [449.0, 56.0], [506.0, 117.0], [518.0, 10057.0], [562.0, 58.0], [544.0, 249.0], [567.0, 156.0], [552.0, 442.0], [553.0, 355.0], [601.0, 119.0], [599.0, 11127.0], [603.0, 372.0], [626.0, 223.0], [612.0, 77.0], [610.0, 335.0], [659.0, 247.0], [653.0, 409.0], [675.0, 110.0], [696.0, 183.0], [701.0, 137.0], [688.0, 407.0], [714.0, 50.5], [732.0, 221.0], [726.0, 529.0], [734.0, 667.0], [727.0, 426.0], [712.0, 387.0], [733.0, 361.0], [753.0, 159.0], [739.0, 88.0], [757.0, 144.0], [736.0, 403.0], [740.0, 383.0], [758.0, 426.0], [765.0, 330.0], [797.0, 560.0], [774.0, 143.0], [786.0, 166.0], [799.0, 153.0], [787.0, 161.0], [790.0, 436.0], [793.0, 419.0], [792.0, 455.5], [781.0, 399.0], [804.0, 145.0], [822.0, 188.0], [800.0, 412.0], [807.0, 433.0], [830.0, 453.0], [829.0, 378.0], [812.0, 590.0], [813.0, 419.0], [803.0, 409.0], [802.0, 407.0], [862.0, 62.0], [843.0, 687.0], [849.0, 357.0], [842.0, 440.0], [837.0, 436.0], [838.0, 437.0], [847.0, 500.0], [868.0, 89.0], [875.0, 141.0], [866.0, 348.0], [922.0, 116.0], [914.0, 182.0], [904.0, 77.0], [902.0, 121.0], [911.0, 448.0], [913.0, 448.0], [921.0, 380.0], [949.0, 192.0], [946.0, 612.0], [986.0, 631.0], [993.0, 178.0], [995.0, 492.0], [1050.0, 80.0], [1032.0, 449.0], [1035.0, 375.0], [1104.0, 185.0], [1147.0, 120.0], [1148.0, 437.0], [1163.0, 207.0], [1204.0, 412.5], [1273.0, 196.0], [1238.0, 195.0], [1272.0, 65.0], [1261.0, 98.5], [1247.0, 116.0], [1220.0, 78.0], [1244.0, 388.0], [1230.0, 468.0], [1342.0, 168.0], [1297.0, 109.0], [1338.0, 122.0], [1290.0, 379.0], [1376.0, 79.0], [1359.0, 87.0], [1357.0, 113.0], [1393.0, 164.0], [1385.0, 73.0], [1371.0, 114.0], [1348.0, 607.0], [1440.0, 157.0], [1417.0, 449.0], [1416.0, 234.0], [1447.0, 153.0], [1412.0, 405.0], [1443.0, 852.0], [1458.0, 640.0], [1506.0, 156.0], [1511.0, 169.0], [1503.0, 837.0], [1476.0, 95.0], [1525.0, 753.0], [1569.0, 141.0], [1541.0, 72.0], [1571.0, 159.0], [1546.0, 153.0], [1562.0, 363.0], [1576.0, 527.0], [1587.0, 547.0], [1584.0, 424.0], [1604.0, 103.0], [1609.0, 180.0], [1634.0, 167.0], [1640.0, 526.0], [1617.0, 419.0], [1649.0, 906.0], [1633.0, 486.0], [1666.0, 130.0], [1671.0, 269.0], [1692.0, 182.0], [1726.0, 557.0], [1717.0, 173.0], [1690.0, 897.0], [1748.0, 109.0], [1763.0, 161.0], [1756.0, 233.0], [1770.0, 820.0], [1737.0, 604.0], [1743.0, 535.0], [1835.0, 65.0], [1809.0, 106.0], [1851.0, 114.0], [1907.0, 181.0], [1871.0, 169.0], [1911.0, 769.0], [1971.0, 130.0], [1956.0, 821.0], [1981.0, 52.0], [2006.0, 126.0], [2016.0, 50.0], [2026.0, 770.0], [2097.0, 105.0], [2166.0, 373.0], [2081.0, 77.0], [2071.0, 742.0], [2159.0, 679.0], [2198.0, 181.0], [2239.0, 67.0], [2219.0, 75.0], [2246.0, 740.0], [2411.0, 517.0], [2404.0, 610.0], [2333.0, 779.0], [2385.0, 879.0], [2706.0, 783.0], [1.0, 130915.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[599.0, 0.0], [701.0, 0.0], [44.0, 0.0], [50.0, 0.0], [830.0, 0.0], [829.0, 0.0], [838.0, 0.0], [847.0, 0.0], [866.0, 0.0], [62.0, 0.0], [1050.0, 0.0], [1147.0, 0.0], [1261.0, 0.0], [1297.0, 0.0], [1290.0, 0.0], [1571.0, 0.0], [1634.0, 0.0], [1640.0, 0.0], [1649.0, 0.0], [1717.0, 0.0], [1809.0, 0.0], [117.0, 0.0], [1981.0, 0.0], [8.0, 0.0], [138.0, 0.0], [12.0, 0.0], [1.0, 0.0], [22.0, 0.0], [26.0, 0.0], [449.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 2706.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 320.0, "minX": 1.68286242E12, "maxY": 966.1833333333333, "series": [{"data": [[1.68286254E12, 785.8666666666667], [1.68286266E12, 653.3333333333334], [1.68286248E12, 966.1833333333333], [1.6828626E12, 834.6166666666667], [1.68286242E12, 440.0], [1.68286272E12, 320.0]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68286272E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.68286242E12, "maxY": 960.4166666666666, "series": [{"data": [[1.68286254E12, 781.3333333333334], [1.68286284E12, 1.3666666666666667], [1.68286266E12, 651.0333333333333], [1.68286248E12, 960.4166666666666], [1.68286278E12, 2.7333333333333334], [1.6828626E12, 863.6166666666667], [1.68286242E12, 391.81666666666666], [1.68286272E12, 335.2]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.68286254E12, 4.533333333333333], [1.68286266E12, 0.4], [1.68286248E12, 3.95], [1.6828626E12, 3.566666666666667], [1.68286272E12, 0.03333333333333333]], "isOverall": false, "label": "Non HTTP response code: java.net.SocketException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68286284E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.68286242E12, "maxY": 960.4166666666666, "series": [{"data": [[1.68286254E12, 781.3333333333334], [1.68286284E12, 1.3666666666666667], [1.68286266E12, 651.0333333333333], [1.68286248E12, 960.4166666666666], [1.68286278E12, 2.7333333333333334], [1.6828626E12, 863.6166666666667], [1.68286242E12, 391.81666666666666], [1.68286272E12, 335.2]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.68286254E12, 4.533333333333333], [1.68286266E12, 0.4], [1.68286248E12, 3.95], [1.6828626E12, 3.566666666666667], [1.68286272E12, 0.03333333333333333]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68286284E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.68286242E12, "maxY": 960.4166666666666, "series": [{"data": [[1.68286254E12, 781.3333333333334], [1.68286284E12, 1.3666666666666667], [1.68286266E12, 651.0333333333333], [1.68286248E12, 960.4166666666666], [1.68286278E12, 2.7333333333333334], [1.6828626E12, 863.6166666666667], [1.68286242E12, 391.81666666666666], [1.68286272E12, 335.2]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.68286254E12, 4.533333333333333], [1.68286266E12, 0.4], [1.68286248E12, 3.95], [1.6828626E12, 3.566666666666667], [1.68286272E12, 0.03333333333333333]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68286284E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

