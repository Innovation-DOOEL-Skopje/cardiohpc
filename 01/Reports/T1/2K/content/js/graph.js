/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 3.0, "minX": 0.0, "maxY": 190180.0, "series": [{"data": [[0.0, 3.0], [0.1, 5.0], [0.2, 5.0], [0.3, 5.0], [0.4, 6.0], [0.5, 6.0], [0.6, 6.0], [0.7, 6.0], [0.8, 7.0], [0.9, 7.0], [1.0, 7.0], [1.1, 8.0], [1.2, 8.0], [1.3, 8.0], [1.4, 9.0], [1.5, 9.0], [1.6, 9.0], [1.7, 10.0], [1.8, 10.0], [1.9, 10.0], [2.0, 10.0], [2.1, 11.0], [2.2, 11.0], [2.3, 11.0], [2.4, 12.0], [2.5, 12.0], [2.6, 12.0], [2.7, 13.0], [2.8, 13.0], [2.9, 13.0], [3.0, 13.0], [3.1, 14.0], [3.2, 14.0], [3.3, 14.0], [3.4, 15.0], [3.5, 15.0], [3.6, 15.0], [3.7, 16.0], [3.8, 16.0], [3.9, 16.0], [4.0, 17.0], [4.1, 17.0], [4.2, 17.0], [4.3, 17.0], [4.4, 18.0], [4.5, 18.0], [4.6, 18.0], [4.7, 19.0], [4.8, 19.0], [4.9, 19.0], [5.0, 20.0], [5.1, 20.0], [5.2, 20.0], [5.3, 21.0], [5.4, 21.0], [5.5, 21.0], [5.6, 21.0], [5.7, 22.0], [5.8, 22.0], [5.9, 23.0], [6.0, 23.0], [6.1, 24.0], [6.2, 24.0], [6.3, 25.0], [6.4, 25.0], [6.5, 25.0], [6.6, 26.0], [6.7, 26.0], [6.8, 27.0], [6.9, 27.0], [7.0, 27.0], [7.1, 28.0], [7.2, 28.0], [7.3, 29.0], [7.4, 29.0], [7.5, 29.0], [7.6, 29.0], [7.7, 30.0], [7.8, 30.0], [7.9, 31.0], [8.0, 31.0], [8.1, 32.0], [8.2, 32.0], [8.3, 32.0], [8.4, 33.0], [8.5, 33.0], [8.6, 34.0], [8.7, 34.0], [8.8, 34.0], [8.9, 35.0], [9.0, 35.0], [9.1, 35.0], [9.2, 36.0], [9.3, 36.0], [9.4, 37.0], [9.5, 37.0], [9.6, 37.0], [9.7, 37.0], [9.8, 38.0], [9.9, 38.0], [10.0, 38.0], [10.1, 39.0], [10.2, 39.0], [10.3, 39.0], [10.4, 39.0], [10.5, 40.0], [10.6, 40.0], [10.7, 41.0], [10.8, 41.0], [10.9, 42.0], [11.0, 42.0], [11.1, 42.0], [11.2, 43.0], [11.3, 43.0], [11.4, 43.0], [11.5, 44.0], [11.6, 44.0], [11.7, 44.0], [11.8, 45.0], [11.9, 45.0], [12.0, 45.0], [12.1, 45.0], [12.2, 46.0], [12.3, 46.0], [12.4, 46.0], [12.5, 46.0], [12.6, 47.0], [12.7, 47.0], [12.8, 47.0], [12.9, 48.0], [13.0, 48.0], [13.1, 48.0], [13.2, 48.0], [13.3, 49.0], [13.4, 49.0], [13.5, 49.0], [13.6, 50.0], [13.7, 50.0], [13.8, 50.0], [13.9, 51.0], [14.0, 51.0], [14.1, 52.0], [14.2, 52.0], [14.3, 52.0], [14.4, 52.0], [14.5, 53.0], [14.6, 53.0], [14.7, 54.0], [14.8, 54.0], [14.9, 54.0], [15.0, 55.0], [15.1, 55.0], [15.2, 55.0], [15.3, 55.0], [15.4, 56.0], [15.5, 56.0], [15.6, 56.0], [15.7, 56.0], [15.8, 57.0], [15.9, 57.0], [16.0, 57.0], [16.1, 58.0], [16.2, 58.0], [16.3, 58.0], [16.4, 59.0], [16.5, 59.0], [16.6, 59.0], [16.7, 59.0], [16.8, 60.0], [16.9, 60.0], [17.0, 61.0], [17.1, 61.0], [17.2, 61.0], [17.3, 61.0], [17.4, 62.0], [17.5, 62.0], [17.6, 62.0], [17.7, 63.0], [17.8, 63.0], [17.9, 63.0], [18.0, 64.0], [18.1, 64.0], [18.2, 64.0], [18.3, 65.0], [18.4, 65.0], [18.5, 66.0], [18.6, 66.0], [18.7, 66.0], [18.8, 67.0], [18.9, 67.0], [19.0, 68.0], [19.1, 68.0], [19.2, 68.0], [19.3, 69.0], [19.4, 69.0], [19.5, 70.0], [19.6, 70.0], [19.7, 70.0], [19.8, 71.0], [19.9, 72.0], [20.0, 72.0], [20.1, 73.0], [20.2, 73.0], [20.3, 73.0], [20.4, 74.0], [20.5, 74.0], [20.6, 74.0], [20.7, 75.0], [20.8, 76.0], [20.9, 76.0], [21.0, 77.0], [21.1, 78.0], [21.2, 78.0], [21.3, 79.0], [21.4, 79.0], [21.5, 80.0], [21.6, 80.0], [21.7, 80.0], [21.8, 81.0], [21.9, 81.0], [22.0, 81.0], [22.1, 82.0], [22.2, 82.0], [22.3, 82.0], [22.4, 83.0], [22.5, 83.0], [22.6, 84.0], [22.7, 84.0], [22.8, 85.0], [22.9, 86.0], [23.0, 86.0], [23.1, 87.0], [23.2, 87.0], [23.3, 88.0], [23.4, 88.0], [23.5, 88.0], [23.6, 88.0], [23.7, 89.0], [23.8, 89.0], [23.9, 89.0], [24.0, 89.0], [24.1, 90.0], [24.2, 90.0], [24.3, 90.0], [24.4, 90.0], [24.5, 91.0], [24.6, 91.0], [24.7, 91.0], [24.8, 91.0], [24.9, 92.0], [25.0, 92.0], [25.1, 92.0], [25.2, 93.0], [25.3, 93.0], [25.4, 93.0], [25.5, 94.0], [25.6, 94.0], [25.7, 94.0], [25.8, 95.0], [25.9, 95.0], [26.0, 95.0], [26.1, 96.0], [26.2, 96.0], [26.3, 96.0], [26.4, 96.0], [26.5, 97.0], [26.6, 97.0], [26.7, 97.0], [26.8, 98.0], [26.9, 98.0], [27.0, 98.0], [27.1, 99.0], [27.2, 99.0], [27.3, 99.0], [27.4, 99.0], [27.5, 99.0], [27.6, 100.0], [27.7, 100.0], [27.8, 100.0], [27.9, 100.0], [28.0, 100.0], [28.1, 101.0], [28.2, 101.0], [28.3, 101.0], [28.4, 101.0], [28.5, 101.0], [28.6, 102.0], [28.7, 102.0], [28.8, 102.0], [28.9, 103.0], [29.0, 103.0], [29.1, 103.0], [29.2, 104.0], [29.3, 104.0], [29.4, 104.0], [29.5, 104.0], [29.6, 105.0], [29.7, 105.0], [29.8, 105.0], [29.9, 105.0], [30.0, 105.0], [30.1, 106.0], [30.2, 106.0], [30.3, 106.0], [30.4, 106.0], [30.5, 107.0], [30.6, 107.0], [30.7, 107.0], [30.8, 108.0], [30.9, 108.0], [31.0, 108.0], [31.1, 108.0], [31.2, 109.0], [31.3, 109.0], [31.4, 109.0], [31.5, 109.0], [31.6, 109.0], [31.7, 110.0], [31.8, 110.0], [31.9, 110.0], [32.0, 110.0], [32.1, 110.0], [32.2, 111.0], [32.3, 111.0], [32.4, 111.0], [32.5, 111.0], [32.6, 111.0], [32.7, 111.0], [32.8, 112.0], [32.9, 112.0], [33.0, 112.0], [33.1, 112.0], [33.2, 112.0], [33.3, 112.0], [33.4, 112.0], [33.5, 113.0], [33.6, 113.0], [33.7, 113.0], [33.8, 113.0], [33.9, 113.0], [34.0, 113.0], [34.1, 113.0], [34.2, 114.0], [34.3, 114.0], [34.4, 114.0], [34.5, 114.0], [34.6, 114.0], [34.7, 114.0], [34.8, 115.0], [34.9, 115.0], [35.0, 115.0], [35.1, 115.0], [35.2, 115.0], [35.3, 116.0], [35.4, 116.0], [35.5, 116.0], [35.6, 116.0], [35.7, 116.0], [35.8, 116.0], [35.9, 117.0], [36.0, 117.0], [36.1, 117.0], [36.2, 117.0], [36.3, 117.0], [36.4, 117.0], [36.5, 117.0], [36.6, 118.0], [36.7, 118.0], [36.8, 118.0], [36.9, 118.0], [37.0, 118.0], [37.1, 118.0], [37.2, 119.0], [37.3, 119.0], [37.4, 119.0], [37.5, 119.0], [37.6, 120.0], [37.7, 120.0], [37.8, 120.0], [37.9, 120.0], [38.0, 120.0], [38.1, 121.0], [38.2, 121.0], [38.3, 121.0], [38.4, 121.0], [38.5, 121.0], [38.6, 122.0], [38.7, 122.0], [38.8, 122.0], [38.9, 122.0], [39.0, 122.0], [39.1, 122.0], [39.2, 123.0], [39.3, 123.0], [39.4, 123.0], [39.5, 123.0], [39.6, 123.0], [39.7, 123.0], [39.8, 124.0], [39.9, 124.0], [40.0, 124.0], [40.1, 124.0], [40.2, 124.0], [40.3, 125.0], [40.4, 125.0], [40.5, 125.0], [40.6, 125.0], [40.7, 125.0], [40.8, 125.0], [40.9, 125.0], [41.0, 126.0], [41.1, 126.0], [41.2, 126.0], [41.3, 126.0], [41.4, 126.0], [41.5, 126.0], [41.6, 126.0], [41.7, 126.0], [41.8, 126.0], [41.9, 127.0], [42.0, 127.0], [42.1, 127.0], [42.2, 127.0], [42.3, 127.0], [42.4, 127.0], [42.5, 127.0], [42.6, 127.0], [42.7, 127.0], [42.8, 128.0], [42.9, 128.0], [43.0, 128.0], [43.1, 128.0], [43.2, 128.0], [43.3, 128.0], [43.4, 128.0], [43.5, 128.0], [43.6, 129.0], [43.7, 129.0], [43.8, 129.0], [43.9, 129.0], [44.0, 129.0], [44.1, 129.0], [44.2, 129.0], [44.3, 130.0], [44.4, 130.0], [44.5, 130.0], [44.6, 130.0], [44.7, 130.0], [44.8, 130.0], [44.9, 130.0], [45.0, 131.0], [45.1, 131.0], [45.2, 131.0], [45.3, 131.0], [45.4, 131.0], [45.5, 131.0], [45.6, 131.0], [45.7, 132.0], [45.8, 132.0], [45.9, 132.0], [46.0, 132.0], [46.1, 132.0], [46.2, 132.0], [46.3, 132.0], [46.4, 133.0], [46.5, 133.0], [46.6, 133.0], [46.7, 133.0], [46.8, 133.0], [46.9, 133.0], [47.0, 133.0], [47.1, 133.0], [47.2, 133.0], [47.3, 134.0], [47.4, 134.0], [47.5, 134.0], [47.6, 134.0], [47.7, 134.0], [47.8, 134.0], [47.9, 134.0], [48.0, 134.0], [48.1, 135.0], [48.2, 135.0], [48.3, 135.0], [48.4, 135.0], [48.5, 135.0], [48.6, 135.0], [48.7, 135.0], [48.8, 135.0], [48.9, 136.0], [49.0, 136.0], [49.1, 136.0], [49.2, 136.0], [49.3, 136.0], [49.4, 137.0], [49.5, 137.0], [49.6, 137.0], [49.7, 137.0], [49.8, 137.0], [49.9, 137.0], [50.0, 138.0], [50.1, 138.0], [50.2, 138.0], [50.3, 138.0], [50.4, 138.0], [50.5, 138.0], [50.6, 138.0], [50.7, 138.0], [50.8, 139.0], [50.9, 139.0], [51.0, 139.0], [51.1, 139.0], [51.2, 139.0], [51.3, 139.0], [51.4, 140.0], [51.5, 140.0], [51.6, 140.0], [51.7, 140.0], [51.8, 140.0], [51.9, 140.0], [52.0, 140.0], [52.1, 141.0], [52.2, 141.0], [52.3, 141.0], [52.4, 141.0], [52.5, 141.0], [52.6, 141.0], [52.7, 141.0], [52.8, 141.0], [52.9, 141.0], [53.0, 141.0], [53.1, 142.0], [53.2, 142.0], [53.3, 142.0], [53.4, 142.0], [53.5, 142.0], [53.6, 142.0], [53.7, 142.0], [53.8, 142.0], [53.9, 142.0], [54.0, 142.0], [54.1, 143.0], [54.2, 143.0], [54.3, 143.0], [54.4, 143.0], [54.5, 143.0], [54.6, 143.0], [54.7, 143.0], [54.8, 143.0], [54.9, 144.0], [55.0, 144.0], [55.1, 144.0], [55.2, 144.0], [55.3, 144.0], [55.4, 145.0], [55.5, 145.0], [55.6, 145.0], [55.7, 145.0], [55.8, 146.0], [55.9, 146.0], [56.0, 146.0], [56.1, 146.0], [56.2, 146.0], [56.3, 146.0], [56.4, 147.0], [56.5, 147.0], [56.6, 147.0], [56.7, 147.0], [56.8, 148.0], [56.9, 148.0], [57.0, 148.0], [57.1, 149.0], [57.2, 149.0], [57.3, 150.0], [57.4, 150.0], [57.5, 151.0], [57.6, 151.0], [57.7, 152.0], [57.8, 153.0], [57.9, 154.0], [58.0, 156.0], [58.1, 158.0], [58.2, 159.0], [58.3, 159.0], [58.4, 161.0], [58.5, 163.0], [58.6, 164.0], [58.7, 166.0], [58.8, 168.0], [58.9, 170.0], [59.0, 170.0], [59.1, 171.0], [59.2, 173.0], [59.3, 174.0], [59.4, 175.0], [59.5, 177.0], [59.6, 181.0], [59.7, 182.0], [59.8, 184.0], [59.9, 185.0], [60.0, 185.0], [60.1, 186.0], [60.2, 189.0], [60.3, 191.0], [60.4, 192.0], [60.5, 193.0], [60.6, 193.0], [60.7, 195.0], [60.8, 198.0], [60.9, 199.0], [61.0, 199.0], [61.1, 200.0], [61.2, 200.0], [61.3, 202.0], [61.4, 204.0], [61.5, 207.0], [61.6, 210.0], [61.7, 211.0], [61.8, 212.0], [61.9, 212.0], [62.0, 213.0], [62.1, 214.0], [62.2, 214.0], [62.3, 215.0], [62.4, 216.0], [62.5, 217.0], [62.6, 220.0], [62.7, 225.0], [62.8, 232.0], [62.9, 234.0], [63.0, 235.0], [63.1, 236.0], [63.2, 237.0], [63.3, 238.0], [63.4, 243.0], [63.5, 246.0], [63.6, 247.0], [63.7, 247.0], [63.8, 248.0], [63.9, 248.0], [64.0, 250.0], [64.1, 252.0], [64.2, 253.0], [64.3, 271.0], [64.4, 294.0], [64.5, 316.0], [64.6, 340.0], [64.7, 352.0], [64.8, 381.0], [64.9, 426.0], [65.0, 513.0], [65.1, 563.0], [65.2, 609.0], [65.3, 632.0], [65.4, 693.0], [65.5, 782.0], [65.6, 897.0], [65.7, 966.0], [65.8, 1033.0], [65.9, 1039.0], [66.0, 1043.0], [66.1, 1047.0], [66.2, 1051.0], [66.3, 1057.0], [66.4, 1061.0], [66.5, 1068.0], [66.6, 1077.0], [66.7, 1087.0], [66.8, 1100.0], [66.9, 1120.0], [67.0, 1134.0], [67.1, 1149.0], [67.2, 1168.0], [67.3, 1186.0], [67.4, 1211.0], [67.5, 1255.0], [67.6, 1313.0], [67.7, 1368.0], [67.8, 1416.0], [67.9, 1525.0], [68.0, 1600.0], [68.1, 1785.0], [68.2, 1841.0], [68.3, 1912.0], [68.4, 2039.0], [68.5, 2081.0], [68.6, 2139.0], [68.7, 2208.0], [68.8, 2231.0], [68.9, 2365.0], [69.0, 2529.0], [69.1, 2611.0], [69.2, 2686.0], [69.3, 2758.0], [69.4, 2821.0], [69.5, 2902.0], [69.6, 2932.0], [69.7, 2983.0], [69.8, 3075.0], [69.9, 3124.0], [70.0, 3244.0], [70.1, 3353.0], [70.2, 3487.0], [70.3, 3548.0], [70.4, 3584.0], [70.5, 3633.0], [70.6, 3679.0], [70.7, 3690.0], [70.8, 3696.0], [70.9, 3727.0], [71.0, 3757.0], [71.1, 3791.0], [71.2, 3863.0], [71.3, 3896.0], [71.4, 4012.0], [71.5, 4111.0], [71.6, 4125.0], [71.7, 4189.0], [71.8, 4217.0], [71.9, 4219.0], [72.0, 4229.0], [72.1, 4350.0], [72.2, 4472.0], [72.3, 4528.0], [72.4, 4573.0], [72.5, 4602.0], [72.6, 4656.0], [72.7, 4753.0], [72.8, 4913.0], [72.9, 4941.0], [73.0, 4970.0], [73.1, 5047.0], [73.2, 5085.0], [73.3, 5123.0], [73.4, 5142.0], [73.5, 5149.0], [73.6, 5168.0], [73.7, 5209.0], [73.8, 5246.0], [73.9, 5257.0], [74.0, 5271.0], [74.1, 5312.0], [74.2, 5325.0], [74.3, 5334.0], [74.4, 5344.0], [74.5, 5358.0], [74.6, 5400.0], [74.7, 5467.0], [74.8, 5531.0], [74.9, 5602.0], [75.0, 5641.0], [75.1, 5808.0], [75.2, 6014.0], [75.3, 6109.0], [75.4, 6172.0], [75.5, 6285.0], [75.6, 6439.0], [75.7, 6572.0], [75.8, 6716.0], [75.9, 6766.0], [76.0, 6779.0], [76.1, 6834.0], [76.2, 6876.0], [76.3, 6968.0], [76.4, 7016.0], [76.5, 7117.0], [76.6, 7135.0], [76.7, 7148.0], [76.8, 7154.0], [76.9, 7166.0], [77.0, 7168.0], [77.1, 7183.0], [77.2, 7235.0], [77.3, 7344.0], [77.4, 7360.0], [77.5, 7362.0], [77.6, 7373.0], [77.7, 7378.0], [77.8, 7407.0], [77.9, 7443.0], [78.0, 7490.0], [78.1, 7563.0], [78.2, 7571.0], [78.3, 7583.0], [78.4, 7688.0], [78.5, 7787.0], [78.6, 7943.0], [78.7, 8057.0], [78.8, 8107.0], [78.9, 8217.0], [79.0, 8406.0], [79.1, 8420.0], [79.2, 8451.0], [79.3, 8485.0], [79.4, 8500.0], [79.5, 8509.0], [79.6, 8521.0], [79.7, 8644.0], [79.8, 8693.0], [79.9, 8791.0], [80.0, 8957.0], [80.1, 8982.0], [80.2, 9116.0], [80.3, 9164.0], [80.4, 9211.0], [80.5, 9331.0], [80.6, 9453.0], [80.7, 9735.0], [80.8, 9742.0], [80.9, 9770.0], [81.0, 9796.0], [81.1, 10015.0], [81.2, 10018.0], [81.3, 10031.0], [81.4, 10090.0], [81.5, 10144.0], [81.6, 10161.0], [81.7, 10192.0], [81.8, 10673.0], [81.9, 11136.0], [82.0, 11759.0], [82.1, 11975.0], [82.2, 12153.0], [82.3, 12262.0], [82.4, 12265.0], [82.5, 12299.0], [82.6, 12376.0], [82.7, 12456.0], [82.8, 12458.0], [82.9, 12465.0], [83.0, 12468.0], [83.1, 12485.0], [83.2, 12564.0], [83.3, 12649.0], [83.4, 12675.0], [83.5, 12682.0], [83.6, 12723.0], [83.7, 12931.0], [83.8, 12934.0], [83.9, 12988.0], [84.0, 12996.0], [84.1, 13002.0], [84.2, 13034.0], [84.3, 13068.0], [84.4, 13074.0], [84.5, 13076.0], [84.6, 13098.0], [84.7, 13103.0], [84.8, 13165.0], [84.9, 13173.0], [85.0, 13187.0], [85.1, 13276.0], [85.2, 13448.0], [85.3, 13475.0], [85.4, 13537.0], [85.5, 13588.0], [85.6, 13616.0], [85.7, 13661.0], [85.8, 13677.0], [85.9, 13679.0], [86.0, 13686.0], [86.1, 13695.0], [86.2, 13707.0], [86.3, 13726.0], [86.4, 13740.0], [86.5, 13765.0], [86.6, 13813.0], [86.7, 13972.0], [86.8, 13975.0], [86.9, 13994.0], [87.0, 14011.0], [87.1, 14118.0], [87.2, 14130.0], [87.3, 14193.0], [87.4, 14229.0], [87.5, 14243.0], [87.6, 14254.0], [87.7, 14281.0], [87.8, 14318.0], [87.9, 14333.0], [88.0, 14356.0], [88.1, 14384.0], [88.2, 14396.0], [88.3, 14411.0], [88.4, 14464.0], [88.5, 14492.0], [88.6, 14519.0], [88.7, 14546.0], [88.8, 14549.0], [88.9, 14689.0], [89.0, 14729.0], [89.1, 14805.0], [89.2, 14867.0], [89.3, 14903.0], [89.4, 14977.0], [89.5, 14979.0], [89.6, 15070.0], [89.7, 15251.0], [89.8, 15444.0], [89.9, 15696.0], [90.0, 15750.0], [90.1, 15906.0], [90.2, 15913.0], [90.3, 15928.0], [90.4, 15966.0], [90.5, 15980.0], [90.6, 15982.0], [90.7, 15999.0], [90.8, 16069.0], [90.9, 16157.0], [91.0, 16161.0], [91.1, 16163.0], [91.2, 16164.0], [91.3, 16456.0], [91.4, 16658.0], [91.5, 16802.0], [91.6, 16865.0], [91.7, 16928.0], [91.8, 16966.0], [91.9, 17082.0], [92.0, 17444.0], [92.1, 17605.0], [92.2, 18315.0], [92.3, 18696.0], [92.4, 19406.0], [92.5, 20707.0], [92.6, 20956.0], [92.7, 21709.0], [92.8, 22866.0], [92.9, 23135.0], [93.0, 23377.0], [93.1, 24054.0], [93.2, 24374.0], [93.3, 25301.0], [93.4, 25608.0], [93.5, 26559.0], [93.6, 26727.0], [93.7, 27740.0], [93.8, 28717.0], [93.9, 29785.0], [94.0, 30883.0], [94.1, 31890.0], [94.2, 31959.0], [94.3, 32033.0], [94.4, 33351.0], [94.5, 33544.0], [94.6, 34585.0], [94.7, 35619.0], [94.8, 35801.0], [94.9, 36605.0], [95.0, 39685.0], [95.1, 41704.0], [95.2, 44999.0], [95.3, 47185.0], [95.4, 47856.0], [95.5, 50032.0], [95.6, 56794.0], [95.7, 63648.0], [95.8, 64736.0], [95.9, 65264.0], [96.0, 67285.0], [96.1, 68790.0], [96.2, 72590.0], [96.3, 72690.0], [96.4, 76995.0], [96.5, 77259.0], [96.6, 78361.0], [96.7, 80011.0], [96.8, 81898.0], [96.9, 83252.0], [97.0, 87029.0], [97.1, 90053.0], [97.2, 96454.0], [97.3, 100038.0], [97.4, 100066.0], [97.5, 100108.0], [97.6, 100140.0], [97.7, 100154.0], [97.8, 100281.0], [97.9, 100552.0], [98.0, 103009.0], [98.1, 104324.0], [98.2, 111487.0], [98.3, 130394.0], [98.4, 131487.0], [98.5, 131991.0], [98.6, 133461.0], [98.7, 134359.0], [98.8, 138938.0], [98.9, 140172.0], [99.0, 146867.0], [99.1, 147547.0], [99.2, 148123.0], [99.3, 150567.0], [99.4, 160084.0], [99.5, 161803.0], [99.6, 162303.0], [99.7, 163912.0], [99.8, 163919.0], [99.9, 165295.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 20218.0, "series": [{"data": [[0.0, 16613.0], [157600.0, 4.0], [132900.0, 35.0], [148900.0, 6.0], [158500.0, 2.0], [161700.0, 17.0], [164900.0, 3.0], [66700.0, 2.0], [69900.0, 1.0], [71500.0, 3.0], [73100.0, 1.0], [76300.0, 1.0], [77900.0, 11.0], [79500.0, 10.0], [81100.0, 1.0], [85900.0, 1.0], [100300.0, 8.0], [130700.0, 8.0], [133800.0, 7.0], [185000.0, 1.0], [100.0, 20218.0], [33700.0, 16.0], [131500.0, 2.0], [137900.0, 18.0], [34500.0, 5.0], [37700.0, 1.0], [150700.0, 2.0], [147500.0, 12.0], [38500.0, 2.0], [39300.0, 5.0], [40100.0, 10.0], [40900.0, 14.0], [41700.0, 5.0], [43300.0, 1.0], [44100.0, 1.0], [44900.0, 5.0], [45700.0, 1.0], [47300.0, 10.0], [49700.0, 9.0], [200.0, 2077.0], [55300.0, 1.0], [64100.0, 16.0], [64900.0, 23.0], [67400.0, 5.0], [65800.0, 1.0], [72200.0, 1.0], [77000.0, 9.0], [300.0, 246.0], [81800.0, 63.0], [78600.0, 1.0], [83400.0, 4.0], [89800.0, 1.0], [96200.0, 16.0], [400.0, 60.0], [115400.0, 1.0], [500.0, 131.0], [129800.0, 12.0], [600.0, 136.0], [161200.0, 1.0], [700.0, 60.0], [800.0, 57.0], [900.0, 79.0], [1000.0, 642.0], [1100.0, 346.0], [1200.0, 130.0], [1300.0, 113.0], [1400.0, 65.0], [1500.0, 70.0], [1600.0, 44.0], [1700.0, 70.0], [1800.0, 51.0], [1900.0, 66.0], [2000.0, 82.0], [2100.0, 82.0], [2300.0, 32.0], [2200.0, 142.0], [142900.0, 1.0], [146100.0, 1.0], [2400.0, 29.0], [149300.0, 2.0], [2500.0, 49.0], [162100.0, 1.0], [2600.0, 90.0], [165300.0, 12.0], [2700.0, 93.0], [2800.0, 72.0], [2900.0, 140.0], [3000.0, 60.0], [3100.0, 71.0], [3200.0, 51.0], [3300.0, 71.0], [3400.0, 51.0], [3500.0, 114.0], [3600.0, 244.0], [3700.0, 173.0], [3800.0, 122.0], [3900.0, 37.0], [4000.0, 53.0], [4100.0, 153.0], [4200.0, 209.0], [4300.0, 44.0], [66500.0, 2.0], [4600.0, 116.0], [4400.0, 67.0], [4500.0, 155.0], [71300.0, 3.0], [69700.0, 2.0], [4800.0, 31.0], [4700.0, 32.0], [74500.0, 1.0], [5100.0, 257.0], [5000.0, 147.0], [79300.0, 22.0], [4900.0, 132.0], [80900.0, 1.0], [5300.0, 326.0], [85700.0, 2.0], [5200.0, 227.0], [82500.0, 1.0], [84100.0, 1.0], [5500.0, 92.0], [5600.0, 110.0], [5400.0, 88.0], [5800.0, 46.0], [5700.0, 5.0], [93700.0, 1.0], [5900.0, 16.0], [6000.0, 61.0], [6100.0, 87.0], [95300.0, 2.0], [6200.0, 43.0], [6300.0, 35.0], [100100.0, 189.0], [6400.0, 53.0], [6500.0, 32.0], [6600.0, 51.0], [6900.0, 79.0], [6800.0, 117.0], [6700.0, 163.0], [7100.0, 388.0], [7000.0, 53.0], [7300.0, 312.0], [7400.0, 145.0], [7200.0, 97.0], [7500.0, 179.0], [7600.0, 44.0], [7800.0, 16.0], [7900.0, 69.0], [7700.0, 68.0], [8000.0, 71.0], [8100.0, 72.0], [8400.0, 258.0], [8600.0, 93.0], [134200.0, 1.0], [8200.0, 31.0], [9000.0, 38.0], [9200.0, 76.0], [140600.0, 3.0], [147000.0, 1.0], [8800.0, 14.0], [9600.0, 2.0], [9400.0, 18.0], [10000.0, 210.0], [9800.0, 13.0], [10200.0, 2.0], [163000.0, 4.0], [10600.0, 29.0], [10400.0, 8.0], [11200.0, 3.0], [10800.0, 5.0], [11000.0, 8.0], [11600.0, 30.0], [11400.0, 2.0], [12000.0, 55.0], [12200.0, 169.0], [11800.0, 7.0], [12600.0, 164.0], [12400.0, 290.0], [13200.0, 41.0], [13000.0, 350.0], [12800.0, 11.0], [13600.0, 345.0], [13800.0, 63.0], [13400.0, 141.0], [14200.0, 228.0], [14000.0, 90.0], [14600.0, 46.0], [14400.0, 184.0], [14800.0, 129.0], [15200.0, 45.0], [15000.0, 27.0], [15600.0, 15.0], [15800.0, 24.0], [15400.0, 36.0], [16200.0, 3.0], [16000.0, 85.0], [16800.0, 100.0], [17200.0, 27.0], [16400.0, 32.0], [17600.0, 8.0], [18000.0, 6.0], [18400.0, 2.0], [18800.0, 14.0], [21200.0, 3.0], [20800.0, 19.0], [22400.0, 2.0], [23200.0, 40.0], [22800.0, 30.0], [24000.0, 64.0], [23600.0, 1.0], [24400.0, 5.0], [24800.0, 4.0], [26400.0, 3.0], [25600.0, 39.0], [26800.0, 1.0], [27600.0, 8.0], [28400.0, 2.0], [29200.0, 2.0], [29600.0, 7.0], [30000.0, 6.0], [30400.0, 36.0], [30800.0, 6.0], [31200.0, 31.0], [31600.0, 2.0], [32000.0, 50.0], [32400.0, 1.0], [131900.0, 22.0], [32800.0, 1.0], [33600.0, 5.0], [36000.0, 4.0], [36800.0, 1.0], [147900.0, 23.0], [37600.0, 2.0], [157500.0, 3.0], [160700.0, 8.0], [41600.0, 13.0], [42400.0, 1.0], [163900.0, 101.0], [43200.0, 8.0], [44000.0, 4.0], [47200.0, 6.0], [49600.0, 1.0], [50400.0, 1.0], [52000.0, 1.0], [61600.0, 1.0], [63200.0, 13.0], [64800.0, 1.0], [65600.0, 4.0], [68800.0, 1.0], [67200.0, 3.0], [76800.0, 1.0], [78400.0, 1.0], [80000.0, 9.0], [83200.0, 18.0], [88000.0, 1.0], [86400.0, 1.0], [91200.0, 1.0], [94400.0, 2.0], [97600.0, 2.0], [96000.0, 1.0], [102400.0, 2.0], [123200.0, 1.0], [134400.0, 8.0], [147200.0, 10.0], [150400.0, 1.0], [160000.0, 3.0], [163200.0, 8.0], [169600.0, 4.0], [135300.0, 1.0], [148100.0, 15.0], [164100.0, 1.0], [68700.0, 2.0], [67100.0, 1.0], [70300.0, 2.0], [73500.0, 3.0], [79900.0, 1.0], [78300.0, 7.0], [83100.0, 3.0], [87900.0, 4.0], [86300.0, 1.0], [110300.0, 4.0], [133000.0, 17.0], [139400.0, 11.0], [145800.0, 3.0], [161800.0, 67.0], [133900.0, 12.0], [33100.0, 4.0], [33900.0, 6.0], [146700.0, 18.0], [35500.0, 2.0], [39500.0, 2.0], [41900.0, 1.0], [43500.0, 4.0], [45100.0, 2.0], [46700.0, 6.0], [48300.0, 3.0], [53100.0, 7.0], [54700.0, 1.0], [57100.0, 1.0], [61900.0, 4.0], [65100.0, 2.0], [69400.0, 1.0], [66200.0, 1.0], [72600.0, 46.0], [77400.0, 1.0], [83800.0, 1.0], [87000.0, 14.0], [103000.0, 65.0], [106200.0, 16.0], [131600.0, 25.0], [138000.0, 14.0], [160400.0, 2.0], [138900.0, 4.0], [132500.0, 1.0], [190100.0, 1.0], [66900.0, 5.0], [74900.0, 2.0], [78100.0, 6.0], [84500.0, 1.0], [86100.0, 1.0], [94100.0, 1.0], [97300.0, 3.0], [98900.0, 15.0], [102100.0, 2.0], [100500.0, 15.0], [133400.0, 6.0], [149400.0, 26.0], [159000.0, 2.0], [162200.0, 3.0], [165400.0, 3.0], [168600.0, 9.0], [16900.0, 109.0], [16500.0, 19.0], [17300.0, 15.0], [18100.0, 1.0], [19300.0, 6.0], [18900.0, 4.0], [18500.0, 18.0], [20100.0, 18.0], [19700.0, 2.0], [21300.0, 26.0], [20900.0, 49.0], [21700.0, 13.0], [23300.0, 14.0], [22900.0, 11.0], [25300.0, 21.0], [24900.0, 14.0], [25700.0, 12.0], [26500.0, 47.0], [26900.0, 7.0], [27700.0, 48.0], [28500.0, 4.0], [29700.0, 43.0], [30500.0, 2.0], [30900.0, 1.0], [32500.0, 10.0], [131100.0, 1.0], [134300.0, 21.0], [34600.0, 12.0], [33000.0, 1.0], [147100.0, 7.0], [35400.0, 8.0], [36200.0, 2.0], [150300.0, 4.0], [37000.0, 1.0], [39400.0, 1.0], [156700.0, 2.0], [163100.0, 1.0], [41000.0, 4.0], [41800.0, 6.0], [45000.0, 17.0], [44200.0, 2.0], [48200.0, 2.0], [53000.0, 9.0], [61000.0, 4.0], [61800.0, 2.0], [63400.0, 9.0], [62600.0, 11.0], [65000.0, 13.0], [64200.0, 1.0], [69200.0, 3.0], [70800.0, 6.0], [72400.0, 2.0], [77200.0, 35.0], [80400.0, 1.0], [83600.0, 1.0], [85200.0, 1.0], [90000.0, 1.0], [93200.0, 17.0], [98000.0, 1.0], [96400.0, 25.0], [133600.0, 1.0], [140000.0, 2.0], [159200.0, 1.0], [162400.0, 3.0], [134500.0, 1.0], [140900.0, 1.0], [147300.0, 3.0], [150500.0, 6.0], [67500.0, 8.0], [65900.0, 1.0], [70700.0, 1.0], [72300.0, 1.0], [77100.0, 18.0], [81900.0, 25.0], [83500.0, 1.0], [96300.0, 3.0], [104300.0, 2.0], [148200.0, 2.0], [161000.0, 1.0], [164200.0, 1.0], [34100.0, 4.0], [33300.0, 40.0], [36500.0, 38.0], [139500.0, 4.0], [142700.0, 1.0], [35700.0, 21.0], [38100.0, 4.0], [37300.0, 2.0], [40500.0, 2.0], [42100.0, 6.0], [44500.0, 1.0], [46900.0, 10.0], [48500.0, 3.0], [47700.0, 23.0], [50900.0, 4.0], [53300.0, 12.0], [56500.0, 1.0], [61300.0, 1.0], [62100.0, 1.0], [63700.0, 5.0], [65300.0, 23.0], [66600.0, 2.0], [68200.0, 2.0], [69800.0, 1.0], [74600.0, 1.0], [76200.0, 3.0], [79400.0, 9.0], [100200.0, 44.0], [111400.0, 14.0], [130600.0, 7.0], [134000.0, 1.0], [146800.0, 43.0], [143600.0, 2.0], [162800.0, 1.0], [169200.0, 4.0], [166000.0, 3.0], [131700.0, 10.0], [134900.0, 2.0], [157300.0, 2.0], [160500.0, 2.0], [163700.0, 2.0], [68900.0, 1.0], [67300.0, 39.0], [65700.0, 2.0], [70500.0, 9.0], [72100.0, 1.0], [76900.0, 28.0], [83300.0, 18.0], [99300.0, 3.0], [102500.0, 1.0], [128100.0, 1.0], [139000.0, 1.0], [8700.0, 62.0], [8300.0, 15.0], [8500.0, 159.0], [8900.0, 108.0], [9100.0, 98.0], [9500.0, 36.0], [9700.0, 211.0], [9300.0, 62.0], [148600.0, 7.0], [10100.0, 190.0], [9900.0, 12.0], [161400.0, 6.0], [10700.0, 7.0], [10300.0, 27.0], [10500.0, 2.0], [171000.0, 6.0], [10900.0, 17.0], [11100.0, 7.0], [11500.0, 3.0], [11700.0, 28.0], [11300.0, 4.0], [12100.0, 16.0], [11900.0, 43.0], [12500.0, 90.0], [12700.0, 80.0], [12300.0, 82.0], [13300.0, 18.0], [12900.0, 209.0], [13100.0, 270.0], [13700.0, 270.0], [13500.0, 97.0], [14300.0, 300.0], [14100.0, 174.0], [13900.0, 146.0], [14500.0, 191.0], [14700.0, 92.0], [15100.0, 35.0], [15300.0, 16.0], [14900.0, 158.0], [15700.0, 76.0], [15500.0, 33.0], [16100.0, 267.0], [15900.0, 385.0], [16600.0, 16.0], [17000.0, 50.0], [17400.0, 21.0], [17800.0, 21.0], [18200.0, 3.0], [19400.0, 2.0], [19000.0, 4.0], [18600.0, 36.0], [20200.0, 9.0], [19800.0, 12.0], [21400.0, 9.0], [21000.0, 7.0], [22200.0, 17.0], [21800.0, 1.0], [23000.0, 29.0], [23400.0, 52.0], [22600.0, 2.0], [24200.0, 1.0], [25400.0, 11.0], [25000.0, 12.0], [24600.0, 9.0], [26600.0, 10.0], [26200.0, 2.0], [25800.0, 1.0], [27400.0, 4.0], [27000.0, 3.0], [27800.0, 1.0], [28600.0, 11.0], [29400.0, 2.0], [30200.0, 6.0], [31000.0, 1.0], [31400.0, 6.0], [31800.0, 16.0], [33200.0, 10.0], [133500.0, 18.0], [36400.0, 10.0], [35600.0, 72.0], [37200.0, 1.0], [39600.0, 30.0], [162300.0, 1.0], [40400.0, 2.0], [42000.0, 2.0], [44400.0, 1.0], [46800.0, 5.0], [46000.0, 11.0], [50000.0, 18.0], [53200.0, 2.0], [51600.0, 2.0], [64400.0, 2.0], [65200.0, 6.0], [63600.0, 36.0], [66400.0, 1.0], [76000.0, 1.0], [79200.0, 1.0], [82400.0, 3.0], [87200.0, 19.0], [100000.0, 129.0], [130400.0, 16.0], [158400.0, 9.0], [164800.0, 13.0], [168000.0, 1.0], [136900.0, 2.0], [140100.0, 41.0], [149700.0, 1.0], [188100.0, 2.0], [67900.0, 1.0], [66300.0, 2.0], [69500.0, 1.0], [72700.0, 1.0], [74300.0, 1.0], [75900.0, 17.0], [80700.0, 1.0], [79100.0, 2.0], [82300.0, 2.0], [87100.0, 22.0], [98300.0, 2.0], [101500.0, 13.0], [103100.0, 1.0], [122300.0, 1.0], [130300.0, 16.0], [131400.0, 15.0], [150600.0, 24.0], [160200.0, 1.0], [33500.0, 45.0], [38300.0, 1.0], [37500.0, 2.0], [157900.0, 1.0], [161100.0, 4.0], [40700.0, 2.0], [164300.0, 1.0], [42300.0, 14.0], [47100.0, 13.0], [47900.0, 7.0], [51100.0, 2.0], [49500.0, 12.0], [52700.0, 1.0], [51900.0, 4.0], [56700.0, 1.0], [57500.0, 1.0], [63100.0, 2.0], [64700.0, 23.0], [65500.0, 3.0], [76600.0, 1.0], [78200.0, 2.0], [83000.0, 9.0], [84600.0, 1.0], [97400.0, 1.0], [99000.0, 1.0], [107000.0, 31.0], [116600.0, 14.0], [129400.0, 3.0], [162000.0, 7.0], [165200.0, 15.0], [134100.0, 2.0], [140500.0, 13.0], [146900.0, 4.0], [143700.0, 1.0], [150100.0, 2.0], [162900.0, 3.0], [159700.0, 2.0], [169300.0, 1.0], [67700.0, 2.0], [66100.0, 1.0], [72500.0, 48.0], [70900.0, 1.0], [77300.0, 9.0], [75700.0, 2.0], [85300.0, 1.0], [86900.0, 8.0], [93300.0, 1.0], [106100.0, 6.0], [102900.0, 33.0], [128500.0, 1.0], [131800.0, 2.0], [138200.0, 5.0], [144600.0, 1.0], [147800.0, 24.0], [163800.0, 31.0], [16700.0, 48.0], [17500.0, 49.0], [18300.0, 14.0], [17900.0, 16.0], [19100.0, 6.0], [18700.0, 23.0], [19900.0, 5.0], [19500.0, 3.0], [20300.0, 2.0], [20700.0, 12.0], [21100.0, 2.0], [23100.0, 23.0], [22700.0, 2.0], [24300.0, 9.0], [25500.0, 22.0], [24700.0, 8.0], [25900.0, 2.0], [26700.0, 22.0], [27100.0, 7.0], [27500.0, 6.0], [28300.0, 1.0], [28700.0, 18.0], [29500.0, 4.0], [31500.0, 2.0], [31900.0, 73.0], [135900.0, 2.0], [33400.0, 29.0], [35000.0, 2.0], [35800.0, 7.0], [36600.0, 7.0], [38200.0, 3.0], [37400.0, 3.0], [40600.0, 3.0], [41400.0, 2.0], [164700.0, 1.0], [167900.0, 5.0], [42200.0, 2.0], [47000.0, 7.0], [46200.0, 1.0], [47800.0, 12.0], [48600.0, 1.0], [49400.0, 2.0], [51800.0, 1.0], [53400.0, 3.0], [55000.0, 7.0], [65400.0, 2.0], [63800.0, 5.0], [66800.0, 2.0], [68400.0, 1.0], [73200.0, 2.0], [78000.0, 7.0], [79600.0, 5.0], [82800.0, 2.0], [89200.0, 1.0], [103600.0, 2.0], [130800.0, 16.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 190100.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 407.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 39217.0, "series": [{"data": [[0.0, 39217.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 1756.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 18980.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 407.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 559.4434180138571, "minX": 1.6828602E12, "maxY": 3000.0, "series": [{"data": [[1.68286044E12, 3000.0], [1.68286056E12, 559.4434180138571], [1.68286026E12, 3000.0], [1.6828602E12, 3000.0], [1.68286038E12, 3000.0], [1.68286032E12, 3000.0], [1.6828605E12, 2757.9370407150045]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68286056E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 23.0, "minX": 343.0, "maxY": 116652.0, "series": [{"data": [[350.0, 37551.0], [351.0, 36545.0], [349.0, 37553.0], [348.0, 38562.0], [347.0, 38565.0], [346.0, 39570.0], [345.0, 39572.0], [344.0, 40580.0], [343.0, 40582.0], [366.0, 29475.0], [367.0, 28467.0], [365.0, 29476.0], [364.0, 30486.0], [363.0, 30486.0], [362.0, 31494.0], [361.0, 31495.0], [360.0, 32502.0], [359.0, 32505.0], [353.0, 35533.0], [352.0, 36543.0], [355.0, 34524.0], [354.0, 35531.0], [358.0, 33514.0], [357.0, 33514.0], [356.0, 34524.0], [381.0, 21400.0], [382.0, 21400.0], [380.0, 22407.0], [371.0, 26447.0], [370.0, 27455.0], [369.0, 27457.0], [368.0, 28465.0], [379.0, 22410.0], [378.0, 23417.0], [377.0, 23420.0], [376.0, 24426.0], [375.0, 24428.0], [374.0, 25435.0], [373.0, 25438.0], [372.0, 26445.0], [398.0, 14386.0], [399.0, 14384.0], [397.0, 15393.0], [396.0, 15394.0], [395.0, 16403.0], [394.0, 16406.0], [393.0, 17412.0], [392.0, 17415.0], [391.0, 18422.0], [385.0, 65264.0], [387.0, 20388.0], [386.0, 20391.0], [390.0, 18424.0], [389.0, 19381.0], [388.0, 19383.0], [414.0, 9362.5], [415.0, 9362.0], [412.0, 9363.0], [403.0, 12366.0], [402.0, 12368.0], [401.0, 13375.0], [400.0, 13377.0], [411.0, 9363.0], [410.0, 9364.0], [409.0, 9363.0], [407.0, 10346.0], [406.0, 10351.0], [405.0, 11357.0], [404.0, 11358.0], [419.0, 9358.0], [429.0, 9342.5], [431.0, 9342.0], [428.0, 9343.0], [424.0, 9344.0], [423.0, 9344.0], [422.0, 9344.0], [420.0, 9357.0], [418.0, 9360.5], [416.0, 9361.0], [444.0, 9334.5], [446.0, 9334.0], [447.0, 9333.0], [445.0, 9334.0], [442.0, 9335.0], [441.0, 9338.0], [439.0, 9339.5], [432.0, 9342.0], [435.0, 9341.0], [434.0, 9341.0], [437.0, 9341.0], [436.0, 9341.0], [463.0, 80874.66666666667], [460.0, 9327.5], [458.0, 9329.0], [454.0, 9331.0], [453.0, 9331.0], [452.0, 9332.0], [450.0, 9332.0], [477.0, 116623.0], [478.0, 6411.0], [476.0, 116623.0], [467.0, 45097.0], [464.0, 116652.0], [475.0, 61521.0], [474.0, 116627.0], [472.0, 116627.0], [471.0, 116627.0], [470.0, 116646.5], [468.0, 116651.0], [494.0, 6375.0], [495.0, 6374.0], [493.0, 6376.0], [492.0, 6376.0], [491.0, 6376.0], [489.0, 6386.0], [488.0, 6395.0], [486.0, 6399.0], [483.0, 6405.0], [482.0, 6406.0], [481.0, 6407.0], [480.0, 61516.0], [485.0, 6401.5], [510.0, 6095.0], [511.0, 6090.0], [509.0, 6095.0], [499.0, 6366.0], [498.0, 6367.0], [497.0, 6368.0], [496.0, 6373.0], [507.0, 6097.0], [506.0, 6098.0], [505.0, 6359.5], [503.0, 6361.0], [502.0, 6361.0], [501.0, 6366.5], [537.0, 5649.5], [541.0, 5646.0], [542.0, 5645.0], [529.0, 5652.0], [540.0, 5650.0], [539.0, 5649.0], [538.0, 7088.5], [527.0, 5654.0], [513.0, 8959.0], [512.0, 6089.0], [516.0, 5657.0], [514.0, 8957.0], [518.0, 5657.5], [517.0, 5658.0], [526.0, 5653.0], [525.0, 5655.0], [524.0, 5656.0], [522.0, 5657.0], [520.0, 5656.5], [534.0, 5651.0], [533.0, 5651.0], [532.0, 5652.5], [530.0, 5651.0], [568.0, 5628.0], [572.0, 5628.0], [573.0, 5627.0], [571.0, 5628.0], [570.0, 5629.0], [569.0, 5630.0], [559.0, 5630.5], [544.0, 5645.0], [546.0, 5642.0], [545.0, 9235.0], [549.0, 9227.0], [547.0, 5641.0], [551.0, 7431.5], [550.0, 8516.0], [557.0, 7426.0], [555.0, 9226.0], [554.0, 5636.5], [552.0, 5637.0], [566.0, 5629.0], [565.0, 6589.666666666667], [562.0, 9223.0], [561.0, 9221.0], [605.0, 6815.0], [607.0, 5618.0], [602.0, 5619.0], [601.0, 5619.0], [599.0, 6578.666666666667], [596.0, 9210.0], [595.0, 8499.0], [594.0, 6819.666666666667], [591.0, 5623.0], [577.0, 8021.0], [576.0, 9218.0], [581.0, 5627.0], [580.0, 5628.0], [583.0, 5627.0], [582.0, 5627.0], [590.0, 5624.0], [589.0, 5625.0], [588.0, 5626.0], [587.0, 7420.0], [586.0, 5626.0], [584.0, 6586.333333333333], [638.0, 9181.0], [639.0, 8470.0], [625.0, 9188.0], [624.0, 7755.666666666667], [636.0, 9181.0], [634.0, 9184.0], [633.0, 8474.0], [632.0, 8474.0], [621.0, 9191.0], [608.0, 5618.0], [612.0, 5616.666666666667], [609.0, 8852.5], [615.0, 7408.5], [613.0, 5617.0], [619.0, 9192.0], [618.0, 9193.0], [617.0, 5602.0], [616.0, 5613.0], [631.0, 5595.0], [630.0, 5595.5], [627.0, 9188.0], [626.0, 5597.0], [670.0, 5563.0], [659.0, 9166.0], [671.0, 5562.0], [656.0, 5581.0], [658.0, 9171.0], [657.0, 5581.0], [669.0, 6523.333333333333], [666.0, 9158.5], [664.0, 9158.0], [647.0, 8821.5], [645.0, 9179.0], [644.0, 5588.5], [643.0, 9180.0], [641.0, 8824.5], [640.0, 5590.0], [655.0, 5580.0], [654.0, 7021.5], [652.0, 8461.5], [650.0, 5582.0], [649.0, 5586.0], [663.0, 8447.0], [662.0, 5575.5], [660.0, 9166.0], [696.0, 5533.0], [701.0, 5529.5], [702.0, 5529.0], [688.0, 5551.0], [699.0, 9121.0], [698.0, 5531.0], [697.0, 8411.0], [687.0, 5552.5], [673.0, 5560.0], [672.0, 9153.0], [675.0, 9148.0], [674.0, 9149.0], [677.0, 5557.0], [676.0, 5558.0], [679.0, 5556.0], [678.0, 5557.0], [685.0, 5551.5], [683.0, 9142.0], [682.0, 7348.0], [680.0, 5555.0], [695.0, 8414.0], [693.0, 5547.0], [692.0, 5546.0], [691.0, 6748.0], [732.0, 8735.5], [735.0, 7657.333333333333], [731.0, 9093.0], [729.0, 5502.0], [727.0, 8862.333333333334], [724.0, 5511.5], [722.0, 5514.5], [721.0, 5515.0], [719.0, 9105.0], [708.0, 6007.666666666667], [711.0, 7317.0], [710.0, 5521.0], [718.0, 8752.5], [717.0, 9108.0], [715.0, 5517.5], [713.0, 9108.0], [712.0, 8399.0], [763.0, 7252.5], [754.0, 6913.0], [765.0, 5457.5], [766.0, 5456.0], [752.0, 9065.0], [764.0, 9047.0], [760.0, 5466.5], [743.0, 5481.0], [742.0, 7278.5], [740.0, 9074.0], [739.0, 9090.0], [738.0, 8735.0], [737.0, 5500.0], [751.0, 8354.0], [750.0, 5475.0], [749.0, 9068.0], [748.0, 5477.0], [747.0, 7276.0], [746.0, 5482.0], [745.0, 9071.0], [758.0, 5466.5], [756.0, 5467.0], [755.0, 5470.0], [796.0, 7137.333333333333], [787.0, 7139.0], [798.0, 7469.0], [784.0, 7803.0], [795.0, 7138.0], [794.0, 8395.0], [780.0, 7471.75], [775.0, 7293.0], [774.0, 7296.0], [773.0, 8288.0], [772.0, 8289.0], [771.0, 5428.0], [770.0, 5429.0], [769.0, 5455.0], [768.0, 6896.0], [779.0, 8397.0], [791.0, 7137.666666666667], [789.0, 7139.0], [788.0, 7139.0], [786.0, 7139.0], [785.0, 7139.0], [829.0, 7461.0], [831.0, 7129.0], [816.0, 7796.0], [827.0, 7130.0], [826.0, 7131.0], [825.0, 7131.0], [824.0, 7132.0], [813.0, 7466.0], [803.0, 7136.0], [802.0, 7358.0], [807.0, 7136.5], [805.0, 7765.0], [812.0, 7135.0], [811.0, 7135.0], [809.0, 7135.0], [822.0, 7463.5], [820.0, 7133.0], [819.0, 7132.5], [817.0, 7134.0], [860.0, 7565.666666666667], [862.0, 7122.5], [859.0, 7345.0], [856.0, 7124.0], [855.0, 7753.0], [851.0, 7290.5], [848.0, 7126.0], [846.0, 7125.5], [837.0, 7127.75], [833.0, 7793.0], [839.0, 7128.5], [838.0, 7128.0], [844.0, 7126.5], [842.0, 7127.0], [892.0, 7773.0], [894.0, 7440.5], [891.0, 7440.5], [890.0, 7441.0], [888.0, 7442.0], [870.0, 7783.0], [868.0, 7564.666666666667], [865.0, 7565.0], [876.0, 7119.0], [875.0, 7782.0], [874.0, 7119.0], [873.0, 7784.0], [872.0, 7563.666666666667], [885.0, 7110.0], [883.0, 7441.5], [881.0, 7776.0], [880.0, 7332.0], [915.0, 8042.0], [927.0, 7971.0], [925.0, 7971.0], [923.0, 7688.5], [921.0, 7025.0], [907.0, 7751.0], [901.0, 7597.5], [897.0, 7765.0], [896.0, 7433.5], [905.0, 7586.0], [919.0, 7393.5], [917.0, 7745.0], [916.0, 7745.666666666667], [912.0, 7414.5], [956.0, 7653.0], [948.0, 7324.5], [958.0, 7318.0], [944.0, 8056.666666666667], [946.0, 7658.0], [945.0, 7659.0], [955.0, 7652.0], [954.0, 7654.5], [952.0, 7653.0], [935.0, 7960.0], [934.0, 7662.0], [932.0, 7663.0], [931.0, 8259.0], [930.0, 7668.0], [929.0, 8263.0], [928.0, 7674.0], [943.0, 7660.0], [942.0, 7661.0], [939.0, 6998.0], [938.0, 8256.0], [937.0, 7661.5], [951.0, 6991.0], [950.0, 7657.0], [949.0, 7657.0], [987.0, 7380.5], [990.0, 7810.666666666667], [985.0, 7415.0], [984.0, 7590.666666666667], [982.0, 7417.0], [981.0, 7417.0], [979.0, 8014.666666666667], [976.0, 8217.0], [974.0, 8218.5], [961.0, 7614.0], [960.0, 7649.0], [965.0, 7312.5], [963.0, 7314.5], [967.0, 7640.0], [966.0, 7642.0], [972.0, 8219.0], [970.0, 7636.0], [969.0, 7636.0], [968.0, 6974.0], [1017.0, 7988.0], [1021.0, 7980.0], [1023.0, 7053.0], [1008.0, 7372.0], [1011.0, 7999.0], [1010.0, 7406.0], [1020.0, 6723.0], [1019.0, 7982.0], [1018.0, 7689.5], [1006.0, 7407.0], [992.0, 7379.0], [994.0, 8007.0], [993.0, 8007.0], [996.0, 7411.0], [995.0, 6748.0], [999.0, 8004.0], [998.0, 7411.0], [1005.0, 6745.0], [1004.0, 7408.0], [1003.0, 7855.25], [1015.0, 7987.0], [1014.0, 7397.0], [1013.0, 7992.0], [1012.0, 7995.0], [1072.0, 6172.333333333333], [1080.0, 6832.0], [1086.0, 6800.333333333333], [1060.0, 6617.0], [1056.0, 6839.0], [1078.0, 6798.0], [1076.0, 6833.0], [1074.0, 7132.0], [1054.0, 6839.0], [1028.0, 7376.0], [1026.0, 7383.0], [1032.0, 7372.0], [1030.0, 7374.0], [1038.0, 7665.5], [1034.0, 7372.0], [1052.0, 6839.0], [1048.0, 6509.0], [1046.0, 7434.0], [1042.0, 5958.0], [1040.0, 7343.0], [1070.0, 6836.0], [1068.0, 7134.5], [1064.0, 6175.0], [1062.0, 6837.0], [1148.0, 7349.0], [1150.0, 6423.5], [1146.0, 7352.0], [1144.0, 6859.666666666666], [1142.0, 6772.0], [1102.0, 6140.0], [1100.0, 6810.5], [1098.0, 6809.0], [1092.0, 6814.0], [1090.0, 7413.0], [1088.0, 6820.0], [1116.0, 6131.0], [1114.0, 6798.0], [1112.0, 6465.0], [1110.0, 6799.0], [1108.0, 6767.5], [1104.0, 6803.0], [1130.0, 6773.0], [1126.0, 7077.5], [1124.0, 6747.5], [1120.0, 6789.0], [1188.0, 6668.0], [1212.0, 5414.0], [1200.0, 5257.0], [1166.0, 7040.5], [1164.0, 7041.0], [1162.0, 6081.0], [1160.0, 7339.0], [1156.0, 6948.333333333333], [1152.0, 6751.0], [1198.0, 4524.0], [1196.0, 5259.0], [1190.0, 6660.0], [1186.0, 7263.0], [1184.0, 6966.0], [1182.0, 6670.0], [1180.0, 6671.0], [1176.0, 6672.0], [1172.0, 6674.0], [1170.0, 7019.0], [1168.0, 7037.5], [1266.0, 4589.0], [1254.0, 5397.0], [1276.0, 5383.0], [1250.0, 4603.0], [1258.0, 5394.0], [1262.0, 5390.5], [1278.0, 5383.0], [1272.0, 5384.0], [1270.0, 4986.5], [1268.0, 5384.0], [1264.0, 4594.0], [1230.0, 4614.5], [1226.0, 4616.0], [1224.0, 4617.0], [1246.0, 5004.5], [1218.0, 4618.0], [1222.0, 4618.0], [1220.0, 5414.0], [1244.0, 4608.0], [1242.0, 5485.0], [1240.0, 5486.0], [1238.0, 5408.0], [1236.0, 5408.0], [1234.0, 5410.0], [1336.0, 5327.0], [1314.0, 4555.0], [1318.0, 5427.0], [1320.0, 5346.0], [1322.0, 4548.0], [1324.0, 5420.0], [1326.0, 5339.0], [1342.0, 5323.0], [1338.0, 5324.0], [1334.0, 5407.0], [1332.0, 5332.0], [1330.0, 5414.0], [1328.0, 5334.0], [1280.0, 5374.0], [1282.0, 4578.0], [1286.0, 5412.0], [1288.0, 5370.0], [1292.0, 4968.0], [1290.0, 4572.0], [1308.0, 5357.0], [1306.0, 4960.5], [1304.0, 5438.0], [1302.0, 5363.0], [1296.0, 5365.0], [1358.0, 4954.0], [1402.0, 5287.0], [1406.0, 5285.0], [1382.0, 5292.0], [1380.0, 4897.0], [1388.0, 4893.0], [1404.0, 4490.0], [1400.0, 4890.5], [1394.0, 4493.5], [1392.0, 4495.0], [1356.0, 5313.0], [1354.0, 5314.0], [1352.0, 5315.0], [1350.0, 5316.5], [1348.0, 5360.0], [1346.0, 5399.0], [1344.0, 5361.0], [1374.0, 4899.5], [1372.0, 5337.5], [1368.0, 5299.0], [1366.0, 5300.0], [1364.0, 5381.0], [1362.0, 5308.0], [1360.0, 5351.0], [1470.0, 5031.666666666667], [1440.0, 5045.0], [1442.0, 4461.5], [1446.0, 5297.0], [1444.0, 4461.0], [1462.0, 5248.0], [1460.0, 5329.0], [1458.0, 5303.333333333333], [1436.0, 5262.0], [1410.0, 5031.0], [1420.0, 5306.5], [1418.0, 4868.5], [1430.0, 5262.5], [1428.0, 4758.666666666667], [1424.0, 5264.0], [1530.0, 5244.0], [1506.0, 5304.5], [1504.0, 4828.5], [1508.0, 5306.0], [1512.0, 5302.0], [1514.0, 5223.0], [1516.0, 4425.0], [1518.0, 5299.0], [1532.0, 5256.0], [1526.0, 5298.0], [1524.0, 5298.5], [1484.0, 5316.0], [1482.0, 5316.0], [1480.0, 5237.0], [1478.0, 5321.0], [1476.0, 5321.0], [1472.0, 4445.0], [1502.0, 5310.5], [1500.0, 5230.0], [1494.0, 5313.0], [1492.0, 5314.0], [1490.0, 4438.0], [1488.0, 4439.5], [1592.0, 5210.0], [1594.0, 5129.0], [1570.0, 5245.0], [1576.0, 5244.0], [1586.0, 5231.5], [1548.0, 4812.5], [1540.0, 5254.0], [1538.0, 5254.0], [1536.0, 5296.0], [1566.0, 5244.0], [1564.0, 5207.5], [1562.0, 4956.666666666667], [1560.0, 5168.5], [1556.0, 5209.0], [1554.0, 5170.0], [1582.0, 4365.0], [1632.0, 5147.0], [1634.0, 4267.5], [1640.0, 5140.0], [1642.0, 5137.0], [1614.0, 5098.0], [1612.0, 5099.5], [1610.0, 5180.0], [1604.0, 4969.6], [1630.0, 4278.0], [1628.0, 5083.0], [1622.0, 4580.666666666667], [1620.0, 5166.0], [1618.0, 4291.0], [1616.0, 4698.0], [1852.0, 181.0], [1850.0, 213.5], [1824.0, 185.55555555555554], [1830.0, 185.0], [1832.0, 208.5294117647059], [1836.0, 184.0], [1854.0, 235.71428571428572], [1844.0, 210.44444444444446], [1842.0, 209.9285714285714], [1840.0, 183.0], [1820.0, 186.0], [1814.0, 187.0], [1908.0, 129.0], [1888.0, 140.0], [1890.0, 139.42857142857144], [1910.0, 121.5], [1906.0, 130.20000000000002], [1904.0, 131.0], [1880.0, 140.0], [1878.0, 142.0], [1894.0, 139.0], [1972.0, 96.0], [1978.0, 95.0], [1970.0, 96.0], [1936.0, 113.0], [1924.0, 114.0], [1928.0, 114.0], [1964.0, 97.14285714285715], [1956.0, 99.13333333333334], [1986.0, 93.14285714285715], [2014.0, 161.0], [1988.0, 45.0], [1992.0, 26.0], [1996.0, 24.0], [2012.0, 163.0], [2006.0, 165.0], [2002.0, 1449.0], [2000.0, 23.0], [2120.0, 136.33333333333331], [2104.0, 138.5], [2080.0, 140.0], [2072.0, 111.0], [2068.0, 132.6], [2248.0, 100.0], [2244.0, 101.0], [2260.0, 228.0], [2264.0, 227.0], [2256.0, 229.5], [2204.0, 107.0], [2228.0, 102.11111111111111], [2224.0, 103.25], [2220.0, 104.0], [2212.0, 105.71428571428571], [2368.0, 1180.0], [2424.0, 2615.0], [2372.0, 1176.0], [2376.0, 1173.0], [2380.0, 1171.0], [2392.0, 1157.5], [2396.0, 1153.0], [2412.0, 2326.5], [2408.0, 1144.0], [2404.0, 2328.5], [2400.0, 1147.0], [2328.0, 132.5], [2324.0, 133.76923076923077], [2360.0, 1184.0], [2352.0, 1185.5], [2340.0, 2260.5], [2336.0, 133.0], [2540.0, 7974.0], [2556.0, 8008.0], [2504.0, 7813.0], [2508.0, 2198.0], [2512.0, 7792.0], [2516.0, 7779.0], [2536.0, 7250.0], [2532.0, 7252.0], [2528.0, 7253.0], [2440.0, 2612.0], [2444.0, 4922.0], [2448.0, 3998.0], [2460.0, 7231.0], [2492.0, 2214.0], [2488.0, 2595.0], [2484.0, 2596.1666666666665], [2468.0, 5404.0], [2664.0, 8179.666666666666], [2676.0, 7907.0], [2624.0, 8740.0], [2628.0, 8738.0], [2632.0, 8735.0], [2636.0, 7196.0], [2640.0, 7195.0], [2652.0, 7946.0], [2684.0, 8629.0], [2680.0, 8670.0], [2660.0, 8702.0], [2564.0, 7238.0], [2572.0, 7233.0], [2576.0, 7231.0], [2584.0, 7951.0], [2588.0, 7949.5], [2620.0, 7212.0], [2616.0, 7213.5], [2612.0, 8742.0], [2608.0, 7215.0], [2604.0, 7218.0], [2596.0, 7220.0], [2784.0, 7590.0], [2808.0, 7460.0], [2804.0, 7587.0], [2792.0, 7461.0], [2688.0, 8667.0], [2692.0, 8668.0], [2696.0, 8665.0], [2700.0, 8584.0], [2704.0, 7133.0], [2708.0, 8660.0], [2716.0, 8657.0], [2920.0, 7575.0], [2936.0, 8029.0], [2892.0, 7985.454545454547], [2896.0, 7843.0], [2900.0, 7579.0], [2904.0, 7448.0], [2912.0, 8488.0], [2816.0, 8284.0], [2820.0, 7585.0], [2832.0, 8009.0], [2844.0, 8579.4], [2836.0, 8980.666666666666], [2876.0, 8498.0], [2864.0, 7457.0], [2860.0, 7811.75], [2856.0, 7458.0], [2848.0, 8981.0], [2852.0, 8500.0], [2996.0, 8268.140000000001], [2992.0, 8965.0], [3000.0, 8446.001355955812], [2960.0, 7570.0], [2964.0, 8483.0], [2972.0, 8485.0], [2988.0, 8484.0], [2984.0, 8484.0], [2976.0, 7444.0], [2117.0, 136.75], [2113.0, 137.0], [2085.0, 139.0], [2081.0, 140.0], [2073.0, 141.0], [2069.0, 132.8], [2197.0, 107.0], [2241.0, 102.0], [2253.0, 100.0], [2205.0, 236.0], [2237.0, 101.4], [2229.0, 102.0], [2225.0, 124.33333333333333], [2217.0, 104.625], [2213.0, 105.0], [2405.0, 1146.0], [2369.0, 1179.0], [2381.0, 1170.0], [2385.0, 2350.0], [2389.0, 1158.5], [2429.0, 2613.0], [2421.0, 2614.3333333333335], [2413.0, 1119.0], [2409.0, 2327.5], [2329.0, 133.5], [2321.0, 135.0], [2365.0, 1181.5], [2361.0, 1183.0], [2357.0, 1185.0], [2353.0, 1185.5], [2349.0, 1186.0], [2345.0, 1187.0], [2341.0, 2261.0], [2337.0, 125.0], [2501.0, 2207.5], [2497.0, 5015.5], [2505.0, 7811.0], [2509.0, 7804.0], [2513.0, 7787.0], [2525.0, 7542.8], [2557.0, 7242.0], [2553.0, 8773.0], [2545.0, 8723.0], [2541.0, 7250.0], [2537.0, 7250.0], [2529.0, 7252.666666666667], [2433.0, 2612.0], [2473.0, 2597.5], [2469.0, 2599.0], [2465.0, 4911.5], [2625.0, 7211.666666666667], [2681.0, 7142.0], [2633.0, 8735.0], [2637.0, 8723.5], [2641.0, 8644.0], [2645.0, 7916.0], [2669.0, 7145.0], [2621.0, 7212.0], [2561.0, 7239.0], [2565.0, 7237.0], [2569.0, 7999.5], [2573.0, 7232.0], [2577.0, 7231.0], [2581.0, 8772.333333333334], [2585.0, 8676.0], [2617.0, 8664.0], [2613.0, 7214.0], [2609.0, 7215.0], [2605.0, 7700.666666666667], [2597.0, 7220.0], [2593.0, 7223.0], [2785.0, 8985.0], [2717.0, 8656.0], [2813.0, 8742.0], [2805.0, 8982.0], [2801.0, 8501.0], [2797.0, 8983.0], [2689.0, 8667.0], [2693.0, 8666.0], [2697.0, 8586.0], [2701.0, 8662.0], [2705.0, 8583.0], [2709.0, 8660.0], [2713.0, 8658.5], [2937.0, 8035.666666666667], [2921.0, 8030.5], [2893.0, 7883.666666666667], [2897.0, 7548.75], [2901.0, 7686.6], [2941.0, 7801.75], [2933.0, 7573.0], [2929.0, 7923.0], [2925.0, 8489.0], [2877.0, 7455.0], [2817.0, 7586.0], [2861.0, 7457.0], [2853.0, 7458.0], [2997.0, 8248.526315789473], [2945.0, 8486.0], [2961.0, 7798.75], [2965.0, 8485.0], [2993.0, 7442.0], [2989.0, 7527.0], [2981.0, 7443.0], [2977.0, 8026.5], [1083.0, 6824.5], [1087.0, 6820.0], [1081.0, 7418.0], [1075.0, 6834.0], [1067.0, 6504.5], [1063.0, 7134.5], [1059.0, 7432.0], [1055.0, 6987.75], [1025.0, 7349.5], [1029.0, 7375.0], [1027.0, 6712.0], [1033.0, 7371.0], [1031.0, 7967.0], [1039.0, 7352.0], [1037.0, 7369.0], [1049.0, 6508.0], [1047.0, 6178.0], [1041.0, 5961.0], [1139.0, 6772.0], [1147.0, 6756.0], [1151.0, 6091.0], [1121.0, 7382.0], [1145.0, 6759.0], [1143.0, 6441.0], [1141.0, 6772.0], [1119.0, 6790.5], [1089.0, 6819.0], [1093.0, 6149.0], [1091.0, 7412.0], [1097.0, 6812.0], [1095.0, 6811.5], [1101.0, 6806.0], [1099.0, 6809.0], [1117.0, 6130.0], [1115.0, 7389.0], [1113.0, 6799.0], [1109.0, 6802.0], [1107.0, 7397.0], [1105.0, 7100.0], [1135.0, 7070.0], [1129.0, 6446.5], [1127.0, 6780.0], [1125.0, 6782.0], [1213.0, 5149.333333333333], [1215.0, 5414.0], [1187.0, 6965.5], [1191.0, 6657.0], [1189.0, 6666.0], [1195.0, 6950.5], [1193.0, 6656.0], [1209.0, 3006.5], [1207.0, 5058.0], [1205.0, 5255.0], [1203.0, 5257.0], [1201.0, 5257.0], [1161.0, 7338.0], [1159.0, 7340.0], [1157.0, 7344.0], [1153.0, 7345.0], [1181.0, 6967.5], [1179.0, 6673.0], [1177.0, 6968.0], [1175.0, 6673.0], [1173.0, 6673.0], [1199.0, 4524.0], [1197.0, 5258.0], [1277.0, 4984.5], [1279.0, 5382.0], [1249.0, 5001.5], [1251.0, 5397.0], [1255.0, 5397.0], [1257.0, 4997.0], [1261.0, 5390.0], [1259.0, 4596.0], [1263.0, 5391.0], [1275.0, 4986.0], [1265.0, 4592.0], [1227.0, 5412.0], [1225.0, 4617.0], [1223.0, 5413.5], [1219.0, 5414.0], [1217.0, 5413.0], [1247.0, 5400.0], [1243.0, 5405.0], [1241.0, 5407.0], [1239.0, 5408.0], [1237.0, 5408.0], [1235.0, 5436.666666666667], [1233.0, 5410.5], [1339.0, 5324.0], [1343.0, 5321.0], [1313.0, 4955.0], [1317.0, 5348.0], [1315.0, 5429.0], [1319.0, 4552.0], [1321.0, 5344.0], [1323.0, 4545.0], [1325.0, 5342.0], [1327.0, 5416.0], [1341.0, 5323.0], [1337.0, 5405.0], [1335.0, 5329.0], [1333.0, 5331.0], [1331.0, 5331.0], [1311.0, 5090.0], [1281.0, 5374.0], [1283.0, 5373.0], [1287.0, 5370.5], [1289.0, 5371.0], [1295.0, 4967.5], [1293.0, 4569.0], [1303.0, 5361.0], [1301.0, 5004.0], [1299.0, 4965.0], [1297.0, 5363.0], [1399.0, 5369.0], [1379.0, 5374.0], [1377.0, 4501.5], [1385.0, 4495.5], [1383.0, 5331.5], [1387.0, 5291.0], [1391.0, 4932.0], [1389.0, 4495.0], [1405.0, 5286.5], [1401.0, 5288.0], [1397.0, 4930.0], [1395.0, 5290.0], [1355.0, 4519.0], [1353.0, 5315.0], [1351.0, 4521.0], [1345.0, 5320.0], [1375.0, 4502.0], [1373.0, 4502.0], [1371.0, 5297.0], [1367.0, 4504.0], [1365.0, 5300.0], [1363.0, 5384.0], [1361.0, 4513.0], [1465.0, 5286.0], [1471.0, 5321.0], [1441.0, 4462.0], [1443.0, 4460.0], [1451.0, 5074.5], [1447.0, 5256.0], [1455.0, 5330.5], [1453.0, 4456.0], [1467.0, 5283.5], [1463.0, 5248.0], [1461.0, 4453.0], [1459.0, 5251.0], [1409.0, 5269.0], [1413.0, 5307.5], [1411.0, 5350.0], [1417.0, 5266.0], [1415.0, 5347.5], [1423.0, 4907.5], [1421.0, 5266.0], [1435.0, 5262.5], [1433.0, 5103.75], [1525.0, 5299.0], [1511.0, 5264.5], [1535.0, 5217.0], [1509.0, 4429.0], [1515.0, 5300.0], [1517.0, 5221.0], [1519.0, 5299.0], [1533.0, 5217.0], [1527.0, 4859.0], [1523.0, 5258.5], [1487.0, 5236.0], [1485.0, 4440.0], [1483.0, 5277.5], [1479.0, 5318.0], [1475.0, 5281.0], [1473.0, 5240.0], [1499.0, 5271.0], [1497.0, 5312.0], [1495.0, 5233.0], [1493.0, 5312.0], [1489.0, 5236.0], [1569.0, 4767.5], [1599.0, 5169.0], [1575.0, 5164.25], [1571.0, 5245.0], [1577.0, 5164.0], [1581.0, 5203.25], [1579.0, 5244.0], [1593.0, 4731.5], [1591.0, 5132.0], [1585.0, 4358.0], [1549.0, 5210.0], [1547.0, 4375.0], [1545.0, 5250.0], [1543.0, 5251.666666666667], [1539.0, 5214.0], [1537.0, 5215.0], [1567.0, 5246.0], [1559.0, 5169.0], [1555.0, 5209.25], [1583.0, 5240.0], [1609.0, 5100.0], [1645.0, 2278.5], [1643.0, 5054.0], [1639.0, 4702.5], [1637.0, 5140.5], [1635.0, 5061.0], [1613.0, 5099.0], [1611.0, 5100.0], [1607.0, 4722.0], [1605.0, 4531.25], [1603.0, 4769.5], [1601.0, 5209.0], [1631.0, 5153.0], [1629.0, 5083.0], [1627.0, 4287.5], [1625.0, 4288.5], [1623.0, 4288.0], [1617.0, 5172.0], [1825.0, 185.0], [1855.0, 160.0], [1827.0, 185.0740740740741], [1831.0, 194.38461538461542], [1833.0, 184.0], [1837.0, 204.33333333333334], [1843.0, 198.65217391304347], [1841.0, 189.60000000000002], [1799.0, 188.8], [1823.0, 186.0], [1821.0, 186.0], [1819.0, 187.0], [1815.0, 187.0], [1907.0, 130.0], [1913.0, 118.0], [1915.0, 118.0], [1889.0, 139.33333333333334], [1891.0, 139.0], [1887.0, 140.0], [1885.0, 140.5], [1881.0, 141.0], [1879.0, 141.0], [1895.0, 138.8181818181818], [1979.0, 95.8], [1973.0, 97.0], [1971.0, 96.33333333333333], [1925.0, 114.0], [1927.0, 114.0], [1957.0, 99.0], [1989.0, 33.0], [2011.0, 164.0], [1995.0, 24.5], [1993.0, 24.0], [1999.0, 23.5], [2013.0, 162.0], [2009.0, 164.0], [2007.0, 164.5], [2001.0, 1451.0], [2070.0, 132.5], [2118.0, 137.0], [2054.0, 133.0], [2094.0, 138.0], [2066.0, 132.75], [2250.0, 100.0], [2254.0, 100.66666666666667], [2262.0, 228.0], [2258.0, 99.0], [2202.0, 122.75000000000001], [2198.0, 107.0], [2238.0, 152.6], [2230.0, 102.25], [2222.0, 103.5], [2218.0, 104.0], [2214.0, 105.33333333333333], [2418.0, 1111.0], [2370.0, 1179.0], [2378.0, 1172.0], [2390.0, 1158.0], [2394.0, 1154.5], [2402.0, 2330.0], [2330.0, 132.4], [2326.0, 134.0], [2322.0, 133.88888888888886], [2362.0, 1182.0], [2350.0, 1186.0], [2346.0, 1187.0], [2338.0, 121.0], [2506.0, 7808.0], [2498.0, 5016.0], [2510.0, 7802.0], [2514.0, 7784.0], [2518.0, 8503.0], [2522.0, 7253.0], [2558.0, 7241.0], [2554.0, 7246.0], [2550.0, 7609.0], [2546.0, 8775.0], [2542.0, 7248.0], [2534.0, 7252.0], [2434.0, 7234.0], [2450.0, 2610.0], [2462.0, 7224.0], [2494.0, 4082.3333333333335], [2490.0, 2214.0], [2466.0, 2601.0], [2682.0, 8630.5], [2678.0, 7142.0], [2630.0, 7207.0], [2634.0, 8734.0], [2646.0, 8634.0], [2686.0, 8668.0], [2674.0, 8671.0], [2670.0, 8633.0], [2666.0, 7929.5], [2562.0, 7239.0], [2566.0, 7238.0], [2570.0, 7234.0], [2574.0, 8760.0], [2578.0, 7230.0], [2582.0, 7228.0], [2590.0, 8878.0], [2610.0, 7214.0], [2602.0, 8185.333333333333], [2594.0, 7223.0], [2810.0, 7586.0], [2778.0, 8991.0], [2766.0, 8992.0], [2782.0, 8363.0], [2790.0, 8502.0], [2722.0, 8665.4], [2690.0, 8667.0], [2706.0, 7959.5], [2710.0, 8659.0], [2942.0, 8486.0], [2938.0, 7573.0], [2890.0, 7975.0], [2894.0, 8107.999999999999], [2898.0, 7965.857142857141], [2902.0, 7453.0], [2930.0, 7574.0], [2918.0, 8185.0], [2826.0, 8982.0], [2830.0, 8500.0], [2834.0, 8788.8], [2858.0, 8311.666666666666], [2854.0, 8499.0], [2954.0, 8094.8], [2998.0, 7420.0], [2994.0, 8177.666666666667], [2990.0, 7812.285714285715], [2091.0, 138.83333333333334], [2115.0, 137.0], [2087.0, 140.0], [2083.0, 139.5], [2071.0, 132.15789473684208], [2067.0, 132.75], [2051.0, 135.0], [2203.0, 138.5], [2263.0, 196.25], [2259.0, 99.5], [2207.0, 235.5], [2235.0, 102.5], [2227.0, 103.0], [2219.0, 125.55555555555556], [2215.0, 124.65], [2431.0, 4153.333333333333], [2423.0, 2614.0], [2371.0, 1179.0], [2375.0, 1175.0], [2383.0, 1168.0], [2387.0, 1165.5], [2399.0, 1151.0], [2415.0, 2299.5], [2411.0, 1144.0], [2407.0, 1145.0], [2335.0, 132.0], [2331.0, 132.6], [2367.0, 1181.0], [2363.0, 1182.0], [2359.0, 1184.0], [2343.0, 2220.0], [2551.0, 7246.0], [2499.0, 2211.0], [2559.0, 8690.0], [2503.0, 2207.0], [2507.0, 7806.0], [2511.0, 7799.0], [2515.0, 7781.0], [2519.0, 7254.0], [2555.0, 8773.0], [2539.0, 7250.0], [2535.0, 7633.5], [2495.0, 2213.0], [2443.0, 2611.0], [2447.0, 2612.0], [2455.0, 2610.5], [2451.0, 5692.0], [2459.0, 2610.0], [2463.0, 2601.5], [2487.0, 2595.0], [2483.0, 2596.0], [2471.0, 2599.5], [2627.0, 8739.0], [2687.0, 7140.0], [2631.0, 8735.0], [2639.0, 8723.0], [2643.0, 8186.666666666667], [2647.0, 8711.0], [2651.0, 8711.0], [2675.0, 8671.0], [2671.0, 8672.5], [2663.0, 8702.0], [2659.0, 8676.333333333334], [2567.0, 8687.0], [2571.0, 8762.0], [2587.0, 8753.0], [2591.0, 7224.0], [2619.0, 8662.0], [2615.0, 8702.0], [2607.0, 8743.0], [2595.0, 7948.0], [2803.0, 8043.25], [2783.0, 7463.0], [2811.0, 7460.0], [2807.0, 8501.0], [2787.0, 8273.75], [2695.0, 8666.0], [2699.0, 8663.0], [2703.0, 8662.0], [2711.0, 8620.0], [2715.0, 8658.0], [2931.0, 7574.0], [2939.0, 7574.0], [2887.0, 8978.0], [2891.0, 7975.5], [2895.0, 7983.6799999999985], [2903.0, 7449.0], [2915.0, 7613.400000000001], [2819.0, 8050.333333333333], [2827.0, 8508.0], [2835.0, 8740.5], [2863.0, 7457.0], [2963.0, 7875.0], [2959.0, 8036.0], [2971.0, 7570.0], [2975.0, 7570.0], [2995.0, 7922.050847457623], [2991.0, 7568.0], [2987.0, 8484.0], [2979.0, 8483.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[2942.108233929749, 8334.333366467918]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 3000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 3637.2, "minX": 1.6828602E12, "maxY": 162721.08333333334, "series": [{"data": [[1.68286044E12, 146090.16666666666], [1.68286056E12, 4661.216666666666], [1.68286026E12, 127756.08333333333], [1.6828602E12, 5894.35], [1.68286038E12, 162721.08333333334], [1.68286032E12, 159635.85], [1.6828605E12, 116686.53333333334]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.68286044E12, 103462.8], [1.68286056E12, 3637.2], [1.68286026E12, 84436.8], [1.6828602E12, 4258.8], [1.68286038E12, 111846.0], [1.68286032E12, 111501.6], [1.6828605E12, 84462.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68286056E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 3860.371201588883, "minX": 1.6828602E12, "maxY": 13763.023094688218, "series": [{"data": [[1.68286044E12, 8658.501583177696], [1.68286056E12, 13763.023094688218], [1.68286026E12, 5624.934907218514], [1.6828602E12, 4593.033530571992], [1.68286038E12, 12882.368916094389], [1.68286032E12, 8901.523830935232], [1.6828605E12, 3860.371201588883]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68286056E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 3695.8223435948335, "minX": 1.6828602E12, "maxY": 13763.016166281755, "series": [{"data": [[1.68286044E12, 8658.491515791182], [1.68286056E12, 13763.016166281755], [1.68286026E12, 5105.546585057814], [1.6828602E12, 4592.891518737674], [1.68286038E12, 12074.696252612755], [1.68286032E12, 8467.410146882516], [1.6828605E12, 3695.8223435948335]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68286056E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 23.867850098619314, "minX": 1.6828602E12, "maxY": 10135.383024783572, "series": [{"data": [[1.68286044E12, 2430.9568888528074], [1.68286056E12, 39.635103926097], [1.68286026E12, 276.10405129699706], [1.6828602E12, 23.867850098619314], [1.68286038E12, 10135.383024783572], [1.68286032E12, 2311.6178806954513], [1.6828605E12, 221.37428003972212]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68286056E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 3.0, "minX": 1.6828602E12, "maxY": 190180.0, "series": [{"data": [[1.68286044E12, 190180.0], [1.68286056E12, 116652.0], [1.68286026E12, 53409.0], [1.6828602E12, 8113.0], [1.68286038E12, 171075.0], [1.68286032E12, 100297.0], [1.6828605E12, 123262.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.68286044E12, 30472.0], [1.68286056E12, 28061.800000000025], [1.68286026E12, 14255.0], [1.6828602E12, 7152.0], [1.68286038E12, 10397.8], [1.68286032E12, 17566.0], [1.6828605E12, 7806.799999999999]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.68286044E12, 103016.82], [1.68286056E12, 116651.0], [1.68286026E12, 38176.39999999999], [1.6828602E12, 8107.0], [1.68286038E12, 163917.0], [1.68286032E12, 100137.0], [1.6828605E12, 20250.84000000049]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.68286044E12, 64739.1], [1.68286056E12, 38866.499999999956], [1.68286026E12, 16568.35], [1.6828602E12, 7157.0], [1.68286038E12, 138057.2], [1.68286032E12, 47201.0], [1.6828605E12, 8962.599999999997]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.68286044E12, 16.0], [1.68286056E12, 5428.0], [1.68286026E12, 3.0], [1.6828602E12, 107.0], [1.68286038E12, 6.0], [1.68286032E12, 4.0], [1.6828605E12, 21.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.68286044E12, 148.0], [1.68286056E12, 8462.0], [1.68286026E12, 59.0], [1.6828602E12, 5332.0], [1.68286038E12, 131.0], [1.68286032E12, 124.0], [1.6828605E12, 1047.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68286056E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 12.0, "minX": 1.0, "maxY": 165383.0, "series": [{"data": [[2.0, 24427.0], [3.0, 37996.5], [4.0, 9102.5], [5.0, 33842.5], [6.0, 6964.5], [7.0, 3362.0], [8.0, 19782.5], [9.0, 3811.0], [10.0, 70844.0], [11.0, 1336.0], [14.0, 2228.0], [18.0, 34647.5], [19.0, 7929.0], [20.0, 29514.0], [21.0, 6044.0], [22.0, 18573.0], [23.0, 1812.5], [24.0, 87.0], [25.0, 5124.0], [32.0, 13300.5], [33.0, 1847.5], [37.0, 163844.0], [40.0, 52.0], [52.0, 14264.5], [59.0, 5097.0], [61.0, 96.0], [60.0, 1443.0], [62.0, 56.0], [63.0, 1049.0], [64.0, 656.0], [66.0, 1137.5], [65.0, 96281.0], [71.0, 1125.5], [68.0, 1195.0], [72.0, 1062.5], [75.0, 1175.0], [77.0, 105.0], [91.0, 5076.0], [94.0, 161804.0], [93.0, 5551.0], [98.0, 4592.5], [99.0, 6772.0], [110.0, 114.5], [115.0, 48.0], [114.0, 54.5], [113.0, 2612.0], [116.0, 3691.0], [118.0, 141.0], [127.0, 88.0], [128.0, 7151.0], [135.0, 6685.5], [130.0, 102.0], [136.0, 130.0], [139.0, 5207.0], [144.0, 4939.5], [148.0, 106.0], [159.0, 93.0], [156.0, 7399.0], [153.0, 126.0], [160.0, 123.0], [163.0, 143.0], [167.0, 4145.0], [172.0, 106.0], [173.0, 159.0], [180.0, 133.0], [179.0, 153.0], [185.0, 100156.0], [184.0, 144.0], [187.0, 112.0], [188.0, 132.0], [189.0, 134.0], [191.0, 8658.0], [199.0, 80.0], [193.0, 76.5], [198.0, 140.0], [197.0, 139.0], [196.0, 147.0], [202.0, 55.0], [206.0, 47.0], [204.0, 74.0], [201.0, 123.0], [205.0, 129.0], [200.0, 133.0], [207.0, 1050.0], [212.0, 120.0], [209.0, 143.0], [208.0, 128.5], [210.0, 118.0], [211.0, 3633.0], [216.0, 90.0], [218.0, 134.0], [228.0, 136.0], [224.0, 145.0], [231.0, 126.0], [234.0, 97.0], [238.0, 111.0], [237.0, 127.0], [244.0, 29.0], [241.0, 113.0], [248.0, 44.5], [268.0, 37.0], [256.0, 110.0], [277.0, 16807.0], [279.0, 133.0], [272.0, 136.0], [273.0, 6405.0], [298.0, 16942.5], [289.0, 128.0], [294.0, 7169.5], [306.0, 41.0], [308.0, 148.0], [319.0, 120.0], [313.0, 101.0], [335.0, 5148.0], [323.0, 44.0], [320.0, 125.0], [331.0, 141.0], [330.0, 149.0], [332.0, 116.5], [325.0, 7369.0], [347.0, 10034.0], [340.0, 5301.0], [357.0, 43.0], [362.0, 120.5], [359.0, 119.0], [364.0, 4186.5], [374.0, 13187.0], [381.0, 126.0], [384.0, 17.0], [398.0, 57.0], [396.0, 50.0], [393.0, 199.0], [399.0, 100.0], [394.0, 169.0], [386.0, 114.0], [402.0, 46.0], [404.0, 95.0], [400.0, 140.0], [401.0, 142.0], [429.0, 44.0], [426.0, 130.0], [416.0, 143.0], [423.0, 130.0], [417.0, 192.0], [427.0, 125.0], [442.0, 117.0], [434.0, 119.5], [461.0, 14990.0], [463.0, 185.0], [474.0, 114.0], [477.0, 301.0], [489.0, 14705.0], [502.0, 182.0], [496.0, 15581.5], [515.0, 22.0], [542.0, 212.0], [536.0, 117.0], [572.0, 13750.0], [575.0, 45.0], [565.0, 10195.0], [546.0, 127.0], [588.0, 249.5], [583.0, 130.0], [577.0, 235.0], [603.0, 121.0], [595.0, 164.0], [639.0, 239.0], [612.0, 12957.0], [649.0, 12469.0], [654.0, 47.0], [659.0, 24796.0], [665.0, 189.0], [664.0, 215.0], [688.0, 7569.0], [721.0, 13179.0], [834.0, 15982.0], [886.0, 12.0], [880.0, 12566.0], [1084.0, 12.0], [1.0, 82301.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2.0, 9068.5], [565.0, 24092.0], [37.0, 163828.5], [721.0, 33749.0], [3.0, 10060.0], [834.0, 77276.0], [886.0, 24093.0], [5.0, 12057.0], [94.0, 165383.0], [7.0, 140128.0], [127.0, 29788.0], [148.0, 96077.0], [185.0, 93275.0], [199.0, 50976.0], [206.0, 41808.0], [209.0, 160725.5], [212.0, 111487.0], [218.0, 148122.5], [228.0, 140166.0], [234.0, 81869.0], [268.0, 16068.0], [1.0, 9066.0], [18.0, 27739.0], [20.0, 29784.0], [374.0, 9055.0], [23.0, 36489.0], [381.0, 134107.0], [24.0, 29788.0], [429.0, 12057.0], [31.0, 27742.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1084.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 163844.0, "series": [{"data": [[2.0, 24427.0], [3.0, 37996.5], [4.0, 9102.5], [5.0, 33842.5], [6.0, 6964.5], [7.0, 3362.0], [8.0, 19782.5], [9.0, 3811.0], [10.0, 70844.0], [11.0, 1331.0], [14.0, 2227.5], [18.0, 34647.5], [19.0, 7929.0], [20.0, 29514.0], [21.0, 6044.0], [22.0, 18573.0], [23.0, 1812.5], [24.0, 87.0], [25.0, 5124.0], [32.0, 13300.5], [33.0, 1847.5], [37.0, 163844.0], [40.0, 52.0], [52.0, 14264.5], [59.0, 5097.0], [61.0, 96.0], [60.0, 1443.0], [62.0, 56.0], [63.0, 1049.0], [64.0, 656.0], [66.0, 1137.5], [65.0, 96281.0], [71.0, 1125.5], [68.0, 1195.0], [72.0, 1062.5], [75.0, 1175.0], [77.0, 105.0], [91.0, 5076.0], [94.0, 161804.0], [93.0, 5551.0], [98.0, 4592.5], [99.0, 6772.0], [110.0, 114.5], [115.0, 48.0], [114.0, 54.5], [113.0, 2612.0], [116.0, 3683.0], [118.0, 140.5], [127.0, 88.0], [128.0, 7151.0], [135.0, 6685.5], [130.0, 102.0], [136.0, 130.0], [139.0, 5207.0], [144.0, 4939.5], [148.0, 106.0], [159.0, 93.0], [156.0, 7399.0], [153.0, 126.0], [160.0, 123.0], [163.0, 143.0], [167.0, 4145.0], [172.0, 106.0], [173.0, 159.0], [180.0, 133.0], [179.0, 153.0], [185.0, 100156.0], [184.0, 144.0], [187.0, 112.0], [188.0, 132.0], [189.0, 134.0], [191.0, 8658.0], [199.0, 80.0], [193.0, 76.5], [198.0, 140.0], [197.0, 139.0], [196.0, 147.0], [202.0, 55.0], [206.0, 47.0], [204.0, 74.0], [201.0, 123.0], [205.0, 129.0], [200.0, 133.0], [207.0, 1050.0], [212.0, 120.0], [209.0, 143.0], [208.0, 128.5], [210.0, 118.0], [211.0, 3633.0], [216.0, 90.0], [218.0, 134.0], [228.0, 136.0], [224.0, 145.0], [231.0, 126.0], [234.0, 97.0], [238.0, 111.0], [237.0, 127.0], [244.0, 29.0], [241.0, 113.0], [248.0, 44.5], [268.0, 37.0], [256.0, 110.0], [277.0, 16807.0], [279.0, 133.0], [272.0, 136.0], [273.0, 6405.0], [298.0, 16942.5], [289.0, 128.0], [294.0, 7169.5], [306.0, 41.0], [308.0, 148.0], [319.0, 120.0], [313.0, 101.0], [335.0, 5148.0], [323.0, 44.0], [320.0, 125.0], [331.0, 141.0], [330.0, 149.0], [332.0, 116.5], [325.0, 7369.0], [347.0, 10034.0], [340.0, 5301.0], [357.0, 43.0], [362.0, 120.5], [359.0, 119.0], [364.0, 4186.5], [374.0, 13187.0], [381.0, 126.0], [384.0, 17.0], [398.0, 57.0], [396.0, 50.0], [393.0, 199.0], [399.0, 100.0], [394.0, 169.0], [386.0, 114.0], [402.0, 46.0], [404.0, 95.0], [400.0, 140.0], [401.0, 142.0], [429.0, 44.0], [426.0, 130.0], [416.0, 143.0], [423.0, 130.0], [417.0, 192.0], [427.0, 125.0], [442.0, 117.0], [434.0, 119.5], [461.0, 14990.0], [463.0, 185.0], [474.0, 114.0], [477.0, 301.0], [489.0, 14705.0], [502.0, 182.0], [496.0, 15581.5], [515.0, 22.0], [542.0, 212.0], [536.0, 117.0], [572.0, 13750.0], [575.0, 45.0], [565.0, 10195.0], [546.0, 127.0], [588.0, 249.5], [583.0, 130.0], [577.0, 235.0], [603.0, 121.0], [595.0, 164.0], [639.0, 239.0], [612.0, 12957.0], [649.0, 12469.0], [654.0, 47.0], [659.0, 24796.0], [665.0, 189.0], [664.0, 215.0], [688.0, 7569.0], [721.0, 13179.0], [834.0, 15982.0], [886.0, 12.0], [880.0, 12566.0], [1084.0, 12.0], [1.0, 82301.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2.0, 0.0], [565.0, 0.0], [37.0, 0.0], [721.0, 0.0], [3.0, 0.0], [834.0, 0.0], [886.0, 0.0], [5.0, 0.0], [94.0, 0.0], [7.0, 0.0], [127.0, 0.0], [148.0, 0.0], [185.0, 0.0], [199.0, 0.0], [206.0, 0.0], [209.0, 0.0], [212.0, 0.0], [218.0, 0.0], [228.0, 0.0], [234.0, 0.0], [268.0, 0.0], [1.0, 0.0], [18.0, 0.0], [20.0, 0.0], [374.0, 0.0], [23.0, 0.0], [381.0, 0.0], [24.0, 0.0], [429.0, 0.0], [31.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1084.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 28.45, "minX": 1.6828602E12, "maxY": 220.0, "series": [{"data": [[1.68286044E12, 186.66666666666666], [1.68286026E12, 200.0], [1.6828602E12, 28.45], [1.68286038E12, 220.0], [1.68286032E12, 200.0], [1.6828605E12, 170.88333333333333]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6828605E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.25, "minX": 1.6828602E12, "maxY": 221.91666666666666, "series": [{"data": [[1.68286044E12, 205.28333333333333], [1.68286056E12, 7.216666666666667], [1.68286026E12, 167.53333333333333], [1.6828602E12, 8.45], [1.68286038E12, 221.91666666666666], [1.68286032E12, 221.23333333333332], [1.6828605E12, 167.58333333333334]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.68286026E12, 4.016666666666667], [1.68286038E12, 1.35], [1.68286032E12, 1.1666666666666667], [1.6828605E12, 0.25]], "isOverall": false, "label": "Non HTTP response code: java.net.SocketException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68286056E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.25, "minX": 1.6828602E12, "maxY": 221.91666666666666, "series": [{"data": [[1.68286044E12, 205.28333333333333], [1.68286056E12, 7.216666666666667], [1.68286026E12, 167.53333333333333], [1.6828602E12, 8.45], [1.68286038E12, 221.91666666666666], [1.68286032E12, 221.23333333333332], [1.6828605E12, 167.58333333333334]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.68286026E12, 4.016666666666667], [1.68286038E12, 1.35], [1.68286032E12, 1.1666666666666667], [1.6828605E12, 0.25]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68286056E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.25, "minX": 1.6828602E12, "maxY": 221.91666666666666, "series": [{"data": [[1.68286044E12, 205.28333333333333], [1.68286056E12, 7.216666666666667], [1.68286026E12, 167.53333333333333], [1.6828602E12, 8.45], [1.68286038E12, 221.91666666666666], [1.68286032E12, 221.23333333333332], [1.6828605E12, 167.58333333333334]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.68286026E12, 4.016666666666667], [1.68286038E12, 1.35], [1.68286032E12, 1.1666666666666667], [1.6828605E12, 0.25]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68286056E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

