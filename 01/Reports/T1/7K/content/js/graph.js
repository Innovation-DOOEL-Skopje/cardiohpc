/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 5.0, "minX": 0.0, "maxY": 257136.0, "series": [{"data": [[0.0, 5.0], [0.1, 33.0], [0.2, 44.0], [0.3, 49.0], [0.4, 53.0], [0.5, 57.0], [0.6, 60.0], [0.7, 63.0], [0.8, 68.0], [0.9, 71.0], [1.0, 74.0], [1.1, 78.0], [1.2, 80.0], [1.3, 82.0], [1.4, 84.0], [1.5, 85.0], [1.6, 86.0], [1.7, 88.0], [1.8, 90.0], [1.9, 91.0], [2.0, 92.0], [2.1, 92.0], [2.2, 94.0], [2.3, 95.0], [2.4, 97.0], [2.5, 98.0], [2.6, 99.0], [2.7, 100.0], [2.8, 101.0], [2.9, 103.0], [3.0, 104.0], [3.1, 105.0], [3.2, 105.0], [3.3, 106.0], [3.4, 107.0], [3.5, 108.0], [3.6, 109.0], [3.7, 111.0], [3.8, 112.0], [3.9, 113.0], [4.0, 115.0], [4.1, 115.0], [4.2, 116.0], [4.3, 117.0], [4.4, 118.0], [4.5, 118.0], [4.6, 120.0], [4.7, 121.0], [4.8, 122.0], [4.9, 124.0], [5.0, 125.0], [5.1, 126.0], [5.2, 126.0], [5.3, 127.0], [5.4, 128.0], [5.5, 128.0], [5.6, 129.0], [5.7, 130.0], [5.8, 131.0], [5.9, 132.0], [6.0, 133.0], [6.1, 133.0], [6.2, 134.0], [6.3, 135.0], [6.4, 136.0], [6.5, 136.0], [6.6, 137.0], [6.7, 137.0], [6.8, 138.0], [6.9, 139.0], [7.0, 140.0], [7.1, 141.0], [7.2, 142.0], [7.3, 142.0], [7.4, 143.0], [7.5, 143.0], [7.6, 144.0], [7.7, 144.0], [7.8, 145.0], [7.9, 145.0], [8.0, 146.0], [8.1, 146.0], [8.2, 147.0], [8.3, 147.0], [8.4, 148.0], [8.5, 148.0], [8.6, 149.0], [8.7, 149.0], [8.8, 150.0], [8.9, 150.0], [9.0, 151.0], [9.1, 151.0], [9.2, 152.0], [9.3, 152.0], [9.4, 153.0], [9.5, 153.0], [9.6, 154.0], [9.7, 155.0], [9.8, 155.0], [9.9, 156.0], [10.0, 157.0], [10.1, 157.0], [10.2, 158.0], [10.3, 159.0], [10.4, 159.0], [10.5, 160.0], [10.6, 161.0], [10.7, 161.0], [10.8, 162.0], [10.9, 163.0], [11.0, 163.0], [11.1, 164.0], [11.2, 165.0], [11.3, 166.0], [11.4, 166.0], [11.5, 167.0], [11.6, 168.0], [11.7, 168.0], [11.8, 169.0], [11.9, 171.0], [12.0, 172.0], [12.1, 173.0], [12.2, 174.0], [12.3, 174.0], [12.4, 175.0], [12.5, 176.0], [12.6, 176.0], [12.7, 177.0], [12.8, 178.0], [12.9, 178.0], [13.0, 179.0], [13.1, 179.0], [13.2, 180.0], [13.3, 182.0], [13.4, 183.0], [13.5, 184.0], [13.6, 185.0], [13.7, 187.0], [13.8, 187.0], [13.9, 189.0], [14.0, 191.0], [14.1, 192.0], [14.2, 193.0], [14.3, 194.0], [14.4, 195.0], [14.5, 197.0], [14.6, 198.0], [14.7, 199.0], [14.8, 199.0], [14.9, 200.0], [15.0, 201.0], [15.1, 202.0], [15.2, 202.0], [15.3, 203.0], [15.4, 204.0], [15.5, 205.0], [15.6, 205.0], [15.7, 206.0], [15.8, 207.0], [15.9, 207.0], [16.0, 209.0], [16.1, 209.0], [16.2, 210.0], [16.3, 211.0], [16.4, 212.0], [16.5, 213.0], [16.6, 214.0], [16.7, 216.0], [16.8, 217.0], [16.9, 218.0], [17.0, 219.0], [17.1, 220.0], [17.2, 220.0], [17.3, 221.0], [17.4, 222.0], [17.5, 223.0], [17.6, 224.0], [17.7, 226.0], [17.8, 227.0], [17.9, 229.0], [18.0, 230.0], [18.1, 232.0], [18.2, 232.0], [18.3, 233.0], [18.4, 233.0], [18.5, 234.0], [18.6, 235.0], [18.7, 236.0], [18.8, 237.0], [18.9, 239.0], [19.0, 240.0], [19.1, 242.0], [19.2, 242.0], [19.3, 243.0], [19.4, 244.0], [19.5, 246.0], [19.6, 248.0], [19.7, 250.0], [19.8, 252.0], [19.9, 252.0], [20.0, 253.0], [20.1, 254.0], [20.2, 255.0], [20.3, 256.0], [20.4, 256.0], [20.5, 257.0], [20.6, 258.0], [20.7, 258.0], [20.8, 259.0], [20.9, 260.0], [21.0, 260.0], [21.1, 261.0], [21.2, 262.0], [21.3, 263.0], [21.4, 264.0], [21.5, 265.0], [21.6, 266.0], [21.7, 266.0], [21.8, 267.0], [21.9, 267.0], [22.0, 268.0], [22.1, 268.0], [22.2, 268.0], [22.3, 269.0], [22.4, 269.0], [22.5, 269.0], [22.6, 269.0], [22.7, 270.0], [22.8, 270.0], [22.9, 271.0], [23.0, 272.0], [23.1, 272.0], [23.2, 273.0], [23.3, 273.0], [23.4, 274.0], [23.5, 274.0], [23.6, 275.0], [23.7, 275.0], [23.8, 276.0], [23.9, 276.0], [24.0, 276.0], [24.1, 277.0], [24.2, 277.0], [24.3, 277.0], [24.4, 278.0], [24.5, 278.0], [24.6, 279.0], [24.7, 280.0], [24.8, 280.0], [24.9, 281.0], [25.0, 282.0], [25.1, 283.0], [25.2, 285.0], [25.3, 285.0], [25.4, 286.0], [25.5, 287.0], [25.6, 288.0], [25.7, 288.0], [25.8, 289.0], [25.9, 290.0], [26.0, 290.0], [26.1, 291.0], [26.2, 292.0], [26.3, 292.0], [26.4, 293.0], [26.5, 294.0], [26.6, 294.0], [26.7, 295.0], [26.8, 295.0], [26.9, 296.0], [27.0, 296.0], [27.1, 297.0], [27.2, 297.0], [27.3, 298.0], [27.4, 298.0], [27.5, 299.0], [27.6, 300.0], [27.7, 301.0], [27.8, 302.0], [27.9, 302.0], [28.0, 303.0], [28.1, 303.0], [28.2, 304.0], [28.3, 304.0], [28.4, 304.0], [28.5, 305.0], [28.6, 305.0], [28.7, 305.0], [28.8, 306.0], [28.9, 306.0], [29.0, 306.0], [29.1, 307.0], [29.2, 307.0], [29.3, 307.0], [29.4, 308.0], [29.5, 308.0], [29.6, 308.0], [29.7, 309.0], [29.8, 309.0], [29.9, 310.0], [30.0, 310.0], [30.1, 311.0], [30.2, 311.0], [30.3, 312.0], [30.4, 313.0], [30.5, 314.0], [30.6, 314.0], [30.7, 315.0], [30.8, 315.0], [30.9, 316.0], [31.0, 316.0], [31.1, 316.0], [31.2, 317.0], [31.3, 317.0], [31.4, 317.0], [31.5, 318.0], [31.6, 318.0], [31.7, 318.0], [31.8, 319.0], [31.9, 320.0], [32.0, 321.0], [32.1, 322.0], [32.2, 323.0], [32.3, 323.0], [32.4, 324.0], [32.5, 325.0], [32.6, 325.0], [32.7, 326.0], [32.8, 326.0], [32.9, 326.0], [33.0, 327.0], [33.1, 327.0], [33.2, 327.0], [33.3, 327.0], [33.4, 328.0], [33.5, 328.0], [33.6, 328.0], [33.7, 328.0], [33.8, 329.0], [33.9, 329.0], [34.0, 329.0], [34.1, 330.0], [34.2, 330.0], [34.3, 330.0], [34.4, 331.0], [34.5, 331.0], [34.6, 332.0], [34.7, 333.0], [34.8, 333.0], [34.9, 334.0], [35.0, 335.0], [35.1, 336.0], [35.2, 336.0], [35.3, 337.0], [35.4, 338.0], [35.5, 338.0], [35.6, 338.0], [35.7, 338.0], [35.8, 339.0], [35.9, 339.0], [36.0, 339.0], [36.1, 339.0], [36.2, 340.0], [36.3, 340.0], [36.4, 340.0], [36.5, 340.0], [36.6, 341.0], [36.7, 341.0], [36.8, 341.0], [36.9, 341.0], [37.0, 342.0], [37.1, 342.0], [37.2, 342.0], [37.3, 342.0], [37.4, 343.0], [37.5, 343.0], [37.6, 343.0], [37.7, 344.0], [37.8, 344.0], [37.9, 344.0], [38.0, 344.0], [38.1, 344.0], [38.2, 345.0], [38.3, 345.0], [38.4, 345.0], [38.5, 346.0], [38.6, 346.0], [38.7, 346.0], [38.8, 347.0], [38.9, 347.0], [39.0, 348.0], [39.1, 348.0], [39.2, 348.0], [39.3, 349.0], [39.4, 349.0], [39.5, 350.0], [39.6, 350.0], [39.7, 350.0], [39.8, 351.0], [39.9, 351.0], [40.0, 352.0], [40.1, 352.0], [40.2, 353.0], [40.3, 353.0], [40.4, 353.0], [40.5, 353.0], [40.6, 354.0], [40.7, 354.0], [40.8, 354.0], [40.9, 354.0], [41.0, 355.0], [41.1, 355.0], [41.2, 355.0], [41.3, 355.0], [41.4, 356.0], [41.5, 356.0], [41.6, 356.0], [41.7, 357.0], [41.8, 357.0], [41.9, 358.0], [42.0, 358.0], [42.1, 359.0], [42.2, 359.0], [42.3, 360.0], [42.4, 360.0], [42.5, 361.0], [42.6, 361.0], [42.7, 361.0], [42.8, 361.0], [42.9, 362.0], [43.0, 362.0], [43.1, 362.0], [43.2, 362.0], [43.3, 362.0], [43.4, 363.0], [43.5, 363.0], [43.6, 363.0], [43.7, 363.0], [43.8, 363.0], [43.9, 364.0], [44.0, 364.0], [44.1, 364.0], [44.2, 364.0], [44.3, 365.0], [44.4, 365.0], [44.5, 365.0], [44.6, 365.0], [44.7, 365.0], [44.8, 365.0], [44.9, 366.0], [45.0, 366.0], [45.1, 366.0], [45.2, 366.0], [45.3, 366.0], [45.4, 366.0], [45.5, 366.0], [45.6, 367.0], [45.7, 367.0], [45.8, 367.0], [45.9, 367.0], [46.0, 367.0], [46.1, 367.0], [46.2, 368.0], [46.3, 368.0], [46.4, 368.0], [46.5, 368.0], [46.6, 368.0], [46.7, 368.0], [46.8, 369.0], [46.9, 369.0], [47.0, 369.0], [47.1, 369.0], [47.2, 369.0], [47.3, 369.0], [47.4, 369.0], [47.5, 370.0], [47.6, 370.0], [47.7, 370.0], [47.8, 370.0], [47.9, 370.0], [48.0, 370.0], [48.1, 371.0], [48.2, 371.0], [48.3, 371.0], [48.4, 371.0], [48.5, 371.0], [48.6, 371.0], [48.7, 372.0], [48.8, 372.0], [48.9, 372.0], [49.0, 372.0], [49.1, 372.0], [49.2, 373.0], [49.3, 373.0], [49.4, 373.0], [49.5, 373.0], [49.6, 374.0], [49.7, 374.0], [49.8, 374.0], [49.9, 374.0], [50.0, 375.0], [50.1, 375.0], [50.2, 375.0], [50.3, 375.0], [50.4, 375.0], [50.5, 375.0], [50.6, 376.0], [50.7, 376.0], [50.8, 376.0], [50.9, 376.0], [51.0, 376.0], [51.1, 376.0], [51.2, 377.0], [51.3, 377.0], [51.4, 377.0], [51.5, 377.0], [51.6, 377.0], [51.7, 377.0], [51.8, 377.0], [51.9, 378.0], [52.0, 378.0], [52.1, 378.0], [52.2, 378.0], [52.3, 378.0], [52.4, 378.0], [52.5, 378.0], [52.6, 379.0], [52.7, 379.0], [52.8, 379.0], [52.9, 379.0], [53.0, 379.0], [53.1, 379.0], [53.2, 379.0], [53.3, 380.0], [53.4, 380.0], [53.5, 380.0], [53.6, 380.0], [53.7, 380.0], [53.8, 380.0], [53.9, 380.0], [54.0, 381.0], [54.1, 381.0], [54.2, 381.0], [54.3, 381.0], [54.4, 381.0], [54.5, 382.0], [54.6, 382.0], [54.7, 382.0], [54.8, 382.0], [54.9, 383.0], [55.0, 383.0], [55.1, 383.0], [55.2, 383.0], [55.3, 384.0], [55.4, 384.0], [55.5, 384.0], [55.6, 384.0], [55.7, 385.0], [55.8, 385.0], [55.9, 385.0], [56.0, 385.0], [56.1, 385.0], [56.2, 386.0], [56.3, 386.0], [56.4, 386.0], [56.5, 387.0], [56.6, 387.0], [56.7, 387.0], [56.8, 387.0], [56.9, 388.0], [57.0, 388.0], [57.1, 388.0], [57.2, 389.0], [57.3, 389.0], [57.4, 389.0], [57.5, 389.0], [57.6, 390.0], [57.7, 390.0], [57.8, 390.0], [57.9, 390.0], [58.0, 390.0], [58.1, 391.0], [58.2, 391.0], [58.3, 391.0], [58.4, 391.0], [58.5, 391.0], [58.6, 392.0], [58.7, 392.0], [58.8, 392.0], [58.9, 392.0], [59.0, 392.0], [59.1, 393.0], [59.2, 393.0], [59.3, 393.0], [59.4, 393.0], [59.5, 393.0], [59.6, 394.0], [59.7, 394.0], [59.8, 394.0], [59.9, 394.0], [60.0, 394.0], [60.1, 395.0], [60.2, 395.0], [60.3, 395.0], [60.4, 395.0], [60.5, 395.0], [60.6, 395.0], [60.7, 396.0], [60.8, 396.0], [60.9, 396.0], [61.0, 396.0], [61.1, 397.0], [61.2, 397.0], [61.3, 397.0], [61.4, 397.0], [61.5, 397.0], [61.6, 398.0], [61.7, 398.0], [61.8, 398.0], [61.9, 398.0], [62.0, 398.0], [62.1, 399.0], [62.2, 399.0], [62.3, 399.0], [62.4, 399.0], [62.5, 399.0], [62.6, 400.0], [62.7, 400.0], [62.8, 400.0], [62.9, 400.0], [63.0, 400.0], [63.1, 400.0], [63.2, 401.0], [63.3, 401.0], [63.4, 401.0], [63.5, 401.0], [63.6, 401.0], [63.7, 401.0], [63.8, 402.0], [63.9, 402.0], [64.0, 402.0], [64.1, 402.0], [64.2, 402.0], [64.3, 403.0], [64.4, 403.0], [64.5, 403.0], [64.6, 403.0], [64.7, 404.0], [64.8, 404.0], [64.9, 404.0], [65.0, 404.0], [65.1, 405.0], [65.2, 405.0], [65.3, 405.0], [65.4, 406.0], [65.5, 406.0], [65.6, 406.0], [65.7, 407.0], [65.8, 407.0], [65.9, 407.0], [66.0, 408.0], [66.1, 408.0], [66.2, 409.0], [66.3, 410.0], [66.4, 410.0], [66.5, 411.0], [66.6, 411.0], [66.7, 412.0], [66.8, 412.0], [66.9, 412.0], [67.0, 413.0], [67.1, 413.0], [67.2, 413.0], [67.3, 413.0], [67.4, 413.0], [67.5, 414.0], [67.6, 414.0], [67.7, 414.0], [67.8, 415.0], [67.9, 415.0], [68.0, 416.0], [68.1, 416.0], [68.2, 417.0], [68.3, 417.0], [68.4, 418.0], [68.5, 419.0], [68.6, 420.0], [68.7, 421.0], [68.8, 424.0], [68.9, 426.0], [69.0, 428.0], [69.1, 429.0], [69.2, 431.0], [69.3, 432.0], [69.4, 432.0], [69.5, 433.0], [69.6, 434.0], [69.7, 435.0], [69.8, 435.0], [69.9, 436.0], [70.0, 436.0], [70.1, 437.0], [70.2, 438.0], [70.3, 439.0], [70.4, 440.0], [70.5, 440.0], [70.6, 441.0], [70.7, 442.0], [70.8, 442.0], [70.9, 443.0], [71.0, 443.0], [71.1, 444.0], [71.2, 446.0], [71.3, 449.0], [71.4, 456.0], [71.5, 458.0], [71.6, 459.0], [71.7, 464.0], [71.8, 468.0], [71.9, 470.0], [72.0, 471.0], [72.1, 472.0], [72.2, 473.0], [72.3, 474.0], [72.4, 476.0], [72.5, 479.0], [72.6, 480.0], [72.7, 481.0], [72.8, 487.0], [72.9, 489.0], [73.0, 491.0], [73.1, 492.0], [73.2, 493.0], [73.3, 493.0], [73.4, 494.0], [73.5, 498.0], [73.6, 499.0], [73.7, 501.0], [73.8, 502.0], [73.9, 503.0], [74.0, 503.0], [74.1, 504.0], [74.2, 505.0], [74.3, 505.0], [74.4, 506.0], [74.5, 507.0], [74.6, 508.0], [74.7, 509.0], [74.8, 510.0], [74.9, 511.0], [75.0, 512.0], [75.1, 513.0], [75.2, 515.0], [75.3, 527.0], [75.4, 529.0], [75.5, 531.0], [75.6, 532.0], [75.7, 532.0], [75.8, 533.0], [75.9, 533.0], [76.0, 533.0], [76.1, 534.0], [76.2, 534.0], [76.3, 534.0], [76.4, 535.0], [76.5, 535.0], [76.6, 535.0], [76.7, 536.0], [76.8, 536.0], [76.9, 537.0], [77.0, 537.0], [77.1, 540.0], [77.2, 544.0], [77.3, 547.0], [77.4, 551.0], [77.5, 552.0], [77.6, 553.0], [77.7, 554.0], [77.8, 556.0], [77.9, 559.0], [78.0, 561.0], [78.1, 562.0], [78.2, 563.0], [78.3, 564.0], [78.4, 565.0], [78.5, 566.0], [78.6, 567.0], [78.7, 567.0], [78.8, 568.0], [78.9, 568.0], [79.0, 575.0], [79.1, 577.0], [79.2, 581.0], [79.3, 582.0], [79.4, 583.0], [79.5, 591.0], [79.6, 595.0], [79.7, 597.0], [79.8, 607.0], [79.9, 619.0], [80.0, 621.0], [80.1, 623.0], [80.2, 626.0], [80.3, 630.0], [80.4, 632.0], [80.5, 633.0], [80.6, 635.0], [80.7, 637.0], [80.8, 639.0], [80.9, 641.0], [81.0, 646.0], [81.1, 648.0], [81.2, 649.0], [81.3, 650.0], [81.4, 651.0], [81.5, 653.0], [81.6, 656.0], [81.7, 657.0], [81.8, 659.0], [81.9, 663.0], [82.0, 665.0], [82.1, 666.0], [82.2, 669.0], [82.3, 671.0], [82.4, 672.0], [82.5, 673.0], [82.6, 674.0], [82.7, 675.0], [82.8, 679.0], [82.9, 684.0], [83.0, 686.0], [83.1, 688.0], [83.2, 689.0], [83.3, 690.0], [83.4, 695.0], [83.5, 701.0], [83.6, 703.0], [83.7, 708.0], [83.8, 715.0], [83.9, 722.0], [84.0, 724.0], [84.1, 725.0], [84.2, 727.0], [84.3, 728.0], [84.4, 729.0], [84.5, 730.0], [84.6, 730.0], [84.7, 731.0], [84.8, 733.0], [84.9, 735.0], [85.0, 738.0], [85.1, 739.0], [85.2, 740.0], [85.3, 741.0], [85.4, 742.0], [85.5, 743.0], [85.6, 747.0], [85.7, 752.0], [85.8, 757.0], [85.9, 765.0], [86.0, 769.0], [86.1, 773.0], [86.2, 774.0], [86.3, 776.0], [86.4, 777.0], [86.5, 777.0], [86.6, 780.0], [86.7, 785.0], [86.8, 788.0], [86.9, 790.0], [87.0, 792.0], [87.1, 794.0], [87.2, 796.0], [87.3, 798.0], [87.4, 799.0], [87.5, 802.0], [87.6, 804.0], [87.7, 810.0], [87.8, 816.0], [87.9, 818.0], [88.0, 820.0], [88.1, 822.0], [88.2, 842.0], [88.3, 845.0], [88.4, 846.0], [88.5, 854.0], [88.6, 882.0], [88.7, 890.0], [88.8, 891.0], [88.9, 893.0], [89.0, 896.0], [89.1, 905.0], [89.2, 918.0], [89.3, 922.0], [89.4, 933.0], [89.5, 940.0], [89.6, 943.0], [89.7, 955.0], [89.8, 963.0], [89.9, 966.0], [90.0, 967.0], [90.1, 968.0], [90.2, 969.0], [90.3, 971.0], [90.4, 974.0], [90.5, 976.0], [90.6, 978.0], [90.7, 985.0], [90.8, 987.0], [90.9, 1019.0], [91.0, 1022.0], [91.1, 1029.0], [91.2, 1035.0], [91.3, 1099.0], [91.4, 1308.0], [91.5, 1417.0], [91.6, 1803.0], [91.7, 1968.0], [91.8, 2279.0], [91.9, 2466.0], [92.0, 2790.0], [92.1, 3066.0], [92.2, 3262.0], [92.3, 3361.0], [92.4, 3595.0], [92.5, 4268.0], [92.6, 4746.0], [92.7, 5325.0], [92.8, 5656.0], [92.9, 5959.0], [93.0, 6247.0], [93.1, 6515.0], [93.2, 6623.0], [93.3, 6697.0], [93.4, 7171.0], [93.5, 7188.0], [93.6, 7221.0], [93.7, 7576.0], [93.8, 7959.0], [93.9, 8165.0], [94.0, 8267.0], [94.1, 8440.0], [94.2, 8717.0], [94.3, 8793.0], [94.4, 8825.0], [94.5, 8981.0], [94.6, 9157.0], [94.7, 9229.0], [94.8, 9239.0], [94.9, 9282.0], [95.0, 9466.0], [95.1, 10100.0], [95.2, 10285.0], [95.3, 10512.0], [95.4, 10727.0], [95.5, 10844.0], [95.6, 11182.0], [95.7, 11193.0], [95.8, 11311.0], [95.9, 11624.0], [96.0, 11681.0], [96.1, 12096.0], [96.2, 12210.0], [96.3, 12288.0], [96.4, 12323.0], [96.5, 12702.0], [96.6, 12856.0], [96.7, 12972.0], [96.8, 14091.0], [96.9, 14533.0], [97.0, 15074.0], [97.1, 15895.0], [97.2, 16774.0], [97.3, 17645.0], [97.4, 18629.0], [97.5, 19557.0], [97.6, 22241.0], [97.7, 24373.0], [97.8, 26507.0], [97.9, 28190.0], [98.0, 29499.0], [98.1, 31784.0], [98.2, 35925.0], [98.3, 39273.0], [98.4, 40811.0], [98.5, 48463.0], [98.6, 54357.0], [98.7, 62654.0], [98.8, 65034.0], [98.9, 68692.0], [99.0, 73843.0], [99.1, 94504.0], [99.2, 100206.0], [99.3, 100293.0], [99.4, 100860.0], [99.5, 127842.0], [99.6, 131875.0], [99.7, 138578.0], [99.8, 143192.0], [99.9, 146345.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 74234.0, "series": [{"data": [[0.0, 5623.0], [148000.0, 4.0], [66700.0, 1.0], [69900.0, 4.0], [79500.0, 3.0], [95500.0, 2.0], [127500.0, 47.0], [143400.0, 90.0], [100.0, 25763.0], [34500.0, 6.0], [32900.0, 26.0], [36100.0, 6.0], [141100.0, 37.0], [153900.0, 2.0], [39300.0, 14.0], [42500.0, 1.0], [44100.0, 2.0], [45700.0, 3.0], [47300.0, 9.0], [50500.0, 9.0], [200.0, 26911.0], [52100.0, 1.0], [56900.0, 1.0], [55300.0, 2.0], [58500.0, 1.0], [230700.0, 1.0], [60100.0, 3.0], [61700.0, 2.0], [64900.0, 5.0], [65800.0, 4.0], [72200.0, 8.0], [300.0, 74234.0], [78600.0, 65.0], [81800.0, 2.0], [400.0, 23417.0], [107400.0, 1.0], [500.0, 13023.0], [132400.0, 19.0], [138800.0, 10.0], [600.0, 7793.0], [700.0, 8448.0], [800.0, 3372.0], [900.0, 3889.0], [1000.0, 946.0], [1100.0, 114.0], [1200.0, 62.0], [1300.0, 193.0], [1400.0, 89.0], [1500.0, 78.0], [1600.0, 40.0], [1700.0, 55.0], [1800.0, 104.0], [1900.0, 161.0], [2000.0, 34.0], [2100.0, 78.0], [2300.0, 82.0], [2200.0, 73.0], [2400.0, 120.0], [2500.0, 36.0], [162100.0, 2.0], [2600.0, 90.0], [2700.0, 76.0], [2800.0, 50.0], [2900.0, 31.0], [3000.0, 198.0], [3100.0, 28.0], [3300.0, 217.0], [3200.0, 158.0], [3400.0, 110.0], [3500.0, 55.0], [3600.0, 54.0], [3700.0, 12.0], [3800.0, 37.0], [3900.0, 32.0], [4000.0, 32.0], [4200.0, 19.0], [4400.0, 86.0], [4600.0, 58.0], [74500.0, 2.0], [4800.0, 7.0], [77700.0, 2.0], [5000.0, 78.0], [80900.0, 1.0], [5200.0, 14.0], [5600.0, 38.0], [5400.0, 39.0], [5800.0, 14.0], [93700.0, 8.0], [96900.0, 3.0], [6000.0, 9.0], [6200.0, 79.0], [100100.0, 98.0], [6600.0, 242.0], [6400.0, 45.0], [6800.0, 53.0], [7000.0, 8.0], [7400.0, 41.0], [7200.0, 174.0], [7600.0, 82.0], [7800.0, 41.0], [8000.0, 51.0], [128900.0, 31.0], [8400.0, 130.0], [8800.0, 130.0], [9200.0, 662.0], [9600.0, 4.0], [10000.0, 50.0], [10400.0, 42.0], [11200.0, 66.0], [10800.0, 26.0], [11600.0, 290.0], [12000.0, 43.0], [12400.0, 99.0], [12800.0, 373.0], [13200.0, 3.0], [13600.0, 17.0], [14000.0, 168.0], [14400.0, 6.0], [14800.0, 17.0], [15200.0, 21.0], [15600.0, 62.0], [16000.0, 18.0], [16800.0, 6.0], [18400.0, 65.0], [17600.0, 78.0], [19200.0, 19.0], [20000.0, 22.0], [20800.0, 1.0], [22400.0, 27.0], [21600.0, 9.0], [23200.0, 2.0], [24000.0, 4.0], [24800.0, 1.0], [26400.0, 4.0], [25600.0, 2.0], [27200.0, 2.0], [28800.0, 5.0], [30400.0, 60.0], [31200.0, 1.0], [32000.0, 7.0], [33600.0, 8.0], [35200.0, 1.0], [38400.0, 18.0], [40000.0, 6.0], [43200.0, 2.0], [52800.0, 3.0], [54400.0, 11.0], [64000.0, 1.0], [67200.0, 8.0], [70400.0, 27.0], [86400.0, 2.0], [89600.0, 2.0], [105600.0, 28.0], [115200.0, 1.0], [121600.0, 1.0], [128000.0, 3.0], [138500.0, 19.0], [151300.0, 5.0], [70300.0, 1.0], [73500.0, 1.0], [76700.0, 3.0], [79900.0, 2.0], [127900.0, 5.0], [161800.0, 2.0], [33100.0, 12.0], [133900.0, 1.0], [36300.0, 2.0], [146700.0, 1.0], [140300.0, 15.0], [37900.0, 1.0], [39500.0, 8.0], [159500.0, 1.0], [42700.0, 5.0], [45900.0, 3.0], [47500.0, 2.0], [49100.0, 2.0], [55500.0, 11.0], [60300.0, 2.0], [61900.0, 2.0], [63500.0, 6.0], [65100.0, 10.0], [66200.0, 23.0], [69400.0, 92.0], [82200.0, 1.0], [98200.0, 3.0], [95000.0, 2.0], [117400.0, 4.0], [131600.0, 11.0], [138000.0, 44.0], [195600.0, 1.0], [135700.0, 3.0], [154900.0, 9.0], [68500.0, 1.0], [87700.0, 1.0], [90900.0, 2.0], [100500.0, 13.0], [116500.0, 4.0], [129300.0, 1.0], [133400.0, 2.0], [146200.0, 3.0], [139800.0, 19.0], [16900.0, 9.0], [17700.0, 11.0], [18500.0, 13.0], [19300.0, 6.0], [20100.0, 3.0], [20900.0, 1.0], [21700.0, 2.0], [22500.0, 3.0], [23300.0, 17.0], [24100.0, 2.0], [25700.0, 3.0], [26500.0, 73.0], [27300.0, 2.0], [28100.0, 13.0], [28900.0, 7.0], [29700.0, 3.0], [30500.0, 1.0], [31300.0, 5.0], [32100.0, 6.0], [131100.0, 13.0], [33800.0, 3.0], [35400.0, 2.0], [38600.0, 2.0], [40200.0, 43.0], [43400.0, 2.0], [45000.0, 2.0], [46600.0, 9.0], [48200.0, 1.0], [51400.0, 1.0], [54600.0, 2.0], [56200.0, 1.0], [57800.0, 8.0], [61000.0, 2.0], [59400.0, 3.0], [62600.0, 3.0], [64200.0, 53.0], [67600.0, 83.0], [70800.0, 1.0], [77200.0, 7.0], [93200.0, 2.0], [115600.0, 1.0], [143200.0, 21.0], [140900.0, 2.0], [166500.0, 6.0], [67500.0, 1.0], [70700.0, 15.0], [77100.0, 9.0], [96300.0, 4.0], [128300.0, 16.0], [138600.0, 9.0], [164200.0, 4.0], [33300.0, 9.0], [136300.0, 2.0], [36500.0, 6.0], [161900.0, 3.0], [39700.0, 2.0], [41300.0, 6.0], [44500.0, 3.0], [47700.0, 1.0], [49300.0, 1.0], [55700.0, 1.0], [58900.0, 3.0], [60500.0, 2.0], [63700.0, 18.0], [73000.0, 1.0], [69800.0, 1.0], [76200.0, 1.0], [82600.0, 2.0], [85800.0, 1.0], [92200.0, 2.0], [127400.0, 5.0], [134000.0, 2.0], [140400.0, 4.0], [131700.0, 9.0], [68900.0, 1.0], [65700.0, 1.0], [88100.0, 2.0], [94500.0, 3.0], [8500.0, 9.0], [8900.0, 264.0], [9300.0, 11.0], [9700.0, 9.0], [155000.0, 6.0], [10100.0, 153.0], [161400.0, 3.0], [10500.0, 36.0], [10900.0, 34.0], [11300.0, 151.0], [11700.0, 29.0], [12100.0, 147.0], [12500.0, 8.0], [13300.0, 14.0], [12900.0, 25.0], [13700.0, 4.0], [14100.0, 5.0], [14500.0, 21.0], [15300.0, 3.0], [14900.0, 59.0], [15700.0, 23.0], [17000.0, 11.0], [17800.0, 1.0], [18600.0, 130.0], [19400.0, 59.0], [20200.0, 4.0], [21000.0, 9.0], [21800.0, 5.0], [23400.0, 10.0], [22600.0, 1.0], [24200.0, 2.0], [25000.0, 2.0], [25800.0, 1.0], [26600.0, 4.0], [27400.0, 5.0], [28200.0, 2.0], [29000.0, 34.0], [29800.0, 4.0], [31400.0, 34.0], [32200.0, 7.0], [133500.0, 3.0], [146300.0, 26.0], [38800.0, 23.0], [37200.0, 2.0], [40400.0, 24.0], [42000.0, 5.0], [43600.0, 18.0], [46800.0, 6.0], [48400.0, 3.0], [53200.0, 4.0], [56400.0, 3.0], [71200.0, 2.0], [77600.0, 2.0], [84000.0, 2.0], [100000.0, 37.0], [128800.0, 1.0], [136000.0, 1.0], [142400.0, 12.0], [140100.0, 14.0], [146500.0, 5.0], [74300.0, 2.0], [80700.0, 2.0], [93500.0, 3.0], [103100.0, 15.0], [33500.0, 1.0], [36700.0, 8.0], [35100.0, 2.0], [39900.0, 11.0], [44700.0, 1.0], [46300.0, 1.0], [47900.0, 5.0], [49500.0, 4.0], [51100.0, 1.0], [52700.0, 5.0], [54300.0, 28.0], [55900.0, 14.0], [62300.0, 1.0], [63900.0, 15.0], [65500.0, 1.0], [257100.0, 1.0], [73400.0, 11.0], [111800.0, 1.0], [131000.0, 5.0], [127800.0, 64.0], [133200.0, 1.0], [146000.0, 2.0], [152400.0, 4.0], [143700.0, 3.0], [194900.0, 1.0], [66100.0, 2.0], [72500.0, 12.0], [78900.0, 2.0], [98100.0, 2.0], [117300.0, 3.0], [130100.0, 25.0], [218200.0, 1.0], [17100.0, 13.0], [17900.0, 9.0], [18700.0, 4.0], [19500.0, 5.0], [20300.0, 15.0], [21100.0, 16.0], [22700.0, 16.0], [24300.0, 61.0], [25100.0, 4.0], [27500.0, 83.0], [26700.0, 18.0], [29100.0, 11.0], [32300.0, 1.0], [34200.0, 3.0], [132700.0, 3.0], [35800.0, 9.0], [145500.0, 14.0], [37400.0, 2.0], [39000.0, 11.0], [42200.0, 1.0], [50200.0, 3.0], [53400.0, 1.0], [55000.0, 17.0], [56600.0, 24.0], [64600.0, 2.0], [68400.0, 1.0], [84400.0, 2.0], [100400.0, 5.0], [110000.0, 1.0], [116400.0, 2.0], [138400.0, 30.0], [68300.0, 2.0], [77900.0, 2.0], [97100.0, 2.0], [100300.0, 1.0], [140200.0, 3.0], [146600.0, 4.0], [33700.0, 6.0], [35300.0, 6.0], [40100.0, 10.0], [157100.0, 15.0], [41700.0, 2.0], [43300.0, 1.0], [44900.0, 21.0], [46500.0, 2.0], [48100.0, 1.0], [51300.0, 1.0], [54500.0, 2.0], [57700.0, 3.0], [60900.0, 4.0], [64100.0, 10.0], [67400.0, 2.0], [73800.0, 4.0], [99400.0, 2.0], [128200.0, 1.0], [135600.0, 12.0], [133300.0, 1.0], [139700.0, 2.0], [158900.0, 5.0], [4300.0, 26.0], [4100.0, 26.0], [4500.0, 25.0], [69700.0, 1.0], [4700.0, 27.0], [4900.0, 38.0], [5100.0, 57.0], [5300.0, 48.0], [85700.0, 2.0], [5500.0, 107.0], [5700.0, 73.0], [6100.0, 109.0], [5900.0, 150.0], [6300.0, 42.0], [6500.0, 289.0], [6700.0, 30.0], [6900.0, 1.0], [7100.0, 445.0], [7300.0, 39.0], [7500.0, 55.0], [7900.0, 82.0], [7700.0, 19.0], [8100.0, 234.0], [8600.0, 95.0], [8200.0, 218.0], [9000.0, 23.0], [143800.0, 2.0], [9400.0, 95.0], [10200.0, 169.0], [9800.0, 35.0], [10600.0, 62.0], [11000.0, 82.0], [11400.0, 50.0], [11800.0, 90.0], [12200.0, 411.0], [12600.0, 49.0], [13000.0, 21.0], [13800.0, 4.0], [14200.0, 53.0], [14600.0, 29.0], [15000.0, 25.0], [15400.0, 72.0], [15800.0, 24.0], [16200.0, 1.0], [16400.0, 14.0], [17200.0, 23.0], [18000.0, 5.0], [18800.0, 16.0], [20400.0, 2.0], [19600.0, 6.0], [21200.0, 9.0], [22800.0, 2.0], [24400.0, 27.0], [23600.0, 9.0], [25200.0, 12.0], [26000.0, 9.0], [26800.0, 12.0], [28400.0, 2.0], [30000.0, 3.0], [31600.0, 24.0], [30800.0, 8.0], [32400.0, 2.0], [34400.0, 6.0], [32800.0, 1.0], [135100.0, 1.0], [36000.0, 1.0], [37600.0, 6.0], [147900.0, 6.0], [154300.0, 7.0], [39200.0, 56.0], [40800.0, 5.0], [42400.0, 3.0], [44000.0, 1.0], [47200.0, 2.0], [50400.0, 39.0], [52000.0, 1.0], [55200.0, 3.0], [56800.0, 3.0], [58400.0, 1.0], [60000.0, 1.0], [63200.0, 5.0], [65600.0, 2.0], [75200.0, 1.0], [81600.0, 2.0], [94400.0, 1.0], [100800.0, 56.0], [107200.0, 4.0], [150400.0, 8.0], [163200.0, 10.0], [141700.0, 13.0], [148100.0, 1.0], [160900.0, 3.0], [75100.0, 9.0], [78300.0, 3.0], [97500.0, 1.0], [100700.0, 86.0], [129500.0, 16.0], [133000.0, 2.0], [139400.0, 1.0], [33900.0, 5.0], [35500.0, 5.0], [143500.0, 3.0], [38700.0, 6.0], [40300.0, 4.0], [41900.0, 1.0], [43500.0, 3.0], [46700.0, 17.0], [51500.0, 11.0], [53100.0, 13.0], [54700.0, 1.0], [59500.0, 4.0], [64300.0, 2.0], [71000.0, 2.0], [93400.0, 2.0], [103000.0, 19.0], [134800.0, 9.0], [141200.0, 11.0], [132500.0, 5.0], [138900.0, 14.0], [145300.0, 1.0], [177300.0, 1.0], [66900.0, 1.0], [73300.0, 1.0], [86100.0, 2.0], [95700.0, 9.0], [105300.0, 1.0], [111700.0, 1.0], [114900.0, 1.0], [130900.0, 3.0], [149400.0, 23.0], [17300.0, 14.0], [16500.0, 60.0], [18100.0, 5.0], [18900.0, 3.0], [19700.0, 16.0], [20500.0, 9.0], [21300.0, 14.0], [22100.0, 3.0], [22900.0, 1.0], [25300.0, 5.0], [26900.0, 19.0], [28500.0, 1.0], [27700.0, 6.0], [29300.0, 56.0], [30100.0, 1.0], [31700.0, 20.0], [30900.0, 1.0], [32500.0, 4.0], [33000.0, 3.0], [34600.0, 1.0], [36200.0, 5.0], [39400.0, 42.0], [41000.0, 2.0], [45800.0, 1.0], [49000.0, 2.0], [52200.0, 3.0], [57000.0, 1.0], [55400.0, 3.0], [58600.0, 1.0], [63400.0, 67.0], [65000.0, 20.0], [69200.0, 1.0], [75600.0, 4.0], [85200.0, 1.0], [101200.0, 22.0], [130000.0, 1.0], [133600.0, 1.0], [140000.0, 9.0], [152800.0, 3.0], [156900.0, 1.0], [65900.0, 2.0], [72300.0, 2.0], [75500.0, 1.0], [91500.0, 3.0], [101100.0, 24.0], [141800.0, 1.0], [167400.0, 1.0], [250600.0, 3.0], [34100.0, 6.0], [139500.0, 11.0], [38900.0, 1.0], [42100.0, 5.0], [43700.0, 4.0], [45300.0, 2.0], [46900.0, 3.0], [48500.0, 9.0], [50100.0, 2.0], [56500.0, 14.0], [64500.0, 2.0], [77800.0, 1.0], [87400.0, 2.0], [93800.0, 9.0], [100200.0, 229.0], [129000.0, 2.0], [156400.0, 20.0], [162800.0, 5.0], [134900.0, 7.0], [67300.0, 3.0], [8300.0, 16.0], [132600.0, 2.0], [8700.0, 440.0], [9100.0, 190.0], [145400.0, 4.0], [9500.0, 34.0], [9900.0, 32.0], [10300.0, 60.0], [10700.0, 303.0], [11100.0, 380.0], [11500.0, 37.0], [11900.0, 17.0], [12700.0, 31.0], [12300.0, 131.0], [13100.0, 11.0], [13500.0, 4.0], [14300.0, 87.0], [13900.0, 13.0], [14700.0, 71.0], [15100.0, 2.0], [15500.0, 8.0], [16300.0, 1.0], [15900.0, 43.0], [17400.0, 52.0], [16600.0, 21.0], [19000.0, 7.0], [19800.0, 11.0], [20600.0, 16.0], [21400.0, 1.0], [22200.0, 43.0], [23000.0, 2.0], [23800.0, 2.0], [27000.0, 2.0], [27800.0, 1.0], [29400.0, 80.0], [30200.0, 13.0], [31000.0, 5.0], [32600.0, 3.0], [31800.0, 2.0], [34800.0, 2.0], [33200.0, 1.0], [36400.0, 10.0], [143100.0, 28.0], [39600.0, 1.0], [41200.0, 20.0], [44400.0, 2.0], [46000.0, 2.0], [47600.0, 2.0], [49200.0, 1.0], [54000.0, 1.0], [57200.0, 3.0], [55600.0, 5.0], [58800.0, 9.0], [63600.0, 18.0], [65200.0, 12.0], [69600.0, 1.0], [72800.0, 3.0], [76000.0, 2.0], [79200.0, 2.0], [132800.0, 1.0], [145600.0, 15.0], [152000.0, 3.0], [158400.0, 1.0], [143300.0, 30.0], [69500.0, 15.0], [66300.0, 19.0], [85500.0, 1.0], [101500.0, 2.0], [114300.0, 8.0], [130300.0, 5.0], [141000.0, 3.0], [153800.0, 9.0], [34300.0, 3.0], [132300.0, 37.0], [138700.0, 1.0], [35900.0, 37.0], [145100.0, 4.0], [37500.0, 15.0], [39100.0, 11.0], [40700.0, 5.0], [42300.0, 3.0], [43900.0, 4.0], [50300.0, 1.0], [53500.0, 2.0], [58300.0, 1.0], [59900.0, 2.0], [68600.0, 5.0], [71800.0, 4.0], [75000.0, 1.0], [78200.0, 2.0], [84600.0, 2.0], [97400.0, 15.0], [100600.0, 37.0], [116600.0, 7.0], [129400.0, 1.0], [136400.0, 2.0], [162000.0, 6.0], [206800.0, 1.0], [67700.0, 3.0], [77300.0, 6.0], [80500.0, 1.0], [93300.0, 4.0], [131800.0, 8.0], [16700.0, 73.0], [18300.0, 1.0], [17500.0, 39.0], [19100.0, 13.0], [19900.0, 2.0], [20700.0, 9.0], [21500.0, 12.0], [22300.0, 20.0], [23100.0, 4.0], [23900.0, 7.0], [24700.0, 71.0], [26300.0, 22.0], [27100.0, 9.0], [27900.0, 3.0], [29500.0, 18.0], [28700.0, 11.0], [30300.0, 19.0], [31100.0, 4.0], [31900.0, 2.0], [32700.0, 3.0], [33400.0, 3.0], [36600.0, 46.0], [35000.0, 1.0], [38200.0, 2.0], [39800.0, 6.0], [41400.0, 11.0], [44600.0, 1.0], [47800.0, 4.0], [49400.0, 69.0], [52600.0, 6.0], [55800.0, 10.0], [57400.0, 7.0], [59000.0, 1.0], [60600.0, 1.0], [65400.0, 2.0], [66800.0, 9.0], [70000.0, 4.0], [76400.0, 1.0], [89200.0, 1.0], [92400.0, 2.0], [95600.0, 11.0], [98800.0, 18.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 257100.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 705.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 156124.0, "series": [{"data": [[0.0, 156124.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 37753.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 17264.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 705.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 9.647058823529413, "minX": 1.68286206E12, "maxY": 3000.0, "series": [{"data": [[1.68286206E12, 2985.0453369639204], [1.68286236E12, 2886.476881519585], [1.68286218E12, 3000.0], [1.6828623E12, 3000.0], [1.68286212E12, 3000.0], [1.68286242E12, 9.647058823529413], [1.68286224E12, 3000.0]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68286242E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 231.33333333333334, "minX": 2.0, "maxY": 72551.0, "series": [{"data": [[2.0, 66390.0], [3.0, 66389.5], [5.0, 66390.0], [7.0, 66389.0], [9.0, 66388.0], [10.0, 66389.0], [11.0, 66388.0], [12.0, 66387.0], [13.0, 66384.0], [15.0, 66379.0], [17.0, 66377.33333333333], [18.0, 11096.0], [19.0, 11094.0], [20.0, 11094.0], [21.0, 11095.0], [22.0, 11093.0], [24.0, 11093.0], [25.0, 11092.0], [26.0, 11092.0], [27.0, 11091.0], [28.0, 11087.0], [29.0, 11087.0], [30.0, 11087.0], [31.0, 11083.0], [33.0, 10906.0], [32.0, 11078.0], [34.0, 10181.0], [37.0, 10181.0], [39.0, 10180.5], [42.0, 10181.0], [45.0, 10179.0], [44.0, 10180.5], [46.0, 10181.0], [49.0, 10179.0], [48.0, 10180.0], [51.0, 10177.0], [50.0, 10179.0], [53.0, 10176.0], [52.0, 10178.0], [54.0, 10176.0], [57.0, 10174.0], [56.0, 10175.5], [59.0, 10175.0], [58.0, 10175.0], [61.0, 10172.0], [60.0, 10173.0], [63.0, 10171.0], [62.0, 10172.0], [67.0, 10169.5], [65.0, 10170.0], [64.0, 10170.0], [70.0, 10165.0], [69.0, 10167.0], [68.0, 10170.0], [75.0, 10161.0], [74.0, 10162.0], [73.0, 10164.0], [72.0, 10166.0], [79.0, 10157.0], [78.0, 10161.0], [77.0, 10161.5], [83.0, 10157.5], [81.0, 10157.5], [86.0, 10151.5], [84.0, 10154.0], [91.0, 10147.0], [90.0, 10149.0], [88.0, 10151.0], [95.0, 10143.5], [93.0, 10145.5], [98.0, 10145.0], [97.0, 10143.5], [103.0, 10129.0], [102.0, 10138.0], [100.0, 10139.5], [106.0, 10127.0], [105.0, 10129.0], [104.0, 10128.0], [111.0, 10124.0], [109.0, 10125.666666666666], [115.0, 10121.0], [114.0, 10120.0], [112.0, 10125.0], [119.0, 10116.0], [118.0, 10118.0], [117.0, 10118.0], [116.0, 10119.0], [123.0, 10100.0], [122.0, 10099.0], [121.0, 10101.0], [120.0, 10117.0], [126.0, 10092.0], [125.0, 10098.5], [135.0, 9263.0], [134.0, 9266.0], [133.0, 9264.0], [131.0, 9266.0], [130.0, 9268.0], [128.0, 9267.0], [143.0, 9263.5], [141.0, 9264.0], [140.0, 9264.0], [138.0, 9263.5], [136.0, 9263.5], [151.0, 9262.0], [150.0, 9263.0], [149.0, 9262.0], [147.0, 9262.0], [144.0, 9264.0], [159.0, 9245.5], [157.0, 9249.0], [156.0, 9260.0], [155.0, 9261.0], [154.0, 9262.0], [153.0, 9260.5], [167.0, 9246.0], [166.0, 9245.5], [164.0, 9245.5], [162.0, 9246.0], [161.0, 9247.0], [160.0, 9246.0], [175.0, 9242.0], [174.0, 9242.0], [173.0, 9244.0], [172.0, 9243.0], [171.0, 9244.0], [170.0, 9244.0], [169.0, 9244.0], [168.0, 9245.0], [183.0, 9235.0], [182.0, 9235.0], [181.0, 9239.0], [179.0, 9240.0], [178.0, 9238.0], [177.0, 9241.0], [191.0, 9231.0], [190.0, 9231.0], [189.0, 9232.0], [188.0, 9232.0], [187.0, 9233.5], [186.0, 9234.0], [184.0, 9234.0], [199.0, 9225.0], [198.0, 9227.0], [197.0, 9228.0], [196.0, 9226.0], [194.0, 9228.0], [193.0, 9230.0], [192.0, 9232.0], [207.0, 9223.0], [205.0, 9222.0], [204.0, 9223.0], [203.0, 9223.666666666666], [200.0, 9225.0], [213.0, 9218.0], [212.0, 9218.0], [211.0, 9220.0], [210.0, 9568.0], [209.0, 9222.0], [223.0, 9209.0], [222.0, 9211.0], [221.0, 9211.0], [220.0, 9213.0], [219.0, 9213.0], [218.0, 9214.0], [217.0, 9217.0], [216.0, 9217.0], [231.0, 9206.0], [230.0, 9898.0], [229.0, 9206.0], [228.0, 9208.0], [227.0, 9208.0], [225.0, 9207.0], [224.0, 9208.0], [239.0, 9202.0], [238.0, 9202.0], [236.0, 9203.0], [235.0, 9201.0], [234.0, 9203.0], [233.0, 9205.0], [232.0, 9206.0], [247.0, 9197.5], [245.0, 9200.5], [243.0, 9546.5], [241.0, 9202.0], [240.0, 9202.0], [255.0, 9184.0], [254.0, 9184.5], [252.0, 9186.0], [251.0, 9188.0], [250.0, 9188.0], [249.0, 9196.5], [270.0, 9166.0], [271.0, 9161.0], [269.0, 9169.0], [268.0, 9169.5], [266.0, 9171.0], [265.0, 9173.0], [264.0, 9173.0], [262.0, 9172.0], [257.0, 9180.5], [259.0, 9179.0], [258.0, 9872.0], [261.0, 9175.0], [260.0, 9177.0], [275.0, 9159.0], [286.0, 9151.0], [287.0, 9842.0], [285.0, 9842.0], [283.0, 9152.0], [281.0, 9498.5], [279.0, 9152.0], [278.0, 9155.0], [276.0, 9157.0], [274.0, 9158.0], [272.0, 9160.0], [301.0, 7421.0], [302.0, 20609.0], [300.0, 14018.5], [298.0, 8472.0], [297.0, 8471.0], [296.0, 8475.0], [295.0, 9471.0], [293.0, 9143.0], [291.0, 9149.0], [290.0, 9149.0], [288.0, 9150.0], [316.0, 10694.0], [319.0, 5666.0], [318.0, 19716.0], [317.0, 12690.5], [312.0, 20284.5], [310.0, 20595.0], [305.0, 20604.0], [304.0, 20605.0], [309.0, 20598.0], [308.0, 20601.0], [307.0, 20602.0], [306.0, 20605.0], [323.0, 5664.0], [333.0, 5657.0], [332.0, 19710.333333333332], [329.0, 19711.0], [328.0, 19712.0], [326.0, 5662.0], [324.0, 5662.0], [322.0, 5664.0], [320.0, 5665.0], [351.0, 10329.0], [348.0, 10392.333333333334], [345.0, 19703.0], [344.0, 19704.0], [343.0, 12679.0], [340.0, 5656.0], [339.0, 12681.0], [336.0, 5656.0], [366.0, 5629.0], [367.0, 5625.0], [364.0, 5631.0], [355.0, 5641.0], [354.0, 6503.0], [353.0, 13100.0], [363.0, 19687.0], [362.0, 19687.0], [361.0, 5721.5], [359.0, 19689.0], [358.0, 12665.0], [356.0, 5794.0], [382.0, 6476.0], [383.0, 6474.0], [381.0, 5615.0], [380.0, 6477.0], [379.0, 6479.0], [377.0, 6480.0], [376.0, 5786.0], [375.0, 6128.5], [369.0, 5625.0], [368.0, 6488.0], [371.0, 5622.0], [370.0, 6487.0], [373.0, 5620.0], [372.0, 5620.0], [398.0, 6456.0], [399.0, 5761.0], [396.0, 6462.0], [387.0, 6187.333333333333], [395.0, 6463.0], [394.0, 6465.0], [393.0, 6466.0], [391.0, 5609.0], [390.0, 6471.5], [388.0, 6472.5], [412.0, 6443.0], [414.0, 6440.0], [415.0, 6433.0], [413.0, 6441.0], [410.0, 6442.0], [409.0, 6446.0], [407.0, 6447.0], [400.0, 5758.0], [403.0, 6451.0], [402.0, 6452.0], [406.0, 6439.0], [405.0, 6440.0], [404.0, 6450.0], [428.0, 8481.0], [427.0, 6996.0], [426.0, 5511.0], [425.0, 5510.0], [423.0, 5511.0], [422.0, 5512.0], [419.0, 5512.0], [418.0, 6426.5], [416.0, 6438.0], [446.0, 5498.0], [447.0, 5497.0], [444.0, 5499.5], [435.0, 5508.5], [433.0, 5509.75], [432.0, 11689.0], [442.0, 5501.0], [441.0, 5503.0], [440.0, 5504.0], [438.0, 5505.0], [437.0, 5507.0], [436.0, 8300.0], [451.0, 8283.0], [461.0, 5479.0], [463.0, 6874.0], [460.0, 5485.0], [459.0, 6883.0], [457.0, 6418.333333333333], [454.0, 5490.0], [452.0, 6886.5], [449.0, 5491.0], [448.0, 5494.0], [479.0, 8258.333333333334], [476.0, 5469.0], [475.0, 8261.0], [474.0, 8262.0], [473.0, 8440.0], [471.0, 5471.0], [470.0, 8355.0], [468.0, 8783.0], [464.0, 8270.0], [494.0, 8240.0], [495.0, 8232.0], [493.0, 8239.5], [483.0, 8254.0], [482.0, 5464.0], [481.0, 7477.0], [480.0, 8255.0], [491.0, 8241.0], [490.0, 8242.0], [489.0, 17018.0], [488.0, 8244.0], [487.0, 8246.0], [486.0, 8247.0], [485.0, 8250.0], [484.0, 8433.0], [510.0, 1644.0], [511.0, 1794.0], [509.0, 1644.0], [508.0, 1645.0], [507.0, 1648.0], [506.0, 1648.0], [504.0, 1649.5], [502.0, 1650.0], [499.0, 12704.0], [497.0, 8319.5], [501.0, 16057.0], [500.0, 15859.0], [516.0, 1792.0], [523.0, 14829.0], [512.0, 1641.0], [522.0, 14832.0], [521.0, 1770.0], [520.0, 1782.0], [519.0, 1789.0], [518.0, 1793.0], [517.0, 1640.0], [515.0, 1716.5], [513.0, 1794.0], [757.0, 1728.0], [756.0, 1729.0], [750.0, 1728.6666666666667], [745.0, 1730.0], [744.0, 1729.0], [743.0, 1729.0], [1011.0, 844.9411764705883], [1021.0, 843.0], [1022.0, 4197.5], [1008.0, 846.5390070921987], [1010.0, 844.6122448979588], [1009.0, 844.6060606060607], [1020.0, 1460.681818181818], [1017.0, 845.0], [1016.0, 844.0769230769232], [998.0, 847.0], [1007.0, 845.3333333333334], [1005.0, 845.7692307692307], [1004.0, 846.7368421052631], [1003.0, 846.5999999999999], [1002.0, 846.0], [1015.0, 846.8571428571428], [1014.0, 845.0], [1013.0, 844.8749999999999], [1044.0, 995.0], [1024.0, 843.0], [1028.0, 842.181818181818], [1032.0, 841.5], [1042.0, 841.0], [1038.0, 842.0], [1836.0, 746.0], [1840.0, 753.75], [1828.0, 747.0384615384614], [1838.0, 746.5], [1834.0, 748.0], [1832.0, 748.0], [1918.0, 752.0], [1888.0, 741.9729729729731], [1890.0, 741.9999999999999], [1892.0, 742.3913043478261], [1894.0, 740.3333333333333], [1896.0, 746.0], [1898.0, 740.75], [1900.0, 741.0], [1902.0, 753.0], [1916.0, 752.8], [1914.0, 753.0], [1912.0, 749.3555555555555], [1910.0, 741.0], [1908.0, 747.2162162162163], [1906.0, 746.1304347826089], [1904.0, 745.1506849315072], [1886.0, 742.4], [1884.0, 741.6666666666666], [1882.0, 742.5], [1880.0, 741.3333333333334], [1878.0, 741.8], [1980.0, 381.0], [1976.0, 381.0], [1982.0, 380.5], [1944.0, 746.6666666666666], [1922.0, 752.0], [1924.0, 752.0], [1938.0, 750.0], [1936.0, 752.0], [1934.0, 750.5000000000001], [2044.0, 378.25], [2016.0, 379.5], [2018.0, 378.0], [2020.0, 379.0], [2024.0, 378.0], [2030.0, 377.5], [2042.0, 378.5], [2036.0, 378.25], [2034.0, 380.0], [1992.0, 380.5], [1988.0, 380.3333333333333], [1984.0, 381.5], [2014.0, 379.0], [2012.0, 381.0], [2010.0, 380.0], [2008.0, 380.2], [2006.0, 381.0], [2000.0, 379.75], [2060.0, 375.0], [2048.0, 378.0], [2248.0, 325.1538461538462], [2292.0, 244.0], [2252.0, 231.33333333333334], [2260.0, 234.0], [2244.0, 336.3333333333333], [2556.0, 416.0], [2684.0, 65031.0], [2632.0, 405.0], [2636.0, 405.1600000000001], [2640.0, 405.0], [2652.0, 65201.5], [2680.0, 65033.0], [2676.0, 65039.0], [2672.0, 65044.0], [2668.0, 65048.5], [2664.0, 12526.0], [2660.0, 65192.0], [2656.0, 65196.0], [2576.0, 416.0], [2572.0, 414.00000000000006], [2564.0, 413.6666666666667], [2560.0, 415.4736842105263], [2700.0, 64258.0], [2696.0, 8020.5], [2812.0, 330.6], [2752.0, 470.22222222222223], [2756.0, 351.75], [2760.0, 351.0], [2688.0, 64266.0], [2692.0, 44645.666666666664], [2704.0, 34826.0], [2716.0, 64247.0], [2748.0, 64200.4], [2744.0, 64218.0], [2740.0, 64220.5], [2732.0, 34760.0], [2728.0, 64229.0], [2724.0, 64238.0], [2720.0, 45916.666666666664], [2764.0, 352.0], [2844.0, 329.5384615384616], [2880.0, 327.0], [2884.0, 326.53333333333325], [2900.0, 326.7142857142858], [2904.0, 327.0], [2908.0, 326.5714285714286], [2940.0, 582.2], [2916.0, 2648.3333333333335], [2912.0, 1056.756756756757], [2840.0, 329.18181818181824], [2836.0, 328.5], [2832.0, 328.3333333333333], [2828.0, 327.0], [2816.0, 330.0], [2876.0, 327.125], [2872.0, 327.5], [2868.0, 327.125], [2864.0, 327.3333333333333], [2860.0, 329.0], [2856.0, 328.2727272727273], [2852.0, 328.4444444444445], [2848.0, 328.5714285714286], [2952.0, 581.7647058823528], [2960.0, 1451.735294117647], [3000.0, 2701.507988485719], [2944.0, 582.5263157894738], [2948.0, 581.6666666666666], [2956.0, 580.8125000000001], [2964.0, 1760.8913043478262], [2968.0, 358.17346938775495], [2972.0, 359.3333333333333], [2996.0, 357.0], [2992.0, 357.0], [2988.0, 357.0], [2984.0, 358.2], [2976.0, 358.0], [2049.0, 378.0], [2249.0, 232.72727272727272], [2285.0, 292.5], [2253.0, 398.5], [2245.0, 268.625], [2557.0, 415.5], [2633.0, 405.66666666666663], [2681.0, 65033.0], [2677.0, 65037.0], [2685.0, 64926.0], [2637.0, 405.1111111111111], [2641.0, 404.5], [2649.0, 65208.333333333336], [2653.0, 65201.0], [2673.0, 65043.0], [2661.0, 65192.0], [2657.0, 65195.0], [2565.0, 415.0], [2561.0, 414.0], [2709.0, 34824.5], [2805.0, 329.9285714285714], [2753.0, 354.0], [2809.0, 329.5], [2689.0, 64266.0], [2697.0, 64260.0], [2705.0, 64255.0], [2713.0, 64249.0], [2749.0, 29085.0], [2745.0, 44574.66666666667], [2729.0, 5297.0], [2761.0, 352.6], [2845.0, 329.3], [2913.0, 812.5], [2893.0, 326.3684210526316], [2881.0, 327.4], [2885.0, 325.5], [2889.0, 326.8], [2897.0, 326.5], [2905.0, 326.46666666666664], [2937.0, 583.6666666666667], [2933.0, 620.7619047619052], [2841.0, 329.66666666666663], [2837.0, 328.5454545454545], [2833.0, 328.5], [2829.0, 330.0], [2877.0, 327.1333333333334], [2873.0, 326.72727272727275], [2869.0, 327.4166666666665], [2865.0, 329.0], [2861.0, 328.4], [2857.0, 328.3333333333333], [2853.0, 328.2857142857143], [2849.0, 328.0], [2953.0, 1407.6666666666667], [2949.0, 581.3636363636364], [2989.0, 357.0], [2945.0, 581.5714285714287], [2957.0, 1570.85], [2961.0, 1266.7777777777778], [2965.0, 579.0], [2969.0, 358.81818181818176], [2973.0, 358.0], [2985.0, 357.85714285714283], [2981.0, 358.1111111111111], [2977.0, 356.8], [1027.0, 842.5], [1033.0, 841.5714285714286], [1045.0, 1004.0], [1025.0, 842.3571428571429], [1029.0, 841.5], [1031.0, 841.6], [1043.0, 841.0], [1041.0, 841.0], [1039.0, 893.3333333333334], [1037.0, 841.5], [1827.0, 749.0], [1829.0, 749.0], [1839.0, 749.2222222222222], [1837.0, 745.4285714285714], [1835.0, 746.0], [1833.0, 748.8], [1891.0, 743.0], [1915.0, 751.5789473684212], [1919.0, 751.5], [1889.0, 742.0], [1893.0, 741.0], [1895.0, 745.2307692307693], [1897.0, 743.225], [1901.0, 743.2399999999998], [1903.0, 747.5], [1913.0, 751.5], [1911.0, 748.9375], [1907.0, 748.0769230769231], [1905.0, 745.8333333333334], [1887.0, 743.0], [1885.0, 741.9999999999999], [1881.0, 742.2261904761905], [1879.0, 742.0], [1875.0, 744.0], [1927.0, 752.0], [1983.0, 381.0], [1923.0, 751.6842105263157], [1931.0, 751.8571428571429], [1929.0, 751.3333333333334], [1941.0, 745.3333333333334], [1935.0, 751.0], [2033.0, 379.0], [2041.0, 377.375], [2045.0, 378.0], [2017.0, 378.5], [2019.0, 379.5], [2021.0, 379.0], [2023.0, 379.3333333333333], [2029.0, 380.0], [2037.0, 378.6666666666667], [2035.0, 378.0], [1999.0, 380.5], [1997.0, 381.0], [1993.0, 379.5], [1991.0, 381.0], [1989.0, 380.0], [1987.0, 380.0], [2015.0, 379.3333333333333], [2013.0, 380.5], [2005.0, 379.8], [2001.0, 379.6], [2054.0, 377.5], [2246.0, 286.1379310344828], [2250.0, 290.2], [2286.0, 287.2857142857143], [2278.0, 241.0], [2282.0, 311.75], [2554.0, 417.83606557377044], [2638.0, 405.5740740740741], [2682.0, 65032.0], [2630.0, 407.0], [2634.0, 405.6206896551724], [2642.0, 405.0], [2646.0, 65209.0], [2650.0, 65205.0], [2654.0, 65200.0], [2674.0, 65043.0], [2670.0, 65047.0], [2666.0, 65076.0], [2662.0, 65188.0], [2658.0, 65195.0], [2578.0, 412.42857142857144], [2574.0, 413.62499999999994], [2562.0, 415.5], [2706.0, 5325.0], [2754.0, 354.0], [2758.0, 351.3333333333333], [2806.0, 329.0], [2694.0, 64264.0], [2698.0, 64260.0], [2702.0, 64256.5], [2714.0, 64250.0], [2746.0, 36723.0], [2742.0, 64219.0], [2738.0, 6631.666666666667], [2730.0, 64226.0], [2726.0, 2577.0], [2722.0, 5541.5], [2766.0, 350.0], [2762.0, 352.0], [2934.0, 584.0], [2882.0, 326.75], [2886.0, 327.1428571428571], [2894.0, 326.6666666666667], [2898.0, 327.0], [2902.0, 326.5], [2906.0, 326.75], [2910.0, 20544.500000000007], [2942.0, 582.6], [2938.0, 583.1459854014599], [2914.0, 2838.354166666666], [2846.0, 328.6666666666667], [2842.0, 331.0], [2838.0, 328.75], [2834.0, 329.6666666666667], [2830.0, 329.0], [2826.0, 328.6], [2822.0, 331.0], [2878.0, 327.2857142857143], [2874.0, 327.42857142857144], [2870.0, 327.0], [2866.0, 327.875], [2862.0, 327.5], [2858.0, 327.77777777777777], [2854.0, 328.5], [2850.0, 328.0], [2954.0, 580.9166666666667], [2994.0, 358.0], [2946.0, 581.6969696969696], [2950.0, 581.4999999999999], [2958.0, 1027.8636363636365], [2962.0, 580.1363636363636], [2966.0, 2667.34693877551], [2970.0, 359.0], [2974.0, 358.54545454545456], [2990.0, 356.5], [2982.0, 357.59999999999997], [2059.0, 376.83333333333337], [2051.0, 377.0], [2251.0, 270.25000000000006], [2247.0, 234.0], [2243.0, 343.2105263157895], [2291.0, 283.375], [2283.0, 239.0], [2683.0, 65032.0], [2631.0, 407.0260869565218], [2639.0, 404.9230769230769], [2643.0, 403.83333333333337], [2647.0, 65209.0], [2655.0, 65202.0], [2679.0, 65034.5], [2675.0, 65042.0], [2671.0, 65046.5], [2663.0, 12528.0], [2659.0, 65194.0], [2575.0, 414.5], [2571.0, 414.6], [2567.0, 414.375], [2563.0, 415.75], [2711.0, 64251.0], [2699.0, 64259.0], [2759.0, 351.5], [2763.0, 350.0], [2755.0, 352.88888888888886], [2751.0, 72551.0], [2707.0, 64252.0], [2719.0, 64246.0], [2747.0, 64203.0], [2735.0, 25089.0], [2727.0, 64236.5], [2723.0, 64238.0], [2767.0, 350.83333333333337], [2935.0, 584.5000000000001], [2903.0, 326.3333333333333], [2939.0, 582.625], [2943.0, 582.6666666666666], [2883.0, 327.0], [2887.0, 327.0], [2891.0, 326.5714285714286], [2895.0, 326.25], [2899.0, 326.1538461538462], [2907.0, 326.5555555555556], [2911.0, 2177.066666666666], [2931.0, 1347.3333333333333], [2847.0, 328.0], [2843.0, 329.6], [2839.0, 329.0588235294117], [2835.0, 329.0], [2831.0, 329.0], [2819.0, 330.0], [2875.0, 327.16666666666663], [2871.0, 327.6363636363636], [2867.0, 327.3636363636364], [2863.0, 328.5], [2859.0, 328.2777777777778], [2855.0, 327.85714285714283], [2851.0, 328.6363636363637], [2959.0, 580.3333333333334], [2947.0, 581.7058823529411], [2951.0, 879.1600000000001], [2955.0, 580.7931034482758], [2963.0, 580.0], [2967.0, 358.1904761904761], [2971.0, 358.0], [2975.0, 357.90909090909093], [2995.0, 357.4], [2991.0, 357.0], [2987.0, 357.8], [2983.0, 358.0], [2979.0, 357.83333333333337]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[2980.593223379272, 2714.50455047533]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 3000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 142.8, "minX": 1.68286206E12, "maxY": 599138.5, "series": [{"data": [[1.68286206E12, 87812.71666666666], [1.68286236E12, 415482.3], [1.68286218E12, 497676.13333333336], [1.6828623E12, 420393.9], [1.68286212E12, 531449.2333333333], [1.68286242E12, 178.31666666666666], [1.68286224E12, 599138.5]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.68286206E12, 61698.0], [1.68286236E12, 292168.8], [1.68286218E12, 346466.4], [1.6828623E12, 293638.8], [1.68286212E12, 365811.6], [1.68286242E12, 142.8], [1.68286224E12, 413658.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68286242E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 724.4627637848886, "minX": 1.68286206E12, "maxY": 66386.0, "series": [{"data": [[1.68286206E12, 724.4627637848886], [1.68286236E12, 2806.757952814739], [1.68286218E12, 2341.182156673119], [1.6828623E12, 2411.8733721727313], [1.68286212E12, 1737.1361727380688], [1.68286242E12, 66386.0], [1.68286224E12, 4314.240418611219]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68286242E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 724.2261402314514, "minX": 1.68286206E12, "maxY": 66386.0, "series": [{"data": [[1.68286206E12, 724.2261402314514], [1.68286236E12, 2743.9802005804368], [1.68286218E12, 2157.4007495164265], [1.6828623E12, 2242.308887365751], [1.68286212E12, 1574.5986715968231], [1.68286242E12, 66386.0], [1.68286224E12, 3911.6369678969713]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68286242E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 94.22001361470402, "minX": 1.68286206E12, "maxY": 2130.3932763601774, "series": [{"data": [[1.68286206E12, 94.22001361470402], [1.68286236E12, 761.7313715911431], [1.68286218E12, 739.352877176017], [1.6828623E12, 716.810800776789], [1.68286212E12, 123.27198027937541], [1.68286242E12, 1009.6470588235294], [1.68286224E12, 2130.3932763601774]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68286242E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 5.0, "minX": 1.68286206E12, "maxY": 257136.0, "series": [{"data": [[1.68286206E12, 15404.0], [1.68286236E12, 257136.0], [1.68286218E12, 133215.0], [1.6828623E12, 250660.0], [1.68286212E12, 75085.0], [1.68286242E12, 66390.0], [1.68286224E12, 177331.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.68286206E12, 374.0], [1.68286236E12, 984.0], [1.68286218E12, 10527.0], [1.6828623E12, 3102.3000000000975], [1.68286212E12, 517.0], [1.68286242E12, 66390.0], [1.68286224E12, 933.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.68286206E12, 11383.0], [1.68286236E12, 13618.150000000776], [1.68286218E12, 66334.98000000001], [1.6828623E12, 67617.0], [1.68286212E12, 57420.46000000137], [1.68286242E12, 66390.0], [1.68286224E12, 16012.990000000002]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.68286206E12, 3212.7], [1.68286236E12, 4267.9000000000015], [1.68286218E12, 13934.25000000004], [1.6828623E12, 10284.0], [1.68286212E12, 765.0], [1.68286242E12, 66390.0], [1.68286224E12, 1029.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.68286206E12, 15.0], [1.68286236E12, 22.0], [1.68286218E12, 7.0], [1.6828623E12, 15.0], [1.68286212E12, 5.0], [1.68286242E12, 66377.0], [1.68286224E12, 8.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.68286206E12, 278.0], [1.68286236E12, 397.0], [1.68286218E12, 254.0], [1.6828623E12, 427.0], [1.68286212E12, 380.0], [1.68286242E12, 66389.0], [1.68286224E12, 419.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68286242E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 25.0, "minX": 2.0, "maxY": 143447.0, "series": [{"data": [[2.0, 15958.0], [3.0, 22351.5], [4.0, 39854.0], [5.0, 11551.0], [6.0, 41622.5], [7.0, 10795.0], [8.0, 2139.0], [9.0, 3293.0], [11.0, 9129.0], [14.0, 14105.5], [15.0, 11087.0], [16.0, 72518.0], [17.0, 66389.0], [18.0, 18320.5], [22.0, 1759.5], [23.0, 1156.0], [25.0, 25.0], [27.0, 6802.0], [28.0, 11727.0], [31.0, 70430.0], [32.0, 143387.0], [43.0, 8644.0], [45.0, 52.0], [47.0, 90.0], [66.0, 40245.0], [73.0, 100725.0], [75.0, 64221.0], [81.0, 5498.5], [91.0, 84.0], [90.0, 309.0], [94.0, 9275.5], [106.0, 6446.0], [110.0, 11837.0], [112.0, 9467.0], [122.0, 69477.0], [131.0, 11379.0], [137.0, 93.0], [148.0, 255.5], [158.0, 121.0], [175.0, 102.0], [169.0, 9223.0], [179.0, 150.0], [193.0, 231.0], [204.0, 39262.0], [200.0, 144.0], [217.0, 6371.5], [231.0, 10386.0], [225.0, 8982.0], [238.0, 6696.0], [251.0, 217.0], [271.0, 166.0], [277.0, 240.0], [323.0, 159.0], [328.0, 9261.0], [334.0, 8166.0], [336.0, 194.0], [356.0, 198.0], [387.0, 413.0], [390.0, 281.0], [389.0, 318.0], [410.0, 417.0], [421.0, 164.0], [420.0, 11681.0], [438.0, 361.0], [476.0, 275.0], [464.0, 505.0], [484.0, 9296.0], [502.0, 320.0], [508.0, 384.0], [498.0, 376.0], [509.0, 305.0], [534.0, 372.0], [536.0, 344.0], [537.0, 12212.0], [528.0, 100093.0], [521.0, 354.0], [548.0, 315.0], [553.0, 395.0], [566.0, 360.0], [559.0, 434.0], [547.0, 11267.0], [544.0, 845.0], [571.0, 342.0], [557.0, 330.0], [568.0, 368.0], [565.0, 428.0], [588.0, 152.0], [606.0, 495.0], [599.0, 385.0], [584.0, 401.0], [614.0, 362.0], [639.0, 393.0], [609.0, 346.0], [616.0, 415.0], [625.0, 407.0], [642.0, 375.0], [660.0, 249.0], [655.0, 402.0], [663.0, 269.0], [665.0, 298.0], [656.0, 151.0], [670.0, 329.0], [653.0, 355.0], [702.0, 379.0], [693.0, 12849.0], [698.0, 302.0], [695.0, 389.0], [694.0, 352.0], [682.0, 341.0], [686.0, 234.0], [700.0, 306.0], [699.0, 369.0], [701.0, 534.0], [679.0, 363.5], [678.0, 394.0], [677.0, 367.0], [689.0, 379.0], [703.0, 347.0], [691.0, 377.0], [708.0, 278.0], [720.0, 271.5], [704.0, 304.0], [716.0, 405.0], [713.0, 401.0], [722.0, 438.0], [709.0, 339.0], [730.0, 341.0], [732.0, 366.0], [706.0, 375.0], [755.0, 447.0], [767.0, 363.0], [740.0, 204.0], [737.0, 362.0], [739.0, 373.0], [769.0, 378.0], [794.0, 388.0], [770.0, 295.0], [792.0, 391.0], [772.0, 488.0], [776.0, 343.0], [804.0, 311.0], [812.0, 401.0], [816.0, 320.0], [807.0, 380.0], [860.0, 348.0], [847.0, 317.0], [859.0, 730.0], [837.0, 370.0], [835.0, 158.0], [877.0, 392.0], [883.0, 208.0], [869.0, 178.0], [879.0, 388.0], [906.0, 443.0], [949.0, 280.0], [982.0, 287.0], [988.0, 532.0], [983.0, 393.0], [994.0, 361.0], [1011.0, 192.0], [1019.0, 559.0], [1015.0, 742.0], [1084.0, 149.0], [1056.0, 368.0], [1091.0, 162.0], [1104.0, 734.0], [1163.0, 279.0], [1168.0, 370.0], [1157.0, 307.0], [1173.0, 367.0], [1195.0, 378.0], [1183.0, 432.0], [1271.0, 259.0], [1257.0, 565.0], [1243.0, 390.0], [1234.0, 235.0], [1219.0, 216.0], [1249.0, 367.0], [1254.0, 358.0], [1313.0, 381.0], [1327.0, 310.0], [1281.0, 568.0], [1335.0, 393.0], [1320.0, 383.0], [1332.0, 504.0], [1336.0, 358.0], [1386.0, 277.0], [1402.0, 368.0], [1400.0, 278.0], [1404.0, 701.0], [1366.0, 352.0], [1360.0, 311.0], [1385.0, 646.0], [1408.0, 274.0], [1432.0, 454.5], [1414.0, 361.0], [1418.0, 502.0], [1466.0, 265.0], [1440.0, 468.0], [1430.0, 258.0], [1428.0, 551.0], [1438.0, 633.0], [1457.0, 503.0], [1439.0, 532.0], [1409.0, 362.0], [1527.0, 290.0], [1503.0, 646.0], [1474.0, 667.0], [1569.0, 277.0], [1554.0, 580.0], [1709.0, 366.0], [1758.0, 371.0], [1750.0, 339.0], [1739.0, 397.0], [1789.0, 738.0], [1837.0, 296.0], [1795.0, 134.0], [1833.0, 158.0], [1806.0, 943.0], [1798.0, 809.0], [1796.0, 778.0], [1846.0, 511.0], [1862.0, 395.0], [1946.0, 341.0], [1977.0, 390.0], [1942.0, 493.0], [1987.0, 406.0], [2044.0, 417.0], [2175.0, 398.0], [2094.0, 334.0], [2146.0, 706.0], [2091.0, 375.0], [2130.0, 969.0], [2115.0, 673.0], [2744.0, 624.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2.0, 67725.5], [32.0, 143379.0], [528.0, 14358.0], [599.0, 26053.0], [689.0, 58842.0], [677.0, 116411.5], [716.0, 70787.0], [767.0, 21315.0], [807.0, 101553.5], [877.0, 22456.5], [1168.0, 35917.5], [1195.0, 65847.0], [1243.0, 68692.0], [1281.0, 22982.0], [1360.0, 93538.0], [1408.0, 63940.0], [1414.0, 4405.0], [1466.0, 98820.5], [110.0, 143447.0], [1837.0, 18630.0], [1833.0, 134957.0], [1987.0, 63919.5], [2094.0, 78627.0], [2130.0, 105614.0], [175.0, 24761.0], [179.0, 32508.0], [225.0, 101144.0], [271.0, 18447.0], [277.0, 27568.0], [420.0, 130108.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 2744.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 2.0, "maxY": 143387.0, "series": [{"data": [[2.0, 15958.0], [3.0, 22351.5], [4.0, 39854.0], [5.0, 11551.0], [6.0, 41622.5], [7.0, 10795.0], [8.0, 2139.0], [9.0, 3293.0], [11.0, 9129.0], [14.0, 14105.5], [15.0, 11087.0], [16.0, 72518.0], [17.0, 66389.0], [18.0, 18320.5], [22.0, 1759.5], [23.0, 1156.0], [25.0, 25.0], [27.0, 6802.0], [28.0, 11727.0], [31.0, 70430.0], [32.0, 143387.0], [43.0, 8644.0], [45.0, 52.0], [47.0, 90.0], [66.0, 40245.0], [73.0, 100725.0], [75.0, 64221.0], [81.0, 5498.5], [91.0, 84.0], [90.0, 309.0], [94.0, 9275.5], [106.0, 6446.0], [110.0, 11837.0], [112.0, 9467.0], [122.0, 69477.0], [131.0, 11379.0], [137.0, 93.0], [148.0, 255.5], [158.0, 121.0], [175.0, 102.0], [169.0, 9223.0], [179.0, 150.0], [193.0, 231.0], [204.0, 39262.0], [200.0, 144.0], [217.0, 6371.5], [231.0, 10386.0], [225.0, 8982.0], [238.0, 6696.0], [251.0, 217.0], [271.0, 166.0], [277.0, 240.0], [323.0, 159.0], [328.0, 9261.0], [334.0, 8166.0], [336.0, 194.0], [356.0, 198.0], [387.0, 413.0], [390.0, 281.0], [389.0, 318.0], [410.0, 417.0], [421.0, 164.0], [420.0, 11681.0], [438.0, 361.0], [476.0, 275.0], [464.0, 505.0], [484.0, 9296.0], [502.0, 320.0], [508.0, 384.0], [498.0, 376.0], [509.0, 305.0], [534.0, 372.0], [536.0, 344.0], [537.0, 12212.0], [528.0, 100093.0], [521.0, 354.0], [548.0, 315.0], [553.0, 395.0], [566.0, 359.0], [559.0, 434.0], [547.0, 11267.0], [544.0, 845.0], [571.0, 342.0], [557.0, 330.0], [568.0, 368.0], [565.0, 428.0], [588.0, 152.0], [606.0, 495.0], [599.0, 385.0], [584.0, 401.0], [614.0, 362.0], [639.0, 393.0], [609.0, 346.0], [616.0, 415.0], [625.0, 407.0], [642.0, 375.0], [660.0, 249.0], [655.0, 402.0], [663.0, 269.0], [665.0, 298.0], [656.0, 151.0], [670.0, 329.0], [653.0, 355.0], [702.0, 379.0], [693.0, 12849.0], [698.0, 302.0], [695.0, 389.0], [694.0, 352.0], [682.0, 341.0], [686.0, 234.0], [700.0, 306.0], [699.0, 369.0], [701.0, 534.0], [679.0, 363.5], [678.0, 394.0], [677.0, 367.0], [689.0, 379.0], [703.0, 347.0], [691.0, 377.0], [708.0, 278.0], [720.0, 271.5], [704.0, 304.0], [716.0, 405.0], [713.0, 401.0], [722.0, 438.0], [709.0, 339.0], [730.0, 341.0], [732.0, 366.0], [706.0, 375.0], [755.0, 447.0], [767.0, 363.0], [740.0, 204.0], [737.0, 362.0], [739.0, 373.0], [769.0, 378.0], [794.0, 388.0], [770.0, 295.0], [792.0, 391.0], [772.0, 488.0], [776.0, 343.0], [804.0, 311.0], [812.0, 401.0], [816.0, 320.0], [807.0, 380.0], [860.0, 348.0], [847.0, 317.0], [859.0, 730.0], [837.0, 370.0], [835.0, 158.0], [877.0, 392.0], [883.0, 208.0], [869.0, 178.0], [879.0, 388.0], [906.0, 443.0], [949.0, 280.0], [982.0, 287.0], [988.0, 532.0], [983.0, 393.0], [994.0, 361.0], [1011.0, 192.0], [1019.0, 559.0], [1015.0, 742.0], [1084.0, 149.0], [1056.0, 368.0], [1091.0, 162.0], [1104.0, 734.0], [1163.0, 279.0], [1168.0, 370.0], [1157.0, 307.0], [1173.0, 367.0], [1195.0, 378.0], [1183.0, 432.0], [1271.0, 259.0], [1257.0, 565.0], [1243.0, 390.0], [1234.0, 235.0], [1219.0, 216.0], [1249.0, 367.0], [1254.0, 358.0], [1313.0, 381.0], [1327.0, 310.0], [1281.0, 568.0], [1335.0, 393.0], [1320.0, 383.0], [1332.0, 504.0], [1336.0, 358.0], [1386.0, 277.0], [1402.0, 368.0], [1400.0, 278.0], [1404.0, 701.0], [1366.0, 352.0], [1360.0, 311.0], [1385.0, 646.0], [1408.0, 274.0], [1432.0, 454.5], [1414.0, 361.0], [1418.0, 502.0], [1466.0, 265.0], [1440.0, 468.0], [1430.0, 258.0], [1428.0, 551.0], [1438.0, 633.0], [1457.0, 503.0], [1439.0, 532.0], [1409.0, 362.0], [1527.0, 290.0], [1503.0, 646.0], [1474.0, 667.0], [1569.0, 277.0], [1554.0, 580.0], [1709.0, 366.0], [1758.0, 371.0], [1750.0, 339.0], [1739.0, 397.0], [1789.0, 738.0], [1837.0, 296.0], [1795.0, 134.0], [1833.0, 158.0], [1806.0, 943.0], [1798.0, 809.0], [1796.0, 778.0], [1846.0, 511.0], [1862.0, 395.0], [1946.0, 341.0], [1977.0, 390.0], [1942.0, 493.0], [1987.0, 406.0], [2044.0, 417.0], [2175.0, 398.0], [2094.0, 334.0], [2146.0, 706.0], [2091.0, 375.0], [2130.0, 969.0], [2115.0, 673.0], [2744.0, 624.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2.0, 0.0], [32.0, 0.0], [528.0, 0.0], [599.0, 0.0], [689.0, 0.0], [677.0, 0.0], [716.0, 0.0], [767.0, 0.0], [807.0, 0.0], [877.0, 0.0], [1168.0, 0.0], [1195.0, 0.0], [1243.0, 0.0], [1281.0, 0.0], [1360.0, 0.0], [1408.0, 0.0], [1414.0, 0.0], [1466.0, 0.0], [110.0, 0.0], [1837.0, 0.0], [1833.0, 0.0], [1987.0, 0.0], [2094.0, 0.0], [2130.0, 0.0], [175.0, 0.0], [179.0, 0.0], [225.0, 0.0], [271.0, 0.0], [277.0, 0.0], [420.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 2744.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 163.33333333333334, "minX": 1.68286206E12, "maxY": 830.2333333333333, "series": [{"data": [[1.68286206E12, 163.33333333333334], [1.68286236E12, 555.7666666666667], [1.68286218E12, 700.0], [1.6828623E12, 558.1], [1.68286212E12, 723.3333333333334], [1.68286224E12, 830.2333333333333]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68286236E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.2833333333333333, "minX": 1.68286206E12, "maxY": 820.75, "series": [{"data": [[1.68286206E12, 122.41666666666667], [1.68286236E12, 579.7], [1.68286218E12, 687.4333333333333], [1.6828623E12, 582.6166666666667], [1.68286212E12, 725.8166666666667], [1.68286242E12, 0.2833333333333333], [1.68286224E12, 820.75]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.68286236E12, 0.2833333333333333], [1.68286218E12, 1.9], [1.6828623E12, 0.9833333333333333], [1.68286212E12, 4.383333333333334], [1.68286224E12, 4.2]], "isOverall": false, "label": "Non HTTP response code: java.net.SocketException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68286242E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.2833333333333333, "minX": 1.68286206E12, "maxY": 820.75, "series": [{"data": [[1.68286206E12, 122.41666666666667], [1.68286236E12, 579.7], [1.68286218E12, 687.4333333333333], [1.6828623E12, 582.6166666666667], [1.68286212E12, 725.8166666666667], [1.68286242E12, 0.2833333333333333], [1.68286224E12, 820.75]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.68286236E12, 0.2833333333333333], [1.68286218E12, 1.9], [1.6828623E12, 0.9833333333333333], [1.68286212E12, 4.383333333333334], [1.68286224E12, 4.2]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68286242E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.2833333333333333, "minX": 1.68286206E12, "maxY": 820.75, "series": [{"data": [[1.68286206E12, 122.41666666666667], [1.68286236E12, 579.7], [1.68286218E12, 687.4333333333333], [1.6828623E12, 582.6166666666667], [1.68286212E12, 725.8166666666667], [1.68286242E12, 0.2833333333333333], [1.68286224E12, 820.75]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.68286236E12, 0.2833333333333333], [1.68286218E12, 1.9], [1.6828623E12, 0.9833333333333333], [1.68286212E12, 4.383333333333334], [1.68286224E12, 4.2]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68286242E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

