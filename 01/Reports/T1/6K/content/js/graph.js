/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 6.0, "minX": 0.0, "maxY": 211067.0, "series": [{"data": [[0.0, 6.0], [0.1, 18.0], [0.2, 20.0], [0.3, 23.0], [0.4, 24.0], [0.5, 25.0], [0.6, 26.0], [0.7, 27.0], [0.8, 29.0], [0.9, 30.0], [1.0, 31.0], [1.1, 32.0], [1.2, 33.0], [1.3, 34.0], [1.4, 35.0], [1.5, 36.0], [1.6, 37.0], [1.7, 38.0], [1.8, 39.0], [1.9, 40.0], [2.0, 41.0], [2.1, 42.0], [2.2, 42.0], [2.3, 44.0], [2.4, 45.0], [2.5, 45.0], [2.6, 46.0], [2.7, 47.0], [2.8, 48.0], [2.9, 49.0], [3.0, 50.0], [3.1, 52.0], [3.2, 52.0], [3.3, 53.0], [3.4, 54.0], [3.5, 56.0], [3.6, 57.0], [3.7, 58.0], [3.8, 59.0], [3.9, 60.0], [4.0, 62.0], [4.1, 63.0], [4.2, 63.0], [4.3, 64.0], [4.4, 66.0], [4.5, 68.0], [4.6, 69.0], [4.7, 70.0], [4.8, 70.0], [4.9, 72.0], [5.0, 73.0], [5.1, 74.0], [5.2, 76.0], [5.3, 78.0], [5.4, 79.0], [5.5, 80.0], [5.6, 81.0], [5.7, 82.0], [5.8, 83.0], [5.9, 84.0], [6.0, 85.0], [6.1, 86.0], [6.2, 86.0], [6.3, 87.0], [6.4, 88.0], [6.5, 89.0], [6.6, 89.0], [6.7, 90.0], [6.8, 91.0], [6.9, 92.0], [7.0, 93.0], [7.1, 94.0], [7.2, 95.0], [7.3, 96.0], [7.4, 97.0], [7.5, 97.0], [7.6, 98.0], [7.7, 98.0], [7.8, 99.0], [7.9, 100.0], [8.0, 100.0], [8.1, 101.0], [8.2, 101.0], [8.3, 102.0], [8.4, 102.0], [8.5, 103.0], [8.6, 103.0], [8.7, 104.0], [8.8, 104.0], [8.9, 105.0], [9.0, 105.0], [9.1, 106.0], [9.2, 106.0], [9.3, 107.0], [9.4, 107.0], [9.5, 108.0], [9.6, 108.0], [9.7, 109.0], [9.8, 110.0], [9.9, 111.0], [10.0, 111.0], [10.1, 112.0], [10.2, 112.0], [10.3, 113.0], [10.4, 113.0], [10.5, 114.0], [10.6, 114.0], [10.7, 115.0], [10.8, 116.0], [10.9, 117.0], [11.0, 117.0], [11.1, 118.0], [11.2, 119.0], [11.3, 119.0], [11.4, 120.0], [11.5, 121.0], [11.6, 122.0], [11.7, 122.0], [11.8, 123.0], [11.9, 123.0], [12.0, 124.0], [12.1, 124.0], [12.2, 125.0], [12.3, 126.0], [12.4, 126.0], [12.5, 127.0], [12.6, 127.0], [12.7, 128.0], [12.8, 129.0], [12.9, 130.0], [13.0, 131.0], [13.1, 132.0], [13.2, 132.0], [13.3, 133.0], [13.4, 134.0], [13.5, 135.0], [13.6, 137.0], [13.7, 138.0], [13.8, 138.0], [13.9, 139.0], [14.0, 140.0], [14.1, 141.0], [14.2, 142.0], [14.3, 143.0], [14.4, 144.0], [14.5, 145.0], [14.6, 145.0], [14.7, 146.0], [14.8, 147.0], [14.9, 147.0], [15.0, 148.0], [15.1, 148.0], [15.2, 149.0], [15.3, 150.0], [15.4, 151.0], [15.5, 152.0], [15.6, 153.0], [15.7, 154.0], [15.8, 155.0], [15.9, 156.0], [16.0, 157.0], [16.1, 158.0], [16.2, 159.0], [16.3, 160.0], [16.4, 161.0], [16.5, 163.0], [16.6, 164.0], [16.7, 165.0], [16.8, 166.0], [16.9, 168.0], [17.0, 171.0], [17.1, 172.0], [17.2, 173.0], [17.3, 175.0], [17.4, 176.0], [17.5, 176.0], [17.6, 177.0], [17.7, 178.0], [17.8, 178.0], [17.9, 179.0], [18.0, 180.0], [18.1, 181.0], [18.2, 182.0], [18.3, 184.0], [18.4, 185.0], [18.5, 186.0], [18.6, 187.0], [18.7, 188.0], [18.8, 189.0], [18.9, 190.0], [19.0, 191.0], [19.1, 192.0], [19.2, 193.0], [19.3, 194.0], [19.4, 196.0], [19.5, 197.0], [19.6, 199.0], [19.7, 200.0], [19.8, 201.0], [19.9, 201.0], [20.0, 202.0], [20.1, 203.0], [20.2, 204.0], [20.3, 205.0], [20.4, 207.0], [20.5, 208.0], [20.6, 209.0], [20.7, 210.0], [20.8, 210.0], [20.9, 211.0], [21.0, 212.0], [21.1, 212.0], [21.2, 213.0], [21.3, 216.0], [21.4, 218.0], [21.5, 219.0], [21.6, 220.0], [21.7, 220.0], [21.8, 221.0], [21.9, 222.0], [22.0, 223.0], [22.1, 224.0], [22.2, 225.0], [22.3, 226.0], [22.4, 228.0], [22.5, 229.0], [22.6, 230.0], [22.7, 231.0], [22.8, 232.0], [22.9, 234.0], [23.0, 235.0], [23.1, 236.0], [23.2, 236.0], [23.3, 237.0], [23.4, 238.0], [23.5, 238.0], [23.6, 239.0], [23.7, 239.0], [23.8, 239.0], [23.9, 240.0], [24.0, 241.0], [24.1, 242.0], [24.2, 242.0], [24.3, 243.0], [24.4, 243.0], [24.5, 243.0], [24.6, 244.0], [24.7, 244.0], [24.8, 245.0], [24.9, 246.0], [25.0, 246.0], [25.1, 247.0], [25.2, 247.0], [25.3, 247.0], [25.4, 248.0], [25.5, 248.0], [25.6, 249.0], [25.7, 250.0], [25.8, 251.0], [25.9, 252.0], [26.0, 253.0], [26.1, 254.0], [26.2, 256.0], [26.3, 257.0], [26.4, 258.0], [26.5, 259.0], [26.6, 261.0], [26.7, 262.0], [26.8, 262.0], [26.9, 263.0], [27.0, 263.0], [27.1, 264.0], [27.2, 264.0], [27.3, 265.0], [27.4, 265.0], [27.5, 265.0], [27.6, 265.0], [27.7, 266.0], [27.8, 266.0], [27.9, 266.0], [28.0, 267.0], [28.1, 267.0], [28.2, 267.0], [28.3, 267.0], [28.4, 268.0], [28.5, 268.0], [28.6, 268.0], [28.7, 269.0], [28.8, 269.0], [28.9, 270.0], [29.0, 271.0], [29.1, 271.0], [29.2, 272.0], [29.3, 272.0], [29.4, 273.0], [29.5, 273.0], [29.6, 273.0], [29.7, 273.0], [29.8, 274.0], [29.9, 274.0], [30.0, 275.0], [30.1, 275.0], [30.2, 275.0], [30.3, 276.0], [30.4, 276.0], [30.5, 276.0], [30.6, 276.0], [30.7, 277.0], [30.8, 277.0], [30.9, 277.0], [31.0, 278.0], [31.1, 278.0], [31.2, 278.0], [31.3, 279.0], [31.4, 279.0], [31.5, 279.0], [31.6, 280.0], [31.7, 280.0], [31.8, 280.0], [31.9, 281.0], [32.0, 281.0], [32.1, 281.0], [32.2, 282.0], [32.3, 282.0], [32.4, 282.0], [32.5, 283.0], [32.6, 283.0], [32.7, 283.0], [32.8, 284.0], [32.9, 284.0], [33.0, 284.0], [33.1, 285.0], [33.2, 285.0], [33.3, 285.0], [33.4, 285.0], [33.5, 286.0], [33.6, 286.0], [33.7, 287.0], [33.8, 287.0], [33.9, 288.0], [34.0, 288.0], [34.1, 288.0], [34.2, 289.0], [34.3, 289.0], [34.4, 289.0], [34.5, 289.0], [34.6, 289.0], [34.7, 290.0], [34.8, 290.0], [34.9, 290.0], [35.0, 290.0], [35.1, 291.0], [35.2, 291.0], [35.3, 291.0], [35.4, 292.0], [35.5, 292.0], [35.6, 292.0], [35.7, 292.0], [35.8, 293.0], [35.9, 293.0], [36.0, 293.0], [36.1, 293.0], [36.2, 294.0], [36.3, 294.0], [36.4, 294.0], [36.5, 295.0], [36.6, 295.0], [36.7, 295.0], [36.8, 295.0], [36.9, 296.0], [37.0, 296.0], [37.1, 296.0], [37.2, 297.0], [37.3, 297.0], [37.4, 297.0], [37.5, 297.0], [37.6, 298.0], [37.7, 298.0], [37.8, 298.0], [37.9, 298.0], [38.0, 298.0], [38.1, 299.0], [38.2, 299.0], [38.3, 299.0], [38.4, 299.0], [38.5, 299.0], [38.6, 300.0], [38.7, 300.0], [38.8, 300.0], [38.9, 300.0], [39.0, 301.0], [39.1, 301.0], [39.2, 301.0], [39.3, 301.0], [39.4, 301.0], [39.5, 302.0], [39.6, 302.0], [39.7, 302.0], [39.8, 302.0], [39.9, 302.0], [40.0, 302.0], [40.1, 303.0], [40.2, 303.0], [40.3, 303.0], [40.4, 303.0], [40.5, 303.0], [40.6, 303.0], [40.7, 303.0], [40.8, 304.0], [40.9, 304.0], [41.0, 304.0], [41.1, 304.0], [41.2, 304.0], [41.3, 304.0], [41.4, 305.0], [41.5, 305.0], [41.6, 305.0], [41.7, 305.0], [41.8, 305.0], [41.9, 305.0], [42.0, 305.0], [42.1, 306.0], [42.2, 306.0], [42.3, 306.0], [42.4, 306.0], [42.5, 306.0], [42.6, 306.0], [42.7, 307.0], [42.8, 307.0], [42.9, 307.0], [43.0, 307.0], [43.1, 307.0], [43.2, 307.0], [43.3, 308.0], [43.4, 308.0], [43.5, 308.0], [43.6, 308.0], [43.7, 308.0], [43.8, 308.0], [43.9, 308.0], [44.0, 309.0], [44.1, 309.0], [44.2, 309.0], [44.3, 309.0], [44.4, 309.0], [44.5, 309.0], [44.6, 309.0], [44.7, 310.0], [44.8, 310.0], [44.9, 310.0], [45.0, 310.0], [45.1, 310.0], [45.2, 310.0], [45.3, 310.0], [45.4, 311.0], [45.5, 311.0], [45.6, 311.0], [45.7, 311.0], [45.8, 312.0], [45.9, 312.0], [46.0, 312.0], [46.1, 312.0], [46.2, 313.0], [46.3, 313.0], [46.4, 313.0], [46.5, 313.0], [46.6, 313.0], [46.7, 314.0], [46.8, 314.0], [46.9, 314.0], [47.0, 314.0], [47.1, 314.0], [47.2, 314.0], [47.3, 314.0], [47.4, 315.0], [47.5, 315.0], [47.6, 315.0], [47.7, 315.0], [47.8, 315.0], [47.9, 315.0], [48.0, 315.0], [48.1, 315.0], [48.2, 316.0], [48.3, 316.0], [48.4, 316.0], [48.5, 316.0], [48.6, 316.0], [48.7, 316.0], [48.8, 316.0], [48.9, 317.0], [49.0, 317.0], [49.1, 317.0], [49.2, 317.0], [49.3, 317.0], [49.4, 318.0], [49.5, 318.0], [49.6, 318.0], [49.7, 318.0], [49.8, 318.0], [49.9, 319.0], [50.0, 319.0], [50.1, 319.0], [50.2, 319.0], [50.3, 319.0], [50.4, 319.0], [50.5, 319.0], [50.6, 320.0], [50.7, 320.0], [50.8, 320.0], [50.9, 320.0], [51.0, 320.0], [51.1, 320.0], [51.2, 321.0], [51.3, 321.0], [51.4, 321.0], [51.5, 321.0], [51.6, 321.0], [51.7, 322.0], [51.8, 322.0], [51.9, 322.0], [52.0, 322.0], [52.1, 323.0], [52.2, 323.0], [52.3, 323.0], [52.4, 323.0], [52.5, 324.0], [52.6, 324.0], [52.7, 324.0], [52.8, 324.0], [52.9, 325.0], [53.0, 325.0], [53.1, 325.0], [53.2, 325.0], [53.3, 326.0], [53.4, 326.0], [53.5, 326.0], [53.6, 326.0], [53.7, 326.0], [53.8, 327.0], [53.9, 327.0], [54.0, 327.0], [54.1, 327.0], [54.2, 327.0], [54.3, 328.0], [54.4, 328.0], [54.5, 328.0], [54.6, 328.0], [54.7, 328.0], [54.8, 328.0], [54.9, 328.0], [55.0, 329.0], [55.1, 329.0], [55.2, 329.0], [55.3, 329.0], [55.4, 329.0], [55.5, 329.0], [55.6, 329.0], [55.7, 329.0], [55.8, 329.0], [55.9, 329.0], [56.0, 330.0], [56.1, 330.0], [56.2, 330.0], [56.3, 330.0], [56.4, 330.0], [56.5, 330.0], [56.6, 330.0], [56.7, 330.0], [56.8, 330.0], [56.9, 331.0], [57.0, 331.0], [57.1, 331.0], [57.2, 331.0], [57.3, 331.0], [57.4, 331.0], [57.5, 331.0], [57.6, 332.0], [57.7, 332.0], [57.8, 332.0], [57.9, 332.0], [58.0, 332.0], [58.1, 333.0], [58.2, 333.0], [58.3, 333.0], [58.4, 333.0], [58.5, 333.0], [58.6, 333.0], [58.7, 334.0], [58.8, 334.0], [58.9, 334.0], [59.0, 334.0], [59.1, 334.0], [59.2, 335.0], [59.3, 335.0], [59.4, 335.0], [59.5, 335.0], [59.6, 336.0], [59.7, 336.0], [59.8, 336.0], [59.9, 336.0], [60.0, 337.0], [60.1, 337.0], [60.2, 337.0], [60.3, 337.0], [60.4, 337.0], [60.5, 337.0], [60.6, 337.0], [60.7, 337.0], [60.8, 338.0], [60.9, 338.0], [61.0, 338.0], [61.1, 338.0], [61.2, 338.0], [61.3, 338.0], [61.4, 338.0], [61.5, 338.0], [61.6, 339.0], [61.7, 339.0], [61.8, 339.0], [61.9, 339.0], [62.0, 339.0], [62.1, 339.0], [62.2, 339.0], [62.3, 340.0], [62.4, 340.0], [62.5, 340.0], [62.6, 340.0], [62.7, 340.0], [62.8, 340.0], [62.9, 341.0], [63.0, 341.0], [63.1, 341.0], [63.2, 341.0], [63.3, 341.0], [63.4, 342.0], [63.5, 342.0], [63.6, 342.0], [63.7, 342.0], [63.8, 343.0], [63.9, 343.0], [64.0, 343.0], [64.1, 343.0], [64.2, 344.0], [64.3, 344.0], [64.4, 344.0], [64.5, 344.0], [64.6, 344.0], [64.7, 345.0], [64.8, 345.0], [64.9, 345.0], [65.0, 345.0], [65.1, 346.0], [65.2, 346.0], [65.3, 346.0], [65.4, 346.0], [65.5, 347.0], [65.6, 347.0], [65.7, 347.0], [65.8, 347.0], [65.9, 348.0], [66.0, 348.0], [66.1, 348.0], [66.2, 348.0], [66.3, 349.0], [66.4, 349.0], [66.5, 349.0], [66.6, 349.0], [66.7, 350.0], [66.8, 350.0], [66.9, 350.0], [67.0, 350.0], [67.1, 350.0], [67.2, 351.0], [67.3, 351.0], [67.4, 351.0], [67.5, 351.0], [67.6, 351.0], [67.7, 352.0], [67.8, 352.0], [67.9, 352.0], [68.0, 352.0], [68.1, 352.0], [68.2, 352.0], [68.3, 353.0], [68.4, 353.0], [68.5, 353.0], [68.6, 353.0], [68.7, 353.0], [68.8, 353.0], [68.9, 353.0], [69.0, 354.0], [69.1, 354.0], [69.2, 354.0], [69.3, 354.0], [69.4, 354.0], [69.5, 355.0], [69.6, 355.0], [69.7, 355.0], [69.8, 356.0], [69.9, 356.0], [70.0, 356.0], [70.1, 356.0], [70.2, 357.0], [70.3, 357.0], [70.4, 357.0], [70.5, 357.0], [70.6, 358.0], [70.7, 358.0], [70.8, 358.0], [70.9, 358.0], [71.0, 358.0], [71.1, 358.0], [71.2, 359.0], [71.3, 359.0], [71.4, 359.0], [71.5, 359.0], [71.6, 359.0], [71.7, 359.0], [71.8, 360.0], [71.9, 360.0], [72.0, 360.0], [72.1, 361.0], [72.2, 361.0], [72.3, 361.0], [72.4, 361.0], [72.5, 362.0], [72.6, 362.0], [72.7, 363.0], [72.8, 363.0], [72.9, 364.0], [73.0, 366.0], [73.1, 368.0], [73.2, 369.0], [73.3, 369.0], [73.4, 370.0], [73.5, 370.0], [73.6, 371.0], [73.7, 371.0], [73.8, 372.0], [73.9, 372.0], [74.0, 373.0], [74.1, 375.0], [74.2, 376.0], [74.3, 378.0], [74.4, 380.0], [74.5, 383.0], [74.6, 385.0], [74.7, 386.0], [74.8, 387.0], [74.9, 389.0], [75.0, 390.0], [75.1, 391.0], [75.2, 392.0], [75.3, 392.0], [75.4, 393.0], [75.5, 393.0], [75.6, 394.0], [75.7, 395.0], [75.8, 396.0], [75.9, 397.0], [76.0, 398.0], [76.1, 398.0], [76.2, 398.0], [76.3, 399.0], [76.4, 399.0], [76.5, 401.0], [76.6, 404.0], [76.7, 407.0], [76.8, 414.0], [76.9, 414.0], [77.0, 415.0], [77.1, 415.0], [77.2, 416.0], [77.3, 416.0], [77.4, 419.0], [77.5, 421.0], [77.6, 422.0], [77.7, 423.0], [77.8, 426.0], [77.9, 427.0], [78.0, 428.0], [78.1, 429.0], [78.2, 430.0], [78.3, 431.0], [78.4, 432.0], [78.5, 434.0], [78.6, 435.0], [78.7, 436.0], [78.8, 438.0], [78.9, 442.0], [79.0, 444.0], [79.1, 455.0], [79.2, 459.0], [79.3, 464.0], [79.4, 466.0], [79.5, 471.0], [79.6, 473.0], [79.7, 474.0], [79.8, 475.0], [79.9, 476.0], [80.0, 477.0], [80.1, 481.0], [80.2, 484.0], [80.3, 485.0], [80.4, 486.0], [80.5, 487.0], [80.6, 493.0], [80.7, 497.0], [80.8, 501.0], [80.9, 503.0], [81.0, 505.0], [81.1, 509.0], [81.2, 510.0], [81.3, 512.0], [81.4, 514.0], [81.5, 515.0], [81.6, 517.0], [81.7, 520.0], [81.8, 521.0], [81.9, 522.0], [82.0, 524.0], [82.1, 526.0], [82.2, 527.0], [82.3, 528.0], [82.4, 529.0], [82.5, 529.0], [82.6, 530.0], [82.7, 530.0], [82.8, 531.0], [82.9, 533.0], [83.0, 537.0], [83.1, 542.0], [83.2, 543.0], [83.3, 544.0], [83.4, 545.0], [83.5, 551.0], [83.6, 552.0], [83.7, 552.0], [83.8, 553.0], [83.9, 553.0], [84.0, 554.0], [84.1, 556.0], [84.2, 558.0], [84.3, 560.0], [84.4, 565.0], [84.5, 568.0], [84.6, 575.0], [84.7, 576.0], [84.8, 579.0], [84.9, 581.0], [85.0, 582.0], [85.1, 583.0], [85.2, 583.0], [85.3, 585.0], [85.4, 587.0], [85.5, 588.0], [85.6, 590.0], [85.7, 595.0], [85.8, 598.0], [85.9, 599.0], [86.0, 600.0], [86.1, 601.0], [86.2, 602.0], [86.3, 606.0], [86.4, 615.0], [86.5, 620.0], [86.6, 622.0], [86.7, 623.0], [86.8, 624.0], [86.9, 627.0], [87.0, 634.0], [87.1, 637.0], [87.2, 641.0], [87.3, 648.0], [87.4, 649.0], [87.5, 650.0], [87.6, 651.0], [87.7, 652.0], [87.8, 653.0], [87.9, 657.0], [88.0, 658.0], [88.1, 660.0], [88.2, 661.0], [88.3, 664.0], [88.4, 711.0], [88.5, 731.0], [88.6, 745.0], [88.7, 753.0], [88.8, 760.0], [88.9, 762.0], [89.0, 763.0], [89.1, 765.0], [89.2, 767.0], [89.3, 770.0], [89.4, 777.0], [89.5, 801.0], [89.6, 813.0], [89.7, 814.0], [89.8, 814.0], [89.9, 815.0], [90.0, 816.0], [90.1, 818.0], [90.2, 822.0], [90.3, 823.0], [90.4, 832.0], [90.5, 837.0], [90.6, 845.0], [90.7, 848.0], [90.8, 857.0], [90.9, 884.0], [91.0, 933.0], [91.1, 934.0], [91.2, 935.0], [91.3, 947.0], [91.4, 1069.0], [91.5, 1218.0], [91.6, 1366.0], [91.7, 1552.0], [91.8, 1670.0], [91.9, 1755.0], [92.0, 1960.0], [92.1, 2124.0], [92.2, 2315.0], [92.3, 2502.0], [92.4, 2703.0], [92.5, 2914.0], [92.6, 3144.0], [92.7, 3294.0], [92.8, 3609.0], [92.9, 3845.0], [93.0, 4077.0], [93.1, 4333.0], [93.2, 4517.0], [93.3, 4721.0], [93.4, 4932.0], [93.5, 5309.0], [93.6, 5535.0], [93.7, 5868.0], [93.8, 6241.0], [93.9, 6812.0], [94.0, 7156.0], [94.1, 7530.0], [94.2, 7790.0], [94.3, 7918.0], [94.4, 8368.0], [94.5, 8469.0], [94.6, 8554.0], [94.7, 8963.0], [94.8, 9180.0], [94.9, 9406.0], [95.0, 9640.0], [95.1, 9687.0], [95.2, 9736.0], [95.3, 10056.0], [95.4, 10133.0], [95.5, 10389.0], [95.6, 10984.0], [95.7, 11292.0], [95.8, 11403.0], [95.9, 11833.0], [96.0, 12342.0], [96.1, 12896.0], [96.2, 13204.0], [96.3, 13270.0], [96.4, 14149.0], [96.5, 14847.0], [96.6, 15211.0], [96.7, 16813.0], [96.8, 17655.0], [96.9, 17983.0], [97.0, 20774.0], [97.1, 24576.0], [97.2, 26029.0], [97.3, 26074.0], [97.4, 26332.0], [97.5, 28643.0], [97.6, 32180.0], [97.7, 34527.0], [97.8, 39434.0], [97.9, 42073.0], [98.0, 45486.0], [98.1, 50302.0], [98.2, 57904.0], [98.3, 65722.0], [98.4, 66480.0], [98.5, 67166.0], [98.6, 69277.0], [98.7, 72201.0], [98.8, 81944.0], [98.9, 91844.0], [99.0, 100069.0], [99.1, 100122.0], [99.2, 100202.0], [99.3, 100366.0], [99.4, 119292.0], [99.5, 132400.0], [99.6, 137536.0], [99.7, 141777.0], [99.8, 146041.0], [99.9, 147951.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 68068.0, "series": [{"data": [[0.0, 14130.0], [135200.0, 2.0], [141600.0, 3.0], [144800.0, 35.0], [142500.0, 4.0], [66700.0, 19.0], [68300.0, 3.0], [71500.0, 1.0], [74700.0, 8.0], [76300.0, 1.0], [81100.0, 1.0], [82700.0, 10.0], [89100.0, 5.0], [92300.0, 1.0], [90700.0, 7.0], [100300.0, 24.0], [113100.0, 1.0], [127500.0, 10.0], [137000.0, 19.0], [153000.0, 2.0], [162600.0, 2.0], [100.0, 21216.0], [32900.0, 11.0], [33700.0, 20.0], [34500.0, 1.0], [35300.0, 34.0], [36100.0, 2.0], [141100.0, 43.0], [38500.0, 2.0], [40100.0, 3.0], [39300.0, 1.0], [42500.0, 12.0], [166700.0, 2.0], [44100.0, 2.0], [47300.0, 23.0], [49700.0, 1.0], [50500.0, 1.0], [200.0, 33881.0], [56900.0, 2.0], [60100.0, 2.0], [63300.0, 3.0], [61700.0, 1.0], [64100.0, 2.0], [69000.0, 80.0], [65800.0, 12.0], [72200.0, 16.0], [70600.0, 2.0], [300.0, 68068.0], [77000.0, 1.0], [78600.0, 3.0], [93000.0, 1.0], [96200.0, 1.0], [94600.0, 3.0], [400.0, 7815.0], [102600.0, 2.0], [110600.0, 1.0], [112200.0, 1.0], [500.0, 9284.0], [128200.0, 3.0], [132400.0, 26.0], [142000.0, 15.0], [145200.0, 1.0], [600.0, 4418.0], [151600.0, 4.0], [700.0, 1974.0], [800.0, 2615.0], [900.0, 699.0], [1000.0, 168.0], [1100.0, 68.0], [1200.0, 224.0], [1300.0, 108.0], [1400.0, 64.0], [1500.0, 74.0], [1600.0, 201.0], [1700.0, 190.0], [1800.0, 30.0], [1900.0, 110.0], [2000.0, 109.0], [2100.0, 61.0], [133300.0, 1.0], [2200.0, 126.0], [2300.0, 86.0], [142900.0, 6.0], [2400.0, 100.0], [2500.0, 120.0], [2600.0, 75.0], [2700.0, 44.0], [2800.0, 95.0], [2900.0, 119.0], [3000.0, 41.0], [3100.0, 106.0], [3200.0, 154.0], [3300.0, 67.0], [210100.0, 1.0], [3400.0, 53.0], [3500.0, 39.0], [3600.0, 63.0], [3700.0, 80.0], [3800.0, 135.0], [3900.0, 47.0], [4000.0, 84.0], [4100.0, 23.0], [66500.0, 11.0], [4300.0, 99.0], [4200.0, 69.0], [4600.0, 78.0], [4400.0, 104.0], [4500.0, 122.0], [72900.0, 1.0], [71300.0, 1.0], [4700.0, 51.0], [74500.0, 1.0], [4800.0, 61.0], [4900.0, 108.0], [5100.0, 85.0], [5000.0, 41.0], [79300.0, 1.0], [5300.0, 91.0], [5200.0, 13.0], [5600.0, 76.0], [5400.0, 63.0], [5500.0, 68.0], [5700.0, 34.0], [5800.0, 36.0], [93700.0, 1.0], [6000.0, 38.0], [5900.0, 33.0], [6100.0, 83.0], [100100.0, 263.0], [101700.0, 1.0], [6300.0, 21.0], [6200.0, 44.0], [6600.0, 48.0], [6500.0, 30.0], [6400.0, 2.0], [103300.0, 2.0], [6700.0, 43.0], [6900.0, 36.0], [6800.0, 55.0], [7100.0, 58.0], [7000.0, 67.0], [111300.0, 2.0], [7200.0, 26.0], [7400.0, 31.0], [7300.0, 43.0], [7600.0, 52.0], [7500.0, 93.0], [7700.0, 107.0], [7800.0, 49.0], [7900.0, 137.0], [8100.0, 79.0], [8000.0, 51.0], [127300.0, 4.0], [8200.0, 13.0], [8600.0, 42.0], [8400.0, 290.0], [9000.0, 99.0], [9200.0, 54.0], [8800.0, 4.0], [9600.0, 277.0], [9400.0, 150.0], [10000.0, 153.0], [10200.0, 39.0], [9800.0, 11.0], [10600.0, 8.0], [10400.0, 29.0], [11200.0, 97.0], [10800.0, 12.0], [11000.0, 38.0], [11600.0, 65.0], [11400.0, 49.0], [12200.0, 18.0], [12000.0, 4.0], [11800.0, 34.0], [12600.0, 6.0], [12400.0, 37.0], [13200.0, 239.0], [13000.0, 73.0], [12800.0, 33.0], [211000.0, 1.0], [13800.0, 13.0], [13400.0, 3.0], [13600.0, 1.0], [14000.0, 36.0], [14200.0, 1.0], [14800.0, 69.0], [14400.0, 26.0], [14600.0, 40.0], [15000.0, 64.0], [15200.0, 62.0], [15600.0, 6.0], [15800.0, 3.0], [15400.0, 17.0], [16000.0, 20.0], [16200.0, 1.0], [16400.0, 5.0], [16800.0, 5.0], [17200.0, 1.0], [18000.0, 27.0], [17600.0, 78.0], [18400.0, 9.0], [18800.0, 2.0], [19200.0, 11.0], [20000.0, 26.0], [20400.0, 1.0], [19600.0, 7.0], [21200.0, 11.0], [20800.0, 2.0], [21600.0, 5.0], [22400.0, 4.0], [22000.0, 4.0], [23600.0, 15.0], [24400.0, 2.0], [24000.0, 3.0], [24800.0, 2.0], [26000.0, 339.0], [26400.0, 4.0], [25600.0, 1.0], [27200.0, 4.0], [27600.0, 3.0], [28000.0, 4.0], [28400.0, 5.0], [29600.0, 2.0], [29200.0, 2.0], [30000.0, 2.0], [31600.0, 5.0], [31200.0, 31.0], [32000.0, 2.0], [32400.0, 5.0], [33600.0, 2.0], [34400.0, 1.0], [32800.0, 26.0], [141500.0, 16.0], [35200.0, 2.0], [36000.0, 2.0], [147900.0, 26.0], [37600.0, 23.0], [40800.0, 20.0], [39200.0, 4.0], [41600.0, 5.0], [42400.0, 9.0], [44000.0, 2.0], [45600.0, 2.0], [47200.0, 5.0], [49600.0, 9.0], [52800.0, 2.0], [53600.0, 14.0], [55200.0, 1.0], [56800.0, 4.0], [62400.0, 1.0], [64000.0, 2.0], [64800.0, 2.0], [67200.0, 13.0], [68800.0, 2.0], [65600.0, 1.0], [70400.0, 35.0], [76800.0, 2.0], [84800.0, 3.0], [88000.0, 2.0], [99200.0, 3.0], [100800.0, 5.0], [108800.0, 11.0], [110400.0, 1.0], [113600.0, 1.0], [134400.0, 19.0], [144000.0, 2.0], [140800.0, 13.0], [147200.0, 1.0], [132100.0, 3.0], [135300.0, 2.0], [141700.0, 5.0], [151300.0, 5.0], [67100.0, 61.0], [71900.0, 27.0], [70300.0, 1.0], [76700.0, 2.0], [79900.0, 2.0], [83100.0, 1.0], [99100.0, 1.0], [105500.0, 1.0], [108700.0, 4.0], [110300.0, 1.0], [113500.0, 1.0], [127900.0, 3.0], [142600.0, 18.0], [139400.0, 3.0], [158600.0, 5.0], [34700.0, 42.0], [33100.0, 6.0], [35500.0, 4.0], [36300.0, 2.0], [38700.0, 1.0], [39500.0, 4.0], [40300.0, 2.0], [41100.0, 2.0], [41900.0, 1.0], [45100.0, 1.0], [49900.0, 10.0], [51500.0, 3.0], [53900.0, 2.0], [57100.0, 1.0], [57900.0, 11.0], [61100.0, 2.0], [61900.0, 2.0], [65100.0, 3.0], [64300.0, 22.0], [63500.0, 2.0], [66200.0, 1.0], [67800.0, 2.0], [74200.0, 2.0], [75800.0, 1.0], [82200.0, 1.0], [85400.0, 2.0], [87000.0, 8.0], [90200.0, 1.0], [93400.0, 1.0], [91800.0, 114.0], [98200.0, 2.0], [96600.0, 1.0], [101400.0, 34.0], [112600.0, 4.0], [138000.0, 14.0], [141200.0, 4.0], [132500.0, 22.0], [138900.0, 1.0], [142100.0, 40.0], [167700.0, 2.0], [66900.0, 10.0], [68500.0, 4.0], [71700.0, 1.0], [70100.0, 31.0], [73300.0, 1.0], [76500.0, 1.0], [78100.0, 6.0], [89300.0, 2.0], [86100.0, 2.0], [92500.0, 14.0], [95700.0, 1.0], [102100.0, 18.0], [100500.0, 1.0], [108500.0, 1.0], [111700.0, 1.0], [119700.0, 3.0], [129300.0, 1.0], [130900.0, 1.0], [127700.0, 6.0], [149400.0, 40.0], [159000.0, 9.0], [17300.0, 23.0], [16500.0, 1.0], [16900.0, 2.0], [18100.0, 14.0], [17700.0, 86.0], [18500.0, 5.0], [19300.0, 4.0], [19700.0, 2.0], [20100.0, 4.0], [20900.0, 5.0], [20500.0, 1.0], [21700.0, 7.0], [22100.0, 6.0], [22500.0, 2.0], [23700.0, 3.0], [24500.0, 89.0], [24100.0, 4.0], [24900.0, 1.0], [26500.0, 2.0], [25700.0, 2.0], [26100.0, 1.0], [27300.0, 3.0], [27700.0, 3.0], [28100.0, 16.0], [28900.0, 11.0], [30500.0, 3.0], [31300.0, 18.0], [30900.0, 10.0], [32100.0, 5.0], [32500.0, 1.0], [34600.0, 1.0], [131100.0, 12.0], [134300.0, 11.0], [137500.0, 118.0], [35400.0, 3.0], [36200.0, 2.0], [150300.0, 9.0], [38600.0, 2.0], [39400.0, 5.0], [41000.0, 3.0], [42600.0, 2.0], [45800.0, 2.0], [46600.0, 1.0], [49000.0, 1.0], [50600.0, 9.0], [49800.0, 6.0], [52200.0, 2.0], [53800.0, 2.0], [57000.0, 24.0], [57800.0, 6.0], [61000.0, 4.0], [61800.0, 3.0], [62600.0, 2.0], [63400.0, 2.0], [65000.0, 5.0], [64200.0, 21.0], [69200.0, 28.0], [67600.0, 18.0], [66000.0, 7.0], [70800.0, 7.0], [75600.0, 2.0], [88400.0, 4.0], [93200.0, 1.0], [94800.0, 2.0], [101200.0, 1.0], [99600.0, 1.0], [143200.0, 1.0], [152800.0, 3.0], [147300.0, 71.0], [150500.0, 1.0], [169700.0, 2.0], [65900.0, 53.0], [67500.0, 2.0], [69100.0, 6.0], [70700.0, 1.0], [72300.0, 6.0], [77100.0, 1.0], [73900.0, 27.0], [75500.0, 1.0], [78700.0, 1.0], [81900.0, 8.0], [80300.0, 4.0], [85100.0, 1.0], [83500.0, 2.0], [86700.0, 24.0], [89900.0, 1.0], [94700.0, 2.0], [99500.0, 13.0], [101100.0, 1.0], [104300.0, 1.0], [107500.0, 1.0], [109100.0, 1.0], [135400.0, 26.0], [141800.0, 23.0], [151400.0, 12.0], [33300.0, 23.0], [34100.0, 8.0], [36500.0, 6.0], [35700.0, 1.0], [40500.0, 4.0], [158700.0, 10.0], [39700.0, 1.0], [42900.0, 1.0], [43700.0, 26.0], [44500.0, 6.0], [46900.0, 2.0], [47700.0, 1.0], [49300.0, 7.0], [50100.0, 10.0], [50900.0, 1.0], [54900.0, 2.0], [55700.0, 64.0], [58100.0, 7.0], [61300.0, 4.0], [59700.0, 3.0], [65300.0, 16.0], [63700.0, 2.0], [64500.0, 3.0], [66600.0, 51.0], [68200.0, 7.0], [69800.0, 2.0], [74600.0, 3.0], [77800.0, 1.0], [81000.0, 1.0], [85800.0, 1.0], [84200.0, 1.0], [92200.0, 1.0], [100200.0, 169.0], [103400.0, 1.0], [109800.0, 1.0], [117800.0, 8.0], [127400.0, 1.0], [146800.0, 33.0], [138100.0, 13.0], [163700.0, 2.0], [67300.0, 5.0], [65700.0, 6.0], [68900.0, 11.0], [73700.0, 2.0], [70500.0, 2.0], [80100.0, 1.0], [84900.0, 6.0], [91300.0, 1.0], [92900.0, 3.0], [94500.0, 1.0], [97700.0, 1.0], [110500.0, 5.0], [129700.0, 1.0], [8700.0, 66.0], [8300.0, 33.0], [135800.0, 1.0], [8500.0, 88.0], [9100.0, 86.0], [8900.0, 34.0], [9700.0, 153.0], [9500.0, 45.0], [9300.0, 59.0], [10100.0, 197.0], [9900.0, 76.0], [10500.0, 41.0], [10700.0, 3.0], [10300.0, 35.0], [11100.0, 68.0], [10900.0, 99.0], [11300.0, 141.0], [11500.0, 45.0], [11700.0, 1.0], [11900.0, 29.0], [12100.0, 17.0], [12500.0, 2.0], [12300.0, 185.0], [12700.0, 24.0], [12900.0, 56.0], [13100.0, 30.0], [13300.0, 28.0], [13700.0, 11.0], [13500.0, 1.0], [14100.0, 47.0], [13900.0, 8.0], [14300.0, 60.0], [14500.0, 28.0], [14700.0, 3.0], [15100.0, 38.0], [14900.0, 8.0], [15300.0, 5.0], [15500.0, 2.0], [15700.0, 11.0], [16100.0, 13.0], [16300.0, 6.0], [15900.0, 4.0], [16600.0, 17.0], [17000.0, 55.0], [17400.0, 82.0], [18200.0, 14.0], [17800.0, 12.0], [19400.0, 1.0], [18600.0, 1.0], [20200.0, 3.0], [19800.0, 3.0], [20600.0, 32.0], [21400.0, 4.0], [21000.0, 8.0], [21800.0, 4.0], [22200.0, 2.0], [22600.0, 10.0], [23400.0, 3.0], [24200.0, 8.0], [23800.0, 2.0], [25400.0, 1.0], [24600.0, 7.0], [26200.0, 59.0], [25800.0, 1.0], [27400.0, 18.0], [28600.0, 4.0], [28200.0, 2.0], [29000.0, 6.0], [29400.0, 1.0], [30600.0, 3.0], [30200.0, 3.0], [31000.0, 22.0], [32600.0, 7.0], [32200.0, 9.0], [31800.0, 22.0], [33200.0, 41.0], [35600.0, 1.0], [149500.0, 1.0], [152700.0, 16.0], [39600.0, 6.0], [159100.0, 4.0], [40400.0, 52.0], [41200.0, 33.0], [42800.0, 1.0], [42000.0, 21.0], [168700.0, 2.0], [43600.0, 2.0], [46800.0, 1.0], [47600.0, 2.0], [49200.0, 2.0], [55600.0, 5.0], [58800.0, 1.0], [61200.0, 2.0], [65200.0, 2.0], [63600.0, 18.0], [66400.0, 30.0], [71200.0, 6.0], [76000.0, 12.0], [82400.0, 6.0], [88800.0, 1.0], [90400.0, 1.0], [95200.0, 2.0], [101600.0, 1.0], [100000.0, 165.0], [109600.0, 3.0], [111200.0, 2.0], [119200.0, 45.0], [127200.0, 18.0], [142400.0, 21.0], [161600.0, 2.0], [146500.0, 1.0], [152900.0, 4.0], [165700.0, 2.0], [67900.0, 4.0], [66300.0, 37.0], [69500.0, 13.0], [72700.0, 2.0], [77500.0, 2.0], [85500.0, 1.0], [101500.0, 5.0], [106300.0, 3.0], [107900.0, 1.0], [109500.0, 1.0], [128700.0, 1.0], [130300.0, 1.0], [141000.0, 1.0], [144200.0, 1.0], [147400.0, 1.0], [34300.0, 7.0], [33500.0, 3.0], [132300.0, 21.0], [141900.0, 2.0], [37500.0, 2.0], [38300.0, 2.0], [148300.0, 11.0], [40700.0, 29.0], [39900.0, 1.0], [39100.0, 1.0], [42300.0, 9.0], [41500.0, 3.0], [170700.0, 2.0], [44700.0, 2.0], [43900.0, 1.0], [43100.0, 1.0], [45500.0, 17.0], [48700.0, 52.0], [51100.0, 1.0], [50300.0, 9.0], [49500.0, 3.0], [53500.0, 1.0], [55900.0, 2.0], [56700.0, 1.0], [59100.0, 4.0], [62300.0, 1.0], [63100.0, 4.0], [65500.0, 1.0], [68600.0, 2.0], [67000.0, 18.0], [70200.0, 2.0], [73400.0, 1.0], [76600.0, 46.0], [78200.0, 1.0], [91000.0, 1.0], [102200.0, 20.0], [100600.0, 1.0], [127800.0, 3.0], [131000.0, 11.0], [146000.0, 37.0], [152400.0, 2.0], [158800.0, 4.0], [143700.0, 1.0], [146900.0, 18.0], [153300.0, 2.0], [67700.0, 2.0], [66100.0, 40.0], [70900.0, 21.0], [75700.0, 1.0], [74100.0, 4.0], [82100.0, 1.0], [86900.0, 1.0], [90100.0, 2.0], [96500.0, 1.0], [101300.0, 11.0], [112500.0, 6.0], [114100.0, 1.0], [131800.0, 1.0], [141400.0, 2.0], [16700.0, 13.0], [17100.0, 3.0], [17900.0, 16.0], [17500.0, 2.0], [18300.0, 1.0], [19100.0, 3.0], [18700.0, 2.0], [19500.0, 1.0], [21100.0, 23.0], [21500.0, 7.0], [20700.0, 2.0], [21900.0, 2.0], [22300.0, 3.0], [23100.0, 4.0], [22700.0, 4.0], [23500.0, 1.0], [24300.0, 1.0], [23900.0, 5.0], [24700.0, 3.0], [25500.0, 4.0], [25900.0, 6.0], [26300.0, 58.0], [27100.0, 8.0], [27500.0, 10.0], [26700.0, 62.0], [28300.0, 3.0], [27900.0, 12.0], [29500.0, 17.0], [29100.0, 6.0], [30300.0, 1.0], [31100.0, 5.0], [32300.0, 1.0], [34200.0, 7.0], [132700.0, 1.0], [142300.0, 2.0], [35000.0, 7.0], [35800.0, 1.0], [36600.0, 2.0], [148700.0, 10.0], [37400.0, 6.0], [40600.0, 3.0], [39000.0, 23.0], [41400.0, 1.0], [164700.0, 2.0], [43800.0, 4.0], [44600.0, 4.0], [45400.0, 91.0], [49400.0, 2.0], [51800.0, 3.0], [52600.0, 14.0], [57400.0, 4.0], [59000.0, 2.0], [61400.0, 1.0], [60600.0, 2.0], [62200.0, 2.0], [63800.0, 2.0], [65400.0, 13.0], [66800.0, 16.0], [70000.0, 3.0], [73200.0, 2.0], [74800.0, 2.0], [76400.0, 2.0], [81200.0, 4.0], [82800.0, 1.0], [84400.0, 2.0], [90800.0, 1.0], [92400.0, 1.0], [97200.0, 2.0], [102000.0, 1.0], [106800.0, 1.0], [110000.0, 1.0], [111600.0, 1.0], [127600.0, 29.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 211000.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 767.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 145167.0, "series": [{"data": [[0.0, 145167.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 19566.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 14177.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 767.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 2049.313446535108, "minX": 1.68286176E12, "maxY": 3000.0, "series": [{"data": [[1.68286206E12, 2049.313446535108], [1.68286188E12, 3000.0], [1.682862E12, 2999.2266164972125], [1.68286182E12, 3000.0], [1.68286194E12, 3000.0], [1.68286176E12, 3000.0]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68286206E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 30.0, "minX": 738.0, "maxY": 170768.0, "series": [{"data": [[764.0, 39240.0], [767.0, 40859.0], [752.0, 36546.0], [754.0, 35536.0], [753.0, 36544.0], [756.0, 34527.0], [755.0, 35534.0], [766.0, 40862.0], [765.0, 39239.0], [763.0, 33565.0], [762.0, 39547.0], [761.0, 33703.0], [760.0, 33704.0], [751.0, 38615.0], [739.0, 38731.0], [738.0, 39590.0], [741.0, 39209.0], [740.0, 39209.0], [743.0, 41592.0], [742.0, 41594.0], [750.0, 38617.0], [749.0, 39624.0], [748.0, 40625.0], [747.0, 40633.0], [746.0, 41633.0], [745.0, 37628.0], [744.0, 40585.0], [759.0, 40933.5], [757.0, 34711.0], [796.0, 33367.0], [799.0, 32247.0], [785.0, 163703.0], [784.0, 100331.0], [787.0, 162693.0], [786.0, 163701.0], [789.0, 100508.0], [788.0, 162692.0], [798.0, 32249.0], [797.0, 33365.0], [795.0, 34374.0], [794.0, 34268.0], [793.0, 100330.0], [792.0, 161682.0], [783.0, 100124.0], [768.0, 170768.0], [770.0, 169760.0], [769.0, 170768.0], [772.0, 168750.0], [771.0, 169757.0], [775.0, 167741.0], [773.0, 168748.0], [782.0, 164710.0], [781.0, 164712.0], [780.0, 101163.0], [779.0, 165720.0], [778.0, 165722.0], [777.0, 166729.0], [776.0, 166731.0], [791.0, 161684.0], [790.0, 100223.0], [812.0, 28248.0], [813.0, 28387.0], [800.0, 31239.0], [811.0, 29221.0], [810.0, 29223.0], [809.0, 30368.0], [808.0, 30229.0], [807.0, 100809.0], [804.0, 101729.5], [802.0, 100813.0], [801.0, 31237.0], [1587.0, 867.0], [1586.0, 7416.000000000001], [1563.0, 868.0], [1562.0, 661.0], [1560.0, 662.0], [1553.0, 27378.0], [1552.0, 870.0], [1661.0, 760.6494845360824], [1660.0, 739.6206896551727], [1659.0, 653.0], [1657.0, 668.7826086956525], [1656.0, 653.0], [1655.0, 653.4545454545454], [1654.0, 654.25], [1726.0, 808.0909090909091], [1724.0, 820.7007299270072], [1723.0, 778.5], [1722.0, 776.34375], [1720.0, 768.9230769230769], [1721.0, 772.4545454545455], [1719.0, 779.7142857142857], [1728.0, 803.6250000000001], [1826.0, 832.0], [1835.0, 617.0], [1838.0, 615.25], [1837.0, 615.0], [1836.0, 616.0], [1830.0, 615.0], [1829.0, 6418.000000000001], [1828.0, 10528.0], [1825.0, 10528.0], [1807.0, 835.7894736842105], [1806.0, 836.7777777777778], [1823.0, 10528.0], [1822.0, 988.0], [1821.0, 896.8], [1820.0, 4065.8333333333335], [1819.0, 5681.5], [1818.0, 833.0], [1816.0, 911.5], [1815.0, 833.0], [1814.0, 833.5], [1813.0, 2475.6111111111113], [1812.0, 833.8235294117649], [1811.0, 834.0], [1810.0, 833.7857142857143], [1809.0, 834.5], [1808.0, 834.6410256410256], [1914.0, 553.4285714285714], [1889.0, 815.0], [1916.0, 553.0], [1919.0, 553.0], [1888.0, 815.0], [1915.0, 552.5], [1912.0, 554.6666666666666], [1871.0, 680.0], [1887.0, 816.0], [1886.0, 816.0], [1884.0, 816.0], [1883.0, 816.0], [1880.0, 816.3333333333334], [1879.0, 817.0], [1876.0, 699.2857142857143], [1875.0, 662.75], [1873.0, 766.0], [1892.0, 10510.0], [1891.0, 10511.0], [1890.0, 815.0], [1981.0, 309.0], [1983.0, 309.25], [1952.0, 748.0], [1954.0, 748.0], [1953.0, 748.0], [1956.0, 748.0], [1955.0, 748.0], [1959.0, 902.5], [1957.0, 10443.0], [1978.0, 1500.5000000000002], [1975.0, 531.0], [1973.0, 532.0], [1972.0, 531.0], [1969.0, 531.5], [1935.0, 552.0], [1933.0, 552.0], [1931.0, 552.0], [1929.0, 552.0], [1928.0, 552.0], [1926.0, 551.4999999999999], [1925.0, 552.5], [1924.0, 553.0], [1921.0, 552.0], [1951.0, 749.0], [1950.0, 748.0], [1949.0, 748.0], [1948.0, 749.0], [1947.0, 749.0], [1946.0, 750.0], [1944.0, 749.0], [1943.0, 749.0], [1942.0, 757.0], [1941.0, 757.0], [1940.0, 757.0], [1937.0, 654.25], [1936.0, 551.0], [1967.0, 531.0], [1966.0, 531.0], [1992.0, 5223.5], [1995.0, 439.0], [1994.0, 9975.0], [1993.0, 9977.0], [1990.0, 298.0], [1989.0, 297.0], [1987.0, 5228.0], [1985.0, 9995.0], [1984.0, 301.0], [2236.0, 388.25], [2224.0, 390.5], [2196.0, 1586.5], [2202.0, 394.0], [2204.0, 665.7428571428571], [2206.0, 390.0], [2234.0, 389.0], [2230.0, 389.2857142857143], [2228.0, 389.8], [2226.0, 390.0], [2222.0, 391.0], [2220.0, 393.0], [2214.0, 390.5], [2212.0, 392.5555555555555], [2210.0, 392.75], [2404.0, 353.0], [2416.0, 124.5], [2368.0, 371.3333333333333], [2396.0, 354.25], [2398.0, 353.41666666666663], [2418.0, 26233.0], [2414.0, 173.5], [2412.0, 173.5], [2410.0, 344.0], [2402.0, 354.0], [2334.0, 378.25], [2330.0, 380.0], [2326.0, 379.625], [2324.0, 379.5], [2322.0, 380.3333333333333], [2320.0, 380.6], [2318.0, 380.0], [2316.0, 382.0], [2312.0, 382.5], [2364.0, 375.5], [2356.0, 376.0], [2354.0, 377.0], [2352.0, 376.5], [2350.0, 376.77777777777777], [2348.0, 377.0], [2344.0, 377.875], [2342.0, 377.5], [2340.0, 378.00000000000006], [2336.0, 377.5], [2764.0, 376.44444444444446], [2800.0, 375.0], [2804.0, 373.0], [2760.0, 376.0], [2766.0, 376.6666666666667], [2780.0, 375.09090909090907], [2782.0, 375.29999999999995], [2778.0, 375.2857142857143], [2776.0, 375.40625], [2774.0, 374.8], [2770.0, 375.23529411764713], [2768.0, 376.0], [2808.0, 373.57142857142856], [2802.0, 372.7142857142857], [2796.0, 375.0], [2794.0, 374.29999999999995], [2792.0, 374.125], [2790.0, 374.2], [2788.0, 374.1], [2784.0, 374.29999999999995], [2708.0, 25572.0], [2786.0, 375.0], [2918.0, 4803.0], [2880.0, 7530.0], [2882.0, 7529.5], [2884.0, 3176.5], [2888.0, 7517.5], [2892.0, 2726.8], [2896.0, 7507.0], [2900.0, 10847.75], [2902.0, 5662.125000000001], [2904.0, 5073.428571428572], [2906.0, 8359.25], [2908.0, 6991.666666666667], [2920.0, 350.1111111111111], [2916.0, 5932.0], [2914.0, 5363.0], [2912.0, 5317.444444444443], [2846.0, 363.75], [2844.0, 364.0], [2840.0, 365.0], [2834.0, 365.0], [2832.0, 364.75], [2830.0, 365.0], [2828.0, 364.38461538461536], [2826.0, 364.3333333333333], [2824.0, 364.0], [2878.0, 7533.0], [2876.0, 7855.0], [2870.0, 77.4], [2868.0, 90.5], [2866.0, 89.0], [2860.0, 123.66666666666667], [2858.0, 124.6], [2856.0, 150.5], [2850.0, 363.7272727272727], [2848.0, 364.0], [2954.0, 351.0], [2996.0, 350.0], [3000.0, 2979.3240573493345], [2952.0, 351.0], [2958.0, 350.5], [2960.0, 350.0], [2966.0, 350.0], [2968.0, 351.0], [2972.0, 350.0], [2974.0, 350.6666666666667], [2998.0, 348.0], [2992.0, 349.25], [2990.0, 349.0], [2988.0, 349.0], [2986.0, 350.0], [2984.0, 349.3333333333333], [2982.0, 350.0], [2978.0, 349.62500000000006], [2976.0, 349.5], [2231.0, 390.0], [2201.0, 394.5], [2203.0, 394.2], [2207.0, 391.0], [2233.0, 391.5], [2223.0, 391.4], [2221.0, 391.5], [2219.0, 390.9333333333334], [2215.0, 392.6], [2213.0, 391.25], [2211.0, 392.0], [2209.0, 392.75], [2323.0, 379.5], [2325.0, 379.8], [2409.0, 352.2], [2419.0, 26231.0], [2395.0, 354.5], [2397.0, 355.0], [2399.0, 352.8333333333333], [2417.0, 124.0], [2403.0, 353.0], [2329.0, 381.0], [2321.0, 380.6666666666667], [2319.0, 380.57142857142856], [2317.0, 381.2105263157895], [2313.0, 382.0], [2365.0, 375.0], [2363.0, 374.0], [2361.0, 376.0], [2359.0, 376.5], [2357.0, 377.0], [2355.0, 375.5], [2353.0, 377.0], [2351.0, 376.0], [2345.0, 377.0], [2343.0, 376.875], [2341.0, 376.5714285714286], [2339.0, 378.3333333333333], [2337.0, 378.5], [2759.0, 377.0], [2757.0, 375.5], [2809.0, 372.0], [2755.0, 377.5362318840579], [2761.0, 376.6666666666667], [2763.0, 375.0], [2765.0, 376.0], [2781.0, 375.3636363636364], [2783.0, 375.5], [2779.0, 375.0526315789474], [2777.0, 375.0], [2775.0, 375.3636363636364], [2771.0, 375.75], [2769.0, 376.1875], [2767.0, 376.0], [2807.0, 373.0], [2803.0, 372.0], [2801.0, 375.0], [2799.0, 374.0], [2797.0, 373.0], [2795.0, 374.0], [2793.0, 374.33333333333337], [2791.0, 374.3333333333333], [2789.0, 373.75], [2787.0, 373.90909090909093], [2709.0, 390.0], [2785.0, 375.0], [2919.0, 1294.2], [2887.0, 4645.8], [2901.0, 5281.333333333333], [2921.0, 554.8260869565217], [2881.0, 7530.0], [2883.0, 3778.75], [2885.0, 2659.5], [2893.0, 7777.142857142858], [2897.0, 7507.0], [2899.0, 8646.333333333334], [2903.0, 5250.0], [2907.0, 6301.5], [2909.0, 6337.166666666667], [2915.0, 5504.75], [2913.0, 5077.0], [2847.0, 363.77777777777777], [2845.0, 364.0], [2843.0, 364.0], [2837.0, 364.75], [2835.0, 364.6], [2833.0, 364.66666666666674], [2831.0, 364.5], [2829.0, 364.75], [2825.0, 364.3333333333333], [2879.0, 7531.0], [2877.0, 6811.5], [2875.0, 153.9090909090909], [2871.0, 30.0], [2869.0, 89.81818181818183], [2863.0, 122.5], [2861.0, 122.75], [2859.0, 125.0], [2857.0, 149.8], [2855.0, 153.0], [2853.0, 152.2], [2851.0, 153.0], [2849.0, 363.59999999999997], [2961.0, 350.0], [2945.0, 351.0], [2953.0, 351.5], [2959.0, 351.0], [2963.0, 350.6666666666667], [2969.0, 350.25], [2971.0, 350.0], [2973.0, 349.3333333333333], [2997.0, 349.6666666666667], [2993.0, 349.90909090909093], [2987.0, 349.5], [2985.0, 350.0], [2981.0, 350.0], [2979.0, 349.6]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[2988.3093105962407, 2985.4527513260387]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 3000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 18303.6, "minX": 1.68286176E12, "maxY": 492013.36666666664, "series": [{"data": [[1.68286206E12, 26089.583333333332], [1.68286188E12, 420183.4], [1.682862E12, 448580.8333333333], [1.68286182E12, 409897.55], [1.68286194E12, 492013.36666666664], [1.68286176E12, 373476.05]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.68286206E12, 18303.6], [1.68286188E12, 289060.8], [1.682862E12, 314630.4], [1.68286182E12, 274596.0], [1.68286194E12, 343904.4], [1.68286176E12, 262348.8]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68286206E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 1091.2801933913986, "minX": 1.68286176E12, "maxY": 6664.571143962562, "series": [{"data": [[1.68286206E12, 3559.6158788435064], [1.68286188E12, 6664.571143962562], [1.682862E12, 1976.6098524270867], [1.68286182E12, 2819.1522775264075], [1.68286194E12, 2346.62566753639], [1.68286176E12, 1091.2801933913986]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68286206E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 1091.2696273053273, "minX": 1.68286176E12, "maxY": 6026.289715308678, "series": [{"data": [[1.68286206E12, 3559.6117485084915], [1.68286188E12, 6026.289715308678], [1.682862E12, 1927.9047847783934], [1.68286182E12, 2134.1371342383145], [1.68286194E12, 2192.7180375039766], [1.68286176E12, 1091.2696273053273]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68286206E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 61.27740778688573, "minX": 1.68286176E12, "maxY": 4092.048478373797, "series": [{"data": [[1.68286206E12, 1211.2657182193673], [1.68286188E12, 4092.048478373797], [1.682862E12, 340.5905051637198], [1.68286182E12, 690.4876621417806], [1.68286194E12, 585.5770684483838], [1.68286176E12, 61.27740778688573]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68286206E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 6.0, "minX": 1.68286176E12, "maxY": 211067.0, "series": [{"data": [[1.68286206E12, 170768.0], [1.68286188E12, 159198.0], [1.682862E12, 128222.0], [1.68286182E12, 114192.0], [1.68286194E12, 211067.0], [1.68286176E12, 49965.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.68286206E12, 857.0], [1.68286188E12, 2918.4000000000087], [1.682862E12, 786.7000000000044], [1.68286182E12, 354.0], [1.68286194E12, 667.0], [1.68286176E12, 589.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.68286206E12, 101460.99999999972], [1.68286188E12, 147362.0], [1.682862E12, 69277.0], [1.68286182E12, 100118.99], [1.68286194E12, 58182.23000000173], [1.68286176E12, 26293.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.68286206E12, 9929.0], [1.68286188E12, 19654.75000000041], [1.682862E12, 3324.0], [1.68286182E12, 7706.0], [1.68286194E12, 9377.0], [1.68286176E12, 934.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.68286206E12, 124.0], [1.68286188E12, 14.0], [1.682862E12, 22.0], [1.68286182E12, 6.0], [1.68286194E12, 15.0], [1.68286176E12, 8.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.68286206E12, 641.0], [1.68286188E12, 334.0], [1.682862E12, 323.0], [1.68286182E12, 301.0], [1.68286194E12, 318.0], [1.68286176E12, 338.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68286206E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 34.0, "minX": 1.0, "maxY": 168748.0, "series": [{"data": [[2.0, 36043.5], [3.0, 161683.0], [4.0, 20239.5], [5.0, 7030.0], [6.0, 8320.0], [7.0, 4087.0], [8.0, 72710.0], [9.0, 34357.5], [10.0, 49392.0], [11.0, 4643.0], [14.0, 9089.0], [15.0, 11983.0], [17.0, 57904.0], [19.0, 48911.5], [22.0, 67695.0], [24.0, 31062.0], [25.0, 493.0], [27.0, 13182.0], [29.0, 33570.0], [30.0, 70941.5], [39.0, 8916.0], [38.0, 56.0], [42.0, 5655.5], [45.0, 129.0], [48.0, 79.0], [51.0, 49671.0], [55.0, 43708.0], [65.0, 66344.0], [66.0, 66935.5], [75.0, 34706.0], [72.0, 88.0], [78.0, 123.0], [84.0, 240.0], [97.0, 9239.0], [111.0, 2013.0], [115.0, 1957.5], [123.0, 53646.0], [145.0, 2876.0], [147.0, 40509.0], [153.0, 47.0], [176.0, 8130.0], [184.0, 178.0], [191.0, 33312.0], [214.0, 273.0], [223.0, 10132.0], [234.0, 7910.0], [241.0, 166.0], [285.0, 339.0], [281.0, 277.0], [288.0, 272.0], [302.0, 340.0], [333.0, 299.0], [349.0, 167.0], [361.0, 13238.0], [376.0, 201.0], [379.0, 17656.0], [371.0, 8471.0], [384.0, 332.0], [420.0, 299.0], [422.0, 334.0], [459.0, 26071.0], [461.0, 344.0], [474.0, 9690.0], [492.0, 266.0], [489.0, 276.0], [509.0, 230.0], [499.0, 375.0], [536.0, 329.0], [534.0, 265.0], [531.0, 304.0], [551.0, 370.0], [559.0, 552.0], [556.0, 308.0], [572.0, 328.0], [564.0, 319.0], [547.0, 301.0], [552.0, 324.0], [546.0, 343.0], [602.0, 310.0], [590.0, 334.0], [604.0, 293.0], [603.0, 349.0], [605.0, 309.0], [606.0, 282.0], [596.0, 309.0], [592.0, 355.0], [593.0, 308.0], [607.0, 315.0], [600.0, 347.0], [601.0, 307.0], [576.0, 291.0], [579.0, 301.0], [582.0, 296.0], [597.0, 314.0], [599.0, 96.0], [598.0, 333.0], [613.0, 246.0], [622.0, 354.0], [610.0, 278.0], [609.0, 286.0], [634.0, 182.0], [631.0, 322.0], [633.0, 313.0], [636.0, 309.0], [614.0, 521.0], [652.0, 244.0], [641.0, 338.0], [651.0, 316.0], [661.0, 327.0], [655.0, 323.0], [670.0, 298.0], [675.0, 62.0], [692.0, 353.0], [674.0, 345.0], [679.0, 317.0], [729.0, 320.0], [730.0, 151.0], [721.0, 316.0], [766.0, 326.0], [748.0, 300.0], [784.0, 391.0], [796.0, 348.5], [777.0, 393.0], [774.0, 266.0], [826.0, 328.0], [827.0, 309.0], [819.0, 314.0], [907.0, 265.0], [904.0, 290.0], [984.0, 39.0], [1007.0, 335.0], [1020.0, 333.0], [1001.0, 208.0], [1027.0, 329.0], [1057.0, 252.0], [1073.0, 298.0], [1074.0, 330.0], [1082.0, 358.0], [1045.0, 302.0], [1123.0, 249.0], [1135.0, 663.0], [1092.0, 305.0], [1103.0, 599.0], [1111.0, 301.0], [1202.0, 345.0], [1185.0, 331.0], [1179.0, 549.0], [1152.0, 397.0], [1176.0, 327.5], [1174.0, 431.0], [1175.0, 306.0], [1161.0, 352.0], [1159.0, 518.0], [1167.0, 356.0], [1201.0, 413.0], [1165.0, 314.0], [1197.0, 140.0], [1190.0, 113.0], [1153.0, 359.0], [1186.0, 285.0], [1204.0, 457.0], [1205.0, 362.0], [1268.0, 583.0], [1217.0, 53.0], [1247.0, 620.0], [1254.0, 293.0], [1253.0, 336.0], [1273.0, 322.0], [1238.0, 369.0], [1230.0, 396.0], [1245.0, 307.0], [1218.0, 256.0], [1261.0, 304.0], [1285.0, 36.0], [1280.0, 110.0], [1304.0, 270.0], [1327.0, 264.0], [1295.0, 454.0], [1291.0, 414.0], [1340.0, 589.5], [1444.0, 493.0], [1457.0, 345.0], [1476.0, 505.0], [1587.0, 238.0], [1650.0, 318.0], [1632.0, 359.0], [1622.0, 314.0], [1604.0, 652.0], [1712.0, 338.0], [1668.0, 399.0], [1767.0, 335.0], [1746.0, 815.0], [1821.0, 295.0], [1851.0, 577.0], [1804.0, 276.0], [1854.0, 34.0], [2043.0, 107.0], [2105.0, 307.0], [2073.0, 658.0], [2300.0, 212.0], [2212.0, 345.0], [2323.0, 722.0], [1.0, 168748.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[8.0, 11645.5], [2105.0, 91837.5], [556.0, 7462.0], [147.0, 69022.0], [576.0, 20015.0], [9.0, 16302.0], [599.0, 55736.0], [606.0, 74766.0], [605.0, 110050.0], [39.0, 33582.0], [634.0, 70109.0], [721.0, 137537.0], [176.0, 78696.0], [47.0, 76640.0], [796.0, 11354.0], [75.0, 17354.0], [1245.0, 119294.0], [19.0, 99596.0], [1295.0, 14040.0], [84.0, 21422.0], [1457.0, 139424.0], [27.0, 5450.0], [7.0, 25945.0], [123.0, 9982.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 2323.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 168748.0, "series": [{"data": [[2.0, 36043.5], [3.0, 161683.0], [4.0, 20239.5], [5.0, 7030.0], [6.0, 8320.0], [7.0, 4086.0], [8.0, 72710.0], [9.0, 34357.5], [10.0, 49392.0], [11.0, 4643.0], [14.0, 9089.0], [15.0, 11983.0], [17.0, 57904.0], [19.0, 48911.5], [22.0, 67695.0], [24.0, 31062.0], [25.0, 493.0], [27.0, 13182.0], [29.0, 33570.0], [30.0, 70941.5], [39.0, 8916.0], [38.0, 56.0], [42.0, 5655.5], [45.0, 129.0], [48.0, 79.0], [51.0, 49671.0], [55.0, 43708.0], [65.0, 66344.0], [66.0, 66935.5], [75.0, 34706.0], [72.0, 88.0], [78.0, 123.0], [84.0, 240.0], [97.0, 9239.0], [111.0, 2013.0], [115.0, 1957.5], [123.0, 53646.0], [145.0, 2876.0], [147.0, 40506.0], [153.0, 47.0], [176.0, 8130.0], [184.0, 178.0], [191.0, 33312.0], [214.0, 273.0], [223.0, 10132.0], [234.0, 7910.0], [241.0, 166.0], [285.0, 339.0], [281.0, 277.0], [288.0, 272.0], [302.0, 340.0], [333.0, 299.0], [349.0, 167.0], [361.0, 13238.0], [376.0, 201.0], [379.0, 17656.0], [371.0, 8471.0], [384.0, 332.0], [420.0, 299.0], [422.0, 334.0], [459.0, 26071.0], [461.0, 344.0], [474.0, 9690.0], [492.0, 266.0], [489.0, 276.0], [509.0, 230.0], [499.0, 375.0], [536.0, 329.0], [534.0, 265.0], [531.0, 304.0], [551.0, 370.0], [559.0, 552.0], [556.0, 308.0], [572.0, 328.0], [564.0, 319.0], [547.0, 301.0], [552.0, 324.0], [546.0, 343.0], [602.0, 310.0], [590.0, 334.0], [604.0, 293.0], [603.0, 349.0], [605.0, 309.0], [606.0, 281.0], [596.0, 309.0], [592.0, 355.0], [593.0, 308.0], [607.0, 315.0], [600.0, 347.0], [601.0, 307.0], [576.0, 291.0], [579.0, 301.0], [582.0, 296.0], [597.0, 314.0], [599.0, 96.0], [598.0, 333.0], [613.0, 246.0], [622.0, 354.0], [610.0, 278.0], [609.0, 286.0], [634.0, 182.0], [631.0, 322.0], [633.0, 313.0], [636.0, 309.0], [614.0, 521.0], [652.0, 244.0], [641.0, 338.0], [651.0, 316.0], [661.0, 327.0], [655.0, 323.0], [670.0, 298.0], [675.0, 62.0], [692.0, 353.0], [674.0, 345.0], [679.0, 317.0], [729.0, 320.0], [730.0, 151.0], [721.0, 316.0], [766.0, 326.0], [748.0, 300.0], [784.0, 391.0], [796.0, 348.0], [777.0, 393.0], [774.0, 266.0], [826.0, 328.0], [827.0, 309.0], [819.0, 314.0], [907.0, 265.0], [904.0, 290.0], [984.0, 39.0], [1007.0, 335.0], [1020.0, 333.0], [1001.0, 208.0], [1027.0, 329.0], [1057.0, 252.0], [1073.0, 298.0], [1074.0, 330.0], [1082.0, 358.0], [1045.0, 302.0], [1123.0, 249.0], [1135.0, 663.0], [1092.0, 305.0], [1103.0, 599.0], [1111.0, 301.0], [1202.0, 345.0], [1185.0, 331.0], [1179.0, 549.0], [1152.0, 397.0], [1176.0, 327.5], [1174.0, 431.0], [1175.0, 306.0], [1161.0, 352.0], [1159.0, 518.0], [1167.0, 356.0], [1201.0, 413.0], [1165.0, 314.0], [1197.0, 140.0], [1190.0, 113.0], [1153.0, 359.0], [1186.0, 285.0], [1204.0, 457.0], [1205.0, 362.0], [1268.0, 583.0], [1217.0, 53.0], [1247.0, 620.0], [1254.0, 293.0], [1253.0, 336.0], [1273.0, 322.0], [1238.0, 369.0], [1230.0, 396.0], [1245.0, 307.0], [1218.0, 256.0], [1261.0, 304.0], [1285.0, 36.0], [1280.0, 110.0], [1304.0, 270.0], [1327.0, 264.0], [1295.0, 454.0], [1291.0, 414.0], [1340.0, 589.5], [1444.0, 493.0], [1457.0, 345.0], [1476.0, 505.0], [1587.0, 238.0], [1650.0, 318.0], [1632.0, 359.0], [1622.0, 314.0], [1604.0, 652.0], [1712.0, 338.0], [1668.0, 399.0], [1767.0, 335.0], [1746.0, 815.0], [1821.0, 295.0], [1851.0, 577.0], [1804.0, 276.0], [1854.0, 34.0], [2043.0, 107.0], [2105.0, 307.0], [2073.0, 658.0], [2300.0, 212.0], [2212.0, 345.0], [2323.0, 722.0], [1.0, 168748.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[8.0, 0.0], [2105.0, 0.0], [556.0, 0.0], [147.0, 0.0], [576.0, 0.0], [9.0, 0.0], [599.0, 0.0], [606.0, 0.0], [605.0, 0.0], [39.0, 0.0], [634.0, 0.0], [721.0, 0.0], [176.0, 0.0], [47.0, 0.0], [796.0, 0.0], [75.0, 0.0], [1245.0, 0.0], [19.0, 0.0], [1295.0, 0.0], [84.0, 0.0], [1457.0, 0.0], [27.0, 0.0], [7.0, 0.0], [123.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 2323.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 26.25, "minX": 1.68286176E12, "maxY": 680.0, "series": [{"data": [[1.68286206E12, 26.25], [1.68286188E12, 550.0], [1.682862E12, 618.3666666666667], [1.68286182E12, 560.0], [1.68286194E12, 680.0], [1.68286176E12, 560.0]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68286206E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.2833333333333333, "minX": 1.68286176E12, "maxY": 682.35, "series": [{"data": [[1.68286206E12, 36.31666666666667], [1.68286188E12, 573.5333333333333], [1.682862E12, 624.2666666666667], [1.68286182E12, 544.8333333333334], [1.68286194E12, 682.35], [1.68286176E12, 520.5333333333333]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.68286188E12, 3.7], [1.682862E12, 0.2833333333333333], [1.68286182E12, 7.666666666666667], [1.68286194E12, 1.1333333333333333]], "isOverall": false, "label": "Non HTTP response code: java.net.SocketException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68286206E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.2833333333333333, "minX": 1.68286176E12, "maxY": 682.35, "series": [{"data": [[1.68286206E12, 36.31666666666667], [1.68286188E12, 573.5333333333333], [1.682862E12, 624.2666666666667], [1.68286182E12, 544.8333333333334], [1.68286194E12, 682.35], [1.68286176E12, 520.5333333333333]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.68286188E12, 3.7], [1.682862E12, 0.2833333333333333], [1.68286182E12, 7.666666666666667], [1.68286194E12, 1.1333333333333333]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68286206E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.2833333333333333, "minX": 1.68286176E12, "maxY": 682.35, "series": [{"data": [[1.68286206E12, 36.31666666666667], [1.68286188E12, 573.5333333333333], [1.682862E12, 624.2666666666667], [1.68286182E12, 544.8333333333334], [1.68286194E12, 682.35], [1.68286176E12, 520.5333333333333]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.68286188E12, 3.7], [1.682862E12, 0.2833333333333333], [1.68286182E12, 7.666666666666667], [1.68286194E12, 1.1333333333333333]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68286206E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

