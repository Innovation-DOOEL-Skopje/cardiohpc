/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 1090.0, "minX": 0.0, "maxY": 32602.0, "series": [{"data": [[0.0, 1090.0], [0.1, 1093.0], [0.2, 1093.0], [0.3, 1094.0], [0.4, 1094.0], [0.5, 1094.0], [0.6, 1095.0], [0.7, 1095.0], [0.8, 1095.0], [0.9, 1095.0], [1.0, 1095.0], [1.1, 1096.0], [1.2, 1096.0], [1.3, 1096.0], [1.4, 1096.0], [1.5, 1096.0], [1.6, 1096.0], [1.7, 1096.0], [1.8, 1096.0], [1.9, 1096.0], [2.0, 1097.0], [2.1, 1097.0], [2.2, 1097.0], [2.3, 1097.0], [2.4, 1097.0], [2.5, 1097.0], [2.6, 1097.0], [2.7, 1097.0], [2.8, 1097.0], [2.9, 1097.0], [3.0, 1097.0], [3.1, 1098.0], [3.2, 1098.0], [3.3, 1098.0], [3.4, 1098.0], [3.5, 1098.0], [3.6, 1098.0], [3.7, 1098.0], [3.8, 1098.0], [3.9, 1098.0], [4.0, 1098.0], [4.1, 1098.0], [4.2, 1098.0], [4.3, 1098.0], [4.4, 1098.0], [4.5, 1098.0], [4.6, 1099.0], [4.7, 1099.0], [4.8, 1099.0], [4.9, 1099.0], [5.0, 1099.0], [5.1, 1099.0], [5.2, 1099.0], [5.3, 1099.0], [5.4, 1099.0], [5.5, 1099.0], [5.6, 1099.0], [5.7, 1099.0], [5.8, 1099.0], [5.9, 1099.0], [6.0, 1099.0], [6.1, 1099.0], [6.2, 1099.0], [6.3, 1099.0], [6.4, 1099.0], [6.5, 1099.0], [6.6, 1100.0], [6.7, 1100.0], [6.8, 1100.0], [6.9, 1100.0], [7.0, 1100.0], [7.1, 1100.0], [7.2, 1100.0], [7.3, 1100.0], [7.4, 1100.0], [7.5, 1100.0], [7.6, 1100.0], [7.7, 1100.0], [7.8, 1100.0], [7.9, 1100.0], [8.0, 1100.0], [8.1, 1100.0], [8.2, 1100.0], [8.3, 1100.0], [8.4, 1100.0], [8.5, 1100.0], [8.6, 1100.0], [8.7, 1101.0], [8.8, 1101.0], [8.9, 1101.0], [9.0, 1101.0], [9.1, 1101.0], [9.2, 1101.0], [9.3, 1101.0], [9.4, 1101.0], [9.5, 1101.0], [9.6, 1101.0], [9.7, 1101.0], [9.8, 1101.0], [9.9, 1101.0], [10.0, 1101.0], [10.1, 1101.0], [10.2, 1101.0], [10.3, 1101.0], [10.4, 1101.0], [10.5, 1101.0], [10.6, 1101.0], [10.7, 1101.0], [10.8, 1101.0], [10.9, 1101.0], [11.0, 1101.0], [11.1, 1101.0], [11.2, 1101.0], [11.3, 1102.0], [11.4, 1102.0], [11.5, 1102.0], [11.6, 1102.0], [11.7, 1102.0], [11.8, 1102.0], [11.9, 1102.0], [12.0, 1102.0], [12.1, 1102.0], [12.2, 1102.0], [12.3, 1102.0], [12.4, 1102.0], [12.5, 1102.0], [12.6, 1102.0], [12.7, 1102.0], [12.8, 1102.0], [12.9, 1102.0], [13.0, 1102.0], [13.1, 1102.0], [13.2, 1102.0], [13.3, 1102.0], [13.4, 1102.0], [13.5, 1102.0], [13.6, 1102.0], [13.7, 1102.0], [13.8, 1102.0], [13.9, 1102.0], [14.0, 1102.0], [14.1, 1103.0], [14.2, 1103.0], [14.3, 1103.0], [14.4, 1103.0], [14.5, 1103.0], [14.6, 1103.0], [14.7, 1103.0], [14.8, 1103.0], [14.9, 1103.0], [15.0, 1103.0], [15.1, 1103.0], [15.2, 1103.0], [15.3, 1103.0], [15.4, 1103.0], [15.5, 1103.0], [15.6, 1103.0], [15.7, 1103.0], [15.8, 1103.0], [15.9, 1103.0], [16.0, 1103.0], [16.1, 1103.0], [16.2, 1103.0], [16.3, 1103.0], [16.4, 1103.0], [16.5, 1103.0], [16.6, 1103.0], [16.7, 1103.0], [16.8, 1104.0], [16.9, 1104.0], [17.0, 1104.0], [17.1, 1104.0], [17.2, 1104.0], [17.3, 1104.0], [17.4, 1104.0], [17.5, 1104.0], [17.6, 1104.0], [17.7, 1104.0], [17.8, 1104.0], [17.9, 1104.0], [18.0, 1104.0], [18.1, 1104.0], [18.2, 1104.0], [18.3, 1104.0], [18.4, 1104.0], [18.5, 1104.0], [18.6, 1104.0], [18.7, 1104.0], [18.8, 1104.0], [18.9, 1104.0], [19.0, 1104.0], [19.1, 1104.0], [19.2, 1104.0], [19.3, 1104.0], [19.4, 1104.0], [19.5, 1104.0], [19.6, 1105.0], [19.7, 1105.0], [19.8, 1105.0], [19.9, 1105.0], [20.0, 1105.0], [20.1, 1105.0], [20.2, 1105.0], [20.3, 1105.0], [20.4, 1105.0], [20.5, 1105.0], [20.6, 1105.0], [20.7, 1105.0], [20.8, 1105.0], [20.9, 1105.0], [21.0, 1105.0], [21.1, 1105.0], [21.2, 1105.0], [21.3, 1105.0], [21.4, 1105.0], [21.5, 1105.0], [21.6, 1105.0], [21.7, 1105.0], [21.8, 1105.0], [21.9, 1105.0], [22.0, 1105.0], [22.1, 1105.0], [22.2, 1105.0], [22.3, 1106.0], [22.4, 1106.0], [22.5, 1106.0], [22.6, 1106.0], [22.7, 1106.0], [22.8, 1106.0], [22.9, 1106.0], [23.0, 1106.0], [23.1, 1106.0], [23.2, 1106.0], [23.3, 1106.0], [23.4, 1106.0], [23.5, 1106.0], [23.6, 1106.0], [23.7, 1106.0], [23.8, 1106.0], [23.9, 1106.0], [24.0, 1106.0], [24.1, 1106.0], [24.2, 1106.0], [24.3, 1106.0], [24.4, 1106.0], [24.5, 1106.0], [24.6, 1106.0], [24.7, 1106.0], [24.8, 1106.0], [24.9, 1107.0], [25.0, 1107.0], [25.1, 1107.0], [25.2, 1107.0], [25.3, 1107.0], [25.4, 1107.0], [25.5, 1107.0], [25.6, 1107.0], [25.7, 1107.0], [25.8, 1107.0], [25.9, 1107.0], [26.0, 1107.0], [26.1, 1107.0], [26.2, 1107.0], [26.3, 1107.0], [26.4, 1107.0], [26.5, 1107.0], [26.6, 1107.0], [26.7, 1107.0], [26.8, 1107.0], [26.9, 1107.0], [27.0, 1107.0], [27.1, 1107.0], [27.2, 1107.0], [27.3, 1107.0], [27.4, 1107.0], [27.5, 1108.0], [27.6, 1108.0], [27.7, 1108.0], [27.8, 1108.0], [27.9, 1108.0], [28.0, 1108.0], [28.1, 1108.0], [28.2, 1108.0], [28.3, 1108.0], [28.4, 1108.0], [28.5, 1108.0], [28.6, 1108.0], [28.7, 1108.0], [28.8, 1108.0], [28.9, 1108.0], [29.0, 1108.0], [29.1, 1108.0], [29.2, 1108.0], [29.3, 1108.0], [29.4, 1108.0], [29.5, 1108.0], [29.6, 1108.0], [29.7, 1109.0], [29.8, 1109.0], [29.9, 1109.0], [30.0, 1109.0], [30.1, 1109.0], [30.2, 1109.0], [30.3, 1109.0], [30.4, 1109.0], [30.5, 1109.0], [30.6, 1109.0], [30.7, 1109.0], [30.8, 1109.0], [30.9, 1109.0], [31.0, 1109.0], [31.1, 1109.0], [31.2, 1109.0], [31.3, 1109.0], [31.4, 1109.0], [31.5, 1109.0], [31.6, 1109.0], [31.7, 1109.0], [31.8, 1110.0], [31.9, 1110.0], [32.0, 1110.0], [32.1, 1110.0], [32.2, 1110.0], [32.3, 1110.0], [32.4, 1110.0], [32.5, 1110.0], [32.6, 1110.0], [32.7, 1110.0], [32.8, 1110.0], [32.9, 1110.0], [33.0, 1110.0], [33.1, 1110.0], [33.2, 1110.0], [33.3, 1110.0], [33.4, 1110.0], [33.5, 1110.0], [33.6, 1110.0], [33.7, 1110.0], [33.8, 1110.0], [33.9, 1111.0], [34.0, 1111.0], [34.1, 1111.0], [34.2, 1111.0], [34.3, 1111.0], [34.4, 1111.0], [34.5, 1111.0], [34.6, 1111.0], [34.7, 1111.0], [34.8, 1111.0], [34.9, 1111.0], [35.0, 1111.0], [35.1, 1111.0], [35.2, 1111.0], [35.3, 1111.0], [35.4, 1111.0], [35.5, 1111.0], [35.6, 1111.0], [35.7, 1112.0], [35.8, 1112.0], [35.9, 1112.0], [36.0, 1112.0], [36.1, 1112.0], [36.2, 1112.0], [36.3, 1112.0], [36.4, 1112.0], [36.5, 1112.0], [36.6, 1112.0], [36.7, 1112.0], [36.8, 1112.0], [36.9, 1112.0], [37.0, 1112.0], [37.1, 1112.0], [37.2, 1112.0], [37.3, 1112.0], [37.4, 1113.0], [37.5, 1113.0], [37.6, 1113.0], [37.7, 1113.0], [37.8, 1113.0], [37.9, 1113.0], [38.0, 1113.0], [38.1, 1113.0], [38.2, 1113.0], [38.3, 1113.0], [38.4, 1113.0], [38.5, 1113.0], [38.6, 1113.0], [38.7, 1113.0], [38.8, 1113.0], [38.9, 1113.0], [39.0, 1114.0], [39.1, 1114.0], [39.2, 1114.0], [39.3, 1114.0], [39.4, 1114.0], [39.5, 1114.0], [39.6, 1114.0], [39.7, 1114.0], [39.8, 1114.0], [39.9, 1114.0], [40.0, 1114.0], [40.1, 1114.0], [40.2, 1114.0], [40.3, 1114.0], [40.4, 1114.0], [40.5, 1115.0], [40.6, 1115.0], [40.7, 1115.0], [40.8, 1115.0], [40.9, 1115.0], [41.0, 1115.0], [41.1, 1115.0], [41.2, 1115.0], [41.3, 1115.0], [41.4, 1115.0], [41.5, 1115.0], [41.6, 1115.0], [41.7, 1115.0], [41.8, 1116.0], [41.9, 1116.0], [42.0, 1116.0], [42.1, 1116.0], [42.2, 1116.0], [42.3, 1116.0], [42.4, 1116.0], [42.5, 1116.0], [42.6, 1116.0], [42.7, 1116.0], [42.8, 1116.0], [42.9, 1116.0], [43.0, 1116.0], [43.1, 1117.0], [43.2, 1117.0], [43.3, 1117.0], [43.4, 1117.0], [43.5, 1117.0], [43.6, 1117.0], [43.7, 1117.0], [43.8, 1117.0], [43.9, 1117.0], [44.0, 1117.0], [44.1, 1117.0], [44.2, 1118.0], [44.3, 1118.0], [44.4, 1118.0], [44.5, 1118.0], [44.6, 1118.0], [44.7, 1118.0], [44.8, 1118.0], [44.9, 1118.0], [45.0, 1118.0], [45.1, 1118.0], [45.2, 1119.0], [45.3, 1119.0], [45.4, 1119.0], [45.5, 1119.0], [45.6, 1119.0], [45.7, 1119.0], [45.8, 1119.0], [45.9, 1119.0], [46.0, 1119.0], [46.1, 1119.0], [46.2, 1120.0], [46.3, 1120.0], [46.4, 1120.0], [46.5, 1120.0], [46.6, 1120.0], [46.7, 1120.0], [46.8, 1120.0], [46.9, 1120.0], [47.0, 1120.0], [47.1, 1121.0], [47.2, 1121.0], [47.3, 1121.0], [47.4, 1121.0], [47.5, 1121.0], [47.6, 1121.0], [47.7, 1121.0], [47.8, 1121.0], [47.9, 1122.0], [48.0, 1122.0], [48.1, 1122.0], [48.2, 1122.0], [48.3, 1122.0], [48.4, 1122.0], [48.5, 1122.0], [48.6, 1123.0], [48.7, 1123.0], [48.8, 1123.0], [48.9, 1123.0], [49.0, 1123.0], [49.1, 1123.0], [49.2, 1123.0], [49.3, 1124.0], [49.4, 1124.0], [49.5, 1124.0], [49.6, 1124.0], [49.7, 1124.0], [49.8, 1124.0], [49.9, 1125.0], [50.0, 1125.0], [50.1, 1125.0], [50.2, 1125.0], [50.3, 1125.0], [50.4, 1125.0], [50.5, 1126.0], [50.6, 1126.0], [50.7, 1126.0], [50.8, 1126.0], [50.9, 1126.0], [51.0, 1126.0], [51.1, 1127.0], [51.2, 1127.0], [51.3, 1127.0], [51.4, 1127.0], [51.5, 1127.0], [51.6, 1128.0], [51.7, 1128.0], [51.8, 1128.0], [51.9, 1128.0], [52.0, 1128.0], [52.1, 1128.0], [52.2, 1129.0], [52.3, 1129.0], [52.4, 1129.0], [52.5, 1129.0], [52.6, 1129.0], [52.7, 1130.0], [52.8, 1130.0], [52.9, 1130.0], [53.0, 1130.0], [53.1, 1131.0], [53.2, 1131.0], [53.3, 1131.0], [53.4, 1131.0], [53.5, 1131.0], [53.6, 1132.0], [53.7, 1132.0], [53.8, 1132.0], [53.9, 1132.0], [54.0, 1133.0], [54.1, 1133.0], [54.2, 1133.0], [54.3, 1133.0], [54.4, 1134.0], [54.5, 1134.0], [54.6, 1134.0], [54.7, 1135.0], [54.8, 1135.0], [54.9, 1135.0], [55.0, 1136.0], [55.1, 1136.0], [55.2, 1136.0], [55.3, 1136.0], [55.4, 1137.0], [55.5, 1137.0], [55.6, 1137.0], [55.7, 1138.0], [55.8, 1138.0], [55.9, 1138.0], [56.0, 1139.0], [56.1, 1139.0], [56.2, 1139.0], [56.3, 1140.0], [56.4, 1140.0], [56.5, 1140.0], [56.6, 1141.0], [56.7, 1141.0], [56.8, 1141.0], [56.9, 1142.0], [57.0, 1142.0], [57.1, 1142.0], [57.2, 1143.0], [57.3, 1143.0], [57.4, 1144.0], [57.5, 1144.0], [57.6, 1144.0], [57.7, 1145.0], [57.8, 1145.0], [57.9, 1145.0], [58.0, 1146.0], [58.1, 1146.0], [58.2, 1146.0], [58.3, 1147.0], [58.4, 1147.0], [58.5, 1147.0], [58.6, 1148.0], [58.7, 1148.0], [58.8, 1148.0], [58.9, 1149.0], [59.0, 1149.0], [59.1, 1150.0], [59.2, 1150.0], [59.3, 1150.0], [59.4, 1151.0], [59.5, 1151.0], [59.6, 1152.0], [59.7, 1152.0], [59.8, 1152.0], [59.9, 1153.0], [60.0, 1153.0], [60.1, 1154.0], [60.2, 1154.0], [60.3, 1154.0], [60.4, 1155.0], [60.5, 1155.0], [60.6, 1156.0], [60.7, 1156.0], [60.8, 1157.0], [60.9, 1157.0], [61.0, 1158.0], [61.1, 1158.0], [61.2, 1159.0], [61.3, 1159.0], [61.4, 1160.0], [61.5, 1160.0], [61.6, 1161.0], [61.7, 1162.0], [61.8, 1162.0], [61.9, 1163.0], [62.0, 1163.0], [62.1, 1164.0], [62.2, 1165.0], [62.3, 1165.0], [62.4, 1166.0], [62.5, 1167.0], [62.6, 1168.0], [62.7, 1168.0], [62.8, 1169.0], [62.9, 1170.0], [63.0, 1171.0], [63.1, 1172.0], [63.2, 1174.0], [63.3, 1175.0], [63.4, 1176.0], [63.5, 1177.0], [63.6, 1179.0], [63.7, 1180.0], [63.8, 1181.0], [63.9, 1183.0], [64.0, 1184.0], [64.1, 1185.0], [64.2, 1187.0], [64.3, 1188.0], [64.4, 1189.0], [64.5, 1191.0], [64.6, 1192.0], [64.7, 1193.0], [64.8, 1195.0], [64.9, 1196.0], [65.0, 1198.0], [65.1, 1199.0], [65.2, 1201.0], [65.3, 1202.0], [65.4, 1204.0], [65.5, 1206.0], [65.6, 1207.0], [65.7, 1209.0], [65.8, 1210.0], [65.9, 1211.0], [66.0, 1213.0], [66.1, 1214.0], [66.2, 1215.0], [66.3, 1216.0], [66.4, 1217.0], [66.5, 1219.0], [66.6, 1220.0], [66.7, 1221.0], [66.8, 1223.0], [66.9, 1224.0], [67.0, 1225.0], [67.1, 1227.0], [67.2, 1228.0], [67.3, 1230.0], [67.4, 1231.0], [67.5, 1232.0], [67.6, 1234.0], [67.7, 1235.0], [67.8, 1237.0], [67.9, 1239.0], [68.0, 1242.0], [68.1, 1244.0], [68.2, 1246.0], [68.3, 1248.0], [68.4, 1250.0], [68.5, 1253.0], [68.6, 1255.0], [68.7, 1257.0], [68.8, 1259.0], [68.9, 1262.0], [69.0, 1265.0], [69.1, 1267.0], [69.2, 1270.0], [69.3, 1272.0], [69.4, 1275.0], [69.5, 1276.0], [69.6, 1278.0], [69.7, 1280.0], [69.8, 1281.0], [69.9, 1283.0], [70.0, 1285.0], [70.1, 1287.0], [70.2, 1289.0], [70.3, 1291.0], [70.4, 1293.0], [70.5, 1295.0], [70.6, 1297.0], [70.7, 1299.0], [70.8, 1302.0], [70.9, 1304.0], [71.0, 1306.0], [71.1, 1308.0], [71.2, 1310.0], [71.3, 1313.0], [71.4, 1315.0], [71.5, 1317.0], [71.6, 1319.0], [71.7, 1321.0], [71.8, 1323.0], [71.9, 1325.0], [72.0, 1327.0], [72.1, 1329.0], [72.2, 1331.0], [72.3, 1333.0], [72.4, 1335.0], [72.5, 1336.0], [72.6, 1337.0], [72.7, 1339.0], [72.8, 1341.0], [72.9, 1343.0], [73.0, 1344.0], [73.1, 1346.0], [73.2, 1348.0], [73.3, 1350.0], [73.4, 1351.0], [73.5, 1353.0], [73.6, 1355.0], [73.7, 1356.0], [73.8, 1358.0], [73.9, 1360.0], [74.0, 1362.0], [74.1, 1363.0], [74.2, 1365.0], [74.3, 1366.0], [74.4, 1368.0], [74.5, 1369.0], [74.6, 1371.0], [74.7, 1372.0], [74.8, 1374.0], [74.9, 1376.0], [75.0, 1377.0], [75.1, 1379.0], [75.2, 1381.0], [75.3, 1383.0], [75.4, 1385.0], [75.5, 1388.0], [75.6, 1390.0], [75.7, 1392.0], [75.8, 1394.0], [75.9, 1396.0], [76.0, 1399.0], [76.1, 1401.0], [76.2, 1405.0], [76.3, 1407.0], [76.4, 1409.0], [76.5, 1413.0], [76.6, 1415.0], [76.7, 1418.0], [76.8, 1420.0], [76.9, 1422.0], [77.0, 1424.0], [77.1, 1426.0], [77.2, 1428.0], [77.3, 1429.0], [77.4, 1431.0], [77.5, 1433.0], [77.6, 1435.0], [77.7, 1437.0], [77.8, 1439.0], [77.9, 1441.0], [78.0, 1443.0], [78.1, 1445.0], [78.2, 1447.0], [78.3, 1449.0], [78.4, 1451.0], [78.5, 1453.0], [78.6, 1456.0], [78.7, 1458.0], [78.8, 1460.0], [78.9, 1462.0], [79.0, 1464.0], [79.1, 1467.0], [79.2, 1469.0], [79.3, 1472.0], [79.4, 1474.0], [79.5, 1477.0], [79.6, 1480.0], [79.7, 1484.0], [79.8, 1486.0], [79.9, 1489.0], [80.0, 1492.0], [80.1, 1495.0], [80.2, 1499.0], [80.3, 1502.0], [80.4, 1506.0], [80.5, 1508.0], [80.6, 1511.0], [80.7, 1514.0], [80.8, 1517.0], [80.9, 1519.0], [81.0, 1523.0], [81.1, 1528.0], [81.2, 1533.0], [81.3, 1539.0], [81.4, 1542.0], [81.5, 1546.0], [81.6, 1549.0], [81.7, 1553.0], [81.8, 1556.0], [81.9, 1560.0], [82.0, 1564.0], [82.1, 1567.0], [82.2, 1571.0], [82.3, 1574.0], [82.4, 1578.0], [82.5, 1581.0], [82.6, 1585.0], [82.7, 1587.0], [82.8, 1590.0], [82.9, 1593.0], [83.0, 1596.0], [83.1, 1598.0], [83.2, 1600.0], [83.3, 1603.0], [83.4, 1607.0], [83.5, 1611.0], [83.6, 1616.0], [83.7, 1620.0], [83.8, 1625.0], [83.9, 1630.0], [84.0, 1634.0], [84.1, 1638.0], [84.2, 1642.0], [84.3, 1647.0], [84.4, 1650.0], [84.5, 1653.0], [84.6, 1657.0], [84.7, 1661.0], [84.8, 1664.0], [84.9, 1668.0], [85.0, 1672.0], [85.1, 1676.0], [85.2, 1680.0], [85.3, 1683.0], [85.4, 1688.0], [85.5, 1693.0], [85.6, 1700.0], [85.7, 1705.0], [85.8, 1709.0], [85.9, 1713.0], [86.0, 1718.0], [86.1, 1722.0], [86.2, 1726.0], [86.3, 1730.0], [86.4, 1734.0], [86.5, 1739.0], [86.6, 1743.0], [86.7, 1747.0], [86.8, 1751.0], [86.9, 1755.0], [87.0, 1760.0], [87.1, 1764.0], [87.2, 1771.0], [87.3, 1776.0], [87.4, 1780.0], [87.5, 1785.0], [87.6, 1791.0], [87.7, 1796.0], [87.8, 1802.0], [87.9, 1809.0], [88.0, 1814.0], [88.1, 1822.0], [88.2, 1831.0], [88.3, 1841.0], [88.4, 1848.0], [88.5, 1855.0], [88.6, 1862.0], [88.7, 1876.0], [88.8, 1891.0], [88.9, 1905.0], [89.0, 1915.0], [89.1, 1922.0], [89.2, 1938.0], [89.3, 1954.0], [89.4, 1963.0], [89.5, 1977.0], [89.6, 1988.0], [89.7, 1996.0], [89.8, 2005.0], [89.9, 2015.0], [90.0, 2029.0], [90.1, 2047.0], [90.2, 2060.0], [90.3, 2078.0], [90.4, 2098.0], [90.5, 2117.0], [90.6, 2139.0], [90.7, 2160.0], [90.8, 2184.0], [90.9, 2210.0], [91.0, 2232.0], [91.1, 2255.0], [91.2, 2284.0], [91.3, 2323.0], [91.4, 2374.0], [91.5, 2439.0], [91.6, 2482.0], [91.7, 2509.0], [91.8, 2536.0], [91.9, 2564.0], [92.0, 2653.0], [92.1, 2728.0], [92.2, 2775.0], [92.3, 2826.0], [92.4, 2902.0], [92.5, 2992.0], [92.6, 3084.0], [92.7, 3260.0], [92.8, 3413.0], [92.9, 3653.0], [93.0, 3793.0], [93.1, 4257.0], [93.2, 4435.0], [93.3, 4560.0], [93.4, 4673.0], [93.5, 4796.0], [93.6, 4842.0], [93.7, 4957.0], [93.8, 5009.0], [93.9, 5041.0], [94.0, 5075.0], [94.1, 5106.0], [94.2, 5140.0], [94.3, 5200.0], [94.4, 5288.0], [94.5, 5376.0], [94.6, 5455.0], [94.7, 5572.0], [94.8, 5687.0], [94.9, 5777.0], [95.0, 5845.0], [95.1, 5919.0], [95.2, 6009.0], [95.3, 6147.0], [95.4, 6270.0], [95.5, 6366.0], [95.6, 6440.0], [95.7, 6532.0], [95.8, 6672.0], [95.9, 6845.0], [96.0, 6950.0], [96.1, 7110.0], [96.2, 7213.0], [96.3, 7330.0], [96.4, 7453.0], [96.5, 7529.0], [96.6, 7642.0], [96.7, 7743.0], [96.8, 7844.0], [96.9, 7957.0], [97.0, 8064.0], [97.1, 8144.0], [97.2, 8242.0], [97.3, 8351.0], [97.4, 8491.0], [97.5, 8676.0], [97.6, 8899.0], [97.7, 9054.0], [97.8, 9290.0], [97.9, 9584.0], [98.0, 9910.0], [98.1, 10160.0], [98.2, 10287.0], [98.3, 10397.0], [98.4, 10443.0], [98.5, 10560.0], [98.6, 10651.0], [98.7, 10786.0], [98.8, 10945.0], [98.9, 11110.0], [99.0, 11244.0], [99.1, 11462.0], [99.2, 11664.0], [99.3, 11951.0], [99.4, 12076.0], [99.5, 12184.0], [99.6, 12254.0], [99.7, 12581.0], [99.8, 14412.0], [99.9, 14931.0], [100.0, 32602.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 1000.0, "maxY": 35232.0, "series": [{"data": [[1000.0, 3931.0], [1100.0, 35232.0], [1200.0, 3370.0], [1300.0, 3197.0], [1400.0, 2522.0], [1500.0, 1773.0], [1600.0, 1465.0], [1700.0, 1302.0], [1800.0, 660.0], [1900.0, 528.0], [2000.0, 407.0], [2100.0, 264.0], [2300.0, 128.0], [2200.0, 223.0], [2400.0, 145.0], [2500.0, 156.0], [2600.0, 74.0], [2800.0, 83.0], [2700.0, 118.0], [2900.0, 73.0], [3000.0, 63.0], [3100.0, 19.0], [3200.0, 46.0], [3300.0, 36.0], [3400.0, 25.0], [3500.0, 31.0], [3700.0, 44.0], [3600.0, 28.0], [3800.0, 6.0], [3900.0, 16.0], [4000.0, 5.0], [4100.0, 20.0], [4300.0, 27.0], [4200.0, 19.0], [4400.0, 64.0], [4500.0, 43.0], [4600.0, 50.0], [4800.0, 86.0], [4700.0, 50.0], [4900.0, 77.0], [5000.0, 186.0], [5100.0, 129.0], [5300.0, 77.0], [5200.0, 69.0], [5500.0, 44.0], [5600.0, 56.0], [5400.0, 67.0], [5700.0, 73.0], [5800.0, 85.0], [5900.0, 66.0], [6000.0, 54.0], [6100.0, 42.0], [6200.0, 51.0], [6300.0, 69.0], [6600.0, 46.0], [6400.0, 73.0], [6500.0, 46.0], [6900.0, 44.0], [6700.0, 35.0], [6800.0, 43.0], [7000.0, 41.0], [7100.0, 60.0], [7200.0, 45.0], [7400.0, 66.0], [7300.0, 47.0], [7600.0, 69.0], [7500.0, 52.0], [7700.0, 57.0], [7900.0, 68.0], [7800.0, 52.0], [8100.0, 83.0], [8000.0, 42.0], [8300.0, 59.0], [8200.0, 49.0], [8400.0, 40.0], [8500.0, 35.0], [8600.0, 36.0], [8700.0, 26.0], [8900.0, 34.0], [8800.0, 21.0], [9000.0, 44.0], [9100.0, 18.0], [9200.0, 26.0], [9300.0, 19.0], [9400.0, 24.0], [9500.0, 17.0], [9600.0, 16.0], [9700.0, 18.0], [10200.0, 50.0], [10100.0, 45.0], [10000.0, 22.0], [9800.0, 21.0], [9900.0, 15.0], [10400.0, 83.0], [10300.0, 56.0], [10700.0, 47.0], [10600.0, 59.0], [10500.0, 53.0], [11100.0, 34.0], [10900.0, 40.0], [11000.0, 32.0], [10800.0, 40.0], [11200.0, 41.0], [11300.0, 30.0], [11400.0, 32.0], [11500.0, 23.0], [11600.0, 40.0], [11700.0, 21.0], [11800.0, 15.0], [11900.0, 17.0], [12000.0, 81.0], [12200.0, 85.0], [12100.0, 32.0], [12400.0, 9.0], [12300.0, 20.0], [12600.0, 5.0], [12500.0, 5.0], [12700.0, 3.0], [12900.0, 5.0], [12800.0, 4.0], [13100.0, 5.0], [13000.0, 3.0], [13200.0, 2.0], [13300.0, 3.0], [13800.0, 4.0], [13600.0, 3.0], [13500.0, 2.0], [13400.0, 2.0], [14000.0, 5.0], [14300.0, 6.0], [14200.0, 1.0], [14100.0, 1.0], [13900.0, 3.0], [14400.0, 8.0], [14500.0, 17.0], [14700.0, 14.0], [14800.0, 8.0], [14600.0, 10.0], [15000.0, 6.0], [14900.0, 11.0], [15100.0, 7.0], [15300.0, 3.0], [15200.0, 2.0], [15700.0, 2.0], [15800.0, 1.0], [15400.0, 1.0], [15500.0, 1.0], [15600.0, 2.0], [16200.0, 2.0], [16100.0, 1.0], [16800.0, 1.0], [17000.0, 1.0], [17100.0, 1.0], [16900.0, 1.0], [16700.0, 1.0], [17900.0, 1.0], [18000.0, 2.0], [18200.0, 1.0], [17500.0, 1.0], [18500.0, 1.0], [18600.0, 1.0], [19800.0, 2.0], [20000.0, 1.0], [19500.0, 1.0], [20800.0, 3.0], [20700.0, 1.0], [22200.0, 1.0], [23000.0, 1.0], [23200.0, 1.0], [30700.0, 1.0], [30500.0, 1.0], [32600.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 32600.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 389.0, "minX": 1.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 48271.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 48271.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 11492.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 389.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 2225.8245312231165, "minX": 1.6841592E12, "maxY": 3000.0, "series": [{"data": [[1.68415938E12, 3000.0], [1.6841592E12, 3000.0], [1.68415926E12, 3000.0], [1.68415944E12, 3000.0], [1.6841595E12, 2225.8245312231165], [1.68415932E12, 3000.0]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6841595E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 1094.0, "minX": 1.0, "maxY": 7680.0, "series": [{"data": [[2.0, 7412.0], [3.0, 7395.0], [4.0, 1121.0], [5.0, 1103.0], [6.0, 1097.0], [7.0, 1095.0], [8.0, 1773.0], [9.0, 1754.0], [10.0, 1213.0], [11.0, 1207.0], [12.0, 1191.0], [13.0, 1201.0], [14.0, 1201.0], [15.0, 1201.0], [17.0, 1131.5], [18.0, 1133.0], [20.0, 1126.0], [22.0, 1124.0], [24.0, 1126.6666666666667], [26.0, 1130.6666666666667], [28.0, 1143.5], [30.0, 1127.0], [33.0, 1132.0], [35.0, 1128.5], [34.0, 1126.5], [37.0, 1126.0], [36.0, 1122.5], [38.0, 1123.0], [41.0, 1119.0], [43.0, 1117.6666666666667], [42.0, 1121.0], [45.0, 1126.5], [46.0, 1131.0], [50.0, 1114.5], [53.0, 1122.4], [59.0, 1124.6666666666667], [58.0, 1130.0], [60.0, 1122.0], [62.0, 1124.0], [66.0, 1121.0], [64.0, 1126.0], [70.0, 1123.0], [68.0, 1126.0], [74.0, 1132.0], [73.0, 1132.25], [77.0, 1123.6666666666667], [82.0, 1129.25], [87.0, 1122.0], [84.0, 1128.3333333333333], [90.0, 1122.75], [94.0, 1127.0], [92.0, 1121.5], [98.0, 1121.5], [96.0, 1131.3333333333333], [106.0, 1115.0], [105.0, 1120.0], [104.0, 1123.25], [112.0, 1121.0], [117.0, 1116.5], [116.0, 1125.0], [122.0, 1125.0], [126.0, 1119.8333333333335], [135.0, 1108.5], [132.0, 1114.0], [129.0, 1109.0], [128.0, 1116.5], [139.0, 1109.6666666666667], [136.0, 1107.0], [151.0, 1100.0], [148.0, 1099.25], [145.0, 1105.0], [159.0, 1174.0], [158.0, 1197.0], [157.0, 1227.0], [156.0, 1273.0], [155.0, 7680.0], [154.0, 1095.0], [152.0, 1100.0], [167.0, 1170.0], [166.0, 1190.0], [165.0, 1157.0], [164.0, 1195.0], [163.0, 1153.0], [162.0, 1163.0], [161.0, 1218.0], [160.0, 1237.0], [173.0, 3311.0], [172.0, 1140.5], [170.0, 1149.0], [169.0, 1168.0], [168.0, 1144.0], [183.0, 1120.6666666666667], [180.0, 1124.0], [178.0, 1122.0], [176.0, 1124.3333333333333], [191.0, 1124.0], [190.0, 1122.3333333333333], [189.0, 1124.0], [187.0, 1132.0], [186.0, 1128.0], [197.0, 1131.5], [195.0, 1119.0], [193.0, 1121.0], [206.0, 1128.0], [204.0, 1132.5], [200.0, 1124.0], [214.0, 1159.0], [212.0, 1128.0], [210.0, 1122.5], [208.0, 1129.6666666666667], [222.0, 1124.0], [219.0, 1124.2], [217.0, 1123.0], [216.0, 1126.0], [230.0, 1128.0], [227.0, 1120.0], [225.0, 1123.0], [236.0, 1120.5], [235.0, 1134.0], [234.0, 1121.0], [233.0, 1127.0], [232.0, 1126.0], [246.0, 1119.5], [244.0, 1133.0], [243.0, 1128.0], [240.0, 1129.0], [254.0, 1122.0], [252.0, 1128.0], [250.0, 1128.75], [271.0, 1128.5], [267.0, 1129.3333333333333], [264.0, 1125.0], [263.0, 1131.3333333333333], [260.0, 1128.3333333333333], [259.0, 1129.0], [257.0, 1122.5], [287.0, 1125.5], [285.0, 1122.0], [283.0, 1125.75], [279.0, 1123.3333333333333], [276.0, 1128.6666666666667], [274.0, 1126.0], [272.0, 1130.0], [303.0, 1127.0], [301.0, 1116.6666666666667], [298.0, 1127.0], [296.0, 1134.0], [294.0, 1125.6666666666667], [291.0, 1125.75], [319.0, 1117.3333333333333], [316.0, 1115.5], [315.0, 1124.0], [313.0, 1124.5], [309.0, 1122.0], [307.0, 1124.0], [305.0, 1121.0], [334.0, 1108.0], [331.0, 1115.0], [330.0, 1107.0], [328.0, 1107.0], [325.0, 1118.0], [322.0, 1127.0], [321.0, 1118.0], [350.0, 1100.5], [349.0, 1102.0], [347.0, 1101.0], [346.0, 1104.0], [344.0, 1101.0], [342.0, 1104.0], [341.0, 1106.0], [339.0, 1105.6666666666667], [336.0, 1111.5], [367.0, 1107.0], [366.0, 1105.6666666666667], [355.0, 1096.0], [354.0, 1096.0], [353.0, 1099.0], [352.0, 1097.5], [363.0, 1103.0], [362.0, 1104.0], [361.0, 1118.0], [360.0, 1113.0], [359.0, 1196.0], [358.0, 1212.0], [357.0, 1215.0], [356.0, 1440.0], [382.0, 1104.0], [381.0, 1110.0], [378.0, 1107.3333333333333], [375.0, 1110.0], [373.0, 1102.0], [372.0, 1101.75], [368.0, 1103.0], [396.0, 1098.5], [394.0, 1100.0], [393.0, 1103.0], [391.0, 1102.0], [390.0, 1099.5], [388.0, 1103.5], [386.0, 1099.5], [384.0, 1099.5], [414.0, 1103.0], [415.0, 1125.0], [413.0, 1102.0], [412.0, 1142.0], [411.0, 1103.0], [410.0, 1107.0], [408.0, 1098.5], [406.0, 1100.0], [402.0, 1100.0], [401.0, 1109.0], [400.0, 1103.75], [405.0, 1102.6666666666667], [430.0, 1102.0], [429.0, 1115.0], [428.0, 1115.0], [427.0, 1103.0], [426.0, 1117.0], [424.0, 1096.0], [423.0, 1100.3333333333333], [420.0, 1104.4], [445.0, 1108.0], [446.0, 1097.0], [444.0, 1109.6666666666667], [441.0, 1103.0], [440.0, 1103.0], [437.0, 1099.5], [435.0, 1102.0], [434.0, 1099.0], [432.0, 1099.5], [463.0, 1100.0], [460.0, 1096.0], [459.0, 1108.5], [457.0, 1099.0], [456.0, 1106.5], [454.0, 1104.0], [452.0, 1105.5], [451.0, 1105.0], [449.0, 1101.6666666666667], [478.0, 1104.5], [475.0, 1113.0], [474.0, 1103.0], [472.0, 1101.3333333333333], [469.0, 1102.6666666666667], [467.0, 1101.6666666666667], [494.0, 1099.0], [493.0, 1101.6666666666667], [490.0, 1097.0], [489.0, 1110.6666666666667], [486.0, 1106.0], [484.0, 1112.0], [483.0, 1110.0], [480.0, 1112.0], [510.0, 1101.6666666666667], [508.0, 1097.0], [507.0, 1105.0], [506.0, 1105.5], [503.0, 1107.5], [501.0, 1117.0], [500.0, 1096.3333333333333], [498.0, 1100.0], [497.0, 1097.0], [540.0, 1101.75], [538.0, 1101.0], [534.0, 1103.75], [522.0, 1107.0], [544.0, 1104.0], [570.0, 1308.0], [568.0, 1299.0], [546.0, 1102.2], [558.0, 1335.0], [556.0, 1977.0], [554.0, 1096.0], [552.0, 1101.0], [578.0, 1255.0], [576.0, 1274.3333333333333], [596.0, 1218.6666666666667], [632.0, 1201.3333333333333], [636.0, 1181.25], [610.0, 1208.0], [608.0, 1209.3333333333333], [622.0, 1198.0], [618.0, 1207.5], [616.0, 1207.3333333333333], [656.0, 1146.5], [666.0, 1131.0], [662.0, 1132.0], [660.0, 1138.5], [658.0, 1127.5], [654.0, 1132.5], [650.0, 1129.3333333333333], [648.0, 1129.5], [700.0, 1130.5], [698.0, 1128.5], [690.0, 1131.5], [686.0, 1134.0], [674.0, 1465.0], [682.0, 1132.5], [680.0, 1129.0], [730.0, 1116.5], [728.0, 1123.6666666666667], [726.0, 1131.0], [720.0, 1123.0], [706.0, 1129.25], [704.0, 1131.0], [710.0, 1131.0], [718.0, 1123.0], [764.0, 1168.0], [754.0, 1097.0], [756.0, 1200.0], [766.0, 1162.0], [762.0, 1173.0], [760.0, 1180.0], [736.0, 1119.3333333333333], [748.0, 1103.0], [746.0, 1103.6666666666667], [758.0, 1183.0], [794.0, 1110.3333333333333], [786.0, 1107.0], [798.0, 1122.3333333333333], [796.0, 1109.0], [768.0, 1198.0], [772.0, 1151.0], [774.0, 1129.0], [782.0, 1113.3333333333333], [776.0, 1112.5], [788.0, 1110.0], [828.0, 1113.5], [830.0, 1112.5], [826.0, 1109.3333333333333], [824.0, 1115.0], [822.0, 1114.0], [802.0, 1138.0], [812.0, 1115.0], [808.0, 1115.0], [860.0, 1121.0], [852.0, 1118.6666666666667], [850.0, 1116.0], [834.0, 1115.5], [836.0, 1117.0], [842.0, 1112.3333333333333], [890.0, 1112.0], [888.0, 1117.5], [886.0, 1117.3333333333333], [880.0, 1120.5], [876.0, 1122.5], [868.0, 1128.0], [874.0, 1120.0], [872.0, 1124.0], [922.0, 1106.0], [916.0, 1102.0], [914.0, 1108.0], [908.0, 1113.0], [956.0, 5148.0], [958.0, 5367.0], [948.0, 1101.5], [946.0, 1099.6666666666667], [954.0, 5188.0], [934.0, 1111.0], [932.0, 1101.5], [928.0, 1106.3333333333333], [942.0, 1104.0], [940.0, 1102.3333333333333], [936.0, 1104.0], [950.0, 1101.0], [966.0, 1239.3333333333333], [990.0, 1110.0], [978.0, 1151.0], [984.0, 1128.0], [962.0, 1586.0], [960.0, 1685.0], [974.0, 1194.0], [972.0, 1195.0], [970.0, 1203.5], [968.0, 1207.0], [980.0, 1143.0], [996.0, 1115.0], [1022.0, 1108.0], [992.0, 1114.5], [1012.0, 1115.5], [1010.0, 1116.0], [1004.0, 1117.0], [1002.0, 1112.0], [1000.0, 1115.0], [1080.0, 1126.0], [1084.0, 1128.0], [1076.0, 1132.0], [1052.0, 1133.0], [1036.0, 1118.0], [1048.0, 1117.0], [1040.0, 1121.0], [1068.0, 1131.6666666666667], [1064.0, 1127.0], [1136.0, 1106.0], [1124.0, 1112.0], [1148.0, 1103.0], [1140.0, 1106.5], [1100.0, 1135.75], [1096.0, 1131.3333333333333], [1088.0, 1128.25], [1116.0, 1112.0], [1108.0, 1131.0], [1164.0, 1212.0], [1208.0, 1102.5], [1212.0, 1104.0], [1200.0, 1106.3333333333333], [1160.0, 2444.0], [1156.0, 1101.4], [1152.0, 1103.0], [1180.0, 1112.0], [1176.0, 1116.0], [1172.0, 1142.0], [1168.0, 1153.0], [1276.0, 1105.0], [1272.0, 1101.0], [1260.0, 1106.0], [1220.0, 1106.3333333333333], [1224.0, 1109.0], [1228.0, 1107.0], [1336.0, 1100.5], [1332.0, 1100.0], [1288.0, 1106.0], [1280.0, 1101.0], [1304.0, 1105.5], [1296.0, 1102.0], [1396.0, 1246.0], [1404.0, 1234.5], [1380.0, 1560.6666666666667], [1400.0, 1294.0], [1392.0, 1344.0], [1356.0, 1096.0], [1352.0, 1104.0], [1344.0, 1100.0], [1368.0, 1590.0], [1364.0, 1759.0], [1360.0, 1955.0], [1388.0, 1345.0], [1456.0, 1122.0], [1468.0, 1111.5], [1440.0, 1144.0], [1460.0, 1124.0], [1412.0, 1219.0], [1408.0, 1225.0], [1416.0, 1266.0], [1420.0, 1279.0], [1436.0, 1543.0], [1428.0, 1280.0], [1424.0, 1259.0], [1452.0, 1126.0], [1448.0, 1123.0], [1520.0, 1110.0], [1524.0, 1268.5], [1484.0, 1105.25], [1480.0, 1110.0], [1472.0, 1105.0], [1516.0, 1108.0], [1512.0, 1107.0], [1500.0, 1137.0], [1492.0, 1123.6666666666667], [1544.0, 1103.0], [1596.0, 1335.0], [1592.0, 1421.5], [1588.0, 1418.3333333333333], [1536.0, 1106.6666666666667], [1564.0, 1455.0], [1560.0, 1482.0], [1556.0, 1103.0], [1580.0, 1411.0], [1572.0, 1294.0], [1568.0, 1320.0], [1660.0, 1309.0], [1608.0, 1275.0], [1644.0, 1260.0], [1628.0, 1333.0], [1620.0, 1332.5], [1616.0, 1307.25], [1720.0, 1104.0], [1724.0, 1161.3333333333333], [1696.0, 1111.0], [1700.0, 1110.0], [1716.0, 1102.5], [1668.0, 1216.0], [1672.0, 1143.0], [1676.0, 1166.0], [1692.0, 1108.0], [1688.0, 1109.0], [1684.0, 1212.0], [1680.0, 1204.0], [1704.0, 1107.0], [1780.0, 1104.0], [1788.0, 1106.0], [1740.0, 1100.3333333333333], [1736.0, 1105.5], [1728.0, 1141.0], [1748.0, 1110.0], [1744.0, 1103.0], [1772.0, 1102.0], [1768.0, 1127.0], [1760.0, 1101.3333333333333], [1852.0, 1118.0], [1824.0, 1100.0], [1828.0, 1114.0], [1836.0, 1097.0], [1844.0, 1110.0], [1840.0, 1148.0], [1804.0, 1114.0], [1800.0, 1119.0], [1796.0, 1123.0], [1820.0, 1109.0], [1892.0, 1104.0], [1896.0, 1104.6666666666667], [1908.0, 1413.0], [1860.0, 1113.0], [1868.0, 1105.0], [1884.0, 1113.0], [1876.0, 1116.0], [1900.0, 1099.0], [1976.0, 1955.0], [1980.0, 1937.0], [1960.0, 1103.0], [1964.0, 1101.25], [1932.0, 1406.3333333333333], [1948.0, 1098.0], [1940.0, 1102.0], [1936.0, 1100.0], [2032.0, 1492.5], [2020.0, 1817.0], [2016.0, 1815.0], [2024.0, 1797.0], [2028.0, 1549.0], [1984.0, 1933.5], [1988.0, 1908.0], [1992.0, 1887.0], [2012.0, 1832.0], [2008.0, 1837.0], [2004.0, 1865.25], [2160.0, 1567.0], [2120.0, 1129.0], [2128.0, 1132.0], [2136.0, 1129.5], [2152.0, 1117.0], [2072.0, 1438.0], [2056.0, 1457.0], [2048.0, 1479.0], [2080.0, 1423.6666666666667], [2288.0, 1390.0], [2240.0, 1406.0], [2296.0, 1386.3333333333333], [2248.0, 1400.75], [2256.0, 1400.8], [2280.0, 1391.0], [2200.0, 1414.3333333333333], [2176.0, 1424.0], [2232.0, 1408.0], [2216.0, 1409.6666666666667], [2208.0, 1413.3333333333333], [2424.0, 1285.0], [2376.0, 1596.0], [2384.0, 1566.0], [2392.0, 1380.0], [2416.0, 1264.0], [2408.0, 1271.0], [2400.0, 1283.0], [2360.0, 1602.0], [2352.0, 1102.0], [2344.0, 1358.0], [2536.0, 1099.0], [2544.0, 1104.5], [2552.0, 1098.6666666666667], [2496.0, 1145.0], [2504.0, 1131.5], [2528.0, 1103.0], [2448.0, 1274.3333333333333], [2440.0, 1287.6666666666667], [2432.0, 1318.0], [2488.0, 1154.0], [2480.0, 1115.0], [2472.0, 1259.0], [2464.0, 1280.0], [2656.0, 1476.0], [2680.0, 1448.0], [2624.0, 1468.0], [2632.0, 1467.0], [2560.0, 1562.0], [2568.0, 1549.0], [2576.0, 1541.0], [2584.0, 1519.0], [2608.0, 1469.5], [2600.0, 1490.0], [2592.0, 1507.0], [2800.0, 1690.0], [2752.0, 1101.0], [2776.0, 1751.0], [2808.0, 1678.0], [2792.0, 1745.0], [2704.0, 1434.0], [2744.0, 1108.0], [2736.0, 1257.0], [2720.0, 1433.0], [2936.0, 1326.0], [2880.0, 1348.5], [2896.0, 1332.0], [2904.0, 1318.0], [2928.0, 1325.0], [2920.0, 1315.0], [2912.0, 1330.5], [2816.0, 1661.0], [2824.0, 1644.0], [2832.0, 1472.0], [2840.0, 1388.6666666666667], [2848.0, 1364.0], [2992.0, 1377.0769230769233], [3000.0, 1759.789393354629], [2944.0, 1106.0], [2968.0, 1454.0], [2976.0, 1433.6666666666667], [2153.0, 1116.0], [2169.0, 1544.5], [2113.0, 1341.5], [2137.0, 1122.0], [2049.0, 1473.0], [2057.0, 1463.0], [2065.0, 1440.5], [2073.0, 1437.0], [2097.0, 1420.0], [2281.0, 1390.0], [2297.0, 1383.0], [2241.0, 1405.0], [2249.0, 1397.0], [2265.0, 1395.0], [2201.0, 1413.5], [2193.0, 1415.0], [2185.0, 1420.0], [2225.0, 1405.0], [2417.0, 1269.0], [2385.0, 1577.0], [2369.0, 1596.5], [2377.0, 1591.0], [2393.0, 1307.0], [2409.0, 1278.0], [2313.0, 1369.0], [2305.0, 1377.0], [2321.0, 1381.0], [2329.0, 1373.0], [2361.0, 1602.0], [2353.0, 1701.0], [2345.0, 1333.0], [2337.0, 1363.25], [2537.0, 1098.0], [2553.0, 1095.0], [2497.0, 1102.0], [2505.0, 1128.0], [2513.0, 1111.0], [2457.0, 1266.0], [2441.0, 1285.0], [2489.0, 1102.0], [2481.0, 1113.0], [2473.0, 1259.0], [2673.0, 1456.0], [2665.0, 1445.0], [2681.0, 1464.0], [2625.0, 1466.0], [2633.0, 1459.0], [2641.0, 1464.3333333333333], [2561.0, 1569.0], [2569.0, 1547.0], [2577.0, 1517.0], [2585.0, 1494.0], [2593.0, 1477.0], [2793.0, 1735.0], [2753.0, 1116.0], [2769.0, 1754.0], [2809.0, 1672.0], [2785.0, 1749.5], [2705.0, 1441.0], [2697.0, 1441.0], [2689.0, 1438.3333333333333], [2745.0, 1109.0], [2737.0, 1265.0], [2729.0, 1376.0], [2721.0, 1426.0], [2937.0, 1322.0], [2921.0, 1316.0], [2881.0, 1357.0], [2889.0, 1341.4], [2897.0, 1365.0], [2905.0, 1325.0], [2929.0, 1335.0], [2913.0, 1319.0], [2817.0, 1663.0], [2825.0, 1493.0], [2833.0, 1448.0], [2873.0, 1352.0], [2857.0, 1362.0], [2849.0, 1367.0], [2953.0, 1516.0], [2945.0, 1104.0], [2961.0, 1448.1333333333334], [2969.0, 1437.333333333333], [2993.0, 1360.0], [2985.0, 1403.75], [2977.0, 1413.0], [1081.0, 1129.0], [1033.0, 1124.0], [1029.0, 1116.5], [1061.0, 1133.0], [1057.0, 1129.0], [1049.0, 1128.0], [1149.0, 1100.0], [1145.0, 1103.0], [1129.0, 1110.0], [1125.0, 1113.0], [1121.0, 1106.0], [1165.0, 1191.0], [1161.0, 1425.0], [1157.0, 1098.0], [1197.0, 1109.0], [1185.0, 1107.0], [1169.0, 1131.0], [1277.0, 1109.0], [1269.0, 1104.0], [1257.0, 1104.6666666666667], [1249.0, 1102.0], [1233.0, 1101.25], [1337.0, 1106.0], [1341.0, 1108.0], [1329.0, 1100.0], [1293.0, 1111.0], [1285.0, 1100.5], [1321.0, 1098.0], [1297.0, 1101.6666666666667], [1401.0, 1294.0], [1405.0, 1288.0], [1377.0, 1600.0], [1381.0, 1534.0], [1397.0, 1245.0], [1345.0, 1102.6666666666667], [1349.0, 1100.5], [1357.0, 1098.0], [1373.0, 1581.0], [1369.0, 1589.0], [1365.0, 1729.0], [1361.0, 1902.0], [1389.0, 1395.0], [1385.0, 1527.0], [1413.0, 1275.0], [1465.0, 1108.0], [1461.0, 1123.0], [1421.0, 1265.0], [1409.0, 1278.0], [1445.0, 1152.25], [1433.0, 1275.0], [1429.0, 1248.0], [1425.0, 1257.0], [1473.0, 1108.5], [1533.0, 1515.0], [1501.0, 1148.0], [1517.0, 1098.0], [1513.0, 1102.0], [1509.0, 1144.0], [1505.0, 1334.0], [1545.0, 1099.0], [1585.0, 1407.0], [1541.0, 1103.5], [1537.0, 1112.0], [1577.0, 1337.3333333333333], [1573.0, 1362.5], [1565.0, 1300.0], [1561.0, 1354.0], [1557.0, 1103.0], [1637.0, 1341.0], [1641.0, 1325.0], [1657.0, 1333.0], [1649.0, 1317.5], [1613.0, 1211.0], [1601.0, 1321.2], [1645.0, 1337.0], [1669.0, 1150.0], [1713.0, 1111.0], [1677.0, 1193.0], [1673.0, 1202.0], [1665.0, 1329.0], [1689.0, 1109.0], [1685.0, 1119.0], [1681.0, 1133.0], [1709.0, 1103.0], [1705.0, 1106.0], [1701.0, 1110.0], [1697.0, 1103.0], [1741.0, 1107.0], [1785.0, 1108.5], [1765.0, 1096.0], [1789.0, 1112.0], [1769.0, 1113.0], [1737.0, 1126.0], [1733.0, 1106.3333333333333], [1729.0, 1101.0], [1757.0, 1113.0], [1753.0, 1142.6666666666667], [1749.0, 1109.6666666666667], [1773.0, 1109.6666666666667], [1845.0, 2060.0], [1849.0, 1111.0], [1829.0, 1101.0], [1833.0, 1191.5], [1837.0, 1095.0], [1841.0, 1128.0], [1793.0, 1119.0], [1817.0, 1135.3333333333333], [1813.0, 1104.0], [1809.0, 1102.0], [1865.0, 1106.5], [1917.0, 1722.3333333333333], [1889.0, 1106.0], [1905.0, 1097.0], [1857.0, 1108.5], [1869.0, 1099.0], [1885.0, 1105.0], [1881.0, 1104.25], [1877.0, 1109.0], [1873.0, 1102.0], [1901.0, 1107.0], [1973.0, 1988.5], [1969.0, 1403.3333333333333], [1953.0, 1100.0], [1957.0, 1098.0], [1981.0, 1937.0], [1921.0, 1099.0], [1925.0, 1101.5], [1929.0, 1567.5], [1933.0, 1102.0], [1945.0, 1103.5], [1941.0, 1115.0], [1937.0, 1098.0], [2041.0, 1487.5], [2017.0, 1821.0], [2021.0, 1814.0], [2025.0, 1792.0], [2029.0, 1505.0], [2045.0, 1480.5], [2037.0, 1488.5], [1985.0, 1930.0], [1989.0, 1906.0], [1993.0, 1885.0], [1997.0, 1882.5], [2013.0, 1831.0], [2005.0, 1860.0], [2162.0, 1558.0], [2130.0, 1126.0], [2138.0, 1123.0], [2170.0, 1556.0], [2154.0, 1922.0], [2146.0, 1113.3333333333333], [2074.0, 1437.0], [2066.0, 1446.0], [2050.0, 1465.0], [2098.0, 1419.0000000000002], [2298.0, 1388.0], [2290.0, 1384.0], [2250.0, 1401.0], [2274.0, 1392.8], [2194.0, 1414.0], [2178.0, 1425.0], [2266.0, 1393.3333333333333], [2402.0, 1280.5], [2426.0, 1262.0], [2418.0, 1268.0], [2378.0, 1585.0], [2386.0, 1440.0], [2394.0, 1306.0], [2306.0, 1381.0], [2314.0, 1368.0], [2330.0, 1357.0], [2362.0, 1596.0], [2354.0, 1615.0], [2346.0, 1137.0], [2338.0, 1366.0], [2450.0, 1264.5], [2514.0, 1107.0], [2554.0, 1663.0], [2530.0, 1109.5], [2434.0, 1251.5], [2490.0, 1104.0], [2482.0, 1109.0], [2474.0, 1216.0], [2466.0, 1276.5], [2658.0, 1457.0], [2626.0, 1458.0], [2650.0, 1476.0], [2666.0, 1461.0], [2562.0, 1567.0], [2570.0, 1532.0], [2578.0, 1541.0], [2586.0, 1511.0], [2610.0, 1458.0], [2602.0, 1471.0], [2786.0, 1741.0], [2810.0, 1670.0], [2762.0, 1752.0], [2802.0, 1682.3333333333333], [2714.0, 1419.0], [2706.0, 1439.0], [2746.0, 1100.0], [2730.0, 1372.0], [2722.0, 1422.75], [2826.0, 1474.0], [2898.0, 1323.0], [2906.0, 1317.0], [2922.0, 1314.0], [2818.0, 1665.0], [2834.0, 1432.0], [2842.0, 1393.5], [2874.0, 1350.0], [2866.0, 1364.3333333333333], [2858.0, 1360.0], [2850.0, 1395.0], [2946.0, 1114.0], [2954.0, 1504.0], [2962.0, 1437.0], [2994.0, 1362.0], [2986.0, 1406.0], [2171.0, 1555.0], [2115.0, 1332.0], [2123.0, 1125.0], [2139.0, 1134.0], [2155.0, 1791.0], [2051.0, 1464.0], [2059.0, 1465.0], [2067.0, 1445.0], [2075.0, 1429.0], [2083.0, 1421.6666666666667], [2291.0, 1387.6666666666667], [2243.0, 1404.0], [2187.0, 1420.5], [2235.0, 1406.0], [2219.0, 1408.0], [2211.0, 1413.0], [2419.0, 1265.0], [2371.0, 1594.0], [2379.0, 1585.0], [2387.0, 1385.0], [2395.0, 1297.0], [2411.0, 1277.0], [2403.0, 1279.0], [2315.0, 1370.0], [2323.0, 1362.0], [2363.0, 1599.0], [2355.0, 1616.0], [2347.0, 1132.0], [2555.0, 1682.0], [2547.0, 1103.0], [2539.0, 1105.5], [2459.0, 1251.0], [2443.0, 1284.0], [2475.0, 1151.0], [2659.0, 1456.75], [2651.0, 1461.5], [2683.0, 1449.0], [2675.0, 1446.0], [2563.0, 1553.0], [2571.0, 1548.0], [2579.0, 1536.0], [2587.0, 1517.0], [2611.0, 1470.0], [2603.0, 1482.0], [2595.0, 1498.0], [2707.0, 1454.0], [2755.0, 1100.0], [2779.0, 1747.0], [2715.0, 1422.0], [2699.0, 1431.0], [2747.0, 1095.0], [2739.0, 3642.0], [2731.0, 1371.0], [2891.0, 1339.0], [2931.0, 1307.5], [2899.0, 1332.0], [2907.0, 1326.0], [2923.0, 1322.0], [2819.0, 1656.0], [2827.0, 1462.0], [2835.0, 1411.5], [2947.0, 1118.0], [2955.0, 1511.0], [2963.0, 1445.1666666666665], [2971.0, 1435.0], [2987.0, 1409.8], [2979.0, 1431.75], [515.0, 1098.0], [519.0, 1103.5], [513.0, 1102.6666666666667], [531.0, 1099.0], [529.0, 1099.0], [527.0, 1102.5], [523.0, 1100.0], [521.0, 1102.0], [551.0, 1104.2], [571.0, 1290.0], [573.0, 1295.0], [565.0, 1284.0], [563.0, 1285.0], [561.0, 1332.0], [559.0, 1297.0], [557.0, 1334.0], [555.0, 1096.0], [553.0, 1100.0], [603.0, 1216.0], [605.0, 1213.0], [601.0, 1215.5], [583.0, 1239.0], [581.0, 1247.3333333333333], [577.0, 1247.0], [599.0, 1215.0], [597.0, 1216.0], [593.0, 1235.25], [589.0, 1235.5], [587.0, 1233.75], [609.0, 1226.0], [623.0, 1204.0], [613.0, 1211.3333333333333], [629.0, 1198.5], [627.0, 1196.75], [621.0, 1204.0], [619.0, 1206.0], [645.0, 1157.0], [669.0, 1134.0], [671.0, 1131.75], [665.0, 1136.5], [641.0, 1171.2], [643.0, 1179.5], [653.0, 1132.0], [651.0, 1127.0], [703.0, 1124.0], [697.0, 1132.0], [695.0, 1127.0], [693.0, 1130.5], [677.0, 1128.5], [685.0, 1141.0], [709.0, 1130.3333333333333], [731.0, 1125.0], [733.0, 1126.5], [725.0, 1116.0], [723.0, 1124.75], [719.0, 1126.0], [717.0, 1133.0], [715.0, 1127.0], [713.0, 1128.3333333333333], [765.0, 1166.0], [767.0, 1225.0], [753.0, 1100.5], [755.0, 1290.0], [757.0, 1195.0], [763.0, 1171.0], [761.0, 1175.0], [751.0, 1097.0], [739.0, 1104.0], [743.0, 1104.0], [741.0, 1103.0], [747.0, 1100.0], [759.0, 1183.0], [773.0, 1211.0], [799.0, 1113.0], [783.0, 1110.0], [769.0, 1156.0], [771.0, 1169.0], [779.0, 1139.5], [777.0, 1110.0], [791.0, 1110.3333333333333], [787.0, 1124.0], [785.0, 1109.0], [817.0, 1112.0], [819.0, 1119.0], [815.0, 1135.0], [805.0, 1113.0], [813.0, 1106.0], [811.0, 1116.5], [809.0, 1113.0], [861.0, 1123.0], [863.0, 1118.6666666666667], [857.0, 1119.0], [855.0, 1121.6666666666667], [849.0, 1115.0], [847.0, 1113.5], [839.0, 1126.3333333333333], [845.0, 1113.6666666666667], [891.0, 1110.0], [893.0, 1118.6666666666667], [883.0, 1120.3333333333333], [865.0, 1115.0], [871.0, 1120.0], [901.0, 1122.5], [925.0, 1106.0], [921.0, 1111.0], [903.0, 1114.3333333333333], [899.0, 1121.0], [897.0, 1113.5], [919.0, 1103.5], [911.0, 1114.4], [907.0, 1107.0], [959.0, 1739.0], [945.0, 1099.5], [957.0, 5200.0], [955.0, 5230.0], [953.0, 1095.0], [931.0, 1106.0], [939.0, 1102.0], [951.0, 1099.5], [985.0, 1115.0], [979.0, 1147.0], [989.0, 1113.0], [977.0, 1199.0], [987.0, 1113.5], [967.0, 1732.0], [963.0, 1229.0], [961.0, 1677.0], [975.0, 1191.0], [973.0, 1194.0], [971.0, 1206.0], [983.0, 1114.0], [981.0, 1138.0], [1017.0, 1117.5], [1023.0, 1119.5], [1021.0, 1118.0], [1019.0, 1111.5], [997.0, 1107.0], [993.0, 1112.0], [1015.0, 1116.6666666666667], [1007.0, 1113.6666666666667], [1003.0, 1118.0], [1001.0, 1113.5], [1078.0, 1119.0], [1062.0, 1125.0], [1030.0, 1115.0], [1026.0, 1121.3333333333333], [1038.0, 1118.5], [1050.0, 1131.0], [1046.0, 1120.0], [1066.0, 1122.5], [1058.0, 1132.0], [1122.0, 1109.0], [1094.0, 1129.0], [1134.0, 1106.0], [1130.0, 1108.0], [1126.0, 1110.0], [1118.0, 1114.0], [1114.0, 1121.0], [1110.0, 1127.0], [1106.0, 1128.3333333333333], [1202.0, 1140.0], [1206.0, 1105.0], [1166.0, 1189.0], [1162.0, 1235.0], [1158.0, 1098.0], [1194.0, 1116.4], [1186.0, 1105.0], [1182.0, 1114.0], [1170.0, 1147.0], [1226.0, 1106.0], [1278.0, 1097.0], [1270.0, 1102.0], [1258.0, 1111.0], [1254.0, 1106.3333333333333], [1246.0, 1097.8333333333333], [1218.0, 1109.0], [1222.0, 1119.0], [1230.0, 1112.0], [1242.0, 1101.0], [1238.0, 1101.0], [1330.0, 1102.5], [1334.0, 1102.0], [1338.0, 1097.0], [1342.0, 1101.0], [1318.0, 1102.75], [1314.0, 1099.6666666666667], [1310.0, 1099.6666666666667], [1294.0, 1103.0], [1290.0, 1100.0], [1302.0, 1105.0], [1398.0, 1243.0], [1406.0, 1229.0], [1386.0, 1565.0], [1402.0, 1237.0], [1358.0, 1098.0], [1350.0, 1096.0], [1374.0, 1547.0], [1370.0, 1581.0], [1366.0, 1663.0], [1362.0, 1850.0], [1390.0, 1345.0], [1414.0, 1269.0], [1470.0, 1115.0], [1466.0, 1118.5], [1458.0, 1127.0], [1438.0, 1188.5], [1422.0, 1223.0], [1434.0, 1244.0], [1430.0, 1250.0], [1426.0, 1267.0], [1454.0, 1125.0], [1446.0, 1151.0], [1478.0, 1108.4], [1514.0, 1101.0], [1510.0, 1137.5], [1506.0, 1112.0], [1502.0, 1117.0], [1498.0, 1097.6666666666667], [1494.0, 1101.0], [1490.0, 1102.0], [1538.0, 1111.0], [1594.0, 1296.5], [1590.0, 1421.5], [1586.0, 1273.0], [1566.0, 1320.0], [1546.0, 1105.0], [1562.0, 1299.0], [1558.0, 1515.0], [1554.0, 1104.0], [1570.0, 1425.5], [1654.0, 1318.75], [1662.0, 1276.5], [1602.0, 1305.0], [1638.0, 1297.5], [1634.0, 1302.0], [1630.0, 1313.6666666666667], [1626.0, 1343.0], [1714.0, 1129.0], [1722.0, 1103.0], [1698.0, 1106.0], [1718.0, 1109.5], [1694.0, 1109.0], [1666.0, 1319.0], [1670.0, 1197.0], [1674.0, 1198.0], [1678.0, 1147.0], [1682.0, 1253.0], [1710.0, 1104.0], [1706.0, 1112.0], [1702.0, 1110.0], [1778.0, 1111.5], [1766.0, 1102.6666666666667], [1734.0, 1103.0], [1730.0, 1095.0], [1758.0, 1104.0], [1754.0, 1115.0], [1750.0, 1102.0], [1770.0, 1109.0], [1762.0, 1109.0], [1846.0, 1107.0], [1830.0, 1097.0], [1834.0, 1103.0], [1838.0, 1135.0], [1854.0, 1423.6666666666667], [1806.0, 1108.0], [1802.0, 1116.0], [1798.0, 1213.0], [1822.0, 1097.3333333333333], [1814.0, 1108.0], [1810.0, 1104.6666666666667], [1918.0, 1098.0], [1914.0, 1413.6666666666667], [1890.0, 1100.0], [1898.0, 1103.5], [1870.0, 1109.0], [1882.0, 1095.0], [1874.0, 1097.0], [1958.0, 2013.0], [1982.0, 1936.0], [1966.0, 1553.5], [1978.0, 1952.0], [1974.0, 1959.0], [1970.0, 1991.0], [1942.0, 1143.0], [2046.0, 1475.0], [2022.0, 1812.0], [2042.0, 1490.0], [2030.0, 1497.0], [2034.0, 1489.0], [1986.0, 1921.0], [1994.0, 1883.0], [2006.0, 1848.0], [2156.0, 1567.0], [2116.0, 1258.0], [2124.0, 1127.0], [2132.0, 1125.0], [2140.0, 1125.0], [2172.0, 1549.0], [2148.0, 1116.5], [2076.0, 1424.0], [2060.0, 1448.0], [2100.0, 1398.5], [2084.0, 1425.0], [2252.0, 1398.0], [2244.0, 1403.0], [2260.0, 1399.0], [2196.0, 1416.5], [2180.0, 1422.5], [2220.0, 1409.0], [2212.0, 1415.0], [2268.0, 1393.0], [2404.0, 1281.0], [2412.0, 1270.0], [2428.0, 1260.0], [2388.0, 1359.0], [2396.0, 1289.0], [2364.0, 1596.0], [2308.0, 1375.6666666666667], [2316.0, 1371.0], [2356.0, 1608.0], [2348.0, 1132.0], [2444.0, 1295.0], [2556.0, 1650.0], [2500.0, 1106.0], [2508.0, 1119.3333333333333], [2516.0, 1114.5], [2524.0, 1105.3333333333333], [2436.0, 1248.5], [2492.0, 1103.5], [2476.0, 1145.0], [2468.0, 1272.5], [2668.0, 1453.0], [2676.0, 1438.0], [2636.0, 1473.0], [2644.0, 1462.6666666666667], [2620.0, 1469.4], [2564.0, 1546.0], [2588.0, 1511.0], [2604.0, 1474.0], [2596.0, 1480.0], [2804.0, 1679.0], [2812.0, 1666.0], [2756.0, 5757.0], [2772.0, 1750.3333333333333], [2780.0, 1754.0], [2796.0, 1738.6666666666667], [2716.0, 1416.0], [2700.0, 1440.0], [2692.0, 1448.6666666666667], [2748.0, 1102.0], [2740.0, 1148.0], [2732.0, 1374.0], [2828.0, 1454.0], [2924.0, 1314.0], [2940.0, 1203.6666666666667], [2884.0, 1343.3333333333333], [2892.0, 1339.0], [2900.0, 1349.0], [2820.0, 1656.0], [2836.0, 1402.0], [2844.0, 1388.5], [2876.0, 1354.0], [2860.0, 1357.5], [2852.0, 1367.0], [2956.0, 1504.3333333333333], [2948.0, 2416.0], [2964.0, 1431.8], [2972.0, 1431.0], [2996.0, 1369.3333333333333], [2988.0, 1379.3333333333333], [2980.0, 1422.0], [2165.0, 1554.0], [2117.0, 2042.0], [2141.0, 1130.0], [2173.0, 1465.0], [2149.0, 1117.0], [2053.0, 1472.0], [2061.0, 1451.0], [2069.0, 1440.5], [2077.0, 1425.0], [2109.0, 1384.3333333333333], [2285.0, 1388.6666666666667], [2261.0, 1392.0], [2269.0, 1392.5], [2293.0, 1388.0], [2277.0, 1395.0], [2205.0, 1411.5], [2189.0, 1416.0], [2229.0, 1407.6666666666667], [2421.0, 1284.0], [2413.0, 1267.0], [2381.0, 1582.5], [2389.0, 1406.0], [2397.0, 1283.0], [2429.0, 1258.0], [2325.0, 1369.0], [2333.0, 1365.3333333333333], [2365.0, 1596.0], [2357.0, 1607.0], [2349.0, 1134.0], [2341.0, 1363.0], [2533.0, 1102.3333333333333], [2509.0, 1113.0], [2557.0, 1577.0], [2541.0, 1105.0], [2445.0, 1272.0], [2437.0, 1254.0], [2485.0, 1109.3333333333333], [2477.0, 7543.0], [2661.0, 1446.0], [2685.0, 1441.0], [2629.0, 1466.0], [2637.0, 1464.0], [2645.0, 1455.0], [2565.0, 1545.0], [2573.0, 1548.0], [2581.0, 1535.5], [2613.0, 1471.0], [2605.0, 1477.0], [2597.0, 1497.0], [2717.0, 1426.0], [2805.0, 1680.0], [2757.0, 1757.0], [2781.0, 1743.0], [2797.0, 5661.0], [2701.0, 1433.0], [2749.0, 1102.0], [2741.0, 1114.0], [2725.0, 1418.1666666666667], [2925.0, 1332.0], [2933.0, 1320.0], [2909.0, 1332.5], [2941.0, 1123.0], [2917.0, 1338.5], [2821.0, 1646.0], [2829.0, 1464.0], [2837.0, 1401.0], [2845.0, 1373.0], [2853.0, 1360.0], [2949.0, 1534.0], [2997.0, 1372.0], [2957.0, 1474.1666666666665], [2965.0, 1437.75], [2989.0, 1393.0], [2981.0, 1426.5], [1079.0, 1126.5], [1031.0, 1114.0], [1071.0, 1125.3333333333333], [1063.0, 1124.0], [1051.0, 1123.0], [1047.0, 1113.0], [1043.0, 1125.5], [1147.0, 1096.0], [1139.0, 1109.0], [1131.0, 1115.0], [1111.0, 1125.6666666666667], [1091.0, 1129.0], [1103.0, 1129.6666666666667], [1095.0, 1126.0], [1203.0, 1107.0], [1215.0, 1109.3333333333333], [1167.0, 1170.0], [1163.0, 2167.0], [1159.0, 1098.0], [1191.0, 1103.5], [1187.0, 1109.5], [1179.0, 1108.5], [1171.0, 1117.0], [1271.0, 1102.0], [1267.0, 1102.75], [1263.0, 1101.6666666666667], [1251.0, 1099.75], [1239.0, 1096.0], [1227.0, 1131.0], [1235.0, 1099.0], [1331.0, 1101.0], [1343.0, 1109.0], [1287.0, 1100.0], [1283.0, 1101.3333333333333], [1327.0, 1104.6666666666667], [1323.0, 1109.6666666666667], [1311.0, 1115.0], [1303.0, 1102.0], [1299.0, 1098.5], [1395.0, 1305.6666666666667], [1407.0, 1225.0], [1383.0, 1532.0], [1399.0, 1241.0], [1375.0, 1545.0], [1347.0, 1100.0], [1355.0, 1099.0], [1351.0, 1099.0], [1359.0, 1097.0], [1371.0, 1568.0], [1367.0, 1648.0], [1363.0, 1773.0], [1391.0, 1338.0], [1387.0, 1513.0], [1423.0, 1266.0], [1419.0, 1269.3333333333333], [1471.0, 1109.0], [1415.0, 1227.0], [1411.0, 1274.5], [1451.0, 1127.3333333333333], [1447.0, 1127.0], [1443.0, 1159.0], [1439.0, 1206.0], [1435.0, 1250.0], [1431.0, 1246.0], [1427.0, 1256.0], [1523.0, 1108.0], [1507.0, 1131.0], [1531.0, 1109.75], [1527.0, 1110.6666666666667], [1503.0, 1138.0], [1487.0, 1110.6666666666667], [1499.0, 1599.0], [1495.0, 1126.5], [1491.0, 1095.0], [1551.0, 1104.0], [1595.0, 1302.0], [1547.0, 1107.3333333333333], [1539.0, 1101.5], [1583.0, 1323.6666666666667], [1579.0, 1317.0], [1575.0, 1457.0], [1567.0, 1445.0], [1563.0, 1295.0], [1559.0, 1096.0], [1555.0, 1108.0], [1655.0, 1319.0], [1659.0, 1327.0], [1663.0, 1196.0], [1639.0, 1357.5], [1611.0, 1312.3333333333333], [1607.0, 1361.5], [1603.0, 1425.0], [1631.0, 1335.0], [1623.0, 1293.0], [1647.0, 1330.0], [1643.0, 1295.3333333333333], [1679.0, 1146.0], [1703.0, 1113.0], [1727.0, 1106.3333333333333], [1719.0, 1106.0], [1675.0, 1199.0], [1671.0, 1144.0], [1667.0, 1318.0], [1695.0, 1104.0], [1691.0, 1185.0], [1687.0, 1180.5], [1711.0, 1104.0], [1791.0, 1115.25], [1787.0, 1106.0], [1763.0, 1102.0], [1783.0, 1110.5], [1743.0, 1189.5], [1755.0, 1111.0], [1747.0, 1107.0], [1775.0, 1100.0], [1855.0, 1107.0], [1851.0, 2058.0], [1827.0, 1098.6666666666667], [1831.0, 1094.0], [1839.0, 1137.0], [1843.0, 1592.0], [1799.0, 1129.0], [1795.0, 1132.0], [1819.0, 1107.0], [1911.0, 1104.3333333333333], [1895.0, 1116.0], [1887.0, 1101.0], [1859.0, 1105.5], [1863.0, 1423.6666666666667], [1867.0, 1102.0], [1883.0, 1099.0], [1875.0, 1117.0], [1903.0, 1099.5], [1899.0, 1104.0], [1975.0, 1954.0], [1979.0, 1951.0], [1955.0, 1121.0], [1959.0, 2010.0], [1971.0, 1989.0], [1951.0, 1418.6666666666667], [1923.0, 1108.0], [1927.0, 1100.5], [1947.0, 1580.5], [1943.0, 1095.0], [2043.0, 1485.0], [2019.0, 1813.0], [2023.0, 1806.0], [2027.0, 1788.0], [2039.0, 1488.0], [2035.0, 1483.0], [2015.0, 1819.5], [1987.0, 1920.0], [1991.0, 1897.5], [1999.0, 1880.6666666666667], [2011.0, 1833.3333333333333], [2007.0, 1836.0], [2003.0, 1866.0], [2158.0, 1571.5], [2166.0, 1563.0], [2174.0, 1448.0], [2134.0, 1129.0], [2150.0, 1115.0], [2070.0, 1439.0], [2062.0, 1443.0], [2054.0, 1464.0], [2110.0, 1370.8], [2286.0, 1386.0], [2262.0, 1394.5], [2206.0, 1412.5], [2190.0, 1416.0], [2182.0, 1422.0], [2238.0, 1402.3333333333333], [2214.0, 1408.0], [2374.0, 1597.0], [2398.0, 1286.0], [2414.0, 1272.0], [2406.0, 1279.5], [2310.0, 1375.5], [2318.0, 1366.5], [2350.0, 1116.0], [2550.0, 1100.0], [2462.0, 1280.5], [2502.0, 1105.5], [2510.0, 1110.0], [2518.0, 1108.0], [2558.0, 1584.0], [2454.0, 1282.5], [2494.0, 1104.5], [2486.0, 1108.0], [2470.0, 1274.0], [2678.0, 1450.5], [2670.0, 1454.3333333333333], [2654.0, 1460.5], [2566.0, 1548.0], [2574.0, 1540.0], [2582.0, 1515.0], [2590.0, 1508.5], [2606.0, 1477.0], [2598.0, 1488.0], [2798.0, 1695.0], [2758.0, 1754.0], [2766.0, 1753.0], [2774.0, 1750.5], [2782.0, 1742.0], [2814.0, 1666.5], [2718.0, 1426.0], [2750.0, 1101.0], [2742.0, 1115.0], [2734.0, 1365.5], [2726.0, 1358.0], [2926.0, 1313.0], [2910.0, 1341.0], [2878.0, 1348.0], [2822.0, 1647.0], [2830.0, 1478.0], [2846.0, 1365.0], [2870.0, 1367.25], [2854.0, 1355.0], [2958.0, 1445.6666666666667], [2950.0, 1531.75], [2966.0, 1424.0], [2974.0, 1434.6666666666667], [2998.0, 1321.6666666666667], [2990.0, 1383.2222222222222], [2982.0, 1416.8], [2167.0, 1561.0], [2175.0, 1435.0], [2119.0, 1134.0], [2127.0, 1129.3333333333333], [2143.0, 1116.5], [2151.0, 1112.0], [2111.0, 1355.6666666666667], [2055.0, 1460.0], [2063.0, 1450.0], [2095.0, 1420.0], [2287.0, 1390.0], [2279.0, 1387.0], [2303.0, 1382.0], [2191.0, 1413.5], [2183.0, 1419.0], [2231.0, 1406.0], [2223.0, 1408.3333333333333], [2415.0, 1264.0], [2423.0, 1265.0], [2431.0, 1290.0], [2383.0, 1556.5], [2391.0, 1360.0], [2399.0, 1280.0], [2407.0, 1276.0], [2367.0, 1600.5], [2319.0, 1369.0], [2327.0, 1360.0], [2359.0, 1581.5], [2351.0, 1117.0], [2343.0, 1360.6666666666667], [2519.0, 1104.5], [2559.0, 1573.0], [2527.0, 1108.0], [2535.0, 1108.0], [2495.0, 1103.0], [2487.0, 1105.0], [2479.0, 1124.0], [2671.0, 1455.0], [2639.0, 1465.0], [2647.0, 1467.0], [2655.0, 1451.5], [2663.0, 1463.5], [2567.0, 1546.0], [2583.0, 1521.0], [2591.0, 1500.0], [2615.0, 1467.0], [2599.0, 1491.0], [2791.0, 1739.4], [2815.0, 1667.0], [2807.0, 1685.5], [2775.0, 1755.0], [2783.0, 1747.0], [2703.0, 1442.5], [2695.0, 1437.25], [2751.0, 1125.0], [2743.0, 1118.0], [2735.0, 6030.0], [2935.0, 1328.0], [2943.0, 1112.5], [2895.0, 1339.3333333333333], [2903.0, 1344.0], [2823.0, 1647.0], [2831.0, 1449.0], [2847.0, 1378.0], [2871.0, 1358.0], [2863.0, 1358.0], [2855.0, 1354.0], [2951.0, 1525.1666666666667], [2959.0, 1452.6666666666665], [2967.0, 1436.3333333333333], [2999.0, 1121.0], [2991.0, 1375.6], [2983.0, 1418.1666666666665], [1.0, 7254.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[2925.184815134986, 1734.7853437957267]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 3000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 52607.65, "minX": 1.6841592E12, "maxY": 174193.35, "series": [{"data": [[1.68415938E12, 132061.68333333332], [1.6841592E12, 84087.05], [1.68415926E12, 174193.35], [1.68415944E12, 119530.36666666667], [1.6841595E12, 64751.683333333334], [1.68415932E12, 108896.71666666666]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.68415938E12, 107296.8], [1.6841592E12, 53919.9], [1.68415926E12, 141469.6], [1.68415944E12, 97115.55], [1.6841595E12, 52607.65], [1.68415932E12, 88445.65]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6841595E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 1191.1046727395421, "minX": 1.6841592E12, "maxY": 4872.47304539723, "series": [{"data": [[1.68415938E12, 1191.1046727395421], [1.6841592E12, 4872.47304539723], [1.68415926E12, 1390.221184597674], [1.68415944E12, 1265.1261764979988], [1.6841595E12, 1378.983485291591], [1.68415932E12, 1636.1043585021525]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6841595E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 1190.8166329284759, "minX": 1.6841592E12, "maxY": 4160.798549810851, "series": [{"data": [[1.68415938E12, 1190.8166329284759], [1.6841592E12, 4160.798549810851], [1.68415926E12, 1385.3986183958064], [1.68415944E12, 1264.7337619979473], [1.6841595E12, 1378.613796662656], [1.68415932E12, 1634.1976672805388]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6841595E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 14.419787449392723, "minX": 1.6841592E12, "maxY": 3177.9412042875038, "series": [{"data": [[1.68415938E12, 14.419787449392723], [1.6841592E12, 3177.9412042875038], [1.68415926E12, 173.91595241141127], [1.68415944E12, 104.92358587270586], [1.6841595E12, 188.7343884397043], [1.68415932E12, 141.60169838346604]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6841595E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 1090.0, "minX": 1.6841592E12, "maxY": 30548.0, "series": [{"data": [[1.68415938E12, 30548.0], [1.6841592E12, 23226.0], [1.68415926E12, 10021.0], [1.68415944E12, 8372.0], [1.6841595E12, 8087.0], [1.68415932E12, 19593.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.68415938E12, 1251.0], [1.6841592E12, 9996.800000000003], [1.68415926E12, 1908.7000000000007], [1.68415944E12, 1652.0], [1.6841595E12, 1735.0], [1.68415932E12, 1855.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.68415938E12, 2380.29000000003], [1.6841592E12, 14072.969999999998], [1.68415926E12, 4899.02], [1.68415944E12, 2316.8800000000047], [1.6841595E12, 5034.159999999998], [1.68415932E12, 12117.52]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.68415938E12, 1419.0], [1.6841592E12, 11033.2], [1.68415926E12, 2733.0], [1.68415944E12, 1792.0], [1.6841595E12, 1859.3000000000002], [1.68415932E12, 2653.2999999999993]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.68415938E12, 1091.0], [1.6841592E12, 1093.0], [1.68415926E12, 1091.0], [1.68415944E12, 1090.0], [1.6841595E12, 1092.0], [1.68415932E12, 1091.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.68415938E12, 1109.0], [1.6841592E12, 2129.5], [1.68415926E12, 1128.0], [1.68415944E12, 1110.0], [1.6841595E12, 1276.0], [1.68415932E12, 1147.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6841595E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 1100.0, "minX": 1.0, "maxY": 32602.0, "series": [{"data": [[2.0, 3043.5], [3.0, 2358.0], [4.0, 1804.0], [5.0, 4642.5], [6.0, 6022.5], [7.0, 1741.0], [8.0, 1772.5], [9.0, 1100.0], [11.0, 5119.0], [12.0, 5809.5], [13.0, 1510.0], [15.0, 1104.0], [24.0, 1113.0], [28.0, 7791.0], [31.0, 2611.0], [33.0, 11495.0], [40.0, 1107.0], [42.0, 1107.0], [43.0, 1397.0], [44.0, 1585.0], [48.0, 1104.0], [53.0, 1288.0], [57.0, 5135.0], [60.0, 1320.5], [63.0, 1557.5], [74.0, 5035.5], [76.0, 1362.5], [82.0, 1204.5], [96.0, 1124.0], [99.0, 1227.0], [102.0, 1103.5], [104.0, 1102.5], [109.0, 1124.0], [108.0, 1109.0], [113.0, 1115.0], [127.0, 1106.0], [124.0, 1238.5], [133.0, 1116.0], [138.0, 1436.5], [150.0, 1104.0], [147.0, 1418.0], [157.0, 1106.0], [158.0, 1330.5], [156.0, 1463.5], [167.0, 1108.0], [164.0, 1587.0], [161.0, 1102.0], [171.0, 1147.0], [172.0, 1523.0], [178.0, 1407.0], [182.0, 1104.0], [181.0, 1276.5], [176.0, 1598.0], [188.0, 1296.0], [185.0, 1593.0], [193.0, 1125.0], [197.0, 1116.0], [196.0, 1108.0], [192.0, 1280.5], [199.0, 1109.0], [198.0, 1109.0], [195.0, 1104.0], [201.0, 1112.0], [200.0, 1120.5], [206.0, 1112.0], [202.0, 1144.0], [204.0, 1108.0], [203.0, 1121.0], [208.0, 1172.0], [212.0, 1124.0], [210.0, 1284.0], [214.0, 1105.0], [220.0, 1609.0], [218.0, 1128.5], [229.0, 1351.0], [232.0, 1189.5], [236.0, 1104.0], [243.0, 1110.0], [252.0, 1331.0], [250.0, 1106.0], [264.0, 5873.5], [268.0, 1138.0], [263.0, 1201.0], [281.0, 6353.5], [272.0, 2178.0], [283.0, 1143.0], [300.0, 5464.5], [302.0, 1130.0], [293.0, 1136.0], [290.0, 1118.0], [288.0, 1551.0], [307.0, 7770.0], [308.0, 1384.0], [318.0, 1312.5], [314.0, 1631.0], [305.0, 1114.0], [309.0, 1546.0], [325.0, 1145.0], [328.0, 1113.0], [326.0, 1115.0], [321.0, 1484.5], [323.0, 1658.0], [329.0, 1387.0], [335.0, 1120.0], [336.0, 1221.0], [347.0, 1419.0], [344.0, 1105.0], [343.0, 1459.0], [352.0, 1123.5], [364.0, 1110.0], [376.0, 1150.0], [383.0, 1114.0], [369.0, 1111.0], [399.0, 1107.0], [393.0, 1141.5], [396.0, 1115.0], [388.0, 1105.0], [397.0, 1115.0], [394.0, 1108.0], [395.0, 1105.0], [398.0, 1150.5], [387.0, 1110.0], [404.0, 1114.0], [401.0, 1118.0], [400.0, 1106.0], [403.0, 1105.0], [402.0, 1103.0], [421.0, 1116.0], [416.0, 1136.0], [417.0, 1114.0], [446.0, 1112.0], [454.0, 10413.0], [456.0, 1162.0], [464.0, 1811.0], [471.0, 1129.0], [469.0, 1762.0], [478.0, 1108.0], [486.0, 1609.0], [495.0, 1118.0], [505.0, 1112.0], [537.0, 1137.0], [526.0, 1921.0], [527.0, 1841.0], [556.0, 7055.0], [553.0, 1106.0], [581.0, 1128.0], [588.0, 1110.0], [601.0, 1728.0], [587.0, 1638.0], [589.0, 1113.0], [590.0, 1106.5], [576.0, 1110.0], [621.0, 1114.0], [616.0, 1116.0], [658.0, 1107.0], [693.0, 1291.0], [794.0, 1107.0], [863.0, 1120.0], [884.0, 1113.0], [922.0, 1117.0], [1.0, 7395.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[537.0, 11563.5], [556.0, 11693.0], [178.0, 10907.5], [229.0, 11380.0], [57.0, 13995.0], [281.0, 15345.0], [300.0, 11196.0], [308.0, 10126.5], [376.0, 11922.0], [96.0, 14580.5], [393.0, 30704.0], [421.0, 14898.0], [454.0, 10917.0], [464.0, 10435.0], [471.0, 32602.0], [486.0, 11262.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 922.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 11495.0, "series": [{"data": [[2.0, 3043.0], [3.0, 2358.0], [4.0, 1804.0], [5.0, 4642.5], [6.0, 6022.0], [7.0, 1741.0], [8.0, 1772.5], [9.0, 1099.0], [11.0, 5118.0], [12.0, 5809.5], [13.0, 1510.0], [15.0, 1104.0], [24.0, 1113.0], [28.0, 7791.0], [31.0, 2611.0], [33.0, 11495.0], [40.0, 1106.5], [42.0, 1107.0], [43.0, 1395.0], [44.0, 1584.5], [48.0, 1104.0], [53.0, 1287.0], [57.0, 5132.0], [60.0, 1320.5], [63.0, 1557.5], [74.0, 5033.5], [76.0, 1362.0], [82.0, 1204.5], [96.0, 1124.0], [99.0, 1227.0], [102.0, 1103.0], [104.0, 1102.0], [109.0, 1124.0], [108.0, 1108.5], [113.0, 1115.0], [127.0, 1106.0], [124.0, 1238.5], [133.0, 1116.0], [138.0, 1436.0], [150.0, 1104.0], [147.0, 1418.0], [157.0, 1106.0], [158.0, 1329.5], [156.0, 1463.0], [167.0, 1108.0], [164.0, 1587.0], [161.0, 1102.0], [171.0, 1147.0], [172.0, 1523.0], [178.0, 1407.0], [182.0, 1104.0], [181.0, 1276.5], [176.0, 1597.5], [188.0, 1296.0], [185.0, 1593.0], [193.0, 1124.0], [197.0, 1116.0], [196.0, 1107.5], [192.0, 1280.5], [199.0, 1109.0], [198.0, 1108.0], [195.0, 1103.0], [201.0, 1112.0], [200.0, 1120.0], [206.0, 1111.5], [202.0, 1144.0], [204.0, 1108.0], [203.0, 1120.0], [208.0, 1170.5], [212.0, 1124.0], [210.0, 1284.0], [214.0, 1105.0], [220.0, 1609.0], [218.0, 1128.0], [229.0, 1351.0], [232.0, 1189.5], [236.0, 1104.0], [243.0, 1109.0], [252.0, 1331.0], [250.0, 1105.5], [264.0, 5873.5], [268.0, 1138.0], [263.0, 1201.0], [281.0, 6353.0], [272.0, 2177.0], [283.0, 1142.0], [300.0, 5464.5], [302.0, 1129.0], [293.0, 1136.0], [290.0, 1118.0], [288.0, 1551.0], [307.0, 7761.0], [308.0, 1384.0], [318.0, 1312.5], [314.0, 1630.5], [305.0, 1114.0], [309.0, 1546.0], [325.0, 1144.0], [328.0, 1113.0], [326.0, 1114.5], [321.0, 1484.5], [323.0, 1658.0], [329.0, 1387.0], [335.0, 1119.0], [336.0, 1221.0], [347.0, 1419.0], [344.0, 1104.0], [343.0, 1458.0], [352.0, 1123.5], [364.0, 1110.0], [376.0, 1150.0], [383.0, 1114.0], [369.0, 1111.0], [399.0, 1107.0], [393.0, 1140.5], [396.0, 1114.5], [388.0, 1104.0], [397.0, 1115.0], [394.0, 1108.0], [395.0, 1105.0], [398.0, 1150.0], [387.0, 1110.0], [404.0, 1113.0], [401.0, 1117.0], [400.0, 1106.0], [403.0, 1105.0], [402.0, 1103.0], [421.0, 1116.0], [416.0, 1135.5], [417.0, 1114.0], [446.0, 1112.0], [454.0, 10413.0], [456.0, 1162.0], [464.0, 1811.0], [471.0, 1129.0], [469.0, 1761.0], [478.0, 1108.0], [486.0, 1609.0], [495.0, 1118.0], [505.0, 1112.0], [537.0, 1136.0], [526.0, 1921.0], [527.0, 1841.0], [556.0, 7055.0], [553.0, 1106.0], [581.0, 1128.0], [588.0, 1109.0], [601.0, 1704.0], [587.0, 1637.0], [589.0, 1112.0], [590.0, 1106.0], [576.0, 1109.5], [621.0, 1114.0], [616.0, 1116.0], [658.0, 1107.0], [693.0, 1288.0], [794.0, 1107.0], [863.0, 1120.0], [884.0, 1113.0], [922.0, 1117.0], [1.0, 7395.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[537.0, 0.0], [556.0, 0.0], [178.0, 0.0], [229.0, 0.0], [57.0, 0.0], [281.0, 0.0], [300.0, 0.0], [308.0, 0.0], [376.0, 0.0], [96.0, 0.0], [393.0, 0.0], [421.0, 0.0], [454.0, 0.0], [464.0, 0.0], [471.0, 0.0], [486.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 922.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 89.2, "minX": 1.6841592E12, "maxY": 256.6666666666667, "series": [{"data": [[1.68415938E12, 200.0], [1.6841592E12, 113.33333333333333], [1.68415926E12, 256.6666666666667], [1.68415944E12, 183.33333333333334], [1.6841595E12, 89.2], [1.68415932E12, 160.0]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6841595E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.6841592E12, "maxY": 260.53333333333336, "series": [{"data": [[1.6841592E12, 0.5666666666666667]], "isOverall": false, "label": "Non HTTP response code: javax.net.ssl.SSLException", "isController": false}, {"data": [[1.68415938E12, 197.6], [1.6841592E12, 99.3], [1.68415926E12, 260.53333333333336], [1.68415944E12, 178.85], [1.6841595E12, 96.88333333333334], [1.68415932E12, 162.88333333333333]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.6841592E12, 2.6166666666666667]], "isOverall": false, "label": "Non HTTP response code: javax.net.ssl.SSLHandshakeException", "isController": false}, {"data": [[1.6841592E12, 3.2333333333333334], [1.68415926E12, 0.03333333333333333], [1.68415932E12, 0.016666666666666666]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.NoHttpResponseException", "isController": false}, {"data": [[1.6841592E12, 0.016666666666666666]], "isOverall": false, "label": "Non HTTP response code: java.net.SocketException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6841595E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.6841592E12, "maxY": 260.53333333333336, "series": [{"data": [[1.68415938E12, 197.6], [1.6841592E12, 99.3], [1.68415926E12, 260.53333333333336], [1.68415944E12, 178.85], [1.6841595E12, 96.88333333333334], [1.68415932E12, 162.88333333333333]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.6841592E12, 6.433333333333334], [1.68415926E12, 0.03333333333333333], [1.68415932E12, 0.016666666666666666]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6841595E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.6841592E12, "maxY": 260.53333333333336, "series": [{"data": [[1.68415938E12, 197.6], [1.6841592E12, 99.3], [1.68415926E12, 260.53333333333336], [1.68415944E12, 178.85], [1.6841595E12, 96.88333333333334], [1.68415932E12, 162.88333333333333]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.6841592E12, 6.433333333333334], [1.68415926E12, 0.03333333333333333], [1.68415932E12, 0.016666666666666666]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6841595E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

