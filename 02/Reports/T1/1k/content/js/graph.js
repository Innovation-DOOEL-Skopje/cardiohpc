/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 1090.0, "minX": 0.0, "maxY": 8302.0, "series": [{"data": [[0.0, 1090.0], [0.1, 1092.0], [0.2, 1093.0], [0.3, 1093.0], [0.4, 1094.0], [0.5, 1094.0], [0.6, 1094.0], [0.7, 1095.0], [0.8, 1095.0], [0.9, 1095.0], [1.0, 1095.0], [1.1, 1095.0], [1.2, 1096.0], [1.3, 1096.0], [1.4, 1096.0], [1.5, 1096.0], [1.6, 1096.0], [1.7, 1096.0], [1.8, 1096.0], [1.9, 1096.0], [2.0, 1096.0], [2.1, 1097.0], [2.2, 1097.0], [2.3, 1097.0], [2.4, 1097.0], [2.5, 1097.0], [2.6, 1097.0], [2.7, 1097.0], [2.8, 1097.0], [2.9, 1097.0], [3.0, 1097.0], [3.1, 1097.0], [3.2, 1097.0], [3.3, 1098.0], [3.4, 1098.0], [3.5, 1098.0], [3.6, 1098.0], [3.7, 1098.0], [3.8, 1098.0], [3.9, 1098.0], [4.0, 1098.0], [4.1, 1098.0], [4.2, 1098.0], [4.3, 1098.0], [4.4, 1098.0], [4.5, 1098.0], [4.6, 1098.0], [4.7, 1098.0], [4.8, 1099.0], [4.9, 1099.0], [5.0, 1099.0], [5.1, 1099.0], [5.2, 1099.0], [5.3, 1099.0], [5.4, 1099.0], [5.5, 1099.0], [5.6, 1099.0], [5.7, 1099.0], [5.8, 1099.0], [5.9, 1099.0], [6.0, 1099.0], [6.1, 1099.0], [6.2, 1099.0], [6.3, 1099.0], [6.4, 1099.0], [6.5, 1099.0], [6.6, 1099.0], [6.7, 1100.0], [6.8, 1100.0], [6.9, 1100.0], [7.0, 1100.0], [7.1, 1100.0], [7.2, 1100.0], [7.3, 1100.0], [7.4, 1100.0], [7.5, 1100.0], [7.6, 1100.0], [7.7, 1100.0], [7.8, 1100.0], [7.9, 1100.0], [8.0, 1100.0], [8.1, 1100.0], [8.2, 1100.0], [8.3, 1100.0], [8.4, 1100.0], [8.5, 1100.0], [8.6, 1100.0], [8.7, 1100.0], [8.8, 1100.0], [8.9, 1100.0], [9.0, 1100.0], [9.1, 1101.0], [9.2, 1101.0], [9.3, 1101.0], [9.4, 1101.0], [9.5, 1101.0], [9.6, 1101.0], [9.7, 1101.0], [9.8, 1101.0], [9.9, 1101.0], [10.0, 1101.0], [10.1, 1101.0], [10.2, 1101.0], [10.3, 1101.0], [10.4, 1101.0], [10.5, 1101.0], [10.6, 1101.0], [10.7, 1101.0], [10.8, 1101.0], [10.9, 1101.0], [11.0, 1101.0], [11.1, 1101.0], [11.2, 1101.0], [11.3, 1101.0], [11.4, 1101.0], [11.5, 1101.0], [11.6, 1101.0], [11.7, 1102.0], [11.8, 1102.0], [11.9, 1102.0], [12.0, 1102.0], [12.1, 1102.0], [12.2, 1102.0], [12.3, 1102.0], [12.4, 1102.0], [12.5, 1102.0], [12.6, 1102.0], [12.7, 1102.0], [12.8, 1102.0], [12.9, 1102.0], [13.0, 1102.0], [13.1, 1102.0], [13.2, 1102.0], [13.3, 1102.0], [13.4, 1102.0], [13.5, 1102.0], [13.6, 1102.0], [13.7, 1102.0], [13.8, 1102.0], [13.9, 1102.0], [14.0, 1102.0], [14.1, 1102.0], [14.2, 1102.0], [14.3, 1103.0], [14.4, 1103.0], [14.5, 1103.0], [14.6, 1103.0], [14.7, 1103.0], [14.8, 1103.0], [14.9, 1103.0], [15.0, 1103.0], [15.1, 1103.0], [15.2, 1103.0], [15.3, 1103.0], [15.4, 1103.0], [15.5, 1103.0], [15.6, 1103.0], [15.7, 1103.0], [15.8, 1103.0], [15.9, 1103.0], [16.0, 1103.0], [16.1, 1103.0], [16.2, 1103.0], [16.3, 1103.0], [16.4, 1103.0], [16.5, 1103.0], [16.6, 1103.0], [16.7, 1103.0], [16.8, 1103.0], [16.9, 1103.0], [17.0, 1104.0], [17.1, 1104.0], [17.2, 1104.0], [17.3, 1104.0], [17.4, 1104.0], [17.5, 1104.0], [17.6, 1104.0], [17.7, 1104.0], [17.8, 1104.0], [17.9, 1104.0], [18.0, 1104.0], [18.1, 1104.0], [18.2, 1104.0], [18.3, 1104.0], [18.4, 1104.0], [18.5, 1104.0], [18.6, 1104.0], [18.7, 1104.0], [18.8, 1104.0], [18.9, 1104.0], [19.0, 1104.0], [19.1, 1104.0], [19.2, 1104.0], [19.3, 1104.0], [19.4, 1104.0], [19.5, 1104.0], [19.6, 1104.0], [19.7, 1105.0], [19.8, 1105.0], [19.9, 1105.0], [20.0, 1105.0], [20.1, 1105.0], [20.2, 1105.0], [20.3, 1105.0], [20.4, 1105.0], [20.5, 1105.0], [20.6, 1105.0], [20.7, 1105.0], [20.8, 1105.0], [20.9, 1105.0], [21.0, 1105.0], [21.1, 1105.0], [21.2, 1105.0], [21.3, 1105.0], [21.4, 1105.0], [21.5, 1105.0], [21.6, 1105.0], [21.7, 1105.0], [21.8, 1105.0], [21.9, 1105.0], [22.0, 1105.0], [22.1, 1105.0], [22.2, 1105.0], [22.3, 1105.0], [22.4, 1106.0], [22.5, 1106.0], [22.6, 1106.0], [22.7, 1106.0], [22.8, 1106.0], [22.9, 1106.0], [23.0, 1106.0], [23.1, 1106.0], [23.2, 1106.0], [23.3, 1106.0], [23.4, 1106.0], [23.5, 1106.0], [23.6, 1106.0], [23.7, 1106.0], [23.8, 1106.0], [23.9, 1106.0], [24.0, 1106.0], [24.1, 1106.0], [24.2, 1106.0], [24.3, 1106.0], [24.4, 1106.0], [24.5, 1106.0], [24.6, 1106.0], [24.7, 1106.0], [24.8, 1106.0], [24.9, 1107.0], [25.0, 1107.0], [25.1, 1107.0], [25.2, 1107.0], [25.3, 1107.0], [25.4, 1107.0], [25.5, 1107.0], [25.6, 1107.0], [25.7, 1107.0], [25.8, 1107.0], [25.9, 1107.0], [26.0, 1107.0], [26.1, 1107.0], [26.2, 1107.0], [26.3, 1107.0], [26.4, 1107.0], [26.5, 1107.0], [26.6, 1107.0], [26.7, 1107.0], [26.8, 1107.0], [26.9, 1107.0], [27.0, 1107.0], [27.1, 1107.0], [27.2, 1107.0], [27.3, 1108.0], [27.4, 1108.0], [27.5, 1108.0], [27.6, 1108.0], [27.7, 1108.0], [27.8, 1108.0], [27.9, 1108.0], [28.0, 1108.0], [28.1, 1108.0], [28.2, 1108.0], [28.3, 1108.0], [28.4, 1108.0], [28.5, 1108.0], [28.6, 1108.0], [28.7, 1108.0], [28.8, 1108.0], [28.9, 1108.0], [29.0, 1108.0], [29.1, 1108.0], [29.2, 1108.0], [29.3, 1109.0], [29.4, 1109.0], [29.5, 1109.0], [29.6, 1109.0], [29.7, 1109.0], [29.8, 1109.0], [29.9, 1109.0], [30.0, 1109.0], [30.1, 1109.0], [30.2, 1109.0], [30.3, 1109.0], [30.4, 1109.0], [30.5, 1109.0], [30.6, 1109.0], [30.7, 1109.0], [30.8, 1109.0], [30.9, 1109.0], [31.0, 1109.0], [31.1, 1109.0], [31.2, 1109.0], [31.3, 1110.0], [31.4, 1110.0], [31.5, 1110.0], [31.6, 1110.0], [31.7, 1110.0], [31.8, 1110.0], [31.9, 1110.0], [32.0, 1110.0], [32.1, 1110.0], [32.2, 1110.0], [32.3, 1110.0], [32.4, 1110.0], [32.5, 1110.0], [32.6, 1110.0], [32.7, 1110.0], [32.8, 1110.0], [32.9, 1110.0], [33.0, 1110.0], [33.1, 1111.0], [33.2, 1111.0], [33.3, 1111.0], [33.4, 1111.0], [33.5, 1111.0], [33.6, 1111.0], [33.7, 1111.0], [33.8, 1111.0], [33.9, 1111.0], [34.0, 1111.0], [34.1, 1111.0], [34.2, 1111.0], [34.3, 1111.0], [34.4, 1111.0], [34.5, 1111.0], [34.6, 1111.0], [34.7, 1111.0], [34.8, 1112.0], [34.9, 1112.0], [35.0, 1112.0], [35.1, 1112.0], [35.2, 1112.0], [35.3, 1112.0], [35.4, 1112.0], [35.5, 1112.0], [35.6, 1112.0], [35.7, 1112.0], [35.8, 1112.0], [35.9, 1112.0], [36.0, 1112.0], [36.1, 1112.0], [36.2, 1113.0], [36.3, 1113.0], [36.4, 1113.0], [36.5, 1113.0], [36.6, 1113.0], [36.7, 1113.0], [36.8, 1113.0], [36.9, 1113.0], [37.0, 1113.0], [37.1, 1113.0], [37.2, 1113.0], [37.3, 1113.0], [37.4, 1113.0], [37.5, 1114.0], [37.6, 1114.0], [37.7, 1114.0], [37.8, 1114.0], [37.9, 1114.0], [38.0, 1114.0], [38.1, 1114.0], [38.2, 1114.0], [38.3, 1114.0], [38.4, 1114.0], [38.5, 1114.0], [38.6, 1114.0], [38.7, 1115.0], [38.8, 1115.0], [38.9, 1115.0], [39.0, 1115.0], [39.1, 1115.0], [39.2, 1115.0], [39.3, 1115.0], [39.4, 1115.0], [39.5, 1115.0], [39.6, 1115.0], [39.7, 1115.0], [39.8, 1116.0], [39.9, 1116.0], [40.0, 1116.0], [40.1, 1116.0], [40.2, 1116.0], [40.3, 1116.0], [40.4, 1116.0], [40.5, 1116.0], [40.6, 1116.0], [40.7, 1116.0], [40.8, 1117.0], [40.9, 1117.0], [41.0, 1117.0], [41.1, 1117.0], [41.2, 1117.0], [41.3, 1117.0], [41.4, 1117.0], [41.5, 1117.0], [41.6, 1117.0], [41.7, 1118.0], [41.8, 1118.0], [41.9, 1118.0], [42.0, 1118.0], [42.1, 1118.0], [42.2, 1118.0], [42.3, 1118.0], [42.4, 1118.0], [42.5, 1118.0], [42.6, 1119.0], [42.7, 1119.0], [42.8, 1119.0], [42.9, 1119.0], [43.0, 1119.0], [43.1, 1119.0], [43.2, 1119.0], [43.3, 1119.0], [43.4, 1120.0], [43.5, 1120.0], [43.6, 1120.0], [43.7, 1120.0], [43.8, 1120.0], [43.9, 1120.0], [44.0, 1120.0], [44.1, 1121.0], [44.2, 1121.0], [44.3, 1121.0], [44.4, 1121.0], [44.5, 1121.0], [44.6, 1121.0], [44.7, 1122.0], [44.8, 1122.0], [44.9, 1122.0], [45.0, 1122.0], [45.1, 1122.0], [45.2, 1122.0], [45.3, 1123.0], [45.4, 1123.0], [45.5, 1123.0], [45.6, 1123.0], [45.7, 1123.0], [45.8, 1124.0], [45.9, 1124.0], [46.0, 1124.0], [46.1, 1124.0], [46.2, 1124.0], [46.3, 1125.0], [46.4, 1125.0], [46.5, 1125.0], [46.6, 1125.0], [46.7, 1125.0], [46.8, 1126.0], [46.9, 1126.0], [47.0, 1126.0], [47.1, 1126.0], [47.2, 1127.0], [47.3, 1127.0], [47.4, 1127.0], [47.5, 1128.0], [47.6, 1128.0], [47.7, 1128.0], [47.8, 1129.0], [47.9, 1129.0], [48.0, 1129.0], [48.1, 1130.0], [48.2, 1130.0], [48.3, 1130.0], [48.4, 1131.0], [48.5, 1131.0], [48.6, 1132.0], [48.7, 1132.0], [48.8, 1133.0], [48.9, 1133.0], [49.0, 1134.0], [49.1, 1134.0], [49.2, 1135.0], [49.3, 1135.0], [49.4, 1136.0], [49.5, 1137.0], [49.6, 1138.0], [49.7, 1138.0], [49.8, 1140.0], [49.9, 1141.0], [50.0, 1141.0], [50.1, 1142.0], [50.2, 1143.0], [50.3, 1144.0], [50.4, 1145.0], [50.5, 1146.0], [50.6, 1147.0], [50.7, 1148.0], [50.8, 1149.0], [50.9, 1151.0], [51.0, 1152.0], [51.1, 1153.0], [51.2, 1154.0], [51.3, 1155.0], [51.4, 1156.0], [51.5, 1157.0], [51.6, 1158.0], [51.7, 1160.0], [51.8, 1161.0], [51.9, 1162.0], [52.0, 1164.0], [52.1, 1165.0], [52.2, 1167.0], [52.3, 1168.0], [52.4, 1169.0], [52.5, 1171.0], [52.6, 1172.0], [52.7, 1174.0], [52.8, 1175.0], [52.9, 1177.0], [53.0, 1179.0], [53.1, 1180.0], [53.2, 1182.0], [53.3, 1184.0], [53.4, 1187.0], [53.5, 1189.0], [53.6, 1192.0], [53.7, 1194.0], [53.8, 1195.0], [53.9, 1197.0], [54.0, 1200.0], [54.1, 1202.0], [54.2, 1204.0], [54.3, 1206.0], [54.4, 1208.0], [54.5, 1209.0], [54.6, 1211.0], [54.7, 1213.0], [54.8, 1214.0], [54.9, 1215.0], [55.0, 1216.0], [55.1, 1217.0], [55.2, 1220.0], [55.3, 1221.0], [55.4, 1222.0], [55.5, 1224.0], [55.6, 1226.0], [55.7, 1227.0], [55.8, 1229.0], [55.9, 1230.0], [56.0, 1232.0], [56.1, 1233.0], [56.2, 1235.0], [56.3, 1236.0], [56.4, 1237.0], [56.5, 1239.0], [56.6, 1240.0], [56.7, 1241.0], [56.8, 1242.0], [56.9, 1244.0], [57.0, 1246.0], [57.1, 1247.0], [57.2, 1248.0], [57.3, 1249.0], [57.4, 1250.0], [57.5, 1251.0], [57.6, 1252.0], [57.7, 1253.0], [57.8, 1254.0], [57.9, 1255.0], [58.0, 1257.0], [58.1, 1257.0], [58.2, 1259.0], [58.3, 1259.0], [58.4, 1260.0], [58.5, 1261.0], [58.6, 1262.0], [58.7, 1263.0], [58.8, 1264.0], [58.9, 1265.0], [59.0, 1266.0], [59.1, 1267.0], [59.2, 1268.0], [59.3, 1269.0], [59.4, 1269.0], [59.5, 1270.0], [59.6, 1270.0], [59.7, 1271.0], [59.8, 1272.0], [59.9, 1273.0], [60.0, 1274.0], [60.1, 1274.0], [60.2, 1275.0], [60.3, 1276.0], [60.4, 1276.0], [60.5, 1277.0], [60.6, 1278.0], [60.7, 1278.0], [60.8, 1279.0], [60.9, 1280.0], [61.0, 1280.0], [61.1, 1281.0], [61.2, 1282.0], [61.3, 1282.0], [61.4, 1283.0], [61.5, 1283.0], [61.6, 1284.0], [61.7, 1284.0], [61.8, 1285.0], [61.9, 1286.0], [62.0, 1286.0], [62.1, 1287.0], [62.2, 1287.0], [62.3, 1288.0], [62.4, 1288.0], [62.5, 1288.0], [62.6, 1289.0], [62.7, 1289.0], [62.8, 1290.0], [62.9, 1290.0], [63.0, 1291.0], [63.1, 1291.0], [63.2, 1291.0], [63.3, 1292.0], [63.4, 1292.0], [63.5, 1293.0], [63.6, 1293.0], [63.7, 1294.0], [63.8, 1294.0], [63.9, 1294.0], [64.0, 1295.0], [64.1, 1295.0], [64.2, 1296.0], [64.3, 1296.0], [64.4, 1296.0], [64.5, 1297.0], [64.6, 1297.0], [64.7, 1298.0], [64.8, 1298.0], [64.9, 1299.0], [65.0, 1299.0], [65.1, 1299.0], [65.2, 1300.0], [65.3, 1300.0], [65.4, 1301.0], [65.5, 1301.0], [65.6, 1301.0], [65.7, 1302.0], [65.8, 1302.0], [65.9, 1302.0], [66.0, 1303.0], [66.1, 1303.0], [66.2, 1304.0], [66.3, 1304.0], [66.4, 1304.0], [66.5, 1305.0], [66.6, 1305.0], [66.7, 1306.0], [66.8, 1306.0], [66.9, 1307.0], [67.0, 1307.0], [67.1, 1308.0], [67.2, 1308.0], [67.3, 1309.0], [67.4, 1309.0], [67.5, 1309.0], [67.6, 1310.0], [67.7, 1310.0], [67.8, 1311.0], [67.9, 1311.0], [68.0, 1312.0], [68.1, 1312.0], [68.2, 1313.0], [68.3, 1313.0], [68.4, 1313.0], [68.5, 1314.0], [68.6, 1314.0], [68.7, 1315.0], [68.8, 1315.0], [68.9, 1315.0], [69.0, 1316.0], [69.1, 1316.0], [69.2, 1316.0], [69.3, 1317.0], [69.4, 1317.0], [69.5, 1317.0], [69.6, 1318.0], [69.7, 1318.0], [69.8, 1318.0], [69.9, 1319.0], [70.0, 1319.0], [70.1, 1319.0], [70.2, 1320.0], [70.3, 1320.0], [70.4, 1320.0], [70.5, 1321.0], [70.6, 1321.0], [70.7, 1322.0], [70.8, 1322.0], [70.9, 1323.0], [71.0, 1323.0], [71.1, 1324.0], [71.2, 1324.0], [71.3, 1324.0], [71.4, 1325.0], [71.5, 1325.0], [71.6, 1325.0], [71.7, 1326.0], [71.8, 1326.0], [71.9, 1327.0], [72.0, 1327.0], [72.1, 1328.0], [72.2, 1328.0], [72.3, 1329.0], [72.4, 1329.0], [72.5, 1329.0], [72.6, 1330.0], [72.7, 1330.0], [72.8, 1331.0], [72.9, 1331.0], [73.0, 1332.0], [73.1, 1332.0], [73.2, 1333.0], [73.3, 1333.0], [73.4, 1334.0], [73.5, 1334.0], [73.6, 1335.0], [73.7, 1336.0], [73.8, 1336.0], [73.9, 1337.0], [74.0, 1337.0], [74.1, 1338.0], [74.2, 1338.0], [74.3, 1339.0], [74.4, 1340.0], [74.5, 1340.0], [74.6, 1341.0], [74.7, 1342.0], [74.8, 1342.0], [74.9, 1343.0], [75.0, 1343.0], [75.1, 1344.0], [75.2, 1345.0], [75.3, 1345.0], [75.4, 1346.0], [75.5, 1347.0], [75.6, 1347.0], [75.7, 1348.0], [75.8, 1349.0], [75.9, 1350.0], [76.0, 1350.0], [76.1, 1351.0], [76.2, 1351.0], [76.3, 1352.0], [76.4, 1353.0], [76.5, 1353.0], [76.6, 1354.0], [76.7, 1355.0], [76.8, 1355.0], [76.9, 1356.0], [77.0, 1357.0], [77.1, 1357.0], [77.2, 1358.0], [77.3, 1358.0], [77.4, 1359.0], [77.5, 1360.0], [77.6, 1360.0], [77.7, 1361.0], [77.8, 1361.0], [77.9, 1362.0], [78.0, 1363.0], [78.1, 1363.0], [78.2, 1364.0], [78.3, 1365.0], [78.4, 1365.0], [78.5, 1366.0], [78.6, 1366.0], [78.7, 1367.0], [78.8, 1367.0], [78.9, 1368.0], [79.0, 1368.0], [79.1, 1369.0], [79.2, 1369.0], [79.3, 1370.0], [79.4, 1370.0], [79.5, 1371.0], [79.6, 1372.0], [79.7, 1373.0], [79.8, 1374.0], [79.9, 1375.0], [80.0, 1376.0], [80.1, 1377.0], [80.2, 1378.0], [80.3, 1378.0], [80.4, 1379.0], [80.5, 1380.0], [80.6, 1381.0], [80.7, 1382.0], [80.8, 1383.0], [80.9, 1384.0], [81.0, 1385.0], [81.1, 1386.0], [81.2, 1387.0], [81.3, 1388.0], [81.4, 1389.0], [81.5, 1390.0], [81.6, 1391.0], [81.7, 1393.0], [81.8, 1394.0], [81.9, 1396.0], [82.0, 1396.0], [82.1, 1398.0], [82.2, 1399.0], [82.3, 1401.0], [82.4, 1402.0], [82.5, 1404.0], [82.6, 1405.0], [82.7, 1406.0], [82.8, 1407.0], [82.9, 1409.0], [83.0, 1411.0], [83.1, 1412.0], [83.2, 1414.0], [83.3, 1416.0], [83.4, 1418.0], [83.5, 1419.0], [83.6, 1421.0], [83.7, 1423.0], [83.8, 1424.0], [83.9, 1426.0], [84.0, 1427.0], [84.1, 1428.0], [84.2, 1430.0], [84.3, 1431.0], [84.4, 1432.0], [84.5, 1433.0], [84.6, 1433.0], [84.7, 1434.0], [84.8, 1435.0], [84.9, 1436.0], [85.0, 1437.0], [85.1, 1438.0], [85.2, 1439.0], [85.3, 1440.0], [85.4, 1441.0], [85.5, 1442.0], [85.6, 1444.0], [85.7, 1444.0], [85.8, 1445.0], [85.9, 1446.0], [86.0, 1447.0], [86.1, 1448.0], [86.2, 1449.0], [86.3, 1450.0], [86.4, 1451.0], [86.5, 1452.0], [86.6, 1453.0], [86.7, 1455.0], [86.8, 1456.0], [86.9, 1456.0], [87.0, 1458.0], [87.1, 1459.0], [87.2, 1460.0], [87.3, 1463.0], [87.4, 1465.0], [87.5, 1467.0], [87.6, 1468.0], [87.7, 1470.0], [87.8, 1472.0], [87.9, 1474.0], [88.0, 1476.0], [88.1, 1478.0], [88.2, 1482.0], [88.3, 1484.0], [88.4, 1487.0], [88.5, 1491.0], [88.6, 1494.0], [88.7, 1497.0], [88.8, 1500.0], [88.9, 1502.0], [89.0, 1504.0], [89.1, 1505.0], [89.2, 1507.0], [89.3, 1509.0], [89.4, 1511.0], [89.5, 1514.0], [89.6, 1518.0], [89.7, 1521.0], [89.8, 1524.0], [89.9, 1527.0], [90.0, 1530.0], [90.1, 1533.0], [90.2, 1536.0], [90.3, 1539.0], [90.4, 1541.0], [90.5, 1543.0], [90.6, 1546.0], [90.7, 1548.0], [90.8, 1551.0], [90.9, 1553.0], [91.0, 1557.0], [91.1, 1559.0], [91.2, 1561.0], [91.3, 1563.0], [91.4, 1566.0], [91.5, 1568.0], [91.6, 1571.0], [91.7, 1573.0], [91.8, 1575.0], [91.9, 1578.0], [92.0, 1582.0], [92.1, 1585.0], [92.2, 1588.0], [92.3, 1592.0], [92.4, 1595.0], [92.5, 1598.0], [92.6, 1603.0], [92.7, 1608.0], [92.8, 1612.0], [92.9, 1617.0], [93.0, 1624.0], [93.1, 1628.0], [93.2, 1634.0], [93.3, 1641.0], [93.4, 1649.0], [93.5, 1654.0], [93.6, 1665.0], [93.7, 1673.0], [93.8, 1684.0], [93.9, 1693.0], [94.0, 1701.0], [94.1, 1710.0], [94.2, 1714.0], [94.3, 1721.0], [94.4, 1726.0], [94.5, 1732.0], [94.6, 1737.0], [94.7, 1743.0], [94.8, 1750.0], [94.9, 1758.0], [95.0, 1765.0], [95.1, 1774.0], [95.2, 1782.0], [95.3, 1791.0], [95.4, 1801.0], [95.5, 1811.0], [95.6, 1819.0], [95.7, 1831.0], [95.8, 1840.0], [95.9, 1858.0], [96.0, 1869.0], [96.1, 1879.0], [96.2, 1899.0], [96.3, 1913.0], [96.4, 1923.0], [96.5, 1940.0], [96.6, 1956.0], [96.7, 1977.0], [96.8, 2002.0], [96.9, 2017.0], [97.0, 2030.0], [97.1, 2047.0], [97.2, 2066.0], [97.3, 2089.0], [97.4, 2114.0], [97.5, 2132.0], [97.6, 2155.0], [97.7, 2176.0], [97.8, 2197.0], [97.9, 2242.0], [98.0, 2318.0], [98.1, 2402.0], [98.2, 2509.0], [98.3, 2746.0], [98.4, 4872.0], [98.5, 4967.0], [98.6, 5006.0], [98.7, 5049.0], [98.8, 5089.0], [98.9, 5140.0], [99.0, 5207.0], [99.1, 5256.0], [99.2, 5342.0], [99.3, 5422.0], [99.4, 5576.0], [99.5, 5741.0], [99.6, 5833.0], [99.7, 5988.0], [99.8, 6309.0], [99.9, 7584.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 1000.0, "maxY": 14186.0, "series": [{"data": [[1000.0, 2010.0], [1100.0, 14186.0], [1200.0, 3341.0], [1300.0, 5129.0], [1400.0, 1968.0], [1500.0, 1126.0], [1600.0, 427.0], [1700.0, 425.0], [1800.0, 249.0], [1900.0, 177.0], [2000.0, 168.0], [2100.0, 140.0], [2200.0, 49.0], [2300.0, 33.0], [2400.0, 27.0], [2500.0, 20.0], [2600.0, 12.0], [2700.0, 6.0], [2900.0, 4.0], [3000.0, 3.0], [3100.0, 2.0], [3200.0, 2.0], [3300.0, 2.0], [3600.0, 1.0], [4000.0, 1.0], [4600.0, 1.0], [4700.0, 2.0], [4800.0, 17.0], [5000.0, 73.0], [5100.0, 47.0], [4900.0, 47.0], [5200.0, 55.0], [5300.0, 35.0], [5400.0, 23.0], [5500.0, 18.0], [5600.0, 20.0], [5800.0, 26.0], [5700.0, 22.0], [5900.0, 20.0], [6100.0, 12.0], [6000.0, 10.0], [6200.0, 4.0], [6300.0, 7.0], [6500.0, 11.0], [6600.0, 1.0], [6400.0, 2.0], [7400.0, 4.0], [7300.0, 2.0], [7500.0, 4.0], [7600.0, 10.0], [7800.0, 7.0], [7700.0, 4.0], [7900.0, 3.0], [8100.0, 1.0], [8000.0, 3.0], [8300.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 8300.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 3356.0, "minX": 1.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 26644.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 26644.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 3356.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 901.9611327040529, "minX": 1.6841589E12, "maxY": 3000.0, "series": [{"data": [[1.6841589E12, 3000.0], [1.6841592E12, 901.9611327040529], [1.68415908E12, 3000.0], [1.68415914E12, 2862.146674356016], [1.68415896E12, 3000.0], [1.68415902E12, 3000.0]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6841592E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 1092.0, "minX": 1.0, "maxY": 8029.0, "series": [{"data": [[2.0, 1626.0], [3.0, 1598.0], [4.0, 1368.0], [5.0, 1365.0], [6.0, 1364.0], [7.0, 1352.0], [8.0, 1344.0], [9.0, 1340.0], [10.0, 1337.0], [11.0, 1327.0], [12.0, 1326.0], [13.0, 1322.0], [15.0, 1322.0], [16.0, 1320.0], [17.0, 1322.0], [18.0, 1320.0], [19.0, 1317.0], [20.0, 1319.0], [21.0, 1318.0], [22.0, 1317.0], [23.0, 1317.0], [25.0, 1315.0], [26.0, 1314.5], [27.0, 1315.0], [29.0, 1313.5], [30.0, 1310.0], [32.0, 1306.0], [35.0, 1305.0], [34.0, 1306.6666666666667], [37.0, 1304.0], [36.0, 1309.0], [39.0, 1307.0], [40.0, 1305.0], [42.0, 1306.0], [44.0, 1303.5], [46.0, 1303.0], [49.0, 1308.0], [50.0, 1302.0], [52.0, 1301.5], [54.0, 1301.3333333333333], [57.0, 1300.0], [59.0, 1300.0], [58.0, 1301.0], [60.0, 1300.0], [63.0, 1298.5], [67.0, 1299.0], [66.0, 1298.0], [65.0, 1298.0], [64.0, 1298.0], [71.0, 1295.0], [70.0, 1295.0], [69.0, 1299.0], [68.0, 1299.0], [75.0, 1292.0], [73.0, 1292.0], [72.0, 1296.0], [78.0, 1295.25], [83.0, 1292.0], [82.0, 1291.25], [87.0, 1288.5], [85.0, 1292.0], [91.0, 1208.0], [90.0, 1251.5], [88.0, 1271.0], [95.0, 1115.0], [94.0, 1119.0], [93.0, 1122.0], [92.0, 1122.0], [99.0, 1100.0], [98.0, 1100.0], [97.0, 1107.0], [96.0, 1106.0], [103.0, 5251.0], [102.0, 5283.0], [101.0, 1096.0], [100.0, 1104.0], [107.0, 1330.3333333333333], [104.0, 5203.0], [111.0, 1315.0], [110.0, 1329.3333333333333], [114.0, 1313.3333333333333], [119.0, 1313.0], [117.0, 1313.6666666666667], [127.0, 1278.0], [125.0, 1296.3333333333333], [135.0, 1276.4], [132.0, 1277.0], [130.0, 1278.0], [129.0, 1277.0], [143.0, 1217.0], [142.0, 1230.0], [141.0, 1254.5], [139.0, 1260.0], [137.0, 1260.5], [151.0, 1125.0], [150.0, 1130.0], [149.0, 4947.0], [148.0, 1215.6666666666667], [145.0, 1226.0], [144.0, 1215.0], [159.0, 1102.0], [157.0, 1101.5], [155.0, 1109.0], [154.0, 1110.0], [153.0, 1113.0], [152.0, 1114.0], [167.0, 1099.0], [166.0, 1100.0], [165.0, 1106.0], [164.0, 1100.3333333333333], [161.0, 1102.0], [160.0, 1099.0], [175.0, 1128.0], [174.0, 1137.0], [173.0, 1118.5], [171.0, 1094.0], [170.0, 1100.0], [169.0, 1143.0], [168.0, 1100.0], [183.0, 1108.5], [181.0, 1107.0], [180.0, 1107.0], [179.0, 1106.0], [178.0, 1109.0], [177.0, 1116.0], [176.0, 1117.0], [190.0, 1100.0], [189.0, 1097.0], [188.0, 1107.0], [187.0, 1108.0], [186.0, 1098.0], [185.0, 1101.0], [184.0, 1101.0], [199.0, 1106.0], [198.0, 1102.0], [197.0, 1105.0], [196.0, 1105.0], [195.0, 1104.0], [194.0, 1105.0], [193.0, 1103.0], [207.0, 1676.0], [206.0, 5207.0], [205.0, 1100.0], [204.0, 1099.0], [203.0, 1102.0], [201.0, 1100.0], [200.0, 1101.0], [215.0, 1636.6], [210.0, 1653.0], [220.0, 1628.0], [231.0, 1583.0], [230.0, 1595.0], [228.0, 1593.0], [225.0, 1607.2], [238.0, 1561.0], [236.0, 1582.0], [233.0, 1575.0], [247.0, 1533.0], [245.0, 1547.3333333333333], [243.0, 1544.5], [240.0, 1562.0], [255.0, 1517.4], [250.0, 1532.0], [248.0, 1528.0], [271.0, 1225.0], [270.0, 1444.5], [268.0, 1468.5], [267.0, 1470.0], [266.0, 1470.0], [264.0, 1473.0], [261.0, 1486.5], [259.0, 1500.5], [283.0, 1184.0], [282.0, 1180.0], [281.0, 1182.0], [280.0, 1189.0], [279.0, 1185.0], [278.0, 1195.5], [272.0, 1210.0], [301.0, 1123.4], [296.0, 1142.3333333333333], [293.0, 1151.4], [288.0, 1165.8], [316.0, 1300.0], [318.0, 1293.0], [319.0, 1836.0], [317.0, 1840.0], [315.0, 1560.3333333333333], [312.0, 1594.0], [311.0, 1608.0], [305.0, 1110.0], [307.0, 5881.0], [306.0, 1098.0], [310.0, 2208.0], [309.0, 1701.0], [308.0, 5256.0], [334.0, 1252.0], [335.0, 1251.0], [332.0, 1254.0], [331.0, 1254.5], [329.0, 1254.0], [328.0, 1258.5], [326.0, 1260.5], [324.0, 1260.0], [323.0, 1263.5], [321.0, 1265.0], [320.0, 1268.0], [339.0, 1247.0], [351.0, 1243.6666666666667], [348.0, 1247.0], [347.0, 1247.0], [346.0, 1246.5], [344.0, 1247.0], [343.0, 1248.5], [341.0, 1249.6666666666667], [337.0, 1251.0], [336.0, 1251.0], [364.0, 1245.0], [363.0, 1239.0], [362.0, 1240.5], [360.0, 1241.0], [359.0, 1241.0], [357.0, 1243.0], [356.0, 1242.6666666666667], [353.0, 1244.0], [352.0, 1243.0], [381.0, 1135.0], [382.0, 1137.0], [380.0, 1142.0], [379.0, 1203.0], [378.0, 1216.0], [377.0, 1213.0], [373.0, 1230.0], [372.0, 1233.5], [370.0, 1235.0], [369.0, 1235.0], [368.0, 1238.0], [387.0, 1134.6666666666667], [398.0, 1123.0], [399.0, 1123.0], [397.0, 1121.6666666666667], [385.0, 1134.0], [384.0, 1135.0], [394.0, 1129.0], [393.0, 1129.0], [391.0, 1132.0], [390.0, 1129.0], [389.0, 1132.0], [388.0, 1137.0], [415.0, 1134.0], [411.0, 1147.0], [410.0, 1163.0], [409.0, 1180.0], [408.0, 1291.0], [407.0, 1380.0], [406.0, 1113.9999999999998], [430.0, 1139.5], [428.0, 1137.5], [426.0, 1137.3333333333333], [423.0, 1131.3333333333333], [421.0, 1141.5], [419.0, 1145.5], [417.0, 2103.75], [446.0, 1104.0], [443.0, 1112.0], [442.0, 1106.0], [440.0, 1108.5], [438.0, 1109.25], [434.0, 1129.5], [432.0, 1133.5], [462.0, 1103.0], [463.0, 1114.0], [461.0, 1099.0], [460.0, 1095.0], [459.0, 1103.0], [458.0, 1101.0], [457.0, 1109.25], [454.0, 1108.0], [450.0, 1105.5], [449.0, 1103.0], [448.0, 1100.0], [453.0, 1106.0], [467.0, 1101.0], [477.0, 1106.0], [479.0, 1112.0], [476.0, 1100.0], [474.0, 1104.5], [472.0, 1108.0], [471.0, 1110.0], [470.0, 1106.5], [469.0, 1112.0], [466.0, 1104.0], [465.0, 1107.0], [493.0, 1096.0], [495.0, 1106.5], [492.0, 1102.3333333333333], [489.0, 1109.0], [488.0, 1108.0], [487.0, 1104.0], [485.0, 1103.6666666666667], [482.0, 1105.0], [480.0, 1097.0], [510.0, 1204.0], [511.0, 1203.0], [509.0, 1208.0], [508.0, 1210.0], [506.0, 1210.0], [505.0, 1215.0], [504.0, 1213.0], [503.0, 1097.0], [496.0, 1098.0], [499.0, 1101.0], [498.0, 1104.5], [502.0, 1101.0], [501.0, 1103.0], [500.0, 1105.0], [536.0, 1108.0], [528.0, 1117.0], [540.0, 1109.0], [538.0, 1107.0], [512.0, 1198.0], [514.0, 1202.0], [518.0, 1189.0], [524.0, 1180.0], [522.0, 1195.0], [520.0, 1186.0], [532.0, 1114.0], [530.0, 1115.5], [570.0, 1103.6666666666667], [564.0, 1100.3333333333333], [550.0, 1097.0], [544.0, 1104.0], [558.0, 1117.0], [556.0, 1095.0], [552.0, 1099.0], [566.0, 1101.0], [560.0, 1103.0], [604.0, 2178.0], [606.0, 1296.0], [594.0, 1103.0], [592.0, 1107.8], [596.0, 1103.0], [602.0, 1094.0], [600.0, 1097.0], [580.0, 1112.0], [578.0, 1109.0], [576.0, 1098.0], [590.0, 1109.25], [588.0, 1108.0], [586.0, 1104.0], [598.0, 1104.0], [614.0, 1138.0], [626.0, 1122.0], [638.0, 1101.0], [624.0, 1107.0], [612.0, 1208.0], [610.0, 1293.5], [608.0, 1287.0], [622.0, 1112.0], [620.0, 1121.5], [618.0, 1122.0], [664.0, 1106.0], [656.0, 1098.0], [668.0, 1106.0], [666.0, 1105.0], [646.0, 1100.0], [644.0, 1109.0], [640.0, 1115.0], [654.0, 1105.0], [662.0, 1112.0], [678.0, 1113.0], [700.0, 1102.0], [698.0, 1105.0], [696.0, 1103.0], [688.0, 1104.0], [674.0, 1112.0], [686.0, 1104.0], [684.0, 1100.0], [682.0, 1106.0], [734.0, 1258.0], [722.0, 1248.0], [730.0, 1254.0], [728.0, 1251.6666666666667], [704.0, 1738.0], [706.0, 1483.0], [724.0, 1250.0], [738.0, 1255.6666666666667], [762.0, 1219.6666666666667], [742.0, 1265.0], [740.0, 1260.0], [736.0, 1259.5], [756.0, 1233.5], [752.0, 1249.3333333333333], [748.0, 1252.0], [746.0, 1246.0], [744.0, 1274.0], [794.0, 1169.0], [792.0, 1173.0], [782.0, 1177.0], [772.0, 1196.8], [788.0, 1169.0], [828.0, 1101.0], [830.0, 1106.5], [824.0, 1111.5], [806.0, 1177.6666666666667], [814.0, 1120.0], [810.0, 1122.0], [808.0, 1212.0], [822.0, 1111.0], [818.0, 1107.0], [860.0, 1110.5], [862.0, 1106.0], [858.0, 1097.5], [856.0, 1102.5], [832.0, 1106.0], [846.0, 1101.0], [842.0, 1118.0], [852.0, 1107.0], [866.0, 1105.0], [888.0, 1104.0], [894.0, 1095.0], [892.0, 1103.0], [864.0, 1106.0], [870.0, 1101.0], [878.0, 1103.0], [876.0, 1112.0], [872.0, 1097.5], [880.0, 1100.0], [922.0, 1130.75], [914.0, 1136.0], [926.0, 1126.0], [924.0, 1127.0], [898.0, 1102.5], [900.0, 1104.5], [902.0, 1098.0], [910.0, 1132.0], [908.0, 1138.0], [906.0, 1262.0], [918.0, 1136.0], [934.0, 1136.0], [958.0, 1123.3333333333333], [932.0, 1142.0], [944.0, 1123.6666666666667], [942.0, 1126.0], [940.0, 1125.0], [936.0, 1126.0], [964.0, 1120.0], [966.0, 1129.0], [962.0, 1119.0], [982.0, 1130.5], [980.0, 1135.0], [978.0, 1127.3333333333333], [970.0, 1122.5], [1020.0, 1149.0], [1022.0, 1119.0], [1008.0, 6051.0], [1010.0, 1627.0], [1012.0, 1449.0], [1018.0, 1151.0], [1016.0, 1172.0], [996.0, 1127.75], [992.0, 1129.0], [1006.0, 6149.0], [1004.0, 7834.0], [1002.0, 1110.3333333333333], [1014.0, 1317.0], [1032.0, 1115.0], [1080.0, 1102.4], [1072.0, 1115.0], [1056.0, 1107.5], [1024.0, 1118.5], [1028.0, 1113.0], [1048.0, 1113.0], [1040.0, 1114.0], [1092.0, 1102.0], [1148.0, 1104.0], [1144.0, 1105.5], [1136.0, 1103.0], [1088.0, 1107.0], [1116.0, 1115.0], [1112.0, 1189.0], [1108.0, 1102.0], [1104.0, 1103.0], [1132.0, 1104.0], [1128.0, 1101.0], [1124.0, 1107.0], [1120.0, 1111.0], [1208.0, 1099.0], [1212.0, 1685.0], [1184.0, 1109.0], [1192.0, 1107.5], [1188.0, 1113.4], [1204.0, 1099.0], [1200.0, 1095.0], [1160.0, 1103.1666666666667], [1180.0, 1105.0], [1176.0, 1107.0], [1252.0, 1214.6], [1256.0, 1210.5], [1240.0, 1225.8], [1216.0, 1637.0], [1220.0, 1581.0], [1228.0, 1905.0], [1224.0, 1514.0], [1280.0, 1128.75], [1332.0, 1117.0], [1288.0, 1106.0], [1284.0, 1116.0], [1308.0, 1110.25], [1304.0, 1108.0], [1300.0, 1105.0], [1296.0, 1107.6], [1320.0, 1127.0], [1316.0, 1165.0], [1312.0, 1109.5], [1396.0, 1100.0], [1388.0, 1109.0], [1352.0, 1102.0], [1348.0, 1121.0], [1344.0, 1107.0], [1456.0, 1103.3333333333333], [1412.0, 1182.0], [1408.0, 1101.0], [1448.0, 1103.6666666666667], [1440.0, 1101.0], [1436.0, 1111.0], [1524.0, 1118.0], [1512.0, 1123.0], [1504.0, 1102.2], [1528.0, 1111.0], [1484.0, 1105.25], [1476.0, 1109.6666666666667], [1472.0, 1105.8333333333333], [1496.0, 1099.0], [1492.0, 1104.0], [1516.0, 1113.0], [1508.0, 1165.5], [1584.0, 1105.5], [1592.0, 1107.0], [1548.0, 1097.0], [1544.0, 1102.0], [1540.0, 1108.3333333333333], [1536.0, 1102.0], [1576.0, 1107.0], [1552.0, 1103.5], [1608.0, 1162.0], [1636.0, 1114.0], [1656.0, 1116.0], [1612.0, 1173.0], [1604.0, 1222.0], [1600.0, 1096.5], [1628.0, 1110.0], [1624.0, 1111.0], [1620.0, 1116.0], [1616.0, 1126.0], [1720.0, 1111.0], [1696.0, 1111.0], [1704.0, 1708.0], [1708.0, 1170.0], [1716.0, 1117.0], [1712.0, 1130.0], [1676.0, 1109.0], [1688.0, 1108.0], [1780.0, 1109.0], [1768.0, 1105.0], [1788.0, 1104.0], [1784.0, 1112.0], [1776.0, 1106.0], [1740.0, 1104.0], [1736.0, 1104.5], [1728.0, 1111.3333333333333], [1756.0, 1101.0], [1752.0, 1110.5], [1748.0, 1113.5], [1744.0, 1111.5], [1824.0, 1131.0], [1832.0, 1125.25], [1852.0, 1130.5], [1796.0, 1100.0], [1804.0, 1216.0], [1812.0, 1161.0], [1808.0, 1158.0], [1912.0, 1166.0], [1916.0, 1157.0], [1896.0, 1101.0], [1900.0, 1103.0], [1908.0, 1173.0], [1904.0, 1185.0], [1864.0, 1124.0], [1884.0, 1108.6666666666667], [1876.0, 1112.25], [1872.0, 1125.0], [1932.0, 1150.0], [1972.0, 1102.25], [1952.0, 1111.0], [1956.0, 1109.5], [1928.0, 1160.0], [1924.0, 1159.0], [1948.0, 1105.0], [1944.0, 1109.0], [1940.0, 1119.0], [1936.0, 1133.0], [2032.0, 1112.0], [2044.0, 1105.6666666666667], [2020.0, 1120.5], [2036.0, 1127.0], [1984.0, 1098.0], [1992.0, 1110.0], [2012.0, 1122.0], [2008.0, 1159.0], [2004.0, 1204.0], [2000.0, 1097.0], [2028.0, 1116.0], [2160.0, 1112.0], [2168.0, 1115.0], [2112.0, 1129.0], [2128.0, 1122.6666666666667], [2072.0, 1107.4], [2056.0, 1108.0], [2104.0, 1157.0], [2080.0, 1109.0], [2136.0, 1119.3333333333333], [2200.0, 1101.5], [2296.0, 1098.0], [2192.0, 1110.75], [2184.0, 1110.3333333333333], [2176.0, 1115.0], [2232.0, 1104.0], [2224.0, 1133.0], [2424.0, 1109.0], [2376.0, 1106.0], [2368.0, 1107.0], [2392.0, 1101.0], [2408.0, 1512.0], [2400.0, 1093.0], [2328.0, 1115.75], [2320.0, 1114.5], [2312.0, 1119.0], [2304.0, 1171.0], [2360.0, 1110.5], [2496.0, 1101.0], [2552.0, 1114.25], [2504.0, 1133.0], [2520.0, 1117.5], [2536.0, 1119.0], [2448.0, 1111.0], [2432.0, 1106.0], [2472.0, 1106.0], [2632.0, 1118.6666666666667], [2624.0, 1123.75], [2640.0, 1115.5], [2656.0, 1113.0], [2616.0, 1124.0], [2600.0, 1098.0], [2800.0, 1095.0], [2808.0, 1297.0], [2752.0, 1114.0], [2760.0, 1110.3333333333333], [2768.0, 1102.0], [2792.0, 1102.0], [2784.0, 1104.0], [2704.0, 1153.0], [2696.0, 1097.0], [2688.0, 1104.0], [2736.0, 1104.6666666666667], [2880.0, 1105.2], [2888.0, 1106.0], [2936.0, 1130.0], [2896.0, 1103.0], [2904.0, 1723.0], [2832.0, 1114.0], [2824.0, 1114.5], [2816.0, 1154.0], [2864.0, 1104.5], [2952.0, 1123.0], [3000.0, 1339.1583527756252], [2944.0, 1120.0], [2960.0, 1117.0], [2968.0, 1103.5], [2145.0, 1119.5], [2161.0, 1119.6666666666667], [2169.0, 1117.0], [2129.0, 1116.0], [2065.0, 1107.5], [2049.0, 1107.6666666666667], [2105.0, 1133.0], [2097.0, 1100.3333333333333], [2089.0, 1108.0], [2081.0, 1109.0], [2273.0, 1106.5], [2297.0, 1102.0], [2249.0, 1101.6666666666667], [2265.0, 1105.0], [2201.0, 1803.0], [2177.0, 1117.0], [2225.0, 1131.0], [2217.0, 1150.0], [2409.0, 1388.0], [2417.0, 1121.0], [2425.0, 1115.0], [2369.0, 1103.0], [2377.0, 1114.0], [2385.0, 1105.5], [2401.0, 1093.0], [2313.0, 1117.0], [2305.0, 1166.0], [2361.0, 1108.0], [2353.0, 1109.0], [2345.0, 1110.75], [2505.0, 1136.0], [2513.0, 1120.0], [2529.0, 1111.0], [2457.0, 1106.5], [2449.0, 1102.0], [2433.0, 1109.5], [2473.0, 1104.0], [2681.0, 1103.3333333333333], [2625.0, 1114.0], [2633.0, 1122.0], [2649.0, 1114.0], [2665.0, 1104.0], [2585.0, 1100.0], [2577.0, 1101.5], [2561.0, 1107.0], [2609.0, 1124.3333333333333], [2601.0, 1094.0], [2801.0, 1101.0], [2761.0, 1105.0], [2769.0, 1105.0], [2777.0, 1106.0], [2809.0, 1235.0], [2785.0, 1105.0], [2713.0, 1110.6666666666667], [2705.0, 1141.0], [2745.0, 1109.0], [2921.0, 1125.75], [2889.0, 1103.0], [2929.0, 1122.0], [2897.0, 1098.0], [2905.0, 1440.0], [2841.0, 1104.0], [2825.0, 1120.0], [2817.0, 1135.0], [2849.0, 1104.0], [2945.0, 1118.0], [2993.0, 1099.5], [2985.0, 1101.0], [2977.0, 1105.5], [1073.0, 1111.0], [1061.0, 1103.0], [1085.0, 1103.5], [1057.0, 1101.0], [1037.0, 1113.5], [1033.0, 1108.0], [1029.0, 1111.0], [1025.0, 1115.0], [1053.0, 1109.0], [1045.0, 1109.5], [1041.0, 1102.0], [1101.0, 1100.5], [1141.0, 1104.6666666666667], [1145.0, 1097.0], [1137.0, 1098.0], [1097.0, 1109.0], [1093.0, 1107.0], [1089.0, 1113.0], [1129.0, 1102.0], [1125.0, 1106.0], [1113.0, 1119.0], [1109.0, 1095.0], [1209.0, 1097.0], [1213.0, 1642.0], [1205.0, 1101.0], [1153.0, 1105.8], [1185.0, 1105.0], [1257.0, 1219.3333333333333], [1273.0, 1125.0], [1261.0, 1216.75], [1229.0, 1746.0], [1225.0, 1503.0], [1221.0, 1608.0], [1217.0, 1610.0], [1341.0, 1116.75], [1337.0, 1117.5], [1317.0, 1166.0], [1313.0, 1415.0], [1301.0, 1110.0], [1393.0, 1100.0], [1357.0, 1104.5], [1385.0, 1104.75], [1381.0, 1106.4], [1373.0, 1103.3333333333333], [1369.0, 1111.5], [1365.0, 1103.0], [1361.0, 1109.5], [1421.0, 1108.0], [1461.0, 1106.5], [1417.0, 1114.5], [1409.0, 1101.0], [1453.0, 1100.0], [1445.0, 1107.5], [1441.0, 1104.0], [1429.0, 1106.6666666666667], [1425.0, 1107.5], [1505.0, 1097.0], [1533.0, 1111.0], [1509.0, 1161.0], [1513.0, 1121.0], [1529.0, 1109.0], [1521.0, 1114.3333333333333], [1517.0, 1118.0], [1597.0, 1102.0], [1589.0, 1101.0], [1569.0, 2826.25], [1565.0, 1103.0], [1537.0, 1102.0], [1557.0, 1106.5], [1653.0, 1113.5], [1657.0, 1116.0], [1633.0, 1111.0], [1645.0, 1111.0], [1613.0, 1170.0], [1609.0, 1181.0], [1605.0, 1185.0], [1601.0, 1101.0], [1621.0, 1114.0], [1617.0, 1131.0], [1713.0, 1119.0], [1717.0, 1111.0], [1725.0, 1111.6666666666667], [1701.0, 1109.0], [1705.0, 1200.0], [1709.0, 1166.0], [1693.0, 1108.75], [1673.0, 1109.0], [1677.0, 1103.0], [1685.0, 1109.5], [1789.0, 1100.0], [1761.0, 1104.3333333333333], [1765.0, 1099.5], [1769.0, 1113.0], [1785.0, 1102.0], [1781.0, 1106.0], [1741.0, 1119.0], [1737.0, 1116.0], [1733.0, 1122.0], [1757.0, 1110.0], [1845.0, 1133.0], [1841.0, 1120.0], [1853.0, 1131.0], [1793.0, 1107.5], [1801.0, 1102.3333333333333], [1805.0, 1162.0], [1809.0, 1148.0], [1837.0, 1121.6666666666667], [1913.0, 1169.0], [1917.0, 1179.0], [1893.0, 1100.5], [1901.0, 1101.6666666666667], [1909.0, 1173.0], [1905.0, 1193.0], [1857.0, 1125.0], [1869.0, 1123.0], [1881.0, 1106.0], [1933.0, 1148.0], [1981.0, 1098.25], [1961.0, 1105.0], [1977.0, 1101.0], [1929.0, 1170.0], [1921.0, 1161.0], [1949.0, 1111.0], [1945.0, 1112.0], [1941.0, 1111.0], [1937.0, 1117.0], [2037.0, 1115.0], [2017.0, 1120.0], [2021.0, 1120.0], [2025.0, 1114.5], [2041.0, 1107.75], [2033.0, 1110.0], [1997.0, 1100.5], [2005.0, 1159.0], [2001.0, 1099.0], [2029.0, 1111.0], [2154.0, 1125.0], [2122.0, 1126.3333333333333], [2106.0, 1147.0], [2098.0, 1099.0], [2290.0, 1101.6666666666667], [2298.0, 1095.0], [2242.0, 1105.3333333333333], [2258.0, 1103.5], [2282.0, 1099.0], [2202.0, 1802.0], [2194.0, 1108.0], [2234.0, 1102.0], [2218.0, 1156.0], [2210.0, 1162.0], [2402.0, 5159.0], [2370.0, 1115.0], [2394.0, 1101.5], [2410.0, 1352.0], [2322.0, 1120.0], [2306.0, 1166.0], [2362.0, 1112.0], [2354.0, 1120.0], [2346.0, 1112.0], [2338.0, 1111.25], [2498.0, 1098.5], [2554.0, 1114.5], [2506.0, 1125.0], [2514.0, 1116.5], [2546.0, 1116.0], [2530.0, 1114.25], [2442.0, 1104.3333333333333], [2482.0, 1106.0], [2658.0, 1103.0], [2666.0, 1100.0], [2626.0, 1112.0], [2650.0, 1119.0], [2586.0, 1102.6666666666667], [2570.0, 1108.0], [2618.0, 1121.5], [2602.0, 1162.0], [2594.0, 1100.75], [2802.0, 1096.0], [2754.0, 1107.3333333333333], [2778.0, 1104.0], [2810.0, 1204.0], [2794.0, 1099.5], [2706.0, 1119.0], [2690.0, 1103.0], [2738.0, 1109.5], [2730.0, 1106.5], [2722.0, 1109.6666666666667], [2930.0, 1119.0], [2938.0, 1123.0], [2898.0, 1103.0], [2906.0, 1124.0], [2842.0, 1108.0], [2834.0, 1108.5], [2826.0, 1133.0], [2818.0, 1119.0], [2858.0, 1116.0], [2970.0, 1103.0], [2994.0, 1104.0], [2155.0, 1119.0], [2171.0, 1125.5], [2115.0, 1122.0], [2131.0, 1124.0], [2139.0, 1117.3333333333333], [2163.0, 1123.0], [2075.0, 1110.6666666666667], [2067.0, 1112.5], [2059.0, 1113.3333333333333], [2099.0, 1096.0], [2091.0, 1107.6666666666667], [2083.0, 1107.5], [2299.0, 1095.0], [2243.0, 1098.0], [2251.0, 1106.5], [2259.0, 1112.0], [2267.0, 1103.0], [2283.0, 1105.3333333333333], [2203.0, 1739.0], [2195.0, 1104.0], [2227.0, 1123.0], [2419.0, 1114.0], [2379.0, 1106.5], [2387.0, 1107.0], [2395.0, 1102.0], [2411.0, 1316.0], [2403.0, 5023.0], [2315.0, 1117.0], [2355.0, 1111.3333333333333], [2515.0, 1117.0], [2523.0, 1115.3333333333333], [2531.0, 1115.0], [2459.0, 1103.0], [2435.0, 1106.0], [2491.0, 1101.5], [2467.0, 1102.0], [2683.0, 1099.5], [2675.0, 1112.0], [2627.0, 1117.0], [2635.0, 1115.0], [2643.0, 1117.6666666666667], [2659.0, 1105.0], [2579.0, 1106.0], [2563.0, 1103.5], [2603.0, 1149.0], [2763.0, 1115.0], [2811.0, 1173.0], [2771.0, 1100.0], [2803.0, 1739.0], [2787.0, 1104.5], [2699.0, 1097.6666666666667], [2691.0, 1100.0], [2843.0, 1100.0], [2923.0, 1135.0], [2899.0, 1099.0], [2915.0, 1120.0], [2835.0, 1104.0], [2819.0, 1116.0], [2875.0, 1112.5], [2867.0, 1111.6666666666667], [2851.0, 1111.3333333333333], [2955.0, 1127.3333333333333], [2995.0, 1103.0], [2963.0, 1125.0], [2987.0, 1100.6666666666667], [2979.0, 1110.0], [517.0, 1195.5], [541.0, 1099.0], [543.0, 1101.5], [537.0, 1107.0], [527.0, 1131.0], [513.0, 1196.0], [515.0, 1194.0], [519.0, 1187.0], [525.0, 1114.0], [523.0, 1185.0], [521.0, 1189.0], [533.0, 1106.0], [531.0, 1111.0], [547.0, 1107.5], [575.0, 1101.5], [573.0, 1106.0], [549.0, 1101.5], [545.0, 1112.0], [559.0, 1102.0], [557.0, 1100.0], [555.0, 1100.5], [553.0, 1105.0], [567.0, 1109.0], [565.0, 1121.0], [561.0, 1099.0], [607.0, 1291.0], [595.0, 1104.0], [605.0, 1718.0], [603.0, 1094.0], [587.0, 1099.0], [585.0, 1111.0], [597.0, 1099.0], [635.0, 1110.0], [639.0, 1099.0], [625.0, 1116.0], [637.0, 1105.5], [633.0, 1115.0], [615.0, 1120.0], [613.0, 1208.0], [611.0, 1263.0], [623.0, 1117.0], [621.0, 1113.0], [617.0, 1117.5], [631.0, 1107.5], [629.0, 1116.0], [627.0, 1108.0], [667.0, 1111.0], [669.0, 1113.0], [671.0, 1115.0], [661.0, 1111.0], [659.0, 1105.0], [665.0, 1110.0], [647.0, 1102.5], [643.0, 1109.0], [641.0, 1104.0], [653.0, 1110.0], [651.0, 1103.0], [649.0, 1099.0], [663.0, 1108.0], [677.0, 1111.5], [699.0, 1098.0], [701.0, 1102.0], [703.0, 1096.5], [691.0, 1105.75], [687.0, 1098.0], [675.0, 1110.6666666666667], [679.0, 1102.0], [683.0, 1108.0], [681.0, 1107.5], [705.0, 7703.0], [733.0, 1566.0], [719.0, 1407.0], [707.0, 1275.0], [725.0, 1252.75], [723.0, 1250.0], [721.0, 1251.0], [751.0, 1242.0], [767.0, 1206.4], [743.0, 1265.0], [747.0, 1245.0], [745.0, 1273.0], [797.0, 1173.5], [799.0, 1174.3333333333333], [795.0, 1373.0], [793.0, 1171.0], [777.0, 1182.2], [791.0, 1175.5], [789.0, 1169.0], [785.0, 1173.0], [803.0, 1178.0], [831.0, 1102.0], [827.0, 1107.5], [825.0, 1104.0], [815.0, 1123.0], [801.0, 1178.0], [807.0, 7681.0], [813.0, 1114.5], [811.0, 1137.0], [809.0, 1155.0], [819.0, 1118.0], [817.0, 1121.0], [835.0, 1106.6666666666667], [861.0, 1115.0], [839.0, 1107.5], [837.0, 1104.0], [847.0, 1104.0], [845.0, 1100.0], [843.0, 1108.0], [841.0, 1110.5], [855.0, 1103.0], [853.0, 1104.0], [849.0, 1099.0], [893.0, 1098.0], [895.0, 1106.0], [891.0, 1106.0], [879.0, 1110.0], [865.0, 1108.0], [867.0, 1109.0], [869.0, 1101.0], [877.0, 1106.0], [875.0, 1109.6666666666667], [885.0, 1104.5], [883.0, 1104.5], [881.0, 1104.0], [897.0, 1101.0], [927.0, 1120.0], [911.0, 1136.0], [901.0, 1102.0], [903.0, 1096.0], [909.0, 1136.0], [907.0, 1263.0], [905.0, 1252.0], [917.0, 1144.5], [915.0, 1130.0], [913.0, 1138.5], [955.0, 1126.25], [959.0, 1128.0], [933.0, 1126.5], [931.0, 1141.0], [929.0, 1120.5], [951.0, 1129.5], [947.0, 1126.0], [945.0, 1118.0], [939.0, 1133.0], [937.0, 1127.5], [987.0, 1124.6666666666667], [989.0, 1119.0], [985.0, 1123.0], [961.0, 1124.0], [981.0, 1134.0], [975.0, 1128.3333333333333], [973.0, 1130.0], [1019.0, 1163.0], [1021.0, 1125.0], [1009.0, 5833.0], [1011.0, 1561.0], [1013.0, 1304.0], [1017.0, 1162.0], [999.0, 1117.6666666666667], [1007.0, 6098.0], [1005.0, 5157.0], [1003.0, 5240.0], [1015.0, 1181.0], [1086.0, 1100.0], [1082.0, 1106.0], [1066.0, 1108.0], [1062.0, 1106.5], [1054.0, 1108.0], [1026.0, 1112.0], [1038.0, 1122.0], [1034.0, 1111.0], [1094.0, 1099.0], [1146.0, 1101.0], [1138.0, 1102.0], [1098.0, 1106.5], [1090.0, 1102.0], [1118.0, 1118.5], [1114.0, 1115.0], [1110.0, 2103.0], [1106.0, 1100.5], [1210.0, 1788.0], [1214.0, 1648.0], [1202.0, 1101.5], [1166.0, 1110.2], [1154.0, 1099.0], [1170.0, 1106.5], [1198.0, 1111.25], [1194.0, 1109.5], [1230.0, 1299.0], [1274.0, 1117.0], [1270.0, 1217.5], [1218.0, 1600.0], [1226.0, 1961.0], [1222.0, 1574.0], [1318.0, 1159.0], [1330.0, 1112.0], [1286.0, 1100.0], [1326.0, 1112.0], [1322.0, 1115.5], [1314.0, 1175.0], [1354.0, 1103.5], [1358.0, 1109.0], [1402.0, 1103.6666666666665], [1406.0, 1105.0], [1390.0, 1107.0], [1370.0, 1102.0], [1362.0, 1109.0], [1350.0, 1111.5], [1346.0, 1114.6666666666667], [1410.0, 1099.0], [1438.0, 1103.0], [1466.0, 1107.25], [1422.0, 1109.3333333333333], [1414.0, 1131.0], [1450.0, 1104.5], [1434.0, 1106.25], [1430.0, 1104.0], [1426.0, 1107.0], [1534.0, 1105.0], [1506.0, 1976.0], [1482.0, 1104.0], [1498.0, 1103.0], [1518.0, 1124.0], [1514.0, 1120.0], [1510.0, 1283.0], [1590.0, 1103.5], [1598.0, 1103.0], [1586.0, 1105.0], [1542.0, 1112.0], [1582.0, 1106.0], [1574.0, 1110.0], [1566.0, 1105.0], [1562.0, 1106.8], [1554.0, 1104.6666666666667], [1650.0, 1106.6666666666667], [1614.0, 1167.0], [1662.0, 1109.0], [1638.0, 1109.5], [1642.0, 1106.0], [1654.0, 1101.0], [1610.0, 1170.0], [1606.0, 1182.0], [1602.0, 1099.0], [1630.0, 1113.5], [1626.0, 1112.0], [1622.0, 1118.0], [1618.0, 1130.0], [1722.0, 1111.5], [1698.0, 1106.75], [1702.0, 1770.0], [1706.0, 1171.0], [1714.0, 1121.0], [1670.0, 1103.3333333333333], [1678.0, 1108.0], [1690.0, 1107.0], [1738.0, 1120.0], [1742.0, 1103.0], [1786.0, 1112.0], [1774.0, 1105.0], [1734.0, 1105.0], [1730.0, 1119.0], [1758.0, 1121.0], [1746.0, 1108.5], [1798.0, 1099.0], [1850.0, 1124.0], [1846.0, 1119.0], [1842.0, 1122.6666666666667], [1794.0, 1103.0], [1802.0, 1766.0], [1806.0, 1168.0], [1822.0, 1121.0], [1818.0, 1128.4], [1810.0, 1159.0], [1838.0, 1128.0], [1918.0, 1169.0], [1890.0, 1103.6666666666667], [1898.0, 1104.0], [1902.0, 1094.0], [1914.0, 1163.0], [1906.0, 1188.0], [1858.0, 1117.0], [1862.0, 1127.0], [1866.0, 1127.0], [1870.0, 1125.5], [1930.0, 1157.0], [1958.0, 1106.0], [1974.0, 1113.0], [1970.0, 1113.0], [1922.0, 1164.0], [1950.0, 1107.0], [1946.0, 1128.0], [1938.0, 1117.0], [1966.0, 1104.0], [1986.0, 1100.6666666666667], [2046.0, 1104.5], [2022.0, 1122.0], [2026.0, 1110.5], [2014.0, 1118.0], [1998.0, 1096.0], [2010.0, 1148.0], [2006.0, 1159.0], [2002.0, 1330.0], [2172.0, 1119.0], [2108.0, 1124.0], [2100.0, 1098.0], [2132.0, 1116.0], [2300.0, 1097.0], [2244.0, 1098.0], [2252.0, 1105.0], [2260.0, 1104.0], [2276.0, 1102.0], [2204.0, 1433.0], [2196.0, 1106.0], [2188.0, 1110.75], [2220.0, 1133.0], [2420.0, 1125.0], [2372.0, 1111.0], [2380.0, 1104.0], [2388.0, 1103.0], [2428.0, 1111.3333333333333], [2412.0, 1217.0], [2404.0, 2037.0], [2332.0, 1106.0], [2324.0, 1112.5], [2316.0, 1118.0], [2308.0, 1146.0], [2364.0, 1105.5], [2540.0, 1111.0], [2500.0, 1100.0], [2460.0, 1109.0], [2452.0, 1101.3333333333333], [2444.0, 1107.5], [2436.0, 1109.0], [2492.0, 1103.0], [2684.0, 1102.0], [2668.0, 1107.0], [2636.0, 1110.0], [2644.0, 1108.0], [2652.0, 1116.0], [2580.0, 1100.0], [2620.0, 1130.0], [2612.0, 1119.0], [2796.0, 1101.0], [2812.0, 1179.0], [2756.0, 1110.0], [2804.0, 1367.0], [2708.0, 1113.0], [2700.0, 1096.0], [2740.0, 1119.5], [2732.0, 1104.0], [2940.0, 1132.5], [2884.0, 1109.75], [2900.0, 1101.0], [2908.0, 1136.0], [2932.0, 1138.0], [2916.0, 1124.3333333333333], [2836.0, 1112.0], [2828.0, 1113.5], [2860.0, 1110.6], [2948.0, 1124.6666666666667], [2964.0, 1113.0], [2972.0, 1103.0], [2996.0, 1098.0], [2988.0, 1102.0], [2157.0, 1115.3333333333333], [2133.0, 1118.5], [2061.0, 1110.0], [2053.0, 1109.0], [2101.0, 1092.0], [2093.0, 1104.0], [2085.0, 1109.0], [2141.0, 1110.0], [2293.0, 1101.6666666666667], [2285.0, 1099.5], [2253.0, 1107.0], [2245.0, 1116.0], [2261.0, 1098.0], [2269.0, 1098.5], [2301.0, 8029.0], [2205.0, 1167.0], [2197.0, 1106.0], [2181.0, 1114.5], [2237.0, 1103.6666666666667], [2229.0, 1101.5], [2421.0, 1131.0], [2373.0, 1110.0], [2389.0, 1098.0], [2397.0, 1096.5], [2429.0, 1110.0], [2413.0, 1166.0], [2405.0, 1795.0], [2333.0, 1109.75], [2309.0, 1145.0], [2365.0, 1114.0], [2349.0, 1108.0], [2341.0, 1116.6666666666667], [2461.0, 1101.0], [2549.0, 1114.5], [2533.0, 1110.0], [2501.0, 1101.0], [2509.0, 1123.0], [2445.0, 1103.0], [2485.0, 1104.3333333333333], [2477.0, 1104.75], [2469.0, 1103.5], [2637.0, 1117.0], [2629.0, 1112.5], [2645.0, 1107.0], [2661.0, 1105.0], [2581.0, 1109.0], [2573.0, 1107.2], [2597.0, 1101.6666666666667], [2805.0, 1353.0], [2813.0, 1183.0], [2757.0, 1113.0], [2773.0, 1100.0], [2717.0, 1112.5], [2709.0, 1119.0], [2701.0, 4978.0], [2693.0, 1102.5], [2749.0, 1108.25], [2733.0, 1113.0], [2893.0, 1104.0], [2901.0, 1779.0], [2925.0, 1123.3333333333333], [2917.0, 1122.0], [2821.0, 1119.0], [2877.0, 1108.5], [2957.0, 1122.5], [2997.0, 1097.0], [1075.0, 1105.5], [1087.0, 1099.0], [1059.0, 1098.0], [1083.0, 1103.0], [1035.0, 1106.0], [1031.0, 1112.0], [1027.0, 1111.0], [1051.0, 1112.0], [1043.0, 1107.0], [1071.0, 1102.5], [1067.0, 1108.6666666666667], [1063.0, 1106.0], [1099.0, 1102.0], [1103.0, 1099.5], [1095.0, 1104.0], [1135.0, 1108.3333333333333], [1127.0, 1106.5], [1119.0, 1114.0], [1115.0, 1121.0], [1111.0, 1316.0], [1107.0, 1100.0], [1203.0, 1106.0], [1215.0, 1654.0], [1211.0, 1680.0], [1207.0, 1101.5], [1167.0, 1119.0], [1183.0, 1101.0], [1179.0, 1112.0], [1175.0, 1106.3333333333333], [1199.0, 1100.0], [1231.0, 1841.0], [1271.0, 1131.5], [1247.0, 1216.7142857142856], [1235.0, 1512.75], [1227.0, 1445.0], [1223.0, 1525.0], [1219.0, 1587.0], [1343.0, 1113.0], [1335.0, 1118.0], [1323.0, 1114.0], [1319.0, 1126.0], [1291.0, 1106.3333333333333], [1283.0, 1114.8333333333333], [1359.0, 1107.0], [1407.0, 1103.0], [1355.0, 1107.0], [1351.0, 1108.0], [1391.0, 1107.3333333333333], [1387.0, 1103.0], [1379.0, 1114.0], [1375.0, 1098.5], [1367.0, 1112.5], [1459.0, 1104.6666666666667], [1463.0, 1100.0], [1423.0, 1109.0], [1419.0, 1115.0], [1415.0, 1110.0], [1411.0, 1177.0], [1443.0, 1104.5], [1435.0, 1099.0], [1527.0, 1114.3333333333333], [1535.0, 1106.0], [1511.0, 1154.0], [1531.0, 1110.5], [1523.0, 1112.0], [1487.0, 1109.3333333333333], [1479.0, 1105.0], [1475.0, 1106.0], [1499.0, 1103.75], [1495.0, 1104.0], [1491.0, 1105.5], [1515.0, 1134.0], [1595.0, 1101.0], [1591.0, 1106.0], [1579.0, 1104.3333333333333], [1575.0, 1111.0], [1551.0, 1106.0], [1547.0, 1104.0], [1555.0, 1098.0], [1659.0, 1109.0], [1635.0, 1118.0], [1663.0, 1104.0], [1639.0, 1104.0], [1643.0, 1110.0], [1647.0, 1103.6666666666667], [1655.0, 1118.0], [1651.0, 1104.0], [1615.0, 1166.0], [1611.0, 1154.0], [1607.0, 1182.0], [1603.0, 1099.0], [1631.0, 1124.0], [1627.0, 1108.0], [1623.0, 1117.0], [1619.0, 1125.0], [1715.0, 1122.0], [1703.0, 1725.0], [1719.0, 1112.5], [1707.0, 1165.0], [1711.0, 1153.5], [1667.0, 1108.75], [1675.0, 1105.5], [1679.0, 1107.0], [1691.0, 1110.0], [1683.0, 1104.5], [1783.0, 1105.0], [1791.0, 1104.0], [1763.0, 1103.5], [1767.0, 1112.5], [1771.0, 1101.5], [1779.0, 1105.5], [1731.0, 1111.0], [1755.0, 1102.0], [1751.0, 1107.5], [1803.0, 1765.0], [1847.0, 1124.0], [1827.0, 1120.4], [1831.0, 1121.0], [1823.0, 1128.5], [1795.0, 1105.0], [1799.0, 1101.0], [1807.0, 1167.0], [1815.0, 1123.0], [1811.0, 1152.0], [1915.0, 1161.0], [1919.0, 1167.0], [1895.0, 1096.0], [1903.0, 1099.0], [1911.0, 1168.5], [1887.0, 1105.3333333333333], [1867.0, 1132.0], [1883.0, 1106.0], [1879.0, 1106.0], [1935.0, 1157.0], [1931.0, 1164.0], [1983.0, 1109.0], [1955.0, 1108.0], [1963.0, 1112.5], [1975.0, 1104.0], [1927.0, 1167.0], [1923.0, 1156.0], [1947.0, 1105.0], [1943.0, 1110.5], [1939.0, 1115.0], [1967.0, 1111.0], [1991.0, 1104.5], [2027.0, 1121.0], [2035.0, 1117.5], [1987.0, 1105.0], [1995.0, 1103.0], [1999.0, 1098.0], [2011.0, 1137.0], [2007.0, 1156.0], [2003.0, 1764.0], [2166.0, 1122.0], [2174.0, 1112.5], [2118.0, 1129.0], [2126.0, 1121.0], [2150.0, 1117.4], [2078.0, 1110.6666666666667], [2110.0, 1124.0], [2102.0, 1147.0], [2094.0, 1100.0], [2246.0, 1104.0], [2302.0, 1453.0], [2254.0, 1097.0], [2286.0, 1102.0], [2278.0, 1099.0], [2206.0, 1174.0], [2222.0, 1136.6666666666667], [2414.0, 1145.0], [2406.0, 1567.0], [2430.0, 1105.0], [2374.0, 1114.0], [2382.0, 1106.5], [2422.0, 1107.0], [2334.0, 1116.0], [2318.0, 1114.5], [2310.0, 1142.0], [2366.0, 1109.0], [2358.0, 1114.0], [2350.0, 1115.0], [2502.0, 1169.0], [2518.0, 1117.0], [2542.0, 1119.0], [2534.0, 1113.0], [2454.0, 1109.0], [2438.0, 1110.5], [2478.0, 1100.0], [2662.0, 1102.0], [2678.0, 1102.0], [2646.0, 1107.0], [2654.0, 1114.4], [2590.0, 1103.5], [2582.0, 1105.0], [2566.0, 1105.3333333333333], [2606.0, 1128.6666666666667], [2806.0, 1349.0], [2798.0, 1101.0], [2766.0, 1112.0], [2774.0, 1102.0], [2782.0, 1099.5], [2814.0, 1181.0], [2718.0, 1107.0], [2710.0, 1113.0], [2702.0, 4932.0], [2734.0, 1109.0], [2726.0, 1106.0], [2926.0, 1122.0], [2934.0, 1128.0], [2902.0, 1736.0], [2910.0, 1122.5], [2918.0, 1133.0], [2846.0, 1121.0], [2838.0, 1101.0], [2830.0, 1112.0], [2822.0, 1115.0], [2854.0, 1108.0], [2966.0, 1109.0], [2990.0, 1101.6666666666667], [2982.0, 1104.5], [2063.0, 1113.0], [2119.0, 1127.3333333333333], [2055.0, 1110.0], [2111.0, 1126.0], [2103.0, 1161.0], [2087.0, 1101.0], [2143.0, 1121.6666666666667], [2295.0, 1099.5], [2303.0, 1181.0], [2263.0, 1096.0], [2271.0, 1108.5], [2287.0, 1104.0], [2279.0, 1097.0], [2239.0, 1101.5], [2231.0, 1102.0], [2215.0, 1164.8], [2383.0, 1103.0], [2375.0, 1107.0], [2391.0, 1097.5], [2399.0, 1099.0], [2423.0, 1107.0], [2415.0, 1136.0], [2407.0, 1525.0], [2311.0, 1123.0], [2535.0, 1120.0], [2559.0, 1109.0], [2503.0, 1141.0], [2511.0, 1123.0], [2527.0, 1114.5], [2543.0, 1112.0], [2463.0, 1101.5], [2455.0, 1097.0], [2439.0, 1104.0], [2487.0, 1105.5], [2671.0, 1101.0], [2639.0, 1125.0], [2663.0, 1100.0], [2583.0, 1105.0], [2575.0, 1100.5], [2615.0, 1123.3333333333333], [2599.0, 1098.0], [2791.0, 1103.25], [2815.0, 1179.0], [2807.0, 1348.0], [2799.0, 1100.0], [2719.0, 1112.0], [2703.0, 1161.0], [2695.0, 1103.0], [2751.0, 1108.0], [2743.0, 1111.6666666666667], [2887.0, 1104.3333333333333], [2943.0, 1122.0], [2903.0, 1723.0], [2911.0, 1132.0], [2919.0, 1128.0], [2847.0, 1104.3333333333333], [2839.0, 1112.0], [2871.0, 1108.5], [2951.0, 1123.6666666666667], [2959.0, 1120.0], [2975.0, 1104.0], [2991.0, 1104.0], [1.0, 7653.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[2850.1439333333287, 1324.6487666666692]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 3000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 16299.05, "minX": 1.6841589E12, "maxY": 74641.85, "series": [{"data": [[1.6841589E12, 47006.5], [1.6841592E12, 20061.633333333335], [1.68415908E12, 74641.85], [1.68415914E12, 57945.8], [1.68415896E12, 65452.11666666667], [1.68415902E12, 69062.41666666667]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.6841589E12, 38191.0], [1.6841592E12, 16299.05], [1.68415908E12, 60644.05], [1.68415914E12, 47078.1], [1.68415896E12, 53177.8], [1.68415902E12, 56110.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6841592E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 1226.4419766796223, "minX": 1.6841589E12, "maxY": 1447.758530805689, "series": [{"data": [[1.6841589E12, 1447.758530805689], [1.6841592E12, 1226.4419766796223], [1.68415908E12, 1243.200417848083], [1.68415914E12, 1278.026720492116], [1.68415896E12, 1420.9870660313104], [1.68415902E12, 1305.225645161294]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6841592E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 1225.8445308162122, "minX": 1.6841589E12, "maxY": 1447.2303317535561, "series": [{"data": [[1.6841589E12, 1447.2303317535561], [1.6841592E12, 1225.8445308162122], [1.68415908E12, 1242.9550813311487], [1.68415914E12, 1277.7739331026503], [1.68415896E12, 1420.6843090537766], [1.68415902E12, 1304.3651612903252]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6841592E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 25.866740699611338, "minX": 1.6841589E12, "maxY": 233.16090047393504, "series": [{"data": [[1.6841589E12, 233.16090047393504], [1.6841592E12, 25.866740699611338], [1.68415908E12, 52.77122817489897], [1.68415914E12, 124.6999231064981], [1.68415896E12, 135.27501701837988], [1.68415902E12, 73.46225806451622]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6841592E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 1090.0, "minX": 1.6841589E12, "maxY": 8302.0, "series": [{"data": [[1.6841589E12, 6688.0], [1.6841592E12, 7986.0], [1.68415908E12, 8302.0], [1.68415914E12, 8029.0], [1.68415896E12, 8166.0], [1.68415902E12, 7690.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.6841589E12, 1807.7000000000003], [1.6841592E12, 1307.8], [1.68415908E12, 1419.0], [1.68415914E12, 1415.0], [1.68415896E12, 1641.3000000000002], [1.68415902E12, 1566.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.6841589E12, 5467.239999999998], [1.6841592E12, 4997.960000000001], [1.68415908E12, 5013.899999999998], [1.68415914E12, 1835.6100000000033], [1.68415896E12, 5777.5199999999895], [1.68415902E12, 5225.969999999999]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.6841589E12, 2125.0], [1.6841592E12, 1562.0], [1.68415908E12, 1506.0], [1.68415914E12, 1456.0], [1.68415896E12, 1958.5999999999985], [1.68415902E12, 1730.9499999999998]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.6841589E12, 1093.0], [1.6841592E12, 1092.0], [1.68415908E12, 1090.0], [1.68415914E12, 1092.0], [1.68415896E12, 1091.0], [1.68415902E12, 1090.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.6841589E12, 1306.0], [1.6841592E12, 1113.0], [1.68415908E12, 1109.0], [1.68415914E12, 1284.0], [1.68415896E12, 1270.0], [1.68415902E12, 1118.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6841592E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 1102.0, "minX": 1.0, "maxY": 5826.0, "series": [{"data": [[2.0, 1961.5], [3.0, 2103.5], [4.0, 2342.0], [5.0, 4947.0], [6.0, 2085.5], [7.0, 5019.0], [8.0, 1597.0], [10.0, 1730.5], [11.0, 2063.0], [12.0, 5406.0], [14.0, 5826.0], [15.0, 1424.0], [21.0, 5284.0], [24.0, 1249.0], [26.0, 5145.0], [32.0, 5038.0], [39.0, 1412.0], [42.0, 1991.0], [44.0, 1431.0], [45.0, 1126.0], [48.0, 1232.5], [50.0, 1440.0], [52.0, 2092.0], [55.0, 1627.0], [61.0, 1367.0], [62.0, 2170.5], [64.0, 1562.0], [69.0, 1361.0], [75.0, 1423.0], [72.0, 1109.0], [80.0, 1308.5], [83.0, 1280.0], [87.0, 1231.0], [90.0, 1404.0], [91.0, 1109.0], [92.0, 1120.5], [95.0, 1187.0], [94.0, 1103.0], [99.0, 1113.0], [98.0, 1109.0], [97.0, 1107.0], [100.0, 1112.0], [103.0, 1317.0], [102.0, 1127.5], [101.0, 1120.0], [106.0, 1112.0], [107.0, 1286.0], [104.0, 1167.0], [105.0, 1130.0], [109.0, 1270.0], [110.0, 1113.0], [111.0, 1114.0], [115.0, 1324.0], [122.0, 1111.0], [126.0, 1309.5], [133.0, 1354.0], [134.0, 1412.5], [128.0, 1255.0], [136.0, 1529.0], [142.0, 1277.5], [137.0, 1354.0], [141.0, 1111.0], [156.0, 1336.0], [153.0, 1338.0], [164.0, 1470.5], [165.0, 1337.0], [160.0, 1371.0], [171.0, 1106.0], [170.0, 1438.0], [168.0, 1102.0], [181.0, 1405.0], [177.0, 1367.0], [189.0, 1201.5], [190.0, 1123.0], [188.0, 1132.0], [199.0, 1113.0], [194.0, 1335.0], [197.0, 1109.0], [198.0, 1110.0], [196.0, 1108.0], [195.0, 1346.0], [193.0, 1107.0], [205.0, 1308.0], [204.0, 1278.0], [206.0, 1446.5], [207.0, 1443.0], [200.0, 1111.0], [202.0, 1109.0], [208.0, 1295.0], [214.0, 1163.0], [210.0, 1141.5], [223.0, 1416.0], [226.0, 1107.0], [232.0, 1537.0], [237.0, 1111.0], [247.0, 1391.5], [246.0, 1546.0], [255.0, 1110.0], [251.0, 1276.0], [262.0, 1130.0], [270.0, 1532.0], [263.0, 1134.0], [280.0, 1116.0], [285.0, 1104.0], [282.0, 1117.0], [289.0, 1114.0], [291.0, 1285.0], [290.0, 1254.0], [292.0, 1365.0], [296.0, 1335.0], [325.0, 1114.0], [339.0, 1447.0], [344.0, 1109.0], [359.0, 1106.0], [371.0, 1105.0], [394.0, 1152.0], [1.0, 4843.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 394.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 1102.0, "minX": 1.0, "maxY": 5825.5, "series": [{"data": [[2.0, 1961.5], [3.0, 2102.5], [4.0, 2340.5], [5.0, 4946.5], [6.0, 2085.5], [7.0, 5018.5], [8.0, 1597.0], [10.0, 1730.5], [11.0, 2063.0], [12.0, 5404.5], [14.0, 5825.5], [15.0, 1423.0], [21.0, 5283.0], [24.0, 1248.5], [26.0, 5144.5], [32.0, 5036.5], [39.0, 1412.0], [42.0, 1990.0], [44.0, 1430.5], [45.0, 1125.5], [48.0, 1232.5], [50.0, 1440.0], [52.0, 2092.0], [55.0, 1626.0], [61.0, 1367.0], [62.0, 2170.5], [64.0, 1558.0], [69.0, 1361.0], [75.0, 1423.0], [72.0, 1109.0], [80.0, 1307.0], [83.0, 1280.0], [87.0, 1231.0], [90.0, 1404.0], [91.0, 1108.0], [92.0, 1120.5], [95.0, 1186.5], [94.0, 1103.0], [99.0, 1113.0], [98.0, 1109.0], [97.0, 1106.0], [100.0, 1111.0], [103.0, 1316.0], [102.0, 1127.5], [101.0, 1120.0], [106.0, 1111.0], [107.0, 1285.5], [104.0, 1167.0], [105.0, 1130.0], [109.0, 1270.0], [110.0, 1113.0], [111.0, 1114.0], [115.0, 1324.0], [122.0, 1111.0], [126.0, 1309.5], [133.0, 1352.0], [134.0, 1412.5], [128.0, 1255.0], [136.0, 1529.0], [142.0, 1277.5], [137.0, 1354.0], [141.0, 1111.0], [156.0, 1336.0], [153.0, 1338.0], [164.0, 1470.5], [165.0, 1337.0], [160.0, 1371.0], [171.0, 1106.0], [170.0, 1437.0], [168.0, 1102.0], [181.0, 1405.0], [177.0, 1367.0], [189.0, 1201.5], [190.0, 1122.0], [188.0, 1132.0], [199.0, 1113.0], [194.0, 1334.0], [197.0, 1109.0], [198.0, 1110.0], [196.0, 1107.0], [195.0, 1346.0], [193.0, 1106.0], [205.0, 1308.0], [204.0, 1278.0], [206.0, 1446.5], [207.0, 1443.0], [200.0, 1111.0], [202.0, 1109.0], [208.0, 1294.5], [214.0, 1163.0], [210.0, 1141.5], [223.0, 1416.0], [226.0, 1106.5], [232.0, 1536.0], [237.0, 1111.0], [247.0, 1391.5], [246.0, 1543.0], [255.0, 1110.0], [251.0, 1276.0], [262.0, 1129.5], [270.0, 1527.5], [263.0, 1134.0], [280.0, 1115.0], [285.0, 1104.0], [282.0, 1117.0], [289.0, 1113.0], [291.0, 1283.5], [290.0, 1254.0], [292.0, 1365.0], [296.0, 1335.0], [325.0, 1114.0], [339.0, 1447.0], [344.0, 1109.0], [359.0, 1106.0], [371.0, 1105.0], [394.0, 1152.0], [1.0, 4841.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 394.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 30.0, "minX": 1.6841589E12, "maxY": 111.66666666666667, "series": [{"data": [[1.6841589E12, 76.66666666666667], [1.6841592E12, 30.0], [1.68415908E12, 111.66666666666667], [1.68415914E12, 85.0], [1.68415896E12, 93.33333333333333], [1.68415902E12, 103.33333333333333]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6841592E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 30.016666666666666, "minX": 1.6841589E12, "maxY": 111.68333333333334, "series": [{"data": [[1.6841589E12, 70.33333333333333], [1.6841592E12, 30.016666666666666], [1.68415908E12, 111.68333333333334], [1.68415914E12, 86.7], [1.68415896E12, 97.93333333333334], [1.68415902E12, 103.33333333333333]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6841592E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 30.016666666666666, "minX": 1.6841589E12, "maxY": 111.68333333333334, "series": [{"data": [[1.6841589E12, 70.33333333333333], [1.6841592E12, 30.016666666666666], [1.68415908E12, 111.68333333333334], [1.68415914E12, 86.7], [1.68415896E12, 97.93333333333334], [1.68415902E12, 103.33333333333333]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6841592E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 30.016666666666666, "minX": 1.6841589E12, "maxY": 111.68333333333334, "series": [{"data": [[1.6841589E12, 70.33333333333333], [1.6841592E12, 30.016666666666666], [1.68415908E12, 111.68333333333334], [1.68415914E12, 86.7], [1.68415896E12, 97.93333333333334], [1.68415902E12, 103.33333333333333]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6841592E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

