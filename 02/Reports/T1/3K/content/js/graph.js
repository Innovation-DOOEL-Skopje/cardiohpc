/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 43.0, "minX": 0.0, "maxY": 16222.0, "series": [{"data": [[0.0, 43.0], [0.1, 1092.0], [0.2, 1092.0], [0.3, 1093.0], [0.4, 1093.0], [0.5, 1094.0], [0.6, 1094.0], [0.7, 1094.0], [0.8, 1094.0], [0.9, 1094.0], [1.0, 1094.0], [1.1, 1095.0], [1.2, 1095.0], [1.3, 1095.0], [1.4, 1095.0], [1.5, 1095.0], [1.6, 1095.0], [1.7, 1095.0], [1.8, 1095.0], [1.9, 1096.0], [2.0, 1096.0], [2.1, 1096.0], [2.2, 1096.0], [2.3, 1096.0], [2.4, 1096.0], [2.5, 1096.0], [2.6, 1096.0], [2.7, 1096.0], [2.8, 1096.0], [2.9, 1096.0], [3.0, 1096.0], [3.1, 1096.0], [3.2, 1097.0], [3.3, 1097.0], [3.4, 1097.0], [3.5, 1097.0], [3.6, 1097.0], [3.7, 1097.0], [3.8, 1097.0], [3.9, 1097.0], [4.0, 1097.0], [4.1, 1097.0], [4.2, 1097.0], [4.3, 1097.0], [4.4, 1097.0], [4.5, 1097.0], [4.6, 1097.0], [4.7, 1097.0], [4.8, 1097.0], [4.9, 1098.0], [5.0, 1098.0], [5.1, 1098.0], [5.2, 1098.0], [5.3, 1098.0], [5.4, 1098.0], [5.5, 1098.0], [5.6, 1098.0], [5.7, 1098.0], [5.8, 1098.0], [5.9, 1098.0], [6.0, 1098.0], [6.1, 1098.0], [6.2, 1098.0], [6.3, 1098.0], [6.4, 1098.0], [6.5, 1098.0], [6.6, 1098.0], [6.7, 1098.0], [6.8, 1098.0], [6.9, 1098.0], [7.0, 1098.0], [7.1, 1099.0], [7.2, 1099.0], [7.3, 1099.0], [7.4, 1099.0], [7.5, 1099.0], [7.6, 1099.0], [7.7, 1099.0], [7.8, 1099.0], [7.9, 1099.0], [8.0, 1099.0], [8.1, 1099.0], [8.2, 1099.0], [8.3, 1099.0], [8.4, 1099.0], [8.5, 1099.0], [8.6, 1099.0], [8.7, 1099.0], [8.8, 1099.0], [8.9, 1099.0], [9.0, 1099.0], [9.1, 1099.0], [9.2, 1099.0], [9.3, 1099.0], [9.4, 1099.0], [9.5, 1099.0], [9.6, 1099.0], [9.7, 1099.0], [9.8, 1099.0], [9.9, 1100.0], [10.0, 1100.0], [10.1, 1100.0], [10.2, 1100.0], [10.3, 1100.0], [10.4, 1100.0], [10.5, 1100.0], [10.6, 1100.0], [10.7, 1100.0], [10.8, 1100.0], [10.9, 1100.0], [11.0, 1100.0], [11.1, 1100.0], [11.2, 1100.0], [11.3, 1100.0], [11.4, 1100.0], [11.5, 1100.0], [11.6, 1100.0], [11.7, 1100.0], [11.8, 1100.0], [11.9, 1100.0], [12.0, 1100.0], [12.1, 1100.0], [12.2, 1100.0], [12.3, 1100.0], [12.4, 1100.0], [12.5, 1100.0], [12.6, 1100.0], [12.7, 1100.0], [12.8, 1100.0], [12.9, 1101.0], [13.0, 1101.0], [13.1, 1101.0], [13.2, 1101.0], [13.3, 1101.0], [13.4, 1101.0], [13.5, 1101.0], [13.6, 1101.0], [13.7, 1101.0], [13.8, 1101.0], [13.9, 1101.0], [14.0, 1101.0], [14.1, 1101.0], [14.2, 1101.0], [14.3, 1101.0], [14.4, 1101.0], [14.5, 1101.0], [14.6, 1101.0], [14.7, 1101.0], [14.8, 1101.0], [14.9, 1101.0], [15.0, 1101.0], [15.1, 1101.0], [15.2, 1101.0], [15.3, 1101.0], [15.4, 1101.0], [15.5, 1101.0], [15.6, 1101.0], [15.7, 1101.0], [15.8, 1101.0], [15.9, 1101.0], [16.0, 1101.0], [16.1, 1101.0], [16.2, 1102.0], [16.3, 1102.0], [16.4, 1102.0], [16.5, 1102.0], [16.6, 1102.0], [16.7, 1102.0], [16.8, 1102.0], [16.9, 1102.0], [17.0, 1102.0], [17.1, 1102.0], [17.2, 1102.0], [17.3, 1102.0], [17.4, 1102.0], [17.5, 1102.0], [17.6, 1102.0], [17.7, 1102.0], [17.8, 1102.0], [17.9, 1102.0], [18.0, 1102.0], [18.1, 1102.0], [18.2, 1102.0], [18.3, 1102.0], [18.4, 1102.0], [18.5, 1102.0], [18.6, 1102.0], [18.7, 1102.0], [18.8, 1102.0], [18.9, 1102.0], [19.0, 1102.0], [19.1, 1102.0], [19.2, 1102.0], [19.3, 1102.0], [19.4, 1102.0], [19.5, 1102.0], [19.6, 1103.0], [19.7, 1103.0], [19.8, 1103.0], [19.9, 1103.0], [20.0, 1103.0], [20.1, 1103.0], [20.2, 1103.0], [20.3, 1103.0], [20.4, 1103.0], [20.5, 1103.0], [20.6, 1103.0], [20.7, 1103.0], [20.8, 1103.0], [20.9, 1103.0], [21.0, 1103.0], [21.1, 1103.0], [21.2, 1103.0], [21.3, 1103.0], [21.4, 1103.0], [21.5, 1103.0], [21.6, 1103.0], [21.7, 1103.0], [21.8, 1103.0], [21.9, 1103.0], [22.0, 1103.0], [22.1, 1103.0], [22.2, 1103.0], [22.3, 1103.0], [22.4, 1103.0], [22.5, 1103.0], [22.6, 1103.0], [22.7, 1103.0], [22.8, 1103.0], [22.9, 1103.0], [23.0, 1103.0], [23.1, 1104.0], [23.2, 1104.0], [23.3, 1104.0], [23.4, 1104.0], [23.5, 1104.0], [23.6, 1104.0], [23.7, 1104.0], [23.8, 1104.0], [23.9, 1104.0], [24.0, 1104.0], [24.1, 1104.0], [24.2, 1104.0], [24.3, 1104.0], [24.4, 1104.0], [24.5, 1104.0], [24.6, 1104.0], [24.7, 1104.0], [24.8, 1104.0], [24.9, 1104.0], [25.0, 1104.0], [25.1, 1104.0], [25.2, 1104.0], [25.3, 1104.0], [25.4, 1104.0], [25.5, 1104.0], [25.6, 1104.0], [25.7, 1104.0], [25.8, 1104.0], [25.9, 1104.0], [26.0, 1104.0], [26.1, 1104.0], [26.2, 1104.0], [26.3, 1104.0], [26.4, 1104.0], [26.5, 1105.0], [26.6, 1105.0], [26.7, 1105.0], [26.8, 1105.0], [26.9, 1105.0], [27.0, 1105.0], [27.1, 1105.0], [27.2, 1105.0], [27.3, 1105.0], [27.4, 1105.0], [27.5, 1105.0], [27.6, 1105.0], [27.7, 1105.0], [27.8, 1105.0], [27.9, 1105.0], [28.0, 1105.0], [28.1, 1105.0], [28.2, 1105.0], [28.3, 1105.0], [28.4, 1105.0], [28.5, 1105.0], [28.6, 1105.0], [28.7, 1105.0], [28.8, 1105.0], [28.9, 1105.0], [29.0, 1105.0], [29.1, 1105.0], [29.2, 1105.0], [29.3, 1105.0], [29.4, 1105.0], [29.5, 1106.0], [29.6, 1106.0], [29.7, 1106.0], [29.8, 1106.0], [29.9, 1106.0], [30.0, 1106.0], [30.1, 1106.0], [30.2, 1106.0], [30.3, 1106.0], [30.4, 1106.0], [30.5, 1106.0], [30.6, 1106.0], [30.7, 1106.0], [30.8, 1106.0], [30.9, 1106.0], [31.0, 1106.0], [31.1, 1106.0], [31.2, 1106.0], [31.3, 1106.0], [31.4, 1106.0], [31.5, 1106.0], [31.6, 1106.0], [31.7, 1106.0], [31.8, 1106.0], [31.9, 1106.0], [32.0, 1106.0], [32.1, 1106.0], [32.2, 1106.0], [32.3, 1106.0], [32.4, 1106.0], [32.5, 1107.0], [32.6, 1107.0], [32.7, 1107.0], [32.8, 1107.0], [32.9, 1107.0], [33.0, 1107.0], [33.1, 1107.0], [33.2, 1107.0], [33.3, 1107.0], [33.4, 1107.0], [33.5, 1107.0], [33.6, 1107.0], [33.7, 1107.0], [33.8, 1107.0], [33.9, 1107.0], [34.0, 1107.0], [34.1, 1107.0], [34.2, 1107.0], [34.3, 1107.0], [34.4, 1107.0], [34.5, 1107.0], [34.6, 1107.0], [34.7, 1107.0], [34.8, 1107.0], [34.9, 1107.0], [35.0, 1107.0], [35.1, 1108.0], [35.2, 1108.0], [35.3, 1108.0], [35.4, 1108.0], [35.5, 1108.0], [35.6, 1108.0], [35.7, 1108.0], [35.8, 1108.0], [35.9, 1108.0], [36.0, 1108.0], [36.1, 1108.0], [36.2, 1108.0], [36.3, 1108.0], [36.4, 1108.0], [36.5, 1108.0], [36.6, 1108.0], [36.7, 1108.0], [36.8, 1108.0], [36.9, 1108.0], [37.0, 1108.0], [37.1, 1108.0], [37.2, 1108.0], [37.3, 1108.0], [37.4, 1108.0], [37.5, 1108.0], [37.6, 1109.0], [37.7, 1109.0], [37.8, 1109.0], [37.9, 1109.0], [38.0, 1109.0], [38.1, 1109.0], [38.2, 1109.0], [38.3, 1109.0], [38.4, 1109.0], [38.5, 1109.0], [38.6, 1109.0], [38.7, 1109.0], [38.8, 1109.0], [38.9, 1109.0], [39.0, 1109.0], [39.1, 1109.0], [39.2, 1109.0], [39.3, 1109.0], [39.4, 1109.0], [39.5, 1109.0], [39.6, 1109.0], [39.7, 1109.0], [39.8, 1109.0], [39.9, 1110.0], [40.0, 1110.0], [40.1, 1110.0], [40.2, 1110.0], [40.3, 1110.0], [40.4, 1110.0], [40.5, 1110.0], [40.6, 1110.0], [40.7, 1110.0], [40.8, 1110.0], [40.9, 1110.0], [41.0, 1110.0], [41.1, 1110.0], [41.2, 1110.0], [41.3, 1110.0], [41.4, 1110.0], [41.5, 1110.0], [41.6, 1110.0], [41.7, 1110.0], [41.8, 1110.0], [41.9, 1110.0], [42.0, 1111.0], [42.1, 1111.0], [42.2, 1111.0], [42.3, 1111.0], [42.4, 1111.0], [42.5, 1111.0], [42.6, 1111.0], [42.7, 1111.0], [42.8, 1111.0], [42.9, 1111.0], [43.0, 1111.0], [43.1, 1111.0], [43.2, 1111.0], [43.3, 1111.0], [43.4, 1111.0], [43.5, 1111.0], [43.6, 1111.0], [43.7, 1111.0], [43.8, 1111.0], [43.9, 1112.0], [44.0, 1112.0], [44.1, 1112.0], [44.2, 1112.0], [44.3, 1112.0], [44.4, 1112.0], [44.5, 1112.0], [44.6, 1112.0], [44.7, 1112.0], [44.8, 1112.0], [44.9, 1112.0], [45.0, 1112.0], [45.1, 1112.0], [45.2, 1112.0], [45.3, 1112.0], [45.4, 1112.0], [45.5, 1112.0], [45.6, 1113.0], [45.7, 1113.0], [45.8, 1113.0], [45.9, 1113.0], [46.0, 1113.0], [46.1, 1113.0], [46.2, 1113.0], [46.3, 1113.0], [46.4, 1113.0], [46.5, 1113.0], [46.6, 1113.0], [46.7, 1113.0], [46.8, 1113.0], [46.9, 1113.0], [47.0, 1113.0], [47.1, 1113.0], [47.2, 1114.0], [47.3, 1114.0], [47.4, 1114.0], [47.5, 1114.0], [47.6, 1114.0], [47.7, 1114.0], [47.8, 1114.0], [47.9, 1114.0], [48.0, 1114.0], [48.1, 1114.0], [48.2, 1114.0], [48.3, 1114.0], [48.4, 1114.0], [48.5, 1115.0], [48.6, 1115.0], [48.7, 1115.0], [48.8, 1115.0], [48.9, 1115.0], [49.0, 1115.0], [49.1, 1115.0], [49.2, 1115.0], [49.3, 1115.0], [49.4, 1115.0], [49.5, 1115.0], [49.6, 1115.0], [49.7, 1116.0], [49.8, 1116.0], [49.9, 1116.0], [50.0, 1116.0], [50.1, 1116.0], [50.2, 1116.0], [50.3, 1116.0], [50.4, 1116.0], [50.5, 1116.0], [50.6, 1116.0], [50.7, 1116.0], [50.8, 1117.0], [50.9, 1117.0], [51.0, 1117.0], [51.1, 1117.0], [51.2, 1117.0], [51.3, 1117.0], [51.4, 1117.0], [51.5, 1117.0], [51.6, 1117.0], [51.7, 1118.0], [51.8, 1118.0], [51.9, 1118.0], [52.0, 1118.0], [52.1, 1118.0], [52.2, 1118.0], [52.3, 1118.0], [52.4, 1118.0], [52.5, 1118.0], [52.6, 1119.0], [52.7, 1119.0], [52.8, 1119.0], [52.9, 1119.0], [53.0, 1119.0], [53.1, 1119.0], [53.2, 1119.0], [53.3, 1120.0], [53.4, 1120.0], [53.5, 1120.0], [53.6, 1120.0], [53.7, 1120.0], [53.8, 1120.0], [53.9, 1120.0], [54.0, 1121.0], [54.1, 1121.0], [54.2, 1121.0], [54.3, 1121.0], [54.4, 1121.0], [54.5, 1121.0], [54.6, 1122.0], [54.7, 1122.0], [54.8, 1122.0], [54.9, 1122.0], [55.0, 1122.0], [55.1, 1123.0], [55.2, 1123.0], [55.3, 1123.0], [55.4, 1123.0], [55.5, 1123.0], [55.6, 1124.0], [55.7, 1124.0], [55.8, 1124.0], [55.9, 1124.0], [56.0, 1124.0], [56.1, 1125.0], [56.2, 1125.0], [56.3, 1125.0], [56.4, 1125.0], [56.5, 1126.0], [56.6, 1126.0], [56.7, 1126.0], [56.8, 1126.0], [56.9, 1126.0], [57.0, 1127.0], [57.1, 1127.0], [57.2, 1127.0], [57.3, 1127.0], [57.4, 1128.0], [57.5, 1128.0], [57.6, 1128.0], [57.7, 1129.0], [57.8, 1129.0], [57.9, 1129.0], [58.0, 1129.0], [58.1, 1130.0], [58.2, 1130.0], [58.3, 1130.0], [58.4, 1131.0], [58.5, 1131.0], [58.6, 1131.0], [58.7, 1131.0], [58.8, 1132.0], [58.9, 1132.0], [59.0, 1132.0], [59.1, 1133.0], [59.2, 1133.0], [59.3, 1133.0], [59.4, 1134.0], [59.5, 1134.0], [59.6, 1135.0], [59.7, 1135.0], [59.8, 1135.0], [59.9, 1136.0], [60.0, 1136.0], [60.1, 1136.0], [60.2, 1137.0], [60.3, 1137.0], [60.4, 1138.0], [60.5, 1138.0], [60.6, 1139.0], [60.7, 1139.0], [60.8, 1139.0], [60.9, 1140.0], [61.0, 1140.0], [61.1, 1141.0], [61.2, 1141.0], [61.3, 1142.0], [61.4, 1142.0], [61.5, 1143.0], [61.6, 1143.0], [61.7, 1144.0], [61.8, 1144.0], [61.9, 1145.0], [62.0, 1145.0], [62.1, 1146.0], [62.2, 1146.0], [62.3, 1147.0], [62.4, 1147.0], [62.5, 1148.0], [62.6, 1148.0], [62.7, 1149.0], [62.8, 1149.0], [62.9, 1150.0], [63.0, 1151.0], [63.1, 1151.0], [63.2, 1152.0], [63.3, 1153.0], [63.4, 1153.0], [63.5, 1154.0], [63.6, 1155.0], [63.7, 1155.0], [63.8, 1156.0], [63.9, 1157.0], [64.0, 1157.0], [64.1, 1158.0], [64.2, 1159.0], [64.3, 1160.0], [64.4, 1160.0], [64.5, 1161.0], [64.6, 1162.0], [64.7, 1162.0], [64.8, 1163.0], [64.9, 1164.0], [65.0, 1165.0], [65.1, 1165.0], [65.2, 1166.0], [65.3, 1167.0], [65.4, 1167.0], [65.5, 1168.0], [65.6, 1169.0], [65.7, 1170.0], [65.8, 1170.0], [65.9, 1171.0], [66.0, 1172.0], [66.1, 1173.0], [66.2, 1174.0], [66.3, 1175.0], [66.4, 1175.0], [66.5, 1176.0], [66.6, 1177.0], [66.7, 1178.0], [66.8, 1179.0], [66.9, 1180.0], [67.0, 1181.0], [67.1, 1182.0], [67.2, 1183.0], [67.3, 1184.0], [67.4, 1185.0], [67.5, 1186.0], [67.6, 1187.0], [67.7, 1188.0], [67.8, 1189.0], [67.9, 1191.0], [68.0, 1192.0], [68.1, 1193.0], [68.2, 1195.0], [68.3, 1196.0], [68.4, 1198.0], [68.5, 1199.0], [68.6, 1201.0], [68.7, 1203.0], [68.8, 1205.0], [68.9, 1207.0], [69.0, 1209.0], [69.1, 1211.0], [69.2, 1213.0], [69.3, 1215.0], [69.4, 1217.0], [69.5, 1220.0], [69.6, 1222.0], [69.7, 1224.0], [69.8, 1226.0], [69.9, 1228.0], [70.0, 1230.0], [70.1, 1232.0], [70.2, 1235.0], [70.3, 1237.0], [70.4, 1239.0], [70.5, 1242.0], [70.6, 1244.0], [70.7, 1246.0], [70.8, 1248.0], [70.9, 1250.0], [71.0, 1253.0], [71.1, 1255.0], [71.2, 1258.0], [71.3, 1260.0], [71.4, 1263.0], [71.5, 1265.0], [71.6, 1268.0], [71.7, 1270.0], [71.8, 1271.0], [71.9, 1273.0], [72.0, 1276.0], [72.1, 1278.0], [72.2, 1281.0], [72.3, 1283.0], [72.4, 1285.0], [72.5, 1287.0], [72.6, 1289.0], [72.7, 1291.0], [72.8, 1294.0], [72.9, 1296.0], [73.0, 1299.0], [73.1, 1301.0], [73.2, 1304.0], [73.3, 1306.0], [73.4, 1308.0], [73.5, 1310.0], [73.6, 1313.0], [73.7, 1315.0], [73.8, 1317.0], [73.9, 1319.0], [74.0, 1321.0], [74.1, 1323.0], [74.2, 1325.0], [74.3, 1327.0], [74.4, 1329.0], [74.5, 1331.0], [74.6, 1333.0], [74.7, 1334.0], [74.8, 1336.0], [74.9, 1338.0], [75.0, 1340.0], [75.1, 1341.0], [75.2, 1343.0], [75.3, 1345.0], [75.4, 1347.0], [75.5, 1349.0], [75.6, 1351.0], [75.7, 1353.0], [75.8, 1355.0], [75.9, 1357.0], [76.0, 1359.0], [76.1, 1361.0], [76.2, 1364.0], [76.3, 1367.0], [76.4, 1369.0], [76.5, 1371.0], [76.6, 1373.0], [76.7, 1376.0], [76.8, 1378.0], [76.9, 1380.0], [77.0, 1382.0], [77.1, 1385.0], [77.2, 1387.0], [77.3, 1389.0], [77.4, 1391.0], [77.5, 1393.0], [77.6, 1395.0], [77.7, 1397.0], [77.8, 1400.0], [77.9, 1403.0], [78.0, 1405.0], [78.1, 1408.0], [78.2, 1410.0], [78.3, 1413.0], [78.4, 1416.0], [78.5, 1419.0], [78.6, 1421.0], [78.7, 1425.0], [78.8, 1428.0], [78.9, 1431.0], [79.0, 1433.0], [79.1, 1436.0], [79.2, 1439.0], [79.3, 1441.0], [79.4, 1444.0], [79.5, 1446.0], [79.6, 1449.0], [79.7, 1451.0], [79.8, 1454.0], [79.9, 1457.0], [80.0, 1459.0], [80.1, 1462.0], [80.2, 1464.0], [80.3, 1467.0], [80.4, 1469.0], [80.5, 1471.0], [80.6, 1474.0], [80.7, 1477.0], [80.8, 1479.0], [80.9, 1483.0], [81.0, 1486.0], [81.1, 1489.0], [81.2, 1491.0], [81.3, 1494.0], [81.4, 1497.0], [81.5, 1499.0], [81.6, 1502.0], [81.7, 1506.0], [81.8, 1509.0], [81.9, 1511.0], [82.0, 1514.0], [82.1, 1516.0], [82.2, 1520.0], [82.3, 1524.0], [82.4, 1527.0], [82.5, 1531.0], [82.6, 1534.0], [82.7, 1538.0], [82.8, 1541.0], [82.9, 1544.0], [83.0, 1547.0], [83.1, 1550.0], [83.2, 1552.0], [83.3, 1555.0], [83.4, 1558.0], [83.5, 1561.0], [83.6, 1564.0], [83.7, 1566.0], [83.8, 1571.0], [83.9, 1574.0], [84.0, 1578.0], [84.1, 1581.0], [84.2, 1584.0], [84.3, 1587.0], [84.4, 1590.0], [84.5, 1593.0], [84.6, 1596.0], [84.7, 1600.0], [84.8, 1603.0], [84.9, 1606.0], [85.0, 1610.0], [85.1, 1613.0], [85.2, 1616.0], [85.3, 1619.0], [85.4, 1622.0], [85.5, 1626.0], [85.6, 1629.0], [85.7, 1632.0], [85.8, 1635.0], [85.9, 1639.0], [86.0, 1642.0], [86.1, 1647.0], [86.2, 1651.0], [86.3, 1655.0], [86.4, 1660.0], [86.5, 1666.0], [86.6, 1671.0], [86.7, 1675.0], [86.8, 1681.0], [86.9, 1685.0], [87.0, 1690.0], [87.1, 1695.0], [87.2, 1700.0], [87.3, 1703.0], [87.4, 1706.0], [87.5, 1709.0], [87.6, 1712.0], [87.7, 1716.0], [87.8, 1720.0], [87.9, 1724.0], [88.0, 1728.0], [88.1, 1732.0], [88.2, 1735.0], [88.3, 1739.0], [88.4, 1742.0], [88.5, 1746.0], [88.6, 1749.0], [88.7, 1753.0], [88.8, 1757.0], [88.9, 1761.0], [89.0, 1765.0], [89.1, 1768.0], [89.2, 1771.0], [89.3, 1774.0], [89.4, 1779.0], [89.5, 1783.0], [89.6, 1788.0], [89.7, 1793.0], [89.8, 1798.0], [89.9, 1803.0], [90.0, 1810.0], [90.1, 1817.0], [90.2, 1822.0], [90.3, 1827.0], [90.4, 1832.0], [90.5, 1837.0], [90.6, 1841.0], [90.7, 1847.0], [90.8, 1852.0], [90.9, 1859.0], [91.0, 1865.0], [91.1, 1872.0], [91.2, 1878.0], [91.3, 1886.0], [91.4, 1891.0], [91.5, 1897.0], [91.6, 1901.0], [91.7, 1906.0], [91.8, 1910.0], [91.9, 1916.0], [92.0, 1922.0], [92.1, 1928.0], [92.2, 1935.0], [92.3, 1944.0], [92.4, 1953.0], [92.5, 1963.0], [92.6, 1971.0], [92.7, 1980.0], [92.8, 1989.0], [92.9, 2000.0], [93.0, 2012.0], [93.1, 2026.0], [93.2, 2037.0], [93.3, 2051.0], [93.4, 2066.0], [93.5, 2079.0], [93.6, 2091.0], [93.7, 2106.0], [93.8, 2121.0], [93.9, 2136.0], [94.0, 2156.0], [94.1, 2176.0], [94.2, 2200.0], [94.3, 2215.0], [94.4, 2234.0], [94.5, 2251.0], [94.6, 2270.0], [94.7, 2294.0], [94.8, 2329.0], [94.9, 2362.0], [95.0, 2385.0], [95.1, 2401.0], [95.2, 2437.0], [95.3, 2483.0], [95.4, 2536.0], [95.5, 2591.0], [95.6, 2655.0], [95.7, 2786.0], [95.8, 2893.0], [95.9, 3077.0], [96.0, 3284.0], [96.1, 3657.0], [96.2, 3857.0], [96.3, 3966.0], [96.4, 4103.0], [96.5, 4246.0], [96.6, 4440.0], [96.7, 4610.0], [96.8, 4813.0], [96.9, 4936.0], [97.0, 5024.0], [97.1, 5089.0], [97.2, 5142.0], [97.3, 5214.0], [97.4, 5286.0], [97.5, 5363.0], [97.6, 5443.0], [97.7, 5533.0], [97.8, 5656.0], [97.9, 5774.0], [98.0, 5864.0], [98.1, 5939.0], [98.2, 6060.0], [98.3, 6216.0], [98.4, 6403.0], [98.5, 6602.0], [98.6, 6907.0], [98.7, 7202.0], [98.8, 7459.0], [98.9, 7661.0], [99.0, 7877.0], [99.1, 8375.0], [99.2, 8936.0], [99.3, 9556.0], [99.4, 10148.0], [99.5, 10889.0], [99.6, 11492.0], [99.7, 11838.0], [99.8, 12221.0], [99.9, 12569.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 52927.0, "series": [{"data": [[0.0, 4.0], [100.0, 2.0], [1000.0, 8842.0], [1100.0, 52927.0], [1200.0, 4064.0], [1300.0, 4291.0], [1400.0, 3356.0], [1500.0, 2877.0], [1600.0, 2250.0], [1700.0, 2377.0], [1800.0, 1563.0], [1900.0, 1208.0], [2000.0, 682.0], [2100.0, 488.0], [2200.0, 467.0], [2300.0, 339.0], [2400.0, 223.0], [2500.0, 160.0], [2600.0, 117.0], [2700.0, 65.0], [2800.0, 83.0], [2900.0, 52.0], [3000.0, 37.0], [3100.0, 35.0], [3200.0, 53.0], [3300.0, 37.0], [3400.0, 14.0], [3500.0, 19.0], [3700.0, 44.0], [3600.0, 23.0], [3800.0, 63.0], [3900.0, 84.0], [4000.0, 69.0], [4100.0, 73.0], [4300.0, 49.0], [4200.0, 48.0], [4400.0, 44.0], [4500.0, 54.0], [4600.0, 47.0], [4700.0, 40.0], [4800.0, 64.0], [4900.0, 92.0], [5000.0, 145.0], [5100.0, 137.0], [5300.0, 114.0], [5200.0, 129.0], [5400.0, 112.0], [5500.0, 71.0], [5600.0, 77.0], [5800.0, 117.0], [5700.0, 78.0], [5900.0, 93.0], [6100.0, 57.0], [6000.0, 71.0], [6300.0, 50.0], [6200.0, 44.0], [6400.0, 60.0], [6500.0, 30.0], [6600.0, 30.0], [6800.0, 29.0], [6700.0, 28.0], [6900.0, 27.0], [7100.0, 31.0], [7000.0, 34.0], [7200.0, 31.0], [7300.0, 42.0], [7400.0, 35.0], [7500.0, 37.0], [7600.0, 56.0], [7700.0, 27.0], [7800.0, 53.0], [7900.0, 18.0], [8100.0, 20.0], [8000.0, 18.0], [8200.0, 19.0], [8400.0, 14.0], [8500.0, 14.0], [8600.0, 22.0], [8700.0, 16.0], [8300.0, 10.0], [8800.0, 16.0], [8900.0, 14.0], [9000.0, 19.0], [9100.0, 17.0], [9200.0, 11.0], [9400.0, 16.0], [9300.0, 12.0], [9500.0, 11.0], [9600.0, 14.0], [9700.0, 14.0], [9900.0, 23.0], [9800.0, 14.0], [10000.0, 17.0], [10100.0, 8.0], [10200.0, 14.0], [10300.0, 18.0], [10400.0, 15.0], [10500.0, 9.0], [10600.0, 9.0], [10700.0, 8.0], [10800.0, 17.0], [10900.0, 18.0], [11000.0, 9.0], [11100.0, 3.0], [11200.0, 37.0], [11500.0, 34.0], [11300.0, 6.0], [11700.0, 30.0], [11600.0, 8.0], [11400.0, 16.0], [12200.0, 23.0], [11800.0, 35.0], [11900.0, 26.0], [12100.0, 14.0], [12000.0, 23.0], [12300.0, 35.0], [12400.0, 32.0], [12500.0, 10.0], [12700.0, 5.0], [12600.0, 9.0], [12800.0, 9.0], [12900.0, 9.0], [13000.0, 2.0], [13200.0, 4.0], [13300.0, 1.0], [13100.0, 1.0], [13500.0, 2.0], [13700.0, 3.0], [13600.0, 2.0], [13800.0, 3.0], [13400.0, 2.0], [14100.0, 6.0], [14200.0, 2.0], [13900.0, 2.0], [14300.0, 1.0], [14000.0, 1.0], [14400.0, 5.0], [14600.0, 1.0], [14800.0, 2.0], [14700.0, 1.0], [14900.0, 6.0], [15200.0, 2.0], [15000.0, 1.0], [15600.0, 1.0], [15400.0, 1.0], [16000.0, 1.0], [16200.0, 1.0], [15900.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 16200.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 282.0, "minX": 1.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 73510.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 73510.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 16372.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 282.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 2033.9260291595122, "minX": 1.68415962E12, "maxY": 3000.0, "series": [{"data": [[1.68415968E12, 3000.0], [1.68415974E12, 3000.0], [1.68415986E12, 3000.0], [1.68415962E12, 3000.0], [1.68415992E12, 2033.9260291595122], [1.6841598E12, 3000.0]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68415992E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 1091.0, "minX": 1.0, "maxY": 13240.0, "series": [{"data": [[2.0, 10797.0], [3.0, 10415.0], [4.0, 10390.0], [5.0, 10396.0], [6.0, 10284.0], [7.0, 10260.0], [8.0, 13240.0], [9.0, 10041.0], [10.0, 10005.0], [11.0, 9966.0], [12.0, 7894.0], [13.0, 7862.0], [14.0, 7630.0], [15.0, 7614.0], [16.0, 7497.0], [17.0, 12540.0], [18.0, 7426.0], [19.0, 7414.0], [20.0, 9249.0], [21.0, 9221.0], [22.0, 9850.0], [23.0, 8673.0], [24.0, 8006.0], [25.0, 7586.0], [26.0, 7841.0], [27.0, 7450.0], [28.0, 7786.0], [29.0, 7667.0], [30.0, 6924.0], [31.0, 7561.0], [33.0, 7197.0], [32.0, 7481.0], [35.0, 7589.0], [34.0, 7180.0], [37.0, 7166.0], [36.0, 7575.0], [39.0, 7065.0], [38.0, 6478.0], [41.0, 6348.0], [40.0, 6409.0], [43.0, 6621.0], [42.0, 6336.0], [45.0, 6084.0], [44.0, 6189.0], [47.0, 6375.0], [46.0, 5872.0], [49.0, 5711.0], [48.0, 6367.0], [51.0, 5696.5], [53.0, 5985.0], [52.0, 6296.0], [55.0, 6407.0], [54.0, 5858.0], [57.0, 6092.0], [56.0, 5836.0], [59.0, 5761.0], [58.0, 5139.0], [61.0, 5499.0], [60.0, 5123.0], [63.0, 7899.0], [62.0, 5119.0], [67.0, 5952.0], [66.0, 7805.0], [65.0, 6033.0], [64.0, 6023.0], [71.0, 7312.0], [70.0, 5121.0], [69.0, 7718.0], [68.0, 5953.0], [75.0, 7348.0], [74.0, 7320.0], [73.0, 7266.0], [72.0, 7255.0], [79.0, 9529.0], [78.0, 1789.0], [77.0, 6737.0], [76.0, 7342.0], [83.0, 1160.0], [82.0, 1163.0], [81.0, 1162.0], [80.0, 1170.0], [87.0, 6235.0], [85.0, 1159.0], [91.0, 1159.0], [90.0, 1158.6666666666667], [89.0, 1158.0], [93.0, 1157.0], [99.0, 1154.5], [98.0, 1154.0], [96.0, 1157.0], [102.0, 1156.0], [101.0, 1155.5], [107.0, 1157.0], [106.0, 1158.0], [105.0, 1157.5], [111.0, 1152.0], [109.0, 1155.3333333333333], [115.0, 1155.0], [112.0, 1154.0], [119.0, 1153.0], [122.0, 1154.0], [121.0, 1153.25], [120.0, 1152.0], [125.0, 1152.0], [133.0, 1149.4], [130.0, 1149.6666666666667], [142.0, 1146.0], [140.0, 1148.75], [138.0, 1148.0], [137.0, 1149.5], [151.0, 1140.0], [149.0, 1139.0], [145.0, 1148.3333333333333], [158.0, 1135.6666666666667], [156.0, 1134.0], [154.0, 1136.0], [167.0, 1132.0], [165.0, 1132.0], [163.0, 1132.0], [161.0, 1133.75], [173.0, 1129.5], [172.0, 1133.0], [171.0, 1134.0], [170.0, 1130.0], [168.0, 1134.0], [183.0, 1125.3333333333333], [181.0, 1122.5], [179.0, 1126.0], [178.0, 1124.0], [176.0, 1126.3333333333333], [188.0, 1121.6666666666667], [186.0, 1121.0], [185.0, 1126.0], [199.0, 1117.5], [197.0, 1116.5], [196.0, 1118.0], [193.0, 1120.0], [192.0, 1119.0], [206.0, 1109.75], [203.0, 1111.0], [201.0, 1113.0], [215.0, 1104.0], [214.0, 1107.6666666666667], [211.0, 1109.0], [210.0, 1104.0], [208.0, 1109.0], [223.0, 1105.0], [221.0, 1104.0], [219.0, 1105.0], [218.0, 1105.6666666666667], [216.0, 1108.0], [230.0, 1098.0], [229.0, 1102.0], [226.0, 1103.25], [239.0, 5736.0], [238.0, 5837.0], [237.0, 5941.0], [236.0, 1099.25], [232.0, 1098.6666666666667], [247.0, 2184.0], [246.0, 5215.0], [245.0, 4929.0], [244.0, 1892.0], [243.0, 5209.0], [242.0, 2162.0], [241.0, 2171.0], [240.0, 5631.0], [255.0, 5124.0], [254.0, 1777.0], [252.0, 1777.0], [251.0, 4872.0], [250.0, 4882.0], [249.0, 5163.0], [248.0, 1803.0], [270.0, 1557.0], [271.0, 1932.0], [269.0, 1567.0], [268.0, 1563.0], [267.0, 1581.0], [266.0, 1578.0], [265.0, 4971.0], [264.0, 1621.0], [263.0, 5138.0], [257.0, 5124.5], [259.0, 1727.0], [258.0, 7502.0], [261.0, 5169.0], [260.0, 5174.0], [275.0, 1734.5], [285.0, 1537.0], [286.0, 1546.0], [284.0, 1543.0], [283.0, 1551.0], [282.0, 1546.3333333333333], [279.0, 1554.0], [278.0, 1733.5], [276.0, 1556.0], [273.0, 1928.0], [272.0, 1550.0], [291.0, 1919.0], [301.0, 1530.0], [303.0, 1533.0], [300.0, 1537.0], [298.0, 1531.0], [296.0, 1532.0], [295.0, 1535.0], [292.0, 1541.0], [290.0, 1545.0], [289.0, 1533.0], [288.0, 1539.5], [316.0, 1511.5], [318.0, 4869.0], [319.0, 1468.0], [317.0, 1515.0], [315.0, 1898.0], [313.0, 1528.6666666666667], [310.0, 1535.0], [309.0, 1652.3333333333333], [307.0, 1720.5], [306.0, 1527.0], [333.0, 1665.0], [335.0, 1276.0], [332.0, 1921.0], [323.0, 1726.0], [322.0, 2024.0], [321.0, 1395.0], [320.0, 1803.0], [331.0, 1293.0], [330.0, 1931.0], [329.0, 1294.0], [328.0, 1293.0], [327.0, 1308.0], [326.0, 1975.0], [325.0, 1339.0], [324.0, 1721.0], [351.0, 1270.3333333333333], [348.0, 1362.75], [344.0, 1463.75], [340.0, 1482.0], [339.0, 1462.0], [337.0, 1269.0], [365.0, 1354.5], [361.0, 1261.25], [357.0, 1448.0], [355.0, 1260.0], [354.0, 1638.0], [383.0, 1439.0], [381.0, 1345.75], [379.0, 1249.0], [376.0, 2540.333333333333], [373.0, 1257.5], [372.0, 1255.0], [370.0, 1259.0], [368.0, 1256.6666666666667], [398.0, 1628.0], [396.0, 1249.5], [394.0, 1439.5], [391.0, 1251.0], [389.0, 1631.5], [388.0, 1442.5], [385.0, 1440.0], [413.0, 1243.3333333333333], [410.0, 1626.0], [409.0, 1249.0], [406.0, 1249.0], [405.0, 1628.0], [401.0, 1341.25], [430.0, 1603.0], [429.0, 1236.0], [428.0, 1230.6666666666667], [425.0, 1224.0], [423.0, 1238.0], [420.0, 1428.0], [418.0, 1433.5], [416.0, 1244.6666666666667], [446.0, 1207.0], [443.0, 1214.0], [440.0, 1209.0], [439.0, 1205.0], [437.0, 1342.0], [434.0, 1221.3333333333333], [432.0, 1213.0], [462.0, 1209.0], [461.0, 1387.5], [458.0, 1202.0], [455.0, 1280.2], [453.0, 1199.0], [452.0, 1209.0], [451.0, 1200.0], [450.0, 1202.0], [478.0, 1479.0], [476.0, 1163.0], [467.0, 1191.0], [466.0, 1190.0], [465.0, 1194.6666666666667], [475.0, 1170.0], [474.0, 1157.0], [473.0, 1164.0], [472.0, 1164.0], [471.0, 1174.0], [470.0, 1174.0], [469.0, 2120.0], [468.0, 1182.0], [483.0, 1162.0], [493.0, 1148.0], [495.0, 1144.5], [492.0, 1157.0], [482.0, 1162.0], [481.0, 1156.0], [480.0, 1164.0], [491.0, 1344.0], [489.0, 1152.0], [487.0, 1157.0], [486.0, 1157.0], [485.0, 1149.0], [484.0, 1153.0], [511.0, 1135.6666666666667], [508.0, 1613.0], [507.0, 1144.0], [505.0, 1455.0], [503.0, 1142.0], [501.0, 1140.3333333333333], [498.0, 1136.5], [496.0, 1776.0], [540.0, 1118.0], [542.0, 1114.3333333333333], [538.0, 1120.6666666666667], [514.0, 1141.3333333333333], [526.0, 1126.5], [520.0, 1125.0], [568.0, 1105.0], [566.0, 1104.0], [562.0, 1109.5], [548.0, 1109.0], [552.0, 1112.0], [604.0, 1771.0], [592.0, 1517.0], [594.0, 1806.0], [596.0, 1794.0], [606.0, 1456.0], [602.0, 1785.0], [600.0, 1790.0], [578.0, 1101.0], [580.0, 1709.0], [582.0, 1436.0], [590.0, 1280.0], [588.0, 1318.0], [584.0, 1371.0], [638.0, 1162.0], [626.0, 1166.0], [636.0, 1161.0], [612.0, 1436.0], [614.0, 1436.0], [618.0, 1166.0], [616.0, 1433.0], [628.0, 1164.0], [624.0, 1167.0], [644.0, 1154.0], [664.0, 1152.6666666666667], [662.0, 1152.0], [660.0, 1151.5], [654.0, 1156.0], [642.0, 1161.0], [646.0, 1156.0], [650.0, 1155.0], [648.0, 1161.0], [700.0, 1144.0], [702.0, 1144.8333333333333], [676.0, 1149.5], [672.0, 1149.3333333333333], [694.0, 1147.0], [680.0, 1149.75], [732.0, 1145.0], [734.0, 1142.0], [730.0, 1141.5], [710.0, 1144.0], [708.0, 1148.0], [726.0, 1140.0], [724.0, 1142.0], [720.0, 1142.25], [716.0, 1143.3333333333333], [712.0, 1144.3333333333333], [760.0, 1136.6666666666667], [762.0, 1136.5], [738.0, 1142.25], [742.0, 1141.0], [740.0, 1141.0], [746.0, 1141.5], [756.0, 1136.0], [752.0, 1143.0], [796.0, 1128.6666666666667], [798.0, 1130.5], [794.0, 1129.0], [788.0, 1132.5], [784.0, 1132.5], [780.0, 1131.6666666666667], [772.0, 1133.5], [768.0, 1136.25], [776.0, 1131.0], [828.0, 1116.0], [830.0, 1113.5], [824.0, 1116.5], [812.0, 1124.0], [806.0, 3807.0], [804.0, 1127.6666666666667], [862.0, 1624.0], [860.0, 4664.0], [856.0, 1097.0], [848.0, 1102.0], [868.0, 1285.0], [894.0, 1192.6666666666667], [890.0, 1189.0], [870.0, 1264.0], [866.0, 1627.0], [864.0, 1298.0], [878.0, 1519.0], [876.0, 1217.0], [874.0, 1234.0], [886.0, 1191.0], [882.0, 1194.0], [880.0, 1201.0], [912.0, 1178.5], [914.0, 1175.5], [924.0, 1163.0], [922.0, 1169.6666666666667], [902.0, 1188.0], [898.0, 1186.75], [910.0, 1180.6666666666667], [956.0, 1163.0], [948.0, 1159.0], [942.0, 1163.0], [928.0, 1169.0], [934.0, 1162.0], [930.0, 1162.0], [986.0, 1150.0], [988.0, 1155.0], [966.0, 1160.0], [960.0, 1156.0], [982.0, 1154.3333333333333], [980.0, 1154.0], [974.0, 1158.0], [972.0, 1156.0], [968.0, 1157.5], [1012.0, 1148.0], [1020.0, 1149.0], [1014.0, 1145.0], [1010.0, 1143.0], [1006.0, 1148.0], [998.0, 1153.0], [994.0, 1149.6666666666667], [1072.0, 1131.5], [1056.0, 1133.0], [1028.0, 1144.0], [1140.0, 1288.0], [1148.0, 1232.0], [1128.0, 1097.0], [1144.0, 1253.0], [1136.0, 1319.0], [1100.0, 1115.25], [1096.0, 1115.5], [1116.0, 1103.0], [1112.0, 1110.0], [1108.0, 1109.3333333333333], [1132.0, 1343.0], [1156.0, 1173.0], [1212.0, 1145.75], [1200.0, 1150.0], [1160.0, 1177.0], [1152.0, 1197.0], [1188.0, 1153.0], [1184.0, 1151.0], [1180.0, 1159.0], [1176.0, 1171.0], [1172.0, 1167.0], [1168.0, 1168.0], [1224.0, 1143.0], [1260.0, 1130.0], [1256.0, 1133.25], [1252.0, 1143.25], [1240.0, 1137.0], [1232.0, 1137.5], [1220.0, 1146.0], [1216.0, 1143.6666666666667], [1316.0, 1130.0], [1312.0, 1125.0], [1308.0, 1131.5], [1300.0, 1136.6666666666667], [1288.0, 1142.0], [1392.0, 1101.0], [1396.0, 1101.5], [1352.0, 1123.3333333333333], [1388.0, 1102.0], [1384.0, 1110.0], [1380.0, 1117.0], [1368.0, 1124.5], [1360.0, 1123.5], [1416.0, 2498.0], [1448.0, 2370.0], [1464.0, 2332.0], [1440.0, 2379.0], [1412.0, 2537.0], [1408.0, 2550.0], [1436.0, 2548.5], [1432.0, 2385.0], [1428.0, 2388.0], [1424.0, 2406.0], [1452.0, 2793.0], [1444.0, 2368.0], [1524.0, 2133.0], [1532.0, 2440.0], [1504.0, 2203.0], [1508.0, 2154.0], [1476.0, 2315.0], [1484.0, 2565.0], [1480.0, 2505.3333333333335], [1500.0, 2245.0], [1496.0, 2278.0], [1492.0, 2612.0], [1488.0, 2487.0], [1516.0, 2137.0], [1512.0, 2313.0], [1588.0, 2361.0], [1592.0, 2215.5], [1548.0, 2107.0], [1544.0, 2111.5], [1540.0, 2118.0], [1536.0, 2121.0], [1572.0, 2351.5], [1568.0, 2424.5], [1564.0, 2107.75], [1652.0, 2437.0], [1656.0, 1993.0], [1660.0, 2426.0], [1636.0, 2232.0], [1640.0, 2373.5], [1644.0, 2164.6666666666665], [1612.0, 2345.0], [1608.0, 2356.0], [1604.0, 2539.0], [1600.0, 2070.0], [1628.0, 2046.0], [1624.0, 2058.0], [1716.0, 1869.0], [1696.0, 1837.5], [1704.0, 1609.0], [1708.0, 1771.5], [1724.0, 1895.5], [1712.0, 1750.5], [1676.0, 1956.0], [1672.0, 2048.0], [1668.0, 1787.0], [1664.0, 1847.0], [1692.0, 1772.0], [1680.0, 5097.0], [1784.0, 1545.0], [1768.0, 1856.0], [1772.0, 1573.0], [1788.0, 2013.0], [1780.0, 1550.0], [1776.0, 1965.0], [1732.0, 1839.0], [1728.0, 1934.0], [1748.0, 1760.0], [1744.0, 1772.0], [1824.0, 1809.0], [1852.0, 1592.0], [1828.0, 1874.0], [1832.0, 1877.0], [1844.0, 1813.5], [1796.0, 1535.0], [1812.0, 1888.0], [1808.0, 1510.0], [1836.0, 1804.0], [1912.0, 1828.5], [1908.0, 1631.0], [1888.0, 1750.0], [1892.0, 1774.0], [1900.0, 1763.2], [1916.0, 1810.0], [1856.0, 1772.3333333333333], [1860.0, 1497.0], [1872.0, 1851.5], [1952.0, 1849.0], [1956.0, 1846.5], [1972.0, 1801.0], [1920.0, 1770.3333333333333], [1944.0, 1880.0], [1940.0, 1757.6666666666667], [1988.0, 1775.3333333333333], [2040.0, 1577.0], [2024.0, 1823.0], [2036.0, 1766.6666666666667], [1984.0, 1595.0], [2012.0, 1908.0], [2004.0, 1777.6666666666667], [2000.0, 1937.0], [2028.0, 1848.0], [2152.0, 1712.5], [2168.0, 1758.0], [2128.0, 1836.0], [2112.0, 1752.0], [2072.0, 1661.25], [2064.0, 1745.0], [2096.0, 1760.2], [2080.0, 1762.0], [2296.0, 1523.0], [2240.0, 1756.0], [2256.0, 1122.0], [2264.0, 1635.0], [2280.0, 1557.0], [2184.0, 1738.0], [2200.0, 1567.0], [2232.0, 1718.0], [2216.0, 1697.0], [2368.0, 1602.3333333333333], [2384.0, 1537.0], [2408.0, 1583.0], [2312.0, 1502.5], [2320.0, 1532.0], [2336.0, 1487.0], [2512.0, 1583.0], [2552.0, 1519.0], [2528.0, 1490.5], [2448.0, 1524.0], [2440.0, 1587.0], [2432.0, 1482.0], [2576.0, 1336.0], [2680.0, 1198.5], [2648.0, 1132.0], [2672.0, 1214.0], [2560.0, 1351.0], [2584.0, 1115.0], [2616.0, 1241.0], [2608.0, 1103.0], [2600.0, 1246.0], [2592.0, 1153.0], [2800.0, 1131.0], [2752.0, 1244.5], [2808.0, 1122.5], [2792.0, 1122.5], [2696.0, 1176.3333333333333], [2720.0, 1180.0], [2936.0, 1108.25], [2880.0, 1107.0], [2888.0, 1109.5], [2896.0, 1101.0], [2904.0, 1104.5], [2928.0, 1114.3333333333333], [2912.0, 1108.25], [2872.0, 1110.5], [2864.0, 1102.0], [2944.0, 1117.4], [2952.0, 1115.4], [3000.0, 1470.8761708828124], [2960.0, 1117.5714285714284], [2984.0, 1109.8333333333333], [2121.0, 1730.5], [2137.0, 1858.0], [2057.0, 1827.0], [2065.0, 1608.6666666666667], [2105.0, 1796.5], [2089.0, 1851.3333333333333], [2081.0, 1741.0], [2289.0, 1548.0], [2297.0, 1395.0], [2249.0, 1523.6666666666667], [2265.0, 1563.0], [2273.0, 1548.5], [2177.0, 1500.6666666666667], [2193.0, 1279.0], [2217.0, 1807.0], [2377.0, 1380.0], [2393.0, 1447.0], [2401.0, 1555.5], [2361.0, 1554.0], [2353.0, 1400.3333333333333], [2345.0, 1655.0], [2545.0, 1625.0], [2553.0, 1543.0], [2505.0, 1462.0], [2513.0, 1551.0], [2537.0, 1654.0], [2529.0, 1684.0], [2457.0, 1471.0], [2441.0, 1596.6666666666667], [2473.0, 1510.5], [2465.0, 1472.3333333333333], [2569.0, 1344.0], [2673.0, 1222.0], [2561.0, 1343.0], [2577.0, 1337.0], [2585.0, 1122.0], [2617.0, 1113.0], [2609.0, 1123.0], [2601.0, 1242.0], [2593.0, 1112.0], [2761.0, 1146.0], [2769.0, 1142.6666666666667], [2809.0, 1124.0], [2689.0, 1171.0], [2737.0, 1174.0], [2729.0, 1176.0], [2721.0, 1177.0], [2921.0, 1113.5], [2881.0, 1111.5], [2889.0, 1103.0], [2897.0, 1109.0], [2905.0, 1104.3333333333333], [2913.0, 1103.0], [2817.0, 1124.6666666666667], [2841.0, 1116.0], [2873.0, 1109.0], [2865.0, 1099.0], [2857.0, 1107.5], [2945.0, 1117.0], [2953.0, 1118.4], [2961.0, 1121.3333333333333], [2993.0, 1102.7142857142858], [2977.0, 1115.3333333333333], [1069.0, 1130.3333333333335], [1057.0, 1137.5], [1025.0, 1144.0], [1049.0, 1137.5], [1041.0, 1140.0], [1033.0, 1138.0], [1149.0, 1218.0], [1145.0, 1242.0], [1141.0, 3116.0], [1137.0, 1324.0], [1113.0, 1105.3333333333333], [1133.0, 1331.0], [1161.0, 1190.0], [1213.0, 1145.0], [1205.0, 1139.5], [1197.0, 1144.0], [1193.0, 1146.5], [1153.0, 1201.0], [1157.0, 1173.0], [1165.0, 1181.0], [1181.0, 1159.0], [1173.0, 1162.0], [1261.0, 1142.3333333333333], [1249.0, 1138.0], [1225.0, 1135.5], [1241.0, 1135.0], [1237.0, 1138.0], [1337.0, 1126.3333333333333], [1341.0, 1125.0], [1333.0, 1129.5], [1329.0, 1133.25], [1309.0, 1141.0], [1305.0, 1135.0], [1301.0, 1136.3333333333333], [1325.0, 1131.6666666666667], [1321.0, 1129.4], [1317.0, 1132.0], [1401.0, 1099.3333333333333], [1405.0, 1097.25], [1393.0, 1102.5], [1369.0, 1119.0], [1365.0, 1122.5], [1385.0, 1114.0], [1377.0, 1120.0], [1461.0, 2340.5], [1469.0, 2418.0], [1441.0, 2370.0], [1465.0, 2617.5], [1421.0, 2491.5], [1413.0, 2525.0], [1409.0, 3010.0], [1437.0, 2375.0], [1433.0, 2378.0], [1429.0, 2390.0], [1425.0, 2408.0], [1453.0, 2352.0], [1529.0, 2129.0], [1533.0, 2123.0], [1505.0, 2573.0], [1509.0, 2445.0], [1521.0, 2456.0], [1481.0, 2308.0], [1501.0, 2246.0], [1497.0, 2276.0], [1513.0, 2144.0], [1585.0, 2251.25], [1593.0, 2078.0], [1545.0, 2369.0], [1541.0, 2116.0], [1537.0, 2382.0], [1565.0, 2111.0], [1577.0, 2319.0], [1657.0, 2324.0], [1653.0, 1997.0], [1633.0, 2183.0], [1641.0, 2301.0], [1645.0, 2376.0], [1661.0, 2375.0], [1649.0, 2159.5], [1609.0, 2065.0], [1605.0, 2072.0], [1601.0, 2071.5], [1629.0, 2048.0], [1625.0, 2311.0], [1713.0, 1604.0], [1701.0, 1619.5], [1705.0, 2042.0], [1709.0, 2056.0], [1717.0, 1788.5], [1673.0, 2218.0], [1665.0, 2171.0], [1689.0, 1867.0], [1685.0, 2128.0], [1681.0, 1687.0], [1781.0, 1818.0], [1765.0, 1898.5], [1761.0, 1920.0], [1769.0, 1575.0], [1733.0, 1865.0], [1737.0, 1906.0], [1757.0, 1973.0], [1753.0, 1843.0], [1841.0, 1504.0], [1849.0, 1953.0], [1825.0, 1851.0], [1833.0, 1796.0], [1805.0, 1589.75], [1801.0, 1729.6666666666667], [1793.0, 1823.3333333333333], [1817.0, 1954.0], [1813.0, 1912.0], [1809.0, 1659.6666666666667], [1905.0, 1647.4], [1917.0, 1466.0], [1885.0, 1685.0], [1857.0, 1873.0], [1865.0, 1693.5], [1869.0, 1852.0], [1881.0, 1624.5], [1925.0, 1924.5], [1973.0, 1640.0], [1981.0, 1665.25], [1977.0, 1788.25], [1949.0, 1870.5], [1921.0, 1468.0], [1933.0, 1844.5], [1945.0, 1456.0], [1941.0, 1730.0], [1937.0, 1619.0], [1965.0, 1605.6666666666667], [2017.0, 1805.5], [2045.0, 1825.0], [2025.0, 1758.0], [1985.0, 2154.0], [1993.0, 1560.5], [1997.0, 1724.3333333333333], [2001.0, 1786.0], [2154.0, 1755.6666666666667], [2114.0, 1809.5], [2066.0, 1914.0], [2106.0, 1694.0], [2098.0, 1772.0], [2130.0, 1826.0], [2282.0, 1376.0], [2250.0, 1513.0], [2266.0, 1099.0], [2298.0, 1613.0], [2274.0, 1584.0], [2186.0, 1743.0], [2194.0, 1754.25], [2234.0, 1691.3333333333333], [2210.0, 1692.0], [2370.0, 1412.5], [2426.0, 1475.0], [2386.0, 1364.0], [2394.0, 1436.0], [2418.0, 1542.6666666666667], [2402.0, 1487.75], [2330.0, 1534.6666666666667], [2458.0, 1551.0], [2554.0, 1538.0], [2498.0, 1572.5], [2546.0, 1641.0], [2450.0, 1531.0], [2434.0, 1610.0], [2482.0, 1564.0], [2474.0, 1497.0], [2658.0, 1173.75], [2674.0, 1184.0], [2626.0, 1133.5], [2634.0, 1127.0], [2642.0, 1127.0], [2562.0, 1337.0], [2570.0, 1356.0], [2578.0, 1135.0], [2602.0, 1120.0], [2594.0, 1303.0], [2698.0, 1184.0], [2810.0, 1130.5], [2754.0, 1144.5], [2786.0, 1128.6666666666667], [2690.0, 1174.25], [2706.0, 1180.0], [2714.0, 1181.5], [2746.0, 1169.3333333333333], [2730.0, 1188.0], [2722.0, 1175.0], [2882.0, 1105.0], [2898.0, 1102.0], [2922.0, 1109.75], [2914.0, 1114.4], [2842.0, 1117.0], [2874.0, 1106.0], [2850.0, 1113.6666666666667], [2946.0, 1119.5], [2962.0, 1118.0], [2970.0, 1113.875], [2994.0, 1104.0], [2986.0, 1106.0], [2147.0, 1637.2], [2163.0, 1664.5], [2115.0, 1905.0], [2171.0, 1749.0], [2107.0, 1889.0], [2051.0, 1667.3333333333333], [2059.0, 1689.0], [2075.0, 1639.0], [2099.0, 1723.0], [2139.0, 1732.5], [2291.0, 1614.0], [2251.0, 1172.0], [2243.0, 1735.0], [2259.0, 1224.0], [2267.0, 1445.0], [2299.0, 1665.0], [2283.0, 1516.0], [2275.0, 1484.0], [2187.0, 1798.0], [2179.0, 1548.0], [2235.0, 1782.0], [2227.0, 1723.4], [2403.0, 1440.0], [2371.0, 1736.0], [2379.0, 1471.0], [2427.0, 1545.0], [2307.0, 1558.75], [2315.0, 1603.5], [2323.0, 1529.3333333333333], [2331.0, 1505.0], [2363.0, 1563.0], [2339.0, 1515.6666666666667], [2539.0, 1506.5], [2547.0, 1625.0], [2555.0, 1487.0], [2515.0, 1489.5], [2523.0, 1544.5], [2435.0, 1508.5], [2491.0, 1554.0], [2475.0, 1458.0], [2467.0, 1588.5], [2683.0, 1163.3333333333333], [2627.0, 1122.0], [2643.0, 1136.0], [2651.0, 1219.0], [2675.0, 1166.0], [2667.0, 1212.25], [2579.0, 1325.0], [2587.0, 1286.0], [2619.0, 1176.0], [2611.0, 1186.0], [2595.0, 1104.0], [2755.0, 1142.0], [2763.0, 1144.0], [2779.0, 1128.25], [2795.0, 1132.0], [2707.0, 1183.0], [2739.0, 1176.0], [2939.0, 1118.3333333333333], [2891.0, 1103.75], [2827.0, 1122.0], [2835.0, 1120.0], [2875.0, 1110.0], [2867.0, 1099.3333333333333], [2947.0, 1111.0], [2995.0, 1100.6], [2955.0, 1118.0], [2971.0, 1118.0], [2987.0, 1103.0], [519.0, 1129.0], [517.0, 1132.3333333333333], [535.0, 1121.5], [533.0, 1121.5], [531.0, 1118.5], [529.0, 1122.0], [527.0, 1122.0], [525.0, 1127.0], [523.0, 1128.3333333333333], [571.0, 1104.0], [575.0, 1415.75], [569.0, 1104.0], [567.0, 1106.0], [561.0, 1106.0], [557.0, 1102.0], [547.0, 1118.0], [545.0, 1114.3333333333333], [551.0, 1109.0], [555.0, 1112.0], [605.0, 1453.0], [607.0, 1196.0], [593.0, 1506.0], [595.0, 1804.0], [603.0, 1463.0], [601.0, 1481.0], [591.0, 1847.0], [577.0, 1100.5], [579.0, 1461.0], [581.0, 1452.0], [583.0, 1374.0], [589.0, 1295.0], [587.0, 1337.0], [585.0, 1916.0], [599.0, 1360.5], [597.0, 1800.0], [633.0, 1442.0], [639.0, 1164.5], [621.0, 1163.5], [611.0, 1593.0], [609.0, 1599.0], [613.0, 1436.0], [615.0, 1178.0], [619.0, 1170.0], [617.0, 1172.0], [631.0, 1163.6666666666667], [627.0, 1163.0], [625.0, 1166.0], [667.0, 1152.0], [669.0, 1150.3333333333333], [665.0, 1154.0], [661.0, 1149.0], [657.0, 1155.0], [641.0, 1160.0], [645.0, 1162.0], [651.0, 1156.5], [649.0, 1155.0], [699.0, 1149.0], [693.0, 1147.3333333333333], [691.0, 1148.0], [689.0, 1143.0], [687.0, 1148.0], [683.0, 1148.6666666666667], [705.0, 1146.3333333333333], [723.0, 1140.0], [717.0, 1138.0], [767.0, 1130.0], [753.0, 1137.6666666666667], [765.0, 1138.0], [747.0, 1132.0], [745.0, 1132.0], [757.0, 1135.0], [755.0, 1131.0], [793.0, 1129.0], [791.0, 1130.8], [777.0, 1133.5], [825.0, 1118.0], [823.0, 1119.0], [821.0, 1117.0], [819.0, 1122.9999999999998], [807.0, 1128.0], [811.0, 1127.0], [837.0, 1109.0], [863.0, 1301.0], [861.0, 1327.0], [857.0, 1098.6666666666667], [847.0, 1103.0], [833.0, 1112.3333333333333], [845.0, 1104.75], [841.0, 1106.0], [853.0, 1099.4], [849.0, 1103.0], [869.0, 1596.0], [871.0, 1253.0], [883.0, 1197.0], [891.0, 1193.0], [867.0, 1290.0], [865.0, 1302.0], [879.0, 1210.0], [877.0, 1213.0], [875.0, 1539.0], [873.0, 1234.5], [887.0, 1193.0], [885.0, 1191.0], [903.0, 1187.0], [925.0, 1486.0], [927.0, 1161.0], [923.0, 1165.0], [901.0, 1185.0], [899.0, 1493.0], [907.0, 1178.5], [905.0, 1183.0], [919.0, 1173.0], [917.0, 1177.0], [915.0, 1180.0], [955.0, 1159.0], [959.0, 1157.6], [953.0, 1163.0], [951.0, 1161.75], [945.0, 1158.75], [939.0, 1162.5], [937.0, 1165.0], [991.0, 1152.0], [987.0, 1151.0], [985.0, 1152.5], [963.0, 1157.6666666666667], [981.0, 1158.0], [969.0, 1155.0], [1019.0, 1145.2], [1011.0, 1148.3333333333333], [1001.0, 1150.0], [999.0, 1149.0], [1074.0, 1124.6666666666667], [1086.0, 1121.0], [1082.0, 1124.0], [1078.0, 1124.5], [1046.0, 1137.2], [1026.0, 1142.6666666666667], [1038.0, 1141.3333333333333], [1034.0, 1140.0], [1142.0, 1267.0], [1150.0, 3059.0], [1126.0, 1100.6666666666667], [1130.0, 1095.0], [1138.0, 3139.0], [1094.0, 1118.5], [1090.0, 1119.0], [1106.0, 1112.0], [1134.0, 1330.0], [1162.0, 1167.0], [1210.0, 1149.0], [1158.0, 1171.0], [1154.0, 1177.0], [1190.0, 1145.5], [1186.0, 1153.0], [1178.0, 1169.5], [1170.0, 1169.0], [1278.0, 1132.1666666666667], [1230.0, 1137.0], [1222.0, 1142.0], [1342.0, 1122.0], [1326.0, 1132.0], [1306.0, 1133.0], [1286.0, 1129.5], [1406.0, 2668.0], [1358.0, 1122.3333333333333], [1346.0, 1129.5], [1390.0, 1101.0], [1374.0, 1119.6666666666667], [1422.0, 2481.0], [1462.0, 2620.0], [1442.0, 2376.0], [1458.0, 2430.3333333333335], [1418.0, 2501.0], [1414.0, 2523.0], [1410.0, 2539.0], [1438.0, 2378.0], [1434.0, 2666.0], [1430.0, 2392.0], [1454.0, 2345.0], [1450.0, 2519.5], [1446.0, 2365.5], [1526.0, 2450.0], [1522.0, 2435.0], [1534.0, 2122.0], [1506.0, 2181.0], [1510.0, 2425.0], [1530.0, 2404.0], [1502.0, 2240.0], [1474.0, 2321.0], [1498.0, 2506.0], [1494.0, 2418.5], [1490.0, 2427.5], [1518.0, 2137.0], [1514.0, 2141.0], [1590.0, 2082.0], [1594.0, 2077.0], [1598.0, 2284.0], [1542.0, 2119.0], [1566.0, 2386.0], [1554.0, 2109.25], [1662.0, 2397.0], [1634.0, 2388.0], [1638.0, 3670.0], [1646.0, 2360.0], [1658.0, 2378.0], [1614.0, 2059.0], [1606.0, 2331.0], [1626.0, 2053.0], [1622.0, 2169.0], [1618.0, 2314.5], [1722.0, 2027.0], [1698.0, 2024.0], [1706.0, 1922.0], [1710.0, 1605.0], [1678.0, 1696.0], [1674.0, 2042.0], [1670.0, 1973.5], [1666.0, 2235.0], [1690.0, 1999.0], [1686.0, 1666.0], [1682.0, 1937.0], [1778.0, 1913.5], [1790.0, 1737.5], [1762.0, 1673.3333333333333], [1774.0, 1573.0], [1758.0, 1938.5], [1734.0, 1889.0], [1750.0, 1804.0], [1746.0, 1925.0], [1850.0, 1780.0], [1846.0, 1685.0], [1798.0, 1917.0], [1794.0, 1823.0], [1822.0, 1886.0], [1818.0, 1739.8], [1918.0, 1820.0], [1890.0, 1827.5], [1914.0, 1842.0], [1910.0, 1824.5], [1906.0, 1951.0], [1858.0, 1805.0], [1866.0, 1498.0], [1970.0, 1842.0], [1954.0, 1700.5], [1930.0, 1463.0], [1938.0, 1685.5], [1962.0, 1718.5], [1958.0, 1689.5], [2038.0, 1744.5], [2022.0, 1638.4], [2034.0, 1708.0], [1998.0, 1808.0], [2010.0, 1785.0], [2006.0, 1391.0], [2164.0, 1774.0], [2124.0, 1725.3333333333333], [2076.0, 1805.0], [2068.0, 1766.0], [2060.0, 1793.0], [2108.0, 1680.0], [2084.0, 1740.3333333333333], [2244.0, 1734.3333333333333], [2252.0, 1468.0], [2300.0, 1559.0], [2268.0, 1451.0], [2284.0, 1666.0], [2276.0, 1451.0], [2188.0, 1697.5], [2204.0, 1689.0], [2412.0, 1560.5], [2428.0, 1516.0], [2388.0, 1456.0], [2396.0, 1516.3333333333333], [2324.0, 1577.0], [2332.0, 1547.0], [2364.0, 1449.5], [2356.0, 1533.3333333333333], [2548.0, 1584.0], [2556.0, 1496.0], [2500.0, 1557.0], [2524.0, 1528.0], [2540.0, 1527.0], [2452.0, 1627.5], [2492.0, 1537.25], [2484.0, 1550.0], [2476.0, 1615.5], [2636.0, 1126.75], [2668.0, 1222.0], [2644.0, 1136.0], [2564.0, 1242.5], [2572.0, 1347.0], [2580.0, 1123.0], [2588.0, 1300.0], [2604.0, 1186.5], [2596.0, 1109.0], [2796.0, 1128.0], [2804.0, 1124.0], [2700.0, 1181.0], [2716.0, 1182.6666666666667], [2748.0, 1168.5], [2732.0, 1183.5], [2724.0, 1180.5], [2932.0, 1109.2], [2940.0, 1117.0], [2892.0, 1102.0], [2908.0, 1104.3333333333333], [2916.0, 1107.8750000000002], [2836.0, 1116.0], [2844.0, 1116.5], [2876.0, 1104.6666666666667], [2868.0, 1097.0], [2860.0, 1107.5], [2956.0, 1111.0], [2996.0, 1105.0], [2988.0, 1105.25], [2980.0, 1107.75], [2149.0, 1748.5], [2157.0, 1617.0], [2173.0, 1672.5], [2117.0, 1689.0], [2053.0, 1833.0], [2061.0, 1876.0], [2077.0, 1678.0], [2093.0, 1747.0], [2085.0, 1733.0], [2141.0, 1696.0], [2253.0, 1555.0], [2245.0, 1710.0], [2261.0, 1321.0], [2285.0, 1417.0], [2237.0, 1741.0], [2213.0, 1559.0], [2405.0, 1502.0], [2373.0, 1570.5], [2381.0, 1564.0], [2389.0, 1589.5], [2317.0, 1504.3333333333333], [2549.0, 1549.0], [2525.0, 1679.0], [2541.0, 1439.0], [2533.0, 1628.0], [2445.0, 1585.75], [2477.0, 1584.0], [2469.0, 1584.0], [2573.0, 1344.5], [2677.0, 1168.0], [2645.0, 1129.0], [2685.0, 1170.0], [2661.0, 1216.0], [2565.0, 1378.0], [2581.0, 1296.0], [2589.0, 1106.0], [2621.0, 1229.0], [2605.0, 1114.0], [2597.0, 1115.0], [2805.0, 1131.0], [2757.0, 1145.0], [2813.0, 1125.0], [2765.0, 1146.0], [2773.0, 1132.75], [2781.0, 1134.0], [2797.0, 1125.0], [2693.0, 1166.0], [2709.0, 1187.0], [2717.0, 1191.0], [2741.0, 1178.5], [2733.0, 1177.0], [2933.0, 1118.5], [2885.0, 1102.25], [2893.0, 1102.0], [2901.0, 1103.0], [2909.0, 1104.25], [2941.0, 1113.8333333333335], [2925.0, 1111.6666666666667], [2821.0, 1123.5], [2829.0, 1132.0], [2877.0, 1106.3333333333333], [2869.0, 1095.5], [2861.0, 1106.0], [2949.0, 1111.0], [2957.0, 1123.0], [2997.0, 1106.875], [2989.0, 1098.0], [1083.0, 1123.0], [1063.0, 1130.5], [1055.0, 1135.6666666666667], [1051.0, 1135.6666666666667], [1031.0, 1144.0], [1147.0, 1238.5], [1151.0, 1206.0], [1131.0, 1091.0], [1123.0, 1101.25], [1143.0, 1267.0], [1103.0, 1111.3333333333333], [1119.0, 1103.2], [1111.0, 1109.0], [1135.0, 1338.0], [1211.0, 1140.0], [1203.0, 1150.3333333333333], [1191.0, 1154.0], [1187.0, 1153.5], [1183.0, 1161.5], [1155.0, 1174.0], [1167.0, 1166.5], [1179.0, 1169.0], [1267.0, 1136.0], [1275.0, 1134.0], [1279.0, 1132.0], [1271.0, 1139.8], [1247.0, 1137.5], [1231.0, 1150.0], [1227.0, 1138.3333333333333], [1243.0, 1133.0], [1235.0, 1136.5], [1335.0, 1124.0], [1343.0, 1130.3333333333333], [1311.0, 1132.6666666666667], [1287.0, 1142.5], [1283.0, 1137.6666666666667], [1295.0, 1133.25], [1291.0, 1136.25], [1307.0, 1143.0], [1399.0, 1097.6666666666667], [1407.0, 2627.0], [1355.0, 1127.1666666666667], [1371.0, 1120.5], [1367.0, 1123.0], [1363.0, 1122.0], [1391.0, 1105.0], [1383.0, 1113.0], [1459.0, 2343.0], [1447.0, 2367.0], [1471.0, 2325.5], [1443.0, 2371.0], [1423.0, 2728.0], [1419.0, 2490.0], [1415.0, 2515.0], [1411.0, 2536.0], [1439.0, 2374.0], [1427.0, 2556.0], [1455.0, 2351.0], [1451.0, 2364.0], [1527.0, 2424.0], [1523.0, 2133.0], [1535.0, 2120.0], [1507.0, 2167.0], [1531.0, 2126.0], [1487.0, 2444.0], [1483.0, 2445.0], [1479.0, 2313.0], [1475.0, 2322.0], [1503.0, 2201.0], [1499.0, 2246.0], [1495.0, 2844.0], [1491.0, 2296.0], [1519.0, 2133.0], [1551.0, 2257.0], [1595.0, 2072.0], [1591.0, 2074.0], [1587.0, 2079.5], [1547.0, 2112.0], [1539.0, 2116.5], [1563.0, 2414.0], [1559.0, 2233.0], [1583.0, 2085.5], [1579.0, 2241.5], [1575.0, 2102.0], [1655.0, 1991.0], [1663.0, 1955.0], [1647.0, 2340.0], [1659.0, 2123.0], [1651.0, 2364.5], [1611.0, 2060.5], [1607.0, 2413.0], [1603.0, 2069.5], [1631.0, 2213.0], [1627.0, 2051.0], [1623.0, 2060.0], [1619.0, 2061.0], [1715.0, 2058.0], [1719.0, 1732.5], [1727.0, 1879.3333333333333], [1699.0, 1938.0], [1703.0, 1815.0], [1679.0, 2038.0], [1675.0, 1720.0], [1671.0, 2077.0], [1667.0, 2059.0], [1687.0, 1654.0], [1683.0, 1679.0], [1787.0, 1865.6666666666667], [1763.0, 1939.0], [1767.0, 1941.0], [1771.0, 1912.5], [1775.0, 1960.0], [1783.0, 1697.0], [1779.0, 1951.0], [1735.0, 1591.0], [1743.0, 1854.0], [1739.0, 1892.3333333333333], [1755.0, 1740.0], [1827.0, 1868.0], [1855.0, 1886.0], [1831.0, 1796.0], [1795.0, 1949.0], [1819.0, 1877.0], [1811.0, 1906.0], [1839.0, 1868.6666666666667], [1915.0, 1769.0], [1895.0, 1957.0], [1863.0, 1850.5], [1871.0, 1494.0], [1883.0, 1726.0], [1879.0, 1565.0], [1875.0, 1732.3333333333333], [1983.0, 1800.0], [1927.0, 1842.0], [1931.0, 1721.0], [1947.0, 1866.0], [1967.0, 1644.5], [2035.0, 1861.0], [2047.0, 1729.5], [2027.0, 1741.0], [2043.0, 1582.6666666666667], [2015.0, 1602.0], [1991.0, 1740.3333333333333], [1995.0, 1843.0], [1999.0, 1825.0], [2007.0, 1761.0], [2031.0, 1668.6666666666667], [2174.0, 1742.0], [2126.0, 1700.0], [2078.0, 1340.0], [2062.0, 1805.0], [2110.0, 1704.5], [2086.0, 1783.0], [2142.0, 1757.0], [2134.0, 1765.5], [2286.0, 1517.0], [2246.0, 1737.0], [2294.0, 1507.3333333333333], [2254.0, 1128.0], [2262.0, 1104.0], [2270.0, 1471.0], [2238.0, 1913.0], [2182.0, 1754.6666666666667], [2198.0, 1597.0], [2206.0, 1689.5], [2230.0, 1770.0], [2222.0, 1751.2], [2422.0, 1569.25], [2374.0, 1589.0], [2430.0, 1526.0], [2382.0, 1532.0], [2390.0, 1464.0], [2366.0, 1390.0], [2310.0, 1600.0], [2358.0, 1577.0], [2350.0, 1481.8], [2558.0, 1462.0], [2502.0, 1548.5], [2510.0, 1547.2], [2518.0, 1621.6666666666667], [2534.0, 1650.0], [2462.0, 1560.25], [2438.0, 1535.5], [2494.0, 1529.0], [2566.0, 1371.0], [2686.0, 1168.0], [2654.0, 1190.3333333333333], [2678.0, 1187.0], [2622.0, 1125.0], [2574.0, 1342.0], [2582.0, 1297.0], [2614.0, 1239.0], [2606.0, 1231.0], [2598.0, 1256.0], [2790.0, 1131.0], [2766.0, 1143.5], [2782.0, 1118.0], [2814.0, 1133.0], [2750.0, 1172.5], [2702.0, 1188.5], [2710.0, 1195.0], [2718.0, 1186.0], [2726.0, 1181.5], [2926.0, 1106.0], [2934.0, 1108.1666666666667], [2942.0, 1107.0], [2910.0, 1106.5555555555557], [2918.0, 1107.5], [2830.0, 1120.25], [2838.0, 1115.0], [2878.0, 1110.0], [2870.0, 1122.0], [2862.0, 1101.0], [2854.0, 1107.5], [2958.0, 1114.5], [2966.0, 1107.0], [2974.0, 1112.5], [2990.0, 1106.6666666666667], [2982.0, 1118.0], [2167.0, 1751.5], [2119.0, 1772.0], [2159.0, 1719.0], [2079.0, 1701.0], [2103.0, 1683.25], [2255.0, 1622.0], [2303.0, 1581.6666666666667], [2263.0, 1587.0], [2271.0, 1619.0], [2279.0, 1472.0], [2239.0, 1661.0], [2191.0, 1718.0], [2415.0, 1542.0], [2391.0, 1609.0], [2407.0, 1580.5], [2335.0, 1614.3333333333333], [2343.0, 1565.25], [2559.0, 1341.0], [2551.0, 1438.0], [2503.0, 1693.0], [2511.0, 1573.0], [2519.0, 1532.0], [2527.0, 1564.0], [2543.0, 1664.0], [2535.0, 1468.0], [2455.0, 1512.0], [2447.0, 1468.0], [2487.0, 1497.25], [2663.0, 1212.0], [2631.0, 1128.25], [2639.0, 1131.6666666666667], [2671.0, 1220.6666666666667], [2567.0, 1364.0], [2575.0, 1125.0], [2583.0, 1289.0], [2591.0, 1119.5], [2607.0, 1136.0], [2599.0, 1110.0], [2807.0, 1121.0], [2815.0, 1121.0], [2775.0, 1127.5], [2783.0, 1133.5], [2703.0, 1186.0], [2711.0, 1188.5], [2719.0, 1181.0], [2743.0, 1169.5], [2735.0, 1182.5], [2935.0, 1107.0], [2887.0, 1103.4], [2895.0, 1102.8333333333333], [2903.0, 1107.0], [2911.0, 1103.0], [2927.0, 1109.5], [2879.0, 1109.0], [2823.0, 1119.5], [2847.0, 1113.3333333333333], [2871.0, 1113.0], [2863.0, 1101.0], [2855.0, 1109.0], [2959.0, 1110.0], [2967.0, 1112.7142857142856], [2983.0, 1106.0], [1.0, 10422.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[2950.0268954349817, 1475.801483962568]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 3000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 42209.2, "minX": 1.68415962E12, "maxY": 213796.4, "series": [{"data": [[1.68415968E12, 187339.3], [1.68415974E12, 213796.4], [1.68415986E12, 197182.2], [1.68415962E12, 174926.43333333332], [1.68415992E12, 51951.683333333334], [1.6841598E12, 190577.18333333332]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.68415968E12, 152239.1], [1.68415974E12, 173705.7], [1.68415986E12, 160203.1], [1.68415962E12, 130292.85], [1.68415992E12, 42209.2], [1.6841598E12, 154836.45]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68415992E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 1241.492034240873, "minX": 1.68415962E12, "maxY": 2417.876098957265, "series": [{"data": [[1.68415968E12, 1241.492034240873], [1.68415974E12, 1308.4754610815921], [1.68415986E12, 1262.4858773019976], [1.68415962E12, 2417.876098957265], [1.68415992E12, 1470.228344768438], [1.6841598E12, 1308.1852825998035]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68415992E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 1240.9986921888033, "minX": 1.68415962E12, "maxY": 2192.85824303142, "series": [{"data": [[1.68415968E12, 1240.9986921888033], [1.68415974E12, 1307.993956444725], [1.68415986E12, 1261.7130832674236], [1.68415962E12, 2192.85824303142], [1.68415992E12, 1469.2497855917632], [1.6841598E12, 1307.6212519726434]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68415992E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.2251286449399657, "minX": 1.68415962E12, "maxY": 930.6873849928435, "series": [{"data": [[1.68415968E12, 66.81827368921641], [1.68415974E12, 66.96884443055103], [1.68415986E12, 75.50615749632821], [1.68415962E12, 930.6873849928435], [1.68415992E12, 0.2251286449399657], [1.6841598E12, 86.29884855923774]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68415992E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 1088.0, "minX": 1.68415962E12, "maxY": 16222.0, "series": [{"data": [[1.68415968E12, 12186.0], [1.68415974E12, 10629.0], [1.68415986E12, 12361.0], [1.68415962E12, 16222.0], [1.68415992E12, 13240.0], [1.6841598E12, 12877.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.68415968E12, 1534.0], [1.68415974E12, 1704.5], [1.68415986E12, 1565.0], [1.68415962E12, 5518.200000000001], [1.68415992E12, 1925.5], [1.6841598E12, 1773.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.68415968E12, 2087.829999999998], [1.68415974E12, 3314.549999999992], [1.68415986E12, 2486.970000000001], [1.68415962E12, 11231.140000000003], [1.68415992E12, 7170.900000000005], [1.6841598E12, 2475.600000000006]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.68415968E12, 1743.0], [1.68415974E12, 1932.0], [1.68415986E12, 1784.0], [1.68415962E12, 7250.499999999993], [1.68415992E12, 2336.0], [1.6841598E12, 1993.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.68415968E12, 1089.0], [1.68415974E12, 1089.0], [1.68415986E12, 1089.0], [1.68415962E12, 1090.0], [1.68415992E12, 1091.0], [1.6841598E12, 1088.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.68415968E12, 1112.0], [1.68415974E12, 1113.0], [1.68415986E12, 1114.0], [1.68415962E12, 1131.0], [1.68415992E12, 1157.0], [1.6841598E12, 1113.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68415992E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 45.0, "minX": 1.0, "maxY": 11922.5, "series": [{"data": [[2.0, 2883.0], [3.0, 2338.0], [4.0, 2352.0], [5.0, 5906.0], [6.0, 1743.0], [7.0, 5625.0], [8.0, 7536.0], [9.0, 7312.0], [10.0, 1940.5], [11.0, 5237.5], [12.0, 1750.5], [13.0, 2027.0], [14.0, 1101.0], [15.0, 10260.0], [16.0, 4869.5], [17.0, 5761.0], [26.0, 5857.5], [29.0, 1599.5], [30.0, 2080.0], [31.0, 1176.0], [34.0, 1557.0], [39.0, 6343.0], [44.0, 1111.0], [47.0, 2279.0], [55.0, 1210.0], [56.0, 4077.5], [59.0, 2162.0], [66.0, 1439.5], [67.0, 1103.0], [85.0, 1106.0], [114.0, 1102.0], [117.0, 1385.0], [124.0, 1310.0], [127.0, 1873.0], [133.0, 1168.0], [139.0, 1109.0], [143.0, 1128.0], [158.0, 1134.0], [165.0, 1282.0], [167.0, 1102.0], [175.0, 1507.0], [169.0, 1104.0], [176.0, 4464.0], [179.0, 1110.0], [184.0, 1108.0], [206.0, 1102.0], [221.0, 1111.0], [216.0, 1114.0], [228.0, 1512.0], [239.0, 1107.0], [246.0, 1113.0], [249.0, 1105.0], [258.0, 1313.5], [260.0, 1164.0], [265.0, 1175.0], [282.0, 1159.0], [285.0, 1125.0], [280.0, 1362.0], [272.0, 1106.0], [286.0, 2003.0], [301.0, 1105.0], [298.0, 1106.0], [299.0, 1108.0], [297.0, 1105.0], [289.0, 1116.0], [300.0, 1106.0], [290.0, 1265.5], [296.0, 1104.0], [294.0, 1106.0], [302.0, 1109.0], [303.0, 1106.0], [312.0, 1157.5], [304.0, 1119.0], [311.0, 1339.0], [317.0, 1107.0], [308.0, 1105.0], [305.0, 1101.0], [331.0, 1252.0], [322.0, 1113.0], [329.0, 1174.0], [343.0, 1569.0], [346.0, 1105.0], [349.0, 1349.0], [339.0, 1103.0], [342.0, 1105.0], [358.0, 1303.5], [380.0, 1115.0], [378.0, 1672.0], [386.0, 1313.0], [384.0, 1542.5], [385.0, 1105.0], [392.0, 1122.5], [395.0, 1109.0], [396.0, 1109.5], [410.0, 1105.0], [415.0, 1103.0], [431.0, 1117.0], [429.0, 1106.0], [442.0, 1115.0], [455.0, 2554.0], [478.0, 4904.0], [464.0, 1613.0], [489.0, 1488.0], [494.0, 1271.0], [480.0, 1108.0], [492.0, 1111.0], [493.0, 1504.0], [500.0, 1553.5], [507.0, 1103.0], [532.0, 1117.0], [541.0, 1107.0], [524.0, 1275.5], [542.0, 1115.0], [520.0, 1673.0], [513.0, 1351.0], [536.0, 1615.5], [531.0, 1104.0], [566.0, 1142.0], [544.0, 1108.0], [570.0, 1107.0], [553.0, 1103.0], [545.0, 1119.0], [568.0, 1113.0], [573.0, 1143.0], [604.0, 1112.0], [591.0, 1107.0], [589.0, 1116.0], [590.0, 1409.0], [600.0, 1109.0], [601.0, 1105.0], [588.0, 1107.0], [586.0, 1110.0], [593.0, 1107.0], [580.0, 1534.0], [581.0, 1107.0], [592.0, 1279.0], [607.0, 1922.0], [599.0, 1106.0], [598.0, 1103.0], [597.0, 1105.0], [609.0, 1110.0], [619.0, 1113.0], [621.0, 1714.0], [614.0, 1102.5], [611.0, 1160.0], [654.0, 1856.5], [656.0, 3136.0], [669.0, 1123.0], [645.0, 1123.0], [688.0, 1576.0], [701.0, 1108.0], [732.0, 1110.0], [727.0, 1111.0], [741.0, 1246.0], [799.0, 1119.0], [790.0, 1316.0], [795.0, 1780.0], [792.0, 1183.0], [787.0, 1497.0], [829.0, 1106.0], [802.0, 1117.0], [800.0, 1106.0], [854.0, 4701.5], [863.0, 1167.0], [859.0, 1382.0], [866.0, 1122.0], [885.0, 1565.0], [875.0, 1112.0], [864.0, 1119.0], [915.0, 1108.0], [913.0, 1108.0], [929.0, 1110.0], [936.0, 1107.0], [1.0, 5089.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[532.0, 45.0], [609.0, 58.0], [656.0, 10416.5], [343.0, 11857.0], [175.0, 52.0], [3.0, 117.0], [455.0, 11922.5], [478.0, 10913.5], [494.0, 11383.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 936.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 10258.0, "series": [{"data": [[2.0, 2883.0], [3.0, 2338.0], [4.0, 2352.0], [5.0, 5905.0], [6.0, 1743.0], [7.0, 5625.0], [8.0, 7536.0], [9.0, 7310.0], [10.0, 1940.5], [11.0, 5237.5], [12.0, 1750.0], [13.0, 2027.0], [14.0, 1100.5], [15.0, 10258.0], [16.0, 4868.5], [17.0, 5759.0], [26.0, 5855.5], [29.0, 1599.0], [30.0, 2080.0], [31.0, 1169.0], [34.0, 1557.0], [39.0, 6343.0], [44.0, 1110.0], [47.0, 2279.0], [55.0, 1210.0], [56.0, 4077.5], [59.0, 2162.0], [66.0, 1439.5], [67.0, 1103.0], [85.0, 1106.0], [114.0, 1102.0], [117.0, 1384.0], [124.0, 1310.0], [127.0, 1872.0], [133.0, 1168.0], [139.0, 1109.0], [143.0, 1127.0], [158.0, 1132.5], [165.0, 1282.0], [167.0, 1101.0], [175.0, 1501.0], [169.0, 1103.0], [176.0, 4453.5], [179.0, 1109.0], [184.0, 1108.0], [206.0, 1102.0], [221.0, 1110.0], [216.0, 1114.0], [228.0, 1512.0], [239.0, 1107.0], [246.0, 1112.5], [249.0, 1104.0], [258.0, 1313.5], [260.0, 1164.0], [265.0, 1174.0], [282.0, 1149.5], [285.0, 1124.0], [280.0, 1362.0], [272.0, 1105.0], [286.0, 2003.0], [301.0, 1105.0], [298.0, 1105.0], [299.0, 1108.0], [297.0, 1105.0], [289.0, 1115.0], [300.0, 1106.0], [290.0, 1263.0], [296.0, 1104.0], [294.0, 1106.0], [302.0, 1108.0], [303.0, 1106.0], [312.0, 1157.5], [304.0, 1119.0], [311.0, 1338.0], [317.0, 1106.0], [308.0, 1104.0], [305.0, 1101.0], [331.0, 1252.0], [322.0, 1113.0], [329.0, 1174.0], [343.0, 1569.0], [346.0, 1104.0], [349.0, 1349.0], [339.0, 1103.0], [342.0, 1105.0], [358.0, 1303.5], [380.0, 1115.0], [378.0, 1672.0], [386.0, 1313.0], [384.0, 1542.5], [385.0, 1105.0], [392.0, 1119.5], [395.0, 1108.0], [396.0, 1109.0], [410.0, 1105.0], [415.0, 1103.0], [431.0, 1116.0], [429.0, 1106.0], [442.0, 1114.0], [455.0, 2554.0], [478.0, 4903.5], [464.0, 1613.0], [489.0, 1488.0], [494.0, 1271.0], [480.0, 1108.0], [492.0, 1111.0], [493.0, 1504.0], [500.0, 1552.5], [507.0, 1103.0], [532.0, 1116.0], [541.0, 1107.0], [524.0, 1275.5], [542.0, 1115.0], [520.0, 1673.0], [513.0, 1351.0], [536.0, 1615.5], [531.0, 1104.0], [566.0, 1142.0], [544.0, 1108.0], [570.0, 1106.0], [553.0, 1103.0], [545.0, 1119.0], [568.0, 1113.0], [573.0, 1142.0], [604.0, 1112.0], [591.0, 1106.0], [589.0, 1116.0], [590.0, 1409.0], [600.0, 1109.0], [601.0, 1105.0], [588.0, 1107.0], [586.0, 1110.0], [593.0, 1107.0], [580.0, 1534.0], [581.0, 1107.0], [592.0, 1279.0], [607.0, 1920.0], [599.0, 1106.0], [598.0, 1103.0], [597.0, 1104.0], [609.0, 1110.0], [619.0, 1113.0], [621.0, 1704.0], [614.0, 1102.0], [611.0, 1159.0], [654.0, 1854.0], [656.0, 3136.0], [669.0, 1122.0], [645.0, 1123.0], [688.0, 1574.5], [701.0, 1108.0], [732.0, 1110.0], [727.0, 1111.0], [741.0, 1244.0], [799.0, 1118.0], [790.0, 1315.0], [795.0, 1780.0], [792.0, 1183.0], [787.0, 1497.0], [829.0, 1106.0], [802.0, 1117.0], [800.0, 1106.0], [854.0, 4701.5], [863.0, 1167.0], [859.0, 1382.0], [866.0, 1122.0], [885.0, 1565.0], [875.0, 1112.0], [864.0, 1119.0], [915.0, 1108.0], [913.0, 1108.0], [929.0, 1110.0], [936.0, 1106.0], [1.0, 5087.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[532.0, 45.0], [609.0, 58.0], [656.0, 0.0], [343.0, 0.0], [175.0, 52.0], [3.0, 117.0], [455.0, 0.0], [478.0, 0.0], [494.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 936.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 77.73333333333333, "minX": 1.68415962E12, "maxY": 320.0, "series": [{"data": [[1.68415968E12, 275.0], [1.68415974E12, 320.0], [1.68415986E12, 285.0], [1.68415962E12, 255.0], [1.68415992E12, 77.73333333333333], [1.6841598E12, 290.0]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68415992E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.68415962E12, "maxY": 319.9, "series": [{"data": [[1.68415962E12, 0.016666666666666666]], "isOverall": false, "label": "Non HTTP response code: javax.net.ssl.SSLException", "isController": false}, {"data": [[1.68415968E12, 280.26666666666665], [1.68415974E12, 319.9], [1.68415986E12, 295.03333333333336], [1.68415962E12, 239.95], [1.68415992E12, 77.73333333333333], [1.6841598E12, 285.15]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.68415962E12, 4.45]], "isOverall": false, "label": "Non HTTP response code: javax.net.ssl.SSLHandshakeException", "isController": false}, {"data": [[1.68415962E12, 0.1]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.NoHttpResponseException", "isController": false}, {"data": [[1.68415968E12, 0.1]], "isOverall": false, "label": "429", "isController": false}, {"data": [[1.68415962E12, 0.03333333333333333]], "isOverall": false, "label": "Non HTTP response code: java.net.SocketException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68415992E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.1, "minX": 1.68415962E12, "maxY": 319.9, "series": [{"data": [[1.68415968E12, 280.26666666666665], [1.68415974E12, 319.9], [1.68415986E12, 295.03333333333336], [1.68415962E12, 239.95], [1.68415992E12, 77.73333333333333], [1.6841598E12, 285.15]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.68415968E12, 0.1], [1.68415962E12, 4.6]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68415992E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.1, "minX": 1.68415962E12, "maxY": 319.9, "series": [{"data": [[1.68415968E12, 280.26666666666665], [1.68415974E12, 319.9], [1.68415986E12, 295.03333333333336], [1.68415962E12, 239.95], [1.68415992E12, 77.73333333333333], [1.6841598E12, 285.15]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.68415968E12, 0.1], [1.68415962E12, 4.6]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68415992E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

