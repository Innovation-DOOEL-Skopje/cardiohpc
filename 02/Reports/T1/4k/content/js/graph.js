/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 49.0, "minX": 0.0, "maxY": 18746.0, "series": [{"data": [[0.0, 49.0], [0.1, 1091.0], [0.2, 1092.0], [0.3, 1093.0], [0.4, 1093.0], [0.5, 1093.0], [0.6, 1093.0], [0.7, 1094.0], [0.8, 1094.0], [0.9, 1094.0], [1.0, 1094.0], [1.1, 1094.0], [1.2, 1094.0], [1.3, 1095.0], [1.4, 1095.0], [1.5, 1095.0], [1.6, 1095.0], [1.7, 1095.0], [1.8, 1095.0], [1.9, 1095.0], [2.0, 1095.0], [2.1, 1095.0], [2.2, 1096.0], [2.3, 1096.0], [2.4, 1096.0], [2.5, 1096.0], [2.6, 1096.0], [2.7, 1096.0], [2.8, 1096.0], [2.9, 1096.0], [3.0, 1096.0], [3.1, 1096.0], [3.2, 1096.0], [3.3, 1096.0], [3.4, 1096.0], [3.5, 1097.0], [3.6, 1097.0], [3.7, 1097.0], [3.8, 1097.0], [3.9, 1097.0], [4.0, 1097.0], [4.1, 1097.0], [4.2, 1097.0], [4.3, 1097.0], [4.4, 1097.0], [4.5, 1097.0], [4.6, 1097.0], [4.7, 1097.0], [4.8, 1097.0], [4.9, 1097.0], [5.0, 1097.0], [5.1, 1097.0], [5.2, 1098.0], [5.3, 1098.0], [5.4, 1098.0], [5.5, 1098.0], [5.6, 1098.0], [5.7, 1098.0], [5.8, 1098.0], [5.9, 1098.0], [6.0, 1098.0], [6.1, 1098.0], [6.2, 1098.0], [6.3, 1098.0], [6.4, 1098.0], [6.5, 1098.0], [6.6, 1098.0], [6.7, 1098.0], [6.8, 1098.0], [6.9, 1098.0], [7.0, 1098.0], [7.1, 1098.0], [7.2, 1098.0], [7.3, 1098.0], [7.4, 1099.0], [7.5, 1099.0], [7.6, 1099.0], [7.7, 1099.0], [7.8, 1099.0], [7.9, 1099.0], [8.0, 1099.0], [8.1, 1099.0], [8.2, 1099.0], [8.3, 1099.0], [8.4, 1099.0], [8.5, 1099.0], [8.6, 1099.0], [8.7, 1099.0], [8.8, 1099.0], [8.9, 1099.0], [9.0, 1099.0], [9.1, 1099.0], [9.2, 1099.0], [9.3, 1099.0], [9.4, 1099.0], [9.5, 1099.0], [9.6, 1099.0], [9.7, 1099.0], [9.8, 1099.0], [9.9, 1100.0], [10.0, 1100.0], [10.1, 1100.0], [10.2, 1100.0], [10.3, 1100.0], [10.4, 1100.0], [10.5, 1100.0], [10.6, 1100.0], [10.7, 1100.0], [10.8, 1100.0], [10.9, 1100.0], [11.0, 1100.0], [11.1, 1100.0], [11.2, 1100.0], [11.3, 1100.0], [11.4, 1100.0], [11.5, 1100.0], [11.6, 1100.0], [11.7, 1100.0], [11.8, 1100.0], [11.9, 1100.0], [12.0, 1100.0], [12.1, 1100.0], [12.2, 1100.0], [12.3, 1100.0], [12.4, 1100.0], [12.5, 1100.0], [12.6, 1101.0], [12.7, 1101.0], [12.8, 1101.0], [12.9, 1101.0], [13.0, 1101.0], [13.1, 1101.0], [13.2, 1101.0], [13.3, 1101.0], [13.4, 1101.0], [13.5, 1101.0], [13.6, 1101.0], [13.7, 1101.0], [13.8, 1101.0], [13.9, 1101.0], [14.0, 1101.0], [14.1, 1101.0], [14.2, 1101.0], [14.3, 1101.0], [14.4, 1101.0], [14.5, 1101.0], [14.6, 1101.0], [14.7, 1101.0], [14.8, 1101.0], [14.9, 1101.0], [15.0, 1101.0], [15.1, 1101.0], [15.2, 1101.0], [15.3, 1101.0], [15.4, 1101.0], [15.5, 1102.0], [15.6, 1102.0], [15.7, 1102.0], [15.8, 1102.0], [15.9, 1102.0], [16.0, 1102.0], [16.1, 1102.0], [16.2, 1102.0], [16.3, 1102.0], [16.4, 1102.0], [16.5, 1102.0], [16.6, 1102.0], [16.7, 1102.0], [16.8, 1102.0], [16.9, 1102.0], [17.0, 1102.0], [17.1, 1102.0], [17.2, 1102.0], [17.3, 1102.0], [17.4, 1102.0], [17.5, 1102.0], [17.6, 1102.0], [17.7, 1102.0], [17.8, 1102.0], [17.9, 1102.0], [18.0, 1102.0], [18.1, 1102.0], [18.2, 1102.0], [18.3, 1102.0], [18.4, 1102.0], [18.5, 1103.0], [18.6, 1103.0], [18.7, 1103.0], [18.8, 1103.0], [18.9, 1103.0], [19.0, 1103.0], [19.1, 1103.0], [19.2, 1103.0], [19.3, 1103.0], [19.4, 1103.0], [19.5, 1103.0], [19.6, 1103.0], [19.7, 1103.0], [19.8, 1103.0], [19.9, 1103.0], [20.0, 1103.0], [20.1, 1103.0], [20.2, 1103.0], [20.3, 1103.0], [20.4, 1103.0], [20.5, 1103.0], [20.6, 1103.0], [20.7, 1103.0], [20.8, 1103.0], [20.9, 1103.0], [21.0, 1103.0], [21.1, 1103.0], [21.2, 1103.0], [21.3, 1103.0], [21.4, 1104.0], [21.5, 1104.0], [21.6, 1104.0], [21.7, 1104.0], [21.8, 1104.0], [21.9, 1104.0], [22.0, 1104.0], [22.1, 1104.0], [22.2, 1104.0], [22.3, 1104.0], [22.4, 1104.0], [22.5, 1104.0], [22.6, 1104.0], [22.7, 1104.0], [22.8, 1104.0], [22.9, 1104.0], [23.0, 1104.0], [23.1, 1104.0], [23.2, 1104.0], [23.3, 1104.0], [23.4, 1104.0], [23.5, 1104.0], [23.6, 1104.0], [23.7, 1104.0], [23.8, 1104.0], [23.9, 1104.0], [24.0, 1104.0], [24.1, 1104.0], [24.2, 1104.0], [24.3, 1105.0], [24.4, 1105.0], [24.5, 1105.0], [24.6, 1105.0], [24.7, 1105.0], [24.8, 1105.0], [24.9, 1105.0], [25.0, 1105.0], [25.1, 1105.0], [25.2, 1105.0], [25.3, 1105.0], [25.4, 1105.0], [25.5, 1105.0], [25.6, 1105.0], [25.7, 1105.0], [25.8, 1105.0], [25.9, 1105.0], [26.0, 1105.0], [26.1, 1105.0], [26.2, 1105.0], [26.3, 1105.0], [26.4, 1105.0], [26.5, 1105.0], [26.6, 1105.0], [26.7, 1105.0], [26.8, 1105.0], [26.9, 1105.0], [27.0, 1106.0], [27.1, 1106.0], [27.2, 1106.0], [27.3, 1106.0], [27.4, 1106.0], [27.5, 1106.0], [27.6, 1106.0], [27.7, 1106.0], [27.8, 1106.0], [27.9, 1106.0], [28.0, 1106.0], [28.1, 1106.0], [28.2, 1106.0], [28.3, 1106.0], [28.4, 1106.0], [28.5, 1106.0], [28.6, 1106.0], [28.7, 1106.0], [28.8, 1106.0], [28.9, 1106.0], [29.0, 1106.0], [29.1, 1106.0], [29.2, 1106.0], [29.3, 1106.0], [29.4, 1106.0], [29.5, 1107.0], [29.6, 1107.0], [29.7, 1107.0], [29.8, 1107.0], [29.9, 1107.0], [30.0, 1107.0], [30.1, 1107.0], [30.2, 1107.0], [30.3, 1107.0], [30.4, 1107.0], [30.5, 1107.0], [30.6, 1107.0], [30.7, 1107.0], [30.8, 1107.0], [30.9, 1107.0], [31.0, 1107.0], [31.1, 1107.0], [31.2, 1107.0], [31.3, 1107.0], [31.4, 1107.0], [31.5, 1107.0], [31.6, 1107.0], [31.7, 1107.0], [31.8, 1108.0], [31.9, 1108.0], [32.0, 1108.0], [32.1, 1108.0], [32.2, 1108.0], [32.3, 1108.0], [32.4, 1108.0], [32.5, 1108.0], [32.6, 1108.0], [32.7, 1108.0], [32.8, 1108.0], [32.9, 1108.0], [33.0, 1108.0], [33.1, 1108.0], [33.2, 1108.0], [33.3, 1108.0], [33.4, 1108.0], [33.5, 1108.0], [33.6, 1108.0], [33.7, 1108.0], [33.8, 1108.0], [33.9, 1108.0], [34.0, 1109.0], [34.1, 1109.0], [34.2, 1109.0], [34.3, 1109.0], [34.4, 1109.0], [34.5, 1109.0], [34.6, 1109.0], [34.7, 1109.0], [34.8, 1109.0], [34.9, 1109.0], [35.0, 1109.0], [35.1, 1109.0], [35.2, 1109.0], [35.3, 1109.0], [35.4, 1109.0], [35.5, 1109.0], [35.6, 1109.0], [35.7, 1109.0], [35.8, 1109.0], [35.9, 1109.0], [36.0, 1110.0], [36.1, 1110.0], [36.2, 1110.0], [36.3, 1110.0], [36.4, 1110.0], [36.5, 1110.0], [36.6, 1110.0], [36.7, 1110.0], [36.8, 1110.0], [36.9, 1110.0], [37.0, 1110.0], [37.1, 1110.0], [37.2, 1110.0], [37.3, 1110.0], [37.4, 1110.0], [37.5, 1110.0], [37.6, 1110.0], [37.7, 1110.0], [37.8, 1110.0], [37.9, 1110.0], [38.0, 1111.0], [38.1, 1111.0], [38.2, 1111.0], [38.3, 1111.0], [38.4, 1111.0], [38.5, 1111.0], [38.6, 1111.0], [38.7, 1111.0], [38.8, 1111.0], [38.9, 1111.0], [39.0, 1111.0], [39.1, 1111.0], [39.2, 1111.0], [39.3, 1111.0], [39.4, 1111.0], [39.5, 1111.0], [39.6, 1111.0], [39.7, 1112.0], [39.8, 1112.0], [39.9, 1112.0], [40.0, 1112.0], [40.1, 1112.0], [40.2, 1112.0], [40.3, 1112.0], [40.4, 1112.0], [40.5, 1112.0], [40.6, 1112.0], [40.7, 1112.0], [40.8, 1112.0], [40.9, 1112.0], [41.0, 1112.0], [41.1, 1112.0], [41.2, 1113.0], [41.3, 1113.0], [41.4, 1113.0], [41.5, 1113.0], [41.6, 1113.0], [41.7, 1113.0], [41.8, 1113.0], [41.9, 1113.0], [42.0, 1113.0], [42.1, 1113.0], [42.2, 1113.0], [42.3, 1113.0], [42.4, 1113.0], [42.5, 1113.0], [42.6, 1114.0], [42.7, 1114.0], [42.8, 1114.0], [42.9, 1114.0], [43.0, 1114.0], [43.1, 1114.0], [43.2, 1114.0], [43.3, 1114.0], [43.4, 1114.0], [43.5, 1114.0], [43.6, 1114.0], [43.7, 1114.0], [43.8, 1114.0], [43.9, 1115.0], [44.0, 1115.0], [44.1, 1115.0], [44.2, 1115.0], [44.3, 1115.0], [44.4, 1115.0], [44.5, 1115.0], [44.6, 1115.0], [44.7, 1115.0], [44.8, 1115.0], [44.9, 1115.0], [45.0, 1116.0], [45.1, 1116.0], [45.2, 1116.0], [45.3, 1116.0], [45.4, 1116.0], [45.5, 1116.0], [45.6, 1116.0], [45.7, 1116.0], [45.8, 1116.0], [45.9, 1116.0], [46.0, 1117.0], [46.1, 1117.0], [46.2, 1117.0], [46.3, 1117.0], [46.4, 1117.0], [46.5, 1117.0], [46.6, 1117.0], [46.7, 1117.0], [46.8, 1117.0], [46.9, 1117.0], [47.0, 1118.0], [47.1, 1118.0], [47.2, 1118.0], [47.3, 1118.0], [47.4, 1118.0], [47.5, 1118.0], [47.6, 1118.0], [47.7, 1118.0], [47.8, 1118.0], [47.9, 1119.0], [48.0, 1119.0], [48.1, 1119.0], [48.2, 1119.0], [48.3, 1119.0], [48.4, 1119.0], [48.5, 1119.0], [48.6, 1119.0], [48.7, 1120.0], [48.8, 1120.0], [48.9, 1120.0], [49.0, 1120.0], [49.1, 1120.0], [49.2, 1120.0], [49.3, 1120.0], [49.4, 1120.0], [49.5, 1121.0], [49.6, 1121.0], [49.7, 1121.0], [49.8, 1121.0], [49.9, 1121.0], [50.0, 1121.0], [50.1, 1122.0], [50.2, 1122.0], [50.3, 1122.0], [50.4, 1122.0], [50.5, 1122.0], [50.6, 1122.0], [50.7, 1122.0], [50.8, 1123.0], [50.9, 1123.0], [51.0, 1123.0], [51.1, 1123.0], [51.2, 1123.0], [51.3, 1123.0], [51.4, 1124.0], [51.5, 1124.0], [51.6, 1124.0], [51.7, 1124.0], [51.8, 1124.0], [51.9, 1124.0], [52.0, 1125.0], [52.1, 1125.0], [52.2, 1125.0], [52.3, 1125.0], [52.4, 1125.0], [52.5, 1125.0], [52.6, 1126.0], [52.7, 1126.0], [52.8, 1126.0], [52.9, 1126.0], [53.0, 1127.0], [53.1, 1127.0], [53.2, 1127.0], [53.3, 1127.0], [53.4, 1127.0], [53.5, 1128.0], [53.6, 1128.0], [53.7, 1128.0], [53.8, 1128.0], [53.9, 1128.0], [54.0, 1129.0], [54.1, 1129.0], [54.2, 1129.0], [54.3, 1129.0], [54.4, 1130.0], [54.5, 1130.0], [54.6, 1130.0], [54.7, 1131.0], [54.8, 1131.0], [54.9, 1131.0], [55.0, 1131.0], [55.1, 1132.0], [55.2, 1132.0], [55.3, 1132.0], [55.4, 1133.0], [55.5, 1133.0], [55.6, 1133.0], [55.7, 1134.0], [55.8, 1134.0], [55.9, 1134.0], [56.0, 1135.0], [56.1, 1135.0], [56.2, 1135.0], [56.3, 1136.0], [56.4, 1136.0], [56.5, 1137.0], [56.6, 1137.0], [56.7, 1138.0], [56.8, 1138.0], [56.9, 1138.0], [57.0, 1139.0], [57.1, 1139.0], [57.2, 1140.0], [57.3, 1140.0], [57.4, 1141.0], [57.5, 1141.0], [57.6, 1142.0], [57.7, 1142.0], [57.8, 1143.0], [57.9, 1143.0], [58.0, 1144.0], [58.1, 1144.0], [58.2, 1145.0], [58.3, 1145.0], [58.4, 1146.0], [58.5, 1146.0], [58.6, 1147.0], [58.7, 1147.0], [58.8, 1148.0], [58.9, 1148.0], [59.0, 1149.0], [59.1, 1150.0], [59.2, 1150.0], [59.3, 1151.0], [59.4, 1152.0], [59.5, 1152.0], [59.6, 1153.0], [59.7, 1154.0], [59.8, 1155.0], [59.9, 1156.0], [60.0, 1156.0], [60.1, 1158.0], [60.2, 1159.0], [60.3, 1160.0], [60.4, 1161.0], [60.5, 1162.0], [60.6, 1163.0], [60.7, 1165.0], [60.8, 1166.0], [60.9, 1167.0], [61.0, 1168.0], [61.1, 1170.0], [61.2, 1171.0], [61.3, 1172.0], [61.4, 1174.0], [61.5, 1175.0], [61.6, 1177.0], [61.7, 1179.0], [61.8, 1180.0], [61.9, 1182.0], [62.0, 1184.0], [62.1, 1185.0], [62.2, 1186.0], [62.3, 1188.0], [62.4, 1189.0], [62.5, 1191.0], [62.6, 1192.0], [62.7, 1193.0], [62.8, 1195.0], [62.9, 1196.0], [63.0, 1197.0], [63.1, 1198.0], [63.2, 1199.0], [63.3, 1201.0], [63.4, 1202.0], [63.5, 1203.0], [63.6, 1204.0], [63.7, 1206.0], [63.8, 1207.0], [63.9, 1209.0], [64.0, 1210.0], [64.1, 1211.0], [64.2, 1213.0], [64.3, 1214.0], [64.4, 1216.0], [64.5, 1218.0], [64.6, 1219.0], [64.7, 1221.0], [64.8, 1223.0], [64.9, 1224.0], [65.0, 1226.0], [65.1, 1228.0], [65.2, 1230.0], [65.3, 1232.0], [65.4, 1234.0], [65.5, 1235.0], [65.6, 1238.0], [65.7, 1241.0], [65.8, 1243.0], [65.9, 1245.0], [66.0, 1248.0], [66.1, 1251.0], [66.2, 1253.0], [66.3, 1256.0], [66.4, 1258.0], [66.5, 1261.0], [66.6, 1264.0], [66.7, 1267.0], [66.8, 1269.0], [66.9, 1272.0], [67.0, 1275.0], [67.1, 1277.0], [67.2, 1279.0], [67.3, 1283.0], [67.4, 1285.0], [67.5, 1289.0], [67.6, 1292.0], [67.7, 1295.0], [67.8, 1298.0], [67.9, 1301.0], [68.0, 1305.0], [68.1, 1309.0], [68.2, 1312.0], [68.3, 1315.0], [68.4, 1318.0], [68.5, 1321.0], [68.6, 1323.0], [68.7, 1325.0], [68.8, 1328.0], [68.9, 1330.0], [69.0, 1332.0], [69.1, 1335.0], [69.2, 1337.0], [69.3, 1339.0], [69.4, 1342.0], [69.5, 1344.0], [69.6, 1346.0], [69.7, 1349.0], [69.8, 1351.0], [69.9, 1354.0], [70.0, 1356.0], [70.1, 1359.0], [70.2, 1362.0], [70.3, 1364.0], [70.4, 1367.0], [70.5, 1369.0], [70.6, 1372.0], [70.7, 1375.0], [70.8, 1377.0], [70.9, 1380.0], [71.0, 1382.0], [71.1, 1386.0], [71.2, 1389.0], [71.3, 1392.0], [71.4, 1396.0], [71.5, 1398.0], [71.6, 1402.0], [71.7, 1405.0], [71.8, 1409.0], [71.9, 1412.0], [72.0, 1416.0], [72.1, 1421.0], [72.2, 1424.0], [72.3, 1429.0], [72.4, 1433.0], [72.5, 1436.0], [72.6, 1440.0], [72.7, 1443.0], [72.8, 1446.0], [72.9, 1449.0], [73.0, 1452.0], [73.1, 1456.0], [73.2, 1459.0], [73.3, 1462.0], [73.4, 1465.0], [73.5, 1469.0], [73.6, 1472.0], [73.7, 1476.0], [73.8, 1480.0], [73.9, 1483.0], [74.0, 1488.0], [74.1, 1491.0], [74.2, 1496.0], [74.3, 1499.0], [74.4, 1502.0], [74.5, 1505.0], [74.6, 1508.0], [74.7, 1511.0], [74.8, 1515.0], [74.9, 1518.0], [75.0, 1521.0], [75.1, 1525.0], [75.2, 1528.0], [75.3, 1532.0], [75.4, 1535.0], [75.5, 1538.0], [75.6, 1542.0], [75.7, 1546.0], [75.8, 1549.0], [75.9, 1553.0], [76.0, 1557.0], [76.1, 1561.0], [76.2, 1565.0], [76.3, 1569.0], [76.4, 1572.0], [76.5, 1576.0], [76.6, 1579.0], [76.7, 1582.0], [76.8, 1586.0], [76.9, 1589.0], [77.0, 1592.0], [77.1, 1596.0], [77.2, 1600.0], [77.3, 1603.0], [77.4, 1606.0], [77.5, 1609.0], [77.6, 1614.0], [77.7, 1618.0], [77.8, 1623.0], [77.9, 1627.0], [78.0, 1632.0], [78.1, 1635.0], [78.2, 1638.0], [78.3, 1642.0], [78.4, 1645.0], [78.5, 1649.0], [78.6, 1653.0], [78.7, 1656.0], [78.8, 1660.0], [78.9, 1665.0], [79.0, 1669.0], [79.1, 1673.0], [79.2, 1677.0], [79.3, 1680.0], [79.4, 1684.0], [79.5, 1687.0], [79.6, 1690.0], [79.7, 1694.0], [79.8, 1698.0], [79.9, 1702.0], [80.0, 1707.0], [80.1, 1710.0], [80.2, 1715.0], [80.3, 1718.0], [80.4, 1722.0], [80.5, 1727.0], [80.6, 1731.0], [80.7, 1734.0], [80.8, 1738.0], [80.9, 1741.0], [81.0, 1744.0], [81.1, 1747.0], [81.2, 1751.0], [81.3, 1754.0], [81.4, 1758.0], [81.5, 1761.0], [81.6, 1764.0], [81.7, 1768.0], [81.8, 1771.0], [81.9, 1774.0], [82.0, 1777.0], [82.1, 1781.0], [82.2, 1784.0], [82.3, 1787.0], [82.4, 1790.0], [82.5, 1793.0], [82.6, 1797.0], [82.7, 1799.0], [82.8, 1802.0], [82.9, 1806.0], [83.0, 1809.0], [83.1, 1812.0], [83.2, 1816.0], [83.3, 1820.0], [83.4, 1824.0], [83.5, 1827.0], [83.6, 1832.0], [83.7, 1836.0], [83.8, 1840.0], [83.9, 1843.0], [84.0, 1847.0], [84.1, 1850.0], [84.2, 1853.0], [84.3, 1856.0], [84.4, 1859.0], [84.5, 1862.0], [84.6, 1865.0], [84.7, 1868.0], [84.8, 1871.0], [84.9, 1875.0], [85.0, 1879.0], [85.1, 1883.0], [85.2, 1886.0], [85.3, 1890.0], [85.4, 1893.0], [85.5, 1896.0], [85.6, 1900.0], [85.7, 1904.0], [85.8, 1909.0], [85.9, 1913.0], [86.0, 1918.0], [86.1, 1922.0], [86.2, 1926.0], [86.3, 1931.0], [86.4, 1935.0], [86.5, 1939.0], [86.6, 1943.0], [86.7, 1948.0], [86.8, 1954.0], [86.9, 1960.0], [87.0, 1966.0], [87.1, 1972.0], [87.2, 1979.0], [87.3, 1984.0], [87.4, 1989.0], [87.5, 1994.0], [87.6, 1999.0], [87.7, 2003.0], [87.8, 2008.0], [87.9, 2012.0], [88.0, 2018.0], [88.1, 2023.0], [88.2, 2027.0], [88.3, 2032.0], [88.4, 2036.0], [88.5, 2042.0], [88.6, 2047.0], [88.7, 2053.0], [88.8, 2059.0], [88.9, 2064.0], [89.0, 2070.0], [89.1, 2076.0], [89.2, 2082.0], [89.3, 2088.0], [89.4, 2094.0], [89.5, 2100.0], [89.6, 2107.0], [89.7, 2112.0], [89.8, 2116.0], [89.9, 2121.0], [90.0, 2128.0], [90.1, 2135.0], [90.2, 2143.0], [90.3, 2151.0], [90.4, 2160.0], [90.5, 2169.0], [90.6, 2179.0], [90.7, 2187.0], [90.8, 2198.0], [90.9, 2212.0], [91.0, 2226.0], [91.1, 2242.0], [91.2, 2257.0], [91.3, 2272.0], [91.4, 2286.0], [91.5, 2304.0], [91.6, 2328.0], [91.7, 2348.0], [91.8, 2365.0], [91.9, 2378.0], [92.0, 2395.0], [92.1, 2411.0], [92.2, 2424.0], [92.3, 2434.0], [92.4, 2447.0], [92.5, 2466.0], [92.6, 2490.0], [92.7, 2502.0], [92.8, 2513.0], [92.9, 2534.0], [93.0, 2555.0], [93.1, 2574.0], [93.2, 2586.0], [93.3, 2599.0], [93.4, 2615.0], [93.5, 2630.0], [93.6, 2644.0], [93.7, 2661.0], [93.8, 2680.0], [93.9, 2700.0], [94.0, 2721.0], [94.1, 2737.0], [94.2, 2750.0], [94.3, 2763.0], [94.4, 2777.0], [94.5, 2791.0], [94.6, 2804.0], [94.7, 2821.0], [94.8, 2840.0], [94.9, 2857.0], [95.0, 2877.0], [95.1, 2899.0], [95.2, 2927.0], [95.3, 2954.0], [95.4, 2969.0], [95.5, 2998.0], [95.6, 3027.0], [95.7, 3056.0], [95.8, 3076.0], [95.9, 3098.0], [96.0, 3121.0], [96.1, 3144.0], [96.2, 3167.0], [96.3, 3191.0], [96.4, 3222.0], [96.5, 3269.0], [96.6, 3319.0], [96.7, 3404.0], [96.8, 3454.0], [96.9, 3501.0], [97.0, 3581.0], [97.1, 3692.0], [97.2, 3790.0], [97.3, 3921.0], [97.4, 4001.0], [97.5, 4149.0], [97.6, 4349.0], [97.7, 4665.0], [97.8, 4888.0], [97.9, 4988.0], [98.0, 5061.0], [98.1, 5128.0], [98.2, 5213.0], [98.3, 5346.0], [98.4, 5477.0], [98.5, 5609.0], [98.6, 5722.0], [98.7, 5805.0], [98.8, 5895.0], [98.9, 5978.0], [99.0, 6112.0], [99.1, 6264.0], [99.2, 6406.0], [99.3, 6645.0], [99.4, 6901.0], [99.5, 7284.0], [99.6, 7615.0], [99.7, 7932.0], [99.8, 8294.0], [99.9, 8969.0], [100.0, 18746.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 64220.0, "series": [{"data": [[0.0, 12.0], [1000.0, 11822.0], [1100.0, 64220.0], [1200.0, 5557.0], [1300.0, 4446.0], [1400.0, 3332.0], [1500.0, 3475.0], [1600.0, 3173.0], [1700.0, 3451.0], [1800.0, 3464.0], [1900.0, 2442.0], [2000.0, 2264.0], [2100.0, 1584.0], [2300.0, 658.0], [2200.0, 802.0], [2400.0, 785.0], [2500.0, 752.0], [2600.0, 706.0], [2700.0, 812.0], [2800.0, 649.0], [2900.0, 484.0], [3000.0, 482.0], [3100.0, 524.0], [3300.0, 146.0], [3200.0, 277.0], [3400.0, 245.0], [3500.0, 149.0], [3700.0, 118.0], [3600.0, 107.0], [3800.0, 98.0], [3900.0, 132.0], [4000.0, 81.0], [4100.0, 73.0], [4300.0, 41.0], [4200.0, 62.0], [4400.0, 49.0], [4600.0, 34.0], [4500.0, 35.0], [4800.0, 59.0], [4700.0, 57.0], [4900.0, 131.0], [5000.0, 175.0], [5100.0, 148.0], [5200.0, 83.0], [5300.0, 95.0], [5400.0, 105.0], [5500.0, 79.0], [5600.0, 105.0], [5800.0, 137.0], [5700.0, 147.0], [5900.0, 136.0], [6000.0, 90.0], [6100.0, 79.0], [6200.0, 77.0], [6300.0, 86.0], [6400.0, 70.0], [6500.0, 41.0], [6600.0, 33.0], [6700.0, 36.0], [6800.0, 63.0], [6900.0, 24.0], [7000.0, 36.0], [7100.0, 26.0], [7200.0, 39.0], [7300.0, 29.0], [7400.0, 41.0], [7500.0, 40.0], [7600.0, 33.0], [7700.0, 39.0], [7900.0, 30.0], [7800.0, 47.0], [8000.0, 42.0], [8100.0, 28.0], [8200.0, 30.0], [8700.0, 13.0], [8500.0, 12.0], [8400.0, 13.0], [8300.0, 49.0], [8600.0, 9.0], [9200.0, 8.0], [8800.0, 11.0], [9000.0, 8.0], [8900.0, 13.0], [9100.0, 8.0], [9400.0, 7.0], [9700.0, 2.0], [9600.0, 3.0], [9300.0, 5.0], [10200.0, 1.0], [9900.0, 3.0], [10100.0, 3.0], [9800.0, 1.0], [10600.0, 6.0], [10500.0, 8.0], [10300.0, 7.0], [10700.0, 3.0], [10400.0, 1.0], [10800.0, 5.0], [10900.0, 7.0], [11200.0, 4.0], [11000.0, 5.0], [11400.0, 2.0], [11500.0, 2.0], [11700.0, 1.0], [11300.0, 1.0], [11800.0, 1.0], [12300.0, 2.0], [13200.0, 1.0], [12900.0, 1.0], [14800.0, 3.0], [15100.0, 3.0], [15200.0, 1.0], [15300.0, 1.0], [15400.0, 3.0], [18700.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 18700.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 18.0, "minX": 1.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 89420.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 89420.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 30859.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 18.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 47.55434782608696, "minX": 1.68415998E12, "maxY": 3000.0, "series": [{"data": [[1.68416004E12, 3000.0], [1.68416022E12, 2817.808603251825], [1.68416016E12, 3000.0], [1.68416028E12, 47.55434782608696], [1.68415998E12, 3000.0], [1.6841601E12, 3000.0]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68416028E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 1091.0, "minX": 2.0, "maxY": 9810.0, "series": [{"data": [[2.0, 7558.0], [3.0, 7538.0], [4.0, 8834.0], [5.0, 8692.0], [6.0, 8679.0], [7.0, 8891.0], [8.0, 7681.0], [9.0, 8243.0], [10.0, 9270.0], [11.0, 7965.0], [12.0, 9810.0], [13.0, 9643.0], [14.0, 7864.0], [15.0, 8126.0], [16.0, 9093.0], [17.0, 7855.0], [18.0, 8029.0], [19.0, 8001.0], [20.0, 7955.0], [21.0, 7952.0], [22.0, 8961.0], [23.0, 9376.0], [24.0, 9421.0], [25.0, 8939.0], [26.0, 8944.0], [27.0, 7803.0], [28.0, 7819.0], [31.0, 8284.333333333334], [33.0, 6980.0], [32.0, 7482.0], [35.0, 7203.0], [34.0, 7205.0], [37.0, 8034.0], [36.0, 8243.0], [39.0, 5889.0], [38.0, 8042.0], [41.0, 5786.0], [40.0, 4956.0], [43.0, 4824.0], [42.0, 4329.0], [45.0, 7006.0], [44.0, 6998.0], [47.0, 5606.0], [46.0, 5909.0], [49.0, 5472.0], [48.0, 4673.0], [51.0, 5349.5], [53.0, 5361.0], [52.0, 4491.0], [55.0, 4413.0], [54.0, 5622.0], [57.0, 6413.0], [56.0, 5816.0], [59.0, 5166.0], [58.0, 4239.0], [61.0, 5202.0], [60.0, 5003.0], [63.0, 5052.0], [62.0, 5479.0], [67.0, 6567.0], [66.0, 3730.0], [65.0, 3274.0], [64.0, 5362.0], [71.0, 5224.0], [70.0, 6432.0], [69.0, 5244.0], [68.0, 6534.0], [75.0, 5142.0], [74.0, 4602.0], [73.0, 6159.0], [79.0, 5650.0], [78.0, 4530.0], [77.0, 4538.0], [76.0, 5149.0], [83.0, 4997.0], [82.0, 6226.0], [81.0, 5662.0], [80.0, 6223.0], [87.0, 5985.0], [86.0, 6154.0], [85.0, 4298.0], [84.0, 4901.0], [91.0, 5973.0], [90.0, 5984.0], [89.0, 6035.0], [88.0, 6018.0], [95.0, 5873.0], [94.0, 5855.0], [93.0, 5935.0], [92.0, 5939.0], [99.0, 5609.0], [98.0, 5673.0], [97.0, 5824.0], [96.0, 5965.0], [103.0, 2277.5], [101.0, 5606.0], [100.0, 5773.0], [107.0, 2646.0], [106.0, 2676.0], [105.0, 2692.0], [104.0, 3614.0], [111.0, 3506.0], [110.0, 3526.0], [109.0, 2626.0], [108.0, 3574.0], [115.0, 2549.0], [114.0, 2559.0], [113.0, 3507.0], [112.0, 4762.0], [119.0, 3389.0], [118.0, 3675.0], [117.0, 3658.0], [116.0, 2544.0], [123.0, 3316.0], [122.0, 1912.0], [121.0, 1937.0], [120.0, 1976.0], [127.0, 1847.0], [126.0, 1888.5], [124.0, 5054.0], [135.0, 1780.0], [134.0, 2298.0], [133.0, 2305.0], [132.0, 2311.0], [131.0, 2313.0], [130.0, 2316.0], [129.0, 1454.0], [128.0, 1459.0], [143.0, 1670.0], [142.0, 3399.0], [141.0, 1713.0], [140.0, 1741.0], [139.0, 1369.0], [138.0, 2252.0], [137.0, 2265.0], [136.0, 3442.0], [150.0, 1142.0], [149.0, 2064.0], [148.0, 1200.0], [147.0, 2088.0], [146.0, 2122.0], [145.0, 1282.0], [144.0, 2160.0], [158.0, 1122.5], [156.0, 1124.5], [154.0, 1126.0], [152.0, 1128.0], [167.0, 1119.0], [163.0, 1119.6666666666667], [160.0, 1122.0], [173.0, 1116.0], [172.0, 1116.0], [169.0, 1117.5], [168.0, 1118.6666666666667], [182.0, 1112.0], [181.0, 1114.0], [180.0, 1113.0], [179.0, 1113.0], [178.0, 1114.0], [176.0, 1116.0], [188.0, 1110.0], [186.0, 1111.0], [199.0, 1106.5], [204.0, 1105.0], [201.0, 1106.0], [214.0, 1100.6], [213.0, 1100.0], [210.0, 1102.25], [208.0, 1103.4], [223.0, 1098.0], [220.0, 1099.0], [219.0, 1098.5], [218.0, 1099.0], [217.0, 1100.0], [216.0, 1098.5], [230.0, 1368.0], [229.0, 1895.0], [228.0, 1433.0], [227.0, 1093.0], [226.0, 1222.3333333333333], [238.0, 1290.0], [237.0, 2821.0], [235.0, 1801.0], [234.0, 1820.0], [233.0, 1357.0], [232.0, 1364.5], [247.0, 1275.0], [246.0, 1771.0], [245.0, 1777.0], [243.0, 2073.3333333333335], [240.0, 1776.0], [255.0, 1759.0], [254.0, 1605.0], [251.0, 2695.0], [250.0, 2387.6666666666665], [248.0, 1770.0], [270.0, 1696.0], [271.0, 2851.0], [269.0, 1693.0], [268.0, 2892.0], [267.0, 2620.0], [266.0, 2615.0], [265.0, 1452.0], [263.0, 1205.0], [258.0, 1719.5], [256.0, 2670.0], [262.0, 1719.0], [261.0, 2327.0], [285.0, 1192.0], [286.0, 1690.0], [284.0, 1189.0], [283.0, 1190.0], [281.0, 2625.0], [280.0, 1192.6666666666667], [278.0, 1190.0], [277.0, 1192.0], [275.0, 1193.6666666666667], [272.0, 1195.0], [303.0, 1171.0], [301.0, 1172.0], [299.0, 1188.6666666666667], [297.0, 1187.0], [295.0, 1188.0], [294.0, 1188.0], [291.0, 1189.0], [288.0, 1189.0], [319.0, 1168.3333333333333], [316.0, 1166.0], [314.0, 1165.0], [313.0, 1170.25], [310.0, 1171.5], [307.0, 1172.0], [305.0, 1171.5], [335.0, 1162.0], [333.0, 1161.0], [332.0, 1164.0], [331.0, 1162.0], [330.0, 1166.0], [329.0, 1164.6], [326.0, 1163.0], [323.0, 1165.0], [351.0, 1160.5], [349.0, 1160.0], [346.0, 1160.0], [344.0, 1161.0], [341.0, 1161.3333333333333], [338.0, 1163.5], [336.0, 1161.0], [367.0, 1156.5], [365.0, 1156.0], [363.0, 1158.0], [361.0, 1156.0], [360.0, 1158.0], [358.0, 1158.0], [357.0, 1157.0], [354.0, 1158.0], [353.0, 1160.0], [381.0, 1151.0], [377.0, 1151.5], [375.0, 1153.3333333333333], [373.0, 1154.0], [371.0, 1153.5], [369.0, 1153.5], [399.0, 1130.0], [397.0, 1132.0], [395.0, 1134.0], [392.0, 1135.0], [391.0, 1136.0], [390.0, 1136.0], [387.0, 1135.0], [385.0, 1139.5], [414.0, 1121.3333333333333], [411.0, 1616.5], [409.0, 1124.5], [407.0, 1127.6666666666667], [405.0, 1127.0], [404.0, 1129.0], [402.0, 1128.3333333333333], [400.0, 1129.0], [430.0, 1112.0], [429.0, 1116.0], [427.0, 1115.5], [424.0, 1115.0], [422.0, 1117.0], [419.0, 1118.5], [417.0, 1119.0], [416.0, 1118.5], [445.0, 1102.25], [442.0, 1104.0], [440.0, 1105.25], [437.0, 1107.0], [434.0, 1110.6666666666667], [433.0, 1110.0], [463.0, 1094.0], [462.0, 1096.0], [460.0, 1097.0], [456.0, 1098.3333333333333], [453.0, 1100.0], [450.0, 1100.3333333333333], [449.0, 1100.0], [478.0, 1527.0], [479.0, 2433.0], [477.0, 2668.0], [476.0, 1539.0], [475.0, 1542.5], [473.0, 1545.0], [472.0, 1548.0], [471.0, 2500.0], [465.0, 1091.0], [464.0, 1092.0], [467.0, 2518.0], [466.0, 1572.0], [470.0, 2686.0], [469.0, 1562.0], [468.0, 2756.0], [483.0, 2420.0], [494.0, 1932.5], [492.0, 1936.0], [490.0, 1469.5], [488.0, 2421.0], [487.0, 2366.0], [486.0, 2624.0], [485.0, 1486.0], [484.0, 1497.0], [481.0, 2661.0], [480.0, 3733.0], [504.0, 1447.0], [509.0, 1433.5], [507.0, 2356.0], [506.0, 1449.0], [505.0, 1441.0], [503.0, 1452.0], [502.0, 3619.0], [501.0, 2547.3333333333335], [498.0, 2344.0], [497.0, 2395.0], [496.0, 1924.5], [536.0, 1827.0], [528.0, 1395.5], [540.0, 2263.0], [538.0, 1377.5], [526.0, 1402.0], [518.0, 1884.0], [516.0, 1415.0], [512.0, 2372.0], [524.0, 1410.0], [520.0, 2355.0], [534.0, 2269.0], [532.0, 2271.0], [568.0, 1309.0], [562.0, 2217.0], [572.0, 1294.0], [570.0, 1310.0], [548.0, 2255.0], [546.0, 1350.0], [544.0, 2263.0], [558.0, 2466.0], [556.0, 1915.0], [554.0, 2230.0], [552.0, 1339.0], [566.0, 1778.0], [600.0, 1701.0], [594.0, 1271.0], [592.0, 1271.0], [602.0, 1254.0], [576.0, 2216.5], [578.0, 2185.0], [588.0, 1278.5], [586.0, 2162.0], [584.0, 2172.0], [598.0, 2187.0], [596.0, 1263.0], [612.0, 1234.0], [638.0, 1221.0], [634.0, 2145.0], [632.0, 2118.0], [610.0, 1860.0], [608.0, 1243.0], [618.0, 1228.0], [616.0, 1233.0], [630.0, 1226.3333333333333], [626.0, 1226.0], [668.0, 1192.0], [658.0, 1508.6666666666667], [656.0, 1668.0], [660.0, 1783.5], [666.0, 1200.0], [664.0, 1199.0], [646.0, 1218.0], [648.0, 1676.5], [662.0, 2116.0], [676.0, 1487.6666666666667], [688.0, 1168.0], [700.0, 1163.0], [696.0, 1160.0], [686.0, 1168.0], [684.0, 1176.0], [682.0, 1179.0], [680.0, 2090.0], [694.0, 1609.5], [728.0, 1152.75], [732.0, 1148.6666666666667], [710.0, 1154.0], [708.0, 2100.0], [706.0, 1155.0], [704.0, 1156.0], [726.0, 1148.0], [722.0, 1151.0], [712.0, 1152.0], [740.0, 1150.5], [766.0, 1153.0], [764.0, 1147.0], [762.0, 1150.0], [738.0, 1149.0], [736.0, 1151.75], [750.0, 1150.0], [746.0, 1150.75], [744.0, 1150.0], [756.0, 1146.0], [752.0, 1151.0], [798.0, 1131.6666666666667], [790.0, 1132.0], [772.0, 1147.0], [770.0, 1150.2], [780.0, 1150.0], [778.0, 1145.5], [830.0, 1123.0], [804.0, 1131.0], [822.0, 1124.3333333333333], [818.0, 1126.0], [814.0, 1127.0], [862.0, 1114.0], [858.0, 1114.0], [856.0, 1114.4], [836.0, 1120.6666666666667], [832.0, 1123.5], [892.0, 1100.8], [864.0, 1112.3333333333333], [886.0, 1102.25], [884.0, 1105.0], [880.0, 1105.0], [876.0, 1107.0], [924.0, 1541.0], [926.0, 1591.0], [912.0, 1951.0], [914.0, 1616.0], [916.0, 1827.0], [920.0, 1835.0], [902.0, 2173.0], [900.0, 1095.0], [898.0, 1097.0], [910.0, 1910.0], [908.0, 1860.0], [906.0, 1883.0], [904.0, 1937.0], [918.0, 1556.0], [956.0, 1531.0], [958.0, 1769.0], [944.0, 1768.0], [946.0, 1570.0], [954.0, 1768.0], [952.0, 1764.0], [934.0, 1567.0], [932.0, 1575.0], [930.0, 1823.0], [928.0, 1840.0], [942.0, 1571.0], [938.0, 1586.0], [936.0, 1577.0], [950.0, 1567.0], [984.0, 1544.0], [980.0, 1530.0], [990.0, 1632.5], [988.0, 1528.0], [964.0, 1741.0], [962.0, 1763.0], [960.0, 1627.0], [972.0, 1507.0], [970.0, 1556.0], [968.0, 1597.6666666666667], [982.0, 1517.0], [1018.0, 1620.6], [1020.0, 1642.5], [994.0, 1596.0], [1014.0, 1501.0], [1010.0, 1515.0], [1004.0, 1642.0], [1002.0, 1734.0], [1080.0, 1496.0], [1072.0, 1500.0], [1064.0, 1974.0], [1056.0, 1665.25], [1044.0, 1709.0], [1140.0, 1324.0], [1148.0, 1638.5], [1120.0, 1675.0], [1128.0, 1405.0], [1144.0, 1590.0], [1136.0, 1997.5], [1100.0, 1650.0], [1096.0, 1647.0], [1092.0, 1758.0], [1112.0, 1437.0], [1108.0, 1522.5], [1132.0, 1393.0], [1160.0, 1569.0], [1204.0, 1901.0], [1208.0, 1432.0], [1156.0, 1569.0], [1164.0, 1563.5], [1176.0, 1563.5], [1172.0, 1435.0], [1168.0, 1286.0], [1196.0, 1570.0], [1192.0, 1320.0], [1184.0, 1583.0], [1264.0, 1225.0], [1276.0, 1261.0], [1248.0, 1279.0], [1268.0, 1513.0], [1224.0, 1920.0], [1216.0, 1554.0], [1244.0, 1509.0], [1236.0, 1266.5], [1232.0, 1356.6666666666667], [1332.0, 1376.0], [1320.0, 1238.0], [1312.0, 1484.6666666666667], [1336.0, 1222.0], [1304.0, 1241.5], [1280.0, 1237.0], [1288.0, 1500.0], [1300.0, 1807.0], [1324.0, 1229.0], [1316.0, 1464.5], [1344.0, 1431.5], [1404.0, 1420.0], [1400.0, 2460.0], [1396.0, 1196.0], [1372.0, 1165.0], [1352.0, 1327.5], [1368.0, 1321.0], [1364.0, 2496.0], [1360.0, 1321.5], [1388.0, 1423.0], [1384.0, 1195.0], [1376.0, 1288.0], [1464.0, 1707.0], [1468.0, 1379.0], [1440.0, 1390.0], [1444.0, 1272.0], [1460.0, 1367.0], [1456.0, 1719.0], [1420.0, 1259.0], [1412.0, 1396.0], [1436.0, 1385.0], [1424.0, 1173.0], [1480.0, 1254.6666666666667], [1532.0, 1349.5], [1520.0, 1695.6666666666667], [1504.0, 1116.0], [1472.0, 1351.0], [1476.0, 1345.5], [1496.0, 1118.0], [1488.0, 1677.3333333333333], [1584.0, 3046.0], [1592.0, 1314.0], [1596.0, 1310.0], [1588.0, 1325.0], [1540.0, 2333.0], [1564.0, 1680.0], [1560.0, 1680.0], [1552.0, 1349.75], [1580.0, 1335.3333333333333], [1576.0, 1578.3333333333333], [1572.0, 1440.3333333333333], [1604.0, 1228.0], [1660.0, 1234.5], [1656.0, 1216.0], [1648.0, 1230.0], [1628.0, 1113.0], [1600.0, 1261.0], [1608.0, 1502.0], [1612.0, 1106.0], [1624.0, 1105.0], [1620.0, 1096.0], [1616.0, 1108.5], [1644.0, 5043.0], [1668.0, 1197.0], [1716.0, 1154.3333333333333], [1720.0, 1142.5], [1664.0, 1227.6666666666667], [1672.0, 1216.0], [1688.0, 1136.5], [1684.0, 1137.0], [1680.0, 1150.3333333333333], [1708.0, 1146.0], [1700.0, 1144.0], [1696.0, 1149.5], [1760.0, 1139.0], [1764.0, 1138.0], [1772.0, 1418.75], [1780.0, 1141.0], [1728.0, 1149.25], [1736.0, 1152.0], [1824.0, 1138.0], [1832.0, 1139.5], [1800.0, 1145.5], [1792.0, 1146.0], [1820.0, 1138.0], [1812.0, 1169.0], [1808.0, 1133.0], [1864.0, 1154.0], [1888.0, 1111.0], [1912.0, 1245.75], [1908.0, 1102.0], [1860.0, 1126.0], [1856.0, 1138.3333333333333], [1884.0, 1115.0], [1880.0, 1125.0], [1872.0, 1126.0], [1980.0, 1104.0], [1968.0, 1103.5], [1920.0, 1102.0], [1948.0, 2169.0], [1988.0, 1699.0], [2032.0, 1647.3333333333333], [2040.0, 1579.0], [2036.0, 1871.5], [1984.0, 1097.0], [1996.0, 1632.0], [2012.0, 1619.0], [2008.0, 1627.0], [2004.0, 1694.0], [2152.0, 1576.0], [2144.0, 1541.0], [2120.0, 1563.6666666666667], [2128.0, 1599.0], [2136.0, 1478.0], [2160.0, 1796.0], [2048.0, 1891.4], [2056.0, 1856.5], [2064.0, 2053.0], [2072.0, 1829.0], [2104.0, 1760.0], [2096.0, 1628.0], [2088.0, 1544.5], [2080.0, 1808.0], [2288.0, 1455.0], [2296.0, 1651.5], [2240.0, 1496.0], [2248.0, 1490.0], [2264.0, 1758.3333333333333], [2272.0, 1668.0], [2192.0, 1750.0], [2216.0, 1926.5], [2208.0, 1477.0], [2368.0, 1670.0], [2376.0, 1632.0], [2424.0, 1835.0], [2400.0, 1908.0], [2304.0, 1710.5], [2312.0, 1397.5], [2360.0, 1687.0], [2536.0, 1791.5], [2552.0, 1142.5], [2528.0, 1592.0], [2440.0, 1853.0], [2448.0, 1969.0], [2480.0, 1582.5], [2472.0, 1784.0], [2656.0, 1111.3333333333333], [2680.0, 1104.0], [2648.0, 1174.0], [2664.0, 1110.0], [2568.0, 1231.0], [2560.0, 1229.0], [2608.0, 1218.3333333333333], [2592.0, 1212.0], [2808.0, 1101.5], [2752.0, 1113.5], [2760.0, 1119.3333333333333], [2768.0, 1120.0], [2688.0, 1129.0], [2704.0, 1102.0], [2712.0, 1111.0], [2720.0, 1108.6666666666667], [2928.0, 1120.0], [2880.0, 1108.0], [2888.0, 1100.0], [2904.0, 1111.2], [2936.0, 1124.5], [2912.0, 1110.5], [2840.0, 1108.0], [2824.0, 1111.0], [2856.0, 1140.0], [3000.0, 1491.2891707333606], [2952.0, 1113.0], [2960.0, 1116.0], [2161.0, 1516.0], [2113.0, 1793.25], [2121.0, 1580.0], [2129.0, 1524.0], [2137.0, 1497.0], [2169.0, 1500.0], [2153.0, 2126.0], [2145.0, 1525.0], [2105.0, 2017.0], [2097.0, 1572.0], [2089.0, 1606.0], [2081.0, 1568.0], [2289.0, 1433.0], [2241.0, 1909.0], [2257.0, 1915.5], [2265.0, 1496.0], [2297.0, 1443.0], [2273.0, 1445.0], [2177.0, 1469.0], [2185.0, 1488.0], [2193.0, 1514.0], [2201.0, 1439.5], [2233.0, 1474.5], [2225.0, 1670.0], [2417.0, 1853.0], [2385.0, 1398.5], [2393.0, 1369.0], [2425.0, 1814.0], [2409.0, 1373.5], [2321.0, 1630.0], [2313.0, 1421.0], [2305.0, 1906.0], [2353.0, 1399.5], [2545.0, 1747.0], [2553.0, 1385.0], [2497.0, 1375.5], [2505.0, 1872.5], [2513.0, 1367.0], [2521.0, 1772.0], [2433.0, 1879.0], [2449.0, 1837.0], [2457.0, 1597.5], [2489.0, 1340.3333333333333], [2473.0, 1388.0], [2465.0, 1974.5], [2585.0, 1241.0], [2681.0, 1100.0], [2673.0, 1105.857142857143], [2625.0, 1230.0], [2641.0, 1223.0], [2649.0, 1156.3333333333333], [2569.0, 1194.0], [2561.0, 1233.0], [2617.0, 1224.6666666666667], [2609.0, 1223.0], [2801.0, 1105.0], [2753.0, 1119.6666666666667], [2809.0, 1104.0], [2761.0, 1118.25], [2777.0, 1111.6666666666667], [2793.0, 1100.0], [2785.0, 1111.0], [2689.0, 1120.0], [2697.0, 1118.5], [2713.0, 1102.0], [2745.0, 1110.2], [2721.0, 1097.0], [2889.0, 1118.0], [2937.0, 1119.0], [2897.0, 1108.6666666666667], [2905.0, 1109.0], [2921.0, 1120.2222222222222], [2833.0, 1098.0], [2865.0, 1109.2857142857144], [2849.0, 1107.0], [2953.0, 1120.0], [2945.0, 1121.6], [2993.0, 1105.6666666666665], [2985.0, 1104.6666666666667], [2977.0, 1110.0], [1033.0, 1580.6666666666667], [1085.0, 1639.6666666666667], [1077.0, 1535.3333333333333], [1073.0, 1606.0], [1029.0, 1734.0], [1025.0, 1663.0], [1053.0, 1450.0], [1049.0, 1992.6666666666667], [1045.0, 1725.0], [1041.0, 1578.6666666666667], [1065.0, 1453.0], [1061.0, 1510.0], [1141.0, 1580.0], [1145.0, 1558.0], [1149.0, 1619.0], [1121.0, 1640.0], [1125.0, 1411.0], [1137.0, 2661.0], [1117.0, 1645.0], [1093.0, 1447.0], [1089.0, 1682.75], [1097.0, 1444.0], [1109.0, 1551.5], [1105.0, 1531.0], [1133.0, 1644.0], [1129.0, 1664.0], [1209.0, 1556.0], [1213.0, 1298.5], [1185.0, 1544.0], [1193.0, 1265.0], [1205.0, 1281.0], [1201.0, 1417.0], [1165.0, 1902.0], [1161.0, 1539.0], [1157.0, 1603.0], [1153.0, 1423.3333333333333], [1181.0, 1925.5], [1177.0, 1330.0], [1173.0, 1545.0], [1197.0, 1565.0], [1269.0, 1486.5], [1277.0, 1487.0], [1249.0, 1267.0], [1257.0, 1509.0], [1273.0, 1248.5], [1265.0, 1227.0], [1229.0, 1504.5], [1225.0, 1885.0], [1221.0, 1532.0], [1217.0, 1282.0], [1245.0, 1250.0], [1241.0, 1366.0], [1237.0, 1511.0], [1233.0, 1290.0], [1261.0, 1384.5], [1333.0, 1453.0], [1329.0, 1807.0], [1341.0, 1429.0], [1317.0, 1483.0], [1337.0, 1794.0], [1309.0, 1574.6666666666667], [1281.0, 1204.0], [1285.0, 1305.25], [1289.0, 1490.0], [1293.0, 1465.5], [1305.0, 1201.0], [1301.0, 1194.0], [1297.0, 1512.0], [1321.0, 1420.0], [1401.0, 1441.0], [1405.0, 1404.0], [1377.0, 1782.0], [1381.0, 1959.0], [1393.0, 1424.0], [1353.0, 1221.0], [1373.0, 1206.0], [1369.0, 1434.0], [1457.0, 1108.0], [1449.0, 1137.0], [1465.0, 1391.0], [1445.0, 1368.0], [1421.0, 1741.0], [1409.0, 1433.5], [1437.0, 1738.0], [1425.0, 1409.0], [1453.0, 1755.0], [1529.0, 1531.75], [1525.0, 1698.6666666666667], [1517.0, 1508.0], [1505.0, 1710.0], [1497.0, 1475.0], [1493.0, 1196.6666666666667], [1589.0, 1288.0], [1597.0, 1305.0], [1541.0, 1739.0], [1537.0, 1179.6666666666667], [1565.0, 1321.0], [1581.0, 1346.0], [1577.0, 1495.5], [1569.0, 1246.3333333333333], [1657.0, 1211.0], [1641.0, 1101.6666666666667], [1661.0, 1210.0], [1633.0, 1106.0], [1637.0, 1104.5], [1653.0, 1239.0], [1613.0, 1141.0], [1609.0, 1119.0], [1605.0, 1291.0], [1629.0, 1096.0], [1625.0, 1112.0], [1621.0, 1097.0], [1617.0, 1101.0], [1645.0, 1347.0], [1713.0, 1154.5], [1705.0, 1153.5], [1693.0, 1136.0], [1681.0, 1130.0], [1677.0, 1175.5], [1669.0, 1217.0], [1777.0, 1145.5], [1785.0, 1142.5], [1769.0, 1138.0], [1789.0, 1137.0], [1757.0, 1148.0], [1733.0, 1150.6666666666667], [1737.0, 1154.0], [1753.0, 1139.5], [1749.0, 1143.5], [1745.0, 1150.0], [1845.0, 1126.0], [1853.0, 1133.5], [1829.0, 1140.0], [1849.0, 1136.0], [1805.0, 1138.0], [1801.0, 1136.0], [1797.0, 1140.25], [1821.0, 1137.5], [1817.0, 1140.0], [1813.0, 1460.5], [1905.0, 1100.0], [1869.0, 1127.25], [1865.0, 1131.6666666666667], [1861.0, 1132.0], [1857.0, 1128.0], [1901.0, 1100.5], [1933.0, 1102.0], [1953.0, 1103.6666666666667], [1957.0, 1098.0], [1961.0, 1103.5], [1965.0, 1511.5], [1929.0, 1291.6666666666667], [1921.0, 1109.0], [1941.0, 1099.0], [1937.0, 1430.0], [2033.0, 1575.0], [2045.0, 1587.0], [2017.0, 1640.0], [2021.0, 1662.5], [1985.0, 1102.0], [1989.0, 1678.0], [1993.0, 1709.0], [1997.0, 1637.0], [2013.0, 1619.0], [2009.0, 1636.0], [2005.0, 1620.0], [2001.0, 1622.5], [2029.0, 1884.0], [2154.0, 1585.0], [2130.0, 1564.0], [2138.0, 1524.0], [2162.0, 1481.0], [2050.0, 1876.0], [2066.0, 2117.5], [2074.0, 1579.5], [2106.0, 1603.0], [2098.0, 1524.0], [2082.0, 1605.0], [2282.0, 1603.6666666666667], [2242.0, 1466.0], [2258.0, 1935.0], [2298.0, 1882.0], [2274.0, 1909.0], [2178.0, 1612.5], [2194.0, 1933.0], [2202.0, 1522.0], [2234.0, 1518.0], [2226.0, 1530.0], [2218.0, 1455.0], [2210.0, 1679.0], [2410.0, 1825.0], [2386.0, 1385.0], [2394.0, 1631.5], [2370.0, 1883.0], [2402.0, 1389.0], [2306.0, 1874.0], [2314.0, 1937.0], [2330.0, 1567.3333333333333], [2362.0, 1644.0], [2354.0, 1427.0], [2346.0, 1867.5], [2554.0, 1391.0], [2498.0, 1360.0], [2506.0, 1405.0], [2514.0, 1751.5], [2546.0, 1741.5], [2538.0, 1753.6666666666667], [2530.0, 1683.25], [2442.0, 1373.0], [2450.0, 1837.0], [2482.0, 1612.5], [2666.0, 1108.3333333333333], [2634.0, 1223.0], [2642.0, 1200.0], [2682.0, 1100.0], [2586.0, 1206.0], [2570.0, 1213.0], [2562.0, 1236.0], [2618.0, 1218.0], [2602.0, 1216.0], [2802.0, 1100.0], [2794.0, 1113.0], [2770.0, 1111.6666666666667], [2778.0, 1104.0], [2810.0, 1106.0], [2690.0, 1127.0], [2698.0, 1119.0], [2706.0, 1102.0], [2714.0, 1102.6666666666667], [2746.0, 1118.0], [2738.0, 1111.285714285714], [2730.0, 1101.3333333333333], [2930.0, 1116.0], [2882.0, 1102.25], [2890.0, 1109.6666666666667], [2898.0, 1116.0], [2906.0, 1114.25], [2914.0, 1122.25], [2842.0, 1099.0], [2834.0, 1105.8], [2818.0, 1102.4], [2866.0, 1108.0], [2858.0, 1106.5], [2994.0, 1104.0], [2954.0, 1120.2857142857142], [2962.0, 1120.375], [2986.0, 1115.0], [2978.0, 1104.0], [2147.0, 2187.0], [2115.0, 1746.5], [2131.0, 1992.0], [2155.0, 1952.0], [2059.0, 1931.6666666666667], [2051.0, 2098.0], [2107.0, 1532.0], [2099.0, 1991.0], [2091.0, 2038.0], [2083.0, 1557.0], [2275.0, 1441.0], [2291.0, 1761.0], [2259.0, 2081.0], [2267.0, 1479.5], [2179.0, 1502.0], [2187.0, 1521.5], [2195.0, 1936.0], [2235.0, 1493.0], [2219.0, 1967.0], [2419.0, 1598.5], [2427.0, 1616.5], [2379.0, 1558.6666666666667], [2371.0, 1404.0], [2395.0, 1339.0], [2411.0, 1846.0], [2331.0, 1372.0], [2315.0, 1398.0], [2307.0, 1885.0], [2363.0, 1469.0], [2531.0, 1598.5], [2547.0, 1184.0], [2523.0, 1800.0], [2539.0, 1761.0], [2435.0, 1676.6666666666667], [2451.0, 1984.0], [2459.0, 1657.5], [2483.0, 1860.0], [2651.0, 1148.0], [2675.0, 1103.3333333333333], [2579.0, 1197.0], [2563.0, 1232.0], [2795.0, 1130.0], [2803.0, 1110.6666666666667], [2755.0, 1119.0], [2763.0, 1119.5], [2779.0, 1124.5], [2787.0, 1103.0], [2699.0, 1127.0], [2707.0, 1108.0], [2739.0, 1116.0], [2931.0, 1120.0], [2923.0, 1123.0], [2891.0, 1106.2857142857142], [2899.0, 1106.0], [2907.0, 1110.0], [2939.0, 1116.5], [2915.0, 1116.5], [2843.0, 1101.4285714285716], [2835.0, 1100.8], [2827.0, 1102.2], [2875.0, 1103.0], [2987.0, 1107.0], [2979.0, 1117.6666666666667], [539.0, 2273.0], [543.0, 1360.5], [541.0, 2270.0], [529.0, 2275.0], [519.0, 1418.0], [515.0, 1721.3333333333333], [513.0, 1899.5], [525.0, 2315.0], [521.0, 1414.0], [533.0, 1386.0], [531.0, 2305.0], [573.0, 2210.0], [569.0, 2247.0], [575.0, 1297.0], [561.0, 1334.0], [565.0, 1316.0], [563.0, 1319.0], [571.0, 1301.0], [551.0, 1345.5], [549.0, 1349.0], [547.0, 1357.0], [545.0, 2244.0], [559.0, 1331.0], [557.0, 1332.0], [553.0, 1339.0], [567.0, 1311.0], [601.0, 2187.0], [605.0, 1691.0], [607.0, 1243.0], [603.0, 1255.0], [591.0, 1843.0], [577.0, 2442.0], [579.0, 2205.0], [583.0, 1287.0], [581.0, 1287.5], [589.0, 1277.0], [585.0, 2178.0], [597.0, 2208.0], [595.0, 2157.0], [613.0, 2363.0], [637.0, 1537.6666666666667], [633.0, 1227.0], [615.0, 1239.0], [611.0, 2185.0], [623.0, 1230.0], [621.0, 1837.0], [617.0, 1229.0], [631.0, 1231.0], [629.0, 1222.0], [667.0, 1196.0], [669.0, 2138.0], [671.0, 1191.5], [661.0, 2088.0], [665.0, 1201.0], [645.0, 1672.0], [643.0, 1219.0], [641.0, 1948.3333333333335], [653.0, 1213.0], [651.0, 1670.5], [649.0, 1216.0], [663.0, 2142.0], [679.0, 1643.5], [697.0, 1157.0], [691.0, 1162.5], [701.0, 1160.0], [703.0, 1157.25], [689.0, 1158.0], [677.0, 1181.0], [673.0, 1186.0], [687.0, 1166.0], [685.0, 1171.0], [683.0, 1173.0], [681.0, 1175.0], [695.0, 2044.0], [693.0, 1161.0], [731.0, 1148.0], [711.0, 1154.0], [725.0, 1149.0], [721.0, 1156.0], [719.0, 1154.0], [717.0, 1156.0], [715.0, 1159.0], [713.0, 1155.0], [761.0, 1150.0], [767.0, 1147.5], [743.0, 1150.0], [751.0, 1149.0], [749.0, 1151.0], [757.0, 1148.3333333333333], [753.0, 1149.0], [795.0, 1128.0], [799.0, 1130.0], [793.0, 1129.5], [791.0, 1132.0], [787.0, 1146.8333333333333], [781.0, 1148.6666666666667], [769.0, 1146.0], [775.0, 1147.0], [773.0, 1142.5], [803.0, 1128.3333333333333], [829.0, 1124.5], [825.0, 1121.6666666666667], [807.0, 1128.6666666666667], [801.0, 1129.0], [821.0, 1125.0], [817.0, 1125.0], [815.0, 1128.0], [813.0, 1125.0], [811.0, 1128.3333333333333], [851.0, 1116.5], [861.0, 1113.0], [853.0, 1115.0], [849.0, 1120.0], [843.0, 1118.6666666666667], [833.0, 1122.3333333333333], [841.0, 1120.0], [869.0, 1112.0], [895.0, 1099.3333333333333], [889.0, 1103.0], [871.0, 1111.0], [867.0, 1111.25], [883.0, 1105.6666666666667], [879.0, 1106.0], [877.0, 1107.6666666666667], [873.0, 1108.6666666666667], [923.0, 1561.5], [921.0, 1586.0], [927.0, 1539.0], [913.0, 1617.0], [915.0, 1610.0], [917.0, 1608.0], [925.0, 1547.0], [903.0, 1965.0], [901.0, 1093.0], [899.0, 1094.0], [897.0, 1097.5], [911.0, 1895.0], [909.0, 1858.0], [907.0, 1869.0], [905.0, 1921.0], [919.0, 1607.0], [953.0, 1539.0], [957.0, 1549.0], [945.0, 1526.0], [949.0, 1626.6666666666667], [955.0, 1547.0], [935.0, 1584.0], [933.0, 1527.0], [929.0, 1592.0], [943.0, 1572.0], [941.0, 1660.0], [939.0, 1545.0], [937.0, 1530.0], [951.0, 1564.0], [965.0, 1751.0], [987.0, 1604.6666666666667], [991.0, 1790.0], [979.0, 1630.5], [977.0, 1634.0], [963.0, 1551.0], [961.0, 1506.0], [975.0, 1521.6666666666667], [971.0, 1526.0], [969.0, 1750.0], [983.0, 1797.0], [981.0, 1545.0], [999.0, 1513.0], [1023.0, 1732.5], [997.0, 1485.0], [995.0, 1744.0], [1013.0, 1529.0], [1009.0, 1670.6666666666667], [1007.0, 1749.0], [1005.0, 1483.0], [1082.0, 1711.0], [1074.0, 1439.0], [1062.0, 1497.0], [1058.0, 1598.0], [1050.0, 1729.0], [1038.0, 1475.5], [1030.0, 1641.3333333333333], [1146.0, 1322.0], [1150.0, 1357.0], [1126.0, 1566.3333333333333], [1130.0, 1637.0], [1142.0, 1554.0], [1098.0, 1416.0], [1094.0, 1472.0], [1090.0, 2054.0], [1118.0, 1516.5], [1114.0, 2187.0], [1110.0, 1428.0], [1134.0, 1570.0], [1162.0, 1568.0], [1190.0, 1483.5], [1210.0, 1967.0], [1206.0, 1568.0], [1182.0, 1534.0], [1154.0, 1306.0], [1158.0, 1351.0], [1166.0, 1575.0], [1178.0, 1565.0], [1174.0, 1325.0], [1170.0, 1439.0], [1198.0, 1539.0], [1186.0, 1316.0], [1270.0, 1263.0], [1278.0, 2516.0], [1254.0, 1322.6666666666667], [1274.0, 1475.0], [1266.0, 1490.0], [1222.0, 1879.0], [1218.0, 1271.0], [1246.0, 1486.0], [1238.0, 1542.0], [1234.0, 1232.0], [1262.0, 1214.0], [1258.0, 1240.0], [1342.0, 1215.0], [1314.0, 1447.5], [1334.0, 1229.0], [1286.0, 1437.0], [1290.0, 1463.0], [1302.0, 1460.0], [1326.0, 2134.0], [1322.0, 1183.0], [1318.0, 1183.0], [1358.0, 1307.5], [1394.0, 1403.0], [1402.0, 1376.0], [1398.0, 1475.5], [1350.0, 1373.3333333333333], [1354.0, 1817.0], [1366.0, 1611.0], [1362.0, 1199.5], [1386.0, 1480.0], [1462.0, 1564.5], [1470.0, 1250.5], [1442.0, 1266.5], [1466.0, 1145.0], [1418.0, 1447.0], [1410.0, 1387.0], [1438.0, 1366.0], [1434.0, 1152.0], [1430.0, 1567.6], [1454.0, 1414.0], [1446.0, 1410.0], [1534.0, 1453.0], [1522.0, 1337.0], [1510.0, 1380.3333333333333], [1506.0, 1331.5], [1502.0, 1284.3333333333333], [1474.0, 1416.0], [1486.0, 1522.0], [1482.0, 1123.0], [1490.0, 1538.0], [1590.0, 1319.0], [1586.0, 1287.0], [1566.0, 1211.0], [1550.0, 1112.0], [1542.0, 1110.0], [1650.0, 1244.0], [1638.0, 1431.0], [1606.0, 1233.0], [1614.0, 1103.0], [1622.0, 1127.0], [1646.0, 1247.0], [1642.0, 1098.0], [1634.0, 1103.5], [1726.0, 1144.0], [1698.0, 1144.0], [1718.0, 1142.0], [1694.0, 1142.0], [1666.0, 1212.0], [1670.0, 1202.0], [1690.0, 1131.5], [1686.0, 1131.0], [1702.0, 1167.5], [1790.0, 1138.0], [1762.0, 1148.6666666666667], [1782.0, 1140.0], [1742.0, 1150.3333333333333], [1754.0, 1160.0], [1730.0, 1154.0], [1774.0, 1148.0], [1850.0, 1131.5], [1830.0, 1132.0], [1834.0, 1139.6], [1846.0, 1127.5], [1794.0, 1136.0], [1838.0, 1138.75], [1890.0, 1104.0], [1914.0, 1107.0], [1894.0, 1102.0], [1898.0, 1103.0], [1886.0, 1103.0], [1882.0, 1105.0], [1878.0, 1115.3333333333333], [1874.0, 1127.5], [1902.0, 1115.0], [1978.0, 1392.5], [1982.0, 1099.0], [1954.0, 1096.0], [1958.0, 1102.0], [1966.0, 1102.0], [1974.0, 1241.0], [1970.0, 1099.5], [1926.0, 1102.25], [1922.0, 1103.0], [1950.0, 1102.5], [1938.0, 1101.0], [2042.0, 1764.25], [2018.0, 1642.5], [2022.0, 1604.0], [2026.0, 1637.3333333333333], [2034.0, 1698.0], [1986.0, 1706.0], [1990.0, 1650.0], [1994.0, 1641.0], [1998.0, 1716.0], [2010.0, 1664.0], [2006.0, 1636.0], [2030.0, 1639.0], [2116.0, 2014.0], [2172.0, 1520.0], [2124.0, 1694.6666666666667], [2108.0, 1496.0], [2060.0, 1620.0], [2076.0, 1812.0], [2100.0, 1571.0], [2084.0, 1585.0], [2140.0, 1545.0], [2300.0, 1472.0], [2244.0, 1484.0], [2252.0, 1713.25], [2260.0, 1432.0], [2268.0, 1402.0], [2292.0, 1875.0], [2284.0, 1457.5], [2276.0, 1437.0], [2188.0, 1964.0], [2196.0, 1507.0], [2204.0, 1536.0], [2228.0, 1508.5], [2220.0, 1490.0], [2420.0, 1421.0], [2388.0, 1917.0], [2396.0, 1384.0], [2380.0, 1421.0], [2404.0, 1850.0], [2308.0, 1867.0], [2324.0, 1566.6666666666667], [2364.0, 1914.0], [2340.0, 1594.6], [2548.0, 1109.0], [2556.0, 1393.0], [2508.0, 1960.0], [2524.0, 1724.5], [2540.0, 1749.0], [2532.0, 1827.5], [2444.0, 1599.0], [2452.0, 1854.0], [2492.0, 1733.3333333333333], [2476.0, 1677.0], [2468.0, 1698.6666666666667], [2588.0, 1223.5], [2684.0, 1099.5], [2636.0, 1222.0], [2644.0, 1192.4], [2652.0, 1155.6666666666667], [2580.0, 1214.4], [2572.0, 1196.3333333333333], [2564.0, 1243.0], [2612.0, 1210.3333333333333], [2756.0, 1112.0], [2812.0, 1101.0], [2772.0, 1100.0], [2780.0, 1111.0], [2692.0, 1157.0], [2700.0, 1108.0], [2708.0, 1104.0], [2748.0, 1114.5], [2740.0, 1110.2], [2932.0, 1125.5], [2940.0, 1122.5], [2884.0, 1104.3333333333333], [2900.0, 1108.3333333333333], [2908.0, 1112.3333333333333], [2924.0, 1124.857142857143], [2916.0, 1112.5], [2836.0, 1105.3333333333333], [2828.0, 1106.3333333333333], [2876.0, 1107.0], [2868.0, 1114.0], [2860.0, 1103.0], [2852.0, 1106.75], [2948.0, 1120.5], [2956.0, 1118.142857142857], [2972.0, 1113.3333333333333], [2988.0, 1112.0], [2149.0, 1543.5], [2165.0, 1828.3333333333333], [2117.0, 1573.0], [2125.0, 1513.0], [2133.0, 1532.0], [2141.0, 1508.0], [2109.0, 1593.0], [2077.0, 2041.0], [2101.0, 1544.0], [2093.0, 1773.5], [2293.0, 1391.0], [2301.0, 1731.0], [2245.0, 1912.5], [2253.0, 1414.0], [2261.0, 1920.0], [2277.0, 1417.0], [2181.0, 1454.0], [2197.0, 1439.0], [2205.0, 1722.5], [2237.0, 1670.5], [2421.0, 1819.0], [2413.0, 1854.5], [2389.0, 1407.0], [2381.0, 1387.0], [2397.0, 1833.0], [2429.0, 1821.5], [2405.0, 1868.0], [2333.0, 1655.0], [2309.0, 1403.0], [2365.0, 1371.0], [2357.0, 1382.6666666666667], [2349.0, 1701.3333333333333], [2557.0, 1396.5], [2501.0, 1777.0], [2509.0, 1810.0], [2517.0, 1845.0], [2549.0, 1101.5], [2541.0, 1752.0], [2437.0, 1848.5], [2445.0, 1375.0], [2453.0, 1903.0], [2461.0, 1797.0], [2469.0, 1303.0], [2677.0, 1104.6666666666667], [2629.0, 1221.4], [2637.0, 1226.25], [2685.0, 1149.0], [2661.0, 1109.0], [2589.0, 1208.0], [2573.0, 1193.0], [2565.0, 1204.0], [2605.0, 1216.0], [2597.0, 1209.3333333333333], [2797.0, 1111.5], [2757.0, 1106.0], [2765.0, 1108.0], [2805.0, 1103.5], [2789.0, 1100.5], [2693.0, 1122.0], [2709.0, 1107.5], [2717.0, 1111.0], [2837.0, 1096.0], [2941.0, 1127.5], [2893.0, 1106.0], [2925.0, 1128.0], [2821.0, 1107.5], [2877.0, 1107.0], [2869.0, 1119.5], [2861.0, 1114.0], [2853.0, 1106.5], [2997.0, 1099.0], [2949.0, 1121.3333333333333], [2957.0, 1114.0], [2973.0, 1111.3333333333333], [2989.0, 1118.0], [2981.0, 1106.0], [1079.0, 1588.0], [1083.0, 1743.0], [1039.0, 1521.0], [1035.0, 1494.5], [1027.0, 1530.0], [1051.0, 1735.5], [1071.0, 1500.0], [1063.0, 1447.0], [1103.0, 1486.6666666666667], [1123.0, 1639.0], [1143.0, 1365.0], [1139.0, 1464.5], [1095.0, 1461.0], [1099.0, 1671.0], [1115.0, 1648.0], [1111.0, 1393.0], [1131.0, 1649.0], [1127.0, 1423.0], [1203.0, 1527.5], [1215.0, 1540.0], [1191.0, 2542.0], [1195.0, 1548.5], [1211.0, 1867.0], [1167.0, 1559.0], [1159.0, 1541.0], [1155.0, 1593.0], [1183.0, 1330.0], [1179.0, 1304.0], [1199.0, 1267.0], [1275.0, 1256.0], [1279.0, 1261.0], [1255.0, 1836.0], [1251.0, 1363.0], [1259.0, 1493.0], [1271.0, 1477.0], [1227.0, 1296.5], [1247.0, 1515.0], [1243.0, 1255.5], [1239.0, 1277.0], [1263.0, 1256.0], [1335.0, 1217.0], [1339.0, 1309.0], [1287.0, 1507.0], [1291.0, 1444.0], [1295.0, 1224.0], [1307.0, 3018.0], [1299.0, 1322.0], [1327.0, 1445.0], [1323.0, 1463.0], [1319.0, 1231.0], [1403.0, 1398.0], [1407.0, 1267.5], [1379.0, 1313.0], [1383.0, 1329.0], [1399.0, 1383.0], [1395.0, 1194.0], [1347.0, 1379.3333333333333], [1371.0, 1488.5], [1363.0, 1211.0], [1391.0, 1752.6666666666667], [1387.0, 1197.0], [1459.0, 1269.5], [1471.0, 1105.0], [1447.0, 1735.0], [1463.0, 1101.0], [1423.0, 1381.5], [1415.0, 1536.0], [1411.0, 1184.0], [1439.0, 1374.0], [1435.0, 1399.0], [1431.0, 1385.0], [1455.0, 1736.0], [1451.0, 1250.5], [1483.0, 1239.0], [1479.0, 1101.0], [1515.0, 1348.5], [1511.0, 1566.0], [1499.0, 1852.5], [1547.0, 1538.75], [1599.0, 1259.5], [1595.0, 1308.3333333333333], [1587.0, 1670.0], [1543.0, 1597.3333333333333], [1567.0, 1350.0], [1563.0, 1098.0], [1559.0, 1445.75], [1555.0, 1693.0], [1583.0, 1313.5], [1611.0, 1128.0], [1659.0, 1279.0], [1639.0, 1102.0], [1655.0, 1257.0], [1607.0, 1114.0], [1603.0, 1404.3333333333333], [1631.0, 1103.5], [1627.0, 1101.0], [1623.0, 1125.0], [1619.0, 1101.5], [1647.0, 1269.0], [1643.0, 1096.0], [1707.0, 1148.5], [1723.0, 1147.6666666666667], [1711.0, 1144.6666666666667], [1703.0, 1156.0], [1675.0, 1390.6666666666667], [1671.0, 1218.0], [1667.0, 1215.5], [1787.0, 1139.5], [1767.0, 1139.25], [1783.0, 1142.3333333333333], [1731.0, 1147.0], [1739.0, 1147.5], [1751.0, 1145.0], [1747.0, 1151.0], [1775.0, 1138.0], [1807.0, 1147.0], [1851.0, 1130.0], [1831.0, 1140.0], [1843.0, 1135.25], [1803.0, 1138.6666666666667], [1819.0, 1152.0], [1815.0, 1469.0], [1811.0, 1135.5], [1839.0, 1133.0], [1915.0, 1101.0], [1907.0, 1382.0], [1919.0, 1099.25], [1891.0, 1108.0], [1895.0, 1102.0], [1899.0, 1098.0], [1859.0, 1131.0], [1879.0, 1106.0], [1875.0, 1131.0], [1983.0, 1654.0], [1955.0, 1102.0], [1979.0, 1096.0], [1959.0, 1102.0], [1975.0, 1100.0], [1935.0, 1103.0], [1947.0, 1100.0], [1943.0, 1104.25], [2019.0, 1614.0], [2039.0, 1597.0], [2023.0, 1619.0], [2015.0, 1658.0], [1987.0, 1100.0], [1995.0, 2115.0], [1999.0, 1687.0], [2007.0, 1633.0], [2003.0, 1646.0], [2062.0, 2080.0], [2158.0, 1654.3333333333333], [2126.0, 1492.0], [2150.0, 1995.0], [2054.0, 1673.0], [2070.0, 1700.5], [2078.0, 2015.0], [2102.0, 1517.0], [2094.0, 1583.0], [2086.0, 1542.0], [2142.0, 1496.0], [2286.0, 1653.0], [2302.0, 1422.0], [2246.0, 1515.0], [2254.0, 1516.0], [2270.0, 1655.0], [2294.0, 1511.0], [2278.0, 1444.0], [2238.0, 1936.0], [2190.0, 1703.5], [2198.0, 1970.0], [2230.0, 1506.0], [2222.0, 1520.0], [2214.0, 1459.5], [2422.0, 1410.0], [2406.0, 1383.0], [2390.0, 1419.0], [2398.0, 1353.0], [2430.0, 1389.0], [2374.0, 1729.3333333333333], [2382.0, 1438.0], [2414.0, 1832.0], [2366.0, 1901.0], [2310.0, 1453.0], [2318.0, 1875.0], [2326.0, 1690.0], [2358.0, 1403.0], [2350.0, 1429.0], [2342.0, 1412.0], [2550.0, 1139.0], [2502.0, 1331.0], [2510.0, 1667.6666666666667], [2518.0, 1827.0], [2558.0, 1364.0], [2542.0, 1566.3333333333333], [2534.0, 1805.0], [2438.0, 1430.0], [2446.0, 1819.0], [2454.0, 1837.0], [2462.0, 1396.0], [2486.0, 1837.6666666666667], [2478.0, 1909.0], [2470.0, 1324.0], [2686.0, 1145.5], [2638.0, 1221.0], [2678.0, 1105.0], [2574.0, 1241.0], [2566.0, 1226.0], [2622.0, 1217.25], [2606.0, 1228.3333333333333], [2806.0, 1101.0], [2766.0, 1129.0], [2774.0, 1104.3333333333333], [2782.0, 1103.0], [2798.0, 1109.0], [2790.0, 1105.0], [2750.0, 1112.5], [2694.0, 1139.0], [2702.0, 1105.0], [2718.0, 1120.3333333333333], [2918.0, 1149.0], [2926.0, 1124.5], [2934.0, 1122.6666666666667], [2894.0, 1115.5], [2910.0, 1112.25], [2942.0, 1125.0], [2838.0, 1099.3333333333333], [2822.0, 1100.0], [2870.0, 1109.0], [2862.0, 1105.0], [2958.0, 1121.4], [2950.0, 1117.0], [2966.0, 1112.4285714285716], [2974.0, 1108.0], [2998.0, 1099.0], [2990.0, 1113.3333333333333], [2982.0, 1105.6666666666667], [2127.0, 1493.0], [2175.0, 1561.0], [2135.0, 1775.5], [2143.0, 1519.0], [2151.0, 1513.0], [2063.0, 1577.0], [2095.0, 1516.0], [2279.0, 1928.0], [2287.0, 1489.0], [2247.0, 1919.0], [2255.0, 1932.0], [2239.0, 1509.0], [2183.0, 1651.0], [2199.0, 1462.0], [2231.0, 1446.0], [2223.0, 1920.0], [2415.0, 1370.0], [2423.0, 1842.0], [2431.0, 1378.0], [2383.0, 1876.0], [2391.0, 1403.0], [2399.0, 1833.0], [2407.0, 1825.0], [2335.0, 1705.5], [2327.0, 1871.0], [2319.0, 1442.3333333333333], [2351.0, 1888.0], [2543.0, 1508.5], [2551.0, 1148.6666666666667], [2559.0, 1248.0], [2519.0, 1670.25], [2527.0, 1883.5], [2495.0, 1520.3333333333333], [2439.0, 1976.0], [2455.0, 1887.0], [2463.0, 1810.0], [2471.0, 1409.0], [2671.0, 1112.0], [2679.0, 1100.0], [2687.0, 1138.0], [2631.0, 1220.6666666666667], [2647.0, 1175.5], [2655.0, 1107.3333333333333], [2591.0, 1228.5], [2583.0, 1209.5], [2575.0, 1197.6666666666667], [2567.0, 1237.0], [2615.0, 1212.0], [2599.0, 1214.0], [2799.0, 1100.0], [2815.0, 1099.6666666666667], [2767.0, 1122.0], [2783.0, 1107.3333333333333], [2695.0, 1120.5], [2703.0, 1110.0], [2711.0, 1098.0], [2743.0, 1112.0], [2735.0, 1101.5], [2919.0, 1121.0], [2943.0, 1117.5], [2887.0, 1110.2], [2895.0, 1106.0], [2903.0, 1110.6666666666667], [2847.0, 1103.25], [2839.0, 1101.6666666666667], [2831.0, 1103.75], [2823.0, 1095.0], [2879.0, 1104.0], [2871.0, 1104.6666666666667], [2863.0, 1106.25], [2855.0, 1109.2], [2951.0, 1120.0], [2959.0, 1111.0], [2975.0, 1105.0], [2983.0, 1108.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[2962.2524418730254, 1492.7576082528835]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 3000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 832.6, "minX": 1.68415998E12, "maxY": 315231.8, "series": [{"data": [[1.68416004E12, 315231.8], [1.68416022E12, 261016.15], [1.68416016E12, 273313.3], [1.68416028E12, 1024.8166666666666], [1.68415998E12, 228114.11666666667], [1.6841601E12, 261149.56666666668]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.68416004E12, 256214.55], [1.68416022E12, 212068.65], [1.68416016E12, 222059.85], [1.68416028E12, 832.6], [1.68415998E12, 185334.95], [1.6841601E12, 212177.25]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68416028E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 1384.8928556195397, "minX": 1.68415998E12, "maxY": 6587.108695652173, "series": [{"data": [[1.68416004E12, 1553.6954187418316], [1.68416022E12, 1426.2197755302307], [1.68416016E12, 1418.9695561804663], [1.68416028E12, 6587.108695652173], [1.68415998E12, 1673.6608232823953], [1.6841601E12, 1384.8928556195397]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68416028E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 1384.3237364043496, "minX": 1.68415998E12, "maxY": 6586.108695652176, "series": [{"data": [[1.68416004E12, 1553.1340821588649], [1.68416022E12, 1425.6505782443649], [1.68416016E12, 1418.2194644822112], [1.68416028E12, 6586.108695652176], [1.68415998E12, 1672.6203916206878], [1.6841601E12, 1384.3237364043496]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68416028E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.68415998E12, "maxY": 279.3570975145257, "series": [{"data": [[1.68416004E12, 128.1233442831407], [1.68416022E12, 66.28165407758287], [1.68416016E12, 80.78452948608209], [1.68416028E12, 0.0], [1.68415998E12, 279.3570975145257], [1.6841601E12, 151.96992962252213]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68416028E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 1087.0, "minX": 1.68415998E12, "maxY": 18746.0, "series": [{"data": [[1.68416004E12, 15461.0], [1.68416022E12, 9285.0], [1.68416016E12, 18746.0], [1.68416028E12, 9810.0], [1.68415998E12, 12394.0], [1.6841601E12, 8950.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.68416004E12, 2028.9000000000015], [1.68416022E12, 2103.9000000000015], [1.68416016E12, 1972.0], [1.68416028E12, 8942.5], [1.68415998E12, 2627.800000000003], [1.6841601E12, 1744.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.68416004E12, 5805.890000000018], [1.68416022E12, 3941.9900000000016], [1.68416016E12, 5020.980000000003], [1.68416028E12, 9810.0], [1.68415998E12, 7483.930000000011], [1.6841601E12, 4162.870000000021]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.68416004E12, 2552.850000000002], [1.68416022E12, 2613.9500000000007], [1.68416016E12, 2314.9500000000007], [1.68416028E12, 9319.449999999999], [1.68415998E12, 4484.700000000004], [1.6841601E12, 2639.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.68416004E12, 1089.0], [1.68416022E12, 1087.0], [1.68416016E12, 1088.0], [1.68416028E12, 3274.0], [1.68415998E12, 1088.0], [1.6841601E12, 1089.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.68416004E12, 1119.0], [1.68416022E12, 1163.0], [1.68416016E12, 1117.0], [1.68416028E12, 6188.5], [1.68415998E12, 1118.0], [1.6841601E12, 1110.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68416028E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 55.0, "minX": 1.0, "maxY": 10396.0, "series": [{"data": [[2.0, 5029.5], [3.0, 5096.5], [4.0, 6221.5], [5.0, 6274.0], [6.0, 8038.0], [8.0, 5417.0], [9.0, 5073.5], [10.0, 6289.5], [14.0, 3185.0], [15.0, 3745.0], [16.0, 2874.5], [17.0, 5719.0], [18.0, 1803.5], [20.0, 2277.0], [21.0, 1758.0], [22.0, 3776.5], [23.0, 2985.0], [24.0, 6940.5], [26.0, 3056.0], [27.0, 2018.0], [30.0, 2076.5], [32.0, 1735.0], [35.0, 4534.0], [37.0, 6973.0], [40.0, 1874.0], [43.0, 2704.0], [47.0, 2301.5], [50.0, 3005.5], [58.0, 1903.5], [63.0, 1102.0], [64.0, 1397.5], [65.0, 1673.0], [88.0, 2160.0], [106.0, 1128.0], [108.0, 1104.0], [111.0, 1104.0], [116.0, 3552.0], [123.0, 1107.0], [131.0, 1432.0], [150.0, 2769.5], [165.0, 1103.0], [166.0, 1141.0], [160.0, 1106.0], [176.0, 6071.0], [187.0, 1947.0], [185.0, 1207.0], [232.0, 2160.5], [241.0, 1793.0], [283.0, 2097.0], [284.0, 1799.0], [274.0, 1415.5], [275.0, 1604.0], [276.0, 1869.5], [277.0, 1104.0], [288.0, 5369.5], [291.0, 2557.0], [298.0, 1603.5], [309.0, 1771.0], [319.0, 1306.0], [306.0, 1195.0], [324.0, 1408.5], [322.0, 1204.5], [334.0, 1351.5], [341.0, 1613.0], [336.0, 1134.0], [366.0, 1107.0], [358.0, 1103.0], [380.0, 1115.0], [397.0, 1105.0], [398.0, 1105.0], [399.0, 1117.0], [396.0, 1140.5], [386.0, 1105.0], [400.0, 1115.0], [403.0, 1133.0], [413.0, 1344.0], [414.0, 1339.5], [412.0, 1119.0], [405.0, 1118.0], [404.0, 1111.0], [415.0, 1110.0], [411.0, 1114.0], [410.0, 1105.0], [409.0, 1107.0], [401.0, 1108.0], [407.0, 1103.0], [406.0, 1193.5], [418.0, 1171.5], [416.0, 1111.0], [421.0, 2238.0], [426.0, 1125.0], [417.0, 1112.0], [420.0, 1838.5], [427.0, 1502.0], [423.0, 1108.0], [428.0, 1125.0], [430.0, 1217.0], [432.0, 1108.0], [445.0, 1127.0], [434.0, 1106.0], [443.0, 1227.0], [438.0, 1121.0], [448.0, 1141.5], [455.0, 1164.0], [462.0, 1784.0], [453.0, 1133.0], [476.0, 1111.0], [468.0, 1108.0], [484.0, 1120.0], [492.0, 1102.5], [501.0, 1452.0], [508.0, 1104.0], [515.0, 1226.0], [516.0, 1503.0], [525.0, 1798.0], [534.0, 2386.0], [539.0, 1181.5], [528.0, 2704.0], [537.0, 1107.0], [560.0, 1470.0], [546.0, 1115.0], [548.0, 2417.0], [575.0, 1109.0], [562.0, 1462.0], [544.0, 1101.0], [583.0, 1113.0], [589.0, 1467.0], [598.0, 1103.0], [580.0, 1452.5], [623.0, 2289.0], [638.0, 1107.0], [633.0, 1450.0], [624.0, 1118.0], [636.0, 1682.5], [643.0, 1128.0], [667.0, 1106.0], [644.0, 1109.0], [671.0, 1212.0], [680.0, 1114.0], [677.0, 3100.0], [724.0, 1110.0], [731.0, 1231.0], [722.0, 1104.0], [723.0, 1111.0], [705.0, 1294.0], [752.0, 1134.0], [758.0, 1137.5], [753.0, 1111.0], [754.0, 1115.0], [760.0, 1111.0], [764.0, 1113.0], [767.0, 2748.0], [765.0, 1108.0], [736.0, 1342.5], [738.0, 2538.5], [775.0, 1107.0], [777.0, 1105.0], [776.0, 1102.0], [784.0, 1560.0], [768.0, 1109.0], [771.0, 1103.0], [783.0, 1109.0], [799.0, 1153.0], [792.0, 1107.5], [795.0, 1103.0], [789.0, 1106.0], [788.0, 1103.0], [785.0, 1102.0], [780.0, 1109.0], [782.0, 1606.0], [830.0, 1934.0], [808.0, 1105.0], [805.0, 1134.0], [802.0, 1287.0], [840.0, 1539.0], [842.0, 1733.0], [864.0, 1701.5], [869.0, 1868.0], [878.0, 1121.0], [889.0, 1123.0], [894.0, 1121.5], [871.0, 1118.0], [881.0, 2041.0], [874.0, 1324.5], [922.0, 1779.0], [917.0, 1121.0], [919.0, 1214.0], [916.0, 1129.0], [906.0, 1118.0], [928.0, 1111.0], [949.0, 1117.0], [942.0, 1116.0], [937.0, 1105.0], [957.0, 1123.0], [946.0, 1604.0], [1.0, 7508.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[165.0, 10396.0], [22.0, 55.0], [808.0, 10140.0], [917.0, 55.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 957.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 55.0, "minX": 1.0, "maxY": 10396.0, "series": [{"data": [[2.0, 5027.5], [3.0, 5095.0], [4.0, 6215.0], [5.0, 6273.0], [6.0, 8038.0], [8.0, 5416.0], [9.0, 5072.0], [10.0, 6280.5], [14.0, 3185.0], [15.0, 3744.0], [16.0, 2874.5], [17.0, 5719.0], [18.0, 1803.5], [20.0, 2277.0], [21.0, 1758.0], [22.0, 3776.0], [23.0, 2985.0], [24.0, 6939.0], [26.0, 3056.0], [27.0, 2018.0], [30.0, 2076.5], [32.0, 1734.5], [35.0, 4533.5], [37.0, 6972.0], [40.0, 1873.5], [43.0, 2704.0], [47.0, 2301.5], [50.0, 3005.5], [58.0, 1903.5], [63.0, 1101.0], [64.0, 1397.0], [65.0, 1673.0], [88.0, 2160.0], [106.0, 1127.0], [108.0, 1104.0], [111.0, 1103.0], [116.0, 3552.0], [123.0, 1107.0], [131.0, 1432.0], [150.0, 2769.5], [165.0, 1103.0], [166.0, 1141.0], [160.0, 1106.0], [176.0, 6070.0], [187.0, 1947.0], [185.0, 1207.0], [232.0, 2160.5], [241.0, 1792.0], [283.0, 2097.0], [284.0, 1799.0], [274.0, 1415.0], [275.0, 1604.0], [276.0, 1869.0], [277.0, 1104.0], [288.0, 5356.5], [291.0, 2557.0], [298.0, 1603.5], [309.0, 1771.0], [319.0, 1305.0], [306.0, 1195.0], [324.0, 1408.5], [322.0, 1204.0], [334.0, 1346.5], [341.0, 1613.0], [336.0, 1131.5], [366.0, 1107.0], [358.0, 1103.0], [380.0, 1115.0], [397.0, 1105.0], [398.0, 1105.0], [399.0, 1117.0], [396.0, 1140.0], [386.0, 1105.0], [400.0, 1114.0], [403.0, 1133.0], [413.0, 1343.0], [414.0, 1339.0], [412.0, 1118.0], [405.0, 1117.0], [404.0, 1110.0], [415.0, 1109.0], [411.0, 1114.0], [410.0, 1104.0], [409.0, 1107.0], [401.0, 1108.0], [407.0, 1103.0], [406.0, 1192.5], [418.0, 1171.0], [416.0, 1111.0], [421.0, 2186.5], [426.0, 1125.0], [417.0, 1111.0], [420.0, 1838.5], [427.0, 1501.0], [423.0, 1108.0], [428.0, 1125.0], [430.0, 1215.5], [432.0, 1108.0], [445.0, 1127.0], [434.0, 1106.0], [443.0, 1227.0], [438.0, 1121.0], [448.0, 1141.5], [455.0, 1164.0], [462.0, 1784.0], [453.0, 1132.0], [476.0, 1111.0], [468.0, 1108.0], [484.0, 1120.0], [492.0, 1102.0], [501.0, 1450.0], [508.0, 1104.0], [515.0, 1226.0], [516.0, 1503.0], [525.0, 1798.0], [534.0, 2386.0], [539.0, 1181.0], [528.0, 2704.0], [537.0, 1107.0], [560.0, 1463.5], [546.0, 1114.0], [548.0, 2417.0], [575.0, 1108.0], [562.0, 1456.5], [544.0, 1101.0], [583.0, 1113.0], [589.0, 1467.0], [598.0, 1103.0], [580.0, 1452.5], [623.0, 2289.0], [638.0, 1107.0], [633.0, 1450.0], [624.0, 1118.0], [636.0, 1682.5], [643.0, 1127.0], [667.0, 1106.0], [644.0, 1108.0], [671.0, 1211.0], [680.0, 1114.0], [677.0, 3100.0], [724.0, 1110.0], [731.0, 1230.0], [722.0, 1103.0], [723.0, 1110.0], [705.0, 1294.0], [752.0, 1134.0], [758.0, 1137.5], [753.0, 1111.0], [754.0, 1114.0], [760.0, 1111.0], [764.0, 1112.0], [767.0, 2746.0], [765.0, 1107.0], [736.0, 1342.0], [738.0, 2519.5], [775.0, 1107.0], [777.0, 1105.0], [776.0, 1102.0], [784.0, 1560.0], [768.0, 1108.5], [771.0, 1102.0], [783.0, 1108.0], [799.0, 1152.0], [792.0, 1107.0], [795.0, 1103.0], [789.0, 1105.0], [788.0, 1103.0], [785.0, 1102.0], [780.0, 1109.0], [782.0, 1606.0], [830.0, 1934.0], [808.0, 1105.0], [805.0, 1134.0], [802.0, 1287.0], [840.0, 1539.0], [842.0, 1733.0], [864.0, 1701.5], [869.0, 1868.0], [878.0, 1121.0], [889.0, 1123.0], [894.0, 1121.5], [871.0, 1117.0], [881.0, 2040.0], [874.0, 1322.5], [922.0, 1779.0], [917.0, 1120.0], [919.0, 1213.0], [916.0, 1129.0], [906.0, 1118.0], [928.0, 1111.0], [949.0, 1117.0], [942.0, 1116.0], [937.0, 1104.0], [957.0, 1123.0], [946.0, 1604.0], [1.0, 7508.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[165.0, 10396.0], [22.0, 55.0], [808.0, 10140.0], [917.0, 55.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 957.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 9.05, "minX": 1.68415992E12, "maxY": 469.06666666666666, "series": [{"data": [[1.68416004E12, 469.06666666666666], [1.68416022E12, 391.6333333333333], [1.68416016E12, 400.0], [1.68415998E12, 344.26666666666665], [1.68415992E12, 9.05], [1.6841601E12, 390.93333333333334]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68416022E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.3, "minX": 1.68415998E12, "maxY": 471.55, "series": [{"data": [[1.68416004E12, 471.55], [1.68416022E12, 390.55], [1.68416016E12, 408.95], [1.68416028E12, 1.5333333333333334], [1.68415998E12, 341.31666666666666], [1.6841601E12, 390.75]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.68416004E12, 0.3]], "isOverall": false, "label": "429", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68416028E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.3, "minX": 1.68415998E12, "maxY": 471.55, "series": [{"data": [[1.68416004E12, 471.55], [1.68416022E12, 390.55], [1.68416016E12, 408.95], [1.68416028E12, 1.5333333333333334], [1.68415998E12, 341.31666666666666], [1.6841601E12, 390.75]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.68416004E12, 0.3]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68416028E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.3, "minX": 1.68415998E12, "maxY": 471.55, "series": [{"data": [[1.68416004E12, 471.55], [1.68416022E12, 390.55], [1.68416016E12, 408.95], [1.68416028E12, 1.5333333333333334], [1.68415998E12, 341.31666666666666], [1.6841601E12, 390.75]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.68416004E12, 0.3]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68416028E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

