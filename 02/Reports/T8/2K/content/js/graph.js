/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 3778.0, "minX": 0.0, "maxY": 10791.0, "series": [{"data": [[0.0, 3778.0], [0.1, 3778.0], [0.2, 3798.0], [0.3, 3798.0], [0.4, 3800.0], [0.5, 3819.0], [0.6, 3819.0], [0.7, 3821.0], [0.8, 3821.0], [0.9, 3823.0], [1.0, 3836.0], [1.1, 3836.0], [1.2, 3841.0], [1.3, 3841.0], [1.4, 3851.0], [1.5, 3856.0], [1.6, 3856.0], [1.7, 3857.0], [1.8, 3857.0], [1.9, 3858.0], [2.0, 3866.0], [2.1, 3866.0], [2.2, 3868.0], [2.3, 3868.0], [2.4, 3872.0], [2.5, 3874.0], [2.6, 3874.0], [2.7, 3874.0], [2.8, 3874.0], [2.9, 3880.0], [3.0, 3882.0], [3.1, 3882.0], [3.2, 3883.0], [3.3, 3883.0], [3.4, 3890.0], [3.5, 3891.0], [3.6, 3891.0], [3.7, 3894.0], [3.8, 3894.0], [3.9, 3895.0], [4.0, 3895.0], [4.1, 3895.0], [4.2, 3895.0], [4.3, 3895.0], [4.4, 3897.0], [4.5, 3902.0], [4.6, 3902.0], [4.7, 3902.0], [4.8, 3902.0], [4.9, 3902.0], [5.0, 3904.0], [5.1, 3904.0], [5.2, 3915.0], [5.3, 3915.0], [5.4, 3915.0], [5.5, 3916.0], [5.6, 3916.0], [5.7, 3916.0], [5.8, 3916.0], [5.9, 3916.0], [6.0, 3917.0], [6.1, 3917.0], [6.2, 3918.0], [6.3, 3918.0], [6.4, 3920.0], [6.5, 3921.0], [6.6, 3921.0], [6.7, 3922.0], [6.8, 3922.0], [6.9, 3924.0], [7.0, 3924.0], [7.1, 3925.0], [7.2, 3926.0], [7.3, 3926.0], [7.4, 3930.0], [7.5, 3930.0], [7.6, 3930.0], [7.7, 3930.0], [7.8, 3930.0], [7.9, 3932.0], [8.0, 3932.0], [8.1, 3932.0], [8.2, 3933.0], [8.3, 3933.0], [8.4, 3936.0], [8.5, 3937.0], [8.6, 3937.0], [8.7, 3941.0], [8.8, 3941.0], [8.9, 3942.0], [9.0, 3951.0], [9.1, 3951.0], [9.2, 3951.0], [9.3, 3951.0], [9.4, 3952.0], [9.5, 3952.0], [9.6, 3952.0], [9.7, 3953.0], [9.8, 3953.0], [9.9, 3955.0], [10.0, 3955.0], [10.1, 3955.0], [10.2, 3957.0], [10.3, 3957.0], [10.4, 3957.0], [10.5, 3958.0], [10.6, 3958.0], [10.7, 3961.0], [10.8, 3961.0], [10.9, 3962.0], [11.0, 3963.0], [11.1, 3963.0], [11.2, 3963.0], [11.3, 3963.0], [11.4, 3966.0], [11.5, 3967.0], [11.6, 3967.0], [11.7, 3968.0], [11.8, 3968.0], [11.9, 3968.0], [12.0, 3969.0], [12.1, 3969.0], [12.2, 3970.0], [12.3, 3970.0], [12.4, 3971.0], [12.5, 3971.0], [12.6, 3971.0], [12.7, 3972.0], [12.8, 3972.0], [12.9, 3972.0], [13.0, 3972.0], [13.1, 3972.0], [13.2, 3972.0], [13.3, 3972.0], [13.4, 3974.0], [13.5, 3974.0], [13.6, 3974.0], [13.7, 3974.0], [13.8, 3974.0], [13.9, 3979.0], [14.0, 3980.0], [14.1, 3980.0], [14.2, 3981.0], [14.3, 3981.0], [14.4, 3982.0], [14.5, 3982.0], [14.6, 3982.0], [14.7, 3983.0], [14.8, 3983.0], [14.9, 3983.0], [15.0, 3983.0], [15.1, 3983.0], [15.2, 3983.0], [15.3, 3983.0], [15.4, 3983.0], [15.5, 3983.0], [15.6, 3983.0], [15.7, 3984.0], [15.8, 3984.0], [15.9, 3985.0], [16.0, 3985.0], [16.1, 3985.0], [16.2, 3985.0], [16.3, 3985.0], [16.4, 3986.0], [16.5, 3987.0], [16.6, 3987.0], [16.7, 3987.0], [16.8, 3987.0], [16.9, 3987.0], [17.0, 3988.0], [17.1, 3988.0], [17.2, 3990.0], [17.3, 3990.0], [17.4, 3992.0], [17.5, 3993.0], [17.6, 3993.0], [17.7, 3994.0], [17.8, 3994.0], [17.9, 3994.0], [18.0, 3997.0], [18.1, 3997.0], [18.2, 3998.0], [18.3, 3998.0], [18.4, 3998.0], [18.5, 3999.0], [18.6, 3999.0], [18.7, 4000.0], [18.8, 4000.0], [18.9, 4001.0], [19.0, 4001.0], [19.1, 4002.0], [19.2, 4003.0], [19.3, 4003.0], [19.4, 4004.0], [19.5, 4004.0], [19.6, 4004.0], [19.7, 4004.0], [19.8, 4004.0], [19.9, 4004.0], [20.0, 4004.0], [20.1, 4006.0], [20.2, 4006.0], [20.3, 4006.0], [20.4, 4009.0], [20.5, 4009.0], [20.6, 4009.0], [20.7, 4014.0], [20.8, 4014.0], [20.9, 4014.0], [21.0, 4014.0], [21.1, 4015.0], [21.2, 4016.0], [21.3, 4016.0], [21.4, 4016.0], [21.5, 4016.0], [21.6, 4018.0], [21.7, 4018.0], [21.8, 4018.0], [21.9, 4020.0], [22.0, 4020.0], [22.1, 4020.0], [22.2, 4021.0], [22.3, 4021.0], [22.4, 4021.0], [22.5, 4021.0], [22.6, 4021.0], [22.7, 4022.0], [22.8, 4022.0], [22.9, 4022.0], [23.0, 4023.0], [23.1, 4023.0], [23.2, 4025.0], [23.3, 4025.0], [23.4, 4025.0], [23.5, 4026.0], [23.6, 4026.0], [23.7, 4026.0], [23.8, 4026.0], [23.9, 4026.0], [24.0, 4030.0], [24.1, 4030.0], [24.2, 4030.0], [24.3, 4030.0], [24.4, 4031.0], [24.5, 4031.0], [24.6, 4031.0], [24.7, 4031.0], [24.8, 4031.0], [24.9, 4033.0], [25.0, 4036.0], [25.1, 4036.0], [25.2, 4037.0], [25.3, 4037.0], [25.4, 4037.0], [25.5, 4037.0], [25.6, 4037.0], [25.7, 4037.0], [25.8, 4037.0], [25.9, 4038.0], [26.0, 4038.0], [26.1, 4038.0], [26.2, 4039.0], [26.3, 4039.0], [26.4, 4040.0], [26.5, 4040.0], [26.6, 4040.0], [26.7, 4040.0], [26.8, 4040.0], [26.9, 4040.0], [27.0, 4040.0], [27.1, 4041.0], [27.2, 4041.0], [27.3, 4041.0], [27.4, 4042.0], [27.5, 4042.0], [27.6, 4042.0], [27.7, 4043.0], [27.8, 4043.0], [27.9, 4043.0], [28.0, 4044.0], [28.1, 4044.0], [28.2, 4045.0], [28.3, 4045.0], [28.4, 4045.0], [28.5, 4046.0], [28.6, 4046.0], [28.7, 4047.0], [28.8, 4047.0], [28.9, 4047.0], [29.0, 4047.0], [29.1, 4047.0], [29.2, 4049.0], [29.3, 4049.0], [29.4, 4050.0], [29.5, 4050.0], [29.6, 4051.0], [29.7, 4051.0], [29.8, 4051.0], [29.9, 4052.0], [30.0, 4052.0], [30.1, 4052.0], [30.2, 4052.0], [30.3, 4052.0], [30.4, 4052.0], [30.5, 4052.0], [30.6, 4053.0], [30.7, 4053.0], [30.8, 4053.0], [30.9, 4054.0], [31.0, 4054.0], [31.1, 4054.0], [31.2, 4055.0], [31.3, 4055.0], [31.4, 4055.0], [31.5, 4056.0], [31.6, 4056.0], [31.7, 4057.0], [31.8, 4057.0], [31.9, 4058.0], [32.0, 4059.0], [32.1, 4059.0], [32.2, 4060.0], [32.3, 4060.0], [32.4, 4060.0], [32.5, 4061.0], [32.6, 4061.0], [32.7, 4062.0], [32.8, 4062.0], [32.9, 4063.0], [33.0, 4064.0], [33.1, 4064.0], [33.2, 4066.0], [33.3, 4066.0], [33.4, 4066.0], [33.5, 4066.0], [33.6, 4066.0], [33.7, 4067.0], [33.8, 4067.0], [33.9, 4067.0], [34.0, 4068.0], [34.1, 4068.0], [34.2, 4068.0], [34.3, 4068.0], [34.4, 4068.0], [34.5, 4069.0], [34.6, 4069.0], [34.7, 4070.0], [34.8, 4070.0], [34.9, 4070.0], [35.0, 4070.0], [35.1, 4070.0], [35.2, 4071.0], [35.3, 4071.0], [35.4, 4071.0], [35.5, 4072.0], [35.6, 4072.0], [35.7, 4074.0], [35.8, 4074.0], [35.9, 4075.0], [36.0, 4075.0], [36.1, 4075.0], [36.2, 4076.0], [36.3, 4076.0], [36.4, 4077.0], [36.5, 4077.0], [36.6, 4077.0], [36.7, 4078.0], [36.8, 4078.0], [36.9, 4079.0], [37.0, 4081.0], [37.1, 4081.0], [37.2, 4081.0], [37.3, 4081.0], [37.4, 4082.0], [37.5, 4082.0], [37.6, 4082.0], [37.7, 4082.0], [37.8, 4082.0], [37.9, 4083.0], [38.0, 4083.0], [38.1, 4083.0], [38.2, 4084.0], [38.3, 4084.0], [38.4, 4085.0], [38.5, 4085.0], [38.6, 4085.0], [38.7, 4085.0], [38.8, 4085.0], [38.9, 4086.0], [39.0, 4086.0], [39.1, 4086.0], [39.2, 4087.0], [39.3, 4087.0], [39.4, 4087.0], [39.5, 4088.0], [39.6, 4088.0], [39.7, 4088.0], [39.8, 4088.0], [39.9, 4089.0], [40.0, 4089.0], [40.1, 4089.0], [40.2, 4090.0], [40.3, 4090.0], [40.4, 4091.0], [40.5, 4092.0], [40.6, 4092.0], [40.7, 4092.0], [40.8, 4092.0], [40.9, 4092.0], [41.0, 4092.0], [41.1, 4092.0], [41.2, 4094.0], [41.3, 4094.0], [41.4, 4095.0], [41.5, 4095.0], [41.6, 4095.0], [41.7, 4095.0], [41.8, 4095.0], [41.9, 4095.0], [42.0, 4096.0], [42.1, 4096.0], [42.2, 4096.0], [42.3, 4096.0], [42.4, 4096.0], [42.5, 4097.0], [42.6, 4097.0], [42.7, 4097.0], [42.8, 4097.0], [42.9, 4098.0], [43.0, 4099.0], [43.1, 4099.0], [43.2, 4099.0], [43.3, 4099.0], [43.4, 4099.0], [43.5, 4100.0], [43.6, 4100.0], [43.7, 4100.0], [43.8, 4100.0], [43.9, 4101.0], [44.0, 4101.0], [44.1, 4101.0], [44.2, 4101.0], [44.3, 4101.0], [44.4, 4101.0], [44.5, 4102.0], [44.6, 4102.0], [44.7, 4104.0], [44.8, 4104.0], [44.9, 4105.0], [45.0, 4106.0], [45.1, 4106.0], [45.2, 4106.0], [45.3, 4106.0], [45.4, 4107.0], [45.5, 4107.0], [45.6, 4107.0], [45.7, 4107.0], [45.8, 4107.0], [45.9, 4107.0], [46.0, 4108.0], [46.1, 4108.0], [46.2, 4108.0], [46.3, 4108.0], [46.4, 4109.0], [46.5, 4110.0], [46.6, 4110.0], [46.7, 4110.0], [46.8, 4110.0], [46.9, 4110.0], [47.0, 4110.0], [47.1, 4110.0], [47.2, 4111.0], [47.3, 4111.0], [47.4, 4112.0], [47.5, 4112.0], [47.6, 4112.0], [47.7, 4112.0], [47.8, 4112.0], [47.9, 4112.0], [48.0, 4113.0], [48.1, 4113.0], [48.2, 4114.0], [48.3, 4114.0], [48.4, 4114.0], [48.5, 4114.0], [48.6, 4114.0], [48.7, 4116.0], [48.8, 4116.0], [48.9, 4117.0], [49.0, 4118.0], [49.1, 4118.0], [49.2, 4121.0], [49.3, 4121.0], [49.4, 4122.0], [49.5, 4123.0], [49.6, 4123.0], [49.7, 4123.0], [49.8, 4123.0], [49.9, 4125.0], [50.0, 4126.0], [50.1, 4126.0], [50.2, 4127.0], [50.3, 4127.0], [50.4, 4127.0], [50.5, 4127.0], [50.6, 4127.0], [50.7, 4128.0], [50.8, 4128.0], [50.9, 4128.0], [51.0, 4128.0], [51.1, 4128.0], [51.2, 4128.0], [51.3, 4128.0], [51.4, 4128.0], [51.5, 4129.0], [51.6, 4129.0], [51.7, 4129.0], [51.8, 4129.0], [51.9, 4129.0], [52.0, 4129.0], [52.1, 4129.0], [52.2, 4129.0], [52.3, 4129.0], [52.4, 4130.0], [52.5, 4130.0], [52.6, 4130.0], [52.7, 4132.0], [52.8, 4132.0], [52.9, 4132.0], [53.0, 4133.0], [53.1, 4133.0], [53.2, 4133.0], [53.3, 4133.0], [53.4, 4134.0], [53.5, 4134.0], [53.6, 4134.0], [53.7, 4135.0], [53.8, 4135.0], [53.9, 4135.0], [54.0, 4136.0], [54.1, 4136.0], [54.2, 4137.0], [54.3, 4137.0], [54.4, 4138.0], [54.5, 4139.0], [54.6, 4139.0], [54.7, 4139.0], [54.8, 4139.0], [54.9, 4140.0], [55.0, 4141.0], [55.1, 4141.0], [55.2, 4142.0], [55.3, 4142.0], [55.4, 4142.0], [55.5, 4142.0], [55.6, 4142.0], [55.7, 4142.0], [55.8, 4142.0], [55.9, 4144.0], [56.0, 4145.0], [56.1, 4145.0], [56.2, 4145.0], [56.3, 4145.0], [56.4, 4146.0], [56.5, 4146.0], [56.6, 4146.0], [56.7, 4146.0], [56.8, 4146.0], [56.9, 4146.0], [57.0, 4146.0], [57.1, 4146.0], [57.2, 4146.0], [57.3, 4146.0], [57.4, 4146.0], [57.5, 4147.0], [57.6, 4147.0], [57.7, 4150.0], [57.8, 4150.0], [57.9, 4150.0], [58.0, 4151.0], [58.1, 4151.0], [58.2, 4151.0], [58.3, 4151.0], [58.4, 4151.0], [58.5, 4151.0], [58.6, 4151.0], [58.7, 4151.0], [58.8, 4151.0], [58.9, 4151.0], [59.0, 4151.0], [59.1, 4151.0], [59.2, 4152.0], [59.3, 4152.0], [59.4, 4152.0], [59.5, 4152.0], [59.6, 4152.0], [59.7, 4153.0], [59.8, 4153.0], [59.9, 4155.0], [60.0, 4156.0], [60.1, 4156.0], [60.2, 4156.0], [60.3, 4156.0], [60.4, 4156.0], [60.5, 4157.0], [60.6, 4157.0], [60.7, 4157.0], [60.8, 4157.0], [60.9, 4158.0], [61.0, 4159.0], [61.1, 4159.0], [61.2, 4159.0], [61.3, 4159.0], [61.4, 4159.0], [61.5, 4162.0], [61.6, 4162.0], [61.7, 4162.0], [61.8, 4162.0], [61.9, 4162.0], [62.0, 4163.0], [62.1, 4163.0], [62.2, 4163.0], [62.3, 4163.0], [62.4, 4163.0], [62.5, 4164.0], [62.6, 4164.0], [62.7, 4166.0], [62.8, 4166.0], [62.9, 4166.0], [63.0, 4168.0], [63.1, 4168.0], [63.2, 4168.0], [63.3, 4168.0], [63.4, 4169.0], [63.5, 4169.0], [63.6, 4169.0], [63.7, 4169.0], [63.8, 4169.0], [63.9, 4170.0], [64.0, 4170.0], [64.1, 4170.0], [64.2, 4170.0], [64.3, 4170.0], [64.4, 4171.0], [64.5, 4171.0], [64.6, 4171.0], [64.7, 4171.0], [64.8, 4171.0], [64.9, 4172.0], [65.0, 4172.0], [65.1, 4172.0], [65.2, 4173.0], [65.3, 4173.0], [65.4, 4174.0], [65.5, 4176.0], [65.6, 4176.0], [65.7, 4177.0], [65.8, 4177.0], [65.9, 4179.0], [66.0, 4181.0], [66.1, 4181.0], [66.2, 4181.0], [66.3, 4181.0], [66.4, 4182.0], [66.5, 4184.0], [66.6, 4184.0], [66.7, 4184.0], [66.8, 4184.0], [66.9, 4185.0], [67.0, 4185.0], [67.1, 4185.0], [67.2, 4185.0], [67.3, 4185.0], [67.4, 4186.0], [67.5, 4187.0], [67.6, 4187.0], [67.7, 4188.0], [67.8, 4188.0], [67.9, 4188.0], [68.0, 4189.0], [68.1, 4189.0], [68.2, 4189.0], [68.3, 4189.0], [68.4, 4189.0], [68.5, 4189.0], [68.6, 4189.0], [68.7, 4191.0], [68.8, 4191.0], [68.9, 4193.0], [69.0, 4196.0], [69.1, 4196.0], [69.2, 4196.0], [69.3, 4196.0], [69.4, 4198.0], [69.5, 4199.0], [69.6, 4199.0], [69.7, 4199.0], [69.8, 4199.0], [69.9, 4199.0], [70.0, 4199.0], [70.1, 4199.0], [70.2, 4200.0], [70.3, 4200.0], [70.4, 4201.0], [70.5, 4202.0], [70.6, 4202.0], [70.7, 4202.0], [70.8, 4202.0], [70.9, 4204.0], [71.0, 4205.0], [71.1, 4205.0], [71.2, 4206.0], [71.3, 4206.0], [71.4, 4206.0], [71.5, 4207.0], [71.6, 4207.0], [71.7, 4207.0], [71.8, 4207.0], [71.9, 4208.0], [72.0, 4208.0], [72.1, 4208.0], [72.2, 4210.0], [72.3, 4210.0], [72.4, 4211.0], [72.5, 4213.0], [72.6, 4213.0], [72.7, 4214.0], [72.8, 4214.0], [72.9, 4215.0], [73.0, 4215.0], [73.1, 4215.0], [73.2, 4216.0], [73.3, 4216.0], [73.4, 4216.0], [73.5, 4217.0], [73.6, 4217.0], [73.7, 4218.0], [73.8, 4218.0], [73.9, 4218.0], [74.0, 4220.0], [74.1, 4220.0], [74.2, 4220.0], [74.3, 4220.0], [74.4, 4220.0], [74.5, 4221.0], [74.6, 4221.0], [74.7, 4224.0], [74.8, 4224.0], [74.9, 4226.0], [75.0, 4226.0], [75.1, 4227.0], [75.2, 4227.0], [75.3, 4227.0], [75.4, 4228.0], [75.5, 4228.0], [75.6, 4228.0], [75.7, 4228.0], [75.8, 4228.0], [75.9, 4229.0], [76.0, 4229.0], [76.1, 4230.0], [76.2, 4233.0], [76.3, 4233.0], [76.4, 4233.0], [76.5, 4233.0], [76.6, 4235.0], [76.7, 4237.0], [76.8, 4237.0], [76.9, 4238.0], [77.0, 4238.0], [77.1, 4240.0], [77.2, 4241.0], [77.3, 4241.0], [77.4, 4241.0], [77.5, 4241.0], [77.6, 4242.0], [77.7, 4244.0], [77.8, 4244.0], [77.9, 4245.0], [78.0, 4245.0], [78.1, 4245.0], [78.2, 4247.0], [78.3, 4247.0], [78.4, 4247.0], [78.5, 4247.0], [78.6, 4248.0], [78.7, 4248.0], [78.8, 4248.0], [78.9, 4251.0], [79.0, 4251.0], [79.1, 4251.0], [79.2, 4254.0], [79.3, 4254.0], [79.4, 4255.0], [79.5, 4255.0], [79.6, 4255.0], [79.7, 4256.0], [79.8, 4256.0], [79.9, 4259.0], [80.0, 4259.0], [80.1, 4259.0], [80.2, 4259.0], [80.3, 4259.0], [80.4, 4259.0], [80.5, 4259.0], [80.6, 4260.0], [80.7, 4265.0], [80.8, 4265.0], [80.9, 4269.0], [81.0, 4269.0], [81.1, 4271.0], [81.2, 4279.0], [81.3, 4279.0], [81.4, 4281.0], [81.5, 4281.0], [81.6, 4281.0], [81.7, 4282.0], [81.8, 4282.0], [81.9, 4284.0], [82.0, 4284.0], [82.1, 4288.0], [82.2, 4289.0], [82.3, 4289.0], [82.4, 4289.0], [82.5, 4289.0], [82.6, 4289.0], [82.7, 4291.0], [82.8, 4291.0], [82.9, 4293.0], [83.0, 4293.0], [83.1, 4293.0], [83.2, 4294.0], [83.3, 4294.0], [83.4, 4296.0], [83.5, 4296.0], [83.6, 4297.0], [83.7, 4298.0], [83.8, 4298.0], [83.9, 4299.0], [84.0, 4299.0], [84.1, 4299.0], [84.2, 4310.0], [84.3, 4310.0], [84.4, 4324.0], [84.5, 4324.0], [84.6, 4325.0], [84.7, 4328.0], [84.8, 4328.0], [84.9, 4328.0], [85.0, 4328.0], [85.1, 4330.0], [85.2, 4331.0], [85.3, 4331.0], [85.4, 4343.0], [85.5, 4343.0], [85.6, 4350.0], [85.7, 4352.0], [85.8, 4352.0], [85.9, 4355.0], [86.0, 4355.0], [86.1, 4358.0], [86.2, 4359.0], [86.3, 4359.0], [86.4, 4362.0], [86.5, 4362.0], [86.6, 4374.0], [86.7, 4375.0], [86.8, 4375.0], [86.9, 4378.0], [87.0, 4378.0], [87.1, 4379.0], [87.2, 4387.0], [87.3, 4387.0], [87.4, 4391.0], [87.5, 4391.0], [87.6, 4395.0], [87.7, 4398.0], [87.8, 4398.0], [87.9, 4400.0], [88.0, 4400.0], [88.1, 4400.0], [88.2, 4425.0], [88.3, 4425.0], [88.4, 4431.0], [88.5, 4431.0], [88.6, 4444.0], [88.7, 4454.0], [88.8, 4454.0], [88.9, 4456.0], [89.0, 4456.0], [89.1, 4460.0], [89.2, 4462.0], [89.3, 4462.0], [89.4, 4470.0], [89.5, 4470.0], [89.6, 4472.0], [89.7, 4483.0], [89.8, 4483.0], [89.9, 4486.0], [90.0, 4486.0], [90.1, 4489.0], [90.2, 4522.0], [90.3, 4522.0], [90.4, 4536.0], [90.5, 4536.0], [90.6, 4544.0], [90.7, 4547.0], [90.8, 4547.0], [90.9, 4550.0], [91.0, 4550.0], [91.1, 4575.0], [91.2, 4593.0], [91.3, 4593.0], [91.4, 4650.0], [91.5, 4650.0], [91.6, 4661.0], [91.7, 4669.0], [91.8, 4669.0], [91.9, 4675.0], [92.0, 4675.0], [92.1, 4717.0], [92.2, 4726.0], [92.3, 4726.0], [92.4, 4739.0], [92.5, 4739.0], [92.6, 4788.0], [92.7, 4794.0], [92.8, 4794.0], [92.9, 4801.0], [93.0, 4801.0], [93.1, 4869.0], [93.2, 4880.0], [93.3, 4880.0], [93.4, 4917.0], [93.5, 4917.0], [93.6, 4966.0], [93.7, 4969.0], [93.8, 4969.0], [93.9, 4995.0], [94.0, 4995.0], [94.1, 5020.0], [94.2, 5069.0], [94.3, 5069.0], [94.4, 5124.0], [94.5, 5124.0], [94.6, 5168.0], [94.7, 5206.0], [94.8, 5206.0], [94.9, 5289.0], [95.0, 5289.0], [95.1, 5317.0], [95.2, 5319.0], [95.3, 5319.0], [95.4, 5328.0], [95.5, 5328.0], [95.6, 5390.0], [95.7, 5488.0], [95.8, 5488.0], [95.9, 5511.0], [96.0, 5511.0], [96.1, 5514.0], [96.2, 5630.0], [96.3, 5630.0], [96.4, 5673.0], [96.5, 5673.0], [96.6, 5706.0], [96.7, 5717.0], [96.8, 5717.0], [96.9, 5824.0], [97.0, 5824.0], [97.1, 5827.0], [97.2, 5837.0], [97.3, 5837.0], [97.4, 8266.0], [97.5, 8266.0], [97.6, 8343.0], [97.7, 8933.0], [97.8, 8933.0], [97.9, 8938.0], [98.0, 8938.0], [98.1, 9043.0], [98.2, 9051.0], [98.3, 9051.0], [98.4, 9059.0], [98.5, 9059.0], [98.6, 9063.0], [98.7, 9102.0], [98.8, 9102.0], [98.9, 9130.0], [99.0, 9130.0], [99.1, 9180.0], [99.2, 9325.0], [99.3, 9325.0], [99.4, 9468.0], [99.5, 9468.0], [99.6, 9760.0], [99.7, 10699.0], [99.8, 10699.0], [99.9, 10791.0], [100.0, 10791.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 3700.0, "maxY": 160.0, "series": [{"data": [[8300.0, 1.0], [8200.0, 1.0], [9000.0, 4.0], [9100.0, 3.0], [8900.0, 2.0], [9300.0, 1.0], [9700.0, 1.0], [9400.0, 1.0], [10600.0, 1.0], [10700.0, 1.0], [3700.0, 2.0], [3800.0, 25.0], [3900.0, 85.0], [4000.0, 149.0], [4300.0, 22.0], [4100.0, 160.0], [4200.0, 84.0], [4400.0, 14.0], [4600.0, 4.0], [4500.0, 7.0], [4700.0, 5.0], [4800.0, 3.0], [4900.0, 4.0], [5000.0, 2.0], [5100.0, 2.0], [5300.0, 4.0], [5200.0, 2.0], [5400.0, 1.0], [5500.0, 2.0], [5600.0, 2.0], [5700.0, 2.0], [5800.0, 3.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 10700.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 600.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 600.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 600.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 37.51351351351352, "minX": 1.68431406E12, "maxY": 576.5208333333335, "series": [{"data": [[1.6843143E12, 136.0], [1.68431412E12, 494.5086206896552], [1.68431424E12, 259.5], [1.68431406E12, 576.5208333333335], [1.68431436E12, 37.51351351351352], [1.68431418E12, 379.00869565217397]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68431436E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 3778.0, "minX": 1.0, "maxY": 10791.0, "series": [{"data": [[2.0, 4387.0], [3.0, 4081.0], [5.0, 4692.5], [6.0, 4137.0], [7.0, 4039.0], [8.0, 4297.0], [9.0, 4145.0], [10.0, 4241.0], [11.0, 4151.0], [12.0, 3971.0], [13.0, 4152.0], [14.0, 4130.0], [15.0, 4210.0], [16.0, 4150.0], [17.0, 3972.0], [18.0, 3937.0], [19.0, 4152.0], [20.0, 4135.0], [21.0, 4228.0], [22.0, 3983.0], [23.0, 4058.0], [24.0, 4045.0], [25.0, 4088.0], [26.0, 4060.0], [27.0, 4199.0], [28.0, 3952.0], [29.0, 4739.0], [30.0, 4163.0], [31.0, 4191.0], [33.0, 10791.0], [32.0, 3858.0], [35.0, 4047.0], [34.0, 4217.0], [37.0, 4193.0], [36.0, 4251.0], [39.0, 4042.0], [38.0, 4107.0], [41.0, 3951.0], [40.0, 4163.0], [43.0, 4284.0], [42.0, 4801.0], [45.0, 3951.0], [44.0, 4151.0], [47.0, 4156.0], [46.0, 4378.0], [49.0, 4170.0], [48.0, 4078.0], [51.0, 4151.0], [50.0, 4129.0], [53.0, 4248.0], [52.0, 4057.0], [55.0, 4147.0], [54.0, 4187.0], [57.0, 4138.0], [56.0, 4043.0], [59.0, 4128.0], [58.0, 4052.0], [61.0, 9043.0], [60.0, 4096.0], [63.0, 4130.0], [62.0, 9063.0], [67.0, 8266.0], [66.0, 3902.0], [65.0, 4233.0], [64.0, 4123.0], [71.0, 4056.0], [70.0, 4245.0], [69.0, 4002.0], [68.0, 4068.0], [75.0, 4113.0], [74.0, 4025.0], [73.0, 4110.0], [72.0, 3778.0], [79.0, 9468.0], [78.0, 4061.0], [77.0, 4208.0], [76.0, 3994.0], [83.0, 4052.0], [82.0, 4074.0], [81.0, 3987.0], [80.0, 4040.0], [87.0, 4200.0], [86.0, 4159.0], [85.0, 4189.0], [84.0, 9180.0], [91.0, 4112.0], [90.0, 3982.0], [89.0, 4247.0], [88.0, 3987.0], [95.0, 4071.0], [94.0, 4299.0], [93.0, 4536.0], [92.0, 5124.0], [99.0, 4205.0], [98.0, 3904.0], [97.0, 4037.0], [96.0, 4067.0], [103.0, 4185.0], [102.0, 3894.0], [101.0, 4196.0], [100.0, 4127.0], [107.0, 4132.0], [106.0, 3955.0], [105.0, 4031.0], [104.0, 4095.0], [111.0, 4186.0], [110.0, 3891.0], [109.0, 4255.0], [108.0, 4091.0], [115.0, 4259.0], [114.0, 3932.0], [113.0, 4049.0], [112.0, 3980.0], [119.0, 4164.0], [118.0, 3798.0], [117.0, 4176.0], [116.0, 4109.0], [123.0, 3974.0], [122.0, 3823.0], [121.0, 4184.0], [120.0, 4087.0], [127.0, 4053.0], [126.0, 4037.0], [125.0, 4216.0], [124.0, 3958.0], [135.0, 4107.0], [134.0, 3920.0], [133.0, 4021.0], [132.0, 3902.0], [131.0, 3990.0], [130.0, 4196.0], [129.0, 4575.0], [128.0, 3972.0], [143.0, 4150.0], [142.0, 4055.0], [141.0, 4153.0], [140.0, 4022.0], [139.0, 4089.0], [138.0, 4022.0], [137.0, 4142.0], [136.0, 3987.0], [151.0, 4794.0], [150.0, 4085.0], [149.0, 4128.0], [148.0, 4060.0], [147.0, 3955.0], [146.0, 4237.0], [145.0, 4096.0], [144.0, 3933.0], [159.0, 4325.0], [158.0, 4004.0], [157.0, 4075.0], [156.0, 3902.0], [155.0, 4043.0], [154.0, 4215.0], [153.0, 4129.0], [152.0, 4171.0], [167.0, 4331.0], [166.0, 3963.0], [165.0, 4038.0], [164.0, 4066.0], [163.0, 4157.0], [162.0, 4101.0], [161.0, 4171.0], [160.0, 4064.0], [175.0, 4146.0], [174.0, 4072.0], [173.0, 4229.0], [172.0, 3983.0], [171.0, 4046.0], [170.0, 4330.0], [169.0, 4352.0], [168.0, 4226.0], [183.0, 5289.0], [182.0, 4112.0], [181.0, 4230.0], [180.0, 4132.0], [179.0, 4188.0], [178.0, 3936.0], [177.0, 4104.0], [176.0, 4101.0], [191.0, 4038.0], [190.0, 4145.0], [189.0, 4114.0], [188.0, 4127.0], [187.0, 4168.0], [186.0, 4256.0], [185.0, 5317.0], [184.0, 3981.0], [199.0, 5511.0], [198.0, 5824.0], [197.0, 4009.0], [196.0, 4099.0], [195.0, 4031.0], [194.0, 4218.0], [193.0, 8938.0], [192.0, 3967.0], [207.0, 3921.0], [206.0, 4084.0], [205.0, 5630.0], [204.0, 4082.0], [203.0, 3922.0], [202.0, 5717.0], [201.0, 4037.0], [200.0, 4917.0], [215.0, 4259.0], [214.0, 3856.0], [213.0, 4055.0], [212.0, 4174.0], [211.0, 4220.0], [210.0, 4204.0], [209.0, 4259.0], [208.0, 4483.0], [223.0, 4041.0], [222.0, 4014.0], [221.0, 4251.0], [220.0, 4041.0], [219.0, 4004.0], [218.0, 4123.0], [217.0, 4298.0], [216.0, 4112.0], [231.0, 4206.0], [230.0, 4040.0], [229.0, 4095.0], [228.0, 4000.0], [227.0, 4054.0], [226.0, 3868.0], [225.0, 4085.0], [224.0, 3997.0], [239.0, 4170.0], [238.0, 4102.0], [237.0, 4121.0], [236.0, 3895.0], [235.0, 4092.0], [234.0, 4006.0], [233.0, 4328.0], [232.0, 4172.0], [247.0, 4004.0], [246.0, 3930.0], [245.0, 4235.0], [244.0, 4036.0], [243.0, 4101.0], [242.0, 3957.0], [241.0, 4053.0], [240.0, 3994.0], [255.0, 4152.0], [254.0, 3957.0], [253.0, 4001.0], [252.0, 3819.0], [251.0, 4343.0], [250.0, 4014.0], [249.0, 4030.0], [248.0, 3970.0], [270.0, 9130.0], [271.0, 4198.0], [269.0, 4108.0], [268.0, 4291.0], [267.0, 10699.0], [266.0, 3821.0], [265.0, 4105.0], [264.0, 4189.0], [263.0, 4213.0], [257.0, 5020.0], [256.0, 3882.0], [259.0, 4170.0], [258.0, 4375.0], [262.0, 3930.0], [261.0, 4006.0], [260.0, 4146.0], [286.0, 4133.0], [287.0, 4431.0], [285.0, 4215.0], [284.0, 4151.0], [283.0, 3916.0], [282.0, 4156.0], [281.0, 5673.0], [280.0, 3988.0], [279.0, 4071.0], [273.0, 4238.0], [272.0, 4146.0], [275.0, 4221.0], [274.0, 4112.0], [278.0, 3857.0], [277.0, 4177.0], [276.0, 4128.0], [302.0, 3880.0], [303.0, 4098.0], [301.0, 4099.0], [300.0, 3968.0], [299.0, 4037.0], [298.0, 4129.0], [297.0, 4171.0], [296.0, 4146.0], [295.0, 4155.0], [289.0, 4033.0], [288.0, 4095.0], [291.0, 4125.0], [290.0, 3993.0], [294.0, 3979.0], [293.0, 4245.0], [292.0, 3974.0], [318.0, 4015.0], [319.0, 4169.0], [317.0, 4206.0], [316.0, 4216.0], [315.0, 4355.0], [314.0, 4224.0], [313.0, 4228.0], [312.0, 3998.0], [311.0, 4088.0], [305.0, 4228.0], [304.0, 4021.0], [307.0, 4486.0], [306.0, 4090.0], [310.0, 4051.0], [309.0, 4082.0], [308.0, 4202.0], [334.0, 4047.0], [335.0, 4240.0], [333.0, 4079.0], [332.0, 4020.0], [331.0, 4023.0], [330.0, 4211.0], [329.0, 4166.0], [328.0, 4199.0], [327.0, 4400.0], [321.0, 5168.0], [320.0, 4151.0], [323.0, 4016.0], [322.0, 4400.0], [326.0, 3866.0], [325.0, 4040.0], [324.0, 4095.0], [350.0, 4068.0], [351.0, 4018.0], [349.0, 4281.0], [348.0, 8933.0], [347.0, 4995.0], [346.0, 4052.0], [345.0, 4184.0], [344.0, 4081.0], [343.0, 4087.0], [337.0, 4163.0], [336.0, 3984.0], [339.0, 4111.0], [338.0, 4082.0], [342.0, 3930.0], [341.0, 4110.0], [340.0, 4059.0], [366.0, 4146.0], [367.0, 3925.0], [365.0, 4159.0], [364.0, 4456.0], [363.0, 4107.0], [362.0, 4133.0], [361.0, 4424.0], [359.0, 4462.0], [353.0, 3963.0], [352.0, 3982.0], [355.0, 4134.0], [354.0, 4181.0], [358.0, 4040.0], [357.0, 5827.0], [356.0, 5837.0], [382.0, 3851.0], [383.0, 4310.0], [381.0, 4126.0], [380.0, 4296.0], [379.0, 4146.0], [378.0, 4070.0], [377.0, 4107.0], [376.0, 3890.0], [375.0, 4259.0], [369.0, 4324.0], [368.0, 4051.0], [371.0, 4227.0], [370.0, 3983.0], [374.0, 4020.0], [373.0, 4201.0], [372.0, 4076.0], [398.0, 4004.0], [399.0, 3972.0], [397.0, 4129.0], [396.0, 4470.0], [395.0, 4083.0], [394.0, 4550.0], [393.0, 3841.0], [392.0, 8343.0], [391.0, 4281.0], [385.0, 4136.0], [384.0, 4122.0], [387.0, 4202.0], [386.0, 3952.0], [390.0, 4293.0], [389.0, 9102.0], [388.0, 4092.0], [414.0, 4100.0], [415.0, 4395.0], [413.0, 4218.0], [412.0, 3895.0], [411.0, 4114.0], [410.0, 4097.0], [409.0, 4128.0], [408.0, 4110.0], [407.0, 4248.0], [401.0, 4282.0], [400.0, 4077.0], [403.0, 4139.0], [402.0, 4199.0], [406.0, 3872.0], [405.0, 4097.0], [404.0, 4128.0], [430.0, 5488.0], [431.0, 4880.0], [429.0, 9760.0], [428.0, 3983.0], [427.0, 4140.0], [426.0, 4220.0], [425.0, 4233.0], [424.0, 4003.0], [423.0, 4189.0], [417.0, 4547.0], [416.0, 3985.0], [419.0, 5514.0], [418.0, 4127.0], [422.0, 4044.0], [421.0, 4299.0], [420.0, 4472.0], [446.0, 4207.5], [447.0, 4168.0], [444.0, 4134.0], [435.0, 4162.0], [434.0, 4179.0], [433.0, 4030.0], [432.0, 4185.0], [443.0, 4328.0], [442.0, 5390.0], [441.0, 3917.0], [440.0, 4142.0], [439.0, 3971.0], [438.0, 4199.0], [437.0, 4188.0], [436.0, 4788.0], [462.0, 4166.0], [463.0, 4106.0], [461.0, 4350.0], [460.0, 3969.0], [459.0, 4169.0], [458.0, 3926.0], [457.0, 3974.0], [456.0, 4139.0], [455.0, 4288.0], [449.0, 4173.0], [448.0, 4244.0], [451.0, 4214.0], [450.0, 3918.0], [454.0, 4026.0], [453.0, 4157.0], [452.0, 4086.0], [478.0, 4077.0], [479.0, 4146.0], [477.0, 4265.0], [476.0, 4454.0], [475.0, 4650.0], [474.0, 3924.0], [473.0, 4142.0], [472.0, 3998.0], [471.0, 4151.0], [465.0, 5206.0], [464.0, 3897.0], [467.0, 4099.0], [466.0, 3915.0], [470.0, 4092.0], [469.0, 4227.0], [468.0, 3932.0], [494.0, 4045.0], [495.0, 4460.0], [493.0, 4117.0], [492.0, 3916.0], [491.0, 4021.0], [490.0, 4092.0], [489.0, 4279.0], [488.0, 3985.0], [487.0, 4086.0], [481.0, 4144.0], [480.0, 3941.0], [483.0, 4089.0], [482.0, 3800.0], [486.0, 4185.0], [485.0, 4271.0], [484.0, 4026.0], [510.0, 4254.0], [511.0, 4544.0], [509.0, 4359.0], [508.0, 3942.0], [507.0, 4068.0], [506.0, 3992.0], [505.0, 4114.0], [504.0, 3972.0], [503.0, 4661.0], [497.0, 4260.0], [496.0, 4391.0], [499.0, 4162.0], [498.0, 4047.0], [502.0, 3836.0], [501.0, 4293.0], [500.0, 4083.0], [540.0, 4159.0], [543.0, 4135.0], [529.0, 4241.0], [528.0, 3895.0], [531.0, 4100.0], [530.0, 4018.0], [533.0, 4362.0], [532.0, 3874.0], [542.0, 4075.0], [541.0, 4289.0], [539.0, 4172.0], [538.0, 4025.0], [537.0, 4158.0], [536.0, 3916.0], [527.0, 4156.0], [513.0, 4181.0], [512.0, 5706.0], [515.0, 4085.0], [514.0, 3999.0], [517.0, 4062.0], [516.0, 4717.0], [519.0, 4289.0], [518.0, 4066.0], [526.0, 4101.0], [525.0, 4151.0], [524.0, 4063.0], [523.0, 4042.0], [522.0, 4374.0], [521.0, 4444.0], [520.0, 4242.0], [535.0, 4294.0], [534.0, 4289.0], [572.0, 4031.0], [575.0, 4379.0], [561.0, 4110.0], [560.0, 4054.0], [563.0, 4116.0], [562.0, 4050.0], [565.0, 9325.0], [564.0, 3915.0], [574.0, 4069.0], [573.0, 4142.0], [571.0, 4189.0], [570.0, 3966.0], [569.0, 4052.0], [568.0, 4009.0], [559.0, 4169.0], [545.0, 4129.0], [544.0, 3883.0], [547.0, 4182.0], [546.0, 3986.0], [549.0, 4096.0], [548.0, 3961.0], [551.0, 4141.0], [550.0, 3985.0], [558.0, 3968.0], [557.0, 4108.0], [556.0, 3953.0], [555.0, 4026.0], [554.0, 4162.0], [553.0, 4522.0], [552.0, 4070.0], [567.0, 4425.0], [566.0, 9051.0], [600.0, 4398.0], [595.0, 4118.0], [599.0, 4967.5], [597.0, 4726.0], [596.0, 4106.0], [594.0, 4070.0], [593.0, 4869.0], [592.0, 5328.0], [591.0, 5069.0], [577.0, 4247.0], [576.0, 3983.0], [579.0, 4220.0], [578.0, 3874.0], [581.0, 4675.0], [580.0, 4067.0], [583.0, 4016.0], [582.0, 9059.0], [590.0, 4094.0], [589.0, 4358.0], [588.0, 4489.0], [587.0, 3983.0], [586.0, 4207.0], [585.0, 3962.0], [584.0, 4669.0], [1.0, 4269.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[300.5066666666668, 4314.425000000001]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 600.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 436.0, "minX": 1.68431406E12, "maxY": 1381.3333333333333, "series": [{"data": [[1.6843143E12, 1370.3], [1.68431412E12, 1292.0333333333333], [1.68431424E12, 1381.3333333333333], [1.68431406E12, 534.65], [1.68431436E12, 824.2166666666667], [1.68431418E12, 1280.95]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.6843143E12, 1117.25], [1.68431412E12, 1053.6666666666667], [1.68431424E12, 1126.3333333333333], [1.68431406E12, 436.0], [1.68431436E12, 672.1666666666666], [1.68431418E12, 1044.5833333333333]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68431436E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 4167.931034482758, "minX": 1.68431406E12, "maxY": 4569.020833333333, "series": [{"data": [[1.6843143E12, 4254.983739837398], [1.68431412E12, 4167.931034482758], [1.68431424E12, 4281.185483870967], [1.68431406E12, 4569.020833333333], [1.68431436E12, 4427.783783783784], [1.68431418E12, 4382.4]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68431436E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 4167.784482758619, "minX": 1.68431406E12, "maxY": 4568.729166666667, "series": [{"data": [[1.6843143E12, 4254.837398373983], [1.68431412E12, 4167.784482758619], [1.68431424E12, 4281.088709677417], [1.68431406E12, 4568.729166666667], [1.68431436E12, 4427.635135135134], [1.68431418E12, 4382.278260869568]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68431436E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 58.62903225806453, "minX": 1.68431406E12, "maxY": 109.20833333333331, "series": [{"data": [[1.6843143E12, 58.959349593495936], [1.68431412E12, 59.543103448275865], [1.68431424E12, 58.62903225806453], [1.68431406E12, 109.20833333333331], [1.68431436E12, 60.52702702702704], [1.68431418E12, 60.33913043478259]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68431436E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 3778.0, "minX": 1.68431406E12, "maxY": 10791.0, "series": [{"data": [[1.6843143E12, 9468.0], [1.68431412E12, 5706.0], [1.68431424E12, 10699.0], [1.68431406E12, 9325.0], [1.68431436E12, 10791.0], [1.68431418E12, 9760.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.6843143E12, 4328.0], [1.68431412E12, 4379.1], [1.68431424E12, 4457.0], [1.68431406E12, 5094.900000000001], [1.68431436E12, 4563.0], [1.68431418E12, 4671.000000000001]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.6843143E12, 9398.880000000001], [1.68431412E12, 5652.28], [1.68431424E12, 10306.75], [1.68431406E12, 9325.0], [1.68431436E12, 10791.0], [1.68431418E12, 9654.720000000003]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.6843143E12, 5057.999999999999], [1.68431412E12, 4651.65], [1.68431424E12, 5600.25], [1.68431406E12, 9055.4], [1.68431436E12, 8460.25], [1.68431418E12, 5829.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.6843143E12, 3798.0], [1.68431412E12, 3800.0], [1.68431424E12, 3819.0], [1.68431406E12, 3874.0], [1.68431436E12, 3778.0], [1.68431418E12, 3841.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.6843143E12, 4101.0], [1.68431412E12, 4134.5], [1.68431424E12, 4110.0], [1.68431406E12, 4130.0], [1.68431436E12, 4137.5], [1.68431418E12, 4133.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68431436E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 4101.5, "minX": 1.0, "maxY": 4180.5, "series": [{"data": [[4.0, 4101.5], [1.0, 4180.5], [2.0, 4109.5], [9.0, 4159.0], [5.0, 4146.0], [3.0, 4129.0], [6.0, 4151.5], [7.0, 4145.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 9.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 4101.5, "minX": 1.0, "maxY": 4180.5, "series": [{"data": [[4.0, 4101.5], [1.0, 4180.5], [2.0, 4108.5], [9.0, 4159.0], [5.0, 4146.0], [3.0, 4128.0], [6.0, 4151.5], [7.0, 4145.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 9.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.9333333333333333, "minX": 1.68431406E12, "maxY": 2.1333333333333333, "series": [{"data": [[1.6843143E12, 2.1333333333333333], [1.68431412E12, 2.0], [1.68431424E12, 2.033333333333333], [1.68431406E12, 0.9333333333333333], [1.68431436E12, 1.0666666666666667], [1.68431418E12, 1.8333333333333333]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68431436E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.8, "minX": 1.68431406E12, "maxY": 2.066666666666667, "series": [{"data": [[1.6843143E12, 2.05], [1.68431412E12, 1.9333333333333333], [1.68431424E12, 2.066666666666667], [1.68431406E12, 0.8], [1.68431436E12, 1.2333333333333334], [1.68431418E12, 1.9166666666666667]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68431436E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.8, "minX": 1.68431406E12, "maxY": 2.066666666666667, "series": [{"data": [[1.6843143E12, 2.05], [1.68431412E12, 1.9333333333333333], [1.68431424E12, 2.066666666666667], [1.68431406E12, 0.8], [1.68431436E12, 1.2333333333333334], [1.68431418E12, 1.9166666666666667]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68431436E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.8, "minX": 1.68431406E12, "maxY": 2.066666666666667, "series": [{"data": [[1.6843143E12, 2.05], [1.68431412E12, 1.9333333333333333], [1.68431424E12, 2.066666666666667], [1.68431406E12, 0.8], [1.68431436E12, 1.2333333333333334], [1.68431418E12, 1.9166666666666667]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68431436E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

