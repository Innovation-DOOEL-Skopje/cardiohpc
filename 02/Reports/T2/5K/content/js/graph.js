/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 37.0, "minX": 0.0, "maxY": 16985.0, "series": [{"data": [[0.0, 37.0], [0.1, 42.0], [0.2, 269.0], [0.3, 1093.0], [0.4, 1094.0], [0.5, 1094.0], [0.6, 1095.0], [0.7, 1095.0], [0.8, 1095.0], [0.9, 1095.0], [1.0, 1096.0], [1.1, 1096.0], [1.2, 1096.0], [1.3, 1096.0], [1.4, 1096.0], [1.5, 1096.0], [1.6, 1096.0], [1.7, 1096.0], [1.8, 1097.0], [1.9, 1097.0], [2.0, 1097.0], [2.1, 1097.0], [2.2, 1097.0], [2.3, 1097.0], [2.4, 1097.0], [2.5, 1097.0], [2.6, 1097.0], [2.7, 1097.0], [2.8, 1097.0], [2.9, 1097.0], [3.0, 1097.0], [3.1, 1098.0], [3.2, 1098.0], [3.3, 1098.0], [3.4, 1098.0], [3.5, 1098.0], [3.6, 1098.0], [3.7, 1098.0], [3.8, 1098.0], [3.9, 1098.0], [4.0, 1098.0], [4.1, 1098.0], [4.2, 1098.0], [4.3, 1098.0], [4.4, 1098.0], [4.5, 1098.0], [4.6, 1098.0], [4.7, 1098.0], [4.8, 1098.0], [4.9, 1098.0], [5.0, 1099.0], [5.1, 1099.0], [5.2, 1099.0], [5.3, 1099.0], [5.4, 1099.0], [5.5, 1099.0], [5.6, 1099.0], [5.7, 1099.0], [5.8, 1099.0], [5.9, 1099.0], [6.0, 1099.0], [6.1, 1099.0], [6.2, 1099.0], [6.3, 1099.0], [6.4, 1099.0], [6.5, 1099.0], [6.6, 1099.0], [6.7, 1099.0], [6.8, 1099.0], [6.9, 1099.0], [7.0, 1099.0], [7.1, 1099.0], [7.2, 1099.0], [7.3, 1099.0], [7.4, 1099.0], [7.5, 1099.0], [7.6, 1099.0], [7.7, 1100.0], [7.8, 1100.0], [7.9, 1100.0], [8.0, 1100.0], [8.1, 1100.0], [8.2, 1100.0], [8.3, 1100.0], [8.4, 1100.0], [8.5, 1100.0], [8.6, 1100.0], [8.7, 1100.0], [8.8, 1100.0], [8.9, 1100.0], [9.0, 1100.0], [9.1, 1100.0], [9.2, 1100.0], [9.3, 1100.0], [9.4, 1100.0], [9.5, 1100.0], [9.6, 1100.0], [9.7, 1100.0], [9.8, 1100.0], [9.9, 1100.0], [10.0, 1100.0], [10.1, 1100.0], [10.2, 1100.0], [10.3, 1100.0], [10.4, 1100.0], [10.5, 1100.0], [10.6, 1100.0], [10.7, 1100.0], [10.8, 1100.0], [10.9, 1101.0], [11.0, 1101.0], [11.1, 1101.0], [11.2, 1101.0], [11.3, 1101.0], [11.4, 1101.0], [11.5, 1101.0], [11.6, 1101.0], [11.7, 1101.0], [11.8, 1101.0], [11.9, 1101.0], [12.0, 1101.0], [12.1, 1101.0], [12.2, 1101.0], [12.3, 1101.0], [12.4, 1101.0], [12.5, 1101.0], [12.6, 1101.0], [12.7, 1101.0], [12.8, 1101.0], [12.9, 1101.0], [13.0, 1101.0], [13.1, 1101.0], [13.2, 1101.0], [13.3, 1101.0], [13.4, 1101.0], [13.5, 1101.0], [13.6, 1101.0], [13.7, 1101.0], [13.8, 1101.0], [13.9, 1101.0], [14.0, 1101.0], [14.1, 1101.0], [14.2, 1101.0], [14.3, 1101.0], [14.4, 1101.0], [14.5, 1101.0], [14.6, 1101.0], [14.7, 1102.0], [14.8, 1102.0], [14.9, 1102.0], [15.0, 1102.0], [15.1, 1102.0], [15.2, 1102.0], [15.3, 1102.0], [15.4, 1102.0], [15.5, 1102.0], [15.6, 1102.0], [15.7, 1102.0], [15.8, 1102.0], [15.9, 1102.0], [16.0, 1102.0], [16.1, 1102.0], [16.2, 1102.0], [16.3, 1102.0], [16.4, 1102.0], [16.5, 1102.0], [16.6, 1102.0], [16.7, 1102.0], [16.8, 1102.0], [16.9, 1102.0], [17.0, 1102.0], [17.1, 1102.0], [17.2, 1102.0], [17.3, 1102.0], [17.4, 1102.0], [17.5, 1102.0], [17.6, 1102.0], [17.7, 1102.0], [17.8, 1102.0], [17.9, 1102.0], [18.0, 1102.0], [18.1, 1102.0], [18.2, 1102.0], [18.3, 1102.0], [18.4, 1102.0], [18.5, 1102.0], [18.6, 1102.0], [18.7, 1102.0], [18.8, 1102.0], [18.9, 1102.0], [19.0, 1103.0], [19.1, 1103.0], [19.2, 1103.0], [19.3, 1103.0], [19.4, 1103.0], [19.5, 1103.0], [19.6, 1103.0], [19.7, 1103.0], [19.8, 1103.0], [19.9, 1103.0], [20.0, 1103.0], [20.1, 1103.0], [20.2, 1103.0], [20.3, 1103.0], [20.4, 1103.0], [20.5, 1103.0], [20.6, 1103.0], [20.7, 1103.0], [20.8, 1103.0], [20.9, 1103.0], [21.0, 1103.0], [21.1, 1103.0], [21.2, 1103.0], [21.3, 1103.0], [21.4, 1103.0], [21.5, 1103.0], [21.6, 1103.0], [21.7, 1103.0], [21.8, 1103.0], [21.9, 1103.0], [22.0, 1103.0], [22.1, 1103.0], [22.2, 1103.0], [22.3, 1103.0], [22.4, 1103.0], [22.5, 1103.0], [22.6, 1103.0], [22.7, 1103.0], [22.8, 1103.0], [22.9, 1103.0], [23.0, 1103.0], [23.1, 1103.0], [23.2, 1103.0], [23.3, 1103.0], [23.4, 1104.0], [23.5, 1104.0], [23.6, 1104.0], [23.7, 1104.0], [23.8, 1104.0], [23.9, 1104.0], [24.0, 1104.0], [24.1, 1104.0], [24.2, 1104.0], [24.3, 1104.0], [24.4, 1104.0], [24.5, 1104.0], [24.6, 1104.0], [24.7, 1104.0], [24.8, 1104.0], [24.9, 1104.0], [25.0, 1104.0], [25.1, 1104.0], [25.2, 1104.0], [25.3, 1104.0], [25.4, 1104.0], [25.5, 1104.0], [25.6, 1104.0], [25.7, 1104.0], [25.8, 1104.0], [25.9, 1104.0], [26.0, 1104.0], [26.1, 1104.0], [26.2, 1104.0], [26.3, 1104.0], [26.4, 1104.0], [26.5, 1104.0], [26.6, 1104.0], [26.7, 1104.0], [26.8, 1104.0], [26.9, 1104.0], [27.0, 1104.0], [27.1, 1104.0], [27.2, 1104.0], [27.3, 1104.0], [27.4, 1104.0], [27.5, 1104.0], [27.6, 1104.0], [27.7, 1104.0], [27.8, 1105.0], [27.9, 1105.0], [28.0, 1105.0], [28.1, 1105.0], [28.2, 1105.0], [28.3, 1105.0], [28.4, 1105.0], [28.5, 1105.0], [28.6, 1105.0], [28.7, 1105.0], [28.8, 1105.0], [28.9, 1105.0], [29.0, 1105.0], [29.1, 1105.0], [29.2, 1105.0], [29.3, 1105.0], [29.4, 1105.0], [29.5, 1105.0], [29.6, 1105.0], [29.7, 1105.0], [29.8, 1105.0], [29.9, 1105.0], [30.0, 1105.0], [30.1, 1105.0], [30.2, 1105.0], [30.3, 1105.0], [30.4, 1105.0], [30.5, 1105.0], [30.6, 1105.0], [30.7, 1105.0], [30.8, 1105.0], [30.9, 1105.0], [31.0, 1105.0], [31.1, 1105.0], [31.2, 1105.0], [31.3, 1105.0], [31.4, 1105.0], [31.5, 1105.0], [31.6, 1105.0], [31.7, 1105.0], [31.8, 1105.0], [31.9, 1105.0], [32.0, 1105.0], [32.1, 1106.0], [32.2, 1106.0], [32.3, 1106.0], [32.4, 1106.0], [32.5, 1106.0], [32.6, 1106.0], [32.7, 1106.0], [32.8, 1106.0], [32.9, 1106.0], [33.0, 1106.0], [33.1, 1106.0], [33.2, 1106.0], [33.3, 1106.0], [33.4, 1106.0], [33.5, 1106.0], [33.6, 1106.0], [33.7, 1106.0], [33.8, 1106.0], [33.9, 1106.0], [34.0, 1106.0], [34.1, 1106.0], [34.2, 1106.0], [34.3, 1106.0], [34.4, 1106.0], [34.5, 1106.0], [34.6, 1106.0], [34.7, 1106.0], [34.8, 1106.0], [34.9, 1106.0], [35.0, 1106.0], [35.1, 1106.0], [35.2, 1106.0], [35.3, 1106.0], [35.4, 1106.0], [35.5, 1106.0], [35.6, 1106.0], [35.7, 1106.0], [35.8, 1106.0], [35.9, 1106.0], [36.0, 1106.0], [36.1, 1107.0], [36.2, 1107.0], [36.3, 1107.0], [36.4, 1107.0], [36.5, 1107.0], [36.6, 1107.0], [36.7, 1107.0], [36.8, 1107.0], [36.9, 1107.0], [37.0, 1107.0], [37.1, 1107.0], [37.2, 1107.0], [37.3, 1107.0], [37.4, 1107.0], [37.5, 1107.0], [37.6, 1107.0], [37.7, 1107.0], [37.8, 1107.0], [37.9, 1107.0], [38.0, 1107.0], [38.1, 1107.0], [38.2, 1107.0], [38.3, 1107.0], [38.4, 1107.0], [38.5, 1107.0], [38.6, 1107.0], [38.7, 1107.0], [38.8, 1107.0], [38.9, 1107.0], [39.0, 1107.0], [39.1, 1107.0], [39.2, 1107.0], [39.3, 1107.0], [39.4, 1107.0], [39.5, 1107.0], [39.6, 1107.0], [39.7, 1108.0], [39.8, 1108.0], [39.9, 1108.0], [40.0, 1108.0], [40.1, 1108.0], [40.2, 1108.0], [40.3, 1108.0], [40.4, 1108.0], [40.5, 1108.0], [40.6, 1108.0], [40.7, 1108.0], [40.8, 1108.0], [40.9, 1108.0], [41.0, 1108.0], [41.1, 1108.0], [41.2, 1108.0], [41.3, 1108.0], [41.4, 1108.0], [41.5, 1108.0], [41.6, 1108.0], [41.7, 1108.0], [41.8, 1108.0], [41.9, 1108.0], [42.0, 1108.0], [42.1, 1108.0], [42.2, 1108.0], [42.3, 1108.0], [42.4, 1108.0], [42.5, 1108.0], [42.6, 1108.0], [42.7, 1108.0], [42.8, 1108.0], [42.9, 1108.0], [43.0, 1109.0], [43.1, 1109.0], [43.2, 1109.0], [43.3, 1109.0], [43.4, 1109.0], [43.5, 1109.0], [43.6, 1109.0], [43.7, 1109.0], [43.8, 1109.0], [43.9, 1109.0], [44.0, 1109.0], [44.1, 1109.0], [44.2, 1109.0], [44.3, 1109.0], [44.4, 1109.0], [44.5, 1109.0], [44.6, 1109.0], [44.7, 1109.0], [44.8, 1109.0], [44.9, 1109.0], [45.0, 1109.0], [45.1, 1109.0], [45.2, 1109.0], [45.3, 1109.0], [45.4, 1109.0], [45.5, 1109.0], [45.6, 1109.0], [45.7, 1109.0], [45.8, 1109.0], [45.9, 1110.0], [46.0, 1110.0], [46.1, 1110.0], [46.2, 1110.0], [46.3, 1110.0], [46.4, 1110.0], [46.5, 1110.0], [46.6, 1110.0], [46.7, 1110.0], [46.8, 1110.0], [46.9, 1110.0], [47.0, 1110.0], [47.1, 1110.0], [47.2, 1110.0], [47.3, 1110.0], [47.4, 1110.0], [47.5, 1110.0], [47.6, 1110.0], [47.7, 1110.0], [47.8, 1110.0], [47.9, 1110.0], [48.0, 1110.0], [48.1, 1110.0], [48.2, 1110.0], [48.3, 1110.0], [48.4, 1110.0], [48.5, 1111.0], [48.6, 1111.0], [48.7, 1111.0], [48.8, 1111.0], [48.9, 1111.0], [49.0, 1111.0], [49.1, 1111.0], [49.2, 1111.0], [49.3, 1111.0], [49.4, 1111.0], [49.5, 1111.0], [49.6, 1111.0], [49.7, 1111.0], [49.8, 1111.0], [49.9, 1111.0], [50.0, 1111.0], [50.1, 1111.0], [50.2, 1111.0], [50.3, 1111.0], [50.4, 1111.0], [50.5, 1111.0], [50.6, 1112.0], [50.7, 1112.0], [50.8, 1112.0], [50.9, 1112.0], [51.0, 1112.0], [51.1, 1112.0], [51.2, 1112.0], [51.3, 1112.0], [51.4, 1112.0], [51.5, 1112.0], [51.6, 1112.0], [51.7, 1112.0], [51.8, 1112.0], [51.9, 1112.0], [52.0, 1112.0], [52.1, 1112.0], [52.2, 1112.0], [52.3, 1112.0], [52.4, 1112.0], [52.5, 1113.0], [52.6, 1113.0], [52.7, 1113.0], [52.8, 1113.0], [52.9, 1113.0], [53.0, 1113.0], [53.1, 1113.0], [53.2, 1113.0], [53.3, 1113.0], [53.4, 1113.0], [53.5, 1113.0], [53.6, 1113.0], [53.7, 1113.0], [53.8, 1113.0], [53.9, 1113.0], [54.0, 1113.0], [54.1, 1113.0], [54.2, 1113.0], [54.3, 1114.0], [54.4, 1114.0], [54.5, 1114.0], [54.6, 1114.0], [54.7, 1114.0], [54.8, 1114.0], [54.9, 1114.0], [55.0, 1114.0], [55.1, 1114.0], [55.2, 1114.0], [55.3, 1114.0], [55.4, 1114.0], [55.5, 1114.0], [55.6, 1114.0], [55.7, 1115.0], [55.8, 1115.0], [55.9, 1115.0], [56.0, 1115.0], [56.1, 1115.0], [56.2, 1115.0], [56.3, 1115.0], [56.4, 1115.0], [56.5, 1115.0], [56.6, 1115.0], [56.7, 1115.0], [56.8, 1115.0], [56.9, 1115.0], [57.0, 1116.0], [57.1, 1116.0], [57.2, 1116.0], [57.3, 1116.0], [57.4, 1116.0], [57.5, 1116.0], [57.6, 1116.0], [57.7, 1116.0], [57.8, 1116.0], [57.9, 1116.0], [58.0, 1116.0], [58.1, 1116.0], [58.2, 1117.0], [58.3, 1117.0], [58.4, 1117.0], [58.5, 1117.0], [58.6, 1117.0], [58.7, 1117.0], [58.8, 1117.0], [58.9, 1117.0], [59.0, 1117.0], [59.1, 1117.0], [59.2, 1118.0], [59.3, 1118.0], [59.4, 1118.0], [59.5, 1118.0], [59.6, 1118.0], [59.7, 1118.0], [59.8, 1118.0], [59.9, 1118.0], [60.0, 1119.0], [60.1, 1119.0], [60.2, 1119.0], [60.3, 1119.0], [60.4, 1119.0], [60.5, 1119.0], [60.6, 1119.0], [60.7, 1119.0], [60.8, 1120.0], [60.9, 1120.0], [61.0, 1120.0], [61.1, 1120.0], [61.2, 1120.0], [61.3, 1120.0], [61.4, 1120.0], [61.5, 1120.0], [61.6, 1121.0], [61.7, 1121.0], [61.8, 1121.0], [61.9, 1121.0], [62.0, 1121.0], [62.1, 1121.0], [62.2, 1121.0], [62.3, 1122.0], [62.4, 1122.0], [62.5, 1122.0], [62.6, 1122.0], [62.7, 1122.0], [62.8, 1122.0], [62.9, 1123.0], [63.0, 1123.0], [63.1, 1123.0], [63.2, 1123.0], [63.3, 1123.0], [63.4, 1124.0], [63.5, 1124.0], [63.6, 1124.0], [63.7, 1124.0], [63.8, 1124.0], [63.9, 1125.0], [64.0, 1125.0], [64.1, 1125.0], [64.2, 1125.0], [64.3, 1125.0], [64.4, 1126.0], [64.5, 1126.0], [64.6, 1126.0], [64.7, 1126.0], [64.8, 1126.0], [64.9, 1127.0], [65.0, 1127.0], [65.1, 1127.0], [65.2, 1128.0], [65.3, 1128.0], [65.4, 1128.0], [65.5, 1128.0], [65.6, 1129.0], [65.7, 1129.0], [65.8, 1129.0], [65.9, 1129.0], [66.0, 1130.0], [66.1, 1130.0], [66.2, 1130.0], [66.3, 1131.0], [66.4, 1131.0], [66.5, 1132.0], [66.6, 1132.0], [66.7, 1132.0], [66.8, 1133.0], [66.9, 1133.0], [67.0, 1134.0], [67.1, 1134.0], [67.2, 1134.0], [67.3, 1135.0], [67.4, 1135.0], [67.5, 1136.0], [67.6, 1136.0], [67.7, 1137.0], [67.8, 1137.0], [67.9, 1138.0], [68.0, 1139.0], [68.1, 1139.0], [68.2, 1140.0], [68.3, 1140.0], [68.4, 1141.0], [68.5, 1141.0], [68.6, 1142.0], [68.7, 1143.0], [68.8, 1144.0], [68.9, 1144.0], [69.0, 1145.0], [69.1, 1146.0], [69.2, 1147.0], [69.3, 1147.0], [69.4, 1148.0], [69.5, 1149.0], [69.6, 1150.0], [69.7, 1151.0], [69.8, 1151.0], [69.9, 1152.0], [70.0, 1153.0], [70.1, 1154.0], [70.2, 1155.0], [70.3, 1156.0], [70.4, 1157.0], [70.5, 1159.0], [70.6, 1160.0], [70.7, 1161.0], [70.8, 1163.0], [70.9, 1164.0], [71.0, 1165.0], [71.1, 1167.0], [71.2, 1168.0], [71.3, 1169.0], [71.4, 1171.0], [71.5, 1172.0], [71.6, 1174.0], [71.7, 1176.0], [71.8, 1178.0], [71.9, 1180.0], [72.0, 1182.0], [72.1, 1184.0], [72.2, 1186.0], [72.3, 1188.0], [72.4, 1190.0], [72.5, 1192.0], [72.6, 1194.0], [72.7, 1196.0], [72.8, 1198.0], [72.9, 1200.0], [73.0, 1201.0], [73.1, 1204.0], [73.2, 1206.0], [73.3, 1208.0], [73.4, 1210.0], [73.5, 1212.0], [73.6, 1214.0], [73.7, 1215.0], [73.8, 1217.0], [73.9, 1219.0], [74.0, 1222.0], [74.1, 1225.0], [74.2, 1229.0], [74.3, 1232.0], [74.4, 1235.0], [74.5, 1239.0], [74.6, 1242.0], [74.7, 1244.0], [74.8, 1247.0], [74.9, 1250.0], [75.0, 1254.0], [75.1, 1258.0], [75.2, 1262.0], [75.3, 1266.0], [75.4, 1269.0], [75.5, 1273.0], [75.6, 1277.0], [75.7, 1281.0], [75.8, 1286.0], [75.9, 1288.0], [76.0, 1290.0], [76.1, 1293.0], [76.2, 1299.0], [76.3, 1304.0], [76.4, 1307.0], [76.5, 1311.0], [76.6, 1314.0], [76.7, 1318.0], [76.8, 1322.0], [76.9, 1326.0], [77.0, 1331.0], [77.1, 1335.0], [77.2, 1340.0], [77.3, 1344.0], [77.4, 1348.0], [77.5, 1353.0], [77.6, 1358.0], [77.7, 1363.0], [77.8, 1367.0], [77.9, 1371.0], [78.0, 1376.0], [78.1, 1381.0], [78.2, 1385.0], [78.3, 1387.0], [78.4, 1390.0], [78.5, 1393.0], [78.6, 1395.0], [78.7, 1399.0], [78.8, 1403.0], [78.9, 1406.0], [79.0, 1410.0], [79.1, 1414.0], [79.2, 1419.0], [79.3, 1423.0], [79.4, 1427.0], [79.5, 1432.0], [79.6, 1436.0], [79.7, 1439.0], [79.8, 1443.0], [79.9, 1447.0], [80.0, 1450.0], [80.1, 1454.0], [80.2, 1458.0], [80.3, 1461.0], [80.4, 1465.0], [80.5, 1468.0], [80.6, 1472.0], [80.7, 1475.0], [80.8, 1478.0], [80.9, 1482.0], [81.0, 1486.0], [81.1, 1489.0], [81.2, 1493.0], [81.3, 1497.0], [81.4, 1501.0], [81.5, 1504.0], [81.6, 1509.0], [81.7, 1512.0], [81.8, 1516.0], [81.9, 1521.0], [82.0, 1525.0], [82.1, 1529.0], [82.2, 1534.0], [82.3, 1538.0], [82.4, 1544.0], [82.5, 1550.0], [82.6, 1555.0], [82.7, 1561.0], [82.8, 1567.0], [82.9, 1572.0], [83.0, 1578.0], [83.1, 1583.0], [83.2, 1590.0], [83.3, 1596.0], [83.4, 1602.0], [83.5, 1607.0], [83.6, 1613.0], [83.7, 1617.0], [83.8, 1621.0], [83.9, 1625.0], [84.0, 1628.0], [84.1, 1632.0], [84.2, 1635.0], [84.3, 1637.0], [84.4, 1640.0], [84.5, 1642.0], [84.6, 1645.0], [84.7, 1648.0], [84.8, 1651.0], [84.9, 1654.0], [85.0, 1657.0], [85.1, 1660.0], [85.2, 1664.0], [85.3, 1666.0], [85.4, 1669.0], [85.5, 1672.0], [85.6, 1675.0], [85.7, 1679.0], [85.8, 1683.0], [85.9, 1687.0], [86.0, 1692.0], [86.1, 1697.0], [86.2, 1702.0], [86.3, 1706.0], [86.4, 1711.0], [86.5, 1714.0], [86.6, 1717.0], [86.7, 1720.0], [86.8, 1723.0], [86.9, 1728.0], [87.0, 1731.0], [87.1, 1736.0], [87.2, 1740.0], [87.3, 1745.0], [87.4, 1750.0], [87.5, 1755.0], [87.6, 1759.0], [87.7, 1766.0], [87.8, 1772.0], [87.9, 1776.0], [88.0, 1782.0], [88.1, 1789.0], [88.2, 1795.0], [88.3, 1803.0], [88.4, 1810.0], [88.5, 1814.0], [88.6, 1820.0], [88.7, 1826.0], [88.8, 1832.0], [88.9, 1837.0], [89.0, 1843.0], [89.1, 1848.0], [89.2, 1855.0], [89.3, 1861.0], [89.4, 1867.0], [89.5, 1876.0], [89.6, 1882.0], [89.7, 1892.0], [89.8, 1903.0], [89.9, 1910.0], [90.0, 1920.0], [90.1, 1929.0], [90.2, 1939.0], [90.3, 1947.0], [90.4, 1955.0], [90.5, 1962.0], [90.6, 1969.0], [90.7, 1980.0], [90.8, 1996.0], [90.9, 2011.0], [91.0, 2022.0], [91.1, 2033.0], [91.2, 2048.0], [91.3, 2060.0], [91.4, 2074.0], [91.5, 2083.0], [91.6, 2092.0], [91.7, 2102.0], [91.8, 2123.0], [91.9, 2143.0], [92.0, 2176.0], [92.1, 2214.0], [92.2, 2256.0], [92.3, 2296.0], [92.4, 2336.0], [92.5, 2368.0], [92.6, 2409.0], [92.7, 2448.0], [92.8, 2490.0], [92.9, 2526.0], [93.0, 2548.0], [93.1, 2580.0], [93.2, 2631.0], [93.3, 2673.0], [93.4, 2694.0], [93.5, 2718.0], [93.6, 2762.0], [93.7, 2812.0], [93.8, 2844.0], [93.9, 2911.0], [94.0, 2934.0], [94.1, 2969.0], [94.2, 3003.0], [94.3, 3055.0], [94.4, 3100.0], [94.5, 3152.0], [94.6, 3212.0], [94.7, 3239.0], [94.8, 3292.0], [94.9, 3344.0], [95.0, 3375.0], [95.1, 3425.0], [95.2, 3478.0], [95.3, 3537.0], [95.4, 3601.0], [95.5, 3636.0], [95.6, 3712.0], [95.7, 3751.0], [95.8, 3790.0], [95.9, 3831.0], [96.0, 3914.0], [96.1, 3981.0], [96.2, 4091.0], [96.3, 4158.0], [96.4, 4209.0], [96.5, 4287.0], [96.6, 4360.0], [96.7, 4398.0], [96.8, 4465.0], [96.9, 4575.0], [97.0, 4722.0], [97.1, 4846.0], [97.2, 4973.0], [97.3, 5058.0], [97.4, 5145.0], [97.5, 5249.0], [97.6, 5332.0], [97.7, 5375.0], [97.8, 5435.0], [97.9, 5493.0], [98.0, 5559.0], [98.1, 5651.0], [98.2, 5733.0], [98.3, 5855.0], [98.4, 5924.0], [98.5, 6001.0], [98.6, 6102.0], [98.7, 6194.0], [98.8, 6298.0], [98.9, 6346.0], [99.0, 6392.0], [99.1, 6438.0], [99.2, 6485.0], [99.3, 6621.0], [99.4, 6830.0], [99.5, 7025.0], [99.6, 7235.0], [99.7, 7445.0], [99.8, 7639.0], [99.9, 7981.0], [100.0, 16985.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 65530.0, "series": [{"data": [[0.0, 198.0], [100.0, 1.0], [200.0, 2.0], [500.0, 1.0], [600.0, 1.0], [700.0, 3.0], [1000.0, 7467.0], [1100.0, 65530.0], [1200.0, 3363.0], [1300.0, 2511.0], [1400.0, 2652.0], [1500.0, 2017.0], [1600.0, 2791.0], [1700.0, 2123.0], [1800.0, 1513.0], [1900.0, 1059.0], [2000.0, 859.0], [2100.0, 382.0], [2200.0, 255.0], [2300.0, 265.0], [2400.0, 246.0], [2500.0, 307.0], [2600.0, 315.0], [2700.0, 246.0], [2800.0, 188.0], [2900.0, 321.0], [3000.0, 209.0], [3100.0, 180.0], [3200.0, 232.0], [3300.0, 240.0], [3400.0, 188.0], [3500.0, 159.0], [3700.0, 234.0], [3600.0, 199.0], [3800.0, 163.0], [3900.0, 144.0], [4000.0, 80.0], [4100.0, 171.0], [4200.0, 149.0], [4300.0, 180.0], [4500.0, 83.0], [4400.0, 127.0], [4600.0, 71.0], [4700.0, 66.0], [4800.0, 90.0], [5100.0, 101.0], [5000.0, 131.0], [4900.0, 83.0], [5200.0, 93.0], [5300.0, 169.0], [5400.0, 197.0], [5600.0, 93.0], [5500.0, 144.0], [5800.0, 116.0], [5700.0, 100.0], [5900.0, 137.0], [6100.0, 109.0], [6000.0, 99.0], [6200.0, 95.0], [6300.0, 217.0], [6400.0, 203.0], [6500.0, 76.0], [6600.0, 50.0], [6800.0, 37.0], [6700.0, 39.0], [6900.0, 63.0], [7000.0, 44.0], [7100.0, 44.0], [7200.0, 76.0], [7300.0, 38.0], [7400.0, 31.0], [7500.0, 66.0], [7600.0, 39.0], [7700.0, 40.0], [7800.0, 23.0], [7900.0, 21.0], [8000.0, 14.0], [8100.0, 10.0], [8600.0, 10.0], [8200.0, 6.0], [8300.0, 7.0], [8400.0, 4.0], [8500.0, 6.0], [8700.0, 3.0], [8800.0, 5.0], [9200.0, 2.0], [9000.0, 2.0], [9100.0, 2.0], [8900.0, 4.0], [9400.0, 1.0], [9500.0, 1.0], [9300.0, 4.0], [9600.0, 1.0], [10100.0, 1.0], [9800.0, 2.0], [10200.0, 1.0], [9900.0, 1.0], [10500.0, 1.0], [11000.0, 1.0], [11100.0, 1.0], [12000.0, 1.0], [12100.0, 1.0], [12700.0, 1.0], [13800.0, 1.0], [14200.0, 1.0], [14500.0, 1.0], [16900.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 16900.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 248.0, "minX": 1.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 81547.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 81547.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 18657.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 248.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1859.2516556291423, "minX": 1.68416772E12, "maxY": 3000.0, "series": [{"data": [[1.68416778E12, 3000.0], [1.68416796E12, 3000.0], [1.68416802E12, 1859.2516556291423], [1.68416784E12, 3000.0], [1.6841679E12, 3000.0], [1.68416772E12, 3000.0]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68416802E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 40.0, "minX": 1.0, "maxY": 6004.0, "series": [{"data": [[2.0, 5055.0], [3.0, 4977.0], [4.0, 5964.0], [5.0, 5930.0], [6.0, 5771.0], [7.0, 5850.0], [8.0, 5671.0], [9.0, 5630.0], [10.0, 5650.0], [11.0, 5534.0], [12.0, 1438.0], [13.0, 5281.0], [14.0, 5141.0], [15.0, 5160.0], [16.0, 5058.0], [17.0, 5094.0], [18.0, 5141.0], [19.0, 5109.0], [20.0, 5104.0], [21.0, 1141.0], [22.0, 1141.0], [23.0, 4982.0], [24.0, 1126.0], [25.0, 1124.0], [26.0, 1118.0], [28.0, 1115.5], [29.0, 1127.0], [30.0, 1113.0], [32.0, 3077.0], [34.0, 1111.5], [37.0, 1108.0], [36.0, 1111.5], [39.0, 1112.0], [38.0, 1148.0], [41.0, 1108.0], [43.0, 1106.0], [42.0, 1115.5], [45.0, 1107.5], [47.0, 1104.5], [48.0, 1107.0], [51.0, 1100.0], [50.0, 1105.0], [52.0, 1104.0], [55.0, 1113.0], [54.0, 1111.0], [61.0, 1096.0], [60.0, 1104.2], [62.0, 1114.0], [67.0, 1107.0], [66.0, 1104.75], [70.0, 1116.5], [68.0, 1110.0], [74.0, 1100.0], [72.0, 1102.0], [79.0, 1107.0], [83.0, 1105.0], [87.0, 1125.0], [86.0, 1111.2], [91.0, 1113.0], [95.0, 1107.0], [92.0, 1106.6666666666667], [99.0, 1101.0], [102.0, 1096.0], [101.0, 1112.0], [100.0, 1103.0], [106.0, 1104.0], [105.0, 1100.0], [104.0, 1122.5], [111.0, 1103.5], [110.0, 1097.0], [108.0, 1111.0], [113.0, 1109.0], [119.0, 1109.0], [118.0, 1104.0], [117.0, 1104.3333333333333], [123.0, 1102.0], [122.0, 1101.0], [121.0, 1108.0], [120.0, 1109.0], [125.0, 1103.0], [124.0, 1102.0], [135.0, 1111.5], [134.0, 1118.0], [133.0, 1104.5], [131.0, 1100.5], [129.0, 1103.0], [128.0, 1095.0], [142.0, 1109.5], [138.0, 1130.0], [137.0, 1103.5], [148.0, 1101.0], [147.0, 1105.5], [145.0, 1111.0], [159.0, 5060.0], [158.0, 1101.0], [156.0, 1105.25], [155.0, 1103.0], [154.0, 1111.0], [164.0, 1108.5], [162.0, 1108.0], [160.0, 1102.0], [174.0, 1103.0], [171.0, 1110.0], [170.0, 1103.0], [169.0, 1115.0], [168.0, 1105.3333333333333], [183.0, 1105.0], [182.0, 1105.0], [181.0, 1109.5], [180.0, 1104.0], [178.0, 1103.5], [176.0, 1106.3333333333333], [190.0, 1108.0], [189.0, 1114.0], [185.0, 1100.5], [198.0, 1104.0], [197.0, 1106.0], [196.0, 1099.0], [194.0, 1098.5], [192.0, 1102.5], [207.0, 1102.5], [205.0, 1111.5], [204.0, 1103.0], [202.0, 1094.0], [200.0, 1116.0], [215.0, 1104.0], [214.0, 1113.0], [213.0, 3071.5], [212.0, 1106.0], [211.0, 1115.0], [210.0, 1101.0], [209.0, 1106.0], [222.0, 1107.0], [220.0, 1102.0], [218.0, 1104.0], [231.0, 1108.0], [229.0, 1095.0], [228.0, 1106.0], [227.0, 1107.3333333333333], [226.0, 1114.5], [224.0, 1103.0], [239.0, 1105.0], [237.0, 1098.0], [235.0, 1106.5], [233.0, 1102.0], [247.0, 1100.0], [245.0, 1107.0], [244.0, 1098.0], [243.0, 1101.5], [241.0, 1109.0], [240.0, 1109.0], [254.0, 1108.0], [253.0, 1101.0], [252.0, 1103.5], [250.0, 1100.0], [249.0, 1102.0], [248.0, 1097.0], [270.0, 1100.0], [268.0, 1097.0], [265.0, 1103.5], [264.0, 1101.5], [263.0, 1104.0], [261.0, 1101.0], [259.0, 1099.0], [257.0, 1105.3333333333333], [286.0, 2911.0], [287.0, 1234.0], [285.0, 1333.0], [284.0, 1343.0], [283.0, 1330.0], [282.0, 1405.0], [281.0, 1372.0], [280.0, 2064.0], [279.0, 5002.0], [273.0, 1100.0], [272.0, 1100.0], [275.0, 1098.0], [274.0, 1098.0], [278.0, 4876.0], [277.0, 4884.0], [276.0, 5000.0], [291.0, 1140.0], [302.0, 1107.0], [300.0, 1112.0], [299.0, 1122.0], [298.0, 1108.5], [297.0, 1112.0], [295.0, 1121.5], [293.0, 1125.0], [292.0, 1117.0], [290.0, 1139.0], [289.0, 1132.0], [288.0, 1202.0], [319.0, 1108.0], [318.0, 1105.0], [315.0, 1107.0], [314.0, 1107.0], [313.0, 1113.0], [311.0, 1108.0], [309.0, 1115.0], [308.0, 1105.5], [305.0, 1105.0], [304.0, 1111.0], [323.0, 1104.0], [334.0, 1113.0], [335.0, 1111.0], [333.0, 1110.5], [329.0, 1104.0], [328.0, 1106.0], [327.0, 1101.0], [326.0, 1099.0], [325.0, 1102.5], [322.0, 1127.0], [321.0, 1119.0], [320.0, 1114.0], [349.0, 1104.0], [351.0, 1113.0], [348.0, 1130.5], [346.0, 1125.0], [345.0, 1107.0], [343.0, 1099.0], [342.0, 1105.0], [340.0, 1101.0], [339.0, 1111.0], [338.0, 1103.3333333333333], [355.0, 1103.0], [366.0, 1106.0], [365.0, 1107.3333333333333], [363.0, 1147.0], [361.0, 1104.3333333333333], [359.0, 1102.0], [357.0, 1111.0], [356.0, 1109.0], [354.0, 1114.5], [352.0, 1109.0], [371.0, 1106.0], [381.0, 1104.0], [382.0, 1102.0], [380.0, 1102.0], [379.0, 1107.5], [377.0, 1112.5], [375.0, 1099.0], [374.0, 1107.5], [372.0, 1102.0], [370.0, 1105.5], [368.0, 1107.0], [398.0, 1103.0], [399.0, 1104.5], [396.0, 1104.0], [394.0, 1110.0], [393.0, 1106.0], [391.0, 1101.0], [390.0, 1100.6666666666667], [389.0, 1107.6666666666667], [384.0, 1104.0], [415.0, 1106.0], [409.0, 1113.5], [408.0, 1107.0], [407.0, 1132.0], [405.0, 1101.0], [404.0, 1112.0], [402.0, 1101.0], [401.0, 1114.0], [430.0, 1117.0], [426.0, 1113.3333333333333], [423.0, 1107.0], [422.0, 1105.0], [420.0, 1099.0], [417.0, 1106.0], [442.0, 1103.0], [434.0, 1106.0], [463.0, 1102.0], [459.0, 1102.0], [452.0, 1101.0], [449.0, 1108.0], [448.0, 1101.0], [478.0, 1103.3333333333333], [477.0, 1108.0], [475.0, 1107.0], [473.0, 1101.5], [472.0, 1106.0], [469.0, 1105.0], [467.0, 1106.5], [464.0, 1114.0], [493.0, 1116.0], [491.0, 1100.5], [489.0, 1111.0], [488.0, 1113.0], [487.0, 1112.5], [484.0, 1105.0], [482.0, 1103.5], [480.0, 1103.0], [511.0, 1122.0], [510.0, 1115.0], [509.0, 1113.0], [506.0, 1110.0], [504.0, 1107.75], [502.0, 1111.3636363636365], [500.0, 1113.0], [496.0, 1106.0], [540.0, 1126.0], [542.0, 1119.0], [532.0, 1125.3333333333333], [530.0, 1108.0], [538.0, 1115.0], [536.0, 1123.5], [518.0, 1113.0], [514.0, 1114.3333333333333], [512.0, 1109.0], [526.0, 1111.0], [522.0, 1115.3333333333333], [534.0, 1113.3333333333333], [568.0, 1114.0], [572.0, 1111.5], [574.0, 1107.5], [570.0, 1110.0], [544.0, 1108.0], [548.0, 1111.0], [550.0, 1115.2727272727273], [554.0, 1115.0], [552.0, 1113.0], [566.0, 1120.0], [564.0, 1111.0], [562.0, 1109.0], [606.0, 1107.5], [594.0, 1102.0], [578.0, 1106.0], [580.0, 1109.0], [582.0, 1113.0], [588.0, 1103.0], [598.0, 1103.0], [596.0, 1108.2222222222222], [632.0, 1111.0], [636.0, 1106.0], [638.0, 1106.0], [624.0, 1133.0], [626.0, 1124.0], [634.0, 1108.0], [610.0, 1105.0], [612.0, 1098.0], [614.0, 1633.0], [622.0, 1139.0], [618.0, 1298.0], [616.0, 2524.0], [630.0, 1116.0], [628.0, 1118.0], [668.0, 1110.0], [656.0, 1110.0], [658.0, 1114.0], [670.0, 1101.0], [666.0, 1116.0], [664.0, 1124.0], [644.0, 1110.0], [642.0, 1122.0], [646.0, 1112.3333333333333], [654.0, 1115.0], [652.0, 1114.5], [662.0, 1102.0], [696.0, 1104.0], [700.0, 1102.0], [676.0, 1109.6666666666667], [686.0, 1108.3333333333333], [682.0, 1112.0], [680.0, 1102.0], [694.0, 1125.0], [692.0, 1119.75], [728.0, 1107.0], [720.0, 1135.0], [732.0, 1107.5], [730.0, 1111.0], [704.0, 1106.5], [708.0, 1120.0], [710.0, 1144.0], [716.0, 1106.0], [712.0, 1107.0], [724.0, 1103.5], [722.0, 1119.0], [742.0, 1108.0], [752.0, 1109.0], [748.0, 1122.0], [796.0, 1105.5], [784.0, 1128.0], [830.0, 1114.0], [822.0, 1107.5], [814.0, 1109.0], [800.0, 1106.5], [812.0, 1107.0], [804.0, 1106.0], [802.0, 1099.0], [862.0, 1111.0], [860.0, 1109.0], [858.0, 1104.5], [852.0, 1103.0], [836.0, 1124.0], [842.0, 1116.0], [868.0, 1102.25], [892.0, 1104.2857142857142], [894.0, 1107.0], [870.0, 1108.0], [866.0, 1120.0], [884.0, 1109.5], [880.0, 1102.0], [876.0, 1109.0], [874.0, 1101.0], [872.0, 1106.5], [920.0, 1107.5], [914.0, 1103.0], [896.0, 1106.0], [902.0, 1104.6666666666667], [900.0, 1102.6666666666667], [906.0, 1109.5], [904.0, 1110.4], [918.0, 1114.5], [916.0, 1110.0], [912.0, 1286.6], [954.0, 1100.5], [948.0, 1113.0], [958.0, 1979.0], [944.0, 1253.1666666666667], [952.0, 1105.0], [934.0, 1112.0], [932.0, 1111.75], [930.0, 1329.681818181818], [928.0, 1299.9], [940.0, 1103.5], [938.0, 1107.0], [936.0, 1112.0], [950.0, 1105.0], [988.0, 1926.5], [984.0, 1941.0], [976.0, 2035.5], [974.0, 1959.5], [960.0, 1562.0], [964.0, 2026.0], [966.0, 1989.0], [972.0, 1945.6666666666667], [968.0, 1951.0], [982.0, 1917.0], [980.0, 1935.0], [1018.0, 1944.3333333333333], [1022.0, 1903.0], [998.0, 1946.0], [994.0, 1906.0], [992.0, 1909.0], [1014.0, 1927.0], [1012.0, 1904.0], [1008.0, 1934.0], [1006.0, 1914.0], [1004.0, 1930.0], [1002.0, 1966.0], [1076.0, 5960.0], [1084.0, 1527.0], [1056.0, 1917.3333333333333], [1064.0, 1880.0], [1072.0, 5994.0], [1036.0, 1928.0], [1032.0, 1925.0], [1024.0, 1909.0], [1044.0, 1914.0], [1040.0, 1907.3333333333333], [1068.0, 1819.0], [1096.0, 1532.0], [1124.0, 1632.0], [1144.0, 1503.0], [1136.0, 1523.5], [1092.0, 1561.0], [1088.0, 1592.0], [1128.0, 1507.0], [1116.0, 1607.0], [1112.0, 1530.0], [1108.0, 1528.0], [1104.0, 1524.0], [1152.0, 1535.0], [1188.0, 1619.0], [1204.0, 1540.5], [1200.0, 1519.0], [1180.0, 1539.0], [1176.0, 1507.0], [1172.0, 1495.0], [1168.0, 1613.0], [1196.0, 1619.0], [1272.0, 1445.0], [1252.0, 1487.5], [1276.0, 1564.0], [1248.0, 1436.5], [1268.0, 1553.0], [1228.0, 1544.5], [1220.0, 1511.0], [1216.0, 1528.0], [1244.0, 1501.0], [1240.0, 1479.0], [1236.0, 1512.0], [1232.0, 1524.0], [1260.0, 1561.0], [1256.0, 1549.0], [1328.0, 1114.0], [1336.0, 1112.0], [1312.0, 1547.0], [1316.0, 1309.0], [1340.0, 1134.0], [1332.0, 1110.0], [1284.0, 1560.0], [1288.0, 1496.5], [1292.0, 1519.5], [1304.0, 1402.0], [1300.0, 1526.0], [1296.0, 1452.0], [1320.0, 1135.0], [1400.0, 1105.0], [1404.0, 1117.0], [1376.0, 1108.0], [1380.0, 1119.0], [1384.0, 1104.0], [1396.0, 1107.0], [1392.0, 1114.0], [1356.0, 1141.0], [1352.0, 1115.0], [1348.0, 1116.0], [1344.0, 1122.0], [1368.0, 1118.0], [1364.0, 1112.0], [1360.0, 1115.0], [1388.0, 1119.0], [1456.0, 1110.0], [1408.0, 1121.0], [1448.0, 1107.0], [1440.0, 1103.0], [1436.0, 1112.0], [1432.0, 1134.0], [1428.0, 1108.0], [1424.0, 1115.0], [1504.0, 1101.0], [1508.0, 1113.0], [1532.0, 1105.0], [1520.0, 1173.0], [1480.0, 1117.0], [1500.0, 1110.0], [1516.0, 1115.6666666666667], [1512.0, 1118.0], [1588.0, 1104.5], [1572.0, 1109.0], [1596.0, 1096.0], [1568.0, 1107.5], [1584.0, 1121.5], [1548.0, 1115.5], [1536.0, 1102.5], [1556.0, 1106.0], [1576.0, 1108.0], [1652.0, 1109.0], [1660.0, 1103.0], [1632.0, 1122.0], [1636.0, 1132.0], [1600.0, 1131.6666666666667], [1604.0, 1135.0], [1628.0, 1152.0], [1624.0, 1133.0], [1620.0, 1150.0], [1616.0, 1125.0], [1644.0, 1132.0], [1716.0, 1101.5], [1672.0, 1112.6666666666667], [1692.0, 1106.0], [1688.0, 1112.0], [1708.0, 1136.0], [1780.0, 1105.0], [1764.0, 1104.0], [1756.0, 1124.0], [1732.0, 1134.0], [1736.0, 1105.0], [1740.0, 1135.0], [1744.0, 1102.0], [1772.0, 1102.0], [1852.0, 1134.0], [1824.0, 1121.0], [1828.0, 1123.0], [1832.0, 1118.0], [1844.0, 1111.0], [1840.0, 1118.25], [1804.0, 1138.0], [1800.0, 1133.0], [1792.0, 1114.2], [1812.0, 1126.0], [1912.0, 1108.6666666666667], [1904.0, 1106.0], [1888.0, 1117.0], [1900.0, 1104.25], [1916.0, 1098.0], [1908.0, 1107.0], [1860.0, 1111.0], [1864.0, 1108.0], [1868.0, 1115.3333333333333], [1880.0, 1115.0], [1872.0, 1102.0], [1976.0, 1105.5], [1956.0, 1139.0], [1964.0, 1116.0], [1980.0, 1116.0], [1972.0, 1112.5], [1968.0, 1108.5], [1932.0, 1136.0], [1928.0, 5050.0], [1924.0, 1339.0], [1948.0, 1109.5], [1940.0, 1140.0], [1936.0, 1127.0], [2040.0, 1112.0], [2016.0, 1104.0], [2020.0, 1104.5], [2024.0, 1107.0], [2036.0, 1110.5], [2032.0, 1107.6666666666667], [1984.0, 1108.0], [1996.0, 1109.5], [2012.0, 1110.5], [2008.0, 1111.5], [2004.0, 1105.0], [2000.0, 1138.0], [2152.0, 1114.25], [2168.0, 1112.0], [2160.0, 1118.5], [2120.0, 1113.0], [2136.0, 1115.0], [2072.0, 1103.5], [2064.0, 1098.0], [2048.0, 1104.0], [2088.0, 1104.0], [2272.0, 1136.0], [2264.0, 42.0], [2280.0, 1113.0], [2240.0, 1108.0], [2248.0, 1104.0], [2176.0, 1122.0909090909092], [2192.0, 1112.0], [2200.0, 1112.0], [2232.0, 1113.0], [2224.0, 1125.0], [2208.0, 1113.0], [2416.0, 1107.6666666666667], [2424.0, 1098.5], [2368.0, 1112.0], [2392.0, 1110.5], [2408.0, 1105.5], [2360.0, 1100.0], [2304.0, 1104.0], [2312.0, 1114.6666666666667], [2352.0, 1118.0], [2336.0, 1103.0], [2456.0, 1105.0], [2552.0, 1121.6666666666667], [2496.0, 1104.0], [2504.0, 1103.6666666666667], [2512.0, 1108.4285714285713], [2520.0, 1112.3999999999999], [2448.0, 1128.0], [2440.0, 1103.0], [2488.0, 1118.0], [2472.0, 1103.5], [2464.0, 1113.0], [2680.0, 1118.0], [2624.0, 1234.0], [2632.0, 1248.3333333333333], [2640.0, 1168.0], [2648.0, 1123.0], [2672.0, 1116.5], [2664.0, 1111.5], [2656.0, 1116.0], [2576.0, 1110.75], [2616.0, 1286.5], [2608.0, 1339.0], [2600.0, 1101.0], [2592.0, 1105.0], [2792.0, 1109.0], [2752.0, 1105.0], [2776.0, 1113.5], [2800.0, 1108.0], [2784.0, 1112.0], [2712.0, 1105.0], [2704.0, 1107.0], [2696.0, 1113.0], [2744.0, 1112.6666666666667], [2720.0, 1115.5], [2840.0, 1114.0], [2888.0, 1107.5], [2896.0, 1100.0], [2928.0, 1108.4545454545453], [2816.0, 1142.0], [2872.0, 1104.0], [2864.0, 1113.0], [2848.0, 1102.0], [2960.0, 1111.5], [3000.0, 1461.5047828680747], [2944.0, 1114.6666666666667], [2968.0, 1122.7142857142858], [2976.0, 1107.0], [2161.0, 1112.0], [2129.0, 1118.0], [2137.0, 1117.0], [2169.0, 1115.0], [2153.0, 1125.5], [2145.0, 1115.3333333333333], [2049.0, 1107.0], [2057.0, 1105.0], [2105.0, 1105.0], [2097.0, 1106.0], [2081.0, 1105.3333333333333], [2297.0, 1116.0], [2265.0, 56.0], [2273.0, 1121.0], [2201.0, 1118.0], [2185.0, 1138.0], [2425.0, 1098.0], [2385.0, 1101.5], [2409.0, 1107.0], [2345.0, 1105.0], [2537.0, 1110.0], [2529.0, 1114.5], [2481.0, 1107.75], [2465.0, 1102.5], [2681.0, 1108.0], [2665.0, 1110.0], [2625.0, 1223.0], [2633.0, 1199.0], [2641.0, 1149.0], [2649.0, 1117.0], [2657.0, 1119.0], [2585.0, 1102.0], [2569.0, 1107.0], [2561.0, 1110.0], [2617.0, 1285.0], [2609.0, 1306.0], [2601.0, 2067.0], [2593.0, 1102.0], [2753.0, 1113.0], [2769.0, 1109.0], [2809.0, 1103.0], [2801.0, 1098.0], [2689.0, 1103.5], [2737.0, 1106.0], [2721.0, 1105.0], [2921.0, 1114.0], [2881.0, 1105.3333333333333], [2905.0, 1110.0], [2929.0, 1109.0], [2913.0, 1108.5], [2817.0, 1115.0], [2825.0, 1104.0], [2833.0, 1129.0], [2841.0, 1104.0], [2857.0, 1106.0], [2849.0, 1105.0], [2953.0, 1101.6666666666667], [2961.0, 1109.4], [2969.0, 1111.6666666666667], [2993.0, 1109.3333333333333], [2977.0, 1114.0], [1081.0, 1616.5], [1085.0, 1570.0], [1061.0, 1868.5], [1065.0, 1851.0], [1077.0, 1546.0], [1073.0, 1577.0], [1037.0, 1982.0], [1033.0, 1876.0], [1029.0, 1944.75], [1025.0, 1913.0], [1041.0, 1923.0], [1069.0, 1693.0], [1145.0, 1536.0], [1149.0, 1616.5], [1121.0, 1555.5], [1125.0, 1537.0], [1129.0, 1554.0], [1137.0, 1511.0], [1101.0, 1541.0], [1093.0, 1558.0], [1089.0, 1655.0], [1117.0, 1531.0], [1109.0, 1635.0], [1105.0, 1556.0], [1133.0, 1605.5], [1201.0, 1449.0], [1213.0, 1483.0], [1209.0, 1582.0], [1205.0, 1576.0], [1157.0, 1532.5], [1153.0, 1481.0], [1181.0, 1566.0], [1177.0, 1520.0], [1197.0, 1477.0], [1265.0, 1555.0], [1273.0, 1528.0], [1249.0, 1447.0], [1257.0, 1577.0], [1277.0, 1465.0], [1269.0, 1540.0], [1217.0, 1554.0], [1229.0, 1453.0], [1225.0, 1491.5], [1245.0, 1456.5], [1241.0, 1466.0], [1237.0, 1598.0], [1233.0, 1505.0], [1261.0, 1444.0], [1337.0, 1112.0], [1313.0, 1304.0], [1317.0, 1108.0], [1321.0, 1141.0], [1341.0, 1103.0], [1333.0, 1117.0], [1329.0, 1106.0], [1281.0, 1458.0], [1289.0, 1506.0], [1285.0, 1525.0], [1293.0, 1520.0], [1309.0, 1480.0], [1305.0, 1410.0], [1297.0, 1531.0], [1325.0, 1126.0], [1353.0, 1124.0], [1405.0, 1103.0], [1401.0, 1105.0], [1397.0, 1108.0], [1385.0, 1118.0], [1345.0, 1139.0], [1357.0, 1103.0], [1373.0, 1109.5], [1369.0, 1122.0], [1365.0, 1103.0], [1421.0, 1135.0], [1465.0, 1105.5], [1417.0, 1110.5], [1413.0, 1121.5], [1409.0, 1110.0], [1449.0, 1110.0], [1441.0, 1111.0], [1429.0, 1106.0], [1425.0, 1106.0], [1529.0, 1106.6666666666667], [1509.0, 1101.0], [1521.0, 1121.0], [1481.0, 1114.0], [1485.0, 1106.0], [1497.0, 1119.6666666666667], [1493.0, 1116.0], [1517.0, 1101.0], [1513.0, 1122.0], [1505.0, 1105.3333333333333], [1589.0, 1101.0], [1585.0, 1105.0], [1597.0, 1133.0], [1569.0, 1103.0], [1573.0, 1105.0], [1593.0, 1134.0], [1565.0, 1114.5], [1541.0, 1107.25], [1537.0, 1106.0], [1545.0, 1105.0], [1549.0, 1123.0], [1561.0, 1111.5], [1557.0, 1111.0], [1553.0, 1104.0], [1581.0, 1102.0], [1577.0, 1103.0], [1601.0, 1137.0], [1633.0, 1130.0], [1629.0, 1140.0], [1613.0, 1149.0], [1625.0, 1155.0], [1621.0, 1122.0], [1617.0, 1130.3333333333333], [1641.0, 1115.5], [1637.0, 1124.5], [1721.0, 1126.0], [1713.0, 1122.5], [1697.0, 1113.6666666666667], [1665.0, 1111.5], [1669.0, 1120.3333333333333], [1689.0, 1121.0], [1681.0, 1115.0], [1709.0, 1111.0], [1705.0, 1106.0], [1789.0, 1116.6666666666667], [1785.0, 1102.0], [1761.0, 1103.0], [1781.0, 1101.0], [1741.0, 1104.0], [1753.0, 1122.0], [1745.0, 1120.5], [1769.0, 1105.6666666666667], [1765.0, 1107.0], [1849.0, 1111.0], [1829.0, 1116.0], [1833.0, 1129.0], [1853.0, 1110.0], [1845.0, 1108.0], [1841.0, 1114.3333333333333], [1805.0, 1120.0], [1801.0, 1105.0], [1821.0, 1115.0], [1817.0, 1122.2222222222222], [1809.0, 1119.5], [1909.0, 1110.0], [1885.0, 1109.75], [1861.0, 1106.0], [1865.0, 1107.0], [1881.0, 1108.0], [1877.0, 1107.0], [1933.0, 1157.0], [1953.0, 1121.0], [1961.0, 1105.0], [1973.0, 1107.0], [1929.0, 5846.0], [1925.0, 5031.0], [1921.0, 1103.5], [1949.0, 1118.0], [1945.0, 1114.5], [1941.0, 1129.0], [1937.0, 1146.0], [1989.0, 1118.0], [2041.0, 1098.0], [2025.0, 1106.0], [1985.0, 1110.0], [1993.0, 1109.0], [2013.0, 1107.0], [2009.0, 1118.0], [2005.0, 1131.0], [2001.0, 1103.0], [2029.0, 1110.0], [2170.0, 1121.5], [2114.0, 1115.5], [2122.0, 1104.3333333333333], [2162.0, 1118.0], [2154.0, 1126.5], [2250.0, 1102.0], [2274.0, 1122.0], [2258.0, 1103.0], [2202.0, 1115.0], [2234.0, 1108.0], [2226.0, 1115.6666666666667], [2218.0, 1116.0], [2266.0, 5213.0], [2314.0, 1107.0], [2418.0, 1102.5], [2426.0, 1118.0], [2370.0, 1103.0], [2306.0, 1111.0], [2354.0, 1108.5], [2346.0, 1101.0], [2338.0, 1118.0], [2538.0, 1114.0], [2498.0, 1108.0], [2506.0, 1103.0], [2546.0, 1110.0], [2530.0, 1113.0], [2458.0, 1119.0], [2450.0, 1113.0], [2490.0, 1106.0], [2482.0, 1103.0], [2474.0, 1103.0], [2674.0, 1115.0], [2626.0, 1259.0], [2642.0, 1167.0], [2650.0, 1128.0], [2682.0, 1112.0], [2586.0, 1109.0], [2570.0, 1107.0], [2562.0, 1114.0], [2618.0, 1271.0], [2610.0, 1440.0], [2602.0, 1459.0], [2594.0, 1098.0], [2698.0, 1110.5], [2762.0, 1111.0], [2786.0, 1106.0], [2714.0, 1115.5], [2690.0, 1110.0], [2746.0, 1123.5], [2738.0, 1107.0], [2730.0, 1116.3333333333333], [2898.0, 1105.5], [2906.0, 1100.0], [2938.0, 1102.75], [2930.0, 1107.0], [2922.0, 1109.2857142857142], [2850.0, 1115.0], [2954.0, 1105.0], [2962.0, 1107.2], [2970.0, 1107.5], [2994.0, 1109.2222222222222], [2986.0, 1104.3333333333333], [2978.0, 1112.0], [2123.0, 1104.0], [2171.0, 1111.0], [2131.0, 1109.4], [2139.0, 1109.3333333333333], [2155.0, 1120.0], [2147.0, 1107.0], [2275.0, 1114.0], [2299.0, 1105.0], [2243.0, 1106.6], [2259.0, 1097.0], [2195.0, 1136.5], [2187.0, 1117.5], [2179.0, 1128.0], [2219.0, 1115.0], [2211.0, 1119.5], [2267.0, 1723.0], [2315.0, 1114.0], [2403.0, 1109.3333333333333], [2307.0, 1113.0], [2323.0, 1113.0], [2363.0, 1118.0], [2347.0, 1113.0], [2547.0, 1115.5], [2555.0, 1121.0], [2499.0, 1110.2], [2507.0, 1119.0], [2539.0, 1119.0], [2531.0, 1107.0], [2459.0, 1109.0], [2451.0, 1099.0], [2443.0, 1102.5], [2683.0, 1112.0], [2667.0, 1116.0], [2627.0, 1217.0], [2635.0, 1258.5], [2643.0, 1139.0], [2651.0, 1194.0], [2659.0, 1110.5], [2587.0, 1104.0], [2579.0, 1102.5], [2571.0, 1110.3333333333333], [2619.0, 1277.0], [2611.0, 1284.0], [2603.0, 1351.0], [2595.0, 1104.0], [2803.0, 1134.0], [2755.0, 1103.0], [2763.0, 1108.5], [2779.0, 1103.0], [2811.0, 1120.3333333333333], [2795.0, 1114.6666666666667], [2707.0, 1105.0], [2699.0, 1115.0], [2691.0, 1098.0], [2723.0, 1112.0], [2915.0, 1100.5], [2939.0, 1104.3333333333333], [2883.0, 1109.0], [2891.0, 1105.25], [2819.0, 1112.0], [2827.0, 1107.0], [2835.0, 1104.0], [2875.0, 1105.3333333333333], [2867.0, 1113.6666666666667], [2859.0, 1107.3333333333333], [2955.0, 1107.0], [2947.0, 1105.4], [2963.0, 1106.5], [2971.0, 1113.0], [2995.0, 1107.888888888889], [2987.0, 1108.4285714285716], [2979.0, 1108.25], [537.0, 1114.0], [541.0, 1110.5], [529.0, 1113.0], [539.0, 1103.0], [519.0, 1108.5], [517.0, 1107.0], [513.0, 1124.0], [527.0, 1113.0], [525.0, 1114.0], [521.0, 1133.0], [533.0, 1110.0], [569.0, 1107.0], [571.0, 1116.0], [559.0, 1111.8333333333335], [545.0, 1115.3333333333333], [551.0, 1124.0], [557.0, 1118.5], [553.0, 1120.6666666666667], [563.0, 1114.0], [603.0, 1104.6666666666667], [605.0, 1107.0], [601.0, 1103.0], [589.0, 1117.5], [577.0, 1107.0], [579.0, 1107.5], [583.0, 1105.0], [585.0, 1115.0], [599.0, 1104.0], [593.0, 1114.5], [613.0, 1098.0], [625.0, 1129.0], [635.0, 1151.0], [633.0, 1111.0], [623.0, 1139.0], [609.0, 1103.0], [611.0, 1099.0], [615.0, 2538.0], [621.0, 1142.0], [619.0, 1279.0], [617.0, 1307.0], [631.0, 1109.0], [627.0, 1119.0], [667.0, 1112.0], [671.0, 1105.0], [657.0, 1105.0], [669.0, 1108.0], [665.0, 1106.0], [655.0, 1109.0], [641.0, 1112.0], [647.0, 1105.0], [653.0, 1108.0], [661.0, 1107.6666666666667], [697.0, 1109.0], [701.0, 1108.0], [703.0, 1110.0], [699.0, 1113.5], [687.0, 1105.0], [673.0, 1101.5], [679.0, 1108.0], [683.0, 1109.0], [681.0, 1106.0], [689.0, 1119.0], [729.0, 1101.0], [733.0, 1103.0], [735.0, 1103.0], [721.0, 1112.0], [719.0, 1099.0], [707.0, 1105.3333333333333], [709.0, 1111.0], [711.0, 1122.0], [717.0, 1101.0], [715.0, 1099.5], [713.0, 1102.0], [727.0, 1108.5], [725.0, 1125.0], [757.0, 1109.0], [755.0, 1101.0], [747.0, 1113.0], [745.0, 1114.2], [739.0, 1117.75], [737.0, 1106.0], [795.0, 1113.0], [791.0, 1109.0], [787.0, 1101.0], [781.0, 1101.0], [819.0, 1106.0], [817.0, 1104.0], [809.0, 1120.75], [863.0, 1118.0], [855.0, 1118.0], [853.0, 1108.0], [851.0, 1102.0], [845.0, 1099.0], [833.0, 1206.6], [839.0, 1109.0], [837.0, 1104.0], [843.0, 2040.0], [871.0, 1101.0], [889.0, 1145.0], [867.0, 1111.5], [865.0, 1101.0], [887.0, 1110.0], [877.0, 1109.0], [873.0, 1115.0], [923.0, 1105.2], [925.0, 1117.0], [921.0, 1118.0], [909.0, 1105.5], [897.0, 1107.5], [905.0, 1100.0], [915.0, 1106.0], [945.0, 1108.0], [957.0, 1100.3333333333333], [947.0, 1562.0], [953.0, 1099.0], [943.0, 1103.0], [937.0, 1278.1666666666667], [951.0, 1395.3333333333333], [949.0, 1102.0], [987.0, 1958.0], [989.0, 1909.0], [991.0, 1935.0], [979.0, 1969.5], [977.0, 1940.0], [985.0, 1941.0], [963.0, 1096.5], [961.0, 1097.0], [965.0, 2066.0], [967.0, 2048.0], [969.0, 1981.0], [983.0, 1919.0], [981.0, 1935.0], [999.0, 1928.0], [1021.0, 1928.6666666666667], [995.0, 2016.0], [993.0, 1903.0], [1013.0, 1941.5], [1007.0, 1905.0], [1003.0, 1943.0], [1001.0, 1910.0], [1078.0, 1668.0], [1074.0, 1571.0], [1086.0, 1537.0], [1062.0, 1960.0], [1066.0, 1965.0], [1082.0, 1562.0], [1034.0, 1873.0], [1030.0, 1918.0], [1054.0, 1960.3333333333333], [1050.0, 1869.0], [1046.0, 1929.3333333333333], [1070.0, 1600.0], [1102.0, 1622.0], [1142.0, 1583.0], [1094.0, 1668.0], [1090.0, 1531.0], [1130.0, 1547.0], [1126.0, 1495.0], [1122.0, 1607.0], [1118.0, 1503.0], [1114.0, 1567.0], [1166.0, 1549.6666666666667], [1202.0, 1687.0], [1190.0, 1570.0], [1206.0, 1545.0], [1214.0, 1562.0], [1186.0, 1508.6666666666667], [1162.0, 1503.6666666666667], [1178.0, 1484.0], [1174.0, 1554.5], [1170.0, 1517.0], [1198.0, 1558.0], [1194.0, 1508.0], [1274.0, 1529.0], [1270.0, 1543.0], [1250.0, 1578.0], [1230.0, 1596.0], [1226.0, 1588.0], [1218.0, 1549.0], [1242.0, 1573.0], [1254.0, 1475.5], [1334.0, 1105.0], [1342.0, 1130.0], [1318.0, 1115.0], [1338.0, 1112.0], [1330.0, 1110.0], [1310.0, 1479.0], [1282.0, 1462.0], [1286.0, 1601.0], [1290.0, 1547.0], [1294.0, 1534.0], [1306.0, 1426.0], [1302.0, 1455.0], [1298.0, 1428.0], [1326.0, 1106.0], [1394.0, 1104.5], [1402.0, 1142.0], [1378.0, 1121.0], [1382.0, 1107.0], [1386.0, 1102.0], [1398.0, 1104.0], [1358.0, 1111.0], [1354.0, 1107.0], [1350.0, 1117.5], [1346.0, 1119.0], [1374.0, 1103.0], [1366.0, 1115.0], [1362.0, 1109.5], [1390.0, 1108.5], [1418.0, 1107.0], [1442.0, 1104.0], [1462.0, 1109.3333333333333], [1458.0, 1105.0], [1414.0, 1142.0], [1454.0, 1114.25], [1446.0, 1120.3333333333333], [1438.0, 1119.0], [1434.0, 1106.5], [1426.0, 1115.0], [1522.0, 1105.0], [1534.0, 1110.0], [1506.0, 1122.0], [1526.0, 1105.5], [1482.0, 1106.0], [1502.0, 1110.0], [1494.0, 1105.5], [1490.0, 1111.0], [1510.0, 1108.0], [1586.0, 1109.0], [1594.0, 1150.0], [1550.0, 1109.0], [1546.0, 1104.0], [1538.0, 1115.0], [1566.0, 1105.0], [1554.0, 1107.0], [1582.0, 1099.0], [1574.0, 1102.0], [1654.0, 1118.0], [1650.0, 1123.0], [1662.0, 1124.0], [1634.0, 1152.0], [1658.0, 1104.5], [1630.0, 1141.0], [1602.0, 1149.0], [1606.0, 1131.0], [1614.0, 1132.0], [1610.0, 1135.0], [1626.0, 1141.0], [1618.0, 1153.0], [1646.0, 1107.5], [1642.0, 1132.0], [1638.0, 1122.0], [1722.0, 1116.5], [1702.0, 1103.5], [1718.0, 1120.0], [1694.0, 1114.0], [1678.0, 1103.3333333333333], [1686.0, 1100.0], [1682.0, 1146.0], [1706.0, 1103.0], [1734.0, 1110.5], [1786.0, 1099.0], [1730.0, 1120.0], [1738.0, 1103.0], [1766.0, 1106.0], [1802.0, 1110.0], [1850.0, 1109.0], [1826.0, 1116.8888888888891], [1830.0, 1117.0], [1798.0, 1127.3333333333333], [1794.0, 1127.5], [1818.0, 1112.0], [1814.0, 1113.75], [1918.0, 1104.0], [1890.0, 1107.5], [1894.0, 1104.0], [1898.0, 1111.6666666666667], [1858.0, 1118.0], [1866.0, 1121.0], [1870.0, 1116.5], [1882.0, 1113.5], [1878.0, 1109.0], [1874.0, 1112.0], [1982.0, 1111.5], [1970.0, 1105.5], [1954.0, 1129.0], [1958.0, 1110.0], [1962.0, 1101.5], [1966.0, 1135.0], [1934.0, 1130.0], [1930.0, 1136.0], [1926.0, 5141.0], [1946.0, 1108.0], [1942.0, 1123.0], [1938.0, 1131.0], [2038.0, 1106.0], [2042.0, 1112.0], [2018.0, 1108.5], [2026.0, 1105.0], [1986.0, 1138.0], [1998.0, 1110.5], [2006.0, 1098.0], [2002.0, 1113.0], [2172.0, 1129.0], [2116.0, 1100.5], [2164.0, 1117.0], [2156.0, 1109.0], [2076.0, 1107.0], [2068.0, 1120.3333333333333], [2092.0, 1122.0], [2180.0, 1122.5], [2276.0, 1121.0], [2236.0, 1104.0], [2188.0, 1128.0], [2204.0, 1111.0], [2228.0, 1112.0], [2220.0, 1111.0], [2268.0, 5018.0], [2260.0, 1101.0], [2412.0, 1117.0], [2372.0, 1104.25], [2380.0, 1101.5], [2420.0, 1105.5], [2308.0, 1106.0], [2316.0, 1108.0], [2332.0, 1106.5], [2356.0, 1115.5], [2548.0, 1111.0], [2508.0, 1109.0], [2516.0, 1107.2222222222224], [2524.0, 1113.0], [2556.0, 1115.0], [2540.0, 1116.0], [2460.0, 1111.0], [2444.0, 1113.0], [2436.0, 1110.0], [2492.0, 1102.0], [2484.0, 1106.0], [2476.0, 1108.0], [2468.0, 1107.5], [2676.0, 1108.0], [2636.0, 1287.0], [2644.0, 1128.0], [2652.0, 1116.0], [2684.0, 1108.0], [2668.0, 1121.0], [2588.0, 1104.0], [2580.0, 1106.0], [2564.0, 1111.5], [2620.0, 1254.0], [2612.0, 1418.0], [2604.0, 1326.0], [2796.0, 1103.0], [2788.0, 1120.0], [2756.0, 1106.0], [2772.0, 1105.6666666666667], [2804.0, 1106.0], [2716.0, 1115.5], [2700.0, 1110.0], [2692.0, 1110.5], [2740.0, 1112.0], [2724.0, 1108.0], [2924.0, 1108.8], [2940.0, 1105.3333333333333], [2932.0, 1104.923076923077], [2884.0, 1105.5], [2908.0, 1099.5], [2916.0, 1100.0], [2820.0, 1096.0], [2844.0, 1103.6666666666667], [2876.0, 1104.0], [2868.0, 1109.0], [2852.0, 1123.6666666666667], [2948.0, 1115.0], [2996.0, 1111.0], [2964.0, 1127.0], [2972.0, 1102.0], [2988.0, 1110.0], [2980.0, 1105.0], [2157.0, 1116.0], [2117.0, 1113.0], [2125.0, 1106.0], [2133.0, 1102.5], [2165.0, 1107.0], [2149.0, 1111.0], [2109.0, 1108.5], [2061.0, 1129.0], [2077.0, 1103.0], [2205.0, 1117.0], [2245.0, 1109.0], [2261.0, 1098.0], [2277.0, 1118.0], [2197.0, 1133.3333333333333], [2229.0, 1115.5], [2221.0, 1115.5], [2213.0, 1115.25], [2429.0, 1104.0], [2373.0, 1102.5], [2349.0, 1106.5], [2341.0, 1097.0], [2549.0, 1116.5], [2541.0, 1117.6666666666667], [2509.0, 1103.6666666666667], [2525.0, 1106.0], [2533.0, 1113.3333333333333], [2445.0, 1101.6666666666667], [2493.0, 1113.0], [2477.0, 1107.0], [2685.0, 1110.0], [2629.0, 1246.5], [2637.0, 1203.0], [2645.0, 1128.0], [2653.0, 1112.0], [2677.0, 1102.0], [2669.0, 1124.0], [2661.0, 1121.0], [2565.0, 1118.0], [2621.0, 1257.0], [2613.0, 1284.0], [2605.0, 1305.0], [2805.0, 1103.0], [2813.0, 1108.5], [2757.0, 1114.0], [2773.0, 1103.0], [2781.0, 1103.0], [2789.0, 1099.0], [2693.0, 1199.0], [2749.0, 1105.0], [2733.0, 1109.0], [2725.0, 1110.0], [2925.0, 1103.6666666666667], [2933.0, 1107.4], [2885.0, 1103.0], [2901.0, 1103.0], [2909.0, 1108.0], [2917.0, 1107.0], [2877.0, 1109.0], [2861.0, 1116.0], [2853.0, 1108.0], [2957.0, 1106.4], [2965.0, 1104.5], [2973.0, 1114.0], [2997.0, 1105.0], [2989.0, 1107.0], [2981.0, 1116.0], [1059.0, 1937.0], [1083.0, 1581.0], [1063.0, 1847.0], [1067.0, 1878.0], [1079.0, 1671.0], [1075.0, 1572.0], [1051.0, 1889.5], [1047.0, 1960.0], [1071.0, 6004.0], [1143.0, 1536.5], [1139.0, 1601.5], [1151.0, 1496.0], [1123.0, 1641.0], [1127.0, 1638.0], [1147.0, 1556.0], [1103.0, 1529.0], [1099.0, 1599.5], [1095.0, 1551.0], [1091.0, 1531.0], [1119.0, 1746.0], [1111.0, 1559.0], [1107.0, 1585.5], [1135.0, 1510.0], [1207.0, 1475.0], [1215.0, 1587.0], [1195.0, 1581.0], [1211.0, 1553.6666666666667], [1167.0, 1470.0], [1163.0, 1487.0], [1159.0, 1544.5], [1155.0, 1549.0], [1183.0, 1493.0], [1171.0, 1565.0], [1199.0, 1492.0], [1275.0, 1440.0], [1279.0, 1488.0], [1255.0, 1473.0], [1259.0, 1497.5], [1271.0, 1521.0], [1267.0, 1508.5], [1247.0, 1534.0], [1223.0, 1518.3333333333333], [1219.0, 1582.0], [1239.0, 1472.5], [1235.0, 1434.0], [1263.0, 1520.5], [1339.0, 1135.0], [1343.0, 1136.0], [1315.0, 1304.0], [1319.0, 1149.0], [1323.0, 1131.0], [1335.0, 1115.0], [1331.0, 1103.0], [1311.0, 1425.0], [1295.0, 1517.0], [1307.0, 1411.0], [1303.0, 1427.0], [1299.0, 1437.0], [1327.0, 1132.0], [1347.0, 1133.0], [1399.0, 1131.0], [1403.0, 1108.0], [1395.0, 1102.0], [1387.0, 1109.0], [1375.0, 1127.0], [1351.0, 1118.0], [1359.0, 1114.0], [1371.0, 1120.0], [1367.0, 1108.0], [1363.0, 1109.0], [1463.0, 1126.0], [1423.0, 1121.5], [1447.0, 1105.0], [1419.0, 1130.0], [1415.0, 1098.0], [1411.0, 1100.5], [1455.0, 1102.0], [1451.0, 1107.0], [1443.0, 1144.0], [1439.0, 1139.0], [1435.0, 1126.0], [1431.0, 1104.0], [1427.0, 1111.5], [1523.0, 1124.0], [1531.0, 1123.6666666666667], [1503.0, 1107.0], [1483.0, 1104.0], [1487.0, 1103.0], [1499.0, 1110.0], [1491.0, 1127.5], [1519.0, 1104.6666666666667], [1507.0, 1123.0], [1595.0, 1099.5], [1571.0, 1105.5], [1591.0, 1104.5], [1543.0, 1114.0], [1551.0, 1106.0], [1563.0, 1102.0], [1559.0, 1103.0], [1579.0, 1103.5], [1575.0, 1107.0], [1655.0, 1108.0], [1659.0, 1104.0], [1639.0, 1104.0], [1663.0, 1115.5], [1651.0, 1124.5], [1611.0, 1143.0], [1603.0, 1148.0], [1615.0, 1122.0], [1627.0, 1121.0], [1619.0, 1138.0], [1647.0, 1104.0], [1643.0, 1100.0], [1635.0, 1124.0], [1727.0, 1111.25], [1667.0, 1128.0], [1675.0, 1111.3333333333333], [1691.0, 1107.0], [1687.0, 1185.0], [1683.0, 1102.0], [1787.0, 1106.0], [1843.0, 1114.0], [1847.0, 1119.25], [1855.0, 1121.5], [1831.0, 1110.5], [1839.0, 1123.9999999999998], [1835.0, 1119.25], [1799.0, 1113.5], [1823.0, 1108.5], [1819.0, 1114.0], [1811.0, 1106.0], [1907.0, 1107.4], [1911.0, 1111.0], [1915.0, 1104.3333333333333], [1919.0, 1099.0], [1891.0, 1104.0], [1895.0, 1111.0], [1859.0, 1111.0], [1863.0, 1123.5], [1867.0, 1110.0], [1875.0, 1132.0], [1979.0, 1117.6666666666667], [1955.0, 1112.0], [1959.0, 1108.0], [1967.0, 1102.0], [1975.0, 1107.0], [1935.0, 1135.0], [1931.0, 1139.0], [1927.0, 5007.0], [1923.0, 1097.5], [1951.0, 1110.5], [1943.0, 1141.0], [1939.0, 1125.0], [2043.0, 1127.0], [2047.0, 1103.0], [2023.0, 1108.6666666666667], [2027.0, 1117.0], [2015.0, 1118.5], [1991.0, 1102.0], [1995.0, 1118.0], [1999.0, 1108.0], [2011.0, 1105.0], [2003.0, 1100.0], [2031.0, 1113.0], [2174.0, 1115.6666666666667], [2142.0, 1111.0], [2166.0, 1112.0], [2158.0, 1113.0], [2150.0, 1128.0], [2110.0, 1098.5], [2190.0, 1124.0], [2254.0, 1106.5], [2182.0, 1121.6], [2198.0, 1119.0], [2206.0, 1119.0], [2230.0, 1111.0], [2270.0, 1132.5], [2262.0, 2166.0], [2406.0, 1108.0], [2430.0, 1103.0], [2398.0, 1103.5], [2422.0, 1104.6666666666667], [2310.0, 1109.0], [2318.0, 1100.0], [2326.0, 1111.0], [2358.0, 1104.6666666666667], [2550.0, 1112.0], [2462.0, 1108.0], [2502.0, 1097.0], [2526.0, 1112.3333333333333], [2558.0, 1121.0], [2454.0, 1101.5], [2494.0, 1114.5], [2478.0, 1124.0], [2470.0, 1107.6666666666667], [2670.0, 1128.0], [2686.0, 1106.0], [2638.0, 1158.0], [2646.0, 1123.0], [2654.0, 1119.0], [2662.0, 1117.0], [2590.0, 1105.3333333333333], [2582.0, 1112.0], [2574.0, 1106.0], [2622.0, 1244.0], [2614.0, 1310.0], [2598.0, 1101.25], [2806.0, 1149.0], [2718.0, 1110.5], [2758.0, 1105.0], [2766.0, 1107.25], [2774.0, 1102.0], [2782.0, 1111.75], [2790.0, 1102.0], [2710.0, 1107.6], [2694.0, 1109.0], [2750.0, 1102.0], [2742.0, 1116.0], [2942.0, 1113.6666666666665], [2894.0, 1109.0], [2918.0, 1104.25], [2822.0, 1157.0], [2830.0, 1102.75], [2838.0, 1110.4], [2846.0, 1158.0], [2870.0, 1107.5], [2862.0, 1105.0], [2958.0, 1108.3333333333335], [2950.0, 1104.0], [2966.0, 1111.5], [2974.0, 1106.5], [2998.0, 1106.4444444444443], [2990.0, 1106.5], [2982.0, 1117.0], [2127.0, 1133.0], [2143.0, 1109.0], [2071.0, 1102.0], [2103.0, 1117.5], [2087.0, 1098.0], [2279.0, 1118.0], [2303.0, 1104.0], [2255.0, 1101.3333333333333], [2263.0, 40.0], [2199.0, 1117.0], [2191.0, 1112.5], [2239.0, 1104.5], [2223.0, 1119.0], [2215.0, 1114.3333333333333], [2271.0, 1136.0], [2375.0, 1106.0], [2399.0, 1105.0], [2367.0, 1103.6666666666667], [2335.0, 1107.0], [2351.0, 1108.0], [2343.0, 1106.0], [2543.0, 1112.3333333333333], [2559.0, 1114.0], [2519.0, 1135.0], [2527.0, 1105.0], [2535.0, 1122.0], [2463.0, 1104.8], [2455.0, 1105.0], [2447.0, 1100.0], [2479.0, 1103.0], [2575.0, 1104.0], [2639.0, 1145.0], [2679.0, 1116.0], [2647.0, 1123.0], [2567.0, 1108.0], [2623.0, 1228.0], [2607.0, 1322.0], [2599.0, 1100.0], [2711.0, 1112.0], [2807.0, 1110.0], [2783.0, 1153.0], [2791.0, 1108.0], [2703.0, 1109.0], [2695.0, 1108.0], [2751.0, 1100.0], [2735.0, 1116.0], [2727.0, 1117.6666666666667], [2927.0, 1105.6666666666665], [2935.0, 1116.6666666666665], [2943.0, 1120.75], [2903.0, 1110.0], [2919.0, 1104.0], [2879.0, 1110.0], [2823.0, 1103.0], [2855.0, 1103.5], [2991.0, 1107.0], [2951.0, 1114.3333333333333], [2959.0, 1106.0], [2967.0, 1106.5], [2975.0, 1110.0], [2983.0, 1103.5714285714284], [1.0, 5136.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[2955.4156811213265, 1453.962559232274]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 3000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 35530.3, "minX": 1.68416772E12, "maxY": 259856.75, "series": [{"data": [[1.68416778E12, 259856.75], [1.68416796E12, 171394.28333333333], [1.68416802E12, 43712.166666666664], [1.68416784E12, 230385.31666666668], [1.6841679E12, 237500.98333333334], [1.68416772E12, 174424.66666666666]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.68416778E12, 211616.15], [1.68416796E12, 139270.45], [1.68416802E12, 35530.3], [1.68416784E12, 187516.0], [1.6841679E12, 193145.1], [1.68416772E12, 142012.6]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68416802E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 1206.7165053489537, "minX": 1.68416772E12, "maxY": 1831.1744838134186, "series": [{"data": [[1.68416778E12, 1549.3152290125277], [1.68416796E12, 1278.2647345506523], [1.68416802E12, 1206.7165053489537], [1.68416784E12, 1393.8857142857182], [1.6841679E12, 1302.6390216474392], [1.68416772E12, 1831.1744838134186]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68416802E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 1206.4977075904217, "minX": 1.68416772E12, "maxY": 1830.7946087178168, "series": [{"data": [[1.68416778E12, 1549.0175341059753], [1.68416796E12, 1278.0374293326443], [1.68416802E12, 1206.4977075904217], [1.68416784E12, 1393.6534266409203], [1.6841679E12, 1302.3304282635054], [1.68416772E12, 1830.7946087178168]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68416802E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.68416772E12, "maxY": 645.1567040530241, "series": [{"data": [[1.68416778E12, 318.5995808921004], [1.68416796E12, 88.97660666709957], [1.68416802E12, 0.0], [1.68416784E12, 187.7763513513511], [1.6841679E12, 75.96551400993373], [1.68416772E12, 645.1567040530241]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68416802E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 1091.0, "minX": 1.68416772E12, "maxY": 16985.0, "series": [{"data": [[1.68416778E12, 14543.0], [1.68416796E12, 12718.0], [1.68416802E12, 6004.0], [1.68416784E12, 9184.0], [1.6841679E12, 12083.0], [1.68416772E12, 16985.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.68416778E12, 3309.0], [1.68416796E12, 1650.0], [1.68416802E12, 1446.1999999999998], [1.68416784E12, 2272.9000000000015], [1.6841679E12, 1722.0], [1.68416772E12, 4442.200000000001]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.68416778E12, 6403.0], [1.68416796E12, 2159.129999999999], [1.68416802E12, 2534.6399999999967], [1.68416784E12, 4565.970000000005], [1.6841679E12, 2770.0], [1.68416772E12, 7264.619999999999]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.68416778E12, 4890.950000000001], [1.68416796E12, 1739.0], [1.68416802E12, 1605.9999999999986], [1.68416784E12, 2998.0], [1.6841679E12, 1891.0], [1.68416772E12, 6217.0999999999985]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.68416778E12, 1091.0], [1.68416796E12, 1091.0], [1.68416802E12, 1093.0], [1.68416784E12, 1092.0], [1.6841679E12, 1092.0], [1.68416772E12, 1091.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.68416778E12, 1115.0], [1.68416796E12, 1111.0], [1.68416802E12, 1109.0], [1.68416784E12, 1108.0], [1.6841679E12, 1116.0], [1.68416772E12, 1111.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68416802E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 39.0, "minX": 1.0, "maxY": 9112.5, "series": [{"data": [[2.0, 2409.0], [3.0, 5133.0], [4.0, 6597.0], [5.0, 1785.0], [6.0, 7596.0], [7.0, 2003.0], [8.0, 9112.5], [9.0, 2195.0], [10.0, 5660.5], [17.0, 1110.0], [18.0, 1102.5], [21.0, 1769.0], [26.0, 2438.0], [27.0, 6512.0], [28.0, 5637.0], [32.0, 1412.5], [39.0, 1234.0], [41.0, 1279.0], [43.0, 1380.0], [46.0, 1105.0], [66.0, 1209.5], [72.0, 2540.0], [73.0, 1469.0], [75.0, 1103.0], [88.0, 1309.5], [97.0, 1889.0], [102.0, 1103.0], [104.0, 1960.0], [105.0, 1488.0], [108.0, 1868.5], [117.0, 1103.0], [125.0, 1468.0], [127.0, 1826.0], [142.0, 1105.0], [149.0, 1109.0], [148.0, 1106.0], [159.0, 2101.0], [163.0, 1262.0], [175.0, 4775.0], [182.0, 1500.0], [198.0, 1514.0], [201.0, 2925.0], [213.0, 1112.0], [223.0, 1114.0], [227.0, 2544.0], [231.0, 3138.0], [269.0, 1289.0], [267.0, 1104.0], [279.0, 2046.0], [297.0, 3671.0], [294.0, 1105.0], [303.0, 1103.0], [288.0, 1699.0], [319.0, 2972.0], [318.0, 1135.0], [306.0, 1962.0], [335.0, 1104.0], [323.0, 1117.0], [328.0, 1114.0], [324.0, 1112.0], [332.0, 1110.5], [334.0, 1105.0], [329.0, 1103.0], [322.0, 1620.5], [325.0, 1107.0], [333.0, 1106.0], [351.0, 1107.0], [336.0, 1107.0], [338.0, 1106.0], [350.0, 1424.5], [344.0, 1107.0], [340.0, 1105.0], [337.0, 1105.0], [339.0, 1107.0], [353.0, 1811.0], [365.0, 1104.0], [352.0, 1104.0], [360.0, 1125.0], [358.0, 1730.0], [357.0, 1635.0], [368.0, 1391.5], [391.0, 1120.0], [399.0, 1104.0], [392.0, 1545.5], [410.0, 1104.0], [413.0, 1116.0], [401.0, 1627.0], [427.0, 1111.0], [426.0, 1108.0], [416.0, 1577.5], [444.0, 1145.0], [439.0, 1122.0], [433.0, 1377.0], [452.0, 1107.0], [478.0, 2081.0], [468.0, 1628.0], [470.0, 1260.5], [481.0, 1147.0], [496.0, 1103.0], [513.0, 5521.0], [522.0, 1110.0], [555.0, 6070.0], [565.0, 1104.0], [568.0, 1108.5], [558.0, 1572.0], [576.0, 1107.0], [595.0, 1122.0], [598.0, 3372.5], [593.0, 1105.0], [589.0, 1358.0], [587.0, 1123.0], [636.0, 1157.0], [637.0, 1106.0], [626.0, 1119.0], [622.0, 1726.0], [624.0, 1557.0], [669.0, 1818.0], [666.0, 1106.0], [670.0, 1108.0], [658.0, 1105.0], [657.0, 1106.0], [668.0, 1106.0], [659.0, 1104.0], [663.0, 1106.0], [652.0, 1118.0], [641.0, 1831.0], [664.0, 1379.0], [665.0, 1107.0], [655.0, 1107.0], [650.0, 1111.0], [648.0, 1109.0], [661.0, 1110.0], [660.0, 1108.0], [698.0, 1401.5], [679.0, 1107.0], [675.0, 1105.0], [688.0, 1220.0], [674.0, 1105.0], [672.0, 1103.0], [695.0, 1128.0], [677.0, 1107.0], [735.0, 1112.0], [716.0, 1108.0], [766.0, 3547.5], [739.0, 1108.0], [755.0, 1121.0], [772.0, 1106.0], [776.0, 1111.0], [803.0, 1109.0], [828.0, 1755.0], [813.0, 1106.0], [861.0, 1744.0], [837.0, 1307.0], [841.0, 1109.0], [845.0, 1110.0], [884.0, 1110.0], [892.0, 1111.0], [871.0, 1106.0], [923.0, 3212.0], [903.0, 1108.0], [946.0, 1109.0], [934.0, 1150.0], [939.0, 4445.0], [956.0, 1110.0], [930.0, 1105.0], [929.0, 1106.0], [968.0, 1107.0], [1095.0, 2639.5], [1.0, 5114.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[513.0, 42.5], [595.0, 40.0], [637.0, 45.0], [669.0, 88.0], [652.0, 49.5], [659.0, 41.5], [641.0, 51.0], [648.0, 41.0], [655.0, 42.0], [675.0, 42.5], [695.0, 46.0], [677.0, 41.0], [735.0, 40.0], [766.0, 4400.0], [755.0, 39.5], [861.0, 42.0], [837.0, 1110.0], [923.0, 5602.5], [903.0, 41.0], [939.0, 4502.5], [930.0, 41.0], [956.0, 60.0], [1095.0, 1045.0], [5.0, 44.0], [9.0, 41.5], [10.0, 43.0], [21.0, 41.0], [28.0, 39.0], [75.0, 41.0], [159.0, 1247.5], [182.0, 43.0], [213.0, 42.0], [1.0, 41.0], [294.0, 43.0], [319.0, 1954.0], [335.0, 43.5], [325.0, 49.0], [338.0, 39.5], [340.0, 43.0], [339.0, 41.5], [353.0, 42.5], [365.0, 40.0], [352.0, 43.5], [360.0, 46.0], [426.0, 58.0], [444.0, 44.0], [452.0, 41.5], [468.0, 43.0], [496.0, 58.5]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1095.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 39.0, "minX": 1.0, "maxY": 9111.5, "series": [{"data": [[2.0, 2409.0], [3.0, 5131.5], [4.0, 6596.0], [5.0, 1785.0], [6.0, 7595.5], [7.0, 2003.0], [8.0, 9111.5], [9.0, 2195.0], [10.0, 5659.0], [17.0, 1110.0], [18.0, 1102.5], [21.0, 1769.0], [26.0, 2438.0], [27.0, 6512.0], [28.0, 5637.0], [32.0, 1412.5], [39.0, 1234.0], [41.0, 1279.0], [43.0, 1380.0], [46.0, 1104.5], [66.0, 1209.5], [72.0, 2540.0], [73.0, 1469.0], [75.0, 1103.0], [88.0, 1309.5], [97.0, 1889.0], [102.0, 1103.0], [104.0, 1959.5], [105.0, 1488.0], [108.0, 1868.5], [117.0, 1102.0], [125.0, 1468.0], [127.0, 1826.0], [142.0, 1104.0], [149.0, 1109.0], [148.0, 1106.0], [159.0, 2101.0], [163.0, 1262.0], [175.0, 4775.0], [182.0, 1500.0], [198.0, 1514.0], [201.0, 2925.0], [213.0, 1112.0], [223.0, 1114.0], [227.0, 2544.0], [231.0, 3138.0], [269.0, 1289.0], [267.0, 1104.0], [279.0, 2046.0], [297.0, 3671.0], [294.0, 1105.0], [303.0, 1103.0], [288.0, 1698.0], [319.0, 2972.0], [318.0, 1135.0], [306.0, 1962.0], [335.0, 1104.0], [323.0, 1117.0], [328.0, 1113.0], [324.0, 1112.0], [332.0, 1110.0], [334.0, 1104.0], [329.0, 1103.0], [322.0, 1620.5], [325.0, 1107.0], [333.0, 1105.0], [351.0, 1107.0], [336.0, 1107.0], [338.0, 1105.0], [350.0, 1424.5], [344.0, 1107.0], [340.0, 1105.0], [337.0, 1105.0], [339.0, 1107.0], [353.0, 1811.0], [365.0, 1104.0], [352.0, 1103.0], [360.0, 1124.5], [358.0, 1730.0], [357.0, 1635.0], [368.0, 1391.0], [391.0, 1120.0], [399.0, 1103.0], [392.0, 1545.0], [410.0, 1103.5], [413.0, 1116.0], [401.0, 1627.0], [427.0, 1110.0], [426.0, 1108.0], [416.0, 1577.5], [444.0, 1145.0], [439.0, 1121.0], [433.0, 1377.0], [452.0, 1107.0], [478.0, 2080.5], [468.0, 1628.0], [470.0, 1260.0], [481.0, 1146.0], [496.0, 1103.0], [513.0, 5520.0], [522.0, 1110.0], [555.0, 6070.0], [565.0, 1104.0], [568.0, 1108.0], [558.0, 1572.0], [576.0, 1106.0], [595.0, 1122.0], [598.0, 3372.5], [593.0, 1105.0], [589.0, 1358.0], [587.0, 1123.0], [636.0, 1157.0], [637.0, 1106.0], [626.0, 1118.5], [622.0, 1726.0], [624.0, 1557.0], [669.0, 1818.0], [666.0, 1106.0], [670.0, 1108.0], [658.0, 1105.0], [657.0, 1106.0], [668.0, 1105.0], [659.0, 1104.0], [663.0, 1106.0], [652.0, 1117.0], [641.0, 1830.0], [664.0, 1379.0], [665.0, 1106.0], [655.0, 1107.0], [650.0, 1110.0], [648.0, 1109.0], [661.0, 1110.0], [660.0, 1107.0], [698.0, 1400.5], [679.0, 1107.0], [675.0, 1105.0], [688.0, 1220.0], [674.0, 1105.0], [672.0, 1103.0], [695.0, 1128.0], [677.0, 1107.0], [735.0, 1112.0], [716.0, 1107.0], [766.0, 3547.5], [739.0, 1108.0], [755.0, 1120.0], [772.0, 1106.0], [776.0, 1111.0], [803.0, 1109.0], [828.0, 1755.0], [813.0, 1106.0], [861.0, 1744.0], [837.0, 1307.0], [841.0, 1109.0], [845.0, 1110.0], [884.0, 1110.0], [892.0, 1111.0], [871.0, 1105.0], [923.0, 3209.0], [903.0, 1108.0], [946.0, 1108.0], [934.0, 1149.5], [939.0, 4445.0], [956.0, 1109.0], [930.0, 1105.0], [929.0, 1106.0], [968.0, 1107.0], [1095.0, 2639.5], [1.0, 5113.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[513.0, 42.5], [595.0, 40.0], [637.0, 45.0], [669.0, 88.0], [652.0, 49.5], [659.0, 41.5], [641.0, 51.0], [648.0, 41.0], [655.0, 42.0], [675.0, 42.5], [695.0, 46.0], [677.0, 41.0], [735.0, 40.0], [766.0, 4400.0], [755.0, 39.5], [861.0, 42.0], [837.0, 1110.0], [923.0, 5602.5], [903.0, 41.0], [939.0, 4502.5], [930.0, 41.0], [956.0, 60.0], [1095.0, 1045.0], [5.0, 44.0], [9.0, 41.5], [10.0, 43.0], [21.0, 41.0], [28.0, 39.0], [75.0, 41.0], [159.0, 1247.5], [182.0, 43.0], [213.0, 42.0], [1.0, 41.0], [294.0, 43.0], [319.0, 1954.0], [335.0, 43.5], [325.0, 49.0], [338.0, 39.5], [340.0, 43.0], [339.0, 41.5], [353.0, 42.5], [365.0, 40.0], [352.0, 43.0], [360.0, 46.0], [426.0, 58.0], [444.0, 44.0], [452.0, 41.5], [468.0, 43.0], [496.0, 58.5]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1095.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 53.583333333333336, "minX": 1.68416772E12, "maxY": 389.6666666666667, "series": [{"data": [[1.68416778E12, 389.6666666666667], [1.68416796E12, 262.35], [1.68416802E12, 53.583333333333336], [1.68416784E12, 372.96666666666664], [1.6841679E12, 334.0], [1.68416772E12, 261.6333333333333]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68416802E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.05, "minX": 1.68416772E12, "maxY": 388.2, "series": [{"data": [[1.68416778E12, 388.2], [1.68416796E12, 256.43333333333334], [1.68416802E12, 65.38333333333334], [1.68416784E12, 344.3], [1.6841679E12, 355.1333333333333], [1.68416772E12, 260.6166666666667]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.68416778E12, 1.5166666666666666], [1.68416796E12, 0.05], [1.68416802E12, 0.05], [1.68416784E12, 1.0333333333333334], [1.6841679E12, 0.5666666666666667], [1.68416772E12, 0.9166666666666666]], "isOverall": false, "label": "429", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68416802E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.05, "minX": 1.68416772E12, "maxY": 388.2, "series": [{"data": [[1.68416778E12, 388.2], [1.68416796E12, 256.43333333333334], [1.68416802E12, 65.38333333333334], [1.68416784E12, 344.3], [1.6841679E12, 355.1333333333333], [1.68416772E12, 260.6166666666667]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.68416778E12, 1.5166666666666666], [1.68416796E12, 0.05], [1.68416802E12, 0.05], [1.68416784E12, 1.0333333333333334], [1.6841679E12, 0.5666666666666667], [1.68416772E12, 0.9166666666666666]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68416802E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.05, "minX": 1.68416772E12, "maxY": 388.2, "series": [{"data": [[1.68416778E12, 388.2], [1.68416796E12, 256.43333333333334], [1.68416802E12, 65.38333333333334], [1.68416784E12, 344.3], [1.6841679E12, 355.1333333333333], [1.68416772E12, 260.6166666666667]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.68416778E12, 1.5166666666666666], [1.68416796E12, 0.05], [1.68416802E12, 0.05], [1.68416784E12, 1.0333333333333334], [1.6841679E12, 0.5666666666666667], [1.68416772E12, 0.9166666666666666]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68416802E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

