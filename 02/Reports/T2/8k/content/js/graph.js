/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 0.0, "minX": 0.0, "maxY": 34911.0, "series": [{"data": [[0.0, 0.0], [0.1, 42.0], [0.2, 1091.0], [0.3, 1092.0], [0.4, 1092.0], [0.5, 1093.0], [0.6, 1093.0], [0.7, 1093.0], [0.8, 1094.0], [0.9, 1094.0], [1.0, 1094.0], [1.1, 1094.0], [1.2, 1095.0], [1.3, 1095.0], [1.4, 1095.0], [1.5, 1095.0], [1.6, 1095.0], [1.7, 1095.0], [1.8, 1095.0], [1.9, 1096.0], [2.0, 1096.0], [2.1, 1096.0], [2.2, 1096.0], [2.3, 1096.0], [2.4, 1096.0], [2.5, 1096.0], [2.6, 1096.0], [2.7, 1096.0], [2.8, 1097.0], [2.9, 1097.0], [3.0, 1097.0], [3.1, 1097.0], [3.2, 1097.0], [3.3, 1097.0], [3.4, 1097.0], [3.5, 1097.0], [3.6, 1097.0], [3.7, 1097.0], [3.8, 1097.0], [3.9, 1098.0], [4.0, 1098.0], [4.1, 1098.0], [4.2, 1098.0], [4.3, 1098.0], [4.4, 1098.0], [4.5, 1098.0], [4.6, 1098.0], [4.7, 1098.0], [4.8, 1098.0], [4.9, 1098.0], [5.0, 1098.0], [5.1, 1098.0], [5.2, 1099.0], [5.3, 1099.0], [5.4, 1099.0], [5.5, 1099.0], [5.6, 1099.0], [5.7, 1099.0], [5.8, 1099.0], [5.9, 1099.0], [6.0, 1099.0], [6.1, 1099.0], [6.2, 1099.0], [6.3, 1099.0], [6.4, 1099.0], [6.5, 1099.0], [6.6, 1100.0], [6.7, 1100.0], [6.8, 1100.0], [6.9, 1100.0], [7.0, 1100.0], [7.1, 1100.0], [7.2, 1100.0], [7.3, 1100.0], [7.4, 1100.0], [7.5, 1100.0], [7.6, 1100.0], [7.7, 1100.0], [7.8, 1100.0], [7.9, 1100.0], [8.0, 1100.0], [8.1, 1101.0], [8.2, 1101.0], [8.3, 1101.0], [8.4, 1101.0], [8.5, 1101.0], [8.6, 1101.0], [8.7, 1101.0], [8.8, 1101.0], [8.9, 1101.0], [9.0, 1101.0], [9.1, 1101.0], [9.2, 1101.0], [9.3, 1101.0], [9.4, 1101.0], [9.5, 1102.0], [9.6, 1102.0], [9.7, 1102.0], [9.8, 1102.0], [9.9, 1102.0], [10.0, 1102.0], [10.1, 1102.0], [10.2, 1102.0], [10.3, 1102.0], [10.4, 1102.0], [10.5, 1102.0], [10.6, 1102.0], [10.7, 1102.0], [10.8, 1102.0], [10.9, 1102.0], [11.0, 1103.0], [11.1, 1103.0], [11.2, 1103.0], [11.3, 1103.0], [11.4, 1103.0], [11.5, 1103.0], [11.6, 1103.0], [11.7, 1103.0], [11.8, 1103.0], [11.9, 1103.0], [12.0, 1103.0], [12.1, 1103.0], [12.2, 1103.0], [12.3, 1103.0], [12.4, 1104.0], [12.5, 1104.0], [12.6, 1104.0], [12.7, 1104.0], [12.8, 1104.0], [12.9, 1104.0], [13.0, 1104.0], [13.1, 1104.0], [13.2, 1104.0], [13.3, 1104.0], [13.4, 1104.0], [13.5, 1104.0], [13.6, 1104.0], [13.7, 1105.0], [13.8, 1105.0], [13.9, 1105.0], [14.0, 1105.0], [14.1, 1105.0], [14.2, 1105.0], [14.3, 1105.0], [14.4, 1105.0], [14.5, 1105.0], [14.6, 1105.0], [14.7, 1105.0], [14.8, 1105.0], [14.9, 1106.0], [15.0, 1106.0], [15.1, 1106.0], [15.2, 1106.0], [15.3, 1106.0], [15.4, 1106.0], [15.5, 1106.0], [15.6, 1106.0], [15.7, 1106.0], [15.8, 1106.0], [15.9, 1107.0], [16.0, 1107.0], [16.1, 1107.0], [16.2, 1107.0], [16.3, 1107.0], [16.4, 1107.0], [16.5, 1107.0], [16.6, 1107.0], [16.7, 1107.0], [16.8, 1107.0], [16.9, 1108.0], [17.0, 1108.0], [17.1, 1108.0], [17.2, 1108.0], [17.3, 1108.0], [17.4, 1108.0], [17.5, 1108.0], [17.6, 1108.0], [17.7, 1108.0], [17.8, 1108.0], [17.9, 1109.0], [18.0, 1109.0], [18.1, 1109.0], [18.2, 1109.0], [18.3, 1109.0], [18.4, 1109.0], [18.5, 1109.0], [18.6, 1109.0], [18.7, 1110.0], [18.8, 1110.0], [18.9, 1110.0], [19.0, 1110.0], [19.1, 1110.0], [19.2, 1110.0], [19.3, 1110.0], [19.4, 1110.0], [19.5, 1110.0], [19.6, 1111.0], [19.7, 1111.0], [19.8, 1111.0], [19.9, 1111.0], [20.0, 1111.0], [20.1, 1111.0], [20.2, 1111.0], [20.3, 1111.0], [20.4, 1112.0], [20.5, 1112.0], [20.6, 1112.0], [20.7, 1112.0], [20.8, 1112.0], [20.9, 1112.0], [21.0, 1112.0], [21.1, 1112.0], [21.2, 1113.0], [21.3, 1113.0], [21.4, 1113.0], [21.5, 1113.0], [21.6, 1113.0], [21.7, 1113.0], [21.8, 1113.0], [21.9, 1114.0], [22.0, 1114.0], [22.1, 1114.0], [22.2, 1114.0], [22.3, 1114.0], [22.4, 1114.0], [22.5, 1114.0], [22.6, 1115.0], [22.7, 1115.0], [22.8, 1115.0], [22.9, 1115.0], [23.0, 1115.0], [23.1, 1115.0], [23.2, 1115.0], [23.3, 1116.0], [23.4, 1116.0], [23.5, 1116.0], [23.6, 1116.0], [23.7, 1116.0], [23.8, 1116.0], [23.9, 1117.0], [24.0, 1117.0], [24.1, 1117.0], [24.2, 1117.0], [24.3, 1117.0], [24.4, 1117.0], [24.5, 1118.0], [24.6, 1118.0], [24.7, 1118.0], [24.8, 1118.0], [24.9, 1118.0], [25.0, 1119.0], [25.1, 1119.0], [25.2, 1119.0], [25.3, 1119.0], [25.4, 1119.0], [25.5, 1120.0], [25.6, 1120.0], [25.7, 1120.0], [25.8, 1120.0], [25.9, 1120.0], [26.0, 1121.0], [26.1, 1121.0], [26.2, 1121.0], [26.3, 1121.0], [26.4, 1122.0], [26.5, 1122.0], [26.6, 1122.0], [26.7, 1122.0], [26.8, 1123.0], [26.9, 1123.0], [27.0, 1123.0], [27.1, 1123.0], [27.2, 1124.0], [27.3, 1124.0], [27.4, 1124.0], [27.5, 1124.0], [27.6, 1125.0], [27.7, 1125.0], [27.8, 1125.0], [27.9, 1125.0], [28.0, 1126.0], [28.1, 1126.0], [28.2, 1126.0], [28.3, 1127.0], [28.4, 1127.0], [28.5, 1127.0], [28.6, 1128.0], [28.7, 1128.0], [28.8, 1128.0], [28.9, 1129.0], [29.0, 1129.0], [29.1, 1129.0], [29.2, 1130.0], [29.3, 1130.0], [29.4, 1131.0], [29.5, 1131.0], [29.6, 1131.0], [29.7, 1132.0], [29.8, 1132.0], [29.9, 1133.0], [30.0, 1133.0], [30.1, 1133.0], [30.2, 1134.0], [30.3, 1134.0], [30.4, 1135.0], [30.5, 1135.0], [30.6, 1136.0], [30.7, 1136.0], [30.8, 1137.0], [30.9, 1137.0], [31.0, 1138.0], [31.1, 1138.0], [31.2, 1139.0], [31.3, 1140.0], [31.4, 1140.0], [31.5, 1141.0], [31.6, 1142.0], [31.7, 1142.0], [31.8, 1143.0], [31.9, 1144.0], [32.0, 1145.0], [32.1, 1146.0], [32.2, 1147.0], [32.3, 1148.0], [32.4, 1149.0], [32.5, 1150.0], [32.6, 1151.0], [32.7, 1152.0], [32.8, 1153.0], [32.9, 1154.0], [33.0, 1155.0], [33.1, 1157.0], [33.2, 1158.0], [33.3, 1159.0], [33.4, 1161.0], [33.5, 1162.0], [33.6, 1163.0], [33.7, 1165.0], [33.8, 1167.0], [33.9, 1168.0], [34.0, 1170.0], [34.1, 1172.0], [34.2, 1174.0], [34.3, 1175.0], [34.4, 1177.0], [34.5, 1179.0], [34.6, 1181.0], [34.7, 1182.0], [34.8, 1184.0], [34.9, 1186.0], [35.0, 1188.0], [35.1, 1190.0], [35.2, 1192.0], [35.3, 1194.0], [35.4, 1196.0], [35.5, 1198.0], [35.6, 1199.0], [35.7, 1201.0], [35.8, 1203.0], [35.9, 1204.0], [36.0, 1206.0], [36.1, 1208.0], [36.2, 1210.0], [36.3, 1211.0], [36.4, 1213.0], [36.5, 1214.0], [36.6, 1216.0], [36.7, 1218.0], [36.8, 1219.0], [36.9, 1221.0], [37.0, 1223.0], [37.1, 1224.0], [37.2, 1226.0], [37.3, 1228.0], [37.4, 1230.0], [37.5, 1232.0], [37.6, 1234.0], [37.7, 1236.0], [37.8, 1238.0], [37.9, 1240.0], [38.0, 1242.0], [38.1, 1244.0], [38.2, 1246.0], [38.3, 1248.0], [38.4, 1250.0], [38.5, 1253.0], [38.6, 1255.0], [38.7, 1257.0], [38.8, 1259.0], [38.9, 1261.0], [39.0, 1263.0], [39.1, 1265.0], [39.2, 1267.0], [39.3, 1269.0], [39.4, 1271.0], [39.5, 1273.0], [39.6, 1276.0], [39.7, 1278.0], [39.8, 1280.0], [39.9, 1283.0], [40.0, 1285.0], [40.1, 1287.0], [40.2, 1290.0], [40.3, 1292.0], [40.4, 1294.0], [40.5, 1296.0], [40.6, 1298.0], [40.7, 1301.0], [40.8, 1303.0], [40.9, 1305.0], [41.0, 1308.0], [41.1, 1310.0], [41.2, 1312.0], [41.3, 1315.0], [41.4, 1317.0], [41.5, 1319.0], [41.6, 1321.0], [41.7, 1323.0], [41.8, 1326.0], [41.9, 1328.0], [42.0, 1330.0], [42.1, 1332.0], [42.2, 1334.0], [42.3, 1337.0], [42.4, 1339.0], [42.5, 1341.0], [42.6, 1343.0], [42.7, 1346.0], [42.8, 1348.0], [42.9, 1350.0], [43.0, 1353.0], [43.1, 1355.0], [43.2, 1358.0], [43.3, 1360.0], [43.4, 1363.0], [43.5, 1365.0], [43.6, 1367.0], [43.7, 1371.0], [43.8, 1373.0], [43.9, 1376.0], [44.0, 1379.0], [44.1, 1382.0], [44.2, 1385.0], [44.3, 1388.0], [44.4, 1391.0], [44.5, 1394.0], [44.6, 1396.0], [44.7, 1399.0], [44.8, 1402.0], [44.9, 1405.0], [45.0, 1408.0], [45.1, 1410.0], [45.2, 1413.0], [45.3, 1415.0], [45.4, 1418.0], [45.5, 1421.0], [45.6, 1423.0], [45.7, 1426.0], [45.8, 1429.0], [45.9, 1432.0], [46.0, 1434.0], [46.1, 1437.0], [46.2, 1440.0], [46.3, 1442.0], [46.4, 1445.0], [46.5, 1448.0], [46.6, 1451.0], [46.7, 1453.0], [46.8, 1456.0], [46.9, 1459.0], [47.0, 1462.0], [47.1, 1465.0], [47.2, 1467.0], [47.3, 1470.0], [47.4, 1472.0], [47.5, 1474.0], [47.6, 1477.0], [47.7, 1480.0], [47.8, 1482.0], [47.9, 1484.0], [48.0, 1487.0], [48.1, 1489.0], [48.2, 1491.0], [48.3, 1493.0], [48.4, 1496.0], [48.5, 1498.0], [48.6, 1501.0], [48.7, 1504.0], [48.8, 1506.0], [48.9, 1509.0], [49.0, 1512.0], [49.1, 1515.0], [49.2, 1517.0], [49.3, 1520.0], [49.4, 1523.0], [49.5, 1526.0], [49.6, 1529.0], [49.7, 1532.0], [49.8, 1535.0], [49.9, 1538.0], [50.0, 1542.0], [50.1, 1545.0], [50.2, 1548.0], [50.3, 1551.0], [50.4, 1554.0], [50.5, 1556.0], [50.6, 1559.0], [50.7, 1562.0], [50.8, 1564.0], [50.9, 1566.0], [51.0, 1569.0], [51.1, 1571.0], [51.2, 1573.0], [51.3, 1576.0], [51.4, 1578.0], [51.5, 1580.0], [51.6, 1582.0], [51.7, 1585.0], [51.8, 1588.0], [51.9, 1590.0], [52.0, 1592.0], [52.1, 1595.0], [52.2, 1598.0], [52.3, 1601.0], [52.4, 1604.0], [52.5, 1607.0], [52.6, 1611.0], [52.7, 1615.0], [52.8, 1619.0], [52.9, 1622.0], [53.0, 1626.0], [53.1, 1629.0], [53.2, 1632.0], [53.3, 1635.0], [53.4, 1639.0], [53.5, 1643.0], [53.6, 1647.0], [53.7, 1651.0], [53.8, 1654.0], [53.9, 1658.0], [54.0, 1663.0], [54.1, 1666.0], [54.2, 1670.0], [54.3, 1674.0], [54.4, 1677.0], [54.5, 1681.0], [54.6, 1685.0], [54.7, 1688.0], [54.8, 1691.0], [54.9, 1695.0], [55.0, 1698.0], [55.1, 1702.0], [55.2, 1705.0], [55.3, 1708.0], [55.4, 1711.0], [55.5, 1714.0], [55.6, 1717.0], [55.7, 1721.0], [55.8, 1724.0], [55.9, 1727.0], [56.0, 1730.0], [56.1, 1733.0], [56.2, 1736.0], [56.3, 1739.0], [56.4, 1742.0], [56.5, 1745.0], [56.6, 1747.0], [56.7, 1749.0], [56.8, 1752.0], [56.9, 1754.0], [57.0, 1757.0], [57.1, 1759.0], [57.2, 1762.0], [57.3, 1765.0], [57.4, 1767.0], [57.5, 1769.0], [57.6, 1772.0], [57.7, 1775.0], [57.8, 1778.0], [57.9, 1780.0], [58.0, 1783.0], [58.1, 1786.0], [58.2, 1789.0], [58.3, 1791.0], [58.4, 1794.0], [58.5, 1797.0], [58.6, 1799.0], [58.7, 1802.0], [58.8, 1805.0], [58.9, 1808.0], [59.0, 1811.0], [59.1, 1814.0], [59.2, 1817.0], [59.3, 1820.0], [59.4, 1822.0], [59.5, 1825.0], [59.6, 1828.0], [59.7, 1830.0], [59.8, 1833.0], [59.9, 1836.0], [60.0, 1838.0], [60.1, 1841.0], [60.2, 1844.0], [60.3, 1846.0], [60.4, 1849.0], [60.5, 1852.0], [60.6, 1855.0], [60.7, 1857.0], [60.8, 1859.0], [60.9, 1862.0], [61.0, 1865.0], [61.1, 1868.0], [61.2, 1871.0], [61.3, 1874.0], [61.4, 1877.0], [61.5, 1880.0], [61.6, 1883.0], [61.7, 1886.0], [61.8, 1889.0], [61.9, 1892.0], [62.0, 1895.0], [62.1, 1898.0], [62.2, 1902.0], [62.3, 1905.0], [62.4, 1908.0], [62.5, 1911.0], [62.6, 1915.0], [62.7, 1918.0], [62.8, 1922.0], [62.9, 1925.0], [63.0, 1928.0], [63.1, 1931.0], [63.2, 1934.0], [63.3, 1938.0], [63.4, 1941.0], [63.5, 1944.0], [63.6, 1948.0], [63.7, 1951.0], [63.8, 1954.0], [63.9, 1957.0], [64.0, 1960.0], [64.1, 1962.0], [64.2, 1965.0], [64.3, 1968.0], [64.4, 1972.0], [64.5, 1974.0], [64.6, 1978.0], [64.7, 1981.0], [64.8, 1984.0], [64.9, 1987.0], [65.0, 1991.0], [65.1, 1994.0], [65.2, 1998.0], [65.3, 2002.0], [65.4, 2006.0], [65.5, 2010.0], [65.6, 2013.0], [65.7, 2016.0], [65.8, 2020.0], [65.9, 2023.0], [66.0, 2027.0], [66.1, 2030.0], [66.2, 2034.0], [66.3, 2037.0], [66.4, 2040.0], [66.5, 2042.0], [66.6, 2045.0], [66.7, 2048.0], [66.8, 2051.0], [66.9, 2054.0], [67.0, 2057.0], [67.1, 2060.0], [67.2, 2063.0], [67.3, 2066.0], [67.4, 2069.0], [67.5, 2072.0], [67.6, 2074.0], [67.7, 2077.0], [67.8, 2080.0], [67.9, 2083.0], [68.0, 2085.0], [68.1, 2088.0], [68.2, 2091.0], [68.3, 2094.0], [68.4, 2097.0], [68.5, 2101.0], [68.6, 2104.0], [68.7, 2107.0], [68.8, 2110.0], [68.9, 2113.0], [69.0, 2116.0], [69.1, 2119.0], [69.2, 2122.0], [69.3, 2125.0], [69.4, 2128.0], [69.5, 2131.0], [69.6, 2135.0], [69.7, 2139.0], [69.8, 2141.0], [69.9, 2145.0], [70.0, 2149.0], [70.1, 2153.0], [70.2, 2157.0], [70.3, 2161.0], [70.4, 2165.0], [70.5, 2169.0], [70.6, 2172.0], [70.7, 2175.0], [70.8, 2179.0], [70.9, 2183.0], [71.0, 2186.0], [71.1, 2191.0], [71.2, 2195.0], [71.3, 2200.0], [71.4, 2203.0], [71.5, 2207.0], [71.6, 2212.0], [71.7, 2217.0], [71.8, 2222.0], [71.9, 2227.0], [72.0, 2231.0], [72.1, 2237.0], [72.2, 2242.0], [72.3, 2247.0], [72.4, 2252.0], [72.5, 2257.0], [72.6, 2263.0], [72.7, 2269.0], [72.8, 2275.0], [72.9, 2280.0], [73.0, 2285.0], [73.1, 2291.0], [73.2, 2295.0], [73.3, 2301.0], [73.4, 2306.0], [73.5, 2310.0], [73.6, 2316.0], [73.7, 2321.0], [73.8, 2327.0], [73.9, 2333.0], [74.0, 2338.0], [74.1, 2343.0], [74.2, 2348.0], [74.3, 2353.0], [74.4, 2359.0], [74.5, 2364.0], [74.6, 2368.0], [74.7, 2373.0], [74.8, 2378.0], [74.9, 2382.0], [75.0, 2388.0], [75.1, 2392.0], [75.2, 2398.0], [75.3, 2404.0], [75.4, 2409.0], [75.5, 2415.0], [75.6, 2422.0], [75.7, 2427.0], [75.8, 2434.0], [75.9, 2439.0], [76.0, 2446.0], [76.1, 2451.0], [76.2, 2456.0], [76.3, 2461.0], [76.4, 2467.0], [76.5, 2472.0], [76.6, 2477.0], [76.7, 2483.0], [76.8, 2489.0], [76.9, 2494.0], [77.0, 2500.0], [77.1, 2504.0], [77.2, 2510.0], [77.3, 2515.0], [77.4, 2520.0], [77.5, 2525.0], [77.6, 2531.0], [77.7, 2536.0], [77.8, 2542.0], [77.9, 2548.0], [78.0, 2554.0], [78.1, 2560.0], [78.2, 2566.0], [78.3, 2571.0], [78.4, 2575.0], [78.5, 2581.0], [78.6, 2586.0], [78.7, 2593.0], [78.8, 2600.0], [78.9, 2606.0], [79.0, 2612.0], [79.1, 2619.0], [79.2, 2626.0], [79.3, 2632.0], [79.4, 2638.0], [79.5, 2645.0], [79.6, 2652.0], [79.7, 2658.0], [79.8, 2664.0], [79.9, 2670.0], [80.0, 2676.0], [80.1, 2682.0], [80.2, 2689.0], [80.3, 2695.0], [80.4, 2702.0], [80.5, 2707.0], [80.6, 2713.0], [80.7, 2719.0], [80.8, 2726.0], [80.9, 2732.0], [81.0, 2739.0], [81.1, 2747.0], [81.2, 2755.0], [81.3, 2762.0], [81.4, 2770.0], [81.5, 2777.0], [81.6, 2785.0], [81.7, 2793.0], [81.8, 2800.0], [81.9, 2807.0], [82.0, 2815.0], [82.1, 2823.0], [82.2, 2830.0], [82.3, 2837.0], [82.4, 2844.0], [82.5, 2852.0], [82.6, 2859.0], [82.7, 2866.0], [82.8, 2873.0], [82.9, 2881.0], [83.0, 2889.0], [83.1, 2896.0], [83.2, 2903.0], [83.3, 2912.0], [83.4, 2921.0], [83.5, 2928.0], [83.6, 2934.0], [83.7, 2942.0], [83.8, 2950.0], [83.9, 2958.0], [84.0, 2966.0], [84.1, 2975.0], [84.2, 2984.0], [84.3, 2992.0], [84.4, 3000.0], [84.5, 3006.0], [84.6, 3014.0], [84.7, 3023.0], [84.8, 3031.0], [84.9, 3039.0], [85.0, 3047.0], [85.1, 3055.0], [85.2, 3064.0], [85.3, 3073.0], [85.4, 3082.0], [85.5, 3091.0], [85.6, 3101.0], [85.7, 3109.0], [85.8, 3118.0], [85.9, 3127.0], [86.0, 3137.0], [86.1, 3146.0], [86.2, 3154.0], [86.3, 3164.0], [86.4, 3173.0], [86.5, 3182.0], [86.6, 3192.0], [86.7, 3202.0], [86.8, 3211.0], [86.9, 3219.0], [87.0, 3230.0], [87.1, 3240.0], [87.2, 3250.0], [87.3, 3261.0], [87.4, 3273.0], [87.5, 3286.0], [87.6, 3297.0], [87.7, 3309.0], [87.8, 3319.0], [87.9, 3330.0], [88.0, 3341.0], [88.1, 3355.0], [88.2, 3367.0], [88.3, 3380.0], [88.4, 3393.0], [88.5, 3410.0], [88.6, 3425.0], [88.7, 3441.0], [88.8, 3460.0], [88.9, 3476.0], [89.0, 3491.0], [89.1, 3506.0], [89.2, 3524.0], [89.3, 3542.0], [89.4, 3563.0], [89.5, 3587.0], [89.6, 3604.0], [89.7, 3624.0], [89.8, 3647.0], [89.9, 3671.0], [90.0, 3694.0], [90.1, 3716.0], [90.2, 3735.0], [90.3, 3758.0], [90.4, 3779.0], [90.5, 3800.0], [90.6, 3824.0], [90.7, 3844.0], [90.8, 3864.0], [90.9, 3888.0], [91.0, 3912.0], [91.1, 3941.0], [91.2, 3968.0], [91.3, 3997.0], [91.4, 4027.0], [91.5, 4051.0], [91.6, 4077.0], [91.7, 4105.0], [91.8, 4133.0], [91.9, 4159.0], [92.0, 4187.0], [92.1, 4214.0], [92.2, 4244.0], [92.3, 4275.0], [92.4, 4312.0], [92.5, 4356.0], [92.6, 4401.0], [92.7, 4444.0], [92.8, 4483.0], [92.9, 4525.0], [93.0, 4565.0], [93.1, 4610.0], [93.2, 4660.0], [93.3, 4712.0], [93.4, 4769.0], [93.5, 4832.0], [93.6, 4905.0], [93.7, 4977.0], [93.8, 5047.0], [93.9, 5141.0], [94.0, 5229.0], [94.1, 5353.0], [94.2, 5484.0], [94.3, 5596.0], [94.4, 5692.0], [94.5, 5801.0], [94.6, 5894.0], [94.7, 6038.0], [94.8, 6163.0], [94.9, 6261.0], [95.0, 6394.0], [95.1, 6504.0], [95.2, 6608.0], [95.3, 6729.0], [95.4, 6851.0], [95.5, 6982.0], [95.6, 7127.0], [95.7, 7275.0], [95.8, 7439.0], [95.9, 7573.0], [96.0, 7713.0], [96.1, 7937.0], [96.2, 8187.0], [96.3, 8477.0], [96.4, 8826.0], [96.5, 9265.0], [96.6, 9538.0], [96.7, 9940.0], [96.8, 10478.0], [96.9, 11066.0], [97.0, 16565.0], [97.1, 16894.0], [97.2, 17110.0], [97.3, 17366.0], [97.4, 17768.0], [97.5, 18058.0], [97.6, 18301.0], [97.7, 18527.0], [97.8, 18741.0], [97.9, 19071.0], [98.0, 19183.0], [98.1, 19207.0], [98.2, 19232.0], [98.3, 19260.0], [98.4, 19294.0], [98.5, 19339.0], [98.6, 19383.0], [98.7, 19424.0], [98.8, 19473.0], [98.9, 19514.0], [99.0, 19557.0], [99.1, 19608.0], [99.2, 19720.0], [99.3, 19822.0], [99.4, 20174.0], [99.5, 20448.0], [99.6, 22366.0], [99.7, 23634.0], [99.8, 24288.0], [99.9, 25167.0], [100.0, 34911.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 46499.0, "series": [{"data": [[0.0, 252.0], [34900.0, 1.0], [500.0, 1.0], [1000.0, 10165.0], [1100.0, 46499.0], [1200.0, 8052.0], [1300.0, 6498.0], [1400.0, 6123.0], [1500.0, 5946.0], [1600.0, 4430.0], [1700.0, 5723.0], [1800.0, 5628.0], [1900.0, 4954.0], [2000.0, 5161.0], [2100.0, 4522.0], [2200.0, 3165.0], [2300.0, 3126.0], [2400.0, 2818.0], [2500.0, 2872.0], [2600.0, 2514.0], [2700.0, 2282.0], [2800.0, 2168.0], [2900.0, 1996.0], [3000.0, 1896.0], [3100.0, 1754.0], [3200.0, 1501.0], [3300.0, 1298.0], [3400.0, 1008.0], [3500.0, 816.0], [3600.0, 721.0], [3700.0, 759.0], [3800.0, 713.0], [3900.0, 585.0], [4000.0, 590.0], [4100.0, 570.0], [4200.0, 532.0], [4300.0, 364.0], [4400.0, 388.0], [4500.0, 376.0], [4600.0, 327.0], [4800.0, 235.0], [4700.0, 262.0], [5000.0, 195.0], [4900.0, 233.0], [5100.0, 168.0], [5200.0, 145.0], [5300.0, 129.0], [5400.0, 119.0], [5600.0, 166.0], [5500.0, 150.0], [5800.0, 167.0], [5700.0, 144.0], [6100.0, 141.0], [5900.0, 108.0], [6000.0, 123.0], [6200.0, 146.0], [6300.0, 130.0], [6400.0, 144.0], [6500.0, 147.0], [6600.0, 134.0], [6700.0, 137.0], [6900.0, 116.0], [6800.0, 127.0], [7000.0, 124.0], [7100.0, 93.0], [7400.0, 108.0], [7200.0, 106.0], [7300.0, 102.0], [7500.0, 118.0], [7600.0, 114.0], [7800.0, 74.0], [7700.0, 73.0], [7900.0, 69.0], [8000.0, 75.0], [8100.0, 50.0], [8300.0, 64.0], [8400.0, 48.0], [8500.0, 52.0], [8200.0, 57.0], [8700.0, 54.0], [8600.0, 28.0], [8800.0, 44.0], [8900.0, 39.0], [9100.0, 35.0], [9200.0, 31.0], [9000.0, 34.0], [9300.0, 64.0], [9400.0, 67.0], [9500.0, 49.0], [9600.0, 43.0], [9700.0, 37.0], [9900.0, 26.0], [9800.0, 38.0], [10200.0, 30.0], [10100.0, 36.0], [10000.0, 27.0], [10300.0, 35.0], [10600.0, 34.0], [10400.0, 23.0], [10500.0, 28.0], [10700.0, 21.0], [10900.0, 24.0], [11200.0, 5.0], [10800.0, 32.0], [11000.0, 30.0], [11100.0, 23.0], [11600.0, 6.0], [11400.0, 9.0], [11500.0, 5.0], [11700.0, 1.0], [11300.0, 10.0], [11800.0, 4.0], [12000.0, 1.0], [12200.0, 1.0], [11900.0, 1.0], [12100.0, 2.0], [12300.0, 6.0], [12600.0, 2.0], [12400.0, 2.0], [12500.0, 4.0], [12700.0, 1.0], [12900.0, 2.0], [13100.0, 3.0], [13300.0, 1.0], [13000.0, 4.0], [13200.0, 2.0], [13500.0, 2.0], [13400.0, 1.0], [13600.0, 1.0], [14000.0, 2.0], [14300.0, 1.0], [14400.0, 2.0], [14800.0, 1.0], [14900.0, 1.0], [16100.0, 1.0], [16300.0, 3.0], [17200.0, 56.0], [16600.0, 38.0], [17000.0, 74.0], [16800.0, 69.0], [16400.0, 7.0], [17400.0, 39.0], [18200.0, 70.0], [17600.0, 28.0], [17800.0, 41.0], [18000.0, 79.0], [18400.0, 68.0], [18600.0, 86.0], [19200.0, 540.0], [19400.0, 355.0], [19000.0, 28.0], [18800.0, 61.0], [19600.0, 179.0], [19800.0, 70.0], [20400.0, 183.0], [20000.0, 64.0], [20200.0, 15.0], [20800.0, 40.0], [21000.0, 1.0], [21200.0, 1.0], [21400.0, 1.0], [22400.0, 6.0], [21600.0, 1.0], [22000.0, 1.0], [21800.0, 1.0], [22200.0, 3.0], [22600.0, 9.0], [22800.0, 7.0], [23000.0, 7.0], [23200.0, 17.0], [23400.0, 22.0], [23600.0, 25.0], [23800.0, 24.0], [24000.0, 27.0], [24200.0, 23.0], [24400.0, 22.0], [24600.0, 21.0], [24800.0, 12.0], [25000.0, 13.0], [25200.0, 11.0], [25400.0, 13.0], [25600.0, 7.0], [25800.0, 5.0], [26200.0, 5.0], [26400.0, 7.0], [26000.0, 3.0], [26600.0, 3.0], [26800.0, 1.0], [27400.0, 1.0], [27200.0, 1.0], [27600.0, 1.0], [27800.0, 1.0], [28200.0, 1.0], [28400.0, 1.0], [28000.0, 2.0], [28800.0, 1.0], [29000.0, 2.0], [29200.0, 2.0], [29400.0, 7.0], [29600.0, 4.0], [30000.0, 1.0], [33900.0, 1.0], [16500.0, 43.0], [16700.0, 40.0], [16900.0, 76.0], [17100.0, 73.0], [17300.0, 69.0], [17500.0, 31.0], [17700.0, 47.0], [17900.0, 46.0], [18100.0, 64.0], [18300.0, 72.0], [19100.0, 276.0], [19300.0, 367.0], [18500.0, 63.0], [18700.0, 73.0], [18900.0, 36.0], [19500.0, 342.0], [19700.0, 145.0], [19900.0, 43.0], [20300.0, 18.0], [20100.0, 23.0], [20700.0, 2.0], [20500.0, 24.0], [20900.0, 6.0], [21100.0, 1.0], [21300.0, 1.0], [21500.0, 1.0], [22500.0, 6.0], [21700.0, 4.0], [21900.0, 1.0], [22300.0, 4.0], [23300.0, 16.0], [22700.0, 14.0], [22900.0, 15.0], [23100.0, 14.0], [23500.0, 19.0], [23700.0, 32.0], [23900.0, 20.0], [24100.0, 19.0], [24300.0, 23.0], [24500.0, 20.0], [24700.0, 13.0], [24900.0, 13.0], [25100.0, 25.0], [25300.0, 16.0], [25500.0, 13.0], [25700.0, 10.0], [25900.0, 5.0], [26100.0, 8.0], [26300.0, 4.0], [26500.0, 1.0], [27100.0, 3.0], [27500.0, 3.0], [27700.0, 1.0], [29300.0, 5.0], [29100.0, 1.0], [29500.0, 3.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 34900.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 2742.0, "minX": 1.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 79695.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 77397.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 79695.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 2742.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 2808.6821526844587, "minX": 1.68420192E12, "maxY": 3000.0, "series": [{"data": [[1.68420204E12, 3000.0], [1.68420222E12, 2808.6821526844587], [1.68420216E12, 3000.0], [1.68420198E12, 3000.0], [1.68420192E12, 3000.0], [1.6842021E12, 3000.0]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68420222E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 1091.0, "minX": 585.0, "maxY": 11484.0, "series": [{"data": [[604.0, 1581.0], [607.0, 1502.0], [593.0, 6292.0], [592.0, 6244.0], [595.0, 6281.0], [594.0, 6233.0], [597.0, 6243.0], [596.0, 6282.0], [606.0, 1496.0], [605.0, 1499.0], [603.0, 1507.0], [602.0, 1518.0], [601.0, 5285.0], [600.0, 11414.0], [591.0, 6249.0], [590.0, 7346.0], [589.0, 7569.0], [588.0, 7569.0], [587.0, 7580.0], [586.0, 6608.0], [585.0, 6786.0], [599.0, 11484.0], [598.0, 5134.0], [637.0, 1495.0], [638.0, 1499.0], [636.0, 1499.0], [635.0, 1497.0], [634.0, 1493.75], [615.0, 1507.0], [613.0, 1501.6666666666667], [610.0, 1528.3333333333333], [623.0, 1501.0], [621.0, 1493.75], [617.0, 1496.6666666666667], [629.0, 1490.6666666666667], [627.0, 1562.0], [626.0, 1592.0], [625.0, 1493.0], [669.0, 1437.0], [659.0, 1292.0], [671.0, 1442.5], [656.0, 1451.0], [667.0, 1446.0], [665.0, 1445.5], [655.0, 1451.0], [641.0, 1482.0], [640.0, 1489.5], [643.0, 1485.0], [642.0, 1493.0], [647.0, 1479.0], [646.0, 1485.0], [654.0, 1303.0], [653.0, 1465.0], [652.0, 1469.0], [651.0, 1473.0], [650.0, 1476.0], [649.0, 1481.5], [663.0, 1482.5], [661.0, 1447.0], [660.0, 10550.0], [658.0, 1553.0], [657.0, 1530.0], [702.0, 1489.0], [703.0, 1469.0], [689.0, 1430.0], [691.0, 1428.0], [690.0, 1434.6666666666667], [701.0, 1467.0], [700.0, 1322.5], [698.0, 1422.0], [697.0, 1427.0], [696.0, 1435.0], [679.0, 1434.0], [678.0, 1439.0], [675.0, 11122.0], [674.0, 1435.0], [686.0, 1434.0], [685.0, 1435.0], [683.0, 1441.0], [682.0, 1436.0], [681.0, 1436.0], [693.0, 1428.0], [692.0, 1442.0], [728.0, 1435.0], [732.0, 1428.0], [735.0, 1414.0], [722.0, 1449.0], [725.0, 1455.5], [723.0, 1440.0], [734.0, 1417.0], [733.0, 1444.0], [731.0, 1455.0], [730.0, 1432.0], [729.0, 1432.0], [719.0, 1459.6666666666667], [704.0, 1452.0], [706.0, 1461.0], [705.0, 1465.0], [708.0, 1447.0], [707.0, 1462.0], [710.0, 1463.0], [709.0, 1461.0], [718.0, 1450.0], [716.0, 1442.0], [714.0, 1449.0], [713.0, 1415.0], [727.0, 1436.0], [726.0, 1456.0], [764.0, 1287.0], [767.0, 1308.0], [753.0, 1364.0], [752.0, 1364.3333333333333], [755.0, 10897.0], [754.0, 1361.0], [766.0, 1288.0], [765.0, 1292.0], [763.0, 1286.0], [762.0, 1319.0], [761.0, 1320.0], [760.0, 1304.0], [749.0, 1361.0], [738.0, 1372.0], [737.0, 6184.0], [740.0, 1343.0], [739.0, 1353.0], [743.0, 1359.0], [741.0, 1350.0], [746.0, 1367.0], [745.0, 1357.0], [757.0, 1305.0], [756.0, 1351.0], [793.0, 1100.0], [798.0, 1100.0], [799.0, 1194.0], [785.0, 1229.0], [784.0, 1232.0], [787.0, 1107.0], [786.0, 1109.0], [789.0, 1110.0], [788.0, 1118.0], [797.0, 1150.5], [795.0, 1101.0], [794.0, 1201.0], [792.0, 1101.0], [774.0, 1286.0], [773.0, 1292.0], [772.0, 1287.0], [771.0, 1303.5], [769.0, 1312.0], [768.0, 1312.0], [783.0, 1233.0], [782.0, 1232.0], [781.0, 1237.0], [780.0, 1246.0], [779.0, 1304.0], [778.0, 1305.0], [777.0, 1306.0], [776.0, 1307.0], [791.0, 1101.0], [790.0, 1106.0], [828.0, 10334.0], [831.0, 3028.0], [817.0, 1094.0], [816.0, 1098.0], [819.0, 1101.0], [818.0, 1100.0], [821.0, 1100.0], [820.0, 1106.0], [830.0, 9179.0], [829.0, 9772.0], [827.0, 9797.0], [826.0, 9872.0], [825.0, 9874.0], [824.0, 10005.0], [815.0, 1102.0], [802.0, 1147.0], [800.0, 1199.0], [805.0, 1190.0], [804.0, 1190.0], [807.0, 1190.0], [806.0, 1194.0], [814.0, 1097.0], [813.0, 1105.0], [812.0, 1141.5], [810.0, 1188.0], [809.0, 1192.0], [808.0, 1190.0], [823.0, 1095.0], [822.0, 1105.0], [850.0, 1577.5], [862.0, 1534.5], [859.0, 1583.5], [858.0, 1594.5], [857.0, 1590.0], [846.0, 1584.5], [833.0, 1600.0], [832.0, 1683.0], [835.0, 1601.0], [834.0, 1455.0], [837.0, 1595.0], [836.0, 1596.0], [844.0, 1537.0], [843.0, 1535.3333333333333], [840.0, 1594.3333333333333], [855.0, 1574.0], [854.0, 1602.0], [852.0, 1586.0], [848.0, 1443.0], [883.0, 1564.0], [895.0, 1564.0], [892.0, 1570.5], [890.0, 1514.3333333333333], [888.0, 1573.0], [879.0, 1491.0], [866.0, 1520.6666666666667], [864.0, 1546.5], [869.0, 1603.0], [868.0, 1505.5], [877.0, 1585.6666666666667], [875.0, 1538.6666666666667], [872.0, 1589.0], [886.0, 1572.0], [885.0, 1496.5], [884.0, 1478.0], [880.0, 1534.0], [925.0, 1545.0], [916.0, 2400.0], [926.0, 1542.0], [913.0, 1569.3333333333333], [915.0, 1564.0], [914.0, 1565.0], [924.0, 1503.0], [921.0, 1373.0], [920.0, 1384.0], [902.0, 1573.0], [901.0, 1590.0], [899.0, 1588.0], [898.0, 1559.5], [896.0, 1490.6666666666667], [910.0, 1428.0], [909.0, 1557.0], [908.0, 1568.0], [907.0, 1560.0], [905.0, 1574.0], [904.0, 1471.0], [919.0, 1559.0], [918.0, 1529.0], [917.0, 1531.0], [957.0, 1316.0], [948.0, 1423.0], [959.0, 1265.5], [945.0, 1397.0], [944.0, 1386.0], [947.0, 1448.0], [946.0, 1397.0], [956.0, 1271.0], [955.0, 1337.0], [954.0, 1407.6666666666667], [934.0, 1505.0], [933.0, 1531.0], [932.0, 1422.0], [931.0, 1364.0], [930.0, 1429.0], [929.0, 1507.0], [928.0, 1403.0], [943.0, 1410.5], [940.0, 1509.0], [939.0, 1452.0], [936.0, 1418.0], [951.0, 1414.0], [950.0, 1419.0], [949.0, 1422.0], [988.0, 1387.0], [991.0, 1405.0], [978.0, 1338.5], [976.0, 1317.0], [990.0, 1376.0], [989.0, 1295.0], [987.0, 1311.0], [986.0, 1252.0], [985.0, 1262.0], [984.0, 1259.0], [975.0, 1309.3333333333333], [961.0, 1271.0], [964.0, 1302.6666666666667], [962.0, 1426.0], [967.0, 1257.0], [965.0, 1264.0], [973.0, 1391.0], [972.0, 1397.0], [970.0, 1409.0], [969.0, 1651.3333333333333], [983.0, 1275.6666666666667], [980.0, 1324.5], [1016.0, 1328.0], [1022.0, 1323.0], [1023.0, 1324.0], [1009.0, 1329.0], [1021.0, 1323.0], [1018.0, 1326.0], [1017.0, 1327.0], [1007.0, 1333.0], [993.0, 1402.0], [992.0, 1398.0], [995.0, 1318.0], [994.0, 1291.0], [997.0, 1381.0], [996.0, 2194.0], [999.0, 1363.0], [998.0, 1363.0], [1006.0, 1334.0], [1005.0, 1338.0], [1003.0, 1342.0], [1002.0, 1351.0], [1001.0, 1359.0], [1000.0, 1360.0], [1015.0, 1325.0], [1014.0, 1326.6666666666667], [1011.0, 1329.0], [1010.0, 1330.0], [1072.0, 2079.0], [1062.0, 1099.0], [1082.0, 1110.3333333333333], [1076.0, 1095.0], [1074.0, 1107.0], [1054.0, 1106.0], [1028.0, 1319.0], [1026.0, 1318.6666666666667], [1034.0, 1310.0], [1030.0, 1317.0], [1038.0, 1306.0], [1036.0, 1304.0], [1052.0, 1104.0], [1048.0, 1170.0], [1044.0, 1292.0], [1042.0, 1137.0], [1040.0, 1306.0], [1068.0, 1102.0], [1066.0, 1099.5], [1064.0, 1099.0], [1058.0, 1105.0], [1140.0, 1095.0], [1124.0, 1110.0], [1144.0, 1105.0], [1148.0, 1102.0], [1122.0, 1425.3333333333333], [1120.0, 1102.0], [1142.0, 1097.0], [1138.0, 1098.0], [1102.0, 1100.0], [1100.0, 1104.0], [1098.0, 1108.5], [1096.0, 1119.0], [1094.0, 1096.0], [1092.0, 1096.5], [1090.0, 1130.0], [1088.0, 1097.0], [1116.0, 1102.0], [1112.0, 1101.0], [1110.0, 1102.0], [1108.0, 1096.0], [1134.0, 1095.0], [1132.0, 1104.0], [1130.0, 1104.0], [1190.0, 1112.0], [1208.0, 1101.0], [1206.0, 1099.0], [1164.0, 1095.0], [1162.0, 1105.0], [1160.0, 1097.5], [1158.0, 1094.0], [1156.0, 1096.0], [1152.0, 1097.0], [1180.0, 1095.0], [1178.0, 1099.0], [1176.0, 1102.0], [1174.0, 1109.0], [1172.0, 1109.5], [1170.0, 1110.0], [1168.0, 1165.0], [1198.0, 1103.0], [1194.0, 1116.0], [1192.0, 1135.0], [1188.0, 1109.0], [1186.0, 1131.0], [1184.0, 1131.0], [1256.0, 1103.5], [1270.0, 1103.0], [1264.0, 1102.0], [1230.0, 1109.0], [1228.0, 1095.0], [1220.0, 1103.0], [1218.0, 1100.0], [1216.0, 1098.0], [1242.0, 1101.75], [1236.0, 1111.0], [1234.0, 1096.0], [1232.0, 1098.0], [1262.0, 1101.5], [1260.0, 1101.4], [1258.0, 1104.0], [1254.0, 1106.5], [1252.0, 1104.0], [1250.0, 1099.75], [1338.0, 1100.3333333333335], [1342.0, 1103.0], [1334.0, 1099.0], [1332.0, 1102.0], [1330.0, 1100.0], [1294.0, 1104.0], [1292.0, 1109.0], [1290.0, 1107.0], [1288.0, 1098.0], [1286.0, 1102.5], [1284.0, 1094.0], [1304.0, 1106.0], [1300.0, 1103.0], [1298.0, 1101.6666666666667], [1320.0, 1103.0], [1316.0, 1102.0], [1314.0, 1100.0], [1312.0, 1102.0], [1394.0, 1616.0], [1380.0, 8001.0], [1400.0, 1575.0], [1402.0, 1604.0], [1378.0, 7370.0], [1376.0, 1094.0], [1398.0, 1574.0], [1392.0, 1751.0], [1358.0, 1101.0], [1356.0, 1099.5], [1352.0, 1098.6666666666667], [1374.0, 1094.0], [1372.0, 1098.5], [1370.0, 1098.0], [1368.0, 1098.0], [1366.0, 1096.0], [1362.0, 1094.0], [1360.0, 1094.3333333333333], [1390.0, 1587.0], [1386.0, 1594.0], [1384.0, 1734.0], [1444.0, 1648.5], [1468.0, 1557.0], [1470.0, 1649.0], [1442.0, 1604.0], [1440.0, 1644.5], [1466.0, 1552.0], [1462.0, 1694.0], [1458.0, 1640.5], [1420.0, 1649.5], [1418.0, 1706.0], [1416.0, 1592.5], [1414.0, 1714.0], [1412.0, 1677.3333333333333], [1408.0, 1666.0], [1436.0, 1656.0], [1428.0, 1556.0], [1424.0, 1581.0], [1452.0, 1581.0], [1450.0, 1547.0], [1446.0, 1548.0], [1484.0, 1220.0], [1534.0, 1233.0], [1532.0, 1204.5], [1530.0, 1217.0], [1482.0, 1346.0], [1480.0, 7467.0], [1478.0, 7630.0], [1476.0, 1533.0], [1474.0, 1507.0], [1584.0, 1121.6666666666667], [1596.0, 1122.5], [1598.0, 1130.0], [1568.0, 1149.0], [1590.0, 1124.0], [1588.0, 1119.0], [1586.0, 1143.0], [1566.0, 7368.0], [1536.0, 1187.0], [1542.0, 1312.0], [1540.0, 1281.0], [1546.0, 1188.0], [1544.0, 1325.0], [1550.0, 1321.0], [1548.0, 1249.5], [1562.0, 1116.0], [1560.0, 1192.0], [1556.0, 1176.0], [1554.0, 1183.0], [1582.0, 1124.0], [1576.0, 1120.0], [1574.0, 1161.0], [1572.0, 1149.0], [1648.0, 1103.0], [1640.0, 1102.0], [1660.0, 1099.0], [1658.0, 1100.25], [1656.0, 1101.5], [1630.0, 1106.0], [1602.0, 1125.0], [1600.0, 1123.5], [1606.0, 1108.0], [1604.0, 1118.0], [1610.0, 1123.0], [1608.0, 1125.0], [1614.0, 1112.0], [1612.0, 1111.5], [1626.0, 1103.0], [1622.0, 1098.0], [1620.0, 1100.0], [1618.0, 1110.5], [1616.0, 1119.0], [1646.0, 1103.0], [1644.0, 1107.0], [1642.0, 1121.0], [1634.0, 1102.0], [1632.0, 1111.0], [1712.0, 1102.0], [1720.0, 1095.0], [1724.0, 1128.0], [1718.0, 1093.0], [1706.0, 1111.0], [1704.0, 1101.0], [1690.0, 1103.5], [1678.0, 1104.5714285714287], [1686.0, 1100.0], [1680.0, 1104.5], [1786.0, 1116.0], [1788.0, 1109.0], [1772.0, 1115.6666666666667], [1768.0, 1116.25], [1766.0, 1115.0], [1764.0, 1123.5], [1762.0, 1117.0], [1790.0, 1114.8], [1784.0, 1111.0], [1782.0, 1116.0], [1780.0, 1113.6666666666667], [1778.0, 1116.0], [1776.0, 1116.3333333333333], [1758.0, 1119.5], [1752.0, 1115.5], [1748.0, 1113.0], [1746.0, 1113.5], [1824.0, 1111.0], [1854.0, 1104.0], [1826.0, 1109.0], [1828.0, 1108.6666666666667], [1830.0, 1108.0], [1832.0, 1106.0], [1852.0, 1103.0], [1846.0, 1104.0], [1844.0, 1104.6666666666667], [1796.0, 1112.5], [1798.0, 1113.0], [1800.0, 1113.0], [1802.0, 1112.0], [1818.0, 1112.0], [1816.0, 1111.0], [1836.0, 1107.0], [1888.0, 1097.0], [1896.0, 1328.0], [1912.0, 1239.5], [1894.0, 1095.875], [1898.0, 1322.0], [1900.0, 1302.0], [1910.0, 1256.5], [1906.0, 1272.0], [1904.0, 1280.0], [1860.0, 1102.0], [1856.0, 1102.6666666666667], [1864.0, 1104.0], [1868.0, 1100.6666666666665], [1876.0, 1100.75], [1874.0, 1100.6666666666667], [1902.0, 1311.0], [1976.0, 1135.0], [1980.0, 1123.0], [1954.0, 1263.3333333333333], [1960.0, 1277.5], [1956.0, 1256.0], [1962.0, 1238.0], [1966.0, 1242.0], [1982.0, 1120.0], [1978.0, 1126.0], [1974.0, 1152.0], [1972.0, 8020.0], [1970.0, 1169.0], [1968.0, 1241.0], [1920.0, 1238.0], [1924.0, 1238.0], [1930.0, 1278.75], [1950.0, 1286.0], [1946.0, 1289.5], [1944.0, 1265.0], [1942.0, 1286.5], [1938.0, 1292.0], [2040.0, 1104.0], [2046.0, 1103.3333333333333], [2018.0, 1109.0], [2022.0, 1107.0], [2024.0, 1106.0], [2028.0, 1107.0], [2030.0, 1105.0], [2044.0, 1103.3333333333333], [2042.0, 1103.0], [2038.0, 1103.0], [2036.0, 1105.0], [2032.0, 1116.5], [1998.0, 1109.5], [1994.0, 1116.5], [1992.0, 1111.0], [1990.0, 1113.0], [1988.0, 1112.0], [1986.0, 1113.0], [1984.0, 1121.0], [2006.0, 1110.0], [2164.0, 1093.0], [2172.0, 1103.6666666666667], [2112.0, 1100.3333333333333], [2116.0, 1102.0], [2124.0, 1106.25], [2128.0, 1102.5], [2160.0, 1102.3333333333333], [2152.0, 1103.5], [2144.0, 1098.6666666666667], [2108.0, 1102.6], [2052.0, 1102.0], [2060.0, 1104.0], [2064.0, 1101.0], [2068.0, 1100.0], [2072.0, 1100.0], [2076.0, 1130.0], [2100.0, 1102.0], [2084.0, 1099.5], [2140.0, 1101.5], [2296.0, 1106.1333333333334], [2248.0, 1118.0], [2268.0, 1111.0], [2300.0, 1109.0], [2288.0, 1114.0], [2284.0, 1113.5], [2280.0, 1109.0], [2276.0, 1111.0], [2272.0, 1110.0], [2176.0, 1119.5], [2180.0, 1099.0], [2184.0, 1103.5], [2188.0, 1119.0], [2192.0, 1103.0], [2200.0, 1106.0], [2204.0, 1105.0], [2232.0, 1117.0], [2216.0, 1100.0], [2416.0, 6283.333333333333], [2408.0, 7972.0], [2424.0, 3614.0], [2428.0, 5137.5], [2372.0, 1098.0], [2368.0, 1097.5], [2376.0, 1096.3333333333333], [2380.0, 1094.0], [2384.0, 8217.0], [2388.0, 8093.0], [2392.0, 7907.0], [2396.0, 7816.0], [2420.0, 4338.0], [2412.0, 6661.0], [2404.0, 5268.0], [2400.0, 6718.0], [2312.0, 1108.0], [2320.0, 1107.0], [2328.0, 1103.0], [2364.0, 1100.5], [2360.0, 1101.0], [2356.0, 1101.0], [2352.0, 1099.0], [2348.0, 1103.0], [2340.0, 1103.4], [2336.0, 1106.0], [2444.0, 2870.75], [2556.0, 2562.0], [2500.0, 2589.5], [2504.0, 2588.0], [2520.0, 2576.0], [2524.0, 2576.0], [2432.0, 8126.0], [2436.0, 2807.0], [2440.0, 2755.0], [2448.0, 2682.0], [2452.0, 2664.0], [2456.0, 2650.0], [2460.0, 2643.3333333333335], [2488.0, 2594.5], [2480.0, 2604.0], [2476.0, 2606.0], [2472.0, 2618.5], [2468.0, 2631.0], [2464.0, 2637.5], [2668.0, 5316.5], [2680.0, 2071.0], [2684.0, 2432.0], [2628.0, 2538.0], [2632.0, 2539.5], [2644.0, 2533.0], [2652.0, 2530.0], [2676.0, 2119.0], [2672.0, 2949.0], [2664.0, 2519.0], [2660.0, 3068.0], [2656.0, 2532.3333333333335], [2560.0, 2555.0], [2572.0, 2555.0], [2620.0, 2543.0], [2616.0, 2652.0], [2604.0, 2814.5], [2596.0, 2549.0], [2592.0, 2728.6666666666665], [2800.0, 1609.0], [2784.0, 1614.0], [2764.0, 1646.0], [2812.0, 2139.0], [2756.0, 1673.0], [2760.0, 1666.0], [2768.0, 1638.0], [2776.0, 1896.0], [2780.0, 1885.5], [2808.0, 1739.5], [2792.0, 1611.0], [2716.0, 1704.0], [2708.0, 1984.5], [2704.0, 1726.0], [2700.0, 1738.0], [2696.0, 1766.0], [2692.0, 1808.3333333333333], [2688.0, 1818.0], [2744.0, 1680.25], [2740.0, 1685.0], [2732.0, 2012.2], [2728.0, 1690.0], [2724.0, 1693.0], [2720.0, 1698.0], [2884.0, 2122.0], [2880.0, 1589.0], [2896.0, 1762.0], [2900.0, 1852.0], [2904.0, 2122.0], [2908.0, 2117.0], [2940.0, 2112.0], [2924.0, 1847.0], [2844.0, 2129.3333333333335], [2836.0, 1861.75], [2832.0, 1864.5], [2828.0, 1595.0], [2824.0, 1867.5], [2816.0, 2137.0], [2872.0, 1588.0], [2864.0, 1587.0], [2852.0, 1856.5], [2848.0, 1859.5], [2944.0, 2108.0], [3000.0, 2505.123655469393], [2948.0, 1930.3333333333333], [2952.0, 1928.6666666666667], [2956.0, 2111.5], [2960.0, 2109.0], [2964.0, 1563.5], [2996.0, 2079.0], [2980.0, 2114.0], [2976.0, 1735.6666666666667], [2161.0, 1097.0], [2117.0, 1095.0], [2133.0, 1103.3333333333333], [2137.0, 1110.3333333333333], [2169.0, 1106.5], [2157.0, 1103.0], [2149.0, 1102.5], [2073.0, 1100.0], [2061.0, 1101.0], [2057.0, 1103.2], [2049.0, 1108.0], [2109.0, 1098.0], [2105.0, 1096.0], [2101.0, 1102.0], [2097.0, 1096.0], [2093.0, 1097.5], [2085.0, 1102.0], [2081.0, 1100.3333333333333], [2289.0, 1112.0], [2297.0, 1110.5555555555557], [2245.0, 1111.5], [2253.0, 1119.0], [2257.0, 1116.0], [2285.0, 1107.75], [2273.0, 1111.0], [2197.0, 1105.3333333333333], [2189.0, 1109.0], [2237.0, 1115.25], [2221.0, 1118.0], [2217.0, 1116.5], [2373.0, 1096.5], [2425.0, 3608.0], [2429.0, 5875.5], [2369.0, 1098.5], [2377.0, 1097.0], [2381.0, 7801.0], [2385.0, 7378.0], [2389.0, 7200.0], [2393.0, 7884.0], [2397.0, 5777.0], [2421.0, 8793.0], [2417.0, 7387.0], [2413.0, 7561.0], [2409.0, 7921.0], [2405.0, 8182.0], [2401.0, 6739.333333333333], [2309.0, 1106.0], [2317.0, 1106.6666666666667], [2321.0, 1108.0], [2325.0, 1107.0], [2353.0, 1100.6666666666667], [2337.0, 1106.0], [2541.0, 2564.5], [2537.0, 2570.0], [2497.0, 2592.5], [2501.0, 2586.0], [2505.0, 2583.0], [2509.0, 2584.2], [2517.0, 2581.0], [2525.0, 2573.0], [2553.0, 2695.0], [2549.0, 2568.0], [2545.0, 2561.0], [2533.0, 2567.25], [2529.0, 2659.166666666667], [2433.0, 8078.0], [2437.0, 3331.0], [2441.0, 2752.0], [2445.0, 2712.0], [2449.0, 2670.0], [2453.0, 7769.0], [2457.0, 2653.0], [2461.0, 2643.0], [2489.0, 2591.0], [2485.0, 2599.0], [2477.0, 2603.0], [2473.0, 2614.0], [2469.0, 2628.0], [2465.0, 2637.0], [2673.0, 2822.0], [2669.0, 3024.0], [2629.0, 3080.0], [2633.0, 2808.0], [2641.0, 2540.0], [2645.0, 2539.6666666666665], [2649.0, 2537.3333333333335], [2653.0, 2532.0], [2685.0, 1842.0], [2681.0, 2008.0], [2677.0, 2383.5], [2665.0, 2520.0], [2661.0, 2529.6666666666665], [2657.0, 2532.0], [2561.0, 2557.0], [2565.0, 2651.5], [2573.0, 2555.0], [2581.0, 2550.5], [2585.0, 7662.0], [2589.0, 2549.3333333333335], [2617.0, 2543.0], [2613.0, 2542.0], [2609.0, 2810.5], [2601.0, 2681.0], [2801.0, 2145.0], [2805.0, 2145.5], [2753.0, 1671.5], [2761.0, 1661.0], [2773.0, 1814.0], [2777.0, 1626.0], [2781.0, 2157.0], [2813.0, 1597.0], [2809.0, 1961.3333333333333], [2785.0, 1617.0], [2713.0, 1971.75], [2705.0, 1986.0], [2701.0, 1725.0], [2697.0, 1766.0], [2693.0, 1797.0], [2689.0, 1818.0], [2749.0, 1854.3333333333333], [2741.0, 1679.0], [2737.0, 2042.6666666666667], [2733.0, 1687.0], [2729.0, 2226.0], [2725.0, 1695.0], [2721.0, 1696.0], [2941.0, 2110.5], [2885.0, 1587.5], [2889.0, 2122.0], [2897.0, 2124.0], [2905.0, 1937.0], [2909.0, 2118.0], [2937.0, 2113.5], [2921.0, 1576.0], [2913.0, 1981.25], [2845.0, 1950.3333333333333], [2841.0, 1588.0], [2833.0, 2128.0], [2829.0, 2132.0], [2825.0, 1600.5], [2877.0, 1991.25], [2869.0, 1588.0], [2865.0, 1591.0], [2853.0, 1592.5], [2849.0, 1593.0], [2957.0, 2107.0], [2969.0, 2096.0], [2973.0, 2095.0], [2993.0, 2080.0], [2985.0, 1817.25], [2981.0, 2086.5], [1077.0, 1098.0], [1059.0, 1144.0], [1085.0, 1095.6666666666667], [1087.0, 1097.5], [1057.0, 1102.5], [1079.0, 1098.5], [1073.0, 1106.0], [1039.0, 1312.0], [1037.0, 1303.0], [1035.0, 1144.0], [1033.0, 1743.0], [1031.0, 1317.0], [1029.0, 1320.0], [1027.0, 1322.0], [1055.0, 1104.0], [1053.0, 1105.0], [1051.0, 1111.0], [1049.0, 1108.0], [1047.0, 1624.0], [1045.0, 1122.0], [1043.0, 2140.0], [1041.0, 1137.0], [1071.0, 1102.0], [1069.0, 1106.0], [1065.0, 1104.0], [1147.0, 1095.0], [1151.0, 1097.5], [1145.0, 1101.0], [1143.0, 1102.0], [1141.0, 1106.0], [1139.0, 1102.25], [1117.0, 1101.75], [1093.0, 1097.0], [1089.0, 1096.0], [1099.0, 2139.0], [1095.0, 1126.0], [1103.0, 1103.0], [1101.0, 1109.0], [1107.0, 1564.5], [1105.0, 1102.5], [1131.0, 1111.0], [1129.0, 1098.5], [1127.0, 1420.3333333333333], [1125.0, 1106.0], [1201.0, 1100.0], [1209.0, 1106.0], [1215.0, 1100.5], [1187.0, 1960.0], [1185.0, 2035.0], [1207.0, 1100.0], [1205.0, 1105.6666666666667], [1203.0, 1101.5], [1183.0, 1108.3333333333333], [1153.0, 1096.5], [1157.0, 1124.0], [1155.0, 1100.5], [1167.0, 1565.5], [1165.0, 1095.0], [1179.0, 1136.0], [1177.0, 1100.0], [1175.0, 1102.0], [1173.0, 1154.0], [1169.0, 1111.0], [1199.0, 1103.0], [1193.0, 1103.0], [1191.0, 1109.0], [1189.0, 1116.0], [1267.0, 1098.5], [1277.0, 1099.5], [1273.0, 1095.5], [1271.0, 1106.5], [1265.0, 1101.0], [1227.0, 1102.0], [1221.0, 1101.0], [1217.0, 1097.0], [1257.0, 1098.0], [1247.0, 1106.0], [1245.0, 1100.5], [1243.0, 1101.0], [1241.0, 1101.5], [1239.0, 1098.0], [1237.0, 1096.0], [1315.0, 1106.3333333333333], [1343.0, 1100.0], [1333.0, 1105.0], [1329.0, 1096.5], [1293.0, 1095.0], [1291.0, 1103.0], [1289.0, 1097.0], [1285.0, 1094.0], [1283.0, 1099.0], [1281.0, 1100.1666666666665], [1327.0, 1100.5], [1323.0, 1104.0], [1317.0, 1104.0], [1313.0, 1102.5], [1311.0, 1103.6666666666667], [1305.0, 1109.0], [1303.0, 1105.0], [1301.0, 1102.0], [1297.0, 1109.0], [1405.0, 1628.0], [1407.0, 1667.25], [1377.0, 8020.0], [1381.0, 1629.0], [1379.0, 8029.0], [1399.0, 1673.0], [1397.0, 1696.0], [1395.0, 1734.0], [1393.0, 1613.0], [1375.0, 1095.0], [1347.0, 1103.5], [1345.0, 1103.0], [1359.0, 1097.0], [1349.0, 1101.0], [1369.0, 1097.0], [1367.0, 1097.0], [1363.0, 1095.0], [1361.0, 1097.3333333333333], [1391.0, 1589.0], [1389.0, 1604.5], [1387.0, 1715.0], [1385.0, 1603.0], [1469.0, 1586.0], [1471.0, 1507.0], [1441.0, 1647.0], [1451.0, 1595.5], [1449.0, 1587.6666666666667], [1465.0, 1590.5], [1463.0, 7761.0], [1461.0, 1701.5], [1459.0, 1702.0], [1457.0, 1706.0], [1423.0, 1595.5], [1417.0, 1642.0], [1413.0, 1593.0], [1409.0, 1674.0], [1439.0, 1643.5], [1433.0, 1619.5], [1431.0, 1638.0], [1429.0, 1579.0], [1427.0, 1586.5], [1425.0, 1555.0], [1455.0, 1705.0], [1453.0, 1565.0], [1535.0, 1193.0], [1533.0, 1201.0], [1531.0, 1340.0], [1481.0, 9415.0], [1479.0, 7435.0], [1477.0, 7657.0], [1475.0, 1504.0], [1473.0, 1536.5], [1597.0, 1117.0], [1599.0, 1131.0], [1571.0, 1135.0], [1593.0, 1116.0], [1591.0, 1146.1249999999998], [1589.0, 1142.5], [1587.0, 1122.0], [1567.0, 1260.0], [1541.0, 1238.0], [1537.0, 1240.0], [1545.0, 1322.0], [1543.0, 1188.0], [1561.0, 1229.0], [1557.0, 1179.0], [1553.0, 1171.0], [1581.0, 1126.5], [1579.0, 1119.5], [1577.0, 1128.5], [1575.0, 1134.0476190476193], [1663.0, 1098.0], [1641.0, 1097.0], [1661.0, 1100.0], [1615.0, 1103.0], [1609.0, 1152.0], [1607.0, 1110.0], [1605.0, 1133.0], [1603.0, 1119.0], [1601.0, 1126.0], [1629.0, 1100.0], [1627.0, 1103.5], [1625.0, 1111.0], [1623.0, 1101.5], [1621.0, 1097.0], [1647.0, 1103.0], [1645.0, 1100.0], [1643.0, 1101.0], [1639.0, 1107.6666666666667], [1637.0, 1100.0], [1635.0, 1101.0], [1633.0, 1107.0], [1719.0, 1101.0], [1721.0, 1127.0], [1717.0, 1098.75], [1715.0, 1104.0], [1711.0, 1106.5], [1707.0, 1094.0], [1705.0, 1102.333333333333], [1695.0, 1099.0], [1665.0, 1110.0], [1679.0, 1109.0], [1677.0, 1185.5], [1689.0, 1102.0], [1687.0, 1101.0], [1685.0, 1104.0], [1683.0, 1106.6666666666667], [1789.0, 1112.5], [1771.0, 1120.0], [1791.0, 1116.0], [1775.0, 1120.0], [1785.0, 1111.0], [1777.0, 1116.0], [1765.0, 1120.0], [1761.0, 1117.6666666666667], [1755.0, 1115.5], [1739.0, 1124.0], [1753.0, 1122.0], [1751.0, 1115.0], [1749.0, 1117.0], [1747.0, 1123.0], [1849.0, 1103.0], [1827.0, 1108.0], [1825.0, 1108.0], [1829.0, 1108.0], [1835.0, 1107.0], [1853.0, 1102.5], [1847.0, 1103.5], [1841.0, 1104.6666666666667], [1823.0, 1110.0], [1793.0, 1113.6666666666667], [1797.0, 1116.0], [1799.0, 1113.0], [1801.0, 1113.5], [1805.0, 1112.0], [1803.0, 1112.5], [1821.0, 1110.0], [1819.0, 1112.5], [1815.0, 1112.0], [1811.0, 1113.0], [1839.0, 1106.0], [1917.0, 1259.0], [1919.0, 1296.0], [1895.0, 1095.0], [1897.0, 6291.0], [1899.0, 1274.0], [1901.0, 1268.0], [1915.0, 1240.0], [1905.0, 1243.0], [1881.0, 1096.0], [1863.0, 1102.0], [1861.0, 1104.0], [1867.0, 1102.0], [1865.0, 1102.0], [1871.0, 1101.6], [1879.0, 1099.6666666666667], [1903.0, 1298.0], [1973.0, 1152.0], [1983.0, 1117.0], [1961.0, 1290.0], [1965.0, 1260.0], [1963.0, 1232.0], [1967.0, 1285.0], [1981.0, 1168.0], [1979.0, 1149.0], [1977.0, 1133.0], [1975.0, 1164.0], [1971.0, 1159.0], [1969.0, 1237.0], [1951.0, 1288.0], [1923.0, 1297.5], [1921.0, 1287.5], [1925.0, 1237.0], [1927.0, 1270.5], [1935.0, 1244.0], [1933.0, 1254.2], [1949.0, 1292.0], [1947.0, 1237.0], [1943.0, 1291.0], [1939.0, 1291.0], [2021.0, 1105.0], [2041.0, 1106.0], [2023.0, 1106.0], [2025.0, 1105.0], [2027.0, 1105.0], [2029.0, 1126.0], [2039.0, 1104.0], [2035.0, 1107.3333333333333], [2033.0, 1106.0], [1999.0, 1121.3333333333333], [1993.0, 1110.0], [1985.0, 1115.0], [2013.0, 1107.3333333333333], [2001.0, 1110.0], [2162.0, 1109.5], [2114.0, 1100.3333333333333], [2118.0, 1093.0], [2122.0, 1106.0], [2134.0, 1091.0], [2170.0, 1099.0], [2154.0, 4525.0], [2054.0, 1104.0], [2062.0, 1108.0], [2070.0, 1100.5], [2074.0, 1098.0], [2078.0, 1099.0], [2102.0, 1099.3333333333333], [2098.0, 1117.0], [2090.0, 1100.142857142857], [2082.0, 1130.0], [2138.0, 1104.0], [2294.0, 1105.5], [2286.0, 1104.0], [2302.0, 1110.5], [2262.0, 1106.0], [2250.0, 1108.0], [2270.0, 1105.0], [2298.0, 1111.0], [2290.0, 1108.5714285714284], [2234.0, 1121.0], [2182.0, 1104.0], [2186.0, 1103.0], [2190.0, 1103.0], [2194.0, 1101.0], [2198.0, 1103.0], [2206.0, 1100.5], [2226.0, 1107.5], [2210.0, 1106.0], [2418.0, 3840.0], [2430.0, 5081.0], [2378.0, 1095.0], [2382.0, 7660.0], [2386.0, 7373.0], [2390.0, 7921.0], [2394.0, 5836.0], [2398.0, 7765.0], [2426.0, 3601.0], [2422.0, 3650.0], [2414.0, 3983.0], [2410.0, 7902.0], [2406.0, 5976.0], [2402.0, 4662.0], [2366.0, 1100.3333333333333], [2310.0, 1103.0], [2314.0, 1107.0], [2318.0, 1107.0], [2326.0, 1106.0], [2322.0, 1103.6666666666667], [2334.0, 1106.0], [2362.0, 1100.0], [2358.0, 1100.0], [2354.0, 1101.0], [2350.0, 1102.25], [2346.0, 1100.4285714285713], [2342.0, 1104.0], [2338.0, 1105.5], [2550.0, 2565.0], [2542.0, 3101.0], [2498.0, 2592.0], [2502.0, 2585.0], [2514.0, 2582.25], [2518.0, 2580.0], [2526.0, 2571.0], [2538.0, 2834.0], [2534.0, 2567.0], [2434.0, 5491.0], [2438.0, 2764.0], [2442.0, 2760.0], [2446.0, 2693.0], [2450.0, 2670.0], [2454.0, 2657.0], [2458.0, 2647.0], [2462.0, 2643.0], [2494.0, 2590.25], [2490.0, 2590.0], [2486.0, 2595.0], [2474.0, 2609.0], [2470.0, 2628.0], [2466.0, 2636.0], [2678.0, 7216.0], [2630.0, 2545.0], [2638.0, 2535.0], [2634.0, 2606.875], [2646.0, 2537.0], [2650.0, 2534.5], [2654.0, 2529.0], [2686.0, 1832.0], [2682.0, 8785.0], [2674.0, 7368.0], [2670.0, 5034.5], [2666.0, 2779.5], [2662.0, 2798.5], [2658.0, 2533.0], [2562.0, 2556.0], [2566.0, 2555.0], [2570.0, 2556.2], [2578.0, 2550.8], [2574.0, 2827.0], [2586.0, 2553.0], [2606.0, 2544.0], [2602.0, 3085.0], [2598.0, 2552.0], [2594.0, 2548.0], [2794.0, 1790.3333333333333], [2758.0, 1851.0], [2762.0, 2195.0], [2766.0, 1913.0], [2770.0, 1815.6666666666667], [2778.0, 2158.0], [2782.0, 2201.0], [2814.0, 1872.3333333333333], [2798.0, 1609.0], [2790.0, 1880.0], [2786.0, 2152.0], [2718.0, 2070.6666666666665], [2714.0, 1704.0], [2710.0, 1884.6666666666667], [2706.0, 1721.0], [2702.0, 2311.0], [2698.0, 1923.6666666666667], [2694.0, 1779.0], [2690.0, 1820.0], [2750.0, 2033.6666666666667], [2746.0, 1677.5], [2734.0, 1690.0], [2726.0, 1696.0], [2890.0, 2122.0], [2942.0, 1976.25], [2882.0, 1587.0], [2886.0, 4982.0], [2894.0, 1855.0], [2902.0, 1585.0], [2906.0, 1584.0], [2910.0, 2119.0], [2934.0, 2025.3333333333333], [2918.0, 1852.0], [2914.0, 1848.0], [2830.0, 1956.3333333333333], [2826.0, 1601.0], [2822.0, 1867.5], [2878.0, 2122.0], [2866.0, 1895.142857142857], [2858.0, 1912.2], [2854.0, 1859.6666666666667], [2954.0, 2107.0], [2950.0, 2114.0], [2958.0, 2106.0], [2962.0, 2124.0], [2966.0, 1835.5], [2974.0, 2091.0], [2986.0, 2082.5], [2978.0, 1770.4], [2079.0, 1105.0], [2175.0, 1106.75], [2115.0, 1100.0], [2127.0, 1100.0], [2131.0, 1116.0], [2143.0, 1102.0], [2167.0, 1104.5], [2155.0, 1094.0], [2151.0, 1146.0], [2147.0, 1104.0], [2075.0, 1099.0], [2067.0, 1116.0], [2063.0, 1100.0], [2059.0, 1102.0], [2055.0, 1103.0], [2051.0, 1102.5], [2107.0, 1096.0], [2103.0, 1102.0], [2099.0, 1096.0], [2091.0, 1104.5], [2087.0, 1098.0], [2275.0, 1106.75], [2299.0, 1109.0], [2247.0, 1109.0], [2251.0, 1106.5], [2263.0, 1112.0], [2295.0, 1106.0], [2207.0, 1097.0], [2199.0, 1101.6666666666667], [2191.0, 1102.6666666666667], [2179.0, 1107.5], [2227.0, 1104.0], [2223.0, 1115.0], [2271.0, 1109.0], [2267.0, 1108.0], [2427.0, 3594.0], [2431.0, 8186.0], [2371.0, 1098.0], [2379.0, 1095.0], [2383.0, 7655.0], [2387.0, 6056.0], [2391.0, 7887.0], [2395.0, 7849.0], [2399.0, 7730.0], [2423.0, 3626.25], [2419.0, 3802.0], [2415.0, 7525.0], [2411.0, 7759.0], [2407.0, 8055.5], [2403.0, 4641.0], [2363.0, 1100.5], [2307.0, 1109.0], [2315.0, 1107.5], [2323.0, 1101.2], [2327.0, 1103.0], [2335.0, 1105.0], [2331.0, 1106.0], [2359.0, 1101.0], [2347.0, 1103.6000000000001], [2555.0, 2560.3333333333335], [2503.0, 2587.5], [2511.0, 2582.0], [2515.0, 2579.5], [2519.0, 2578.5], [2523.0, 2574.6666666666665], [2547.0, 2922.3333333333335], [2543.0, 2567.0], [2539.0, 3104.0], [2495.0, 2589.0], [2435.0, 2876.0], [2443.0, 2747.0], [2447.0, 3269.0], [2451.0, 2666.0], [2455.0, 2650.0], [2483.0, 2599.5], [2479.0, 2599.5], [2475.0, 2612.0], [2471.0, 2626.0], [2467.0, 2633.0], [2667.0, 3033.0], [2687.0, 1836.0], [2639.0, 2537.0], [2643.0, 2535.0], [2651.0, 2805.0], [2683.0, 1888.5], [2679.0, 2635.0], [2675.0, 2136.0], [2671.0, 7537.0], [2663.0, 2522.0], [2659.0, 2537.0], [2623.0, 2541.0], [2567.0, 2736.0], [2579.0, 2553.5], [2583.0, 2817.5], [2587.0, 2553.0], [2591.0, 2545.0], [2607.0, 2548.5], [2599.0, 2548.5], [2595.0, 2547.0], [2799.0, 1603.0], [2815.0, 1602.0], [2755.0, 1939.5], [2759.0, 2588.5], [2763.0, 2191.0], [2767.0, 1642.0], [2771.0, 2174.0], [2775.0, 1630.5], [2779.0, 1621.0], [2783.0, 1616.0], [2811.0, 1599.0], [2795.0, 1610.0], [2791.0, 2145.5], [2787.0, 1611.0], [2715.0, 1701.0], [2707.0, 1712.5], [2703.0, 1721.0], [2699.0, 1731.0], [2695.0, 1772.0], [2691.0, 1812.0], [2751.0, 2218.0], [2747.0, 2217.0], [2739.0, 1863.0], [2727.0, 2229.0], [2723.0, 1965.0], [2931.0, 1713.0], [2939.0, 1845.5], [2887.0, 1738.142857142857], [2891.0, 2119.5], [2899.0, 1852.5], [2911.0, 2116.0], [2927.0, 1757.3333333333333], [2923.0, 1578.0], [2915.0, 2114.0], [2847.0, 1595.0], [2843.0, 1590.0], [2827.0, 1868.0], [2819.0, 1596.0], [2863.0, 1768.3333333333333], [2947.0, 1931.3333333333333], [2963.0, 1564.0], [2991.0, 2080.0], [2955.0, 2107.0], [2959.0, 2108.0], [2967.0, 1564.0], [2971.0, 2100.5], [2983.0, 2090.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[2981.294805861066, 2492.7423264136387]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 3000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 82038.25, "minX": 1.68420192E12, "maxY": 595430.7166666667, "series": [{"data": [[1.68420204E12, 381534.7833333333], [1.68420222E12, 173954.41666666666], [1.68420216E12, 595430.7166666667], [1.68420198E12, 350990.18333333335], [1.68420192E12, 100973.41666666667], [1.6842021E12, 319149.26666666666]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.68420204E12, 309989.65], [1.68420222E12, 141424.35], [1.68420216E12, 484799.45], [1.68420198E12, 285165.5], [1.68420192E12, 82038.25], [1.6842021E12, 121052.8]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68420222E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 1437.4222179561004, "minX": 1.68420192E12, "maxY": 6610.742147923045, "series": [{"data": [[1.68420204E12, 1547.7882229293912], [1.68420222E12, 1437.4222179561004], [1.68420216E12, 2720.01009573219], [1.68420198E12, 1528.3622659473156], [1.68420192E12, 2717.404743519034], [1.6842021E12, 6610.742147923045]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68420222E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 1437.1435336276843, "minX": 1.68420192E12, "maxY": 3617.992337892607, "series": [{"data": [[1.68420204E12, 1547.4972411175713], [1.68420222E12, 1437.1435336276843], [1.68420216E12, 2719.7606695653976], [1.68420198E12, 1528.1029197080165], [1.68420192E12, 2716.956425813568], [1.6842021E12, 3617.992337892607]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68420222E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 9.583605298521785, "minX": 1.68420192E12, "maxY": 2094.320858662611, "series": [{"data": [[1.68420204E12, 63.267451026187594], [1.68420222E12, 9.583605298521785], [1.68420216E12, 256.8159441655637], [1.68420198E12, 60.586861313868575], [1.68420192E12, 761.5884169884189], [1.6842021E12, 2094.320858662611]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68420222E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 1088.0, "minX": 1.68420192E12, "maxY": 34911.0, "series": [{"data": [[1.68420204E12, 12051.0], [1.68420222E12, 17041.0], [1.68420216E12, 34911.0], [1.68420198E12, 11896.0], [1.68420192E12, 11251.0], [1.6842021E12, 24264.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.68420204E12, 2661.0], [1.68420222E12, 2004.0], [1.68420216E12, 4126.0], [1.68420198E12, 2110.0], [1.68420192E12, 5323.800000000001], [1.6842021E12, 17538.5]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.68420204E12, 4277.980000000003], [1.68420222E12, 7902.889999999999], [1.68420216E12, 9803.590000000066], [1.68420198E12, 5742.980000000003], [1.68420192E12, 8384.740000000002], [1.6842021E12, 23222.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.68420204E12, 2994.0], [1.68420222E12, 2184.0], [1.68420216E12, 5702.850000000002], [1.68420198E12, 2437.9500000000007], [1.68420192E12, 6536.699999999999], [1.6842021E12, 18685.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.68420204E12, 1089.0], [1.68420222E12, 1089.0], [1.68420216E12, 1088.0], [1.68420198E12, 1088.0], [1.68420192E12, 1090.0], [1.6842021E12, 1091.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.68420204E12, 1425.0], [1.68420222E12, 1116.0], [1.68420216E12, 1899.5], [1.68420198E12, 1199.0], [1.68420192E12, 2147.0], [1.6842021E12, 1645.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68420222E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 24.0, "minX": 1.0, "maxY": 20268.0, "series": [{"data": [[2.0, 4305.0], [3.0, 5406.0], [4.0, 6425.0], [5.0, 5046.0], [6.0, 6450.0], [8.0, 2221.5], [9.0, 5383.0], [10.0, 9842.0], [11.0, 7649.5], [12.0, 6600.0], [13.0, 1748.5], [14.0, 6689.5], [15.0, 7640.5], [16.0, 8291.5], [17.0, 3154.0], [22.0, 5217.0], [24.0, 7428.0], [25.0, 2197.0], [27.0, 1866.0], [28.0, 2765.0], [35.0, 2384.5], [34.0, 4266.0], [68.0, 1916.5], [74.0, 1102.0], [83.0, 1817.0], [91.0, 1702.0], [95.0, 1103.0], [92.0, 1599.5], [104.0, 3389.0], [113.0, 1430.0], [115.0, 1557.0], [141.0, 3357.0], [139.0, 1689.0], [147.0, 2070.0], [149.0, 1103.0], [162.0, 1101.0], [165.0, 1100.0], [175.0, 2854.0], [173.0, 1490.0], [190.0, 1102.0], [198.0, 1206.5], [223.0, 17008.0], [228.0, 1436.0], [232.0, 1102.0], [259.0, 3482.0], [273.0, 2946.0], [281.0, 1506.0], [287.0, 1753.0], [290.0, 1118.0], [314.0, 17444.0], [317.0, 1502.0], [315.0, 2564.0], [334.0, 2504.0], [336.0, 1846.0], [340.0, 1516.0], [359.0, 1106.0], [354.0, 1184.0], [370.0, 2902.0], [389.0, 3184.0], [437.0, 1118.0], [485.0, 1939.0], [481.0, 1342.0], [507.0, 1115.0], [503.0, 1937.0], [501.0, 1105.0], [538.0, 1108.0], [518.0, 1109.0], [513.0, 1121.0], [539.0, 1102.0], [527.0, 1117.0], [523.0, 1104.0], [524.0, 1119.5], [540.0, 1105.0], [541.0, 1123.0], [542.0, 1120.0], [543.0, 1102.0], [529.0, 1123.0], [532.0, 1124.0], [537.0, 1101.0], [519.0, 1102.0], [546.0, 1110.0], [544.0, 1134.0], [545.0, 1119.0], [583.0, 1130.0], [595.0, 1101.0], [585.0, 1896.0], [600.0, 1113.0], [577.0, 1119.0], [594.0, 1549.0], [623.0, 1134.0], [634.0, 1352.5], [633.0, 1103.0], [630.0, 1108.0], [622.0, 1124.0], [612.0, 1271.0], [659.0, 1582.0], [663.0, 1137.0], [649.0, 1348.0], [664.0, 1356.5], [641.0, 1571.0], [687.0, 1362.5], [681.0, 1219.0], [706.0, 1557.5], [710.0, 1720.0], [708.0, 1867.0], [734.0, 1116.0], [731.0, 1117.0], [735.0, 1575.5], [747.0, 2114.0], [744.0, 1425.0], [767.0, 1278.0], [786.0, 1234.0], [793.0, 1834.0], [774.0, 17426.5], [813.0, 2476.0], [821.0, 1115.0], [829.0, 2462.5], [820.0, 1175.0], [835.0, 1115.0], [842.0, 2125.0], [844.0, 2536.0], [855.0, 2128.0], [848.0, 1525.0], [869.0, 1822.0], [878.0, 1860.0], [893.0, 1211.0], [891.0, 2335.0], [868.0, 1119.0], [874.0, 1981.0], [873.0, 2058.0], [890.0, 1177.0], [889.0, 2365.0], [879.0, 2088.5], [864.0, 2372.0], [876.0, 2423.0], [901.0, 1877.0], [899.0, 2046.0], [898.0, 2339.0], [922.0, 1152.0], [920.0, 2348.0], [909.0, 1397.0], [919.0, 1714.0], [918.0, 2232.0], [906.0, 1507.0], [904.0, 2434.0], [911.0, 2666.0], [910.0, 1110.0], [896.0, 2284.0], [914.0, 2582.0], [927.0, 1153.0], [924.0, 2323.0], [925.0, 2161.0], [912.0, 2336.5], [923.0, 2407.0], [930.0, 1338.0], [951.0, 1952.0], [948.0, 1627.0], [947.0, 1341.0], [946.0, 1120.0], [958.0, 1571.0], [944.0, 2153.0], [945.0, 1132.5], [929.0, 2753.0], [928.0, 2216.0], [942.0, 1851.0], [940.0, 1841.5], [936.0, 2018.5], [939.0, 2068.5], [954.0, 1833.0], [957.0, 1687.0], [956.0, 1124.0], [955.0, 1115.0], [935.0, 1163.0], [933.0, 2254.0], [931.0, 1107.0], [934.0, 2123.0], [943.0, 1461.0], [962.0, 1196.5], [963.0, 2169.0], [975.0, 1831.0], [970.0, 1133.0], [961.0, 1113.0], [966.0, 1146.0], [974.0, 1152.0], [989.0, 1391.0], [987.0, 2352.0], [977.0, 1379.0], [982.0, 3074.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[543.0, 10501.0], [594.0, 10062.0], [682.0, 19493.0], [675.0, 19296.0], [672.0, 19687.0], [829.0, 10465.0], [820.0, 10162.0], [844.0, 40.0], [848.0, 24.0], [864.0, 41.0], [879.0, 42.0], [876.0, 41.5], [889.0, 40.5], [891.0, 39.5], [869.0, 10125.0], [922.0, 40.0], [914.0, 41.0], [927.0, 40.5], [923.0, 40.0], [924.0, 50.5], [925.0, 41.0], [919.0, 44.0], [918.0, 42.0], [901.0, 38.0], [920.0, 39.0], [898.0, 42.0], [896.0, 40.0], [904.0, 43.0], [912.0, 54.0], [911.0, 42.5], [909.0, 41.5], [933.0, 40.0], [956.0, 40.5], [942.0, 42.0], [944.0, 40.0], [928.0, 42.5], [929.0, 60.0], [943.0, 43.0], [934.0, 41.0], [954.0, 42.0], [955.0, 1351.0], [945.0, 44.5], [948.0, 41.0], [936.0, 41.0], [939.0, 39.0], [977.0, 40.0], [982.0, 40.0], [987.0, 40.0], [966.0, 42.0], [961.0, 10501.0], [10.0, 10099.0], [15.0, 10886.0], [16.0, 10159.0], [34.0, 10401.0], [61.0, 19919.0], [190.0, 10662.5], [1.0, 20268.0], [325.0, 19260.0], [354.0, 58.0], [389.0, 5346.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 989.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 17444.0, "series": [{"data": [[2.0, 4304.0], [3.0, 5404.0], [4.0, 6424.0], [5.0, 5044.5], [6.0, 6448.5], [8.0, 2221.5], [9.0, 5381.0], [10.0, 9842.0], [11.0, 7649.5], [12.0, 6600.0], [13.0, 1748.5], [14.0, 6682.5], [15.0, 7640.5], [16.0, 8291.5], [17.0, 3154.0], [22.0, 5213.5], [24.0, 7428.0], [25.0, 2197.0], [27.0, 1866.0], [28.0, 2765.0], [35.0, 2384.0], [34.0, 4266.0], [68.0, 1916.5], [74.0, 1102.0], [83.0, 1817.0], [91.0, 1702.0], [95.0, 1102.0], [92.0, 1599.5], [104.0, 3389.0], [113.0, 1429.0], [115.0, 1556.0], [141.0, 3357.0], [139.0, 1689.0], [147.0, 2070.0], [149.0, 1103.0], [162.0, 1101.0], [165.0, 1099.0], [175.0, 2854.0], [173.0, 1489.0], [190.0, 1101.0], [198.0, 1206.0], [223.0, 17008.0], [228.0, 1436.0], [232.0, 1101.5], [259.0, 3482.0], [273.0, 2946.0], [281.0, 1506.0], [287.0, 1752.0], [290.0, 1117.5], [314.0, 17444.0], [317.0, 1502.0], [315.0, 2563.0], [334.0, 2504.0], [336.0, 1846.0], [340.0, 1516.0], [359.0, 1106.0], [354.0, 1184.0], [370.0, 2902.0], [389.0, 3184.0], [437.0, 1118.0], [485.0, 1938.0], [481.0, 1342.0], [507.0, 1114.0], [503.0, 1937.0], [501.0, 1105.0], [538.0, 1107.0], [518.0, 1108.0], [513.0, 1120.0], [539.0, 1102.0], [527.0, 1117.0], [523.0, 1103.0], [524.0, 1119.0], [540.0, 1105.0], [541.0, 1122.0], [542.0, 1120.0], [543.0, 1102.0], [529.0, 1123.0], [532.0, 1123.0], [537.0, 1101.0], [519.0, 1101.0], [546.0, 1109.0], [544.0, 1134.0], [545.0, 1119.0], [583.0, 1130.0], [595.0, 1101.0], [585.0, 1896.0], [600.0, 1112.0], [577.0, 1119.0], [594.0, 1549.0], [623.0, 1134.0], [634.0, 1352.5], [633.0, 1102.0], [630.0, 1108.0], [622.0, 1124.0], [612.0, 1271.0], [659.0, 1582.0], [663.0, 1137.0], [649.0, 1348.0], [664.0, 1356.5], [641.0, 1571.0], [687.0, 1362.0], [681.0, 1219.0], [706.0, 1557.0], [710.0, 1719.5], [708.0, 1867.0], [734.0, 1116.0], [731.0, 1116.0], [735.0, 1575.5], [747.0, 2113.0], [744.0, 1425.0], [767.0, 1278.0], [786.0, 1234.0], [793.0, 1833.0], [774.0, 17426.5], [813.0, 2476.0], [821.0, 1114.0], [829.0, 2462.5], [820.0, 1174.0], [835.0, 1115.0], [842.0, 2125.0], [844.0, 2536.0], [855.0, 2127.0], [848.0, 1525.0], [869.0, 1822.0], [878.0, 1860.0], [893.0, 1211.0], [891.0, 2334.0], [868.0, 1119.0], [874.0, 1981.0], [873.0, 2058.0], [890.0, 1177.0], [889.0, 2365.0], [879.0, 2088.5], [864.0, 2371.0], [876.0, 2422.5], [901.0, 1876.0], [899.0, 2046.0], [898.0, 2339.0], [922.0, 1152.0], [920.0, 2347.5], [909.0, 1396.5], [919.0, 1714.0], [918.0, 2232.0], [906.0, 1506.5], [904.0, 2434.0], [911.0, 2666.0], [910.0, 1110.0], [896.0, 2284.0], [914.0, 2582.0], [927.0, 1153.0], [924.0, 2322.5], [925.0, 2161.0], [912.0, 2336.0], [923.0, 2407.0], [930.0, 1338.0], [951.0, 1952.0], [948.0, 1626.5], [947.0, 1340.0], [946.0, 1119.0], [958.0, 1571.0], [944.0, 2152.0], [945.0, 1132.0], [929.0, 2753.0], [928.0, 2215.0], [942.0, 1851.0], [940.0, 1841.0], [936.0, 2018.5], [939.0, 2068.5], [954.0, 1833.0], [957.0, 1687.0], [956.0, 1123.0], [955.0, 1115.0], [935.0, 1163.0], [933.0, 2254.0], [931.0, 1107.0], [934.0, 2123.0], [943.0, 1461.0], [962.0, 1196.5], [963.0, 2169.0], [975.0, 1830.5], [970.0, 1132.5], [961.0, 1113.0], [966.0, 1146.0], [974.0, 1149.5], [989.0, 1391.0], [987.0, 2352.0], [977.0, 1379.0], [982.0, 3074.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[543.0, 10501.0], [594.0, 10062.0], [682.0, 0.0], [675.0, 0.0], [672.0, 0.0], [829.0, 10465.0], [820.0, 10162.0], [844.0, 40.0], [848.0, 0.0], [864.0, 41.0], [879.0, 42.0], [876.0, 41.5], [889.0, 40.5], [891.0, 39.5], [869.0, 10125.0], [922.0, 40.0], [914.0, 41.0], [927.0, 40.5], [923.0, 40.0], [924.0, 50.5], [925.0, 41.0], [919.0, 44.0], [918.0, 42.0], [901.0, 38.0], [920.0, 39.0], [898.0, 42.0], [896.0, 40.0], [904.0, 43.0], [912.0, 54.0], [911.0, 42.5], [909.0, 41.5], [933.0, 40.0], [956.0, 40.5], [942.0, 42.0], [944.0, 40.0], [928.0, 42.5], [929.0, 60.0], [943.0, 43.0], [934.0, 41.0], [954.0, 42.0], [955.0, 1351.0], [945.0, 44.5], [948.0, 41.0], [936.0, 41.0], [939.0, 39.0], [977.0, 40.0], [982.0, 40.0], [987.0, 40.0], [966.0, 42.0], [961.0, 10501.0], [10.0, 10099.0], [15.0, 10886.0], [16.0, 10159.0], [34.0, 10401.0], [61.0, 0.0], [190.0, 10662.5], [1.0, 0.0], [325.0, 0.0], [354.0, 58.0], [389.0, 5346.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 989.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 160.2, "minX": 1.68420192E12, "maxY": 860.4666666666667, "series": [{"data": [[1.68420204E12, 596.3], [1.68420222E12, 252.83333333333334], [1.68420216E12, 860.4666666666667], [1.68420198E12, 534.0], [1.68420192E12, 160.2], [1.6842021E12, 260.1]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68420222E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.68420192E12, "maxY": 888.0166666666667, "series": [{"data": [[1.6842021E12, 40.266666666666666]], "isOverall": false, "label": "Non HTTP response code: javax.net.ssl.SSLException", "isController": false}, {"data": [[1.68420204E12, 570.8666666666667], [1.68420222E12, 260.1666666666667], [1.68420216E12, 888.0166666666667], [1.68420198E12, 525.1666666666666], [1.68420192E12, 151.08333333333334], [1.6842021E12, 222.9]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.68420216E12, 0.3]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.NoHttpResponseException", "isController": false}, {"data": [[1.68420204E12, 0.016666666666666666], [1.68420222E12, 0.2833333333333333], [1.68420216E12, 4.8], [1.6842021E12, 0.03333333333333333]], "isOverall": false, "label": "429", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68420222E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.68420192E12, "maxY": 888.0166666666667, "series": [{"data": [[1.68420204E12, 570.8666666666667], [1.68420222E12, 260.1666666666667], [1.68420216E12, 888.0166666666667], [1.68420198E12, 525.1666666666666], [1.68420192E12, 151.08333333333334], [1.6842021E12, 222.9]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.68420204E12, 0.016666666666666666], [1.68420222E12, 0.2833333333333333], [1.68420216E12, 5.1], [1.6842021E12, 40.3]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68420222E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.68420192E12, "maxY": 888.0166666666667, "series": [{"data": [[1.68420204E12, 570.8666666666667], [1.68420222E12, 260.1666666666667], [1.68420216E12, 888.0166666666667], [1.68420198E12, 525.1666666666666], [1.68420192E12, 151.08333333333334], [1.6842021E12, 222.9]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.68420204E12, 0.016666666666666666], [1.68420222E12, 0.2833333333333333], [1.68420216E12, 5.1], [1.6842021E12, 40.3]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68420222E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

