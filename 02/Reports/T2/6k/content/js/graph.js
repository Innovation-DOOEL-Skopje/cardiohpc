/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 38.0, "minX": 0.0, "maxY": 16426.0, "series": [{"data": [[0.0, 38.0], [0.1, 48.0], [0.2, 1093.0], [0.3, 1094.0], [0.4, 1094.0], [0.5, 1095.0], [0.6, 1095.0], [0.7, 1095.0], [0.8, 1095.0], [0.9, 1095.0], [1.0, 1096.0], [1.1, 1096.0], [1.2, 1096.0], [1.3, 1096.0], [1.4, 1096.0], [1.5, 1096.0], [1.6, 1096.0], [1.7, 1097.0], [1.8, 1097.0], [1.9, 1097.0], [2.0, 1097.0], [2.1, 1097.0], [2.2, 1097.0], [2.3, 1097.0], [2.4, 1097.0], [2.5, 1097.0], [2.6, 1097.0], [2.7, 1097.0], [2.8, 1097.0], [2.9, 1097.0], [3.0, 1098.0], [3.1, 1098.0], [3.2, 1098.0], [3.3, 1098.0], [3.4, 1098.0], [3.5, 1098.0], [3.6, 1098.0], [3.7, 1098.0], [3.8, 1098.0], [3.9, 1098.0], [4.0, 1098.0], [4.1, 1098.0], [4.2, 1098.0], [4.3, 1098.0], [4.4, 1098.0], [4.5, 1098.0], [4.6, 1098.0], [4.7, 1099.0], [4.8, 1099.0], [4.9, 1099.0], [5.0, 1099.0], [5.1, 1099.0], [5.2, 1099.0], [5.3, 1099.0], [5.4, 1099.0], [5.5, 1099.0], [5.6, 1099.0], [5.7, 1099.0], [5.8, 1099.0], [5.9, 1099.0], [6.0, 1099.0], [6.1, 1099.0], [6.2, 1099.0], [6.3, 1099.0], [6.4, 1099.0], [6.5, 1099.0], [6.6, 1099.0], [6.7, 1099.0], [6.8, 1099.0], [6.9, 1099.0], [7.0, 1100.0], [7.1, 1100.0], [7.2, 1100.0], [7.3, 1100.0], [7.4, 1100.0], [7.5, 1100.0], [7.6, 1100.0], [7.7, 1100.0], [7.8, 1100.0], [7.9, 1100.0], [8.0, 1100.0], [8.1, 1100.0], [8.2, 1100.0], [8.3, 1100.0], [8.4, 1100.0], [8.5, 1100.0], [8.6, 1100.0], [8.7, 1100.0], [8.8, 1100.0], [8.9, 1100.0], [9.0, 1100.0], [9.1, 1100.0], [9.2, 1100.0], [9.3, 1100.0], [9.4, 1100.0], [9.5, 1100.0], [9.6, 1101.0], [9.7, 1101.0], [9.8, 1101.0], [9.9, 1101.0], [10.0, 1101.0], [10.1, 1101.0], [10.2, 1101.0], [10.3, 1101.0], [10.4, 1101.0], [10.5, 1101.0], [10.6, 1101.0], [10.7, 1101.0], [10.8, 1101.0], [10.9, 1101.0], [11.0, 1101.0], [11.1, 1101.0], [11.2, 1101.0], [11.3, 1101.0], [11.4, 1101.0], [11.5, 1101.0], [11.6, 1101.0], [11.7, 1101.0], [11.8, 1101.0], [11.9, 1101.0], [12.0, 1101.0], [12.1, 1101.0], [12.2, 1101.0], [12.3, 1101.0], [12.4, 1101.0], [12.5, 1101.0], [12.6, 1102.0], [12.7, 1102.0], [12.8, 1102.0], [12.9, 1102.0], [13.0, 1102.0], [13.1, 1102.0], [13.2, 1102.0], [13.3, 1102.0], [13.4, 1102.0], [13.5, 1102.0], [13.6, 1102.0], [13.7, 1102.0], [13.8, 1102.0], [13.9, 1102.0], [14.0, 1102.0], [14.1, 1102.0], [14.2, 1102.0], [14.3, 1102.0], [14.4, 1102.0], [14.5, 1102.0], [14.6, 1102.0], [14.7, 1102.0], [14.8, 1102.0], [14.9, 1102.0], [15.0, 1102.0], [15.1, 1102.0], [15.2, 1102.0], [15.3, 1102.0], [15.4, 1102.0], [15.5, 1102.0], [15.6, 1102.0], [15.7, 1102.0], [15.8, 1102.0], [15.9, 1102.0], [16.0, 1103.0], [16.1, 1103.0], [16.2, 1103.0], [16.3, 1103.0], [16.4, 1103.0], [16.5, 1103.0], [16.6, 1103.0], [16.7, 1103.0], [16.8, 1103.0], [16.9, 1103.0], [17.0, 1103.0], [17.1, 1103.0], [17.2, 1103.0], [17.3, 1103.0], [17.4, 1103.0], [17.5, 1103.0], [17.6, 1103.0], [17.7, 1103.0], [17.8, 1103.0], [17.9, 1103.0], [18.0, 1103.0], [18.1, 1103.0], [18.2, 1103.0], [18.3, 1103.0], [18.4, 1103.0], [18.5, 1103.0], [18.6, 1103.0], [18.7, 1103.0], [18.8, 1103.0], [18.9, 1103.0], [19.0, 1103.0], [19.1, 1103.0], [19.2, 1103.0], [19.3, 1104.0], [19.4, 1104.0], [19.5, 1104.0], [19.6, 1104.0], [19.7, 1104.0], [19.8, 1104.0], [19.9, 1104.0], [20.0, 1104.0], [20.1, 1104.0], [20.2, 1104.0], [20.3, 1104.0], [20.4, 1104.0], [20.5, 1104.0], [20.6, 1104.0], [20.7, 1104.0], [20.8, 1104.0], [20.9, 1104.0], [21.0, 1104.0], [21.1, 1104.0], [21.2, 1104.0], [21.3, 1104.0], [21.4, 1104.0], [21.5, 1104.0], [21.6, 1104.0], [21.7, 1104.0], [21.8, 1104.0], [21.9, 1104.0], [22.0, 1104.0], [22.1, 1104.0], [22.2, 1104.0], [22.3, 1104.0], [22.4, 1104.0], [22.5, 1104.0], [22.6, 1104.0], [22.7, 1104.0], [22.8, 1105.0], [22.9, 1105.0], [23.0, 1105.0], [23.1, 1105.0], [23.2, 1105.0], [23.3, 1105.0], [23.4, 1105.0], [23.5, 1105.0], [23.6, 1105.0], [23.7, 1105.0], [23.8, 1105.0], [23.9, 1105.0], [24.0, 1105.0], [24.1, 1105.0], [24.2, 1105.0], [24.3, 1105.0], [24.4, 1105.0], [24.5, 1105.0], [24.6, 1105.0], [24.7, 1105.0], [24.8, 1105.0], [24.9, 1105.0], [25.0, 1105.0], [25.1, 1105.0], [25.2, 1105.0], [25.3, 1105.0], [25.4, 1105.0], [25.5, 1105.0], [25.6, 1105.0], [25.7, 1105.0], [25.8, 1105.0], [25.9, 1105.0], [26.0, 1105.0], [26.1, 1106.0], [26.2, 1106.0], [26.3, 1106.0], [26.4, 1106.0], [26.5, 1106.0], [26.6, 1106.0], [26.7, 1106.0], [26.8, 1106.0], [26.9, 1106.0], [27.0, 1106.0], [27.1, 1106.0], [27.2, 1106.0], [27.3, 1106.0], [27.4, 1106.0], [27.5, 1106.0], [27.6, 1106.0], [27.7, 1106.0], [27.8, 1106.0], [27.9, 1106.0], [28.0, 1106.0], [28.1, 1106.0], [28.2, 1106.0], [28.3, 1106.0], [28.4, 1106.0], [28.5, 1106.0], [28.6, 1106.0], [28.7, 1106.0], [28.8, 1106.0], [28.9, 1106.0], [29.0, 1106.0], [29.1, 1106.0], [29.2, 1107.0], [29.3, 1107.0], [29.4, 1107.0], [29.5, 1107.0], [29.6, 1107.0], [29.7, 1107.0], [29.8, 1107.0], [29.9, 1107.0], [30.0, 1107.0], [30.1, 1107.0], [30.2, 1107.0], [30.3, 1107.0], [30.4, 1107.0], [30.5, 1107.0], [30.6, 1107.0], [30.7, 1107.0], [30.8, 1107.0], [30.9, 1107.0], [31.0, 1107.0], [31.1, 1107.0], [31.2, 1107.0], [31.3, 1107.0], [31.4, 1107.0], [31.5, 1107.0], [31.6, 1107.0], [31.7, 1107.0], [31.8, 1107.0], [31.9, 1107.0], [32.0, 1107.0], [32.1, 1108.0], [32.2, 1108.0], [32.3, 1108.0], [32.4, 1108.0], [32.5, 1108.0], [32.6, 1108.0], [32.7, 1108.0], [32.8, 1108.0], [32.9, 1108.0], [33.0, 1108.0], [33.1, 1108.0], [33.2, 1108.0], [33.3, 1108.0], [33.4, 1108.0], [33.5, 1108.0], [33.6, 1108.0], [33.7, 1108.0], [33.8, 1108.0], [33.9, 1108.0], [34.0, 1108.0], [34.1, 1108.0], [34.2, 1108.0], [34.3, 1108.0], [34.4, 1108.0], [34.5, 1108.0], [34.6, 1108.0], [34.7, 1109.0], [34.8, 1109.0], [34.9, 1109.0], [35.0, 1109.0], [35.1, 1109.0], [35.2, 1109.0], [35.3, 1109.0], [35.4, 1109.0], [35.5, 1109.0], [35.6, 1109.0], [35.7, 1109.0], [35.8, 1109.0], [35.9, 1109.0], [36.0, 1109.0], [36.1, 1109.0], [36.2, 1109.0], [36.3, 1109.0], [36.4, 1109.0], [36.5, 1109.0], [36.6, 1109.0], [36.7, 1109.0], [36.8, 1109.0], [36.9, 1109.0], [37.0, 1109.0], [37.1, 1110.0], [37.2, 1110.0], [37.3, 1110.0], [37.4, 1110.0], [37.5, 1110.0], [37.6, 1110.0], [37.7, 1110.0], [37.8, 1110.0], [37.9, 1110.0], [38.0, 1110.0], [38.1, 1110.0], [38.2, 1110.0], [38.3, 1110.0], [38.4, 1110.0], [38.5, 1110.0], [38.6, 1110.0], [38.7, 1110.0], [38.8, 1110.0], [38.9, 1110.0], [39.0, 1110.0], [39.1, 1110.0], [39.2, 1110.0], [39.3, 1111.0], [39.4, 1111.0], [39.5, 1111.0], [39.6, 1111.0], [39.7, 1111.0], [39.8, 1111.0], [39.9, 1111.0], [40.0, 1111.0], [40.1, 1111.0], [40.2, 1111.0], [40.3, 1111.0], [40.4, 1111.0], [40.5, 1111.0], [40.6, 1111.0], [40.7, 1111.0], [40.8, 1111.0], [40.9, 1111.0], [41.0, 1111.0], [41.1, 1111.0], [41.2, 1112.0], [41.3, 1112.0], [41.4, 1112.0], [41.5, 1112.0], [41.6, 1112.0], [41.7, 1112.0], [41.8, 1112.0], [41.9, 1112.0], [42.0, 1112.0], [42.1, 1112.0], [42.2, 1112.0], [42.3, 1112.0], [42.4, 1112.0], [42.5, 1112.0], [42.6, 1112.0], [42.7, 1112.0], [42.8, 1112.0], [42.9, 1112.0], [43.0, 1113.0], [43.1, 1113.0], [43.2, 1113.0], [43.3, 1113.0], [43.4, 1113.0], [43.5, 1113.0], [43.6, 1113.0], [43.7, 1113.0], [43.8, 1113.0], [43.9, 1113.0], [44.0, 1113.0], [44.1, 1113.0], [44.2, 1113.0], [44.3, 1113.0], [44.4, 1113.0], [44.5, 1114.0], [44.6, 1114.0], [44.7, 1114.0], [44.8, 1114.0], [44.9, 1114.0], [45.0, 1114.0], [45.1, 1114.0], [45.2, 1114.0], [45.3, 1114.0], [45.4, 1114.0], [45.5, 1114.0], [45.6, 1114.0], [45.7, 1114.0], [45.8, 1114.0], [45.9, 1115.0], [46.0, 1115.0], [46.1, 1115.0], [46.2, 1115.0], [46.3, 1115.0], [46.4, 1115.0], [46.5, 1115.0], [46.6, 1115.0], [46.7, 1115.0], [46.8, 1115.0], [46.9, 1115.0], [47.0, 1115.0], [47.1, 1115.0], [47.2, 1116.0], [47.3, 1116.0], [47.4, 1116.0], [47.5, 1116.0], [47.6, 1116.0], [47.7, 1116.0], [47.8, 1116.0], [47.9, 1116.0], [48.0, 1116.0], [48.1, 1116.0], [48.2, 1116.0], [48.3, 1116.0], [48.4, 1117.0], [48.5, 1117.0], [48.6, 1117.0], [48.7, 1117.0], [48.8, 1117.0], [48.9, 1117.0], [49.0, 1117.0], [49.1, 1117.0], [49.2, 1117.0], [49.3, 1118.0], [49.4, 1118.0], [49.5, 1118.0], [49.6, 1118.0], [49.7, 1118.0], [49.8, 1118.0], [49.9, 1118.0], [50.0, 1118.0], [50.1, 1118.0], [50.2, 1119.0], [50.3, 1119.0], [50.4, 1119.0], [50.5, 1119.0], [50.6, 1119.0], [50.7, 1119.0], [50.8, 1119.0], [50.9, 1119.0], [51.0, 1120.0], [51.1, 1120.0], [51.2, 1120.0], [51.3, 1120.0], [51.4, 1120.0], [51.5, 1120.0], [51.6, 1120.0], [51.7, 1121.0], [51.8, 1121.0], [51.9, 1121.0], [52.0, 1121.0], [52.1, 1121.0], [52.2, 1121.0], [52.3, 1121.0], [52.4, 1122.0], [52.5, 1122.0], [52.6, 1122.0], [52.7, 1122.0], [52.8, 1122.0], [52.9, 1122.0], [53.0, 1123.0], [53.1, 1123.0], [53.2, 1123.0], [53.3, 1123.0], [53.4, 1123.0], [53.5, 1124.0], [53.6, 1124.0], [53.7, 1124.0], [53.8, 1124.0], [53.9, 1124.0], [54.0, 1125.0], [54.1, 1125.0], [54.2, 1125.0], [54.3, 1125.0], [54.4, 1125.0], [54.5, 1126.0], [54.6, 1126.0], [54.7, 1126.0], [54.8, 1126.0], [54.9, 1126.0], [55.0, 1127.0], [55.1, 1127.0], [55.2, 1127.0], [55.3, 1127.0], [55.4, 1128.0], [55.5, 1128.0], [55.6, 1128.0], [55.7, 1128.0], [55.8, 1129.0], [55.9, 1129.0], [56.0, 1129.0], [56.1, 1130.0], [56.2, 1130.0], [56.3, 1130.0], [56.4, 1131.0], [56.5, 1131.0], [56.6, 1131.0], [56.7, 1132.0], [56.8, 1132.0], [56.9, 1132.0], [57.0, 1133.0], [57.1, 1133.0], [57.2, 1133.0], [57.3, 1134.0], [57.4, 1134.0], [57.5, 1135.0], [57.6, 1135.0], [57.7, 1136.0], [57.8, 1136.0], [57.9, 1137.0], [58.0, 1137.0], [58.1, 1137.0], [58.2, 1138.0], [58.3, 1138.0], [58.4, 1139.0], [58.5, 1140.0], [58.6, 1140.0], [58.7, 1141.0], [58.8, 1141.0], [58.9, 1142.0], [59.0, 1143.0], [59.1, 1143.0], [59.2, 1144.0], [59.3, 1144.0], [59.4, 1145.0], [59.5, 1146.0], [59.6, 1146.0], [59.7, 1147.0], [59.8, 1148.0], [59.9, 1148.0], [60.0, 1149.0], [60.1, 1150.0], [60.2, 1151.0], [60.3, 1152.0], [60.4, 1153.0], [60.5, 1154.0], [60.6, 1155.0], [60.7, 1155.0], [60.8, 1156.0], [60.9, 1158.0], [61.0, 1158.0], [61.1, 1160.0], [61.2, 1161.0], [61.3, 1162.0], [61.4, 1163.0], [61.5, 1165.0], [61.6, 1166.0], [61.7, 1168.0], [61.8, 1169.0], [61.9, 1171.0], [62.0, 1173.0], [62.1, 1174.0], [62.2, 1176.0], [62.3, 1178.0], [62.4, 1180.0], [62.5, 1182.0], [62.6, 1184.0], [62.7, 1186.0], [62.8, 1188.0], [62.9, 1190.0], [63.0, 1192.0], [63.1, 1194.0], [63.2, 1197.0], [63.3, 1199.0], [63.4, 1202.0], [63.5, 1204.0], [63.6, 1207.0], [63.7, 1209.0], [63.8, 1211.0], [63.9, 1212.0], [64.0, 1214.0], [64.1, 1217.0], [64.2, 1219.0], [64.3, 1221.0], [64.4, 1223.0], [64.5, 1226.0], [64.6, 1228.0], [64.7, 1232.0], [64.8, 1235.0], [64.9, 1238.0], [65.0, 1242.0], [65.1, 1245.0], [65.2, 1248.0], [65.3, 1251.0], [65.4, 1253.0], [65.5, 1257.0], [65.6, 1260.0], [65.7, 1264.0], [65.8, 1267.0], [65.9, 1271.0], [66.0, 1274.0], [66.1, 1277.0], [66.2, 1280.0], [66.3, 1283.0], [66.4, 1286.0], [66.5, 1290.0], [66.6, 1293.0], [66.7, 1296.0], [66.8, 1300.0], [66.9, 1303.0], [67.0, 1306.0], [67.1, 1309.0], [67.2, 1313.0], [67.3, 1316.0], [67.4, 1320.0], [67.5, 1324.0], [67.6, 1328.0], [67.7, 1331.0], [67.8, 1336.0], [67.9, 1341.0], [68.0, 1344.0], [68.1, 1348.0], [68.2, 1351.0], [68.3, 1355.0], [68.4, 1358.0], [68.5, 1362.0], [68.6, 1365.0], [68.7, 1368.0], [68.8, 1370.0], [68.9, 1371.0], [69.0, 1372.0], [69.1, 1374.0], [69.2, 1377.0], [69.3, 1381.0], [69.4, 1385.0], [69.5, 1389.0], [69.6, 1393.0], [69.7, 1397.0], [69.8, 1400.0], [69.9, 1403.0], [70.0, 1407.0], [70.1, 1410.0], [70.2, 1412.0], [70.3, 1413.0], [70.4, 1414.0], [70.5, 1416.0], [70.6, 1418.0], [70.7, 1422.0], [70.8, 1425.0], [70.9, 1429.0], [71.0, 1432.0], [71.1, 1435.0], [71.2, 1438.0], [71.3, 1442.0], [71.4, 1445.0], [71.5, 1448.0], [71.6, 1451.0], [71.7, 1453.0], [71.8, 1456.0], [71.9, 1458.0], [72.0, 1461.0], [72.1, 1463.0], [72.2, 1465.0], [72.3, 1468.0], [72.4, 1470.0], [72.5, 1473.0], [72.6, 1476.0], [72.7, 1479.0], [72.8, 1482.0], [72.9, 1485.0], [73.0, 1487.0], [73.1, 1488.0], [73.2, 1490.0], [73.3, 1492.0], [73.4, 1495.0], [73.5, 1498.0], [73.6, 1501.0], [73.7, 1504.0], [73.8, 1506.0], [73.9, 1509.0], [74.0, 1512.0], [74.1, 1515.0], [74.2, 1517.0], [74.3, 1520.0], [74.4, 1522.0], [74.5, 1526.0], [74.6, 1529.0], [74.7, 1532.0], [74.8, 1535.0], [74.9, 1538.0], [75.0, 1541.0], [75.1, 1544.0], [75.2, 1548.0], [75.3, 1552.0], [75.4, 1555.0], [75.5, 1559.0], [75.6, 1563.0], [75.7, 1566.0], [75.8, 1570.0], [75.9, 1574.0], [76.0, 1578.0], [76.1, 1582.0], [76.2, 1586.0], [76.3, 1589.0], [76.4, 1592.0], [76.5, 1596.0], [76.6, 1599.0], [76.7, 1602.0], [76.8, 1606.0], [76.9, 1609.0], [77.0, 1613.0], [77.1, 1616.0], [77.2, 1620.0], [77.3, 1623.0], [77.4, 1627.0], [77.5, 1631.0], [77.6, 1635.0], [77.7, 1640.0], [77.8, 1644.0], [77.9, 1648.0], [78.0, 1652.0], [78.1, 1655.0], [78.2, 1659.0], [78.3, 1663.0], [78.4, 1666.0], [78.5, 1670.0], [78.6, 1673.0], [78.7, 1676.0], [78.8, 1679.0], [78.9, 1683.0], [79.0, 1686.0], [79.1, 1689.0], [79.2, 1692.0], [79.3, 1695.0], [79.4, 1698.0], [79.5, 1701.0], [79.6, 1704.0], [79.7, 1707.0], [79.8, 1710.0], [79.9, 1713.0], [80.0, 1717.0], [80.1, 1720.0], [80.2, 1723.0], [80.3, 1726.0], [80.4, 1729.0], [80.5, 1732.0], [80.6, 1734.0], [80.7, 1738.0], [80.8, 1741.0], [80.9, 1745.0], [81.0, 1748.0], [81.1, 1752.0], [81.2, 1755.0], [81.3, 1759.0], [81.4, 1762.0], [81.5, 1766.0], [81.6, 1770.0], [81.7, 1773.0], [81.8, 1778.0], [81.9, 1781.0], [82.0, 1786.0], [82.1, 1790.0], [82.2, 1795.0], [82.3, 1800.0], [82.4, 1805.0], [82.5, 1809.0], [82.6, 1814.0], [82.7, 1817.0], [82.8, 1821.0], [82.9, 1825.0], [83.0, 1828.0], [83.1, 1832.0], [83.2, 1836.0], [83.3, 1839.0], [83.4, 1842.0], [83.5, 1845.0], [83.6, 1849.0], [83.7, 1851.0], [83.8, 1854.0], [83.9, 1857.0], [84.0, 1861.0], [84.1, 1865.0], [84.2, 1869.0], [84.3, 1874.0], [84.4, 1878.0], [84.5, 1882.0], [84.6, 1887.0], [84.7, 1892.0], [84.8, 1895.0], [84.9, 1898.0], [85.0, 1903.0], [85.1, 1907.0], [85.2, 1912.0], [85.3, 1917.0], [85.4, 1922.0], [85.5, 1928.0], [85.6, 1932.0], [85.7, 1936.0], [85.8, 1941.0], [85.9, 1944.0], [86.0, 1946.0], [86.1, 1949.0], [86.2, 1952.0], [86.3, 1955.0], [86.4, 1960.0], [86.5, 1966.0], [86.6, 1972.0], [86.7, 1976.0], [86.8, 1983.0], [86.9, 1988.0], [87.0, 1995.0], [87.1, 2001.0], [87.2, 2007.0], [87.3, 2013.0], [87.4, 2017.0], [87.5, 2023.0], [87.6, 2028.0], [87.7, 2033.0], [87.8, 2037.0], [87.9, 2042.0], [88.0, 2046.0], [88.1, 2050.0], [88.2, 2055.0], [88.3, 2060.0], [88.4, 2065.0], [88.5, 2070.0], [88.6, 2076.0], [88.7, 2082.0], [88.8, 2088.0], [88.9, 2093.0], [89.0, 2099.0], [89.1, 2105.0], [89.2, 2117.0], [89.3, 2126.0], [89.4, 2132.0], [89.5, 2139.0], [89.6, 2147.0], [89.7, 2154.0], [89.8, 2161.0], [89.9, 2169.0], [90.0, 2179.0], [90.1, 2190.0], [90.2, 2199.0], [90.3, 2208.0], [90.4, 2216.0], [90.5, 2228.0], [90.6, 2241.0], [90.7, 2251.0], [90.8, 2263.0], [90.9, 2274.0], [91.0, 2288.0], [91.1, 2305.0], [91.2, 2323.0], [91.3, 2338.0], [91.4, 2353.0], [91.5, 2370.0], [91.6, 2390.0], [91.7, 2409.0], [91.8, 2423.0], [91.9, 2435.0], [92.0, 2447.0], [92.1, 2457.0], [92.2, 2467.0], [92.3, 2475.0], [92.4, 2486.0], [92.5, 2501.0], [92.6, 2514.0], [92.7, 2526.0], [92.8, 2538.0], [92.9, 2550.0], [93.0, 2564.0], [93.1, 2579.0], [93.2, 2598.0], [93.3, 2613.0], [93.4, 2626.0], [93.5, 2640.0], [93.6, 2662.0], [93.7, 2679.0], [93.8, 2698.0], [93.9, 2716.0], [94.0, 2736.0], [94.1, 2758.0], [94.2, 2782.0], [94.3, 2812.0], [94.4, 2848.0], [94.5, 2878.0], [94.6, 2905.0], [94.7, 2932.0], [94.8, 2960.0], [94.9, 2992.0], [95.0, 3015.0], [95.1, 3038.0], [95.2, 3071.0], [95.3, 3095.0], [95.4, 3120.0], [95.5, 3149.0], [95.6, 3185.0], [95.7, 3230.0], [95.8, 3266.0], [95.9, 3299.0], [96.0, 3343.0], [96.1, 3383.0], [96.2, 3440.0], [96.3, 3500.0], [96.4, 3554.0], [96.5, 3621.0], [96.6, 3686.0], [96.7, 3760.0], [96.8, 3836.0], [96.9, 3977.0], [97.0, 4110.0], [97.1, 4275.0], [97.2, 4401.0], [97.3, 4590.0], [97.4, 4754.0], [97.5, 4932.0], [97.6, 5053.0], [97.7, 5133.0], [97.8, 5219.0], [97.9, 5389.0], [98.0, 5549.0], [98.1, 5705.0], [98.2, 5840.0], [98.3, 5948.0], [98.4, 6111.0], [98.5, 6254.0], [98.6, 6420.0], [98.7, 6614.0], [98.8, 6751.0], [98.9, 6933.0], [99.0, 7128.0], [99.1, 7296.0], [99.2, 7473.0], [99.3, 7607.0], [99.4, 7753.0], [99.5, 7939.0], [99.6, 8179.0], [99.7, 8537.0], [99.8, 9134.0], [99.9, 10261.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 67660.0, "series": [{"data": [[0.0, 156.0], [300.0, 3.0], [1000.0, 8141.0], [1100.0, 67660.0], [1200.0, 4192.0], [1300.0, 3581.0], [1400.0, 4525.0], [1500.0, 3675.0], [1600.0, 3410.0], [1700.0, 3415.0], [1800.0, 3154.0], [1900.0, 2580.0], [2000.0, 2323.0], [2100.0, 1434.0], [2200.0, 1039.0], [2300.0, 695.0], [2400.0, 1010.0], [2500.0, 853.0], [2600.0, 732.0], [2700.0, 531.0], [2800.0, 369.0], [2900.0, 444.0], [3000.0, 460.0], [3100.0, 370.0], [3300.0, 278.0], [3200.0, 330.0], [3400.0, 200.0], [3500.0, 203.0], [3700.0, 179.0], [3600.0, 177.0], [3800.0, 92.0], [3900.0, 90.0], [4000.0, 89.0], [4300.0, 103.0], [4200.0, 55.0], [4100.0, 91.0], [4500.0, 52.0], [4600.0, 61.0], [4400.0, 75.0], [4700.0, 76.0], [4800.0, 83.0], [5000.0, 144.0], [4900.0, 63.0], [5100.0, 146.0], [5200.0, 78.0], [5300.0, 70.0], [5400.0, 77.0], [5500.0, 70.0], [5600.0, 78.0], [5700.0, 95.0], [5800.0, 97.0], [5900.0, 97.0], [6000.0, 69.0], [6100.0, 85.0], [6200.0, 79.0], [6300.0, 77.0], [6600.0, 87.0], [6400.0, 61.0], [6500.0, 59.0], [6700.0, 77.0], [6800.0, 73.0], [6900.0, 51.0], [7100.0, 68.0], [7000.0, 68.0], [7200.0, 68.0], [7300.0, 65.0], [7400.0, 73.0], [7600.0, 89.0], [7500.0, 90.0], [7800.0, 67.0], [7700.0, 69.0], [7900.0, 54.0], [8000.0, 46.0], [8100.0, 50.0], [8200.0, 45.0], [8600.0, 21.0], [8700.0, 32.0], [8300.0, 30.0], [8400.0, 28.0], [8500.0, 33.0], [9000.0, 13.0], [8800.0, 19.0], [9100.0, 12.0], [9200.0, 18.0], [8900.0, 11.0], [9400.0, 9.0], [9300.0, 15.0], [9500.0, 9.0], [9700.0, 8.0], [9600.0, 10.0], [9900.0, 9.0], [10100.0, 9.0], [10000.0, 9.0], [9800.0, 8.0], [10200.0, 10.0], [10300.0, 6.0], [10700.0, 6.0], [10600.0, 6.0], [10500.0, 7.0], [10400.0, 7.0], [10900.0, 8.0], [11200.0, 6.0], [10800.0, 7.0], [11100.0, 2.0], [11000.0, 4.0], [11400.0, 5.0], [11300.0, 2.0], [11600.0, 1.0], [11500.0, 1.0], [11700.0, 2.0], [11800.0, 3.0], [12000.0, 1.0], [12100.0, 3.0], [11900.0, 2.0], [12200.0, 1.0], [12300.0, 4.0], [12400.0, 1.0], [12700.0, 1.0], [12600.0, 1.0], [12800.0, 2.0], [13200.0, 1.0], [12900.0, 2.0], [13700.0, 2.0], [13800.0, 1.0], [13500.0, 1.0], [13400.0, 1.0], [14200.0, 2.0], [14300.0, 2.0], [13900.0, 1.0], [14100.0, 1.0], [14500.0, 1.0], [14700.0, 2.0], [14400.0, 1.0], [14900.0, 2.0], [15400.0, 2.0], [15500.0, 2.0], [15700.0, 1.0], [15600.0, 1.0], [16400.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 16400.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 167.0, "minX": 1.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 88151.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 88151.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 31682.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 167.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 2738.458204695055, "minX": 1.68416832E12, "maxY": 3000.0, "series": [{"data": [[1.68416844E12, 3000.0], [1.68416862E12, 2738.458204695055], [1.68416856E12, 3000.0], [1.68416838E12, 3000.0], [1.68416832E12, 3000.0], [1.6841685E12, 3000.0]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68416862E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 1093.0, "minX": 1.0, "maxY": 8500.0, "series": [{"data": [[2.0, 1158.0], [3.0, 1144.0], [4.0, 1139.0], [5.0, 1129.0], [7.0, 1138.0], [8.0, 1132.0], [10.0, 1117.5], [11.0, 1134.0], [12.0, 1120.0], [13.0, 1121.0], [14.0, 1113.0], [17.0, 1123.0], [18.0, 1110.0], [19.0, 1105.0], [21.0, 1109.0], [23.0, 1127.0], [24.0, 1132.0], [25.0, 1105.5], [26.0, 1139.0], [29.0, 1106.0], [31.0, 1107.75], [33.0, 1104.0], [35.0, 1111.0], [39.0, 1119.5], [38.0, 1115.0], [41.0, 1096.0], [43.0, 1104.5], [42.0, 1106.0], [45.0, 1097.0], [48.0, 1103.0], [51.0, 1099.0], [50.0, 1097.0], [53.0, 1110.0], [52.0, 1111.0], [55.0, 1099.0], [54.0, 1101.0], [57.0, 1111.0], [56.0, 1103.0], [59.0, 1145.0], [58.0, 1103.0], [63.0, 1108.0], [62.0, 1108.0], [67.0, 1102.5], [65.0, 1104.6666666666667], [71.0, 1105.0], [70.0, 1100.0], [69.0, 1098.0], [68.0, 1100.0], [75.0, 1100.0], [74.0, 1105.0], [73.0, 1106.0], [72.0, 1104.0], [79.0, 1144.0], [76.0, 1113.0], [83.0, 1105.0], [82.0, 1123.5], [80.0, 1097.0], [86.0, 1103.0], [85.0, 1104.5], [84.0, 1099.5], [91.0, 1100.5], [88.0, 1098.0], [95.0, 1108.0], [93.0, 1102.0], [99.0, 1103.0], [98.0, 1106.0], [97.0, 1122.0], [96.0, 1110.0], [103.0, 1102.6666666666667], [100.0, 1109.0], [105.0, 1096.5], [111.0, 1104.0], [109.0, 1098.0], [108.0, 1111.0], [115.0, 1100.0], [114.0, 1106.0], [112.0, 1115.5], [117.0, 1100.5], [123.0, 1105.6666666666667], [121.0, 1100.0], [120.0, 1107.0], [127.0, 1108.0], [126.0, 1099.0], [124.0, 1153.0], [135.0, 1100.0], [134.0, 1104.0], [133.0, 1101.0], [130.0, 1108.0], [129.0, 1099.0], [128.0, 1105.0], [143.0, 1095.0], [142.0, 1112.0], [141.0, 1096.0], [138.0, 1121.0], [137.0, 1107.0], [136.0, 1108.0], [151.0, 1107.5], [149.0, 1105.0], [148.0, 1133.0], [145.0, 1107.0], [159.0, 1116.5], [157.0, 1096.0], [156.0, 1099.0], [155.0, 1099.5], [153.0, 1107.5], [165.0, 1101.0], [164.0, 1101.0], [163.0, 1121.5], [162.0, 1103.0], [160.0, 1099.0], [175.0, 1095.0], [173.0, 1109.0], [172.0, 1100.5], [171.0, 1101.0], [169.0, 1104.6666666666667], [168.0, 1105.0], [181.0, 1100.0], [179.0, 1114.0], [178.0, 1103.6666666666667], [176.0, 1115.0], [191.0, 1104.0], [189.0, 1100.0], [188.0, 1111.0], [186.0, 1100.5], [184.0, 1104.3333333333333], [199.0, 1123.0], [198.0, 1104.0], [197.0, 1101.0], [195.0, 1113.0], [194.0, 1099.0], [193.0, 1138.0], [192.0, 1100.5], [206.0, 1098.0], [205.0, 1113.0], [204.0, 1126.0], [203.0, 1098.0], [201.0, 1102.5], [200.0, 1116.0], [215.0, 1110.0], [213.0, 1112.0], [212.0, 1102.0], [211.0, 1105.0], [210.0, 1103.0], [209.0, 1102.0], [208.0, 1102.0], [222.0, 1104.0], [221.0, 1106.0], [219.0, 1097.0], [218.0, 1137.5], [217.0, 1102.0], [216.0, 1105.0], [231.0, 1099.0], [230.0, 1100.0], [228.0, 1100.5], [226.0, 1103.0], [225.0, 1106.0], [224.0, 1098.5], [238.0, 1129.0], [236.0, 1101.0], [235.0, 1105.6666666666667], [232.0, 1119.0], [245.0, 1106.0], [244.0, 1101.0], [242.0, 1110.0], [241.0, 1102.0], [240.0, 1101.5], [254.0, 1110.0], [253.0, 1099.0], [252.0, 1100.0], [251.0, 1123.0], [248.0, 1110.75], [271.0, 1103.0], [269.0, 1104.0], [267.0, 1109.0], [266.0, 1102.0], [265.0, 1105.3333333333333], [263.0, 1099.0], [262.0, 1108.0], [261.0, 1101.0], [259.0, 1111.6666666666667], [256.0, 1101.5], [285.0, 1097.0], [287.0, 1102.0], [284.0, 1107.0], [283.0, 1100.0], [282.0, 1105.5], [280.0, 1101.0], [279.0, 1102.6666666666667], [276.0, 1109.6666666666667], [275.0, 1104.5], [272.0, 1100.0], [300.0, 1104.0], [302.0, 1104.0], [303.0, 1100.0], [301.0, 1106.0], [299.0, 1101.6666666666667], [296.0, 1112.5], [294.0, 1102.6666666666667], [289.0, 1099.0], [288.0, 1107.0], [291.0, 1108.0], [290.0, 1099.0], [318.0, 1117.5], [317.0, 1108.3333333333333], [313.0, 1107.5], [310.0, 1103.0], [308.0, 1140.0], [307.0, 1105.5], [306.0, 1109.0], [333.0, 1096.5], [335.0, 1101.5], [332.0, 1117.0], [330.0, 1105.0], [329.0, 1101.0], [328.0, 1103.6666666666667], [326.0, 1116.0], [324.0, 1109.0], [322.0, 1113.0], [321.0, 1104.0], [350.0, 1103.3333333333333], [347.0, 1100.0], [345.0, 1103.0], [344.0, 1103.5], [342.0, 1101.0], [341.0, 1102.0], [339.0, 1098.25], [365.0, 1115.0], [366.0, 1115.0], [364.0, 1109.0], [354.0, 1105.0], [353.0, 1107.0], [363.0, 1100.0], [362.0, 1114.0], [361.0, 1113.0], [360.0, 1106.6666666666667], [358.0, 1105.5], [356.0, 1107.0], [371.0, 1103.0], [382.0, 1103.0], [381.0, 1108.5], [378.0, 1108.5], [377.0, 1108.0], [376.0, 1100.0], [375.0, 1109.5], [374.0, 1104.0], [370.0, 1102.0], [369.0, 1100.6666666666667], [398.0, 1101.0], [399.0, 1102.0], [397.0, 1100.0], [396.0, 1101.0], [395.0, 1104.0], [394.0, 1098.0], [393.0, 1105.0], [392.0, 1104.0], [391.0, 1101.0], [387.0, 1101.0], [385.0, 1108.0], [384.0, 1100.0], [389.0, 1103.5], [413.0, 1155.0], [415.0, 1142.0], [412.0, 1222.0], [403.0, 1467.0], [402.0, 7379.0], [401.0, 1096.0], [400.0, 1098.0], [411.0, 1368.0], [410.0, 1323.0], [409.0, 1363.0], [408.0, 1405.0], [407.0, 1395.0], [406.0, 1401.0], [405.0, 1398.0], [404.0, 1410.0], [430.0, 1104.5], [431.0, 1111.0], [429.0, 1105.0], [419.0, 1128.0], [418.0, 1111.5], [416.0, 1153.0], [427.0, 1101.0], [426.0, 1144.0], [425.0, 1111.0], [424.0, 1103.0], [423.0, 1107.0], [422.0, 1109.0], [420.0, 1110.0], [435.0, 1103.0], [446.0, 1103.0], [447.0, 1113.0], [444.0, 1102.3333333333333], [441.0, 1106.0], [440.0, 1104.0], [438.0, 1106.5], [436.0, 1109.0], [434.0, 1114.0], [433.0, 1105.5], [462.0, 1127.5], [463.0, 1107.0], [460.0, 1099.0], [451.0, 1106.0], [450.0, 1104.0], [449.0, 1107.0], [459.0, 1100.0], [458.0, 1110.0], [457.0, 1130.5], [455.0, 1108.5], [453.0, 1099.0], [452.0, 1105.0], [479.0, 1105.0], [476.0, 1106.5], [475.0, 1101.5], [472.0, 1100.0], [471.0, 1115.0], [470.0, 1108.0], [469.0, 1101.5], [468.0, 1099.0], [466.0, 1108.5], [465.0, 1099.0], [494.0, 1102.5], [492.0, 1111.0], [489.0, 1120.75], [487.0, 1106.0], [486.0, 1102.0], [485.0, 1104.0], [483.0, 1113.0], [482.0, 1107.0], [511.0, 1107.0], [509.0, 1107.0], [499.0, 1112.0], [498.0, 1115.0], [497.0, 1110.0], [496.0, 1106.5], [507.0, 1101.5], [506.0, 1103.0], [505.0, 1110.0], [504.0, 1100.0], [503.0, 1101.0], [501.0, 1101.0], [500.0, 1100.0], [536.0, 1104.0], [542.0, 1108.0], [540.0, 1111.0], [538.0, 1103.0], [516.0, 1105.0], [514.0, 1111.5], [524.0, 1105.0], [522.0, 1106.3333333333333], [534.0, 1107.0], [570.0, 1115.0], [560.0, 1109.0], [568.0, 1109.0], [544.0, 1104.5], [556.0, 1098.0], [554.0, 1103.0], [566.0, 1112.0], [564.0, 1101.5], [562.0, 1107.5], [604.0, 1103.0], [594.0, 1106.0], [578.0, 1104.0], [580.0, 1102.0], [582.0, 1109.0], [588.0, 1104.0], [586.0, 1105.0], [638.0, 1100.0], [626.0, 1102.0], [636.0, 1100.0], [612.0, 1108.0], [620.0, 1105.0], [618.0, 1113.0], [616.0, 1106.6666666666667], [630.0, 1107.0], [664.0, 1121.0], [660.0, 1104.0], [670.0, 1104.0], [656.0, 1111.0], [640.0, 1103.0], [646.0, 1111.0], [654.0, 1103.5], [652.0, 1105.0], [662.0, 1120.0], [658.0, 1106.0], [676.0, 1104.5], [688.0, 1103.0], [700.0, 1097.0], [698.0, 1099.0], [672.0, 1109.0], [674.0, 1101.0], [686.0, 1099.5], [684.0, 1101.0], [682.0, 1095.0], [680.0, 1114.0], [694.0, 1104.0], [690.0, 1107.0], [730.0, 1112.0], [732.0, 1103.0], [724.0, 1118.0], [720.0, 1104.0], [722.0, 1172.0], [728.0, 1107.0], [708.0, 1103.0], [706.0, 1101.0], [718.0, 1105.0], [716.0, 1101.5], [714.0, 1102.0], [712.0, 1104.0], [726.0, 1116.0], [764.0, 1105.0], [752.0, 1101.5], [754.0, 1101.0], [766.0, 1097.0], [762.0, 1104.0], [760.0, 1110.0], [750.0, 1107.0], [738.0, 1100.0], [740.0, 1107.0], [742.0, 1098.0], [746.0, 1108.3333333333333], [758.0, 1104.0], [796.0, 1102.0], [798.0, 1103.0], [784.0, 1100.5], [788.0, 1104.0], [786.0, 1103.0], [794.0, 1106.0], [774.0, 1105.0], [772.0, 1107.5], [782.0, 1100.0], [778.0, 1103.0], [776.0, 1101.6666666666667], [828.0, 1121.0], [816.0, 1200.0], [818.0, 1144.0], [820.0, 1138.0], [830.0, 1114.0], [826.0, 1124.0], [824.0, 1126.0], [800.0, 1099.0], [802.0, 1099.0], [804.0, 1544.0], [806.0, 1498.0], [814.0, 1472.5], [812.0, 1463.0], [810.0, 1463.0], [808.0, 1505.0], [822.0, 1126.0], [860.0, 1111.5], [850.0, 1107.6666666666667], [862.0, 1111.0], [848.0, 1103.0], [858.0, 1107.5], [846.0, 1111.0], [842.0, 1105.0], [840.0, 1103.0], [852.0, 1100.0], [888.0, 1104.3333333333333], [894.0, 1114.0], [880.0, 1116.0], [890.0, 1110.0], [864.0, 1104.5], [868.0, 1105.0], [870.0, 1123.5], [878.0, 1113.0], [876.0, 1111.0], [874.0, 1114.0], [872.0, 1111.0], [886.0, 1109.5], [884.0, 1103.0], [882.0, 1107.0], [902.0, 1154.0], [914.0, 1107.5], [926.0, 1121.5], [922.0, 1112.0], [896.0, 1124.0], [900.0, 1104.0], [906.0, 1106.0], [904.0, 1098.5], [954.0, 1106.0], [958.0, 1105.0], [944.0, 1108.0], [948.0, 1105.0], [956.0, 1102.0], [934.0, 1109.0], [932.0, 1121.5], [930.0, 1102.0], [928.0, 1106.0], [938.0, 1106.0], [936.0, 1104.0], [984.0, 1121.5], [978.0, 1104.0], [988.0, 1103.5], [976.0, 1106.0], [962.0, 1102.3333333333333], [960.0, 1109.0], [974.0, 1104.0], [968.0, 1112.0], [982.0, 1104.0], [980.0, 1104.5], [1020.0, 1111.0], [1022.0, 1103.5], [1018.0, 1108.3333333333333], [1016.0, 1098.0], [1014.0, 1105.0], [1012.0, 1101.6666666666667], [1010.0, 1102.0], [994.0, 1105.0], [996.0, 1430.0], [1004.0, 1108.5], [1002.0, 1098.0], [1080.0, 1101.0], [1084.0, 1102.0], [1064.0, 1113.3333333333333], [1060.0, 1103.5], [1072.0, 1104.5], [1036.0, 1102.0], [1028.0, 1106.0], [1024.0, 1115.5], [1044.0, 1103.5], [1040.0, 1102.0], [1068.0, 1111.0], [1140.0, 1114.5], [1148.0, 1111.0], [1124.0, 1106.0], [1144.0, 1101.0], [1136.0, 1096.0], [1088.0, 1101.0], [1116.0, 1105.6666666666667], [1104.0, 1100.0], [1132.0, 1108.0], [1128.0, 1104.0], [1200.0, 1100.0], [1196.0, 1103.0], [1192.0, 1099.0], [1184.0, 1108.5], [1152.0, 1100.0], [1160.0, 1106.6666666666667], [1164.0, 1114.0], [1168.0, 1108.0], [1276.0, 1152.0], [1252.0, 1115.5], [1272.0, 1120.3333333333333], [1264.0, 1122.0], [1244.0, 1124.0], [1236.0, 1116.0], [1232.0, 1191.0], [1256.0, 1119.75], [1284.0, 1125.0], [1332.0, 1120.0], [1312.0, 1123.5], [1328.0, 1125.0], [1280.0, 1122.0], [1288.0, 1124.0], [1292.0, 1123.0], [1308.0, 1127.6666666666667], [1304.0, 1127.0], [1296.0, 1174.0], [1320.0, 1127.0], [1316.0, 1121.0], [1400.0, 1102.0], [1396.0, 1100.6666666666667], [1376.0, 1130.6666666666667], [1344.0, 1132.5], [1348.0, 1133.0], [1352.0, 1126.0], [1372.0, 1133.5], [1456.0, 1104.0], [1460.0, 1098.0], [1412.0, 1104.0], [1436.0, 1106.5], [1432.0, 1100.0], [1424.0, 1102.0], [1452.0, 1099.0], [1440.0, 1103.0], [1480.0, 1104.0], [1532.0, 1101.5], [1528.0, 1103.0], [1520.0, 1101.0], [1500.0, 1112.0], [1496.0, 1100.5], [1492.0, 1099.0], [1488.0, 1107.0], [1516.0, 1105.5], [1508.0, 1109.0], [1588.0, 1101.0], [1592.0, 1102.0], [1584.0, 1107.5], [1536.0, 1099.0], [1564.0, 1103.75], [1580.0, 1103.0], [1576.0, 1111.0], [1652.0, 1103.0], [1656.0, 1106.0], [1660.0, 1098.0], [1636.0, 1096.0], [1632.0, 1104.0], [1608.0, 1138.0], [1604.0, 1133.0], [1600.0, 1099.0], [1628.0, 1098.0], [1624.0, 1105.3333333333333], [1616.0, 1114.0], [1644.0, 1104.0], [1640.0, 1103.0], [1720.0, 1144.0], [1724.0, 1104.0], [1700.0, 1108.0], [1704.0, 1098.0], [1676.0, 1110.0], [1664.0, 1105.0], [1692.0, 1109.0], [1680.0, 1100.0], [1780.0, 1111.0], [1760.0, 1108.5], [1764.0, 1100.0], [1768.0, 1104.0], [1772.0, 1099.0], [1776.0, 1103.5], [1732.0, 1100.5], [1752.0, 1114.0], [1748.0, 1109.25], [1744.0, 1100.5], [1848.0, 1109.5], [1828.0, 1103.3333333333333], [1832.0, 1104.5], [1836.0, 1099.0], [1840.0, 1113.0], [1792.0, 1107.5], [1796.0, 1101.0], [1800.0, 1109.0], [1808.0, 1101.0], [1916.0, 1104.0], [1888.0, 1118.0], [1892.0, 1103.3333333333333], [1896.0, 1109.0], [1912.0, 1105.0], [1908.0, 1105.0], [1868.0, 1099.0], [1860.0, 1106.0], [1856.0, 1112.5], [1884.0, 1120.0], [1872.0, 1101.0], [1980.0, 1104.0], [1952.0, 1103.5], [1956.0, 1104.0], [1960.0, 1122.0], [1964.0, 1095.0], [1976.0, 1116.0], [1968.0, 1105.0], [1920.0, 1102.0], [1924.0, 1099.5], [1928.0, 1102.3333333333333], [1932.0, 1109.5], [1948.0, 1112.0], [1944.0, 1108.5], [2032.0, 1103.0], [2020.0, 1107.0], [2024.0, 1105.0], [2028.0, 1108.6666666666667], [2036.0, 1111.3333333333333], [1996.0, 1101.0], [1992.0, 1100.0], [1988.0, 1104.0], [1984.0, 1109.0], [2004.0, 1583.0], [2000.0, 1098.0], [2152.0, 1106.0], [2160.0, 1103.0], [2168.0, 1110.5], [2120.0, 1112.5], [2128.0, 1105.0], [2144.0, 1114.0], [2064.0, 1124.0], [2104.0, 1111.6666666666667], [2096.0, 1110.0], [2080.0, 1112.0], [2256.0, 1117.6666666666667], [2248.0, 1100.0], [2264.0, 1106.0], [2296.0, 1102.0], [2280.0, 1109.6666666666667], [2200.0, 1103.0], [2232.0, 1101.0], [2312.0, 1110.0], [2416.0, 1106.0], [2408.0, 1106.3333333333333], [2424.0, 1101.6666666666667], [2376.0, 1112.0], [2384.0, 1097.5], [2304.0, 1114.0], [2360.0, 1106.0], [2352.0, 1106.0], [2344.0, 1102.6666666666667], [2336.0, 1107.0], [2552.0, 1097.0], [2520.0, 1110.5], [2544.0, 1108.0], [2528.0, 1099.0], [2472.0, 1106.0], [2464.0, 1112.0], [2640.0, 1096.0], [2568.0, 1104.0], [2616.0, 1108.0], [2792.0, 1103.0], [2800.0, 1099.0], [2808.0, 1135.0], [2760.0, 1103.6666666666667], [2776.0, 1107.0], [2688.0, 1097.0], [2744.0, 1110.0], [2736.0, 1109.0], [2720.0, 1109.5], [2936.0, 1114.0], [2888.0, 1113.0], [2896.0, 1106.5], [2904.0, 1108.6], [2920.0, 1113.0], [2824.0, 1175.0], [2832.0, 1112.0], [2840.0, 1111.0], [2872.0, 1120.0], [2864.0, 1108.5], [2856.0, 1116.0], [2848.0, 1111.0], [2952.0, 1108.0], [3000.0, 1537.1523550678203], [2960.0, 1127.0], [2968.0, 1103.5], [2992.0, 1100.3333333333333], [2984.0, 1101.0], [2976.0, 1115.5], [2145.0, 1109.0], [2169.0, 1110.0], [2137.0, 1116.0], [2153.0, 1101.5], [2073.0, 1104.0], [2065.0, 1104.0], [2057.0, 1105.0], [2049.0, 1106.0], [2105.0, 1103.0], [2097.0, 1125.0], [2089.0, 1109.0], [2273.0, 1112.0], [2265.0, 1104.0], [2297.0, 1100.0], [2249.0, 1109.0], [2201.0, 1104.0], [2193.0, 1110.0], [2177.0, 1105.0], [2225.0, 1106.5], [2217.0, 1106.5], [2209.0, 1103.5], [2401.0, 1099.0], [2369.0, 1102.0], [2377.0, 1104.0], [2409.0, 1128.0], [2329.0, 1100.5], [2321.0, 1106.0], [2305.0, 1113.0], [2337.0, 1102.3333333333333], [2457.0, 1100.3333333333333], [2537.0, 1103.0], [2497.0, 1097.0], [2513.0, 1105.0], [2521.0, 1097.0], [2449.0, 1120.0], [2441.0, 1098.0], [2433.0, 1098.0], [2489.0, 1102.3333333333333], [2473.0, 1102.0], [2465.0, 1104.0], [2665.0, 1108.0], [2681.0, 1106.0], [2625.0, 1100.0], [2641.0, 1119.1666666666665], [2649.0, 1108.5], [2657.0, 1104.5], [2561.0, 1099.6666666666667], [2577.0, 1104.0], [2585.0, 1110.0], [2617.0, 1108.0], [2609.0, 1107.6666666666667], [2601.0, 1108.0], [2593.0, 1108.0], [2785.0, 1101.6666666666667], [2753.0, 1104.0], [2769.0, 1102.0], [2801.0, 8500.0], [2713.0, 1115.0], [2697.0, 1106.0], [2689.0, 1111.0], [2745.0, 1102.6666666666667], [2737.0, 1099.0], [2729.0, 1116.0], [2937.0, 1107.0], [2929.0, 1111.6666666666667], [2881.0, 1111.5], [2889.0, 1113.5], [2897.0, 1105.0], [2905.0, 1113.5], [2921.0, 1112.5], [2913.0, 1112.5], [2841.0, 1124.0], [2865.0, 1123.0], [2953.0, 1109.3333333333333], [2945.0, 1114.75], [1081.0, 1101.6666666666667], [1085.0, 1111.0], [1025.0, 1107.0], [1029.0, 1101.5], [1033.0, 1102.3333333333333], [1037.0, 1110.0], [1053.0, 1110.8], [1045.0, 1106.0], [1069.0, 1105.5], [1061.0, 1104.0], [1057.0, 1100.5], [1145.0, 1108.0], [1149.0, 1113.5], [1101.0, 1099.0], [1093.0, 1107.0], [1121.0, 1104.0], [1113.0, 1104.0], [1201.0, 1098.0], [1161.0, 1118.0], [1189.0, 1103.5], [1177.0, 1104.0], [1273.0, 1116.0], [1269.0, 1129.0], [1261.0, 1117.0], [1249.0, 1119.5], [1245.0, 1124.0], [1241.0, 1115.0], [1237.0, 1115.0], [1233.0, 1150.0], [1333.0, 1128.3333333333333], [1337.0, 1131.5], [1301.0, 1127.0], [1293.0, 1127.0], [1289.0, 1122.0], [1285.0, 1147.0], [1281.0, 1129.0], [1353.0, 1132.5], [1405.0, 1107.5], [1393.0, 1112.5], [1381.0, 1102.0], [1377.0, 1132.0], [1349.0, 1133.0], [1357.0, 1136.5], [1369.0, 1151.0], [1365.0, 1131.5], [1361.0, 1156.0], [1461.0, 1118.0], [1465.0, 1106.5], [1457.0, 1108.0], [1413.0, 1099.0], [1409.0, 1101.0], [1437.0, 1108.0], [1429.0, 1101.0], [1453.0, 1105.3333333333333], [1441.0, 1099.0], [1525.0, 1102.0], [1533.0, 1106.0], [1521.0, 1097.0], [1485.0, 1109.0], [1481.0, 1102.0], [1473.0, 1099.5], [1501.0, 1101.0], [1513.0, 1101.0], [1505.0, 1113.6666666666667], [1589.0, 1101.0], [1597.0, 1101.0], [1569.0, 1102.0], [1577.0, 1102.0], [1585.0, 1108.0], [1549.0, 1109.0], [1545.0, 1105.5], [1541.0, 1104.5], [1565.0, 1103.0], [1553.0, 1113.0], [1613.0, 1122.5], [1657.0, 1107.3333333333333], [1653.0, 1128.0], [1649.0, 1108.0], [1609.0, 1112.0], [1601.0, 1095.0], [1645.0, 1102.0], [1629.0, 1104.0], [1621.0, 1100.0], [1617.0, 1105.0], [1721.0, 1108.0], [1725.0, 1104.0], [1701.0, 1111.5], [1697.0, 1112.0], [1705.0, 1105.0], [1709.0, 1115.0], [1717.0, 1101.5], [1713.0, 1108.0], [1677.0, 1110.0], [1665.0, 1102.5], [1669.0, 1099.5], [1673.0, 1102.6666666666667], [1689.0, 1104.0], [1685.0, 1115.5], [1681.0, 1112.3333333333333], [1789.0, 1122.5], [1785.0, 1126.0], [1765.0, 1107.0], [1757.0, 1101.0], [1729.0, 1103.0], [1733.0, 1103.0], [1737.0, 1102.5], [1753.0, 1110.0], [1849.0, 1105.0], [1853.0, 1103.0], [1825.0, 1108.5], [1829.0, 1106.0], [1833.0, 1102.0], [1845.0, 1118.6666666666667], [1793.0, 1110.0], [1805.0, 1102.0], [1821.0, 1107.5], [1813.0, 1103.0], [1909.0, 1099.0], [1889.0, 1099.0], [1901.0, 1101.8333333333333], [1913.0, 1108.0], [1905.0, 1133.0], [1865.0, 1107.0], [1881.0, 1121.0], [1877.0, 1103.5], [1957.0, 1107.0], [1965.0, 1108.0], [1981.0, 1098.0], [1973.0, 1104.0], [1949.0, 1100.0], [1941.0, 1107.6666666666667], [1937.0, 1102.0], [2037.0, 1107.0], [2041.0, 1109.5], [2025.0, 1108.0], [2045.0, 1118.0], [1997.0, 1097.0], [1993.0, 1102.0], [1989.0, 1104.0], [1985.0, 1105.0], [2005.0, 1582.0], [2001.0, 1705.0], [2058.0, 1110.5], [2114.0, 1108.0], [2122.0, 1110.0], [2050.0, 1116.5], [2066.0, 1110.0], [2074.0, 1108.0], [2106.0, 1109.0], [2098.0, 1108.0], [2090.0, 1108.6666666666667], [2082.0, 1118.0], [2138.0, 1119.0], [2130.0, 1110.5], [2282.0, 1100.5], [2242.0, 1101.0], [2298.0, 1108.0], [2290.0, 1110.0], [2274.0, 1103.0], [2178.0, 1110.0], [2186.0, 1105.0], [2202.0, 1106.0], [2234.0, 1115.0], [2226.0, 1110.0], [2418.0, 1116.0], [2378.0, 1097.0], [2386.0, 1102.3333333333333], [2394.0, 1102.5], [2426.0, 1105.0], [2402.0, 1140.0], [2314.0, 1103.5], [2306.0, 1109.5], [2362.0, 1105.0], [2354.0, 1099.5], [2346.0, 1101.0], [2338.0, 1099.0], [2538.0, 1145.0], [2498.0, 1098.0], [2514.0, 1105.0], [2522.0, 1116.0], [2530.0, 1098.0], [2450.0, 1111.6666666666667], [2442.0, 1102.0], [2466.0, 1100.0], [2682.0, 1099.5], [2626.0, 1114.0], [2642.0, 1106.1000000000001], [2650.0, 1101.0], [2674.0, 1107.0], [2570.0, 1101.0], [2578.0, 1113.0], [2586.0, 1100.0], [2610.0, 1119.0], [2602.0, 1100.0], [2794.0, 1100.0], [2802.0, 8300.0], [2770.0, 1103.5], [2778.0, 1102.5], [2786.0, 1109.0], [2706.0, 1105.3333333333333], [2690.0, 1108.5], [2746.0, 1108.0], [2730.0, 1107.0], [2722.0, 1114.0], [2842.0, 1112.0], [2938.0, 1112.0], [2898.0, 1116.0], [2906.0, 1105.0], [2834.0, 1114.0], [2874.0, 1108.5], [2858.0, 1106.6666666666667], [2850.0, 1115.0], [2946.0, 1112.0], [2962.0, 1107.0], [2970.0, 1112.0], [2994.0, 1102.0], [2986.0, 1123.0], [2171.0, 1106.0], [2115.0, 1111.0], [2123.0, 1106.0], [2131.0, 1107.0], [2163.0, 1111.0], [2075.0, 1108.0], [2099.0, 1133.0], [2091.0, 1110.0], [2083.0, 1111.0], [2203.0, 1107.0], [2275.0, 1104.5], [2251.0, 1106.0], [2259.0, 1109.5], [2195.0, 1107.5], [2235.0, 1100.0], [2227.0, 1112.0], [2219.0, 1106.5], [2211.0, 1108.6666666666667], [2267.0, 1103.0], [2371.0, 1103.0], [2411.0, 1101.0], [2403.0, 1145.0], [2331.0, 1101.5], [2323.0, 1106.0], [2347.0, 1103.0], [2539.0, 1097.0], [2555.0, 1101.0], [2507.0, 1100.0], [2547.0, 1102.0], [2531.0, 1114.0], [2459.0, 1101.0], [2435.0, 1107.0], [2475.0, 1105.0], [2659.0, 1098.75], [2667.0, 1098.5], [2643.0, 1105.0], [2587.0, 1102.5], [2619.0, 1096.0], [2595.0, 1117.5], [2803.0, 1175.0], [2795.0, 1098.0], [2755.0, 1101.0], [2763.0, 1106.3333333333333], [2787.0, 1102.0], [2715.0, 1100.0], [2699.0, 1098.0], [2739.0, 1105.5], [2923.0, 1112.5], [2883.0, 1106.0], [2891.0, 1104.5], [2899.0, 1103.0], [2915.0, 1115.3333333333333], [2835.0, 1124.0], [2875.0, 1114.0], [2867.0, 1111.5], [2859.0, 1115.0], [2851.0, 1105.0], [2995.0, 1108.0], [2955.0, 1125.0], [2971.0, 1115.0], [2979.0, 1101.5], [519.0, 1103.8], [541.0, 1100.0], [529.0, 1103.0], [539.0, 1102.0], [527.0, 1102.0], [517.0, 1102.0], [525.0, 1109.0], [523.0, 1113.0], [535.0, 1104.0], [533.0, 1112.6666666666667], [531.0, 1108.0], [571.0, 1120.0], [561.0, 1105.0], [573.0, 1106.5], [575.0, 1106.0], [551.0, 1117.0], [549.0, 1102.0], [547.0, 1104.0], [545.0, 1103.0], [559.0, 1107.0], [557.0, 1106.0], [553.0, 1103.0], [581.0, 1105.0], [601.0, 1108.0], [607.0, 1099.5], [605.0, 1112.0], [589.0, 1100.0], [577.0, 1106.0], [579.0, 1114.0], [583.0, 1125.0], [587.0, 1098.0], [585.0, 1160.5], [599.0, 1108.3333333333333], [597.0, 1104.0], [595.0, 1103.0], [593.0, 1102.0], [633.0, 1100.5], [637.0, 1105.0], [625.0, 1097.5], [635.0, 1104.0], [613.0, 1113.0], [611.0, 1112.0], [623.0, 1103.0], [621.0, 1107.0], [617.0, 1100.0], [631.0, 1111.0], [629.0, 1097.3333333333333], [645.0, 1106.0], [669.0, 1106.0], [657.0, 1097.0], [667.0, 1106.0], [655.0, 1104.0], [641.0, 1101.0], [643.0, 1103.0], [647.0, 1101.0], [651.0, 1104.5], [649.0, 1101.0], [663.0, 1101.0], [661.0, 1108.0], [659.0, 1099.0], [697.0, 1102.6666666666667], [701.0, 1102.0], [703.0, 1101.5], [699.0, 1102.0], [687.0, 1105.0], [673.0, 1108.0], [679.0, 1102.5], [677.0, 1103.0], [683.0, 1106.0], [681.0, 1103.0], [693.0, 1097.5], [691.0, 1101.0], [731.0, 1106.0], [735.0, 1107.3333333333333], [721.0, 1103.0], [723.0, 1151.0], [711.0, 1100.0], [709.0, 1102.0], [705.0, 1108.5], [719.0, 1101.0], [713.0, 1105.0], [727.0, 1116.0], [725.0, 1119.0], [763.0, 1117.0], [767.0, 1102.0], [753.0, 1110.0], [765.0, 1104.0], [761.0, 1104.0], [737.0, 1103.5], [741.0, 1100.0], [743.0, 1110.0], [749.0, 1102.5], [747.0, 1101.0], [757.0, 1106.0], [795.0, 1102.0], [799.0, 1096.0], [785.0, 1107.0], [797.0, 1096.0], [793.0, 1102.0], [771.0, 1099.0], [769.0, 1108.5], [781.0, 1096.5], [779.0, 1111.0], [777.0, 1100.0], [791.0, 1102.0], [789.0, 1100.0], [829.0, 1134.0], [831.0, 1123.0], [817.0, 1176.0], [819.0, 1150.0], [821.0, 1144.0], [827.0, 1156.0], [825.0, 1152.0], [815.0, 1441.0], [801.0, 1100.0], [803.0, 1548.0], [805.0, 1558.0], [807.0, 1494.0], [809.0, 1483.0], [823.0, 1148.0], [837.0, 1107.0], [861.0, 1097.0], [857.0, 1113.0], [839.0, 1107.5], [835.0, 1116.0], [833.0, 1130.5], [845.0, 1157.0], [843.0, 1104.0], [841.0, 1107.0], [855.0, 1104.0], [851.0, 1105.0], [869.0, 1104.5], [895.0, 1103.0], [893.0, 1107.0], [891.0, 1112.0], [879.0, 1138.0], [871.0, 1103.0], [877.0, 1131.0], [875.0, 1110.0], [873.0, 1107.0], [881.0, 1108.0], [923.0, 1102.0], [925.0, 1101.0], [911.0, 1103.3333333333333], [899.0, 1102.0], [897.0, 1107.0], [909.0, 1106.0], [907.0, 1111.0], [919.0, 1106.0], [917.0, 1123.5], [915.0, 1106.0], [913.0, 1145.0], [957.0, 1117.0], [959.0, 1100.0], [945.0, 1122.0], [947.0, 1131.0], [955.0, 1105.0], [953.0, 1107.0], [935.0, 1100.0], [933.0, 1103.0], [929.0, 1107.3333333333333], [943.0, 1104.0], [941.0, 1125.5], [939.0, 1114.0], [937.0, 1101.0], [951.0, 1125.5], [949.0, 1104.0], [985.0, 1106.0], [991.0, 1110.6666666666667], [977.0, 1128.0], [987.0, 1102.0], [967.0, 1103.6666666666667], [965.0, 1108.5], [975.0, 1106.0], [973.0, 1110.0], [971.0, 1105.0], [969.0, 1101.0], [981.0, 1110.0], [1007.0, 1104.0], [999.0, 1102.0], [1005.0, 1119.0], [1082.0, 1109.0], [1086.0, 1112.0], [1078.0, 1107.0], [1074.0, 1108.0], [1034.0, 1109.0], [1050.0, 1108.0], [1046.0, 1095.0], [1066.0, 1105.0], [1138.0, 1108.3333333333333], [1150.0, 1102.0], [1122.0, 1110.0], [1126.0, 1111.0], [1118.0, 1113.0], [1102.0, 1097.0], [1090.0, 1111.0], [1114.0, 1098.0], [1110.0, 1134.0], [1106.0, 1104.0], [1134.0, 1103.0], [1130.0, 1111.0], [1186.0, 1100.5], [1194.0, 1104.0], [1182.0, 1106.0], [1158.0, 1103.8], [1162.0, 1106.0], [1166.0, 1101.0], [1174.0, 1107.3333333333333], [1266.0, 1137.6666666666667], [1278.0, 1137.6666666666667], [1250.0, 1120.0], [1270.0, 1129.6666666666667], [1246.0, 1149.0], [1230.0, 1177.0], [1238.0, 1117.0], [1234.0, 1150.0], [1262.0, 1120.0], [1258.0, 1118.5], [1254.0, 1143.0], [1282.0, 1132.0], [1318.0, 1127.0], [1342.0, 1122.75], [1330.0, 1144.0], [1310.0, 1134.5], [1286.0, 1125.0], [1290.0, 1126.0], [1306.0, 1128.0], [1302.0, 1126.5], [1298.0, 1133.0], [1326.0, 1127.5], [1322.0, 1122.0], [1314.0, 1129.5], [1346.0, 1125.0], [1402.0, 1103.0], [1398.0, 1099.0], [1386.0, 1103.5], [1374.0, 1132.0], [1350.0, 1133.3333333333333], [1354.0, 1131.0], [1370.0, 1127.0], [1366.0, 1139.0], [1362.0, 1147.0], [1470.0, 1103.6666666666667], [1446.0, 1108.5], [1462.0, 1109.0], [1438.0, 1103.0], [1422.0, 1104.0], [1418.0, 1107.0], [1426.0, 1101.5], [1454.0, 1104.0], [1450.0, 1105.0], [1526.0, 1103.0], [1530.0, 1102.5], [1522.0, 1110.75], [1478.0, 1104.3333333333333], [1498.0, 1125.5], [1494.0, 1105.5], [1490.0, 1104.0], [1514.0, 1101.0], [1506.0, 1102.0], [1586.0, 1104.0], [1590.0, 1106.0], [1550.0, 1104.0], [1542.0, 1104.0], [1538.0, 1100.5], [1562.0, 1101.0], [1578.0, 1105.0], [1574.0, 1105.6666666666667], [1614.0, 1110.0], [1638.0, 1103.0], [1662.0, 1102.0], [1658.0, 1100.0], [1610.0, 1125.0], [1606.0, 1140.0], [1602.0, 1285.0], [1630.0, 1100.0], [1626.0, 1099.0], [1622.0, 1106.0], [1618.0, 1104.0], [1642.0, 1103.5], [1702.0, 1110.0], [1710.0, 1098.0], [1726.0, 1107.0], [1694.0, 1106.0], [1790.0, 1107.0], [1782.0, 1105.5], [1762.0, 1108.3333333333333], [1766.0, 1097.0], [1770.0, 1104.0], [1774.0, 1100.0], [1778.0, 1097.0], [1738.0, 1097.5], [1742.0, 1104.5], [1754.0, 1110.0], [1750.0, 1101.3333333333333], [1746.0, 1112.0], [1846.0, 1099.0], [1854.0, 1110.0], [1850.0, 1102.0], [1830.0, 1102.0], [1838.0, 1099.0], [1798.0, 1100.0], [1802.0, 1101.5], [1818.0, 1100.0], [1810.0, 1102.3333333333333], [1866.0, 1102.0], [1906.0, 1101.5], [1914.0, 1100.6666666666667], [1894.0, 1108.0], [1918.0, 1121.0], [1862.0, 1106.0], [1858.0, 1095.0], [1886.0, 1103.3333333333333], [1882.0, 1098.0], [1878.0, 1105.0], [1874.0, 1101.0], [1982.0, 1107.0], [1970.0, 1101.5], [1954.0, 1099.0], [1962.0, 1115.0], [1922.0, 1105.5], [1926.0, 1100.0], [1930.0, 1105.0], [1934.0, 1104.6666666666667], [1950.0, 1106.0], [1946.0, 1104.0], [2034.0, 1105.5], [2018.0, 1157.0], [2022.0, 1106.0], [2030.0, 1146.5], [1998.0, 1099.0], [1994.0, 1105.0], [1986.0, 1104.0], [2006.0, 1736.0], [2002.0, 1675.0], [2148.0, 1108.0], [2156.0, 1106.0], [2124.0, 1112.0], [2164.0, 1104.5], [2052.0, 1108.5], [2060.0, 1106.0], [2068.0, 1104.0], [2076.0, 1105.0], [2108.0, 1103.0], [2100.0, 1106.0], [2084.0, 1116.0], [2292.0, 1103.5], [2244.0, 1101.0], [2252.0, 1101.0], [2260.0, 1116.0], [2284.0, 1101.0], [2276.0, 1106.0], [2180.0, 1112.5], [2188.0, 1107.5], [2204.0, 1103.0], [2236.0, 1128.0], [2228.0, 1105.0], [2420.0, 1101.0], [2372.0, 1108.0], [2380.0, 1102.0], [2388.0, 1100.0], [2396.0, 1101.0], [2404.0, 1108.0], [2316.0, 1103.5], [2308.0, 1096.0], [2364.0, 1100.0], [2348.0, 1101.0], [2340.0, 1104.5], [2556.0, 1106.0], [2508.0, 1101.0], [2540.0, 1117.6666666666667], [2444.0, 1093.0], [2436.0, 1098.0], [2468.0, 1109.6666666666667], [2684.0, 1099.0], [2676.0, 1098.5], [2652.0, 1105.0], [2564.0, 1100.3333333333333], [2612.0, 1108.5], [2604.0, 1107.5], [2596.0, 1102.0], [2716.0, 1108.0], [2804.0, 8026.0], [2764.0, 1099.5], [2796.0, 1102.0], [2700.0, 1098.25], [2748.0, 1113.0], [2732.0, 1106.5], [2724.0, 1106.5], [2884.0, 1110.0], [2932.0, 1121.5], [2900.0, 1111.0], [2940.0, 1111.0], [2844.0, 1117.0], [2852.0, 1114.5], [2948.0, 1109.5], [2964.0, 1108.5], [2996.0, 1097.0], [2988.0, 1103.0], [2165.0, 1107.5], [2149.0, 1111.0], [2117.0, 1114.0], [2133.0, 1134.0], [2141.0, 1105.5], [2173.0, 1141.0], [2157.0, 1110.0], [2077.0, 1115.5], [2069.0, 1111.0], [2093.0, 1105.0], [2085.0, 1109.0], [2197.0, 1108.5], [2285.0, 1096.0], [2301.0, 1112.8], [2253.0, 1109.0], [2237.0, 1111.0], [2229.0, 1110.0], [2221.0, 1102.0], [2213.0, 1108.5], [2269.0, 1124.6666666666667], [2405.0, 1113.0], [2429.0, 1101.5], [2381.0, 1110.0], [2389.0, 1104.0], [2397.0, 1102.0], [2413.0, 1100.0], [2325.0, 1112.0], [2309.0, 1108.0], [2365.0, 1106.3333333333333], [2357.0, 1101.3333333333333], [2341.0, 1101.0], [2549.0, 1104.0], [2517.0, 1109.0], [2525.0, 1097.5], [2557.0, 1104.0], [2541.0, 1096.0], [2533.0, 1102.5], [2461.0, 1125.0], [2485.0, 1110.8333333333333], [2677.0, 1106.0], [2645.0, 1107.0], [2661.0, 1102.0], [2565.0, 1129.0], [2581.0, 1105.5], [2589.0, 1101.0], [2621.0, 1106.0], [2605.0, 1114.3333333333333], [2805.0, 1141.0], [2765.0, 1116.0], [2773.0, 1104.0], [2781.0, 1103.3333333333333], [2797.0, 1100.0], [2789.0, 1101.0], [2709.0, 1102.5], [2693.0, 1097.0], [2749.0, 1109.0], [2725.0, 1104.0], [2925.0, 1110.6666666666667], [2893.0, 1110.0], [2901.0, 1109.0], [2909.0, 1110.6], [2917.0, 1164.0], [2829.0, 1137.5], [2837.0, 1110.3333333333333], [2877.0, 1113.0], [2869.0, 1112.0], [2861.0, 1114.5], [2853.0, 1110.0], [2957.0, 1112.5], [2965.0, 1103.0], [2973.0, 1108.3333333333333], [2997.0, 1101.5], [2989.0, 1107.0], [1087.0, 1104.0], [1059.0, 1102.0], [1083.0, 1102.0], [1055.0, 1109.0], [1027.0, 1120.5], [1031.0, 1103.0], [1039.0, 1106.0], [1047.0, 1133.0], [1043.0, 1110.0], [1071.0, 1106.0], [1099.0, 1104.0], [1143.0, 1109.6666666666667], [1095.0, 1119.0], [1135.0, 1104.5], [1131.0, 1111.0], [1119.0, 1104.0], [1107.0, 1108.0], [1167.0, 1104.5], [1203.0, 1097.5], [1155.0, 1104.0], [1199.0, 1102.6666666666667], [1195.0, 1102.0], [1191.0, 1103.0], [1187.0, 1103.0], [1179.0, 1100.5], [1175.0, 1110.0], [1171.0, 1108.0], [1231.0, 1210.0], [1275.0, 1120.0], [1267.0, 1122.5], [1259.0, 1124.0], [1247.0, 1115.5], [1243.0, 1117.0], [1239.0, 1118.0], [1235.0, 1128.0], [1339.0, 1127.5], [1335.0, 1128.0], [1323.0, 1133.5], [1299.0, 1113.0], [1295.0, 1124.0], [1287.0, 1125.0], [1283.0, 1149.0], [1407.0, 1110.5], [1399.0, 1113.0], [1391.0, 1112.0], [1379.0, 1122.5], [1375.0, 1130.0], [1355.0, 1133.0], [1359.0, 1140.0], [1367.0, 1141.0], [1363.0, 1133.0], [1419.0, 1099.0], [1467.0, 1108.3333333333333], [1471.0, 1112.0], [1463.0, 1102.0], [1439.0, 1112.0], [1415.0, 1103.0], [1435.0, 1123.5], [1431.0, 1096.0], [1427.0, 1097.6666666666667], [1447.0, 1107.5], [1443.0, 1100.3333333333333], [1479.0, 1107.0], [1535.0, 1105.0], [1523.0, 1100.0], [1483.0, 1105.5], [1475.0, 1101.0], [1503.0, 1127.0], [1495.0, 1102.0], [1491.0, 1100.0], [1519.0, 1097.0], [1507.0, 1097.0], [1591.0, 1100.0], [1599.0, 1101.5], [1571.0, 1103.0], [1595.0, 1104.0], [1587.0, 1098.0], [1551.0, 1105.0], [1547.0, 1101.5], [1543.0, 1104.0], [1559.0, 1099.5], [1555.0, 1111.6666666666667], [1583.0, 1101.0], [1579.0, 1105.0], [1651.0, 1104.0], [1663.0, 1101.5], [1611.0, 1132.0], [1607.0, 1112.0], [1603.0, 1133.0], [1647.0, 1110.0], [1635.0, 1102.0], [1619.0, 1153.0], [1723.0, 1103.5], [1727.0, 1098.0], [1699.0, 1103.0], [1703.0, 1095.0], [1707.0, 1103.0], [1719.0, 1156.5], [1715.0, 1111.6666666666667], [1679.0, 1113.0], [1695.0, 1101.0], [1667.0, 1114.0], [1671.0, 1104.0], [1675.0, 1106.0], [1691.0, 1103.5], [1687.0, 1114.0], [1683.0, 1110.0], [1783.0, 1102.0], [1787.0, 1107.0], [1779.0, 1101.0], [1731.0, 1107.0], [1735.0, 1100.0], [1739.0, 1105.0], [1755.0, 1104.0], [1751.0, 1107.0], [1795.0, 1113.5], [1839.0, 1106.0], [1851.0, 1100.0], [1843.0, 1101.0], [1823.0, 1099.5], [1807.0, 1101.6666666666667], [1819.0, 1100.5], [1815.0, 1105.0], [1811.0, 1104.0], [1891.0, 1113.0], [1919.0, 1101.0], [1895.0, 1103.0], [1903.0, 1102.5], [1911.0, 1103.0], [1871.0, 1101.3333333333333], [1859.0, 1099.0], [1975.0, 1104.0], [1955.0, 1101.0], [1979.0, 1103.3333333333333], [1959.0, 1100.6666666666667], [1963.0, 1104.0], [1967.0, 1104.0], [1971.0, 1105.0], [1951.0, 1101.0], [1935.0, 1112.0], [1943.0, 1120.0], [1939.0, 1113.5], [2039.0, 1104.0], [1999.0, 1098.0], [2047.0, 1104.0], [2019.0, 1113.0], [2043.0, 1107.0], [1995.0, 1096.0], [1991.0, 1105.0], [2007.0, 1152.0], [2003.0, 1629.0], [2054.0, 1107.5], [2126.0, 1116.0], [2150.0, 1118.3333333333333], [2110.0, 1111.0], [2062.0, 1105.0], [2070.0, 1110.0], [2078.0, 1113.5], [2102.0, 1113.0], [2094.0, 1115.0], [2086.0, 1109.5], [2278.0, 1103.5], [2294.0, 1103.0], [2302.0, 1105.0], [2262.0, 1105.5], [2238.0, 1101.0], [2182.0, 1127.5], [2190.0, 1106.0], [2206.0, 1112.0], [2222.0, 1106.0], [2414.0, 1106.0], [2374.0, 1104.5], [2382.0, 1103.0], [2398.0, 1100.0], [2422.0, 1106.0], [2318.0, 1113.5], [2366.0, 1102.0], [2358.0, 1100.0], [2350.0, 1113.0], [2550.0, 1105.5], [2558.0, 1094.0], [2502.0, 1102.0], [2510.0, 1099.0], [2462.0, 1099.6666666666667], [2454.0, 1106.5], [2446.0, 1098.5], [2438.0, 1107.6666666666667], [2494.0, 1102.0], [2486.0, 1100.0], [2470.0, 1104.0], [2662.0, 1102.0], [2670.0, 1103.3333333333333], [2678.0, 1102.3333333333333], [2686.0, 1104.3333333333333], [2646.0, 1106.0], [2622.0, 1104.0], [2566.0, 1105.0], [2582.0, 1104.0], [2590.0, 1104.0], [2598.0, 1108.0], [2718.0, 1112.0], [2758.0, 1111.0], [2774.0, 1105.0], [2790.0, 1105.0], [2710.0, 1099.0], [2742.0, 1099.0], [2734.0, 1111.0], [2726.0, 1104.0], [2942.0, 1110.0], [2934.0, 1108.6666666666667], [2886.0, 1113.5], [2918.0, 1108.0], [2830.0, 1143.0], [2846.0, 1115.0], [2854.0, 1112.0], [2950.0, 1106.0], [2159.0, 1107.0], [2175.0, 1108.5], [2119.0, 1113.0], [2135.0, 1112.0], [2143.0, 1102.5], [2071.0, 1122.0], [2055.0, 1107.0], [2111.0, 1107.5], [2095.0, 1107.0], [2087.0, 1109.0], [2191.0, 1110.0], [2255.0, 1127.5], [2207.0, 1103.5], [2199.0, 1143.5], [2239.0, 1109.0], [2231.0, 1116.0], [2223.0, 1116.0], [2215.0, 1107.0], [2271.0, 1105.0], [2431.0, 1107.5], [2423.0, 1111.0], [2391.0, 1106.0], [2399.0, 1098.0], [2335.0, 1109.0], [2319.0, 1103.0], [2311.0, 1100.0], [2351.0, 1111.0], [2543.0, 1112.0], [2559.0, 1111.5], [2511.0, 1111.5], [2519.0, 1095.0], [2527.0, 1103.0], [2535.0, 1101.0], [2455.0, 1105.5], [2487.0, 1102.25], [2471.0, 1106.0], [2663.0, 1097.0], [2655.0, 1107.0], [2583.0, 1109.0], [2615.0, 1105.0], [2607.0, 1108.0], [2599.0, 1109.5], [2719.0, 1115.0], [2799.0, 1099.5], [2767.0, 1103.5], [2791.0, 1105.0], [2711.0, 1103.0], [2703.0, 1107.6666666666667], [2695.0, 1097.0], [2751.0, 1101.5], [2831.0, 1117.0], [2927.0, 1106.5], [2943.0, 1108.0], [2911.0, 1109.0], [2879.0, 1108.5], [2839.0, 1106.0], [2847.0, 1103.0], [2871.0, 1109.5], [2863.0, 1110.0], [2855.0, 1110.0], [2951.0, 1113.0], [2959.0, 1111.5], [2967.0, 1107.0], [2975.0, 1111.0], [2983.0, 1105.6], [1.0, 7815.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[2962.584241666676, 1526.8383083333322]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 3000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 23892.0, "minX": 1.68416832E12, "maxY": 374334.68333333335, "series": [{"data": [[1.68416844E12, 271678.95], [1.68416862E12, 191108.61666666667], [1.68416856E12, 209166.7], [1.68416838E12, 259864.63333333333], [1.68416832E12, 29399.966666666667], [1.6841685E12, 374334.68333333335]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.68416844E12, 220829.05], [1.68416862E12, 155361.35], [1.68416856E12, 169986.15], [1.68416838E12, 211380.85], [1.68416832E12, 23892.0], [1.6841685E12, 304550.6]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68416862E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 1357.051908640793, "minX": 1.68416832E12, "maxY": 2643.8310606060636, "series": [{"data": [[1.68416844E12, 1477.0279906561273], [1.68416862E12, 1436.3306926079115], [1.68416856E12, 1357.051908640793], [1.68416838E12, 1875.7823778738762], [1.68416832E12, 2643.8310606060636], [1.6841685E12, 1374.0722393914207]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68416862E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 1356.81584411436, "minX": 1.68416832E12, "maxY": 2642.10454545454, "series": [{"data": [[1.68416844E12, 1476.730420884387], [1.68416862E12, 1436.0863866721074], [1.68416856E12, 1356.81584411436], [1.68416838E12, 1875.487819497362], [1.68416832E12, 2642.10454545454], [1.6841685E12, 1373.7873529062117]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68416862E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 39.185189587542936, "minX": 1.68416832E12, "maxY": 1413.4242424242423, "series": [{"data": [[1.68416844E12, 85.36236219827097], [1.68416862E12, 201.47206850352464], [1.68416856E12, 161.47942288239426], [1.68416838E12, 303.9395898445859], [1.68416832E12, 1413.4242424242423], [1.6841685E12, 39.185189587542936]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68416862E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 1089.0, "minX": 1.68416832E12, "maxY": 16426.0, "series": [{"data": [[1.68416844E12, 14306.0], [1.68416862E12, 8743.0], [1.68416856E12, 12610.0], [1.68416838E12, 16426.0], [1.68416832E12, 9953.0], [1.6841685E12, 9276.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.68416844E12, 2064.0], [1.68416862E12, 1945.8999999999996], [1.68416856E12, 2109.0], [1.68416838E12, 1973.0], [1.68416832E12, 5517.0], [1.6841685E12, 2008.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.68416844E12, 5869.970000000005], [1.68416862E12, 4871.490000000002], [1.68416856E12, 3608.400000000016], [1.68416838E12, 8156.980000000003], [1.68416832E12, 6762.0], [1.6841685E12, 3298.970000000005]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.68416844E12, 2492.9500000000007], [1.68416862E12, 3251.0], [1.68416856E12, 2579.0], [1.68416838E12, 3341.600000000006], [1.68416832E12, 6110.0], [1.6841685E12, 2214.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.68416844E12, 1091.0], [1.68416862E12, 1090.0], [1.68416856E12, 1091.0], [1.68416838E12, 1089.0], [1.68416832E12, 1096.0], [1.6841685E12, 1091.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.68416844E12, 1118.0], [1.68416862E12, 1116.0], [1.68416856E12, 1109.0], [1.68416838E12, 1111.0], [1.68416832E12, 1756.0], [1.6841685E12, 1126.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68416862E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 39.0, "minX": 1.0, "maxY": 7919.0, "series": [{"data": [[2.0, 5234.0], [3.0, 6470.0], [4.0, 5170.0], [5.0, 7450.0], [6.0, 5125.0], [7.0, 5721.0], [9.0, 1398.0], [10.0, 5230.5], [11.0, 4520.0], [15.0, 1896.0], [16.0, 4016.0], [18.0, 1157.0], [20.0, 7334.5], [21.0, 1665.5], [23.0, 7919.0], [29.0, 1544.0], [32.0, 3068.5], [35.0, 1537.0], [34.0, 1993.5], [42.0, 3140.5], [45.0, 1844.0], [51.0, 1104.0], [56.0, 1106.0], [59.0, 3187.0], [58.0, 1721.0], [62.0, 1298.0], [67.0, 2093.0], [70.0, 1103.5], [74.0, 1264.5], [87.0, 1103.0], [86.0, 1105.0], [95.0, 6640.0], [93.0, 1106.0], [103.0, 2729.0], [109.0, 1107.0], [108.0, 1810.5], [112.0, 3349.0], [116.0, 1172.0], [132.0, 1105.0], [128.0, 1124.0], [139.0, 1104.0], [147.0, 1103.0], [144.0, 1524.0], [158.0, 1121.0], [159.0, 1102.0], [173.0, 1157.0], [180.0, 1132.0], [179.0, 1540.0], [198.0, 2357.0], [192.0, 1808.0], [202.0, 2140.0], [206.0, 1460.0], [219.0, 1343.0], [221.0, 1444.0], [243.0, 2862.0], [249.0, 1416.0], [271.0, 1638.0], [260.0, 1103.0], [267.0, 1696.0], [279.0, 1793.0], [283.0, 1106.0], [294.0, 1103.0], [289.0, 1175.0], [300.0, 1105.0], [306.0, 1103.5], [326.0, 1910.5], [333.0, 1103.0], [327.0, 1112.0], [321.0, 1109.0], [323.0, 1399.0], [344.0, 1675.0], [347.0, 1108.0], [358.0, 1444.5], [359.0, 1111.0], [364.0, 1669.0], [352.0, 1102.0], [368.0, 1108.0], [378.0, 1451.5], [374.0, 1105.0], [373.0, 1438.0], [382.0, 1120.0], [395.0, 1108.0], [392.0, 1105.0], [398.0, 1113.0], [399.0, 1105.0], [390.0, 1119.0], [397.0, 1105.0], [393.0, 1157.0], [403.0, 1109.0], [408.0, 1108.0], [400.0, 1105.0], [405.0, 1119.0], [412.0, 1105.0], [401.0, 1106.0], [410.0, 1112.0], [411.0, 1107.0], [409.0, 1108.0], [407.0, 1742.0], [404.0, 1576.0], [422.0, 1670.0], [420.0, 1114.0], [425.0, 1105.0], [424.0, 1115.0], [419.0, 1106.0], [435.0, 1108.0], [439.0, 1108.0], [438.0, 1111.0], [444.0, 1119.5], [445.0, 1212.0], [461.0, 1126.0], [457.0, 1116.0], [460.0, 2483.0], [455.0, 1107.0], [475.0, 1105.0], [477.0, 1106.0], [496.0, 1202.5], [499.0, 1136.0], [511.0, 1883.0], [503.0, 1111.0], [516.0, 3174.5], [525.0, 1486.0], [540.0, 1158.0], [519.0, 2198.0], [553.0, 1227.0], [590.0, 1135.0], [597.0, 1153.0], [595.0, 2165.0], [602.0, 1706.0], [605.0, 2156.0], [586.0, 1113.0], [635.0, 1794.0], [636.0, 2459.0], [631.0, 1458.5], [643.0, 1811.0], [642.0, 1112.5], [655.0, 1693.0], [644.0, 1701.0], [656.0, 1104.0], [650.0, 1106.0], [646.0, 1104.5], [695.0, 1154.0], [675.0, 1447.0], [676.0, 1114.0], [687.0, 1663.0], [717.0, 1753.0], [725.0, 2515.0], [731.0, 1115.0], [714.0, 1312.0], [760.0, 1115.0], [750.0, 1113.0], [759.0, 1315.0], [747.0, 1107.0], [765.0, 1105.0], [764.0, 1104.0], [758.0, 1114.0], [752.0, 1110.0], [740.0, 1106.0], [751.0, 1120.0], [769.0, 1114.0], [781.0, 2818.0], [773.0, 1108.0], [784.0, 1107.0], [790.0, 1117.0], [771.0, 1110.0], [770.0, 1112.0], [772.0, 1106.0], [782.0, 1104.0], [776.0, 1105.0], [798.0, 1121.0], [794.0, 1110.0], [792.0, 1105.0], [768.0, 1671.5], [783.0, 1105.0], [804.0, 2531.0], [819.0, 1113.0], [813.0, 1108.0], [811.0, 1232.0], [812.0, 1528.0], [863.0, 2095.0], [841.0, 1115.0], [854.0, 1990.0], [835.0, 3100.0], [868.0, 1120.0], [878.0, 1106.0], [876.0, 1490.0], [890.0, 1449.5], [893.0, 1109.0], [898.0, 1410.0], [920.0, 1119.0], [919.0, 1107.0], [902.0, 1107.0], [903.0, 1104.0], [897.0, 2075.0], [896.0, 2175.0], [917.0, 1108.0], [912.0, 1613.0], [924.0, 1663.0], [914.0, 1124.0], [908.0, 1105.0], [905.0, 1114.0], [906.0, 1131.0], [900.0, 1137.0], [934.0, 1109.0], [929.0, 1105.0], [935.0, 1121.0], [958.0, 1488.0], [1.0, 5026.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[540.0, 42.0], [35.0, 43.0], [602.0, 39.5], [631.0, 49.0], [643.0, 42.0], [656.0, 42.0], [717.0, 959.5], [45.0, 42.0], [759.0, 42.0], [750.0, 42.0], [781.0, 40.0], [784.0, 42.0], [769.0, 48.0], [863.0, 2179.0], [835.0, 40.0], [878.0, 40.0], [876.0, 44.5], [893.0, 45.0], [920.0, 42.0], [898.0, 51.0], [905.0, 49.0], [900.0, 46.0], [906.0, 41.0], [912.0, 44.0], [917.0, 41.0], [896.0, 41.0], [58.0, 41.0], [934.0, 49.0], [935.0, 42.0], [70.0, 43.0], [5.0, 43.0], [95.0, 39.5], [6.0, 40.0], [109.0, 66.0], [112.0, 2150.0], [139.0, 39.0], [347.0, 41.0], [393.0, 53.0], [405.0, 46.0], [420.0, 52.0], [457.0, 48.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 958.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 39.0, "minX": 1.0, "maxY": 7919.0, "series": [{"data": [[2.0, 5233.0], [3.0, 6469.0], [4.0, 5168.5], [5.0, 7450.0], [6.0, 5124.0], [7.0, 5720.0], [9.0, 1398.0], [10.0, 5230.5], [11.0, 4520.0], [15.0, 1896.0], [16.0, 4015.5], [18.0, 1156.5], [20.0, 7334.5], [21.0, 1665.5], [23.0, 7919.0], [29.0, 1544.0], [32.0, 3068.5], [35.0, 1537.0], [34.0, 1993.5], [42.0, 3139.5], [45.0, 1844.0], [51.0, 1104.0], [56.0, 1106.0], [59.0, 3187.0], [58.0, 1721.0], [62.0, 1297.5], [67.0, 2093.0], [70.0, 1103.0], [74.0, 1264.0], [87.0, 1103.0], [86.0, 1105.0], [95.0, 6640.0], [93.0, 1106.0], [103.0, 2728.0], [109.0, 1106.0], [108.0, 1810.5], [112.0, 3348.0], [116.0, 1172.0], [132.0, 1105.0], [128.0, 1124.0], [139.0, 1104.0], [147.0, 1103.0], [144.0, 1524.0], [158.0, 1121.0], [159.0, 1102.0], [173.0, 1157.0], [180.0, 1132.0], [179.0, 1540.0], [198.0, 2357.0], [192.0, 1807.5], [202.0, 2140.0], [206.0, 1460.0], [219.0, 1343.0], [221.0, 1444.0], [243.0, 2849.0], [249.0, 1416.0], [271.0, 1638.0], [260.0, 1102.0], [267.0, 1695.0], [279.0, 1792.0], [283.0, 1106.0], [294.0, 1103.0], [289.0, 1175.0], [300.0, 1105.0], [306.0, 1103.0], [326.0, 1910.0], [333.0, 1102.0], [327.0, 1111.0], [321.0, 1109.0], [323.0, 1399.0], [344.0, 1674.5], [347.0, 1108.0], [358.0, 1444.0], [359.0, 1111.0], [364.0, 1669.0], [352.0, 1102.0], [368.0, 1108.0], [378.0, 1451.5], [374.0, 1105.0], [373.0, 1438.0], [382.0, 1120.0], [395.0, 1108.0], [392.0, 1104.0], [398.0, 1113.0], [399.0, 1105.0], [390.0, 1119.0], [397.0, 1105.0], [393.0, 1157.0], [403.0, 1108.0], [408.0, 1108.0], [400.0, 1105.0], [405.0, 1119.0], [412.0, 1105.0], [401.0, 1106.0], [410.0, 1112.0], [411.0, 1107.0], [409.0, 1108.0], [407.0, 1742.0], [404.0, 1576.0], [422.0, 1670.0], [420.0, 1114.0], [425.0, 1105.0], [424.0, 1115.0], [419.0, 1105.0], [435.0, 1108.0], [439.0, 1108.0], [438.0, 1111.0], [444.0, 1119.0], [445.0, 1211.0], [461.0, 1126.0], [457.0, 1116.0], [460.0, 2483.0], [455.0, 1107.0], [475.0, 1104.0], [477.0, 1105.0], [496.0, 1202.0], [499.0, 1136.0], [511.0, 1883.0], [503.0, 1111.0], [516.0, 3174.0], [525.0, 1486.0], [540.0, 1158.0], [519.0, 2198.0], [553.0, 1227.0], [590.0, 1134.5], [597.0, 1153.0], [595.0, 2165.0], [602.0, 1706.0], [605.0, 2155.0], [586.0, 1113.0], [635.0, 1794.0], [636.0, 2459.0], [631.0, 1458.5], [643.0, 1811.0], [642.0, 1112.0], [655.0, 1693.0], [644.0, 1701.0], [656.0, 1104.0], [650.0, 1105.0], [646.0, 1104.0], [695.0, 1154.0], [675.0, 1446.0], [676.0, 1114.0], [687.0, 1662.0], [717.0, 1753.0], [725.0, 2514.0], [731.0, 1115.0], [714.0, 1312.0], [760.0, 1114.5], [750.0, 1112.0], [759.0, 1315.0], [747.0, 1107.0], [765.0, 1105.0], [764.0, 1104.0], [758.0, 1113.0], [752.0, 1110.0], [740.0, 1106.0], [751.0, 1120.0], [769.0, 1113.0], [781.0, 2818.0], [773.0, 1107.0], [784.0, 1107.0], [790.0, 1116.0], [771.0, 1110.0], [770.0, 1112.0], [772.0, 1105.0], [782.0, 1104.0], [776.0, 1105.0], [798.0, 1121.0], [794.0, 1110.0], [792.0, 1105.0], [768.0, 1671.0], [783.0, 1105.0], [804.0, 2530.5], [819.0, 1113.0], [813.0, 1108.0], [811.0, 1231.0], [812.0, 1527.5], [863.0, 2095.0], [841.0, 1114.0], [854.0, 1990.0], [835.0, 3100.0], [868.0, 1120.0], [878.0, 1106.0], [876.0, 1490.0], [890.0, 1449.5], [893.0, 1109.0], [898.0, 1410.0], [920.0, 1118.0], [919.0, 1107.0], [902.0, 1107.0], [903.0, 1104.0], [897.0, 2075.0], [896.0, 2175.0], [917.0, 1108.0], [912.0, 1613.0], [924.0, 1663.0], [914.0, 1124.0], [908.0, 1105.0], [905.0, 1114.0], [906.0, 1131.0], [900.0, 1137.0], [934.0, 1108.0], [929.0, 1105.0], [935.0, 1121.0], [958.0, 1488.0], [1.0, 5025.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[540.0, 42.0], [35.0, 43.0], [602.0, 39.5], [631.0, 49.0], [643.0, 42.0], [656.0, 42.0], [717.0, 959.5], [45.0, 42.0], [759.0, 42.0], [750.0, 42.0], [781.0, 40.0], [784.0, 42.0], [769.0, 48.0], [863.0, 2179.0], [835.0, 40.0], [878.0, 40.0], [876.0, 44.5], [893.0, 45.0], [920.0, 42.0], [898.0, 51.0], [905.0, 49.0], [900.0, 46.0], [906.0, 41.0], [912.0, 44.0], [917.0, 41.0], [896.0, 41.0], [58.0, 41.0], [934.0, 49.0], [935.0, 42.0], [70.0, 43.0], [5.0, 43.0], [95.0, 39.5], [6.0, 40.0], [109.0, 66.0], [112.0, 2150.0], [139.0, 39.0], [347.0, 41.0], [393.0, 53.0], [405.0, 46.0], [420.0, 52.0], [457.0, 48.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 958.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 86.66666666666667, "minX": 1.68416832E12, "maxY": 546.6666666666666, "series": [{"data": [[1.68416844E12, 426.6666666666667], [1.68416862E12, 260.0], [1.68416856E12, 333.3333333333333], [1.68416838E12, 346.6666666666667], [1.68416832E12, 86.66666666666667], [1.6841685E12, 546.6666666666666]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68416862E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.68416832E12, "maxY": 559.5833333333334, "series": [{"data": [[1.68416844E12, 406.3833333333333], [1.68416862E12, 285.8333333333333], [1.68416856E12, 312.9166666666667], [1.68416838E12, 388.51666666666665], [1.68416832E12, 43.983333333333334], [1.6841685E12, 559.5833333333334]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.68416844E12, 0.3], [1.68416862E12, 0.2833333333333333], [1.68416856E12, 0.13333333333333333], [1.68416838E12, 0.7666666666666667], [1.68416832E12, 0.016666666666666666], [1.6841685E12, 1.2833333333333334]], "isOverall": false, "label": "429", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68416862E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.68416832E12, "maxY": 559.5833333333334, "series": [{"data": [[1.68416844E12, 406.3833333333333], [1.68416862E12, 285.8333333333333], [1.68416856E12, 312.9166666666667], [1.68416838E12, 388.51666666666665], [1.68416832E12, 43.983333333333334], [1.6841685E12, 559.5833333333334]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.68416844E12, 0.3], [1.68416862E12, 0.2833333333333333], [1.68416856E12, 0.13333333333333333], [1.68416838E12, 0.7666666666666667], [1.68416832E12, 0.016666666666666666], [1.6841685E12, 1.2833333333333334]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68416862E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.68416832E12, "maxY": 559.5833333333334, "series": [{"data": [[1.68416844E12, 406.3833333333333], [1.68416862E12, 285.8333333333333], [1.68416856E12, 312.9166666666667], [1.68416838E12, 388.51666666666665], [1.68416832E12, 43.983333333333334], [1.6841685E12, 559.5833333333334]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.68416844E12, 0.3], [1.68416862E12, 0.2833333333333333], [1.68416856E12, 0.13333333333333333], [1.68416838E12, 0.7666666666666667], [1.68416832E12, 0.016666666666666666], [1.6841685E12, 1.2833333333333334]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68416862E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

