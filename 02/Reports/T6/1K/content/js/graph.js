/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 1769.0, "minX": 0.0, "maxY": 25845.0, "series": [{"data": [[0.0, 1769.0], [0.1, 1799.0], [0.2, 1801.0], [0.3, 1804.0], [0.4, 1807.0], [0.5, 1810.0], [0.6, 1810.0], [0.7, 1812.0], [0.8, 1814.0], [0.9, 1817.0], [1.0, 1818.0], [1.1, 1818.0], [1.2, 1822.0], [1.3, 1823.0], [1.4, 1824.0], [1.5, 1825.0], [1.6, 1825.0], [1.7, 1825.0], [1.8, 1826.0], [1.9, 1826.0], [2.0, 1827.0], [2.1, 1828.0], [2.2, 1828.0], [2.3, 1829.0], [2.4, 1829.0], [2.5, 1830.0], [2.6, 1831.0], [2.7, 1832.0], [2.8, 1832.0], [2.9, 1833.0], [3.0, 1833.0], [3.1, 1833.0], [3.2, 1834.0], [3.3, 1834.0], [3.4, 1834.0], [3.5, 1834.0], [3.6, 1835.0], [3.7, 1835.0], [3.8, 1836.0], [3.9, 1837.0], [4.0, 1838.0], [4.1, 1839.0], [4.2, 1839.0], [4.3, 1839.0], [4.4, 1840.0], [4.5, 1840.0], [4.6, 1840.0], [4.7, 1841.0], [4.8, 1841.0], [4.9, 1842.0], [5.0, 1842.0], [5.1, 1842.0], [5.2, 1844.0], [5.3, 1844.0], [5.4, 1844.0], [5.5, 1845.0], [5.6, 1845.0], [5.7, 1845.0], [5.8, 1845.0], [5.9, 1846.0], [6.0, 1846.0], [6.1, 1848.0], [6.2, 1848.0], [6.3, 1848.0], [6.4, 1848.0], [6.5, 1849.0], [6.6, 1849.0], [6.7, 1849.0], [6.8, 1850.0], [6.9, 1850.0], [7.0, 1850.0], [7.1, 1850.0], [7.2, 1851.0], [7.3, 1851.0], [7.4, 1851.0], [7.5, 1851.0], [7.6, 1852.0], [7.7, 1852.0], [7.8, 1852.0], [7.9, 1852.0], [8.0, 1852.0], [8.1, 1853.0], [8.2, 1853.0], [8.3, 1854.0], [8.4, 1854.0], [8.5, 1854.0], [8.6, 1854.0], [8.7, 1855.0], [8.8, 1855.0], [8.9, 1855.0], [9.0, 1855.0], [9.1, 1855.0], [9.2, 1856.0], [9.3, 1856.0], [9.4, 1856.0], [9.5, 1856.0], [9.6, 1857.0], [9.7, 1857.0], [9.8, 1857.0], [9.9, 1857.0], [10.0, 1857.0], [10.1, 1857.0], [10.2, 1858.0], [10.3, 1858.0], [10.4, 1858.0], [10.5, 1858.0], [10.6, 1858.0], [10.7, 1859.0], [10.8, 1859.0], [10.9, 1859.0], [11.0, 1859.0], [11.1, 1860.0], [11.2, 1860.0], [11.3, 1860.0], [11.4, 1860.0], [11.5, 1861.0], [11.6, 1861.0], [11.7, 1862.0], [11.8, 1862.0], [11.9, 1862.0], [12.0, 1862.0], [12.1, 1862.0], [12.2, 1862.0], [12.3, 1863.0], [12.4, 1863.0], [12.5, 1863.0], [12.6, 1863.0], [12.7, 1863.0], [12.8, 1863.0], [12.9, 1863.0], [13.0, 1864.0], [13.1, 1864.0], [13.2, 1864.0], [13.3, 1864.0], [13.4, 1865.0], [13.5, 1865.0], [13.6, 1866.0], [13.7, 1866.0], [13.8, 1866.0], [13.9, 1866.0], [14.0, 1867.0], [14.1, 1867.0], [14.2, 1867.0], [14.3, 1868.0], [14.4, 1868.0], [14.5, 1868.0], [14.6, 1868.0], [14.7, 1868.0], [14.8, 1869.0], [14.9, 1869.0], [15.0, 1869.0], [15.1, 1869.0], [15.2, 1870.0], [15.3, 1870.0], [15.4, 1870.0], [15.5, 1870.0], [15.6, 1871.0], [15.7, 1871.0], [15.8, 1872.0], [15.9, 1872.0], [16.0, 1872.0], [16.1, 1872.0], [16.2, 1872.0], [16.3, 1873.0], [16.4, 1873.0], [16.5, 1873.0], [16.6, 1873.0], [16.7, 1874.0], [16.8, 1874.0], [16.9, 1874.0], [17.0, 1875.0], [17.1, 1875.0], [17.2, 1875.0], [17.3, 1875.0], [17.4, 1876.0], [17.5, 1876.0], [17.6, 1876.0], [17.7, 1876.0], [17.8, 1876.0], [17.9, 1876.0], [18.0, 1877.0], [18.1, 1877.0], [18.2, 1877.0], [18.3, 1877.0], [18.4, 1877.0], [18.5, 1877.0], [18.6, 1877.0], [18.7, 1878.0], [18.8, 1878.0], [18.9, 1878.0], [19.0, 1878.0], [19.1, 1878.0], [19.2, 1878.0], [19.3, 1879.0], [19.4, 1879.0], [19.5, 1879.0], [19.6, 1879.0], [19.7, 1879.0], [19.8, 1880.0], [19.9, 1880.0], [20.0, 1880.0], [20.1, 1881.0], [20.2, 1881.0], [20.3, 1881.0], [20.4, 1881.0], [20.5, 1881.0], [20.6, 1881.0], [20.7, 1882.0], [20.8, 1882.0], [20.9, 1882.0], [21.0, 1882.0], [21.1, 1883.0], [21.2, 1883.0], [21.3, 1883.0], [21.4, 1883.0], [21.5, 1883.0], [21.6, 1883.0], [21.7, 1884.0], [21.8, 1884.0], [21.9, 1884.0], [22.0, 1884.0], [22.1, 1884.0], [22.2, 1884.0], [22.3, 1885.0], [22.4, 1885.0], [22.5, 1885.0], [22.6, 1886.0], [22.7, 1886.0], [22.8, 1886.0], [22.9, 1887.0], [23.0, 1887.0], [23.1, 1887.0], [23.2, 1887.0], [23.3, 1888.0], [23.4, 1888.0], [23.5, 1888.0], [23.6, 1888.0], [23.7, 1888.0], [23.8, 1889.0], [23.9, 1889.0], [24.0, 1889.0], [24.1, 1889.0], [24.2, 1889.0], [24.3, 1890.0], [24.4, 1890.0], [24.5, 1890.0], [24.6, 1890.0], [24.7, 1890.0], [24.8, 1891.0], [24.9, 1891.0], [25.0, 1891.0], [25.1, 1891.0], [25.2, 1891.0], [25.3, 1891.0], [25.4, 1891.0], [25.5, 1891.0], [25.6, 1892.0], [25.7, 1892.0], [25.8, 1892.0], [25.9, 1893.0], [26.0, 1893.0], [26.1, 1894.0], [26.2, 1894.0], [26.3, 1894.0], [26.4, 1894.0], [26.5, 1894.0], [26.6, 1894.0], [26.7, 1894.0], [26.8, 1894.0], [26.9, 1895.0], [27.0, 1895.0], [27.1, 1895.0], [27.2, 1895.0], [27.3, 1895.0], [27.4, 1895.0], [27.5, 1895.0], [27.6, 1895.0], [27.7, 1895.0], [27.8, 1895.0], [27.9, 1896.0], [28.0, 1896.0], [28.1, 1896.0], [28.2, 1896.0], [28.3, 1896.0], [28.4, 1897.0], [28.5, 1897.0], [28.6, 1897.0], [28.7, 1898.0], [28.8, 1898.0], [28.9, 1898.0], [29.0, 1898.0], [29.1, 1898.0], [29.2, 1899.0], [29.3, 1899.0], [29.4, 1899.0], [29.5, 1899.0], [29.6, 1900.0], [29.7, 1900.0], [29.8, 1900.0], [29.9, 1901.0], [30.0, 1901.0], [30.1, 1901.0], [30.2, 1901.0], [30.3, 1901.0], [30.4, 1902.0], [30.5, 1902.0], [30.6, 1902.0], [30.7, 1902.0], [30.8, 1902.0], [30.9, 1902.0], [31.0, 1902.0], [31.1, 1903.0], [31.2, 1903.0], [31.3, 1903.0], [31.4, 1904.0], [31.5, 1904.0], [31.6, 1904.0], [31.7, 1904.0], [31.8, 1904.0], [31.9, 1904.0], [32.0, 1904.0], [32.1, 1904.0], [32.2, 1904.0], [32.3, 1905.0], [32.4, 1905.0], [32.5, 1905.0], [32.6, 1905.0], [32.7, 1906.0], [32.8, 1906.0], [32.9, 1906.0], [33.0, 1906.0], [33.1, 1906.0], [33.2, 1907.0], [33.3, 1907.0], [33.4, 1907.0], [33.5, 1907.0], [33.6, 1907.0], [33.7, 1907.0], [33.8, 1907.0], [33.9, 1908.0], [34.0, 1908.0], [34.1, 1908.0], [34.2, 1908.0], [34.3, 1908.0], [34.4, 1908.0], [34.5, 1908.0], [34.6, 1909.0], [34.7, 1909.0], [34.8, 1909.0], [34.9, 1909.0], [35.0, 1909.0], [35.1, 1909.0], [35.2, 1909.0], [35.3, 1910.0], [35.4, 1910.0], [35.5, 1910.0], [35.6, 1910.0], [35.7, 1910.0], [35.8, 1911.0], [35.9, 1911.0], [36.0, 1911.0], [36.1, 1911.0], [36.2, 1911.0], [36.3, 1912.0], [36.4, 1912.0], [36.5, 1912.0], [36.6, 1912.0], [36.7, 1912.0], [36.8, 1912.0], [36.9, 1913.0], [37.0, 1913.0], [37.1, 1913.0], [37.2, 1913.0], [37.3, 1913.0], [37.4, 1914.0], [37.5, 1914.0], [37.6, 1914.0], [37.7, 1914.0], [37.8, 1914.0], [37.9, 1914.0], [38.0, 1914.0], [38.1, 1914.0], [38.2, 1915.0], [38.3, 1915.0], [38.4, 1915.0], [38.5, 1915.0], [38.6, 1915.0], [38.7, 1915.0], [38.8, 1915.0], [38.9, 1916.0], [39.0, 1916.0], [39.1, 1916.0], [39.2, 1916.0], [39.3, 1916.0], [39.4, 1916.0], [39.5, 1917.0], [39.6, 1917.0], [39.7, 1917.0], [39.8, 1917.0], [39.9, 1917.0], [40.0, 1918.0], [40.1, 1918.0], [40.2, 1918.0], [40.3, 1918.0], [40.4, 1918.0], [40.5, 1918.0], [40.6, 1919.0], [40.7, 1919.0], [40.8, 1919.0], [40.9, 1920.0], [41.0, 1921.0], [41.1, 1921.0], [41.2, 1921.0], [41.3, 1921.0], [41.4, 1922.0], [41.5, 1922.0], [41.6, 1922.0], [41.7, 1922.0], [41.8, 1923.0], [41.9, 1923.0], [42.0, 1923.0], [42.1, 1923.0], [42.2, 1923.0], [42.3, 1923.0], [42.4, 1924.0], [42.5, 1924.0], [42.6, 1924.0], [42.7, 1925.0], [42.8, 1925.0], [42.9, 1925.0], [43.0, 1926.0], [43.1, 1926.0], [43.2, 1926.0], [43.3, 1926.0], [43.4, 1926.0], [43.5, 1926.0], [43.6, 1926.0], [43.7, 1927.0], [43.8, 1927.0], [43.9, 1927.0], [44.0, 1927.0], [44.1, 1927.0], [44.2, 1927.0], [44.3, 1927.0], [44.4, 1928.0], [44.5, 1928.0], [44.6, 1928.0], [44.7, 1928.0], [44.8, 1928.0], [44.9, 1929.0], [45.0, 1929.0], [45.1, 1929.0], [45.2, 1930.0], [45.3, 1930.0], [45.4, 1930.0], [45.5, 1930.0], [45.6, 1930.0], [45.7, 1931.0], [45.8, 1931.0], [45.9, 1931.0], [46.0, 1931.0], [46.1, 1931.0], [46.2, 1932.0], [46.3, 1932.0], [46.4, 1932.0], [46.5, 1933.0], [46.6, 1933.0], [46.7, 1934.0], [46.8, 1935.0], [46.9, 1935.0], [47.0, 1935.0], [47.1, 1935.0], [47.2, 1936.0], [47.3, 1936.0], [47.4, 1937.0], [47.5, 1937.0], [47.6, 1937.0], [47.7, 1937.0], [47.8, 1937.0], [47.9, 1938.0], [48.0, 1938.0], [48.1, 1938.0], [48.2, 1938.0], [48.3, 1938.0], [48.4, 1939.0], [48.5, 1939.0], [48.6, 1939.0], [48.7, 1939.0], [48.8, 1939.0], [48.9, 1939.0], [49.0, 1940.0], [49.1, 1940.0], [49.2, 1940.0], [49.3, 1941.0], [49.4, 1941.0], [49.5, 1941.0], [49.6, 1942.0], [49.7, 1942.0], [49.8, 1942.0], [49.9, 1942.0], [50.0, 1942.0], [50.1, 1942.0], [50.2, 1942.0], [50.3, 1943.0], [50.4, 1943.0], [50.5, 1943.0], [50.6, 1944.0], [50.7, 1944.0], [50.8, 1944.0], [50.9, 1945.0], [51.0, 1945.0], [51.1, 1945.0], [51.2, 1945.0], [51.3, 1946.0], [51.4, 1946.0], [51.5, 1946.0], [51.6, 1946.0], [51.7, 1946.0], [51.8, 1947.0], [51.9, 1947.0], [52.0, 1947.0], [52.1, 1948.0], [52.2, 1948.0], [52.3, 1948.0], [52.4, 1948.0], [52.5, 1948.0], [52.6, 1948.0], [52.7, 1949.0], [52.8, 1949.0], [52.9, 1949.0], [53.0, 1949.0], [53.1, 1950.0], [53.2, 1950.0], [53.3, 1950.0], [53.4, 1951.0], [53.5, 1951.0], [53.6, 1951.0], [53.7, 1951.0], [53.8, 1952.0], [53.9, 1952.0], [54.0, 1952.0], [54.1, 1953.0], [54.2, 1953.0], [54.3, 1954.0], [54.4, 1954.0], [54.5, 1954.0], [54.6, 1954.0], [54.7, 1954.0], [54.8, 1954.0], [54.9, 1955.0], [55.0, 1955.0], [55.1, 1955.0], [55.2, 1956.0], [55.3, 1956.0], [55.4, 1956.0], [55.5, 1956.0], [55.6, 1956.0], [55.7, 1957.0], [55.8, 1957.0], [55.9, 1957.0], [56.0, 1957.0], [56.1, 1957.0], [56.2, 1958.0], [56.3, 1958.0], [56.4, 1958.0], [56.5, 1958.0], [56.6, 1958.0], [56.7, 1959.0], [56.8, 1959.0], [56.9, 1959.0], [57.0, 1959.0], [57.1, 1959.0], [57.2, 1959.0], [57.3, 1960.0], [57.4, 1960.0], [57.5, 1960.0], [57.6, 1960.0], [57.7, 1960.0], [57.8, 1961.0], [57.9, 1961.0], [58.0, 1961.0], [58.1, 1961.0], [58.2, 1962.0], [58.3, 1962.0], [58.4, 1962.0], [58.5, 1962.0], [58.6, 1963.0], [58.7, 1963.0], [58.8, 1963.0], [58.9, 1964.0], [59.0, 1964.0], [59.1, 1964.0], [59.2, 1964.0], [59.3, 1964.0], [59.4, 1965.0], [59.5, 1965.0], [59.6, 1965.0], [59.7, 1966.0], [59.8, 1966.0], [59.9, 1966.0], [60.0, 1967.0], [60.1, 1967.0], [60.2, 1967.0], [60.3, 1968.0], [60.4, 1969.0], [60.5, 1969.0], [60.6, 1969.0], [60.7, 1970.0], [60.8, 1971.0], [60.9, 1971.0], [61.0, 1971.0], [61.1, 1972.0], [61.2, 1972.0], [61.3, 1973.0], [61.4, 1973.0], [61.5, 1973.0], [61.6, 1973.0], [61.7, 1974.0], [61.8, 1974.0], [61.9, 1974.0], [62.0, 1974.0], [62.1, 1975.0], [62.2, 1975.0], [62.3, 1976.0], [62.4, 1976.0], [62.5, 1976.0], [62.6, 1976.0], [62.7, 1977.0], [62.8, 1978.0], [62.9, 1978.0], [63.0, 1978.0], [63.1, 1979.0], [63.2, 1979.0], [63.3, 1979.0], [63.4, 1980.0], [63.5, 1980.0], [63.6, 1980.0], [63.7, 1980.0], [63.8, 1981.0], [63.9, 1981.0], [64.0, 1981.0], [64.1, 1981.0], [64.2, 1981.0], [64.3, 1981.0], [64.4, 1982.0], [64.5, 1982.0], [64.6, 1982.0], [64.7, 1983.0], [64.8, 1983.0], [64.9, 1983.0], [65.0, 1984.0], [65.1, 1984.0], [65.2, 1985.0], [65.3, 1985.0], [65.4, 1985.0], [65.5, 1985.0], [65.6, 1986.0], [65.7, 1986.0], [65.8, 1986.0], [65.9, 1987.0], [66.0, 1987.0], [66.1, 1987.0], [66.2, 1988.0], [66.3, 1988.0], [66.4, 1988.0], [66.5, 1989.0], [66.6, 1989.0], [66.7, 1990.0], [66.8, 1990.0], [66.9, 1990.0], [67.0, 1990.0], [67.1, 1991.0], [67.2, 1991.0], [67.3, 1992.0], [67.4, 1992.0], [67.5, 1992.0], [67.6, 1993.0], [67.7, 1993.0], [67.8, 1993.0], [67.9, 1993.0], [68.0, 1994.0], [68.1, 1994.0], [68.2, 1995.0], [68.3, 1996.0], [68.4, 1996.0], [68.5, 1996.0], [68.6, 1996.0], [68.7, 1997.0], [68.8, 1997.0], [68.9, 1997.0], [69.0, 1997.0], [69.1, 1997.0], [69.2, 1997.0], [69.3, 1998.0], [69.4, 1998.0], [69.5, 1998.0], [69.6, 1999.0], [69.7, 2000.0], [69.8, 2000.0], [69.9, 2000.0], [70.0, 2001.0], [70.1, 2001.0], [70.2, 2001.0], [70.3, 2001.0], [70.4, 2002.0], [70.5, 2003.0], [70.6, 2003.0], [70.7, 2004.0], [70.8, 2004.0], [70.9, 2004.0], [71.0, 2004.0], [71.1, 2004.0], [71.2, 2005.0], [71.3, 2005.0], [71.4, 2006.0], [71.5, 2006.0], [71.6, 2006.0], [71.7, 2007.0], [71.8, 2008.0], [71.9, 2008.0], [72.0, 2008.0], [72.1, 2009.0], [72.2, 2009.0], [72.3, 2010.0], [72.4, 2011.0], [72.5, 2011.0], [72.6, 2011.0], [72.7, 2011.0], [72.8, 2012.0], [72.9, 2013.0], [73.0, 2013.0], [73.1, 2013.0], [73.2, 2014.0], [73.3, 2015.0], [73.4, 2016.0], [73.5, 2016.0], [73.6, 2016.0], [73.7, 2016.0], [73.8, 2017.0], [73.9, 2018.0], [74.0, 2018.0], [74.1, 2019.0], [74.2, 2020.0], [74.3, 2020.0], [74.4, 2021.0], [74.5, 2021.0], [74.6, 2021.0], [74.7, 2021.0], [74.8, 2022.0], [74.9, 2022.0], [75.0, 2022.0], [75.1, 2023.0], [75.2, 2024.0], [75.3, 2025.0], [75.4, 2026.0], [75.5, 2026.0], [75.6, 2026.0], [75.7, 2026.0], [75.8, 2027.0], [75.9, 2027.0], [76.0, 2027.0], [76.1, 2027.0], [76.2, 2028.0], [76.3, 2029.0], [76.4, 2030.0], [76.5, 2030.0], [76.6, 2032.0], [76.7, 2033.0], [76.8, 2033.0], [76.9, 2034.0], [77.0, 2034.0], [77.1, 2034.0], [77.2, 2034.0], [77.3, 2035.0], [77.4, 2035.0], [77.5, 2036.0], [77.6, 2036.0], [77.7, 2037.0], [77.8, 2038.0], [77.9, 2039.0], [78.0, 2039.0], [78.1, 2039.0], [78.2, 2040.0], [78.3, 2041.0], [78.4, 2042.0], [78.5, 2043.0], [78.6, 2044.0], [78.7, 2044.0], [78.8, 2046.0], [78.9, 2046.0], [79.0, 2047.0], [79.1, 2047.0], [79.2, 2048.0], [79.3, 2048.0], [79.4, 2049.0], [79.5, 2049.0], [79.6, 2050.0], [79.7, 2051.0], [79.8, 2052.0], [79.9, 2052.0], [80.0, 2052.0], [80.1, 2053.0], [80.2, 2054.0], [80.3, 2055.0], [80.4, 2055.0], [80.5, 2055.0], [80.6, 2056.0], [80.7, 2056.0], [80.8, 2057.0], [80.9, 2058.0], [81.0, 2058.0], [81.1, 2058.0], [81.2, 2059.0], [81.3, 2060.0], [81.4, 2062.0], [81.5, 2063.0], [81.6, 2063.0], [81.7, 2065.0], [81.8, 2067.0], [81.9, 2069.0], [82.0, 2069.0], [82.1, 2071.0], [82.2, 2071.0], [82.3, 2072.0], [82.4, 2073.0], [82.5, 2073.0], [82.6, 2074.0], [82.7, 2075.0], [82.8, 2076.0], [82.9, 2077.0], [83.0, 2077.0], [83.1, 2078.0], [83.2, 2080.0], [83.3, 2081.0], [83.4, 2084.0], [83.5, 2084.0], [83.6, 2086.0], [83.7, 2086.0], [83.8, 2087.0], [83.9, 2087.0], [84.0, 2088.0], [84.1, 2088.0], [84.2, 2088.0], [84.3, 2091.0], [84.4, 2092.0], [84.5, 2092.0], [84.6, 2093.0], [84.7, 2093.0], [84.8, 2094.0], [84.9, 2095.0], [85.0, 2095.0], [85.1, 2096.0], [85.2, 2096.0], [85.3, 2097.0], [85.4, 2098.0], [85.5, 2098.0], [85.6, 2100.0], [85.7, 2101.0], [85.8, 2102.0], [85.9, 2103.0], [86.0, 2105.0], [86.1, 2105.0], [86.2, 2108.0], [86.3, 2110.0], [86.4, 2111.0], [86.5, 2111.0], [86.6, 2112.0], [86.7, 2115.0], [86.8, 2118.0], [86.9, 2118.0], [87.0, 2119.0], [87.1, 2123.0], [87.2, 2124.0], [87.3, 2126.0], [87.4, 2128.0], [87.5, 2130.0], [87.6, 2132.0], [87.7, 2133.0], [87.8, 2138.0], [87.9, 2139.0], [88.0, 2140.0], [88.1, 2141.0], [88.2, 2142.0], [88.3, 2150.0], [88.4, 2152.0], [88.5, 2153.0], [88.6, 2155.0], [88.7, 2162.0], [88.8, 2163.0], [88.9, 2167.0], [89.0, 2168.0], [89.1, 2171.0], [89.2, 2183.0], [89.3, 2185.0], [89.4, 2187.0], [89.5, 2188.0], [89.6, 2190.0], [89.7, 2193.0], [89.8, 2200.0], [89.9, 2201.0], [90.0, 2206.0], [90.1, 2213.0], [90.2, 2214.0], [90.3, 2221.0], [90.4, 2234.0], [90.5, 2238.0], [90.6, 2249.0], [90.7, 2252.0], [90.8, 2274.0], [90.9, 2281.0], [91.0, 2287.0], [91.1, 2294.0], [91.2, 2325.0], [91.3, 2335.0], [91.4, 2342.0], [91.5, 2344.0], [91.6, 2373.0], [91.7, 2380.0], [91.8, 2384.0], [91.9, 2400.0], [92.0, 2407.0], [92.1, 2418.0], [92.2, 2474.0], [92.3, 2513.0], [92.4, 2550.0], [92.5, 2552.0], [92.6, 2745.0], [92.7, 2847.0], [92.8, 2891.0], [92.9, 2939.0], [93.0, 2956.0], [93.1, 3044.0], [93.2, 3100.0], [93.3, 3126.0], [93.4, 3179.0], [93.5, 3186.0], [93.6, 3232.0], [93.7, 3314.0], [93.8, 3751.0], [93.9, 5923.0], [94.0, 5944.0], [94.1, 6059.0], [94.2, 6106.0], [94.3, 6111.0], [94.4, 6122.0], [94.5, 6137.0], [94.6, 6164.0], [94.7, 6247.0], [94.8, 6250.0], [94.9, 6300.0], [95.0, 6326.0], [95.1, 6384.0], [95.2, 6419.0], [95.3, 6673.0], [95.4, 6709.0], [95.5, 6729.0], [95.6, 6747.0], [95.7, 6765.0], [95.8, 6798.0], [95.9, 6900.0], [96.0, 6955.0], [96.1, 7013.0], [96.2, 7219.0], [96.3, 7269.0], [96.4, 7355.0], [96.5, 7407.0], [96.6, 7489.0], [96.7, 7656.0], [96.8, 7758.0], [96.9, 7795.0], [97.0, 7923.0], [97.1, 8014.0], [97.2, 8763.0], [97.3, 9642.0], [97.4, 11409.0], [97.5, 11436.0], [97.6, 12273.0], [97.7, 16743.0], [97.8, 16863.0], [97.9, 18338.0], [98.0, 18367.0], [98.1, 18920.0], [98.2, 19361.0], [98.3, 19842.0], [98.4, 19898.0], [98.5, 19939.0], [98.6, 20013.0], [98.7, 20494.0], [98.8, 21065.0], [98.9, 21582.0], [99.0, 21652.0], [99.1, 22304.0], [99.2, 22383.0], [99.3, 22628.0], [99.4, 22785.0], [99.5, 22843.0], [99.6, 22904.0], [99.7, 23000.0], [99.8, 23560.0], [99.9, 23794.0], [100.0, 25845.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 1700.0, "maxY": 723.0, "series": [{"data": [[1700.0, 2.0], [1800.0, 529.0], [1900.0, 723.0], [2000.0, 285.0], [2100.0, 77.0], [2300.0, 14.0], [2200.0, 24.0], [2400.0, 7.0], [2500.0, 5.0], [2800.0, 3.0], [2700.0, 2.0], [2900.0, 4.0], [3000.0, 2.0], [3100.0, 7.0], [3300.0, 2.0], [3200.0, 1.0], [3400.0, 1.0], [3700.0, 1.0], [5500.0, 1.0], [6100.0, 8.0], [6000.0, 2.0], [5900.0, 3.0], [6300.0, 4.0], [6200.0, 5.0], [6400.0, 2.0], [6600.0, 3.0], [6900.0, 3.0], [6700.0, 8.0], [6800.0, 1.0], [7000.0, 1.0], [7100.0, 1.0], [7200.0, 4.0], [7400.0, 3.0], [7300.0, 1.0], [7600.0, 2.0], [7500.0, 1.0], [7900.0, 2.0], [7700.0, 3.0], [8000.0, 1.0], [8400.0, 1.0], [8700.0, 1.0], [9500.0, 1.0], [9600.0, 1.0], [11200.0, 1.0], [11400.0, 2.0], [11800.0, 1.0], [12200.0, 1.0], [12400.0, 1.0], [16800.0, 2.0], [16700.0, 1.0], [17600.0, 1.0], [18300.0, 2.0], [19200.0, 1.0], [18500.0, 1.0], [18900.0, 1.0], [19300.0, 1.0], [19800.0, 3.0], [19900.0, 2.0], [20000.0, 1.0], [19700.0, 1.0], [20400.0, 1.0], [20200.0, 1.0], [21000.0, 1.0], [21500.0, 2.0], [20600.0, 1.0], [22300.0, 3.0], [22200.0, 1.0], [21600.0, 1.0], [22500.0, 1.0], [22900.0, 2.0], [23000.0, 2.0], [22700.0, 2.0], [23500.0, 2.0], [22600.0, 1.0], [22800.0, 2.0], [23700.0, 1.0], [25800.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 25800.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 1800.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 1800.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 1800.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 32.0, "minX": 1.68423342E12, "maxY": 840.0165289256198, "series": [{"data": [[1.68423354E12, 521.0158730158731], [1.6842429E12, 549.5185185185186], [1.68423342E12, 831.5072463768115], [1.68424278E12, 840.0165289256198], [1.68423372E12, 35.0], [1.68424308E12, 32.0], [1.6842336E12, 354.5069444444444], [1.68424296E12, 363.00473933649295], [1.68423366E12, 176.01408450704224], [1.68424302E12, 160.51030927835052], [1.68423348E12, 692.0], [1.68424284E12, 705.006711409396]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68424308E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 1826.0, "minX": 1.0, "maxY": 15413.5, "series": [{"data": [[2.0, 1943.5], [3.0, 1910.5], [4.0, 1900.0], [5.0, 1944.0], [6.0, 1887.0], [7.0, 1980.0], [8.0, 2019.0], [9.0, 1926.5], [10.0, 2514.0], [11.0, 1882.5], [12.0, 1890.5], [13.0, 2070.5], [14.0, 2068.5], [15.0, 2004.5], [16.0, 1888.0], [17.0, 2211.0], [18.0, 1878.5], [19.0, 2012.5], [20.0, 1858.0], [21.0, 1888.5], [22.0, 2080.0], [23.0, 1956.5], [24.0, 2004.0], [25.0, 2220.0], [26.0, 2209.5], [27.0, 1928.5], [28.0, 1896.0], [29.0, 2059.5], [30.0, 1903.0], [31.0, 1966.0], [33.0, 1899.5], [32.0, 1929.0], [35.0, 1970.5], [34.0, 2023.5], [37.0, 1983.0], [36.0, 1884.0], [39.0, 2047.0], [38.0, 1929.0], [41.0, 1934.0], [40.0, 1930.5], [43.0, 1963.5], [42.0, 1846.5], [45.0, 1880.5], [44.0, 1922.5], [47.0, 1949.0], [46.0, 1998.5], [49.0, 1972.0], [48.0, 1848.0], [51.0, 1918.0], [50.0, 1978.0], [53.0, 1901.0], [52.0, 1885.5], [55.0, 2075.5], [54.0, 1874.5], [57.0, 1881.0], [56.0, 1950.0], [59.0, 1894.5], [58.0, 1948.0], [61.0, 2000.0], [60.0, 1866.0], [63.0, 1868.0], [62.0, 1976.5], [67.0, 1963.0], [66.0, 1861.0], [65.0, 1882.0], [64.0, 2043.0], [71.0, 1910.5], [70.0, 1972.0], [69.0, 1883.3333333333333], [68.0, 1958.0], [75.0, 1883.0], [74.0, 1927.5], [73.0, 1940.0], [72.0, 1882.0], [79.0, 2128.5], [78.0, 1881.5], [77.0, 1949.5], [76.0, 2025.0], [83.0, 1918.0], [82.0, 1843.5], [81.0, 1855.0], [80.0, 2009.0], [87.0, 1871.0], [86.0, 1882.5], [85.0, 1919.5], [84.0, 1875.5], [91.0, 1916.0], [90.0, 1891.0], [89.0, 1902.0], [88.0, 1974.0], [95.0, 1977.0], [94.0, 2047.5], [93.0, 1870.5], [92.0, 1911.0], [99.0, 1875.0], [98.0, 1912.0], [97.0, 1925.0], [96.0, 1931.0], [103.0, 2067.5], [102.0, 1865.5], [101.0, 1887.5], [100.0, 1962.0], [107.0, 1936.0], [106.0, 1920.5], [105.0, 1996.0], [104.0, 1982.5], [111.0, 1880.5], [110.0, 1951.5], [109.0, 1985.0], [108.0, 1875.0], [115.0, 2012.0], [114.0, 1869.5], [113.0, 1909.5], [112.0, 1897.5], [119.0, 1924.0], [118.0, 4341.5], [117.0, 1907.0], [116.0, 1955.5], [123.0, 1849.0], [122.0, 1903.5], [121.0, 1871.5], [120.0, 1897.5], [127.0, 1883.0], [126.0, 4022.0], [125.0, 1977.5], [124.0, 1951.5], [135.0, 1906.5], [134.0, 2028.0], [132.0, 1922.0], [131.0, 1951.5], [130.0, 1900.5], [129.0, 1913.0], [128.0, 1927.5], [133.0, 1912.0], [143.0, 2054.0], [142.0, 1895.0], [141.0, 1896.5], [140.0, 1987.0], [139.0, 1939.0], [138.0, 1913.0], [137.0, 1927.0], [136.0, 1949.5], [151.0, 2056.5], [150.0, 1884.5], [149.0, 1908.5], [148.0, 2047.5], [147.0, 1903.5], [146.0, 1912.5], [145.0, 2029.5], [144.0, 1863.6666666666667], [159.0, 1939.5], [158.0, 1980.0], [157.0, 2034.5], [156.0, 1888.0], [155.0, 1950.5], [154.0, 2059.0], [153.0, 1908.0], [152.0, 1925.5], [167.0, 2012.0], [166.0, 2199.5], [165.0, 1909.5], [164.0, 1935.0], [163.0, 1956.5], [162.0, 1884.5], [161.0, 1893.5], [160.0, 1930.5], [175.0, 1924.5], [174.0, 1956.5], [173.0, 1943.0], [172.0, 2022.5], [171.0, 1857.0], [170.0, 1907.5], [169.0, 1941.0], [168.0, 1919.5], [183.0, 1882.0], [182.0, 1987.5], [181.0, 2222.0], [180.0, 1897.5], [179.0, 1941.5], [178.0, 1938.0], [177.0, 1879.5], [176.0, 1996.5], [191.0, 2006.5], [190.0, 2020.0], [189.0, 1908.5], [188.0, 1922.5], [187.0, 1986.0], [186.0, 1868.0], [185.0, 1934.5], [184.0, 1963.5], [199.0, 2090.0], [198.0, 1881.0], [197.0, 1886.5], [196.0, 1931.0], [195.0, 1894.5], [194.0, 1912.5], [193.0, 1953.5], [192.0, 1934.5], [207.0, 1913.5], [206.0, 1955.0], [205.0, 2083.5], [204.0, 1883.0], [203.0, 1891.0], [202.0, 1965.5], [201.0, 1855.5], [200.0, 1922.5], [214.0, 1946.5], [213.0, 1868.0], [212.0, 1909.5], [211.0, 1966.5], [210.0, 1879.0], [209.0, 1956.5], [208.0, 2041.0], [215.0, 1895.0], [223.0, 1933.5], [222.0, 1890.5], [221.0, 1928.5], [220.0, 1992.0], [219.0, 1946.0], [217.0, 2152.5], [216.0, 1891.3333333333333], [218.0, 6747.0], [231.0, 1960.5], [230.0, 1885.5], [229.0, 1902.5], [228.0, 2112.5], [227.0, 2049.5], [226.0, 1908.0], [225.0, 1940.5], [224.0, 1992.0], [239.0, 1875.0], [238.0, 1971.5], [237.0, 1898.5], [236.0, 1939.5], [235.0, 2516.5], [234.0, 1872.5], [233.0, 1948.0], [232.0, 1982.5], [247.0, 1951.5], [246.0, 1912.0], [245.0, 1963.0], [244.0, 2022.5], [243.0, 1863.5], [242.0, 1943.5], [241.0, 2088.0], [240.0, 1865.0], [255.0, 1908.5], [254.0, 1939.5], [253.0, 1963.5], [252.0, 1898.0], [251.0, 1990.0], [250.0, 2032.5], [249.0, 1891.5], [248.0, 1904.5], [270.0, 1900.0], [271.0, 2043.0], [269.0, 1931.0], [268.0, 2187.0], [267.0, 1944.0], [266.0, 1966.5], [265.0, 1975.0], [264.0, 1967.5], [263.0, 1938.5], [257.0, 2017.0], [256.0, 2380.0], [259.0, 1942.0], [258.0, 1911.0], [262.0, 1996.5], [261.0, 2023.0], [260.0, 2011.5], [286.0, 1918.0], [287.0, 1891.0], [285.0, 2579.0], [284.0, 2078.0], [283.0, 1954.5], [282.0, 1923.5], [281.0, 1930.0], [280.0, 1926.5], [279.0, 1911.0], [273.0, 1897.0], [272.0, 1929.0], [275.0, 1924.5], [274.0, 2048.0], [278.0, 1952.0], [277.0, 4257.0], [276.0, 1913.0], [302.0, 1915.5], [303.0, 1901.5], [301.0, 2026.5], [300.0, 1865.0], [299.0, 1927.5], [298.0, 1964.0], [297.0, 1883.5], [296.0, 1969.5], [295.0, 1915.5], [289.0, 1934.0], [288.0, 1902.5], [291.0, 1924.0], [290.0, 2048.5], [294.0, 1883.0], [293.0, 1910.0], [292.0, 1910.0], [318.0, 1873.5], [319.0, 1924.0], [317.0, 1951.0], [316.0, 1958.0], [315.0, 1910.0], [314.0, 1936.5], [313.0, 1965.5], [312.0, 1858.5], [311.0, 1915.5], [305.0, 1896.0], [304.0, 1961.0], [307.0, 1958.0], [306.0, 1866.0], [310.0, 1905.0], [309.0, 1933.5], [308.0, 1935.5], [333.0, 1901.5], [335.0, 1958.3333333333333], [334.0, 2373.0], [332.0, 1958.5], [323.0, 1980.0], [322.0, 1935.5], [321.0, 1881.0], [320.0, 1911.0], [331.0, 2036.5], [330.0, 1865.5], [329.0, 1907.0], [328.0, 1925.0], [327.0, 1894.5], [326.0, 1945.5], [325.0, 1932.0], [324.0, 1892.0], [350.0, 1900.5], [351.0, 1888.0], [349.0, 1941.5], [348.0, 1925.5], [347.0, 1955.0], [346.0, 1993.5], [345.0, 1853.0], [344.0, 1894.0], [343.0, 1994.5], [337.0, 2048.0], [336.0, 1915.0], [339.0, 1878.5], [338.0, 1921.5], [342.0, 1878.5], [341.0, 1918.5], [340.0, 1989.0], [366.0, 2012.0], [367.0, 1957.0], [365.0, 1936.5], [364.0, 2010.6666666666667], [363.0, 1826.0], [362.0, 2396.0], [361.0, 2574.5], [360.0, 1857.0], [359.0, 1945.0], [353.0, 1941.5], [352.0, 1988.5], [355.0, 1919.0], [354.0, 1891.5], [358.0, 1974.0], [357.0, 1843.0], [356.0, 1869.5], [382.0, 2031.0], [383.0, 2002.5], [381.0, 1891.5], [380.0, 1907.5], [379.0, 2010.0], [378.0, 1866.0], [377.0, 1901.5], [376.0, 2007.0], [375.0, 1952.5], [369.0, 1874.0], [368.0, 1940.0], [371.0, 1942.0], [370.0, 2060.5], [374.0, 1960.5], [373.0, 1908.0], [372.0, 2032.0], [398.0, 2128.5], [399.0, 1898.0], [397.0, 1898.5], [396.0, 1917.5], [395.0, 1986.5], [394.0, 1993.0], [393.0, 1888.0], [392.0, 1964.0], [391.0, 4404.0], [385.0, 1949.0], [384.0, 1965.0], [387.0, 1884.5], [386.0, 1946.5], [390.0, 1926.5], [389.0, 1952.0], [388.0, 1962.0], [414.0, 1894.5], [415.0, 2055.0], [413.0, 1910.0], [412.0, 1957.0], [411.0, 1854.0], [410.0, 1872.5], [409.0, 1907.5], [408.0, 1887.0], [407.0, 1894.5], [401.0, 2005.5], [400.0, 1963.0], [403.0, 1952.0], [402.0, 1937.0], [406.0, 1960.0], [405.0, 1882.0], [404.0, 1955.5], [430.0, 1936.0], [431.0, 1910.0], [429.0, 1898.5], [428.0, 1953.5], [427.0, 2001.5], [426.0, 1857.0], [425.0, 1909.5], [424.0, 1899.5], [423.0, 1886.5], [417.0, 1859.0], [416.0, 1900.5], [419.0, 1918.5], [418.0, 2031.5], [422.0, 1956.5], [421.0, 2048.0], [420.0, 1914.0], [446.0, 1913.5], [447.0, 1899.5], [445.0, 1994.0], [444.0, 1899.5], [443.0, 1956.5], [442.0, 1925.0], [441.0, 1878.5], [440.0, 1917.0], [439.0, 4460.5], [433.0, 2123.0], [432.0, 1887.0], [435.0, 1934.0], [434.0, 1998.0], [438.0, 1902.0], [437.0, 1932.5], [436.0, 1937.5], [462.0, 1912.0], [463.0, 1867.5], [461.0, 2032.0], [460.0, 2092.5], [459.0, 1850.5], [458.0, 1940.5], [457.0, 2027.5], [456.0, 1899.0], [455.0, 1912.0], [449.0, 1926.0], [448.0, 1919.0], [451.0, 1979.5], [450.0, 1900.5], [454.0, 2016.5], [453.0, 1844.5], [452.0, 1929.5], [478.0, 1929.5], [479.0, 1909.5], [477.0, 1902.0], [476.0, 1935.5], [475.0, 1929.0], [474.0, 1836.5], [473.0, 2000.5], [472.0, 2540.0], [471.0, 1887.5], [465.0, 1888.5], [464.0, 1969.0], [467.0, 1897.5], [466.0, 1914.5], [470.0, 1897.0], [469.0, 1962.0], [468.0, 1867.5], [494.0, 1935.0], [495.0, 1882.0], [493.0, 1951.0], [492.0, 1899.0], [491.0, 1984.5], [490.0, 2045.5], [489.0, 1875.5], [488.0, 1936.0], [487.0, 1983.5], [481.0, 1941.0], [480.0, 1893.0], [483.0, 1861.0], [482.0, 1899.0], [486.0, 1853.0], [485.0, 1884.5], [484.0, 2071.5], [510.0, 1879.0], [511.0, 4302.0], [509.0, 1918.3333333333333], [508.0, 1900.0], [507.0, 1864.5], [506.0, 1875.0], [505.0, 1961.5], [504.0, 1910.0], [503.0, 1929.5], [496.0, 1986.5], [497.0, 1962.0], [499.0, 2054.0], [498.0, 1858.6666666666667], [502.0, 2017.5], [501.0, 1901.0], [500.0, 1927.0], [540.0, 1922.5], [543.0, 1881.0], [529.0, 1946.0], [528.0, 1934.0], [531.0, 1881.0], [530.0, 1908.0], [533.0, 1937.5], [532.0, 1966.0], [542.0, 1921.5], [541.0, 1903.5], [539.0, 1992.0], [538.0, 1974.0], [537.0, 1887.0], [536.0, 1915.5], [527.0, 1938.5], [513.0, 1900.5], [512.0, 1946.0], [515.0, 1934.5], [514.0, 1985.5], [517.0, 1907.5], [516.0, 1900.0], [519.0, 1936.5], [518.0, 1967.0], [526.0, 1965.5], [525.0, 1897.5], [524.0, 1941.5], [523.0, 1994.5], [522.0, 1886.0], [521.0, 1916.0], [520.0, 1923.5], [535.0, 2028.5], [534.0, 1882.5], [572.0, 2072.5], [575.0, 1986.5], [561.0, 1882.0], [560.0, 1934.0], [563.0, 1934.0], [562.0, 1952.0], [565.0, 2172.5], [564.0, 1870.0], [574.0, 2053.0], [573.0, 1896.0], [571.0, 1929.5], [570.0, 1865.0], [569.0, 1960.0], [568.0, 2733.5], [559.0, 1920.0], [545.0, 1933.3333333333333], [544.0, 1996.0], [547.0, 4085.0], [546.0, 1902.0], [549.0, 1889.0], [548.0, 1944.0], [551.0, 1969.5], [550.0, 1952.5], [558.0, 1916.0], [557.0, 1934.0], [556.0, 1909.5], [555.0, 1879.5], [554.0, 1942.0], [553.0, 1958.5], [552.0, 1943.5], [567.0, 1946.5], [566.0, 1972.0], [604.0, 2048.5], [607.0, 2034.5], [593.0, 1973.5], [592.0, 1997.5], [595.0, 1974.0], [594.0, 1904.0], [597.0, 1935.5], [596.0, 1969.5], [606.0, 1858.5], [605.0, 1922.5], [603.0, 1882.5], [602.0, 1896.5], [601.0, 1972.0], [600.0, 1906.0], [591.0, 1844.0], [577.0, 1979.5], [576.0, 1930.0], [579.0, 1902.0], [578.0, 1923.0], [581.0, 1901.0], [580.0, 1989.0], [583.0, 2019.0], [582.0, 1853.5], [590.0, 1882.0], [589.0, 1905.5], [588.0, 1896.5], [587.0, 1980.3333333333333], [586.0, 2004.0], [585.0, 1914.0], [584.0, 1984.5], [599.0, 1958.5], [598.0, 1976.5], [636.0, 1972.0], [639.0, 1870.5], [625.0, 1978.3333333333333], [624.0, 1834.0], [627.0, 1866.0], [626.0, 1910.0], [629.0, 1953.5], [628.0, 2030.5], [638.0, 1937.5], [637.0, 2005.0], [635.0, 1993.5], [634.0, 2463.5], [633.0, 1900.0], [632.0, 1939.0], [623.0, 1923.5], [609.0, 1961.0], [608.0, 2012.0], [611.0, 1962.6666666666667], [610.0, 1901.0], [613.0, 1955.5], [612.0, 1878.5], [615.0, 1862.0], [614.0, 1917.5], [622.0, 1984.5], [621.0, 1924.5], [620.0, 1947.0], [619.0, 2016.0], [618.0, 1972.5], [617.0, 2166.0], [616.0, 2399.5], [631.0, 2205.5], [630.0, 1933.0], [668.0, 1919.5], [671.0, 1902.5], [657.0, 1863.5], [656.0, 1944.5], [659.0, 1931.5], [658.0, 1970.5], [661.0, 1978.5], [660.0, 1859.0], [670.0, 1961.5], [669.0, 1906.0], [667.0, 1994.0], [666.0, 1857.5], [665.0, 1940.0], [664.0, 1958.5], [655.0, 1980.5], [641.0, 1948.5], [640.0, 1980.0], [643.0, 2030.5], [642.0, 1928.5], [645.0, 1855.5], [644.0, 1953.5], [647.0, 1963.5], [646.0, 2010.5], [654.0, 1916.5], [653.0, 1931.5], [652.0, 2042.5], [651.0, 1906.5], [650.0, 1941.0], [649.0, 1993.0], [648.0, 1892.0], [663.0, 1864.0], [662.0, 1883.0], [700.0, 2128.0], [675.0, 1876.0], [683.0, 1959.5], [684.0, 1880.5], [686.0, 6793.0], [685.0, 1921.0], [672.0, 1862.0], [687.0, 1984.0], [674.0, 1888.0], [673.0, 1958.0], [682.0, 1900.5], [681.0, 1855.3333333333333], [680.0, 1924.0], [679.0, 6660.5], [678.0, 1885.0], [696.0, 2400.0], [699.0, 1966.0], [698.0, 2096.0], [701.0, 1913.0], [703.0, 1908.0], [689.0, 1904.0], [688.0, 1956.0], [691.0, 1993.0], [690.0, 2001.0], [693.0, 1915.0], [692.0, 1888.0], [695.0, 3044.0], [694.0, 1897.0], [702.0, 1978.0], [677.0, 1971.0], [676.0, 2068.5], [732.0, 2066.5], [735.0, 1948.0], [721.0, 5036.0], [720.0, 4817.333333333333], [723.0, 1914.5], [722.0, 1944.0], [725.0, 2004.5], [724.0, 4338.5], [734.0, 2054.5], [733.0, 1962.5], [731.0, 2257.5], [730.0, 4728.5], [729.0, 1917.0], [728.0, 2037.5], [719.0, 4104.5], [711.0, 1880.0], [710.0, 2052.0], [709.0, 2193.0], [708.0, 1923.0], [707.0, 1982.0], [706.0, 2042.0], [705.0, 1952.0], [704.0, 1977.0], [718.0, 2100.0], [717.0, 4068.5], [716.0, 4775.666666666667], [714.0, 1958.1290322580649], [713.0, 2005.0], [712.0, 2082.0], [715.0, 2124.0], [727.0, 1877.5], [726.0, 2101.0], [764.0, 1915.5], [767.0, 3928.0], [753.0, 1870.0], [752.0, 1927.0], [755.0, 1995.5], [754.0, 2106.0], [757.0, 2136.5], [756.0, 1894.5], [766.0, 2025.0], [765.0, 1868.0], [763.0, 2010.5], [762.0, 1962.0], [761.0, 1964.5], [760.0, 1987.5], [751.0, 2033.0], [737.0, 1994.5], [736.0, 1907.5], [739.0, 1998.5], [738.0, 2450.0], [741.0, 2108.0], [740.0, 2230.5], [743.0, 2028.5], [742.0, 2004.5], [750.0, 2004.0], [749.0, 2032.0], [748.0, 2612.0], [747.0, 1897.5], [746.0, 1973.5], [745.0, 2120.5], [744.0, 1942.0], [759.0, 1986.0], [758.0, 2074.0], [796.0, 2327.5], [799.0, 3996.0], [785.0, 4140.0], [784.0, 2217.0], [787.0, 1980.5], [786.0, 2143.5], [789.0, 2072.0], [788.0, 2125.0], [798.0, 2057.0], [797.0, 2105.0], [795.0, 2041.5], [794.0, 2069.0], [793.0, 3922.0], [792.0, 1953.5], [783.0, 2216.5], [769.0, 4575.5], [768.0, 1924.0], [771.0, 2214.0], [770.0, 2358.5], [773.0, 2111.0], [772.0, 1915.0], [775.0, 1954.0], [774.0, 2041.0], [782.0, 2465.0], [781.0, 1957.5], [780.0, 1993.0], [779.0, 6224.5], [778.0, 1983.5], [777.0, 2038.0], [776.0, 2129.0], [791.0, 4166.0], [790.0, 2026.5], [828.0, 4313.5], [831.0, 10402.0], [817.0, 11257.0], [816.0, 4272.5], [819.0, 10667.5], [818.0, 10955.5], [821.0, 2147.5], [820.0, 2156.5], [830.0, 4422.0], [829.0, 2730.5], [827.0, 10145.0], [826.0, 12754.5], [825.0, 10935.5], [824.0, 4056.0], [815.0, 10921.0], [801.0, 2069.0], [800.0, 12337.5], [803.0, 2031.0], [802.0, 2035.0], [805.0, 4114.0], [804.0, 4728.5], [807.0, 4602.0], [806.0, 4058.5], [814.0, 3967.0], [813.0, 11048.0], [812.0, 4797.5], [811.0, 12429.5], [810.0, 2788.5], [809.0, 4414.0], [808.0, 4789.0], [823.0, 2035.5], [822.0, 2108.0], [860.0, 10037.666666666668], [863.0, 11298.0], [848.0, 2604.5], [851.0, 3718.333333333333], [850.0, 6765.0], [849.0, 4610.5], [853.0, 4606.5], [852.0, 12087.0], [862.0, 12223.5], [861.0, 10916.5], [859.0, 2100.0], [858.0, 10918.5], [857.0, 5819.5], [856.0, 12299.0], [847.0, 2093.0], [833.0, 2455.0], [832.0, 4198.0], [835.0, 2186.0], [834.0, 10906.5], [837.0, 10192.5], [836.0, 2139.5], [839.0, 4852.5], [838.0, 9363.0], [846.0, 11718.5], [845.0, 7592.666666666667], [844.0, 3179.0], [843.0, 4876.0], [842.0, 4895.0], [841.0, 2795.5], [840.0, 9382.0], [855.0, 10935.5], [854.0, 4903.0], [892.0, 6753.5], [895.0, 12788.5], [881.0, 4697.0], [880.0, 7145.0], [883.0, 12882.5], [882.0, 4504.0], [885.0, 9863.0], [884.0, 4480.0], [894.0, 12531.0], [893.0, 5258.0], [891.0, 5393.5], [890.0, 4675.0], [889.0, 4157.5], [888.0, 6912.5], [879.0, 4717.5], [865.0, 12108.0], [864.0, 11744.0], [867.0, 4713.0], [866.0, 5775.0], [869.0, 2346.0], [868.0, 7208.5], [871.0, 2516.0], [870.0, 3704.5], [878.0, 2104.0], [877.0, 4457.0], [876.0, 12335.5], [875.0, 13971.5], [874.0, 15413.5], [873.0, 10662.0], [872.0, 12492.5], [887.0, 4397.0], [886.0, 9380.0], [900.0, 11695.0], [899.0, 12624.0], [898.0, 12380.5], [897.0, 12503.0], [896.0, 12403.5], [1.0, 6738.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[450.75444444444565, 2620.7583333333314]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 900.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 572.25, "minX": 1.68423342E12, "maxY": 2372.9333333333334, "series": [{"data": [[1.68423354E12, 2105.1666666666665], [1.6842429E12, 1804.55], [1.68423342E12, 1537.0166666666667], [1.68424278E12, 1348.8166666666666], [1.68423372E12, 768.8], [1.68424308E12, 701.9333333333333], [1.6842336E12, 1603.8333333333333], [1.68424296E12, 2350.0833333333335], [1.68423366E12, 2372.9333333333334], [1.68424302E12, 2161.0333333333333], [1.68423348E12, 1637.3], [1.68424284E12, 1659.7]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.68423354E12, 1716.75], [1.6842429E12, 1471.5], [1.68423342E12, 1253.5], [1.68424278E12, 1099.0833333333333], [1.68423372E12, 626.75], [1.68424308E12, 572.25], [1.6842336E12, 1308.0], [1.68424296E12, 1916.5833333333333], [1.68423366E12, 1934.75], [1.68424302E12, 1762.1666666666667], [1.68423348E12, 1335.25], [1.68424284E12, 1353.4166666666667]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68424308E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 1901.1874999999993, "minX": 1.68423342E12, "maxY": 10721.157024793392, "series": [{"data": [[1.68423354E12, 1948.6984126984144], [1.6842429E12, 2035.2407407407406], [1.68423342E12, 2120.6159420289837], [1.68424278E12, 10721.157024793392], [1.68423372E12, 2094.0579710144925], [1.68424308E12, 1974.4285714285713], [1.6842336E12, 1901.1874999999993], [1.68424296E12, 2033.5592417061607], [1.68423366E12, 1941.0375586854454], [1.68424302E12, 2019.6030927835047], [1.68423348E12, 2184.095238095239], [1.68424284E12, 2224.2281879194634]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68424308E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 1901.0555555555552, "minX": 1.68423342E12, "maxY": 10719.809917355371, "series": [{"data": [[1.68423354E12, 1948.5608465608466], [1.6842429E12, 2035.0740740740737], [1.68423342E12, 2120.2608695652175], [1.68424278E12, 10719.809917355371], [1.68423372E12, 2093.710144927536], [1.68424308E12, 1974.2380952380952], [1.6842336E12, 1901.0555555555552], [1.68424296E12, 2033.4502369668248], [1.68423366E12, 1940.8873239436612], [1.68424302E12, 2019.4845360824752], [1.68423348E12, 2183.945578231293], [1.68424284E12, 2224.060402684562]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68424308E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 54.555555555555564, "minX": 1.68423342E12, "maxY": 70.78985507246378, "series": [{"data": [[1.68423354E12, 57.26984126984126], [1.6842429E12, 58.06790123456791], [1.68423342E12, 70.78985507246378], [1.68424278E12, 67.60330578512392], [1.68423372E12, 60.826086956521735], [1.68424308E12, 54.555555555555564], [1.6842336E12, 56.625], [1.68424296E12, 58.3222748815166], [1.68423366E12, 58.75586854460093], [1.68424302E12, 58.41237113402063], [1.68423348E12, 65.12925170068027], [1.68424284E12, 58.91946308724832]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68424308E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 1769.0, "minX": 1.68423342E12, "maxY": 25845.0, "series": [{"data": [[1.68423354E12, 6955.0], [1.6842429E12, 6673.0], [1.68423342E12, 7960.0], [1.68424278E12, 25845.0], [1.68423372E12, 11262.0], [1.68424308E12, 2293.0], [1.6842336E12, 2074.0], [1.68424296E12, 6761.0], [1.68423366E12, 6144.0], [1.68424302E12, 6747.0], [1.68423348E12, 8014.0], [1.68424284E12, 11409.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.68423354E12, 1981.0], [1.6842429E12, 2110.7], [1.68423342E12, 2139.1], [1.68424278E12, 22734.399999999998], [1.68423372E12, 2178.0], [1.68424308E12, 2096.4], [1.6842336E12, 1959.5], [1.68424296E12, 2093.6], [1.68423366E12, 2024.2], [1.68424302E12, 2075.0], [1.68423348E12, 2111.8], [1.68424284E12, 2252.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.68423354E12, 6148.599999999995], [1.6842429E12, 4438.390000000016], [1.68423342E12, 7671.009999999989], [1.68424278E12, 25393.780000000002], [1.68423372E12, 11262.0], [1.68424308E12, 2293.0], [1.6842336E12, 2073.55], [1.68424296E12, 6046.399999999986], [1.68423366E12, 2218.0599999999995], [1.68424302E12, 6710.900000000001], [1.68423348E12, 7753.840000000006], [1.68424284E12, 9101.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.68423354E12, 2046.5], [1.6842429E12, 2180.6], [1.68423342E12, 2347.699999999999], [1.68424278E12, 22993.1], [1.68423372E12, 2459.5], [1.68424308E12, 2208.7999999999997], [1.6842336E12, 2042.75], [1.68424296E12, 2206.2], [1.68423366E12, 2083.1], [1.68424302E12, 2233.25], [1.68423348E12, 6111.0], [1.68424284E12, 3000.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.68423354E12, 1799.0], [1.6842429E12, 1855.0], [1.68423342E12, 1826.0], [1.68424278E12, 1948.0], [1.68423372E12, 1825.0], [1.68424308E12, 1842.0], [1.6842336E12, 1801.0], [1.68424296E12, 1851.0], [1.68423366E12, 1812.0], [1.68424302E12, 1855.0], [1.68423348E12, 1769.0], [1.68424284E12, 1878.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.68423354E12, 1885.0], [1.6842429E12, 1980.0], [1.68423342E12, 1993.0], [1.68424278E12, 7269.0], [1.68423372E12, 1908.0], [1.68424308E12, 1954.0], [1.6842336E12, 1890.5], [1.68424296E12, 1958.0], [1.68423366E12, 1905.0], [1.68424302E12, 1939.5], [1.68423348E12, 1907.0], [1.68424284E12, 1997.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68424308E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 1898.0, "minX": 1.0, "maxY": 19842.0, "series": [{"data": [[8.0, 1943.0], [2.0, 1950.0], [9.0, 1948.0], [10.0, 1957.0], [11.0, 1955.0], [3.0, 1918.0], [12.0, 1939.5], [13.0, 1898.0], [14.0, 11003.0], [1.0, 2025.5], [4.0, 1999.0], [17.0, 19842.0], [5.0, 1945.5], [21.0, 2005.0], [6.0, 1930.0], [7.0, 1968.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 21.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 1898.0, "minX": 1.0, "maxY": 19833.0, "series": [{"data": [[8.0, 1942.5], [2.0, 1950.0], [9.0, 1948.0], [10.0, 1957.0], [11.0, 1955.0], [3.0, 1918.0], [12.0, 1939.0], [13.0, 1898.0], [14.0, 11003.0], [1.0, 2025.5], [4.0, 1999.0], [17.0, 19833.0], [5.0, 1945.5], [21.0, 2005.0], [6.0, 1930.0], [7.0, 1968.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 21.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.9, "minX": 1.68423342E12, "maxY": 3.6, "series": [{"data": [[1.68423354E12, 3.1], [1.6842429E12, 2.85], [1.68423342E12, 2.4], [1.68424278E12, 2.15], [1.68423372E12, 1.0], [1.68424308E12, 0.9], [1.6842336E12, 2.45], [1.68424296E12, 3.45], [1.68423366E12, 3.6], [1.68424302E12, 3.3], [1.68423348E12, 2.45], [1.68424284E12, 2.35]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68424308E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 1.05, "minX": 1.68423342E12, "maxY": 3.55, "series": [{"data": [[1.68423354E12, 3.15], [1.6842429E12, 2.7], [1.68423342E12, 2.3], [1.68424278E12, 2.0166666666666666], [1.68423372E12, 1.15], [1.68424308E12, 1.05], [1.6842336E12, 2.4], [1.68424296E12, 3.5166666666666666], [1.68423366E12, 3.55], [1.68424302E12, 3.2333333333333334], [1.68423348E12, 2.45], [1.68424284E12, 2.4833333333333334]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68424308E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 1.05, "minX": 1.68423342E12, "maxY": 3.55, "series": [{"data": [[1.68423354E12, 3.15], [1.6842429E12, 2.7], [1.68423342E12, 2.3], [1.68424278E12, 2.0166666666666666], [1.68423372E12, 1.15], [1.68424308E12, 1.05], [1.6842336E12, 2.4], [1.68424296E12, 3.5166666666666666], [1.68423366E12, 3.55], [1.68424302E12, 3.2333333333333334], [1.68423348E12, 2.45], [1.68424284E12, 2.4833333333333334]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68424308E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 1.05, "minX": 1.68423342E12, "maxY": 3.55, "series": [{"data": [[1.68423354E12, 3.15], [1.6842429E12, 2.7], [1.68423342E12, 2.3], [1.68424278E12, 2.0166666666666666], [1.68423372E12, 1.15], [1.68424308E12, 1.05], [1.6842336E12, 2.4], [1.68424296E12, 3.5166666666666666], [1.68423366E12, 3.55], [1.68424302E12, 3.2333333333333334], [1.68423348E12, 2.45], [1.68424284E12, 2.4833333333333334]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68424308E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

