/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 1796.0, "minX": 0.0, "maxY": 14584.0, "series": [{"data": [[0.0, 1796.0], [0.1, 1797.0], [0.2, 1808.0], [0.3, 1811.0], [0.4, 1812.0], [0.5, 1813.0], [0.6, 1814.0], [0.7, 1820.0], [0.8, 1822.0], [0.9, 1822.0], [1.0, 1822.0], [1.1, 1823.0], [1.2, 1824.0], [1.3, 1825.0], [1.4, 1826.0], [1.5, 1827.0], [1.6, 1827.0], [1.7, 1828.0], [1.8, 1831.0], [1.9, 1831.0], [2.0, 1832.0], [2.1, 1834.0], [2.2, 1835.0], [2.3, 1835.0], [2.4, 1835.0], [2.5, 1836.0], [2.6, 1837.0], [2.7, 1837.0], [2.8, 1838.0], [2.9, 1838.0], [3.0, 1839.0], [3.1, 1839.0], [3.2, 1839.0], [3.3, 1840.0], [3.4, 1840.0], [3.5, 1840.0], [3.6, 1840.0], [3.7, 1841.0], [3.8, 1841.0], [3.9, 1842.0], [4.0, 1843.0], [4.1, 1843.0], [4.2, 1843.0], [4.3, 1844.0], [4.4, 1846.0], [4.5, 1846.0], [4.6, 1846.0], [4.7, 1846.0], [4.8, 1847.0], [4.9, 1847.0], [5.0, 1847.0], [5.1, 1848.0], [5.2, 1849.0], [5.3, 1849.0], [5.4, 1849.0], [5.5, 1849.0], [5.6, 1850.0], [5.7, 1850.0], [5.8, 1851.0], [5.9, 1852.0], [6.0, 1853.0], [6.1, 1853.0], [6.2, 1853.0], [6.3, 1853.0], [6.4, 1853.0], [6.5, 1854.0], [6.6, 1854.0], [6.7, 1854.0], [6.8, 1854.0], [6.9, 1854.0], [7.0, 1855.0], [7.1, 1856.0], [7.2, 1856.0], [7.3, 1857.0], [7.4, 1857.0], [7.5, 1857.0], [7.6, 1857.0], [7.7, 1858.0], [7.8, 1858.0], [7.9, 1858.0], [8.0, 1859.0], [8.1, 1859.0], [8.2, 1859.0], [8.3, 1859.0], [8.4, 1860.0], [8.5, 1860.0], [8.6, 1860.0], [8.7, 1861.0], [8.8, 1862.0], [8.9, 1862.0], [9.0, 1862.0], [9.1, 1863.0], [9.2, 1863.0], [9.3, 1864.0], [9.4, 1864.0], [9.5, 1865.0], [9.6, 1865.0], [9.7, 1867.0], [9.8, 1867.0], [9.9, 1867.0], [10.0, 1868.0], [10.1, 1868.0], [10.2, 1868.0], [10.3, 1869.0], [10.4, 1869.0], [10.5, 1869.0], [10.6, 1869.0], [10.7, 1870.0], [10.8, 1870.0], [10.9, 1870.0], [11.0, 1871.0], [11.1, 1871.0], [11.2, 1871.0], [11.3, 1871.0], [11.4, 1871.0], [11.5, 1872.0], [11.6, 1872.0], [11.7, 1872.0], [11.8, 1872.0], [11.9, 1872.0], [12.0, 1873.0], [12.1, 1873.0], [12.2, 1874.0], [12.3, 1874.0], [12.4, 1874.0], [12.5, 1875.0], [12.6, 1875.0], [12.7, 1875.0], [12.8, 1875.0], [12.9, 1875.0], [13.0, 1876.0], [13.1, 1876.0], [13.2, 1877.0], [13.3, 1877.0], [13.4, 1877.0], [13.5, 1878.0], [13.6, 1878.0], [13.7, 1878.0], [13.8, 1878.0], [13.9, 1879.0], [14.0, 1879.0], [14.1, 1879.0], [14.2, 1879.0], [14.3, 1880.0], [14.4, 1880.0], [14.5, 1880.0], [14.6, 1880.0], [14.7, 1881.0], [14.8, 1881.0], [14.9, 1882.0], [15.0, 1882.0], [15.1, 1882.0], [15.2, 1882.0], [15.3, 1882.0], [15.4, 1882.0], [15.5, 1883.0], [15.6, 1883.0], [15.7, 1883.0], [15.8, 1884.0], [15.9, 1884.0], [16.0, 1884.0], [16.1, 1885.0], [16.2, 1885.0], [16.3, 1885.0], [16.4, 1885.0], [16.5, 1886.0], [16.6, 1886.0], [16.7, 1886.0], [16.8, 1886.0], [16.9, 1887.0], [17.0, 1887.0], [17.1, 1887.0], [17.2, 1887.0], [17.3, 1887.0], [17.4, 1887.0], [17.5, 1888.0], [17.6, 1888.0], [17.7, 1888.0], [17.8, 1888.0], [17.9, 1889.0], [18.0, 1889.0], [18.1, 1889.0], [18.2, 1889.0], [18.3, 1889.0], [18.4, 1889.0], [18.5, 1890.0], [18.6, 1890.0], [18.7, 1891.0], [18.8, 1891.0], [18.9, 1892.0], [19.0, 1892.0], [19.1, 1893.0], [19.2, 1893.0], [19.3, 1893.0], [19.4, 1893.0], [19.5, 1894.0], [19.6, 1894.0], [19.7, 1894.0], [19.8, 1895.0], [19.9, 1895.0], [20.0, 1896.0], [20.1, 1896.0], [20.2, 1896.0], [20.3, 1896.0], [20.4, 1897.0], [20.5, 1897.0], [20.6, 1898.0], [20.7, 1898.0], [20.8, 1898.0], [20.9, 1898.0], [21.0, 1898.0], [21.1, 1898.0], [21.2, 1899.0], [21.3, 1899.0], [21.4, 1899.0], [21.5, 1899.0], [21.6, 1900.0], [21.7, 1900.0], [21.8, 1901.0], [21.9, 1901.0], [22.0, 1901.0], [22.1, 1901.0], [22.2, 1901.0], [22.3, 1901.0], [22.4, 1902.0], [22.5, 1902.0], [22.6, 1902.0], [22.7, 1902.0], [22.8, 1902.0], [22.9, 1902.0], [23.0, 1902.0], [23.1, 1903.0], [23.2, 1903.0], [23.3, 1903.0], [23.4, 1904.0], [23.5, 1904.0], [23.6, 1904.0], [23.7, 1904.0], [23.8, 1904.0], [23.9, 1904.0], [24.0, 1904.0], [24.1, 1904.0], [24.2, 1904.0], [24.3, 1904.0], [24.4, 1905.0], [24.5, 1905.0], [24.6, 1905.0], [24.7, 1905.0], [24.8, 1905.0], [24.9, 1906.0], [25.0, 1906.0], [25.1, 1906.0], [25.2, 1907.0], [25.3, 1907.0], [25.4, 1907.0], [25.5, 1907.0], [25.6, 1908.0], [25.7, 1908.0], [25.8, 1908.0], [25.9, 1908.0], [26.0, 1909.0], [26.1, 1909.0], [26.2, 1909.0], [26.3, 1910.0], [26.4, 1910.0], [26.5, 1910.0], [26.6, 1910.0], [26.7, 1911.0], [26.8, 1911.0], [26.9, 1911.0], [27.0, 1911.0], [27.1, 1911.0], [27.2, 1912.0], [27.3, 1912.0], [27.4, 1912.0], [27.5, 1913.0], [27.6, 1913.0], [27.7, 1913.0], [27.8, 1913.0], [27.9, 1913.0], [28.0, 1914.0], [28.1, 1914.0], [28.2, 1914.0], [28.3, 1914.0], [28.4, 1915.0], [28.5, 1915.0], [28.6, 1915.0], [28.7, 1915.0], [28.8, 1915.0], [28.9, 1915.0], [29.0, 1916.0], [29.1, 1916.0], [29.2, 1917.0], [29.3, 1917.0], [29.4, 1917.0], [29.5, 1917.0], [29.6, 1917.0], [29.7, 1917.0], [29.8, 1918.0], [29.9, 1918.0], [30.0, 1918.0], [30.1, 1918.0], [30.2, 1918.0], [30.3, 1918.0], [30.4, 1918.0], [30.5, 1918.0], [30.6, 1919.0], [30.7, 1919.0], [30.8, 1919.0], [30.9, 1920.0], [31.0, 1920.0], [31.1, 1920.0], [31.2, 1921.0], [31.3, 1921.0], [31.4, 1921.0], [31.5, 1921.0], [31.6, 1922.0], [31.7, 1922.0], [31.8, 1922.0], [31.9, 1922.0], [32.0, 1923.0], [32.1, 1923.0], [32.2, 1923.0], [32.3, 1923.0], [32.4, 1923.0], [32.5, 1924.0], [32.6, 1924.0], [32.7, 1924.0], [32.8, 1924.0], [32.9, 1924.0], [33.0, 1925.0], [33.1, 1925.0], [33.2, 1925.0], [33.3, 1925.0], [33.4, 1925.0], [33.5, 1926.0], [33.6, 1926.0], [33.7, 1926.0], [33.8, 1926.0], [33.9, 1926.0], [34.0, 1927.0], [34.1, 1927.0], [34.2, 1927.0], [34.3, 1927.0], [34.4, 1928.0], [34.5, 1928.0], [34.6, 1929.0], [34.7, 1929.0], [34.8, 1929.0], [34.9, 1929.0], [35.0, 1930.0], [35.1, 1930.0], [35.2, 1930.0], [35.3, 1930.0], [35.4, 1931.0], [35.5, 1931.0], [35.6, 1932.0], [35.7, 1932.0], [35.8, 1932.0], [35.9, 1932.0], [36.0, 1933.0], [36.1, 1933.0], [36.2, 1933.0], [36.3, 1933.0], [36.4, 1933.0], [36.5, 1934.0], [36.6, 1935.0], [36.7, 1935.0], [36.8, 1935.0], [36.9, 1935.0], [37.0, 1935.0], [37.1, 1935.0], [37.2, 1936.0], [37.3, 1936.0], [37.4, 1936.0], [37.5, 1936.0], [37.6, 1937.0], [37.7, 1937.0], [37.8, 1937.0], [37.9, 1937.0], [38.0, 1937.0], [38.1, 1937.0], [38.2, 1938.0], [38.3, 1939.0], [38.4, 1939.0], [38.5, 1939.0], [38.6, 1940.0], [38.7, 1940.0], [38.8, 1940.0], [38.9, 1940.0], [39.0, 1941.0], [39.1, 1941.0], [39.2, 1941.0], [39.3, 1941.0], [39.4, 1942.0], [39.5, 1942.0], [39.6, 1942.0], [39.7, 1943.0], [39.8, 1943.0], [39.9, 1943.0], [40.0, 1943.0], [40.1, 1944.0], [40.2, 1944.0], [40.3, 1944.0], [40.4, 1944.0], [40.5, 1944.0], [40.6, 1945.0], [40.7, 1945.0], [40.8, 1946.0], [40.9, 1946.0], [41.0, 1947.0], [41.1, 1947.0], [41.2, 1948.0], [41.3, 1948.0], [41.4, 1948.0], [41.5, 1948.0], [41.6, 1948.0], [41.7, 1948.0], [41.8, 1948.0], [41.9, 1948.0], [42.0, 1949.0], [42.1, 1949.0], [42.2, 1949.0], [42.3, 1949.0], [42.4, 1949.0], [42.5, 1950.0], [42.6, 1951.0], [42.7, 1951.0], [42.8, 1951.0], [42.9, 1951.0], [43.0, 1951.0], [43.1, 1951.0], [43.2, 1952.0], [43.3, 1952.0], [43.4, 1952.0], [43.5, 1952.0], [43.6, 1953.0], [43.7, 1953.0], [43.8, 1953.0], [43.9, 1953.0], [44.0, 1954.0], [44.1, 1954.0], [44.2, 1954.0], [44.3, 1954.0], [44.4, 1954.0], [44.5, 1955.0], [44.6, 1955.0], [44.7, 1956.0], [44.8, 1956.0], [44.9, 1957.0], [45.0, 1957.0], [45.1, 1957.0], [45.2, 1957.0], [45.3, 1957.0], [45.4, 1957.0], [45.5, 1957.0], [45.6, 1958.0], [45.7, 1958.0], [45.8, 1958.0], [45.9, 1959.0], [46.0, 1959.0], [46.1, 1959.0], [46.2, 1960.0], [46.3, 1960.0], [46.4, 1960.0], [46.5, 1961.0], [46.6, 1961.0], [46.7, 1961.0], [46.8, 1961.0], [46.9, 1961.0], [47.0, 1962.0], [47.1, 1962.0], [47.2, 1963.0], [47.3, 1963.0], [47.4, 1963.0], [47.5, 1963.0], [47.6, 1964.0], [47.7, 1964.0], [47.8, 1964.0], [47.9, 1964.0], [48.0, 1965.0], [48.1, 1965.0], [48.2, 1966.0], [48.3, 1966.0], [48.4, 1967.0], [48.5, 1967.0], [48.6, 1967.0], [48.7, 1967.0], [48.8, 1968.0], [48.9, 1968.0], [49.0, 1968.0], [49.1, 1968.0], [49.2, 1969.0], [49.3, 1969.0], [49.4, 1969.0], [49.5, 1969.0], [49.6, 1970.0], [49.7, 1971.0], [49.8, 1971.0], [49.9, 1972.0], [50.0, 1972.0], [50.1, 1972.0], [50.2, 1972.0], [50.3, 1973.0], [50.4, 1973.0], [50.5, 1973.0], [50.6, 1973.0], [50.7, 1973.0], [50.8, 1973.0], [50.9, 1974.0], [51.0, 1974.0], [51.1, 1974.0], [51.2, 1974.0], [51.3, 1975.0], [51.4, 1976.0], [51.5, 1976.0], [51.6, 1977.0], [51.7, 1978.0], [51.8, 1978.0], [51.9, 1978.0], [52.0, 1978.0], [52.1, 1979.0], [52.2, 1979.0], [52.3, 1980.0], [52.4, 1980.0], [52.5, 1981.0], [52.6, 1981.0], [52.7, 1981.0], [52.8, 1981.0], [52.9, 1981.0], [53.0, 1981.0], [53.1, 1981.0], [53.2, 1982.0], [53.3, 1983.0], [53.4, 1983.0], [53.5, 1983.0], [53.6, 1983.0], [53.7, 1984.0], [53.8, 1984.0], [53.9, 1984.0], [54.0, 1984.0], [54.1, 1985.0], [54.2, 1985.0], [54.3, 1985.0], [54.4, 1985.0], [54.5, 1985.0], [54.6, 1985.0], [54.7, 1986.0], [54.8, 1986.0], [54.9, 1987.0], [55.0, 1987.0], [55.1, 1987.0], [55.2, 1988.0], [55.3, 1988.0], [55.4, 1988.0], [55.5, 1989.0], [55.6, 1989.0], [55.7, 1989.0], [55.8, 1990.0], [55.9, 1991.0], [56.0, 1991.0], [56.1, 1991.0], [56.2, 1991.0], [56.3, 1993.0], [56.4, 1993.0], [56.5, 1994.0], [56.6, 1994.0], [56.7, 1995.0], [56.8, 1995.0], [56.9, 1996.0], [57.0, 1996.0], [57.1, 1996.0], [57.2, 1997.0], [57.3, 1998.0], [57.4, 1998.0], [57.5, 1999.0], [57.6, 1999.0], [57.7, 1999.0], [57.8, 1999.0], [57.9, 2000.0], [58.0, 2000.0], [58.1, 2000.0], [58.2, 2001.0], [58.3, 2001.0], [58.4, 2002.0], [58.5, 2002.0], [58.6, 2002.0], [58.7, 2003.0], [58.8, 2004.0], [58.9, 2005.0], [59.0, 2005.0], [59.1, 2007.0], [59.2, 2007.0], [59.3, 2007.0], [59.4, 2007.0], [59.5, 2007.0], [59.6, 2007.0], [59.7, 2008.0], [59.8, 2009.0], [59.9, 2009.0], [60.0, 2009.0], [60.1, 2010.0], [60.2, 2010.0], [60.3, 2010.0], [60.4, 2010.0], [60.5, 2011.0], [60.6, 2012.0], [60.7, 2012.0], [60.8, 2012.0], [60.9, 2013.0], [61.0, 2013.0], [61.1, 2014.0], [61.2, 2015.0], [61.3, 2016.0], [61.4, 2016.0], [61.5, 2016.0], [61.6, 2017.0], [61.7, 2017.0], [61.8, 2018.0], [61.9, 2018.0], [62.0, 2019.0], [62.1, 2019.0], [62.2, 2019.0], [62.3, 2019.0], [62.4, 2020.0], [62.5, 2020.0], [62.6, 2021.0], [62.7, 2022.0], [62.8, 2022.0], [62.9, 2022.0], [63.0, 2022.0], [63.1, 2023.0], [63.2, 2023.0], [63.3, 2024.0], [63.4, 2024.0], [63.5, 2024.0], [63.6, 2025.0], [63.7, 2025.0], [63.8, 2026.0], [63.9, 2026.0], [64.0, 2028.0], [64.1, 2029.0], [64.2, 2029.0], [64.3, 2029.0], [64.4, 2030.0], [64.5, 2030.0], [64.6, 2030.0], [64.7, 2030.0], [64.8, 2031.0], [64.9, 2031.0], [65.0, 2032.0], [65.1, 2032.0], [65.2, 2033.0], [65.3, 2034.0], [65.4, 2034.0], [65.5, 2036.0], [65.6, 2037.0], [65.7, 2037.0], [65.8, 2038.0], [65.9, 2039.0], [66.0, 2039.0], [66.1, 2040.0], [66.2, 2040.0], [66.3, 2041.0], [66.4, 2041.0], [66.5, 2041.0], [66.6, 2043.0], [66.7, 2044.0], [66.8, 2044.0], [66.9, 2047.0], [67.0, 2047.0], [67.1, 2048.0], [67.2, 2048.0], [67.3, 2048.0], [67.4, 2048.0], [67.5, 2049.0], [67.6, 2050.0], [67.7, 2051.0], [67.8, 2053.0], [67.9, 2053.0], [68.0, 2054.0], [68.1, 2055.0], [68.2, 2055.0], [68.3, 2056.0], [68.4, 2057.0], [68.5, 2057.0], [68.6, 2058.0], [68.7, 2058.0], [68.8, 2059.0], [68.9, 2061.0], [69.0, 2061.0], [69.1, 2062.0], [69.2, 2063.0], [69.3, 2064.0], [69.4, 2065.0], [69.5, 2066.0], [69.6, 2066.0], [69.7, 2067.0], [69.8, 2067.0], [69.9, 2069.0], [70.0, 2070.0], [70.1, 2071.0], [70.2, 2071.0], [70.3, 2072.0], [70.4, 2073.0], [70.5, 2073.0], [70.6, 2074.0], [70.7, 2074.0], [70.8, 2074.0], [70.9, 2075.0], [71.0, 2076.0], [71.1, 2077.0], [71.2, 2077.0], [71.3, 2078.0], [71.4, 2079.0], [71.5, 2080.0], [71.6, 2080.0], [71.7, 2080.0], [71.8, 2081.0], [71.9, 2081.0], [72.0, 2082.0], [72.1, 2083.0], [72.2, 2084.0], [72.3, 2085.0], [72.4, 2086.0], [72.5, 2087.0], [72.6, 2088.0], [72.7, 2088.0], [72.8, 2088.0], [72.9, 2090.0], [73.0, 2090.0], [73.1, 2094.0], [73.2, 2094.0], [73.3, 2095.0], [73.4, 2095.0], [73.5, 2096.0], [73.6, 2096.0], [73.7, 2097.0], [73.8, 2097.0], [73.9, 2100.0], [74.0, 2101.0], [74.1, 2101.0], [74.2, 2101.0], [74.3, 2103.0], [74.4, 2104.0], [74.5, 2105.0], [74.6, 2107.0], [74.7, 2108.0], [74.8, 2110.0], [74.9, 2111.0], [75.0, 2112.0], [75.1, 2115.0], [75.2, 2115.0], [75.3, 2116.0], [75.4, 2117.0], [75.5, 2118.0], [75.6, 2118.0], [75.7, 2119.0], [75.8, 2119.0], [75.9, 2121.0], [76.0, 2121.0], [76.1, 2123.0], [76.2, 2124.0], [76.3, 2126.0], [76.4, 2128.0], [76.5, 2131.0], [76.6, 2131.0], [76.7, 2134.0], [76.8, 2135.0], [76.9, 2136.0], [77.0, 2136.0], [77.1, 2137.0], [77.2, 2137.0], [77.3, 2139.0], [77.4, 2140.0], [77.5, 2143.0], [77.6, 2143.0], [77.7, 2146.0], [77.8, 2146.0], [77.9, 2147.0], [78.0, 2147.0], [78.1, 2149.0], [78.2, 2149.0], [78.3, 2153.0], [78.4, 2153.0], [78.5, 2154.0], [78.6, 2155.0], [78.7, 2158.0], [78.8, 2159.0], [78.9, 2160.0], [79.0, 2161.0], [79.1, 2161.0], [79.2, 2162.0], [79.3, 2163.0], [79.4, 2164.0], [79.5, 2166.0], [79.6, 2167.0], [79.7, 2169.0], [79.8, 2170.0], [79.9, 2174.0], [80.0, 2175.0], [80.1, 2176.0], [80.2, 2177.0], [80.3, 2177.0], [80.4, 2177.0], [80.5, 2181.0], [80.6, 2181.0], [80.7, 2182.0], [80.8, 2183.0], [80.9, 2187.0], [81.0, 2188.0], [81.1, 2190.0], [81.2, 2192.0], [81.3, 2193.0], [81.4, 2195.0], [81.5, 2196.0], [81.6, 2196.0], [81.7, 2198.0], [81.8, 2199.0], [81.9, 2200.0], [82.0, 2201.0], [82.1, 2206.0], [82.2, 2206.0], [82.3, 2207.0], [82.4, 2214.0], [82.5, 2216.0], [82.6, 2216.0], [82.7, 2218.0], [82.8, 2220.0], [82.9, 2223.0], [83.0, 2223.0], [83.1, 2224.0], [83.2, 2225.0], [83.3, 2228.0], [83.4, 2228.0], [83.5, 2238.0], [83.6, 2239.0], [83.7, 2247.0], [83.8, 2252.0], [83.9, 2255.0], [84.0, 2255.0], [84.1, 2256.0], [84.2, 2258.0], [84.3, 2264.0], [84.4, 2265.0], [84.5, 2268.0], [84.6, 2268.0], [84.7, 2271.0], [84.8, 2273.0], [84.9, 2274.0], [85.0, 2276.0], [85.1, 2280.0], [85.2, 2285.0], [85.3, 2286.0], [85.4, 2287.0], [85.5, 2288.0], [85.6, 2289.0], [85.7, 2292.0], [85.8, 2293.0], [85.9, 2295.0], [86.0, 2295.0], [86.1, 2298.0], [86.2, 2299.0], [86.3, 2301.0], [86.4, 2304.0], [86.5, 2308.0], [86.6, 2310.0], [86.7, 2324.0], [86.8, 2331.0], [86.9, 2333.0], [87.0, 2336.0], [87.1, 2337.0], [87.2, 2339.0], [87.3, 2345.0], [87.4, 2353.0], [87.5, 2356.0], [87.6, 2359.0], [87.7, 2364.0], [87.8, 2366.0], [87.9, 2368.0], [88.0, 2370.0], [88.1, 2373.0], [88.2, 2382.0], [88.3, 2383.0], [88.4, 2391.0], [88.5, 2395.0], [88.6, 2399.0], [88.7, 2401.0], [88.8, 2404.0], [88.9, 2404.0], [89.0, 2414.0], [89.1, 2427.0], [89.2, 2432.0], [89.3, 2433.0], [89.4, 2436.0], [89.5, 2439.0], [89.6, 2445.0], [89.7, 2453.0], [89.8, 2458.0], [89.9, 2461.0], [90.0, 2464.0], [90.1, 2465.0], [90.2, 2471.0], [90.3, 2471.0], [90.4, 2486.0], [90.5, 2486.0], [90.6, 2502.0], [90.7, 2505.0], [90.8, 2514.0], [90.9, 2567.0], [91.0, 2591.0], [91.1, 2600.0], [91.2, 2611.0], [91.3, 2621.0], [91.4, 2634.0], [91.5, 2639.0], [91.6, 2678.0], [91.7, 2679.0], [91.8, 2702.0], [91.9, 2708.0], [92.0, 2717.0], [92.1, 2741.0], [92.2, 2771.0], [92.3, 2774.0], [92.4, 2821.0], [92.5, 2887.0], [92.6, 2895.0], [92.7, 2912.0], [92.8, 2938.0], [92.9, 2942.0], [93.0, 2958.0], [93.1, 2974.0], [93.2, 3009.0], [93.3, 3015.0], [93.4, 3026.0], [93.5, 3064.0], [93.6, 3172.0], [93.7, 3173.0], [93.8, 3238.0], [93.9, 3243.0], [94.0, 3296.0], [94.1, 3316.0], [94.2, 3335.0], [94.3, 3336.0], [94.4, 3344.0], [94.5, 3400.0], [94.6, 3450.0], [94.7, 3460.0], [94.8, 3484.0], [94.9, 3556.0], [95.0, 3781.0], [95.1, 3811.0], [95.2, 4009.0], [95.3, 4012.0], [95.4, 5191.0], [95.5, 5535.0], [95.6, 5902.0], [95.7, 5998.0], [95.8, 6272.0], [95.9, 6387.0], [96.0, 6583.0], [96.1, 6622.0], [96.2, 6639.0], [96.3, 6651.0], [96.4, 6682.0], [96.5, 6687.0], [96.6, 6687.0], [96.7, 6698.0], [96.8, 6724.0], [96.9, 6733.0], [97.0, 6743.0], [97.1, 6751.0], [97.2, 6771.0], [97.3, 6772.0], [97.4, 6775.0], [97.5, 6782.0], [97.6, 6798.0], [97.7, 6849.0], [97.8, 6963.0], [97.9, 7050.0], [98.0, 7134.0], [98.1, 7142.0], [98.2, 7226.0], [98.3, 7287.0], [98.4, 7372.0], [98.5, 7434.0], [98.6, 7789.0], [98.7, 7871.0], [98.8, 8019.0], [98.9, 8094.0], [99.0, 8956.0], [99.1, 9105.0], [99.2, 10027.0], [99.3, 10038.0], [99.4, 10559.0], [99.5, 10814.0], [99.6, 11469.0], [99.7, 11682.0], [99.8, 11882.0], [99.9, 13338.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 1700.0, "maxY": 545.0, "series": [{"data": [[1700.0, 3.0], [1800.0, 320.0], [1900.0, 545.0], [2000.0, 240.0], [2100.0, 120.0], [2200.0, 65.0], [2300.0, 37.0], [2400.0, 29.0], [2500.0, 7.0], [2600.0, 11.0], [2700.0, 8.0], [2800.0, 5.0], [2900.0, 8.0], [3000.0, 5.0], [3100.0, 3.0], [3200.0, 5.0], [3300.0, 6.0], [3400.0, 6.0], [3500.0, 1.0], [3600.0, 1.0], [3700.0, 1.0], [3800.0, 1.0], [3900.0, 1.0], [4000.0, 2.0], [4100.0, 1.0], [5100.0, 1.0], [5500.0, 1.0], [5800.0, 1.0], [5900.0, 2.0], [6200.0, 2.0], [6300.0, 1.0], [6600.0, 10.0], [6500.0, 2.0], [6700.0, 14.0], [6900.0, 1.0], [6800.0, 2.0], [7100.0, 4.0], [7000.0, 1.0], [7300.0, 2.0], [7400.0, 1.0], [7200.0, 2.0], [7500.0, 1.0], [7700.0, 1.0], [7900.0, 1.0], [7800.0, 1.0], [8000.0, 2.0], [8900.0, 2.0], [9100.0, 1.0], [10000.0, 2.0], [9800.0, 1.0], [10500.0, 1.0], [10400.0, 1.0], [10800.0, 2.0], [11400.0, 1.0], [11600.0, 1.0], [11800.0, 2.0], [13300.0, 1.0], [14500.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 14500.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 1500.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 1500.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 1500.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 68.01481481481486, "minX": 1.68423426E12, "maxY": 1428.013793103448, "series": [{"data": [[1.6842345E12, 263.0039215686275], [1.68423432E12, 1196.5094339622628], [1.68423438E12, 882.0192926045017], [1.68423426E12, 1428.013793103448], [1.68423456E12, 68.01481481481486], [1.68423444E12, 558.5267857142862]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68423456E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 1796.0, "minX": 1.0, "maxY": 14584.0, "series": [{"data": [[2.0, 2097.0], [3.0, 1910.0], [4.0, 1872.0], [5.0, 1827.0], [6.0, 2022.0], [7.0, 1923.0], [8.0, 1909.0], [9.0, 1901.0], [10.0, 1841.0], [11.0, 2404.0], [12.0, 2196.0], [13.0, 2105.0], [14.0, 1937.0], [15.0, 1885.0], [16.0, 1968.0], [17.0, 1948.0], [18.0, 1920.0], [20.0, 1894.5], [21.0, 1984.0], [22.0, 1950.0], [23.0, 1948.0], [24.0, 1959.0], [25.0, 1935.0], [26.0, 1914.0], [27.0, 1882.0], [28.0, 1867.0], [29.0, 1879.0], [30.0, 1842.0], [31.0, 2149.0], [33.0, 1904.0], [32.0, 1939.0], [35.0, 1826.0], [34.0, 2689.0], [37.0, 2353.0], [36.0, 1796.0], [39.0, 6533.0], [38.0, 2255.0], [41.0, 1834.0], [40.0, 1926.0], [43.0, 2012.0], [42.0, 2161.0], [45.0, 1932.0], [44.0, 2002.0], [47.0, 6881.0], [46.0, 1868.0], [49.0, 1935.0], [48.0, 2034.0], [51.0, 1897.0], [50.0, 1911.0], [53.0, 2038.0], [52.0, 1857.0], [55.0, 1906.0], [54.0, 1958.0], [57.0, 1824.0], [56.0, 1862.0], [59.0, 1909.0], [58.0, 1937.0], [61.0, 1836.0], [60.0, 1871.0], [63.0, 1974.0], [62.0, 2090.0], [67.0, 1986.0], [66.0, 1870.0], [65.0, 1911.0], [64.0, 1954.0], [71.0, 1844.0], [70.0, 1904.0], [69.0, 1904.0], [68.0, 1944.0], [75.0, 1944.0], [74.0, 1989.0], [73.0, 2074.0], [72.0, 2445.0], [79.0, 1922.0], [77.0, 1943.0], [76.0, 2016.0], [83.0, 1918.0], [82.0, 1797.0], [81.0, 2078.0], [80.0, 2193.0], [87.0, 1930.0], [86.0, 1875.0], [85.0, 1880.0], [84.0, 1894.0], [91.0, 2002.0], [90.0, 1814.0], [89.0, 1873.0], [88.0, 1901.0], [95.0, 1868.0], [94.0, 1914.0], [93.0, 1938.0], [92.0, 1981.0], [99.0, 1905.0], [98.0, 1907.0], [97.0, 1944.0], [96.0, 1994.0], [103.0, 2111.0], [102.0, 2116.0], [101.0, 2143.0], [100.0, 1898.0], [107.0, 2117.0], [106.0, 2149.0], [105.0, 1876.0], [104.0, 1957.0], [111.0, 2216.0], [110.0, 1879.0], [109.0, 1974.0], [108.0, 1984.0], [115.0, 2196.0], [114.0, 1912.0], [113.0, 1947.0], [112.0, 2048.0], [119.0, 1870.0], [118.0, 1921.0], [117.0, 2010.0], [116.0, 1853.0], [123.0, 1898.0], [122.0, 1935.0], [121.0, 1822.0], [120.0, 2427.0], [127.0, 2060.0], [126.0, 2110.0], [125.0, 1861.0], [124.0, 1890.0], [135.0, 1872.0], [134.0, 1883.0], [133.0, 2047.0], [132.0, 2077.0], [131.0, 2088.0], [130.0, 1840.0], [129.0, 1859.0], [128.0, 1918.0], [143.0, 3238.0], [142.0, 2239.0], [141.0, 1887.0], [140.0, 1912.0], [139.0, 1925.0], [138.0, 1939.0], [137.0, 2097.0], [136.0, 6849.0], [151.0, 1970.0], [150.0, 2192.0], [149.0, 2223.0], [148.0, 2634.0], [147.0, 1849.0], [146.0, 1853.0], [145.0, 1887.0], [144.0, 1930.0], [159.0, 1956.0], [158.0, 2289.0], [157.0, 1963.0], [156.0, 1985.0], [155.0, 2118.0], [154.0, 1864.0], [153.0, 1882.0], [152.0, 2252.0], [167.0, 1967.0], [166.0, 1987.0], [165.0, 2051.0], [164.0, 1825.0], [163.0, 2225.0], [162.0, 1913.0], [161.0, 1871.0], [160.0, 1875.0], [175.0, 1879.0], [174.0, 1890.0], [173.0, 1902.0], [172.0, 2073.0], [171.0, 2075.0], [170.0, 1881.0], [169.0, 1887.0], [168.0, 1911.0], [182.0, 2153.0], [181.0, 2255.0], [180.0, 1922.0], [179.0, 1928.0], [178.0, 2073.0], [177.0, 2195.0], [176.0, 2223.0], [191.0, 2295.0], [190.0, 1986.0], [189.0, 2368.0], [188.0, 2098.0], [187.0, 2404.0], [186.0, 2429.0], [185.0, 1915.0], [184.0, 1946.0], [199.0, 1889.0], [198.0, 2077.0], [197.0, 1923.0], [196.0, 1925.0], [195.0, 1943.0], [194.0, 1924.0], [193.0, 1927.0], [192.0, 1974.0], [207.0, 2702.0], [206.0, 3243.0], [205.0, 1849.0], [204.0, 1948.0], [203.0, 2022.0], [202.0, 2145.0], [201.0, 2708.0], [200.0, 1878.0], [215.0, 2331.0], [214.0, 2207.0], [213.0, 1969.0], [212.0, 2894.0], [211.0, 2984.0], [210.0, 2337.0], [209.0, 3340.0], [208.0, 2464.0], [223.0, 1840.0], [222.0, 2591.0], [221.0, 1903.0], [220.0, 2032.0], [219.0, 2165.0], [218.0, 2053.0], [217.0, 2007.0], [216.0, 2031.0], [231.0, 2197.0], [230.0, 1857.0], [229.0, 1873.0], [228.0, 1942.0], [227.0, 1968.0], [226.0, 1847.0], [225.0, 1930.0], [224.0, 1940.0], [239.0, 2054.0], [238.0, 2163.0], [237.0, 2324.0], [236.0, 6963.0], [235.0, 1868.0], [234.0, 1880.0], [233.0, 1957.0], [232.0, 1973.0], [247.0, 1931.0], [246.0, 2307.0], [245.0, 1961.0], [244.0, 1963.0], [243.0, 2471.0], [242.0, 2929.0], [241.0, 1917.0], [240.0, 1923.0], [255.0, 2068.0], [254.0, 2131.0], [253.0, 2181.0], [252.0, 2268.0], [251.0, 1928.0], [250.0, 1934.0], [249.0, 2465.0], [248.0, 1968.0], [270.0, 1896.0], [271.0, 2621.0], [269.0, 1921.0], [268.0, 1951.0], [267.0, 1989.0], [266.0, 2118.0], [265.0, 1843.0], [264.0, 1911.0], [263.0, 1944.0], [257.0, 2003.0], [256.0, 2357.0], [259.0, 1937.0], [258.0, 1958.0], [262.0, 2017.0], [261.0, 2019.0], [260.0, 1927.0], [286.0, 2432.0], [287.0, 2049.0], [285.0, 1919.0], [284.0, 1954.0], [283.0, 1856.0], [282.0, 1991.0], [281.0, 1925.0], [280.0, 2062.0], [279.0, 2076.0], [273.0, 2199.0], [272.0, 2228.0], [275.0, 1841.0], [274.0, 2014.0], [278.0, 2013.0], [277.0, 2131.0], [276.0, 2177.0], [302.0, 2335.0], [303.0, 2228.0], [301.0, 2771.0], [300.0, 1877.0], [299.0, 1973.0], [298.0, 2085.0], [297.0, 2164.0], [296.0, 2639.0], [295.0, 1860.0], [289.0, 1927.0], [288.0, 2009.0], [291.0, 2034.0], [290.0, 1848.0], [294.0, 1924.0], [293.0, 1937.0], [292.0, 2022.0], [318.0, 2138.0], [319.0, 2256.0], [317.0, 2364.0], [316.0, 3335.0], [315.0, 1854.0], [314.0, 1877.0], [313.0, 1955.0], [312.0, 2030.0], [311.0, 3172.0], [305.0, 1826.0], [304.0, 2170.0], [307.0, 1937.0], [306.0, 2173.0], [310.0, 1839.0], [309.0, 1872.0], [308.0, 1900.0], [334.0, 1962.0], [335.0, 1889.0], [333.0, 2002.0], [332.0, 2081.0], [331.0, 1882.0], [330.0, 1908.0], [329.0, 2190.0], [328.0, 1957.0], [327.0, 2115.0], [321.0, 2069.0], [320.0, 2081.0], [323.0, 1915.0], [322.0, 2176.0], [326.0, 2119.0], [325.0, 1895.0], [324.0, 1854.0], [350.0, 1883.0], [351.0, 2088.0], [349.0, 1915.0], [348.0, 2049.0], [347.0, 2059.0], [346.0, 2076.0], [345.0, 1850.0], [344.0, 1889.0], [343.0, 1892.0], [337.0, 1958.0], [336.0, 2153.0], [339.0, 1857.0], [338.0, 1904.0], [342.0, 1932.0], [341.0, 1988.0], [340.0, 1842.0], [366.0, 2137.0], [367.0, 2057.0], [365.0, 1853.0], [364.0, 1872.0], [363.0, 1920.0], [362.0, 1938.0], [361.0, 1998.0], [360.0, 1875.0], [359.0, 1908.0], [353.0, 1950.0], [352.0, 1961.0], [355.0, 1839.0], [354.0, 1905.0], [358.0, 1958.0], [357.0, 1991.0], [356.0, 2161.0], [382.0, 1873.0], [383.0, 1864.0], [381.0, 1949.0], [380.0, 1874.0], [379.0, 1907.0], [378.0, 1932.0], [377.0, 2011.0], [376.0, 2012.0], [375.0, 2107.0], [369.0, 1961.0], [368.0, 1966.0], [371.0, 2252.0], [370.0, 1923.0], [374.0, 2159.0], [373.0, 2274.0], [372.0, 2292.0], [398.0, 1939.0], [399.0, 1875.0], [397.0, 2025.0], [396.0, 2274.0], [395.0, 1920.0], [394.0, 2007.0], [393.0, 2101.0], [392.0, 2163.0], [391.0, 2247.0], [385.0, 1831.0], [384.0, 1854.0], [387.0, 2152.0], [386.0, 2238.0], [390.0, 1859.0], [389.0, 1948.0], [388.0, 2004.0], [414.0, 1856.0], [415.0, 1811.0], [413.0, 1905.0], [412.0, 2095.0], [411.0, 2244.0], [410.0, 1820.0], [409.0, 1964.0], [408.0, 1976.0], [407.0, 2146.0], [401.0, 2499.0], [400.0, 1838.0], [403.0, 2013.0], [402.0, 2146.0], [406.0, 2158.0], [405.0, 1889.0], [404.0, 1951.0], [430.0, 1893.0], [431.0, 1848.0], [429.0, 1915.0], [428.0, 1933.0], [427.0, 1871.0], [426.0, 1884.0], [425.0, 1888.0], [424.0, 1995.0], [423.0, 2066.0], [417.0, 3015.0], [416.0, 2476.0], [419.0, 6741.0], [418.0, 2399.0], [422.0, 2083.0], [421.0, 2108.0], [420.0, 2135.0], [446.0, 1822.0], [447.0, 7287.0], [445.0, 1902.0], [444.0, 1972.0], [443.0, 1983.0], [442.0, 2061.0], [441.0, 1867.0], [440.0, 1854.0], [439.0, 1898.0], [433.0, 2090.0], [432.0, 2153.0], [435.0, 2014.0], [434.0, 2032.0], [438.0, 1918.0], [437.0, 1964.0], [436.0, 1993.0], [462.0, 2627.0], [463.0, 2101.0], [461.0, 1854.0], [460.0, 1961.0], [459.0, 1992.0], [458.0, 2019.0], [457.0, 1924.0], [456.0, 2043.0], [455.0, 2366.0], [449.0, 1921.0], [448.0, 1983.0], [451.0, 1909.0], [450.0, 1911.0], [454.0, 2383.0], [453.0, 2714.0], [452.0, 1904.0], [478.0, 6636.0], [479.0, 2390.0], [477.0, 1869.0], [476.0, 1915.0], [475.0, 1847.0], [474.0, 1930.0], [473.0, 1859.0], [472.0, 1937.0], [471.0, 1941.0], [465.0, 7372.0], [464.0, 1988.0], [467.0, 1910.0], [466.0, 1914.0], [470.0, 1933.0], [469.0, 1861.0], [468.0, 1965.0], [494.0, 2019.0], [495.0, 1959.0], [493.0, 2140.0], [492.0, 1893.0], [491.0, 1901.0], [490.0, 1918.0], [489.0, 1981.0], [488.0, 2008.0], [487.0, 1981.0], [481.0, 2439.0], [480.0, 2024.0], [483.0, 2356.0], [482.0, 1965.0], [486.0, 2182.0], [485.0, 1889.0], [484.0, 2310.0], [510.0, 1965.0], [511.0, 1939.0], [509.0, 2028.0], [508.0, 2391.0], [507.0, 2026.0], [506.0, 2200.0], [505.0, 2216.0], [504.0, 2406.0], [503.0, 1812.0], [497.0, 1891.0], [496.0, 1933.0], [499.0, 2094.0], [498.0, 3336.0], [502.0, 1863.0], [501.0, 1928.0], [500.0, 1995.0], [537.0, 2010.0], [542.0, 1984.0], [543.0, 1906.0], [528.0, 6687.0], [530.0, 6709.0], [529.0, 6662.0], [532.0, 2032.0], [531.0, 2113.0], [541.0, 1912.0], [540.0, 1945.0], [539.0, 1983.5], [536.0, 3023.0], [519.0, 1936.0], [518.0, 1910.0], [517.0, 2679.0], [516.0, 2031.0], [515.0, 2087.0], [514.0, 2161.0], [513.0, 2232.0], [512.0, 1916.0], [527.0, 2814.0], [526.0, 6651.0], [525.0, 1902.0], [524.0, 1985.0], [522.0, 2263.0], [521.0, 1846.0], [520.0, 1909.0], [535.0, 6387.0], [534.0, 1904.5], [572.0, 2050.0], [575.0, 1837.0], [561.0, 1821.0], [560.0, 1904.0], [563.0, 1942.0], [562.0, 2012.0], [565.0, 1911.0], [564.0, 1918.0], [574.0, 1920.0], [573.0, 2304.0], [571.0, 2216.0], [570.0, 1886.0], [569.0, 1924.0], [568.0, 1974.0], [559.0, 1813.0], [545.0, 1845.0], [544.0, 1901.0], [547.0, 1954.0], [546.0, 2887.0], [549.0, 1838.0], [548.0, 1933.0], [551.0, 1874.0], [550.0, 1918.0], [558.0, 1942.0], [557.0, 2295.0], [556.0, 2007.0], [555.0, 1905.0], [554.0, 1957.0], [553.0, 2095.0], [552.0, 1808.0], [567.0, 1981.0], [566.0, 2195.0], [604.0, 1936.0], [607.0, 6798.0], [593.0, 1949.0], [592.0, 2001.0], [595.0, 1863.0], [594.0, 9105.0], [597.0, 1973.0], [596.0, 1847.0], [606.0, 1878.0], [605.0, 1882.0], [603.0, 1985.0], [602.0, 2041.0], [601.0, 1864.0], [600.0, 1862.0], [591.0, 2066.0], [577.0, 2001.0], [576.0, 1832.0], [579.0, 1960.0], [578.0, 2020.0], [581.0, 1987.0], [580.0, 1959.0], [583.0, 1898.0], [582.0, 1934.0], [590.0, 1887.0], [589.0, 1944.0], [588.0, 1957.0], [587.0, 1964.0], [586.0, 1991.0], [585.0, 1831.0], [584.0, 1891.0], [599.0, 1914.0], [598.0, 1940.0], [636.0, 1869.0], [639.0, 1904.0], [625.0, 2514.0], [624.0, 8956.0], [627.0, 2280.0], [626.0, 2643.0], [629.0, 1995.0], [628.0, 2461.0], [638.0, 2084.0], [637.0, 1963.0], [635.0, 2206.0], [634.0, 2029.0], [633.0, 2036.0], [632.0, 2359.0], [623.0, 1929.0], [609.0, 1948.0], [608.0, 1987.0], [611.0, 1895.0], [610.0, 1933.0], [613.0, 3344.0], [612.0, 1840.0], [615.0, 5998.0], [614.0, 3475.0], [622.0, 1929.0], [621.0, 2136.0], [620.0, 1954.0], [617.0, 2286.0], [616.0, 2121.0], [631.0, 4009.0], [630.0, 1887.0], [668.0, 1917.0], [671.0, 1834.0], [657.0, 1940.0], [656.0, 1953.0], [659.0, 1951.0], [658.0, 1908.0], [661.0, 1896.0], [660.0, 1922.0], [670.0, 1887.0], [669.0, 1906.0], [667.0, 1941.0], [666.0, 1870.0], [665.0, 1896.0], [664.0, 1918.0], [655.0, 1983.0], [641.0, 1917.0], [640.0, 1951.0], [643.0, 1875.0], [642.0, 1895.0], [645.0, 2088.0], [644.0, 2414.0], [647.0, 1925.0], [646.0, 1969.0], [654.0, 2022.0], [653.0, 1955.0], [652.0, 1859.0], [651.0, 1978.0], [650.0, 1980.0], [663.0, 1989.0], [662.0, 2047.0], [700.0, 1923.0], [703.0, 1945.0], [689.0, 2079.0], [688.0, 2443.0], [691.0, 2136.0], [690.0, 2030.0], [693.0, 1949.0], [692.0, 2131.0], [702.0, 2071.0], [701.0, 1875.0], [699.0, 1969.0], [698.0, 1894.0], [697.0, 1907.0], [696.0, 1879.0], [687.0, 1892.0], [673.0, 2296.0], [672.0, 3781.0], [675.0, 6775.0], [674.0, 2273.0], [677.0, 1949.0], [676.0, 1980.0], [679.0, 2048.0], [678.0, 1868.0], [686.0, 1913.0], [685.0, 1925.0], [684.0, 3203.0], [683.0, 1899.0], [682.0, 1902.0], [681.0, 1972.0], [680.0, 2022.0], [695.0, 1904.0], [694.0, 1922.0], [732.0, 2025.0], [735.0, 1918.0], [721.0, 1917.0], [720.0, 1962.0], [723.0, 2058.0], [722.0, 2058.0], [725.0, 1912.0], [724.0, 1839.0], [734.0, 1935.0], [733.0, 6751.0], [731.0, 1867.0], [730.0, 2214.0], [729.0, 1999.0], [728.0, 2088.0], [719.0, 1972.0], [705.0, 1862.0], [704.0, 1880.0], [707.0, 1948.0], [706.0, 1952.0], [709.0, 1881.0], [708.0, 1881.0], [711.0, 2112.0], [710.0, 1876.0], [718.0, 2102.0], [717.0, 2433.0], [716.0, 6743.0], [715.0, 1886.0], [714.0, 1962.0], [713.0, 1969.0], [712.0, 2047.0], [727.0, 2338.0], [726.0, 1881.0], [764.0, 1885.0], [767.0, 2160.0], [753.0, 2395.0], [752.0, 2398.0], [755.0, 1913.0], [754.0, 2026.0], [757.0, 2085.0], [756.0, 1864.0], [766.0, 2332.0], [765.0, 1883.0], [763.0, 1901.0], [762.0, 1917.0], [761.0, 1929.0], [760.0, 2010.0], [751.0, 1822.0], [737.0, 1986.0], [736.0, 1835.0], [739.0, 1908.0], [738.0, 1914.0], [741.0, 1887.0], [740.0, 1902.0], [743.0, 2023.0], [742.0, 2092.0], [750.0, 1910.0], [749.0, 1948.0], [748.0, 2056.0], [747.0, 2143.0], [746.0, 1858.0], [745.0, 1860.0], [744.0, 1949.0], [759.0, 2055.0], [758.0, 2065.0], [796.0, 1872.0], [799.0, 1830.0], [785.0, 1886.0], [784.0, 1951.0], [787.0, 2010.0], [786.0, 1907.0], [789.0, 1843.0], [788.0, 1968.0], [798.0, 1882.0], [797.0, 1905.0], [795.0, 1931.0], [794.0, 1901.0], [793.0, 2017.0], [792.0, 1996.0], [783.0, 1953.0], [769.0, 2039.0], [768.0, 2055.0], [771.0, 2154.0], [770.0, 1890.0], [773.0, 1902.0], [772.0, 1982.0], [775.0, 1831.0], [774.0, 1900.0], [782.0, 1983.5], [780.0, 2179.5], [778.0, 2257.5], [776.0, 2434.0], [791.0, 2030.0], [790.0, 1899.0], [828.0, 1885.0], [831.0, 2174.0], [817.0, 2124.0], [816.0, 2201.0], [819.0, 1999.0], [818.0, 2074.0], [821.0, 1981.0], [820.0, 2012.0], [830.0, 1852.0], [829.0, 1855.0], [827.0, 1933.0], [826.0, 1951.0], [825.0, 1860.0], [824.0, 1905.0], [815.0, 1882.0], [801.0, 2119.0], [800.0, 1846.0], [803.0, 1888.0], [802.0, 2044.0], [805.0, 1853.0], [804.0, 1877.0], [807.0, 1948.0], [806.0, 1953.0], [814.0, 1949.0], [813.0, 1958.0], [812.0, 2021.0], [811.0, 2188.0], [810.0, 1858.0], [809.0, 1868.0], [808.0, 1921.0], [823.0, 1978.0], [822.0, 1988.0], [860.0, 1987.0], [863.0, 1856.0], [848.0, 2471.0], [850.0, 1925.0], [849.0, 6622.0], [853.0, 2293.5], [851.0, 1903.0], [862.0, 1901.0], [861.0, 1973.0], [859.0, 1940.0], [858.0, 6583.0], [857.0, 1953.0], [856.0, 2016.0], [847.0, 6773.0], [833.0, 2000.0], [832.0, 2008.0], [835.0, 1846.0], [834.0, 1973.0], [837.0, 2016.0], [836.0, 2103.0], [839.0, 1904.0], [838.0, 1936.0], [846.0, 4012.0], [845.0, 1887.0], [844.0, 1901.0], [843.0, 1966.0], [842.0, 1973.0], [841.0, 2020.0], [840.0, 1871.0], [855.0, 2041.0], [854.0, 2461.0], [892.0, 2373.0], [895.0, 2029.0], [880.0, 1935.0], [883.0, 1892.5], [881.0, 1940.0], [885.0, 1937.0], [884.0, 2037.0], [894.0, 2039.0], [893.0, 2300.0], [891.0, 1836.0], [890.0, 1910.0], [889.0, 1927.0], [888.0, 2717.0], [879.0, 1994.0], [865.0, 1985.0], [864.0, 2039.0], [867.0, 1957.0], [866.0, 1959.0], [869.0, 2009.0], [868.0, 1871.0], [871.0, 1994.0], [870.0, 2001.0], [878.0, 1972.0], [877.0, 2025.0], [876.0, 2082.0], [875.0, 2298.0], [874.0, 7050.0], [873.0, 1797.0], [872.0, 1857.0], [887.0, 1883.0], [886.0, 1935.0], [924.0, 1961.0], [927.0, 1862.0], [913.0, 1943.0], [912.0, 2265.0], [915.0, 2148.0], [914.0, 2074.0], [917.0, 1899.0], [916.0, 1813.0], [926.0, 1889.0], [925.0, 1895.0], [923.0, 2299.0], [922.0, 5902.0], [921.0, 1886.0], [920.0, 1935.0], [911.0, 2040.0], [897.0, 1960.0], [896.0, 2005.0], [899.0, 1954.0], [898.0, 2000.0], [901.0, 1839.0], [900.0, 1884.0], [903.0, 3064.0], [902.0, 6203.0], [910.0, 2070.0], [909.0, 2600.0], [908.0, 1908.0], [907.0, 1922.0], [906.0, 1985.0], [905.0, 1989.0], [904.0, 2061.0], [919.0, 1945.0], [918.0, 1843.0], [956.0, 1853.0], [959.0, 1931.0], [945.0, 1900.0], [944.0, 1932.0], [947.0, 2456.0], [946.0, 1840.0], [949.0, 2044.0], [948.0, 2147.0], [958.0, 1998.0], [957.0, 2020.0], [955.0, 2058.0], [954.0, 1985.0], [953.0, 2041.0], [952.0, 2056.0], [943.0, 1948.0], [929.0, 1945.0], [928.0, 1979.0], [931.0, 1811.0], [930.0, 1903.0], [933.0, 2006.0], [932.0, 2034.0], [935.0, 1888.0], [934.0, 1954.0], [942.0, 1835.0], [941.0, 1869.0], [940.0, 1901.0], [939.0, 2401.0], [938.0, 2023.0], [937.0, 2224.0], [936.0, 1878.0], [951.0, 1980.0], [950.0, 2002.0], [988.0, 2090.0], [991.0, 1948.0], [977.0, 2119.0], [976.0, 2160.0], [979.0, 1952.0], [978.0, 1983.0], [981.0, 2080.0], [980.0, 1942.0], [990.0, 1912.0], [989.0, 1913.0], [987.0, 2133.0], [986.0, 2287.0], [985.0, 1935.0], [984.0, 1941.0], [975.0, 1859.0], [961.0, 1954.0], [960.0, 1872.0], [963.0, 1904.0], [962.0, 1925.0], [965.0, 1841.0], [964.0, 1874.0], [967.0, 1969.0], [966.0, 2009.0], [974.0, 1914.0], [973.0, 1947.0], [972.0, 2037.0], [971.0, 2063.0], [970.0, 1902.0], [969.0, 1911.0], [968.0, 1943.0], [983.0, 1979.0], [982.0, 2000.0], [1018.0, 2074.0], [1022.0, 2029.0], [1023.0, 1968.0], [1009.0, 1968.0], [1008.0, 2291.0], [1011.0, 1915.0], [1010.0, 1922.0], [1013.0, 2010.0], [1012.0, 1894.0], [1021.0, 1838.0], [1020.0, 1941.0], [1019.0, 1978.0], [1017.0, 1904.0], [999.0, 1991.0], [998.0, 1996.0], [997.0, 2293.0], [996.0, 6272.0], [995.0, 1866.0], [994.0, 1874.0], [993.0, 1898.0], [992.0, 1920.0], [1007.0, 7226.0], [1006.0, 1932.0], [1005.0, 1956.0], [1004.0, 1981.0], [1003.0, 2018.0], [1002.0, 2126.0], [1001.0, 1858.0], [1000.0, 1917.0], [1015.0, 1948.0], [1014.0, 1991.0], [1080.0, 1880.0], [1076.0, 1897.0], [1084.0, 1890.0], [1056.0, 1964.0], [1058.0, 2007.0], [1060.0, 1918.0], [1062.0, 2018.0], [1064.0, 1952.0], [1066.0, 1882.0], [1068.0, 3321.0], [1070.0, 1967.0], [1086.0, 2288.0], [1082.0, 2030.0], [1078.0, 2123.0], [1074.0, 1939.0], [1072.0, 1882.0], [1038.0, 2095.0], [1036.0, 1879.0], [1034.0, 1985.0], [1032.0, 1963.0], [1030.0, 2028.0], [1028.0, 6796.0], [1026.0, 1858.0], [1024.0, 1946.0], [1054.0, 2104.0], [1052.0, 2177.0], [1050.0, 1883.0], [1048.0, 2007.0], [1046.0, 1953.0], [1044.0, 2067.0], [1042.0, 1822.0], [1040.0, 1918.0], [1144.0, 1869.0], [1140.0, 1849.0], [1148.0, 2030.0], [1120.0, 1933.0], [1122.0, 1916.0], [1124.0, 2958.0], [1126.0, 2071.0], [1128.0, 1964.0], [1130.0, 1837.0], [1132.0, 2256.0], [1134.0, 1975.0], [1150.0, 1935.0], [1146.0, 7434.0], [1142.0, 1970.0], [1138.0, 1877.0], [1136.0, 2137.0], [1088.0, 2177.0], [1090.0, 1851.0], [1092.0, 2339.0], [1094.0, 2206.0], [1096.0, 2136.0], [1098.0, 1957.0], [1100.0, 1869.0], [1102.0, 1927.0], [1118.0, 2186.0], [1116.0, 1907.0], [1114.0, 1967.0], [1112.0, 6639.0], [1110.0, 1871.0], [1108.0, 1979.0], [1106.0, 2048.0], [1104.0, 1874.5], [1208.0, 2031.0], [1204.0, 1936.0], [1212.0, 6724.0], [1184.0, 1949.0], [1186.0, 1885.0], [1188.0, 2004.0], [1190.0, 1999.0], [1192.0, 2105.0], [1194.0, 1980.0], [1196.0, 1824.0], [1198.0, 1949.0], [1214.0, 1952.0], [1210.0, 1978.0], [1206.0, 6733.0], [1202.0, 1999.0], [1200.0, 1846.0], [1152.0, 1857.0], [1154.0, 1943.0], [1156.0, 1871.0], [1158.0, 2121.0], [1160.0, 1967.0], [1162.0, 1898.0], [1164.0, 2022.0], [1166.0, 1921.0], [1182.0, 2096.0], [1180.0, 1974.0], [1178.0, 1839.0], [1176.0, 1968.0], [1174.0, 2013.0], [1172.0, 1886.0], [1170.0, 1983.0], [1168.0, 2043.0], [1272.0, 1962.0], [1268.0, 2040.0], [1276.0, 2378.0], [1248.0, 11882.0], [1250.0, 2071.0], [1252.0, 1926.0], [1254.0, 2097.0], [1258.0, 1908.0], [1260.0, 1925.0], [1262.0, 1878.0], [1278.0, 2175.0], [1274.0, 1907.0], [1270.0, 1931.0], [1266.0, 2486.0], [1264.0, 11469.0], [1216.0, 1879.0], [1218.0, 2005.0], [1220.0, 1894.0], [1222.0, 2024.0], [1224.0, 1952.0], [1226.0, 1885.0], [1228.0, 2011.0], [1230.0, 1905.0], [1246.0, 1849.0], [1244.0, 1944.0], [1242.0, 2162.0], [1240.0, 1918.0], [1238.0, 2061.0], [1236.0, 1981.0], [1234.0, 2075.0], [1232.0, 2220.0], [1336.0, 2045.0], [1332.0, 3107.0], [1340.0, 1835.0], [1312.0, 2821.0], [1314.0, 1981.0], [1316.0, 2072.0], [1318.0, 1972.0], [1320.0, 1915.0], [1322.0, 2134.0], [1324.0, 1913.0], [1326.0, 1857.0], [1342.0, 2301.0], [1338.0, 2095.0], [1334.0, 2216.0], [1330.0, 1918.0], [1328.0, 2073.0], [1280.0, 1899.0], [1282.0, 1978.0], [1284.0, 1919.0], [1286.0, 3556.0], [1288.0, 1926.0], [1290.0, 1854.0], [1292.0, 1988.0], [1294.0, 1913.0], [1310.0, 1919.0], [1308.0, 2079.0], [1306.0, 1849.0], [1304.0, 1899.0], [1302.0, 8094.0], [1300.0, 1926.0], [1298.0, 2767.0], [1296.0, 1875.0], [1400.0, 1977.0], [1396.0, 2080.0], [1404.0, 10038.0], [1376.0, 1853.0], [1378.0, 3418.0], [1380.0, 7529.0], [1382.0, 3009.0], [1384.0, 2349.0], [1386.0, 2333.0], [1390.0, 2019.0], [1406.0, 9841.0], [1402.0, 1889.0], [1398.0, 2009.0], [1394.0, 1843.0], [1392.0, 1984.0], [1344.0, 2003.0], [1346.0, 3296.0], [1348.0, 2382.0], [1350.0, 1927.0], [1352.0, 2066.0], [1354.0, 2057.0], [1356.0, 13338.0], [1358.0, 7142.0], [1374.0, 1924.0], [1372.0, 1981.0], [1370.0, 5828.0], [1368.0, 1900.0], [1366.0, 1988.0], [1364.0, 1847.0], [1362.0, 1876.0], [1360.0, 10814.0], [1464.0, 2179.0], [1460.0, 2119.0], [1468.0, 2276.0], [1440.0, 1859.0], [1442.0, 2057.0], [1444.0, 2048.0], [1446.0, 1914.0], [1448.0, 2294.0], [1450.0, 2199.0], [1452.0, 1998.0], [1454.0, 10879.0], [1470.0, 2220.0], [1466.0, 2078.0], [1462.0, 1993.0], [1458.0, 2128.0], [1456.0, 10559.0], [1408.0, 6782.0], [1410.0, 1996.0], [1412.0, 5535.0], [1414.0, 3173.0], [1416.0, 10463.0], [1418.0, 2486.0], [1420.0, 1840.0], [1422.0, 1930.0], [1438.0, 1919.0], [1436.0, 2436.0], [1434.0, 7165.0], [1432.0, 1870.0], [1430.0, 2065.0], [1428.0, 3400.0], [1426.0, 1984.0], [1424.0, 2053.0], [1476.0, 1869.0], [1480.0, 2023.0], [1500.0, 2453.0], [1472.0, 8019.0], [1474.0, 2100.0], [1478.0, 2139.0], [1482.0, 2146.0], [1484.0, 1886.0], [1486.0, 3811.0], [1498.0, 2187.0], [1496.0, 2271.0], [1494.0, 2101.0], [1492.0, 1996.0], [1490.0, 3677.0], [1488.0, 3026.0], [1085.0, 1867.0], [1087.0, 2198.0], [1057.0, 2019.0], [1059.0, 1859.0], [1061.0, 1885.0], [1063.0, 1982.0], [1065.0, 1918.0], [1067.0, 4172.0], [1069.0, 2007.0], [1071.0, 1952.0], [1083.0, 1941.0], [1081.0, 2192.0], [1079.0, 1976.0], [1077.0, 2167.0], [1073.0, 1973.0], [1039.0, 1966.0], [1037.0, 1932.0], [1035.0, 1952.0], [1033.0, 2000.0], [1031.0, 1999.0], [1029.0, 8911.0], [1027.0, 3460.0], [1025.0, 1877.0], [1055.0, 2223.0], [1053.0, 2136.0], [1051.0, 1823.0], [1049.0, 1990.0], [1047.0, 1928.0], [1045.0, 2007.0], [1043.0, 2308.0], [1041.0, 1872.0], [1149.0, 1978.0], [1151.0, 1926.0], [1121.0, 1924.0], [1123.0, 2974.0], [1125.0, 2111.0], [1127.0, 2155.0], [1129.0, 1855.0], [1131.0, 2123.0], [1133.0, 2035.0], [1135.0, 1937.0], [1147.0, 7349.0], [1145.0, 1827.0], [1143.0, 1923.0], [1141.0, 1971.0], [1139.0, 1878.0], [1137.0, 2118.0], [1119.0, 2041.0], [1089.0, 1926.0], [1091.0, 2268.0], [1093.0, 2206.0], [1095.0, 2147.0], [1097.0, 1980.0], [1099.0, 1937.0], [1101.0, 1961.0], [1117.0, 1854.0], [1115.0, 1936.0], [1113.0, 2019.0], [1111.0, 6771.0], [1109.0, 1917.0], [1107.0, 2024.0], [1105.0, 1884.0], [1213.0, 1961.0], [1215.0, 1899.0], [1185.0, 1940.0], [1187.0, 2189.0], [1189.0, 1999.0], [1191.0, 1897.0], [1193.0, 2064.0], [1195.0, 1898.0], [1197.0, 1957.0], [1199.0, 1916.0], [1211.0, 1898.0], [1209.0, 1973.0], [1207.0, 2050.0], [1205.0, 1913.0], [1203.0, 1929.0], [1201.0, 2053.0], [1183.0, 1963.0], [1153.0, 2080.0], [1155.0, 1887.0], [1157.0, 1850.0], [1159.0, 2021.0], [1161.0, 1915.0], [1163.0, 2081.0], [1165.0, 2175.0], [1167.0, 1917.0], [1181.0, 1894.0], [1179.0, 2142.0], [1177.0, 1885.0], [1175.0, 1976.0], [1173.0, 6763.0], [1171.0, 1943.0], [1169.0, 1860.0], [1277.0, 2345.0], [1279.0, 1985.0], [1249.0, 11811.0], [1251.0, 1991.0], [1253.0, 1904.0], [1257.0, 1957.0], [1255.0, 2015.0], [1259.0, 2067.0], [1261.0, 1902.0], [1263.0, 1853.0], [1275.0, 1880.0], [1273.0, 1951.0], [1271.0, 2269.0], [1269.0, 1995.0], [1267.0, 2369.0], [1265.0, 7871.0], [1247.0, 2183.0], [1217.0, 1840.0], [1219.0, 1923.0], [1221.0, 1888.0], [1223.0, 1960.0], [1225.0, 1941.0], [1227.0, 2125.0], [1229.0, 1902.0], [1231.0, 1827.0], [1245.0, 1910.0], [1243.0, 2024.0], [1241.0, 1924.0], [1239.0, 1971.0], [1237.0, 1971.0], [1235.0, 11682.0], [1233.0, 2177.0], [1341.0, 2513.0], [1343.0, 2016.0], [1313.0, 2094.0], [1315.0, 1888.0], [1317.0, 1828.0], [1319.0, 1929.0], [1321.0, 1888.0], [1323.0, 2048.0], [1325.0, 1906.0], [1327.0, 2096.0], [1339.0, 1889.0], [1337.0, 1926.0], [1335.0, 2502.0], [1333.0, 3316.0], [1331.0, 1904.0], [1329.0, 2055.0], [1311.0, 1903.0], [1281.0, 2071.0], [1283.0, 1948.0], [1285.0, 2465.0], [1287.0, 2336.0], [1289.0, 1878.0], [1291.0, 2010.0], [1293.0, 2030.0], [1295.0, 1902.0], [1309.0, 2040.0], [1307.0, 2116.0], [1305.0, 1896.0], [1303.0, 2108.0], [1301.0, 1865.0], [1299.0, 2285.0], [1297.0, 2955.0], [1405.0, 14584.0], [1407.0, 6687.0], [1377.0, 3484.0], [1379.0, 3272.0], [1381.0, 2942.0], [1383.0, 6682.0], [1385.0, 2567.0], [1389.0, 2433.5], [1387.0, 2458.0], [1391.0, 2267.0], [1403.0, 7134.0], [1401.0, 7118.0], [1399.0, 1997.0], [1397.0, 6687.0], [1395.0, 1956.0], [1393.0, 2029.0], [1375.0, 1891.0], [1345.0, 1944.0], [1347.0, 2605.0], [1349.0, 1967.0], [1351.0, 2169.0], [1353.0, 2063.0], [1355.0, 1917.0], [1357.0, 6772.0], [1359.0, 2082.0], [1373.0, 6698.0], [1369.0, 1852.0], [1367.0, 1960.0], [1365.0, 2033.0], [1363.0, 1850.0], [1361.0, 1972.0], [1469.0, 7789.0], [1471.0, 1964.0], [1441.0, 2115.0], [1443.0, 1871.0], [1445.0, 1951.0], [1447.0, 3947.0], [1449.0, 2264.0], [1451.0, 2087.0], [1453.0, 7965.0], [1455.0, 2370.0], [1467.0, 2285.0], [1465.0, 2157.0], [1463.0, 2938.0], [1461.0, 2080.0], [1459.0, 2039.0], [1457.0, 2181.0], [1439.0, 2402.0], [1409.0, 2018.0], [1411.0, 1929.0], [1413.0, 1850.0], [1415.0, 2365.0], [1417.0, 10027.0], [1419.0, 1875.0], [1421.0, 1974.0], [1423.0, 1835.0], [1437.0, 2678.0], [1435.0, 2611.0], [1433.0, 1847.0], [1431.0, 1973.0], [1429.0, 2895.0], [1427.0, 1967.0], [1425.0, 2026.0], [1477.0, 2218.0], [1497.0, 2226.0], [1473.0, 2168.0], [1475.0, 2037.0], [1479.0, 2086.0], [1481.0, 1893.0], [1483.0, 1999.0], [1485.0, 5191.0], [1487.0, 3450.0], [1499.0, 2505.0], [1495.0, 2774.0], [1493.0, 2166.0], [1491.0, 2181.0], [1489.0, 2912.0], [1.0, 2276.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[750.5153333333327, 2313.156000000004]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1500.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 1226.25, "minX": 1.68423426E12, "maxY": 3742.7833333333333, "series": [{"data": [[1.6842345E12, 2840.1833333333334], [1.68423432E12, 3542.4666666666667], [1.68423438E12, 3464.383333333333], [1.68423426E12, 1614.9666666666667], [1.68423456E12, 1503.8], [1.68423444E12, 3742.7833333333333]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.6842345E12, 2316.25], [1.68423432E12, 2888.5], [1.68423438E12, 2824.9166666666665], [1.68423426E12, 1317.0833333333333], [1.68423456E12, 1226.25], [1.68423444E12, 3052.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68423456E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 2042.4518518518512, "minX": 1.68423426E12, "maxY": 3340.0896551724136, "series": [{"data": [[1.6842345E12, 2106.6352941176465], [1.68423432E12, 2308.389937106918], [1.68423438E12, 2177.3279742765253], [1.68423426E12, 3340.0896551724136], [1.68423456E12, 2042.4518518518512], [1.68423444E12, 2265.7172619047624]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68423456E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 2042.1481481481485, "minX": 1.68423426E12, "maxY": 3339.6482758620696, "series": [{"data": [[1.6842345E12, 2106.1176470588207], [1.68423432E12, 2308.2012578616354], [1.68423438E12, 2176.9871382636634], [1.68423426E12, 3339.6482758620696], [1.68423456E12, 2042.1481481481485], [1.68423444E12, 2265.3601190476206]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68423456E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 64.91372549019604, "minX": 1.68423426E12, "maxY": 84.13103448275862, "series": [{"data": [[1.6842345E12, 64.91372549019604], [1.68423432E12, 69.64465408805027], [1.68423438E12, 70.30225080385861], [1.68423426E12, 84.13103448275862], [1.68423456E12, 65.87407407407407], [1.68423444E12, 77.66964285714286]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68423456E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 1796.0, "minX": 1.68423426E12, "maxY": 14584.0, "series": [{"data": [[1.6842345E12, 6963.0], [1.68423432E12, 11882.0], [1.68423438E12, 8911.0], [1.68423426E12, 14584.0], [1.68423456E12, 6881.0], [1.68423444E12, 9105.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.6842345E12, 2359.8], [1.68423432E12, 2369.9], [1.68423438E12, 2297.0], [1.68423426E12, 7151.2], [1.68423456E12, 2173.8], [1.68423444E12, 2448.4]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.6842345E12, 4883.959999999992], [1.68423432E12, 11641.53], [1.68423438E12, 7019.519999999999], [1.68423426E12, 14010.83999999999], [1.68423456E12, 6755.719999999996], [1.68423444E12, 7340.549999999999]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.6842345E12, 2703.2], [1.68423432E12, 3332.7500000000027], [1.68423438E12, 2726.5999999999995], [1.68423426E12, 10034.7], [1.68423456E12, 2363.1999999999994], [1.68423444E12, 3815.199999999995]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.6842345E12, 1825.0], [1.68423432E12, 1822.0], [1.68423438E12, 1797.0], [1.68423426E12, 1835.0], [1.68423456E12, 1796.0], [1.68423444E12, 1808.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.6842345E12, 1969.0], [1.68423432E12, 1971.5], [1.68423438E12, 1960.0], [1.68423426E12, 2166.0], [1.68423456E12, 1932.0], [1.68423444E12, 1962.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68423456E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 1945.0, "minX": 1.0, "maxY": 3335.0, "series": [{"data": [[2.0, 2186.5], [8.0, 1999.5], [9.0, 1972.5], [10.0, 1948.0], [11.0, 1973.0], [3.0, 2111.0], [12.0, 2005.0], [13.0, 1954.0], [14.0, 1951.5], [15.0, 1964.0], [4.0, 1958.5], [1.0, 3335.0], [16.0, 1979.5], [17.0, 1945.0], [18.0, 1954.0], [5.0, 1961.0], [6.0, 1973.0], [7.0, 1983.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 18.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 1945.0, "minX": 1.0, "maxY": 3334.0, "series": [{"data": [[2.0, 2186.5], [8.0, 1999.5], [9.0, 1972.5], [10.0, 1946.0], [11.0, 1972.0], [3.0, 2111.0], [12.0, 2005.0], [13.0, 1952.0], [14.0, 1951.0], [15.0, 1964.0], [4.0, 1958.5], [1.0, 3334.0], [16.0, 1979.0], [17.0, 1945.0], [18.0, 1954.0], [5.0, 1961.0], [6.0, 1973.0], [7.0, 1983.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 18.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 2.1666666666666665, "minX": 1.68423426E12, "maxY": 5.583333333333333, "series": [{"data": [[1.6842345E12, 4.166666666666667], [1.68423432E12, 5.25], [1.68423438E12, 5.166666666666667], [1.68423426E12, 2.6666666666666665], [1.68423456E12, 2.1666666666666665], [1.68423444E12, 5.583333333333333]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68423456E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 2.25, "minX": 1.68423426E12, "maxY": 5.6, "series": [{"data": [[1.6842345E12, 4.25], [1.68423432E12, 5.3], [1.68423438E12, 5.183333333333334], [1.68423426E12, 2.4166666666666665], [1.68423456E12, 2.25], [1.68423444E12, 5.6]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68423456E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 2.25, "minX": 1.68423426E12, "maxY": 5.6, "series": [{"data": [[1.6842345E12, 4.25], [1.68423432E12, 5.3], [1.68423438E12, 5.183333333333334], [1.68423426E12, 2.4166666666666665], [1.68423456E12, 2.25], [1.68423444E12, 5.6]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68423456E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 2.25, "minX": 1.68423426E12, "maxY": 5.6, "series": [{"data": [[1.6842345E12, 4.25], [1.68423432E12, 5.3], [1.68423438E12, 5.183333333333334], [1.68423426E12, 2.4166666666666665], [1.68423456E12, 2.25], [1.68423444E12, 5.6]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68423456E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

