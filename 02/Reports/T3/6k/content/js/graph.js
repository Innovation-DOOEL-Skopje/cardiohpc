/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 39.0, "minX": 0.0, "maxY": 12556.0, "series": [{"data": [[0.0, 39.0], [0.1, 1096.0], [0.2, 1097.0], [0.3, 1097.0], [0.4, 1098.0], [0.5, 1098.0], [0.6, 1098.0], [0.7, 1098.0], [0.8, 1099.0], [0.9, 1099.0], [1.0, 1099.0], [1.1, 1099.0], [1.2, 1099.0], [1.3, 1099.0], [1.4, 1099.0], [1.5, 1099.0], [1.6, 1100.0], [1.7, 1100.0], [1.8, 1100.0], [1.9, 1100.0], [2.0, 1100.0], [2.1, 1100.0], [2.2, 1100.0], [2.3, 1100.0], [2.4, 1100.0], [2.5, 1100.0], [2.6, 1100.0], [2.7, 1100.0], [2.8, 1100.0], [2.9, 1101.0], [3.0, 1101.0], [3.1, 1101.0], [3.2, 1101.0], [3.3, 1101.0], [3.4, 1101.0], [3.5, 1101.0], [3.6, 1101.0], [3.7, 1101.0], [3.8, 1101.0], [3.9, 1101.0], [4.0, 1101.0], [4.1, 1101.0], [4.2, 1101.0], [4.3, 1101.0], [4.4, 1101.0], [4.5, 1101.0], [4.6, 1101.0], [4.7, 1102.0], [4.8, 1102.0], [4.9, 1102.0], [5.0, 1102.0], [5.1, 1102.0], [5.2, 1102.0], [5.3, 1102.0], [5.4, 1102.0], [5.5, 1102.0], [5.6, 1102.0], [5.7, 1102.0], [5.8, 1102.0], [5.9, 1102.0], [6.0, 1102.0], [6.1, 1102.0], [6.2, 1102.0], [6.3, 1102.0], [6.4, 1102.0], [6.5, 1102.0], [6.6, 1102.0], [6.7, 1102.0], [6.8, 1102.0], [6.9, 1102.0], [7.0, 1102.0], [7.1, 1103.0], [7.2, 1103.0], [7.3, 1103.0], [7.4, 1103.0], [7.5, 1103.0], [7.6, 1103.0], [7.7, 1103.0], [7.8, 1103.0], [7.9, 1103.0], [8.0, 1103.0], [8.1, 1103.0], [8.2, 1103.0], [8.3, 1103.0], [8.4, 1103.0], [8.5, 1103.0], [8.6, 1103.0], [8.7, 1103.0], [8.8, 1103.0], [8.9, 1103.0], [9.0, 1103.0], [9.1, 1103.0], [9.2, 1103.0], [9.3, 1103.0], [9.4, 1103.0], [9.5, 1103.0], [9.6, 1103.0], [9.7, 1103.0], [9.8, 1103.0], [9.9, 1103.0], [10.0, 1103.0], [10.1, 1103.0], [10.2, 1104.0], [10.3, 1104.0], [10.4, 1104.0], [10.5, 1104.0], [10.6, 1104.0], [10.7, 1104.0], [10.8, 1104.0], [10.9, 1104.0], [11.0, 1104.0], [11.1, 1104.0], [11.2, 1104.0], [11.3, 1104.0], [11.4, 1104.0], [11.5, 1104.0], [11.6, 1104.0], [11.7, 1104.0], [11.8, 1104.0], [11.9, 1104.0], [12.0, 1104.0], [12.1, 1104.0], [12.2, 1104.0], [12.3, 1104.0], [12.4, 1104.0], [12.5, 1104.0], [12.6, 1104.0], [12.7, 1104.0], [12.8, 1104.0], [12.9, 1104.0], [13.0, 1104.0], [13.1, 1104.0], [13.2, 1104.0], [13.3, 1104.0], [13.4, 1104.0], [13.5, 1104.0], [13.6, 1104.0], [13.7, 1104.0], [13.8, 1104.0], [13.9, 1105.0], [14.0, 1105.0], [14.1, 1105.0], [14.2, 1105.0], [14.3, 1105.0], [14.4, 1105.0], [14.5, 1105.0], [14.6, 1105.0], [14.7, 1105.0], [14.8, 1105.0], [14.9, 1105.0], [15.0, 1105.0], [15.1, 1105.0], [15.2, 1105.0], [15.3, 1105.0], [15.4, 1105.0], [15.5, 1105.0], [15.6, 1105.0], [15.7, 1105.0], [15.8, 1105.0], [15.9, 1105.0], [16.0, 1105.0], [16.1, 1105.0], [16.2, 1105.0], [16.3, 1105.0], [16.4, 1105.0], [16.5, 1105.0], [16.6, 1105.0], [16.7, 1105.0], [16.8, 1105.0], [16.9, 1105.0], [17.0, 1105.0], [17.1, 1105.0], [17.2, 1105.0], [17.3, 1105.0], [17.4, 1105.0], [17.5, 1105.0], [17.6, 1105.0], [17.7, 1105.0], [17.8, 1105.0], [17.9, 1105.0], [18.0, 1105.0], [18.1, 1106.0], [18.2, 1106.0], [18.3, 1106.0], [18.4, 1106.0], [18.5, 1106.0], [18.6, 1106.0], [18.7, 1106.0], [18.8, 1106.0], [18.9, 1106.0], [19.0, 1106.0], [19.1, 1106.0], [19.2, 1106.0], [19.3, 1106.0], [19.4, 1106.0], [19.5, 1106.0], [19.6, 1106.0], [19.7, 1106.0], [19.8, 1106.0], [19.9, 1106.0], [20.0, 1106.0], [20.1, 1106.0], [20.2, 1106.0], [20.3, 1106.0], [20.4, 1106.0], [20.5, 1106.0], [20.6, 1106.0], [20.7, 1106.0], [20.8, 1106.0], [20.9, 1106.0], [21.0, 1106.0], [21.1, 1106.0], [21.2, 1106.0], [21.3, 1106.0], [21.4, 1106.0], [21.5, 1106.0], [21.6, 1106.0], [21.7, 1106.0], [21.8, 1106.0], [21.9, 1106.0], [22.0, 1106.0], [22.1, 1106.0], [22.2, 1106.0], [22.3, 1106.0], [22.4, 1107.0], [22.5, 1107.0], [22.6, 1107.0], [22.7, 1107.0], [22.8, 1107.0], [22.9, 1107.0], [23.0, 1107.0], [23.1, 1107.0], [23.2, 1107.0], [23.3, 1107.0], [23.4, 1107.0], [23.5, 1107.0], [23.6, 1107.0], [23.7, 1107.0], [23.8, 1107.0], [23.9, 1107.0], [24.0, 1107.0], [24.1, 1107.0], [24.2, 1107.0], [24.3, 1107.0], [24.4, 1107.0], [24.5, 1107.0], [24.6, 1107.0], [24.7, 1107.0], [24.8, 1107.0], [24.9, 1107.0], [25.0, 1107.0], [25.1, 1107.0], [25.2, 1107.0], [25.3, 1107.0], [25.4, 1107.0], [25.5, 1107.0], [25.6, 1107.0], [25.7, 1107.0], [25.8, 1107.0], [25.9, 1107.0], [26.0, 1107.0], [26.1, 1107.0], [26.2, 1107.0], [26.3, 1107.0], [26.4, 1107.0], [26.5, 1107.0], [26.6, 1107.0], [26.7, 1107.0], [26.8, 1108.0], [26.9, 1108.0], [27.0, 1108.0], [27.1, 1108.0], [27.2, 1108.0], [27.3, 1108.0], [27.4, 1108.0], [27.5, 1108.0], [27.6, 1108.0], [27.7, 1108.0], [27.8, 1108.0], [27.9, 1108.0], [28.0, 1108.0], [28.1, 1108.0], [28.2, 1108.0], [28.3, 1108.0], [28.4, 1108.0], [28.5, 1108.0], [28.6, 1108.0], [28.7, 1108.0], [28.8, 1108.0], [28.9, 1108.0], [29.0, 1108.0], [29.1, 1108.0], [29.2, 1108.0], [29.3, 1108.0], [29.4, 1108.0], [29.5, 1108.0], [29.6, 1108.0], [29.7, 1108.0], [29.8, 1108.0], [29.9, 1108.0], [30.0, 1108.0], [30.1, 1108.0], [30.2, 1108.0], [30.3, 1108.0], [30.4, 1108.0], [30.5, 1108.0], [30.6, 1108.0], [30.7, 1108.0], [30.8, 1108.0], [30.9, 1109.0], [31.0, 1109.0], [31.1, 1109.0], [31.2, 1109.0], [31.3, 1109.0], [31.4, 1109.0], [31.5, 1109.0], [31.6, 1109.0], [31.7, 1109.0], [31.8, 1109.0], [31.9, 1109.0], [32.0, 1109.0], [32.1, 1109.0], [32.2, 1109.0], [32.3, 1109.0], [32.4, 1109.0], [32.5, 1109.0], [32.6, 1109.0], [32.7, 1109.0], [32.8, 1109.0], [32.9, 1109.0], [33.0, 1109.0], [33.1, 1109.0], [33.2, 1109.0], [33.3, 1109.0], [33.4, 1109.0], [33.5, 1109.0], [33.6, 1109.0], [33.7, 1109.0], [33.8, 1109.0], [33.9, 1109.0], [34.0, 1109.0], [34.1, 1109.0], [34.2, 1109.0], [34.3, 1109.0], [34.4, 1109.0], [34.5, 1109.0], [34.6, 1109.0], [34.7, 1109.0], [34.8, 1110.0], [34.9, 1110.0], [35.0, 1110.0], [35.1, 1110.0], [35.2, 1110.0], [35.3, 1110.0], [35.4, 1110.0], [35.5, 1110.0], [35.6, 1110.0], [35.7, 1110.0], [35.8, 1110.0], [35.9, 1110.0], [36.0, 1110.0], [36.1, 1110.0], [36.2, 1110.0], [36.3, 1110.0], [36.4, 1110.0], [36.5, 1110.0], [36.6, 1110.0], [36.7, 1110.0], [36.8, 1110.0], [36.9, 1110.0], [37.0, 1110.0], [37.1, 1110.0], [37.2, 1110.0], [37.3, 1110.0], [37.4, 1110.0], [37.5, 1110.0], [37.6, 1110.0], [37.7, 1110.0], [37.8, 1110.0], [37.9, 1110.0], [38.0, 1110.0], [38.1, 1110.0], [38.2, 1110.0], [38.3, 1110.0], [38.4, 1111.0], [38.5, 1111.0], [38.6, 1111.0], [38.7, 1111.0], [38.8, 1111.0], [38.9, 1111.0], [39.0, 1111.0], [39.1, 1111.0], [39.2, 1111.0], [39.3, 1111.0], [39.4, 1111.0], [39.5, 1111.0], [39.6, 1111.0], [39.7, 1111.0], [39.8, 1111.0], [39.9, 1111.0], [40.0, 1111.0], [40.1, 1111.0], [40.2, 1111.0], [40.3, 1111.0], [40.4, 1111.0], [40.5, 1111.0], [40.6, 1111.0], [40.7, 1111.0], [40.8, 1111.0], [40.9, 1111.0], [41.0, 1111.0], [41.1, 1111.0], [41.2, 1111.0], [41.3, 1111.0], [41.4, 1111.0], [41.5, 1111.0], [41.6, 1112.0], [41.7, 1112.0], [41.8, 1112.0], [41.9, 1112.0], [42.0, 1112.0], [42.1, 1112.0], [42.2, 1112.0], [42.3, 1112.0], [42.4, 1112.0], [42.5, 1112.0], [42.6, 1112.0], [42.7, 1112.0], [42.8, 1112.0], [42.9, 1112.0], [43.0, 1112.0], [43.1, 1112.0], [43.2, 1112.0], [43.3, 1112.0], [43.4, 1112.0], [43.5, 1112.0], [43.6, 1112.0], [43.7, 1112.0], [43.8, 1112.0], [43.9, 1112.0], [44.0, 1112.0], [44.1, 1112.0], [44.2, 1112.0], [44.3, 1112.0], [44.4, 1112.0], [44.5, 1112.0], [44.6, 1113.0], [44.7, 1113.0], [44.8, 1113.0], [44.9, 1113.0], [45.0, 1113.0], [45.1, 1113.0], [45.2, 1113.0], [45.3, 1113.0], [45.4, 1113.0], [45.5, 1113.0], [45.6, 1113.0], [45.7, 1113.0], [45.8, 1113.0], [45.9, 1113.0], [46.0, 1113.0], [46.1, 1113.0], [46.2, 1113.0], [46.3, 1113.0], [46.4, 1113.0], [46.5, 1113.0], [46.6, 1113.0], [46.7, 1113.0], [46.8, 1113.0], [46.9, 1113.0], [47.0, 1113.0], [47.1, 1113.0], [47.2, 1114.0], [47.3, 1114.0], [47.4, 1114.0], [47.5, 1114.0], [47.6, 1114.0], [47.7, 1114.0], [47.8, 1114.0], [47.9, 1114.0], [48.0, 1114.0], [48.1, 1114.0], [48.2, 1114.0], [48.3, 1114.0], [48.4, 1114.0], [48.5, 1114.0], [48.6, 1114.0], [48.7, 1114.0], [48.8, 1114.0], [48.9, 1114.0], [49.0, 1114.0], [49.1, 1114.0], [49.2, 1114.0], [49.3, 1114.0], [49.4, 1114.0], [49.5, 1115.0], [49.6, 1115.0], [49.7, 1115.0], [49.8, 1115.0], [49.9, 1115.0], [50.0, 1115.0], [50.1, 1115.0], [50.2, 1115.0], [50.3, 1115.0], [50.4, 1115.0], [50.5, 1115.0], [50.6, 1115.0], [50.7, 1115.0], [50.8, 1115.0], [50.9, 1115.0], [51.0, 1115.0], [51.1, 1115.0], [51.2, 1115.0], [51.3, 1115.0], [51.4, 1115.0], [51.5, 1115.0], [51.6, 1116.0], [51.7, 1116.0], [51.8, 1116.0], [51.9, 1116.0], [52.0, 1116.0], [52.1, 1116.0], [52.2, 1116.0], [52.3, 1116.0], [52.4, 1116.0], [52.5, 1116.0], [52.6, 1116.0], [52.7, 1116.0], [52.8, 1116.0], [52.9, 1116.0], [53.0, 1116.0], [53.1, 1116.0], [53.2, 1116.0], [53.3, 1116.0], [53.4, 1117.0], [53.5, 1117.0], [53.6, 1117.0], [53.7, 1117.0], [53.8, 1117.0], [53.9, 1117.0], [54.0, 1117.0], [54.1, 1117.0], [54.2, 1117.0], [54.3, 1117.0], [54.4, 1117.0], [54.5, 1117.0], [54.6, 1117.0], [54.7, 1117.0], [54.8, 1117.0], [54.9, 1118.0], [55.0, 1118.0], [55.1, 1118.0], [55.2, 1118.0], [55.3, 1118.0], [55.4, 1118.0], [55.5, 1118.0], [55.6, 1118.0], [55.7, 1118.0], [55.8, 1118.0], [55.9, 1118.0], [56.0, 1118.0], [56.1, 1118.0], [56.2, 1118.0], [56.3, 1119.0], [56.4, 1119.0], [56.5, 1119.0], [56.6, 1119.0], [56.7, 1119.0], [56.8, 1119.0], [56.9, 1119.0], [57.0, 1119.0], [57.1, 1119.0], [57.2, 1119.0], [57.3, 1119.0], [57.4, 1119.0], [57.5, 1120.0], [57.6, 1120.0], [57.7, 1120.0], [57.8, 1120.0], [57.9, 1120.0], [58.0, 1120.0], [58.1, 1120.0], [58.2, 1120.0], [58.3, 1120.0], [58.4, 1120.0], [58.5, 1121.0], [58.6, 1121.0], [58.7, 1121.0], [58.8, 1121.0], [58.9, 1121.0], [59.0, 1121.0], [59.1, 1121.0], [59.2, 1121.0], [59.3, 1121.0], [59.4, 1122.0], [59.5, 1122.0], [59.6, 1122.0], [59.7, 1122.0], [59.8, 1122.0], [59.9, 1122.0], [60.0, 1122.0], [60.1, 1122.0], [60.2, 1123.0], [60.3, 1123.0], [60.4, 1123.0], [60.5, 1123.0], [60.6, 1123.0], [60.7, 1123.0], [60.8, 1123.0], [60.9, 1124.0], [61.0, 1124.0], [61.1, 1124.0], [61.2, 1124.0], [61.3, 1124.0], [61.4, 1124.0], [61.5, 1125.0], [61.6, 1125.0], [61.7, 1125.0], [61.8, 1125.0], [61.9, 1125.0], [62.0, 1125.0], [62.1, 1126.0], [62.2, 1126.0], [62.3, 1126.0], [62.4, 1126.0], [62.5, 1126.0], [62.6, 1127.0], [62.7, 1127.0], [62.8, 1127.0], [62.9, 1127.0], [63.0, 1128.0], [63.1, 1128.0], [63.2, 1128.0], [63.3, 1128.0], [63.4, 1129.0], [63.5, 1129.0], [63.6, 1129.0], [63.7, 1129.0], [63.8, 1130.0], [63.9, 1130.0], [64.0, 1130.0], [64.1, 1130.0], [64.2, 1131.0], [64.3, 1131.0], [64.4, 1131.0], [64.5, 1132.0], [64.6, 1132.0], [64.7, 1132.0], [64.8, 1133.0], [64.9, 1133.0], [65.0, 1134.0], [65.1, 1134.0], [65.2, 1134.0], [65.3, 1135.0], [65.4, 1135.0], [65.5, 1136.0], [65.6, 1136.0], [65.7, 1137.0], [65.8, 1137.0], [65.9, 1138.0], [66.0, 1138.0], [66.1, 1139.0], [66.2, 1140.0], [66.3, 1140.0], [66.4, 1141.0], [66.5, 1141.0], [66.6, 1142.0], [66.7, 1143.0], [66.8, 1143.0], [66.9, 1144.0], [67.0, 1145.0], [67.1, 1146.0], [67.2, 1146.0], [67.3, 1147.0], [67.4, 1148.0], [67.5, 1149.0], [67.6, 1149.0], [67.7, 1150.0], [67.8, 1151.0], [67.9, 1152.0], [68.0, 1153.0], [68.1, 1154.0], [68.2, 1155.0], [68.3, 1156.0], [68.4, 1157.0], [68.5, 1158.0], [68.6, 1159.0], [68.7, 1160.0], [68.8, 1161.0], [68.9, 1162.0], [69.0, 1163.0], [69.1, 1165.0], [69.2, 1166.0], [69.3, 1167.0], [69.4, 1169.0], [69.5, 1170.0], [69.6, 1171.0], [69.7, 1173.0], [69.8, 1174.0], [69.9, 1175.0], [70.0, 1177.0], [70.1, 1178.0], [70.2, 1180.0], [70.3, 1181.0], [70.4, 1183.0], [70.5, 1185.0], [70.6, 1188.0], [70.7, 1190.0], [70.8, 1192.0], [70.9, 1194.0], [71.0, 1196.0], [71.1, 1198.0], [71.2, 1199.0], [71.3, 1201.0], [71.4, 1202.0], [71.5, 1203.0], [71.6, 1205.0], [71.7, 1206.0], [71.8, 1207.0], [71.9, 1209.0], [72.0, 1210.0], [72.1, 1212.0], [72.2, 1214.0], [72.3, 1215.0], [72.4, 1217.0], [72.5, 1218.0], [72.6, 1221.0], [72.7, 1222.0], [72.8, 1224.0], [72.9, 1225.0], [73.0, 1227.0], [73.1, 1228.0], [73.2, 1230.0], [73.3, 1232.0], [73.4, 1234.0], [73.5, 1235.0], [73.6, 1237.0], [73.7, 1239.0], [73.8, 1241.0], [73.9, 1242.0], [74.0, 1244.0], [74.1, 1246.0], [74.2, 1247.0], [74.3, 1250.0], [74.4, 1251.0], [74.5, 1253.0], [74.6, 1255.0], [74.7, 1256.0], [74.8, 1258.0], [74.9, 1260.0], [75.0, 1262.0], [75.1, 1264.0], [75.2, 1266.0], [75.3, 1267.0], [75.4, 1269.0], [75.5, 1271.0], [75.6, 1272.0], [75.7, 1274.0], [75.8, 1276.0], [75.9, 1277.0], [76.0, 1279.0], [76.1, 1280.0], [76.2, 1282.0], [76.3, 1283.0], [76.4, 1285.0], [76.5, 1286.0], [76.6, 1288.0], [76.7, 1289.0], [76.8, 1291.0], [76.9, 1293.0], [77.0, 1294.0], [77.1, 1295.0], [77.2, 1297.0], [77.3, 1298.0], [77.4, 1299.0], [77.5, 1300.0], [77.6, 1302.0], [77.7, 1303.0], [77.8, 1304.0], [77.9, 1305.0], [78.0, 1306.0], [78.1, 1307.0], [78.2, 1308.0], [78.3, 1310.0], [78.4, 1311.0], [78.5, 1312.0], [78.6, 1313.0], [78.7, 1315.0], [78.8, 1316.0], [78.9, 1317.0], [79.0, 1318.0], [79.1, 1319.0], [79.2, 1320.0], [79.3, 1322.0], [79.4, 1323.0], [79.5, 1325.0], [79.6, 1326.0], [79.7, 1328.0], [79.8, 1329.0], [79.9, 1331.0], [80.0, 1333.0], [80.1, 1335.0], [80.2, 1336.0], [80.3, 1338.0], [80.4, 1340.0], [80.5, 1342.0], [80.6, 1344.0], [80.7, 1345.0], [80.8, 1347.0], [80.9, 1349.0], [81.0, 1350.0], [81.1, 1352.0], [81.2, 1354.0], [81.3, 1355.0], [81.4, 1357.0], [81.5, 1358.0], [81.6, 1360.0], [81.7, 1361.0], [81.8, 1363.0], [81.9, 1364.0], [82.0, 1366.0], [82.1, 1367.0], [82.2, 1368.0], [82.3, 1370.0], [82.4, 1371.0], [82.5, 1373.0], [82.6, 1374.0], [82.7, 1375.0], [82.8, 1377.0], [82.9, 1378.0], [83.0, 1380.0], [83.1, 1381.0], [83.2, 1383.0], [83.3, 1385.0], [83.4, 1386.0], [83.5, 1387.0], [83.6, 1389.0], [83.7, 1391.0], [83.8, 1392.0], [83.9, 1394.0], [84.0, 1395.0], [84.1, 1397.0], [84.2, 1399.0], [84.3, 1401.0], [84.4, 1402.0], [84.5, 1404.0], [84.6, 1405.0], [84.7, 1407.0], [84.8, 1409.0], [84.9, 1410.0], [85.0, 1411.0], [85.1, 1413.0], [85.2, 1416.0], [85.3, 1418.0], [85.4, 1421.0], [85.5, 1424.0], [85.6, 1426.0], [85.7, 1428.0], [85.8, 1430.0], [85.9, 1433.0], [86.0, 1435.0], [86.1, 1438.0], [86.2, 1439.0], [86.3, 1441.0], [86.4, 1444.0], [86.5, 1446.0], [86.6, 1449.0], [86.7, 1451.0], [86.8, 1453.0], [86.9, 1456.0], [87.0, 1458.0], [87.1, 1460.0], [87.2, 1462.0], [87.3, 1464.0], [87.4, 1467.0], [87.5, 1469.0], [87.6, 1472.0], [87.7, 1475.0], [87.8, 1478.0], [87.9, 1480.0], [88.0, 1482.0], [88.1, 1484.0], [88.2, 1486.0], [88.3, 1488.0], [88.4, 1490.0], [88.5, 1492.0], [88.6, 1495.0], [88.7, 1498.0], [88.8, 1500.0], [88.9, 1501.0], [89.0, 1503.0], [89.1, 1504.0], [89.2, 1506.0], [89.3, 1508.0], [89.4, 1511.0], [89.5, 1515.0], [89.6, 1519.0], [89.7, 1524.0], [89.8, 1529.0], [89.9, 1533.0], [90.0, 1537.0], [90.1, 1541.0], [90.2, 1545.0], [90.3, 1551.0], [90.4, 1557.0], [90.5, 1564.0], [90.6, 1571.0], [90.7, 1578.0], [90.8, 1585.0], [90.9, 1593.0], [91.0, 1600.0], [91.1, 1606.0], [91.2, 1613.0], [91.3, 1619.0], [91.4, 1625.0], [91.5, 1631.0], [91.6, 1640.0], [91.7, 1646.0], [91.8, 1653.0], [91.9, 1659.0], [92.0, 1662.0], [92.1, 1665.0], [92.2, 1667.0], [92.3, 1670.0], [92.4, 1676.0], [92.5, 1682.0], [92.6, 1687.0], [92.7, 1692.0], [92.8, 1698.0], [92.9, 1704.0], [93.0, 1710.0], [93.1, 1715.0], [93.2, 1721.0], [93.3, 1726.0], [93.4, 1732.0], [93.5, 1737.0], [93.6, 1743.0], [93.7, 1750.0], [93.8, 1756.0], [93.9, 1763.0], [94.0, 1769.0], [94.1, 1777.0], [94.2, 1785.0], [94.3, 1798.0], [94.4, 1809.0], [94.5, 1823.0], [94.6, 1832.0], [94.7, 1839.0], [94.8, 1848.0], [94.9, 1856.0], [95.0, 1865.0], [95.1, 1875.0], [95.2, 1885.0], [95.3, 1893.0], [95.4, 1904.0], [95.5, 1916.0], [95.6, 1926.0], [95.7, 1943.0], [95.8, 1962.0], [95.9, 1973.0], [96.0, 1984.0], [96.1, 1997.0], [96.2, 2010.0], [96.3, 2028.0], [96.4, 2047.0], [96.5, 2062.0], [96.6, 2077.0], [96.7, 2093.0], [96.8, 2111.0], [96.9, 2127.0], [97.0, 2157.0], [97.1, 2197.0], [97.2, 2248.0], [97.3, 2292.0], [97.4, 2346.0], [97.5, 2398.0], [97.6, 2480.0], [97.7, 2552.0], [97.8, 2634.0], [97.9, 2729.0], [98.0, 2837.0], [98.1, 2928.0], [98.2, 3141.0], [98.3, 3356.0], [98.4, 4149.0], [98.5, 4945.0], [98.6, 4989.0], [98.7, 5024.0], [98.8, 5055.0], [98.9, 5082.0], [99.0, 5121.0], [99.1, 5169.0], [99.2, 5245.0], [99.3, 5476.0], [99.4, 5682.0], [99.5, 5781.0], [99.6, 5878.0], [99.7, 6056.0], [99.8, 6787.0], [99.9, 7521.0], [100.0, 12556.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 41946.0, "series": [{"data": [[0.0, 5.0], [1000.0, 917.0], [1100.0, 41946.0], [1200.0, 3732.0], [1300.0, 4089.0], [1400.0, 2751.0], [1500.0, 1326.0], [1600.0, 1106.0], [1700.0, 894.0], [1800.0, 627.0], [1900.0, 458.0], [2000.0, 373.0], [2100.0, 226.0], [2200.0, 124.0], [2300.0, 114.0], [2400.0, 74.0], [2500.0, 81.0], [2600.0, 67.0], [2700.0, 63.0], [2800.0, 57.0], [2900.0, 45.0], [3000.0, 15.0], [3100.0, 33.0], [3200.0, 33.0], [3300.0, 17.0], [3400.0, 8.0], [3500.0, 11.0], [3700.0, 8.0], [3600.0, 3.0], [3800.0, 9.0], [3900.0, 5.0], [4000.0, 8.0], [4300.0, 2.0], [4100.0, 2.0], [4200.0, 1.0], [4500.0, 1.0], [4600.0, 1.0], [4800.0, 21.0], [4700.0, 10.0], [4900.0, 99.0], [5000.0, 191.0], [5100.0, 126.0], [5200.0, 44.0], [5300.0, 30.0], [5500.0, 31.0], [5600.0, 38.0], [5400.0, 17.0], [5700.0, 66.0], [5800.0, 56.0], [6000.0, 23.0], [6100.0, 16.0], [5900.0, 36.0], [6200.0, 10.0], [6300.0, 7.0], [6400.0, 7.0], [6500.0, 3.0], [6600.0, 2.0], [6700.0, 5.0], [6900.0, 8.0], [6800.0, 1.0], [7000.0, 5.0], [7100.0, 10.0], [7400.0, 11.0], [7300.0, 11.0], [7200.0, 11.0], [7500.0, 18.0], [7600.0, 13.0], [7700.0, 8.0], [7800.0, 8.0], [7900.0, 5.0], [8100.0, 3.0], [8700.0, 1.0], [8500.0, 1.0], [8400.0, 2.0], [8200.0, 1.0], [8600.0, 1.0], [11900.0, 1.0], [12500.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 12500.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 5.0, "minX": 1.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 53477.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 53477.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 6708.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 5.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 2561.153190238164, "minX": 1.68421026E12, "maxY": 3000.0, "series": [{"data": [[1.68421044E12, 3000.0], [1.68421056E12, 2561.153190238164], [1.68421026E12, 3000.0], [1.68421038E12, 3000.0], [1.68421032E12, 3000.0], [1.6842105E12, 3000.0]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68421056E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 39.0, "minX": 1.0, "maxY": 11946.0, "series": [{"data": [[2.0, 11946.0], [3.0, 4989.0], [4.0, 2092.0], [5.0, 1931.0], [6.0, 2791.0], [7.0, 1235.0], [8.0, 1244.0], [9.0, 1186.0], [10.0, 1181.0], [11.0, 1239.0], [14.0, 1237.0], [15.0, 1232.0], [16.0, 1177.0], [18.0, 1201.0], [19.0, 1222.0], [20.0, 1171.0], [21.0, 1169.0], [22.0, 1150.0], [23.0, 1212.0], [24.0, 1142.0], [25.0, 1124.0], [26.0, 1126.0], [27.0, 1127.0], [29.0, 1111.0], [31.0, 1109.5], [33.0, 1104.0], [32.0, 1114.0], [35.0, 1142.0], [34.0, 1104.0], [37.0, 1121.0], [36.0, 1098.0], [38.0, 1106.0], [40.0, 1108.0], [43.0, 1105.0], [45.0, 1109.0], [44.0, 1106.0], [47.0, 1112.0], [49.0, 1106.6], [51.0, 1105.0], [50.0, 1102.0], [53.0, 1105.0], [52.0, 1102.0], [55.0, 1162.0], [54.0, 1210.0], [57.0, 1162.0], [56.0, 1229.0], [59.0, 1168.0], [58.0, 1160.0], [61.0, 1155.0], [60.0, 1160.0], [63.0, 1139.0], [62.0, 1141.0], [67.0, 1114.0], [66.0, 1135.0], [65.0, 1116.0], [64.0, 1120.0], [71.0, 1114.0], [70.0, 1135.0], [69.0, 1125.0], [68.0, 1113.0], [75.0, 1108.0], [74.0, 1105.0], [73.0, 1111.5], [79.0, 1106.0], [78.0, 1118.0], [77.0, 1107.5], [83.0, 1101.0], [82.0, 1153.0], [81.0, 1103.5], [86.0, 1110.0], [91.0, 1103.0], [89.0, 1099.0], [88.0, 1110.75], [92.0, 1101.0], [98.0, 1106.0], [96.0, 1112.25], [103.0, 1109.0], [102.0, 1102.0], [100.0, 1122.6666666666667], [107.0, 1104.0], [106.0, 1110.0], [111.0, 1105.5], [109.0, 1104.5], [115.0, 1105.0], [114.0, 1102.0], [113.0, 1106.0], [119.0, 1138.0], [118.0, 1108.0], [122.0, 1105.0], [121.0, 1100.0], [120.0, 1104.0], [126.0, 1108.0], [124.0, 1105.5], [135.0, 1094.0], [134.0, 1137.0], [133.0, 1097.0], [132.0, 1100.6666666666667], [129.0, 1099.0], [128.0, 1115.0], [143.0, 1119.0], [141.0, 1131.0], [140.0, 1118.0], [139.0, 1123.0], [137.0, 1118.0], [136.0, 1111.0], [149.0, 1114.5], [147.0, 1110.0], [146.0, 1106.0], [145.0, 1130.0], [144.0, 1108.0], [159.0, 1102.0], [157.0, 1108.0], [152.0, 1106.6666666666667], [166.0, 1113.0], [165.0, 1115.0], [163.0, 1098.0], [162.0, 1109.0], [161.0, 1104.6], [160.0, 1107.0], [175.0, 1104.0], [174.0, 1103.0], [173.0, 1099.0], [172.0, 1110.0], [171.0, 1102.0], [168.0, 1102.0], [183.0, 1094.0], [181.0, 1104.0], [179.0, 1101.0], [178.0, 1107.5], [177.0, 1111.0], [191.0, 1100.0], [190.0, 1100.0], [189.0, 1104.0], [188.0, 1102.5], [186.0, 1103.3333333333333], [185.0, 1102.0], [199.0, 1338.0], [198.0, 1622.0], [197.0, 5056.0], [196.0, 1770.0], [195.0, 1775.0], [194.0, 7932.0], [193.0, 1098.0], [192.0, 1098.0], [207.0, 1472.0], [205.0, 1334.0], [204.0, 1622.0], [203.0, 1334.0], [202.0, 1336.0], [201.0, 1335.0], [200.0, 1337.0], [214.0, 1315.5], [212.0, 1326.0], [211.0, 1302.0], [210.0, 1328.0], [209.0, 1329.0], [208.0, 1331.0], [222.0, 1587.0], [221.0, 1586.0], [220.0, 1590.0], [219.0, 1299.0], [218.0, 1318.0], [216.0, 1606.0], [231.0, 1427.75], [229.0, 1520.2], [228.0, 1436.5], [233.0, 1573.0], [247.0, 1567.0], [246.0, 1268.0], [243.0, 2281.5], [242.0, 1418.0], [255.0, 1267.5], [252.0, 1411.5], [250.0, 1464.3333333333333], [249.0, 1412.5], [259.0, 1561.0], [271.0, 1553.0], [269.0, 1556.3333333333333], [267.0, 1456.6666666666667], [264.0, 1417.5], [262.0, 1408.0], [261.0, 1261.0], [258.0, 1559.0], [257.0, 1417.0], [285.0, 1306.0], [286.0, 1281.0], [284.0, 1244.0], [283.0, 1235.0], [282.0, 1544.5], [281.0, 1431.5], [279.0, 1447.0], [277.0, 1404.5], [275.0, 1264.3333333333333], [273.0, 1254.0], [272.0, 1553.0], [302.0, 1148.0], [303.0, 1159.0], [301.0, 1459.0], [300.0, 1463.0], [299.0, 1462.0], [298.0, 1460.0], [297.0, 1468.0], [296.0, 1469.0], [295.0, 1476.0], [289.0, 1233.0], [288.0, 1386.0], [291.0, 4988.0], [290.0, 1223.0], [294.0, 1485.0], [293.0, 1196.0], [292.0, 1194.0], [319.0, 1108.3333333333333], [316.0, 1109.5], [314.0, 1126.0], [311.0, 1118.0], [309.0, 1112.0], [306.0, 1118.0], [305.0, 1113.0], [304.0, 1125.0], [334.0, 1113.0], [335.0, 1101.0], [332.0, 1135.0], [321.0, 1117.0], [331.0, 1112.0], [330.0, 1111.5], [328.0, 1103.0], [327.0, 1113.0], [326.0, 1108.0], [324.0, 1115.75], [348.0, 1104.0], [346.0, 1101.0], [345.0, 1102.0], [344.0, 1117.0], [343.0, 1103.0], [340.0, 1121.5], [338.0, 1103.0], [336.0, 1105.0], [364.0, 1115.3333333333333], [367.0, 1115.0], [366.0, 1116.0], [365.0, 1102.0], [361.0, 1107.5], [359.0, 1104.3333333333333], [358.0, 1105.0], [355.0, 1128.0], [354.0, 1108.5], [352.0, 1110.6], [381.0, 1108.0], [383.0, 1106.5], [380.0, 1103.0], [369.0, 1109.0], [368.0, 1104.0], [379.0, 1104.0], [377.0, 1113.0], [376.0, 1108.0], [375.0, 1104.0], [374.0, 1120.0], [373.0, 1101.0], [372.0, 1110.0], [398.0, 1109.0], [395.0, 1110.0], [394.0, 1099.0], [393.0, 1230.5], [391.0, 1100.0], [384.0, 1112.0], [390.0, 1107.5], [388.0, 1108.0], [387.0, 1102.0], [386.0, 1110.5], [414.0, 1098.0], [411.0, 1109.0], [409.0, 1109.0], [400.0, 1105.0], [430.0, 1098.0], [421.0, 1105.0], [416.0, 1105.5], [447.0, 1103.0], [446.0, 1118.0882352941176], [443.0, 1101.0], [436.0, 1104.0], [451.0, 1319.0], [462.0, 1336.5], [463.0, 1354.0], [460.0, 1113.0], [459.0, 1321.0], [458.0, 1314.0], [452.0, 1316.0], [448.0, 1099.0], [450.0, 1326.0], [449.0, 1364.0], [478.0, 1312.5], [479.0, 1314.0], [477.0, 1332.5], [474.0, 1309.0], [472.0, 1316.0], [471.0, 1316.0], [470.0, 1315.5], [465.0, 1334.5], [464.0, 1313.0], [494.0, 1328.3333333333333], [495.0, 1304.0], [493.0, 1345.0], [490.0, 1323.5], [487.0, 1305.6666666666667], [485.0, 1206.5], [484.0, 1104.0], [481.0, 1321.6666666666667], [480.0, 1308.0], [510.0, 1274.5], [509.0, 1273.0], [499.0, 1304.0], [498.0, 1337.0], [497.0, 1321.5], [507.0, 1283.0], [506.0, 1288.0], [505.0, 1290.0], [504.0, 1296.0], [502.0, 1311.0], [501.0, 1297.0], [500.0, 1325.0], [538.0, 1107.5], [542.0, 1106.5], [528.0, 1118.0], [540.0, 1108.5], [536.0, 1110.5], [518.0, 1265.5], [516.0, 1270.0], [514.0, 1269.0], [512.0, 1269.0], [526.0, 1119.0], [524.0, 1150.0], [522.0, 1216.0], [520.0, 5043.0], [534.0, 1111.0], [530.0, 1113.0], [568.0, 1106.5], [560.0, 1121.0], [572.0, 1110.0], [570.0, 1115.0], [558.0, 1129.0], [544.0, 1106.0], [556.0, 1099.0], [554.0, 1136.0], [552.0, 1103.5], [566.0, 1108.0], [564.0, 1119.0], [562.0, 1127.0], [604.0, 1423.0], [592.0, 1108.0], [594.0, 1101.0], [606.0, 1423.0], [602.0, 5035.0], [600.0, 1098.0], [576.0, 1118.0], [578.0, 1106.0], [582.0, 1106.0], [580.0, 1104.0], [590.0, 1109.5], [586.0, 1107.0], [584.0, 1107.5], [598.0, 1103.5], [614.0, 1426.5], [634.0, 1395.3333333333333], [612.0, 1406.0], [610.0, 1409.0], [608.0, 1414.0], [630.0, 1397.0], [628.0, 1398.5], [626.0, 1394.0], [620.0, 1399.0], [616.0, 1402.0], [644.0, 1396.0], [664.0, 1377.0], [670.0, 1367.0], [656.0, 1380.0], [658.0, 1374.0], [654.0, 1378.5], [640.0, 1393.0], [642.0, 1392.0], [646.0, 1381.0], [648.0, 1383.0], [662.0, 1378.0], [700.0, 1365.0], [702.0, 1385.5], [698.0, 1405.0], [676.0, 1373.0], [684.0, 1362.0], [682.0, 1366.8333333333335], [694.0, 1378.6666666666667], [726.0, 1360.5], [710.0, 1371.0], [708.0, 1384.0], [764.0, 1129.0], [752.0, 1161.0], [754.0, 1154.0], [756.0, 1136.0], [766.0, 1127.0], [762.0, 1126.0], [760.0, 1138.3333333333333], [742.0, 1284.0], [750.0, 1162.0], [748.0, 1168.0], [758.0, 1175.0], [768.0, 1122.0], [770.0, 1119.6666666666667], [782.0, 1133.0], [780.0, 1109.0], [778.0, 1108.0], [790.0, 1109.0], [788.0, 1138.0], [786.0, 1105.0], [784.0, 1106.0], [828.0, 1170.0], [824.0, 1225.0], [822.0, 1098.0], [820.0, 1149.6666666666665], [842.0, 1105.0], [840.0, 1174.0], [838.0, 1164.5], [836.0, 1156.0], [834.0, 1108.0], [886.0, 1189.0], [912.0, 1130.0], [942.0, 1123.5], [944.0, 1119.0], [940.0, 1126.0], [938.0, 1123.6666666666667], [936.0, 1198.5], [934.0, 1132.0], [1020.0, 5014.0], [1008.0, 5050.0], [1010.0, 5028.0], [1012.0, 5005.0], [1022.0, 5003.0], [1018.0, 5132.0], [1016.0, 2540.0], [996.0, 1104.5], [1006.0, 5160.0], [1002.0, 1154.500000000001], [1000.0, 1101.0], [1014.0, 4968.0], [1028.0, 1319.0], [1084.0, 1105.0], [1072.0, 1106.0], [1032.0, 1247.0], [1024.0, 4847.0], [1052.0, 1114.0], [1048.0, 1114.0], [1044.0, 1176.0], [1040.0, 1227.5], [1056.0, 1108.0], [1140.0, 1106.3333333333333], [1144.0, 1108.0], [1100.0, 1109.0], [1092.0, 1098.0], [1088.0, 1112.0], [1120.0, 1144.0], [1108.0, 1115.0], [1204.0, 1108.0], [1208.0, 1103.0], [1152.0, 1110.0], [1180.0, 1112.0], [1168.0, 1109.0], [1196.0, 1110.8333333333333], [1192.0, 1107.0], [1188.0, 1111.0], [1184.0, 1113.3333333333333], [1248.0, 1242.0], [1260.0, 1141.0], [1256.0, 1224.0], [1252.0, 1237.0], [1244.0, 1243.0], [1224.0, 1426.0], [1228.0, 1426.0], [1240.0, 1261.0], [1236.0, 1325.0], [1232.0, 1302.0], [1336.0, 1121.0], [1340.0, 1115.5], [1332.0, 1119.0], [1288.0, 1113.5], [1304.0, 1114.3333333333333], [1324.0, 1128.0], [1316.0, 1133.0], [1392.0, 1107.0], [1384.0, 1117.0], [1352.0, 1107.0], [1348.0, 1112.5], [1356.0, 1122.0], [1388.0, 1112.0], [1380.0, 1120.0], [1420.0, 2442.0], [1444.0, 1228.5], [1464.0, 1195.0], [1456.0, 1118.5], [1412.0, 1109.0], [1448.0, 1113.0], [1436.0, 1133.0], [1432.0, 1215.0], [1428.0, 1249.0], [1520.0, 1097.0], [1524.0, 1106.5], [1476.0, 1108.0], [1472.0, 1118.5], [1508.0, 1111.0], [1504.0, 1108.5], [1496.0, 1099.0], [1492.0, 1106.0], [1548.0, 1105.0], [1592.0, 1110.3333333333333], [1584.0, 1102.0], [1572.0, 1112.25], [1564.0, 1109.25], [1556.0, 1111.0], [1544.0, 1115.0], [1536.0, 1105.6666666666667], [1624.0, 1145.0], [1636.0, 1138.0], [1620.0, 1225.0], [1616.0, 1108.0], [1604.0, 1111.1428571428573], [1716.0, 1111.0], [1720.0, 1108.0], [1712.0, 1107.5], [1700.0, 1104.5], [1692.0, 1103.3333333333333], [1688.0, 1105.0], [1680.0, 1142.3611111111113], [1776.0, 1108.3333333333333], [1784.0, 1109.0], [1732.0, 1108.0], [1756.0, 1109.0], [1752.0, 1415.5], [1748.0, 1109.5], [1744.0, 1105.0], [1772.0, 1112.0], [1764.0, 1111.0], [1760.0, 1109.5], [1848.0, 1201.0], [1844.0, 1213.0], [1852.0, 1155.0], [1824.0, 5440.0], [1828.0, 1325.0], [1832.0, 5869.0], [1836.0, 1186.0], [1840.0, 1163.0], [1804.0, 1111.0], [1800.0, 1105.0], [1792.0, 1109.0], [1820.0, 2586.0], [1816.0, 1104.0], [1812.0, 1101.0], [1808.0, 1102.0], [1916.0, 1120.25], [1892.0, 1120.0], [1896.0, 1123.0], [1884.0, 1152.0], [1876.0, 1126.0], [1972.0, 1116.5], [1952.0, 1119.0], [1980.0, 1133.0], [1956.0, 1118.0], [1960.0, 1117.0], [1964.0, 1115.5], [1948.0, 1115.0], [1944.0, 1111.0], [1940.0, 1119.0], [1936.0, 1116.0], [2044.0, 1152.0], [2016.0, 5118.0], [2020.0, 5013.0], [2024.0, 4827.0], [2028.0, 5464.5], [2040.0, 5336.0], [2036.0, 5756.0], [2032.0, 5120.0], [1984.0, 1113.0], [1988.0, 1129.0], [1996.0, 1106.3333333333333], [2012.0, 1109.0], [2000.0, 1109.3333333333333], [2144.0, 1105.0], [2136.0, 1107.6666666666667], [2120.0, 1107.0], [2128.0, 1113.0], [2072.0, 1116.0], [2056.0, 1161.0], [2048.0, 1156.0], [2096.0, 1103.0], [2080.0, 1127.0], [2280.0, 1113.5], [2296.0, 1118.0], [2240.0, 1114.0], [2288.0, 1123.25], [2200.0, 1110.5], [2232.0, 1102.0], [2224.0, 1112.0], [2208.0, 1107.0], [2328.0, 1120.6666666666667], [2424.0, 1138.5], [2368.0, 1115.5], [2376.0, 1121.0], [2384.0, 1117.0], [2312.0, 1113.0], [2360.0, 1127.75], [2352.0, 1124.0], [2336.0, 1121.0], [2544.0, 1106.0], [2496.0, 1112.0], [2552.0, 1105.6666666666667], [2512.0, 1109.5], [2520.0, 1117.0], [2536.0, 1103.0], [2528.0, 1111.5], [2440.0, 1112.0], [2472.0, 1107.0], [2464.0, 1107.0], [2664.0, 1134.0], [2672.0, 1117.0], [2632.0, 1101.0], [2640.0, 5005.0], [2648.0, 5413.0], [2656.0, 1159.5], [2560.0, 1116.5], [2576.0, 1124.0], [2584.0, 1101.0], [2600.0, 1106.0], [2592.0, 1111.0], [2800.0, 1108.75], [2752.0, 1112.25], [2768.0, 1110.5], [2776.0, 1107.5], [2808.0, 1108.0], [2792.0, 1103.0], [2784.0, 1107.0], [2744.0, 1107.0], [2736.0, 1107.0], [2824.0, 1108.0], [2928.0, 1117.0], [2880.0, 1132.0], [2888.0, 1112.3333333333333], [2904.0, 1107.0], [2816.0, 1105.0], [2832.0, 1107.0], [2840.0, 1454.0], [2864.0, 1222.5], [2856.0, 1263.0], [2848.0, 1293.0], [2944.0, 1213.1999999999998], [3000.0, 1298.9744232962232], [2952.0, 1111.375], [2960.0, 1721.0], [2968.0, 1404.2], [2992.0, 1300.0], [2984.0, 1389.2], [2976.0, 1396.6666666666665], [2065.0, 1149.3333333333333], [2049.0, 1156.0], [2105.0, 1119.0], [2089.0, 1112.0], [2137.0, 1107.0], [2121.0, 1125.0], [2281.0, 1120.2], [2289.0, 3153.5], [2297.0, 1113.4], [2249.0, 1104.0], [2233.0, 1124.5], [2225.0, 1114.0], [2217.0, 1111.5], [2209.0, 1105.5], [2265.0, 1104.0], [2417.0, 1107.0], [2377.0, 1123.0], [2369.0, 1115.0], [2385.0, 2464.3333333333335], [2393.0, 1107.0], [2401.0, 1138.5], [2305.0, 1117.0], [2321.0, 1120.3333333333333], [2353.0, 1121.5], [2345.0, 1114.0], [2337.0, 1120.6666666666667], [2537.0, 1112.0], [2553.0, 1101.0], [2545.0, 5025.0], [2521.0, 1112.0], [2529.0, 1102.0], [2457.0, 1118.0], [2449.0, 1110.4], [2441.0, 1105.0], [2489.0, 1104.0], [2473.0, 1107.0], [2465.0, 1105.0], [2681.0, 1113.0], [2633.0, 39.0], [2641.0, 4997.0], [2649.0, 1181.0], [2673.0, 1130.0], [2665.0, 1122.0], [2657.0, 1183.0], [2569.0, 1101.6666666666667], [2577.0, 1112.0], [2585.0, 1116.0], [2617.0, 1110.6666666666667], [2609.0, 1108.0], [2601.0, 1108.0], [2801.0, 1109.5], [2753.0, 1110.0], [2761.0, 1113.5], [2777.0, 1109.0], [2809.0, 1105.0], [2785.0, 1117.0], [2713.0, 1104.0], [2705.0, 1106.7142857142858], [2689.0, 1113.5], [2745.0, 1118.0], [2729.0, 1113.0], [2721.0, 1115.5], [2913.0, 1119.5], [2841.0, 1501.0], [2881.0, 1115.0], [2889.0, 1113.6666666666667], [2897.0, 1113.6666666666667], [2921.0, 1111.25], [2833.0, 1104.5], [2873.0, 1137.0], [2865.0, 1216.0], [2857.0, 1270.0], [2953.0, 1109.3333333333333], [2945.0, 1108.0], [2961.0, 1512.3333333333333], [2969.0, 1407.5], [2993.0, 1301.9166666666665], [2985.0, 1389.0], [2977.0, 1393.5], [1077.0, 1102.3333333333333], [1085.0, 1130.0], [1057.0, 1110.0], [1065.0, 1108.0], [1081.0, 1130.0], [1073.0, 1106.0], [1037.0, 1197.5], [1033.0, 1174.0], [1029.0, 1230.0], [1025.0, 2235.0], [1049.0, 1119.0], [1041.0, 1157.0], [1069.0, 1108.5], [1145.0, 1122.5], [1137.0, 1120.0], [1149.0, 1106.3333333333333], [1117.0, 1108.0], [1089.0, 1127.0], [1093.0, 1108.0], [1097.0, 1123.0], [1113.0, 1113.5], [1105.0, 1110.0], [1133.0, 1112.3333333333333], [1129.0, 1108.5], [1125.0, 1114.0], [1121.0, 1104.0], [1209.0, 1109.0], [1185.0, 3064.5], [1193.0, 1114.0], [1189.0, 1111.5], [1205.0, 1109.0], [1201.0, 1109.0], [1157.0, 1114.0], [1177.0, 1113.0], [1169.0, 1105.0], [1225.0, 1416.0], [1229.0, 1960.0], [1221.0, 1105.0], [1245.0, 1241.0], [1241.0, 1269.0], [1237.0, 1284.0], [1233.0, 1313.0], [1261.0, 1139.0], [1257.0, 1149.0], [1253.0, 1184.0], [1249.0, 1231.0], [1329.0, 1128.5], [1293.0, 1114.0], [1309.0, 1109.0], [1321.0, 1114.0], [1317.0, 1111.0], [1313.0, 1134.0], [1357.0, 1124.0], [1397.0, 1113.5], [1381.0, 1102.5], [1405.0, 1106.0], [1377.0, 1132.0], [1349.0, 1117.0], [1345.0, 1129.5], [1373.0, 1107.3333333333333], [1369.0, 1107.9999999999998], [1361.0, 1108.3333333333333], [1385.0, 1112.0], [1461.0, 1122.5], [1469.0, 1109.5], [1445.0, 1152.0], [1465.0, 1105.0], [1437.0, 1145.0], [1413.0, 1112.0], [1417.0, 1106.5], [1421.0, 1382.0], [1429.0, 1233.0], [1425.0, 1294.5], [1453.0, 1126.5], [1449.0, 1133.0], [1525.0, 1111.0], [1521.0, 1105.0], [1533.0, 1107.0], [1505.0, 1119.0], [1509.0, 1113.0], [1529.0, 1105.0], [1501.0, 1111.5], [1473.0, 1105.0], [1477.0, 1112.0], [1481.0, 1119.5], [1485.0, 1104.0], [1489.0, 1101.0], [1517.0, 1104.5], [1513.0, 1105.0], [1589.0, 1111.0], [1597.0, 1105.0], [1585.0, 1110.0], [1565.0, 1113.0], [1557.0, 1118.0], [1553.0, 1106.0], [1569.0, 1111.0], [1609.0, 1107.0], [1625.0, 1129.0], [1617.0, 1103.0], [1725.0, 1104.0], [1697.0, 1115.6666666666667], [1721.0, 1101.0], [1717.0, 1106.0], [1689.0, 1129.0], [1685.0, 1123.0], [1681.0, 1125.0], [1709.0, 1110.0], [1705.0, 1100.0], [1781.0, 1117.5], [1789.0, 1108.5], [1761.0, 1104.0], [1765.0, 1107.0], [1777.0, 1112.0], [1741.0, 1107.0], [1737.0, 1125.5], [1729.0, 1111.5], [1757.0, 1115.5], [1749.0, 1107.0], [1745.0, 1106.0], [1769.0, 1103.5], [1849.0, 1206.0], [1853.0, 1160.0], [1825.0, 1336.0], [1829.0, 1297.0], [1833.0, 1240.0], [1837.0, 5803.0], [1845.0, 1205.0], [1841.0, 1208.0], [1805.0, 1101.0], [1801.0, 1114.0], [1793.0, 1099.0], [1821.0, 1426.0], [1817.0, 1105.0], [1909.0, 1111.5], [1917.0, 1113.0], [1893.0, 1119.0], [1913.0, 1114.0], [1905.0, 1120.0], [1865.0, 1124.0], [1857.0, 1143.5], [1881.0, 1122.0], [1969.0, 1118.0], [1933.0, 1113.0], [1981.0, 1107.0], [1961.0, 1121.75], [1977.0, 1112.0], [1929.0, 1121.6], [1925.0, 1119.2], [1921.0, 1119.0], [1949.0, 1125.0], [1941.0, 1115.0], [1937.0, 1150.0], [1965.0, 1112.5], [2037.0, 1285.0], [2041.0, 5317.0], [2017.0, 5100.0], [2021.0, 1711.0], [2025.0, 5689.0], [2029.0, 5962.0], [2033.0, 1305.0], [1985.0, 1111.0], [2013.0, 1105.0], [2005.0, 1106.0], [2001.0, 1108.0], [2114.0, 1127.5], [2154.0, 1118.0], [2122.0, 1110.5], [2130.0, 1116.5], [2058.0, 1123.5], [2050.0, 1148.0], [2098.0, 1117.0], [2082.0, 1117.0], [2138.0, 1108.0], [2290.0, 1113.0], [2266.0, 1105.0], [2282.0, 1114.0], [2274.0, 1112.0], [2234.0, 1105.0], [2226.0, 1138.0], [2218.0, 1105.0], [2330.0, 1121.0], [2426.0, 1105.0], [2378.0, 1118.0], [2410.0, 1110.5], [2314.0, 1111.6666666666667], [2306.0, 1138.0], [2362.0, 1118.0], [2346.0, 1125.3333333333333], [2394.0, 1118.0], [2546.0, 1104.0], [2498.0, 1114.0], [2506.0, 1111.6666666666667], [2514.0, 1108.5], [2522.0, 5081.0], [2538.0, 6064.0], [2530.0, 1107.0], [2458.0, 1104.0], [2450.0, 1107.0], [2442.0, 1107.0], [2490.0, 1116.0], [2482.0, 1106.6666666666667], [2474.0, 1102.0], [2466.0, 1122.0], [2666.0, 1130.0], [2674.0, 1117.0], [2626.0, 1104.3333333333333], [2634.0, 1103.0], [2642.0, 7660.0], [2650.0, 1206.0], [2658.0, 1148.0], [2618.0, 1101.0], [2610.0, 1108.0], [2594.0, 1112.5], [2802.0, 1097.0], [2810.0, 1109.0], [2754.0, 1107.0], [2770.0, 1108.5], [2778.0, 1104.0], [2786.0, 1112.0], [2714.0, 1112.5], [2698.0, 1101.0], [2690.0, 1131.0], [2914.0, 1114.25], [2906.0, 1107.0], [2938.0, 1105.0], [2930.0, 1110.6666666666667], [2826.0, 1107.0], [2834.0, 1106.0], [2842.0, 2248.0], [2866.0, 1190.0], [2858.0, 1236.0], [2850.0, 1650.0], [2946.0, 1109.6666666666667], [2954.0, 1111.0], [2962.0, 1598.3333333333333], [2970.0, 1516.3333333333333], [2986.0, 1385.3333333333333], [2978.0, 1381.0], [2067.0, 1119.5], [2075.0, 1119.6666666666667], [2131.0, 1163.0], [2155.0, 1108.0], [2059.0, 1119.0], [2051.0, 4935.0], [2107.0, 1108.0], [2091.0, 1113.0], [2083.0, 1107.0], [2123.0, 1107.0], [2115.0, 1113.0], [2251.0, 1153.0], [2291.0, 1123.0], [2203.0, 1106.0], [2235.0, 1103.0], [2219.0, 1111.0], [2427.0, 1200.0], [2371.0, 1112.3333333333333], [2379.0, 1119.5], [2395.0, 1113.25], [2419.0, 1124.6], [2315.0, 1111.0], [2331.0, 1120.0], [2355.0, 1117.0], [2347.0, 1133.0], [2339.0, 1115.5], [2531.0, 1106.0], [2555.0, 1137.0], [2499.0, 1108.0], [2515.0, 1105.0], [2451.0, 1102.0], [2443.0, 1105.0], [2435.0, 3145.75], [2491.0, 1113.0], [2483.0, 1105.0], [2683.0, 1115.0], [2675.0, 1118.0], [2627.0, 1101.0], [2635.0, 1099.0], [2643.0, 4905.0], [2651.0, 1153.0], [2667.0, 1119.0], [2659.0, 1184.0], [2563.0, 1104.3333333333333], [2587.0, 1105.0], [2619.0, 1114.0], [2603.0, 1111.0], [2787.0, 1110.0], [2811.0, 1104.0], [2763.0, 1108.0], [2771.0, 1104.0], [2715.0, 1115.0], [2707.0, 1111.0], [2747.0, 1113.5], [2731.0, 1106.3333333333333], [2723.0, 1115.3333333333333], [2923.0, 1114.0], [2939.0, 1109.0], [2883.0, 1125.5], [2899.0, 1109.0], [2915.0, 1109.5], [2835.0, 1105.5], [2843.0, 1904.0], [2875.0, 1122.3333333333333], [2867.0, 1418.0], [2859.0, 1739.0], [2851.0, 1293.0], [2955.0, 1107.5], [2963.0, 1476.0], [2971.0, 1404.6666666666667], [2995.0, 1298.857142857143], [2979.0, 1391.142857142857], [515.0, 5121.0], [529.0, 1107.0], [543.0, 1144.0], [519.0, 5087.0], [513.0, 1267.0], [527.0, 5029.0], [525.0, 1130.0], [523.0, 5026.0], [521.0, 1219.0], [533.0, 1108.6666666666667], [571.0, 1106.0], [573.0, 1108.0], [575.0, 1104.0], [561.0, 1127.0], [545.0, 1105.0], [549.0, 1100.0], [547.0, 1117.5], [557.0, 1123.0], [553.0, 1100.0], [565.0, 1110.0], [605.0, 1427.0], [607.0, 1462.0], [593.0, 1101.0], [597.0, 1102.5], [603.0, 1433.0], [601.0, 1579.0], [591.0, 1106.0], [577.0, 1105.0], [579.0, 1103.0], [589.0, 1104.0], [599.0, 1102.0], [609.0, 1413.0], [639.0, 1392.6666666666667], [615.0, 1410.0], [611.0, 1407.0], [631.0, 1395.0], [625.0, 1398.5], [623.0, 1399.0], [621.0, 1399.0], [619.0, 1401.0], [617.0, 1401.0], [667.0, 1372.0], [671.0, 1366.5], [657.0, 1419.0], [669.0, 1375.0], [665.0, 1377.0], [641.0, 1397.3333333333333], [643.0, 1394.0], [645.0, 1385.0], [647.0, 1387.0], [653.0, 1372.0], [649.0, 1382.0], [663.0, 1391.5], [661.0, 1416.0], [659.0, 1370.0], [701.0, 1404.0], [703.0, 1368.0], [699.0, 1365.0], [697.0, 1361.5], [675.0, 1371.0], [687.0, 1363.0], [683.0, 1367.0], [693.0, 1368.0], [709.0, 1391.0], [707.0, 1374.0], [705.0, 1364.0], [765.0, 1126.0], [767.0, 1120.0], [753.0, 1147.5], [755.0, 1142.0], [757.0, 1134.0], [763.0, 1137.0], [761.0, 1135.0], [751.0, 1154.0], [743.0, 1322.0], [749.0, 1161.0], [747.0, 1156.0], [759.0, 1143.0], [775.0, 1108.3333333333333], [787.0, 1109.0], [799.0, 1198.0], [797.0, 1108.0], [773.0, 1107.0], [771.0, 1128.0], [783.0, 1110.0], [781.0, 1109.5], [777.0, 1117.5], [789.0, 1104.0], [785.0, 1107.0], [821.0, 1195.0], [807.0, 1210.0], [803.0, 1107.0], [845.0, 1164.5], [847.0, 1135.0], [833.0, 1214.4], [843.0, 1197.0], [841.0, 1198.0], [839.0, 1195.0], [889.0, 1099.0], [945.0, 1117.0], [943.0, 1123.0], [939.0, 1120.0], [1021.0, 4995.0], [1023.0, 4933.0], [1009.0, 5950.0], [1011.0, 5013.0], [1013.0, 5829.0], [1019.0, 5042.0], [1017.0, 5136.0], [1007.0, 5151.0], [995.0, 1108.0], [999.0, 1101.5], [997.0, 1102.0], [1005.0, 5145.5], [1003.0, 5237.0], [1015.0, 2782.0], [1038.0, 1227.0], [1086.0, 1103.0], [1078.0, 1107.0], [1074.0, 1106.0], [1034.0, 1173.0], [1030.0, 1280.0], [1026.0, 1746.0], [1054.0, 1110.5], [1050.0, 1111.0], [1046.0, 1166.5], [1042.0, 1569.0], [1070.0, 1105.0], [1066.0, 1120.3333333333333], [1062.0, 1108.6666666666667], [1102.0, 1109.0], [1146.0, 1103.0], [1098.0, 1123.0], [1094.0, 1111.0], [1130.0, 1107.0], [1126.0, 1122.5], [1122.0, 1116.0], [1118.0, 1111.0], [1110.0, 1109.0], [1190.0, 1109.0], [1162.0, 1109.0], [1174.0, 1131.0], [1170.0, 1117.0], [1194.0, 1111.0], [1186.0, 1099.0], [1266.0, 1118.0], [1254.0, 1235.0], [1258.0, 1171.0], [1250.0, 1229.0], [1222.0, 1099.0], [1226.0, 1930.0], [1230.0, 1375.0], [1242.0, 1253.0], [1238.0, 1268.0], [1234.0, 1299.0], [1334.0, 4294.0], [1342.0, 1120.0], [1310.0, 1109.0], [1306.0, 1123.0], [1302.0, 1108.0], [1318.0, 1114.0], [1314.0, 1116.0], [1402.0, 1105.0], [1406.0, 1111.0], [1370.0, 1107.0], [1354.0, 1113.0], [1358.0, 1109.0], [1390.0, 1119.0], [1386.0, 1115.0], [1378.0, 1105.0], [1422.0, 1398.0], [1466.0, 1103.0], [1418.0, 1101.0], [1414.0, 1111.0], [1410.0, 1106.6666666666667], [1450.0, 1123.0], [1446.0, 1153.0], [1442.0, 1130.75], [1438.0, 1128.0], [1434.0, 1227.0], [1430.0, 1233.0], [1426.0, 1297.0], [1506.0, 1114.0], [1522.0, 1108.0], [1478.0, 1103.0], [1514.0, 1111.5], [1510.0, 1112.0], [1502.0, 1107.0], [1598.0, 1110.5], [1578.0, 1108.0], [1574.0, 1111.6666666666667], [1550.0, 1108.0], [1542.0, 1112.4], [1642.0, 1128.3333333333333], [1626.0, 1139.0], [1622.0, 1208.0], [1618.0, 1104.0], [1614.0, 1106.0], [1714.0, 1110.0], [1710.0, 1106.0], [1702.0, 1122.0], [1682.0, 1106.0], [1742.0, 1099.0], [1786.0, 1106.0], [1782.0, 1120.0], [1778.0, 1102.0], [1734.0, 1116.5], [1730.0, 1100.0], [1754.0, 1106.0], [1746.0, 1111.0], [1774.0, 1099.0], [1854.0, 5236.0], [1826.0, 1298.0], [1834.0, 2081.0], [1838.0, 2049.0], [1850.0, 1152.0], [1846.0, 1205.0], [1806.0, 1103.0], [1798.0, 1110.5], [1822.0, 5523.0], [1818.0, 1102.0], [1814.0, 1104.5], [1810.0, 1106.5], [1918.0, 1112.5], [1890.0, 1117.0], [1898.0, 1115.0], [1902.0, 1126.0], [1914.0, 1135.0], [1910.0, 1129.0], [1906.0, 1120.5], [1858.0, 1143.0], [1954.0, 1116.5], [1974.0, 1116.6666666666667], [1934.0, 1136.0], [1922.0, 1120.0], [1946.0, 1127.3333333333333], [1966.0, 1115.0], [2042.0, 1187.0], [2046.0, 3280.5], [2018.0, 5125.0], [2022.0, 5759.0], [2026.0, 5319.0], [2030.0, 5941.0], [2038.0, 5369.0], [1994.0, 1111.8], [2014.0, 1100.0], [2002.0, 1106.5], [2164.0, 1110.0], [2156.0, 1128.0], [2132.0, 1132.5], [2068.0, 1122.0], [2060.0, 1123.0], [2100.0, 1112.0], [2092.0, 1117.5], [2140.0, 1112.0], [2284.0, 1114.0], [2252.0, 1113.0], [2260.0, 1124.3333333333333], [2268.0, 1108.0], [2300.0, 1132.75], [2204.0, 1104.0], [2228.0, 1110.0], [2220.0, 1112.0], [2212.0, 1120.6666666666667], [2332.0, 1120.0], [2380.0, 1122.0], [2388.0, 1119.0], [2404.0, 1108.6666666666667], [2316.0, 1115.0], [2308.0, 1117.0], [2364.0, 1121.0], [2340.0, 1121.0], [2548.0, 1114.0], [2500.0, 1111.0], [2508.0, 1102.0], [2516.0, 1099.0], [2460.0, 1119.5], [2444.0, 1117.0], [2436.0, 1123.0], [2484.0, 1110.0], [2476.0, 1102.0], [2684.0, 1111.0], [2628.0, 1103.0], [2636.0, 1098.0], [2644.0, 4783.0], [2652.0, 1196.0], [2676.0, 1123.0], [2668.0, 1115.0], [2660.0, 1173.0], [2572.0, 1105.0], [2580.0, 1104.0], [2588.0, 1112.0], [2620.0, 1110.0], [2596.0, 1112.5], [2804.0, 1106.0], [2756.0, 1107.0], [2764.0, 1115.0], [2772.0, 1101.0], [2780.0, 1102.0], [2796.0, 1111.25], [2788.0, 1111.0], [2716.0, 1112.0], [2708.0, 1117.0], [2700.0, 1107.5], [2692.0, 1104.5], [2740.0, 1108.25], [2732.0, 1100.0], [2924.0, 1124.0], [2940.0, 1111.0], [2932.0, 1108.0], [2884.0, 1110.0], [2900.0, 1110.0], [2908.0, 1111.5], [2916.0, 1108.5], [2820.0, 1104.6666666666665], [2828.0, 1108.0], [2836.0, 3702.8333333333335], [2844.0, 1432.0], [2868.0, 1677.0], [2860.0, 1232.0], [2852.0, 1266.0], [2948.0, 1110.5], [2996.0, 1301.0], [2956.0, 1106.1666666666665], [2964.0, 1459.0], [2972.0, 1555.0], [2988.0, 1439.111111111111], [2980.0, 1387.0], [2077.0, 1112.0], [2061.0, 1171.0], [2165.0, 1108.0], [2053.0, 1167.0], [2109.0, 1106.25], [2101.0, 1109.0], [2085.0, 1124.5], [2133.0, 1108.0], [2125.0, 1118.0], [2117.0, 1111.5], [2293.0, 1124.0], [2285.0, 1102.0], [2245.0, 1110.5], [2197.0, 1109.0], [2229.0, 1106.0], [2221.0, 1112.0], [2213.0, 1109.5], [2413.0, 1108.75], [2373.0, 1120.0], [2381.0, 1131.0], [2397.0, 1113.0], [2429.0, 3164.0], [2405.0, 1111.6666666666667], [2365.0, 1117.0], [2309.0, 1117.3333333333333], [2317.0, 1117.5], [2325.0, 1929.2], [2349.0, 1125.0], [2341.0, 1121.0], [2501.0, 1100.0], [2461.0, 1121.0], [2509.0, 1105.0], [2525.0, 1106.5], [2453.0, 1124.5], [2493.0, 1108.5], [2485.0, 1110.0], [2469.0, 1104.6666666666667], [2661.0, 1135.0], [2677.0, 1110.0], [2629.0, 1100.0], [2637.0, 4962.0], [2645.0, 1761.0], [2653.0, 1179.0], [2565.0, 3084.5], [2581.0, 1117.0], [2589.0, 1125.0], [2621.0, 1103.0], [2613.0, 1105.6666666666667], [2605.0, 1107.5], [2597.0, 1108.0], [2805.0, 1107.0], [2757.0, 1116.0], [2765.0, 1113.5], [2773.0, 1105.0], [2789.0, 1110.0], [2709.0, 1110.0], [2701.0, 1100.0], [2693.0, 1107.0], [2749.0, 1105.0], [2733.0, 1106.0], [2725.0, 1112.5], [2925.0, 1116.6666666666667], [2885.0, 1114.0], [2893.0, 1131.3333333333333], [2933.0, 1147.0], [2829.0, 1108.0], [2837.0, 1554.0], [2845.0, 1329.0], [2877.0, 1124.0], [2869.0, 1679.0], [2861.0, 1228.0], [2853.0, 1298.0], [2957.0, 1105.5], [2949.0, 1118.0], [2965.0, 1588.2], [2973.0, 1402.0], [2989.0, 1306.0], [2981.0, 1394.1250000000002], [1083.0, 1103.5], [1087.0, 1111.0], [1059.0, 1113.0], [1067.0, 1104.0], [1079.0, 1104.0], [1035.0, 1230.0], [1031.0, 1239.0], [1027.0, 1727.0], [1055.0, 1111.0], [1047.0, 1144.0], [1043.0, 1179.0], [1071.0, 1107.0], [1147.0, 1133.0], [1127.0, 1108.0], [1091.0, 1102.5], [1095.0, 1108.0], [1103.0, 1106.0], [1099.0, 1107.0], [1111.0, 1110.5], [1107.0, 1105.0], [1135.0, 1107.5], [1203.0, 1110.6666666666667], [1211.0, 1103.3333333333333], [1215.0, 1104.6666666666667], [1207.0, 1102.0], [1159.0, 1104.5], [1155.0, 1115.3333333333333], [1183.0, 1101.0], [1179.0, 1114.0], [1199.0, 1113.5], [1195.0, 1116.0], [1231.0, 1418.0], [1255.0, 1218.0], [1275.0, 1120.0], [1267.0, 1128.0], [1227.0, 1442.0], [1223.0, 4988.0], [1219.0, 1108.2], [1247.0, 1244.0], [1243.0, 1196.0], [1239.0, 1267.0], [1235.0, 1303.0], [1259.0, 1164.0], [1251.0, 1229.0], [1331.0, 1126.0], [1319.0, 1125.6666666666667], [1343.0, 1118.5], [1339.0, 1112.0], [1311.0, 1113.0], [1291.0, 1124.0], [1295.0, 1129.5], [1307.0, 1113.0], [1303.0, 1120.2], [1327.0, 1118.4], [1323.0, 1113.5], [1359.0, 1107.0], [1403.0, 1123.0], [1399.0, 1107.3333333333333], [1395.0, 1115.5], [1351.0, 1107.0], [1375.0, 1102.0], [1367.0, 1112.0], [1363.0, 1109.25], [1391.0, 1104.0], [1383.0, 1102.5], [1467.0, 1121.0], [1471.0, 1106.0], [1459.0, 1111.5], [1415.0, 1100.0], [1419.0, 1101.0], [1423.0, 1304.0], [1435.0, 1191.5], [1427.0, 1235.0], [1451.0, 1110.0], [1447.0, 1118.0], [1527.0, 1106.0], [1531.0, 1111.0], [1507.0, 1102.0], [1511.0, 1103.0], [1475.0, 1113.0], [1479.0, 1110.0], [1483.0, 1105.0], [1487.0, 1106.5], [1499.0, 1108.3333333333333], [1495.0, 1109.3333333333333], [1491.0, 1120.6666666666667], [1519.0, 1117.5], [1515.0, 1101.0], [1587.0, 1105.0], [1591.0, 1106.0], [1599.0, 1109.0], [1595.0, 1109.6666666666667], [1551.0, 1098.0], [1547.0, 1113.0], [1539.0, 1104.0], [1567.0, 1118.0], [1559.0, 1108.6666666666667], [1555.0, 1124.0], [1579.0, 1121.5], [1623.0, 1145.0], [1647.0, 1132.0], [1619.0, 1101.0], [1615.0, 1104.3333333333333], [1611.0, 1106.3333333333333], [1607.0, 1109.6], [1603.0, 1101.0], [1727.0, 1105.5], [1699.0, 1117.0], [1723.0, 1105.5], [1719.0, 1133.0], [1695.0, 1101.5], [1687.0, 1104.0], [1683.0, 1103.0], [1707.0, 1110.0], [1703.0, 1099.0], [1787.0, 1103.0], [1791.0, 1108.5], [1763.0, 1118.5], [1767.0, 1111.5], [1783.0, 1101.0], [1779.0, 1109.0], [1743.0, 1110.0], [1739.0, 1103.0], [1735.0, 1107.0], [1759.0, 1102.0], [1771.0, 1109.5], [1851.0, 1197.0], [1855.0, 1143.0], [1827.0, 1305.0], [1831.0, 1299.5], [1835.0, 2082.0], [1839.0, 1196.0], [1847.0, 1157.0], [1843.0, 1196.0], [1807.0, 1102.0], [1799.0, 1107.5], [1795.0, 1104.5], [1823.0, 1343.0], [1819.0, 1100.0], [1811.0, 1103.0], [1915.0, 1120.0], [1919.0, 1119.0], [1899.0, 1128.0], [1903.0, 1117.3333333333333], [1911.0, 1119.0], [1907.0, 1128.0], [1859.0, 1128.0], [1879.0, 1123.0], [1931.0, 1130.6666666666667], [1959.0, 1123.5], [1979.0, 1117.0], [1935.0, 1131.0], [1951.0, 1116.0], [1947.0, 1111.0], [1943.0, 1115.5], [1939.0, 1111.5], [2039.0, 4999.0], [2043.0, 1171.0], [2047.0, 1167.0], [2019.0, 5024.0], [2023.0, 5373.0], [2031.0, 1357.0], [2035.0, 1312.0], [2015.0, 5116.0], [1987.0, 1531.5], [1991.0, 1113.25], [1995.0, 1117.0], [2011.0, 1108.5], [2007.0, 1108.0], [2003.0, 1106.0], [2070.0, 1114.0], [2126.0, 1107.5], [2174.0, 1106.0], [2078.0, 1111.0], [2062.0, 1124.0], [2054.0, 1145.0], [2110.0, 1115.0], [2102.0, 1111.0], [2142.0, 1115.0], [2286.0, 1123.5], [2294.0, 1111.0], [2302.0, 1119.0], [2254.0, 1112.0], [2278.0, 1109.5], [2238.0, 1110.0], [2206.0, 1111.0], [2230.0, 1114.0], [2222.0, 1118.0], [2406.0, 1114.0], [2422.0, 1108.0], [2430.0, 5102.0], [2374.0, 1117.0], [2382.0, 1111.0], [2334.0, 1119.6], [2366.0, 1122.0], [2358.0, 1115.0], [2350.0, 1120.3333333333333], [2342.0, 1132.0], [2398.0, 1112.0], [2542.0, 1112.0], [2558.0, 1102.25], [2510.0, 5106.0], [2526.0, 1106.0], [2550.0, 1112.0], [2438.0, 1109.0], [2494.0, 1105.0], [2478.0, 1104.0], [2470.0, 1111.0], [2678.0, 1108.0], [2630.0, 1102.0], [2638.0, 5053.0], [2646.0, 5001.0], [2654.0, 1199.0], [2686.0, 1118.0], [2670.0, 1116.0], [2662.0, 1145.0], [2566.0, 1114.0], [2590.0, 1119.0], [2622.0, 1109.0], [2606.0, 1108.0], [2806.0, 1108.0], [2774.0, 1107.0], [2782.0, 1109.3333333333333], [2814.0, 1106.0], [2718.0, 1110.0], [2710.0, 1112.5], [2694.0, 1120.0], [2742.0, 1110.0], [2734.0, 1104.0], [2726.0, 1111.0], [2838.0, 1550.0], [2894.0, 1125.0], [2902.0, 1119.0], [2910.0, 1112.142857142857], [2942.0, 1136.8823529411766], [2822.0, 1102.0], [2846.0, 1583.0], [2878.0, 1119.0], [2870.0, 1133.0], [2862.0, 1227.5], [2854.0, 1276.0], [2958.0, 1103.3333333333333], [2950.0, 1101.0], [2966.0, 1497.9999999999998], [2974.0, 1400.5], [2998.0, 1298.5], [2071.0, 1115.0], [2119.0, 1108.0], [2055.0, 1137.0], [2103.0, 1106.0], [2095.0, 1109.0], [2087.0, 1108.5], [2143.0, 1121.5], [2207.0, 1114.0], [2295.0, 1114.0], [2199.0, 1133.0], [2239.0, 1102.0], [2223.0, 1115.0], [2215.0, 1102.0], [2271.0, 1143.0], [2431.0, 5131.0], [2423.0, 1106.0], [2391.0, 1108.6666666666667], [2407.0, 1113.0], [2351.0, 1122.5], [2343.0, 1148.0], [2535.0, 1114.75], [2503.0, 1100.5], [2519.0, 2416.0], [2543.0, 1112.0], [2463.0, 3093.5], [2439.0, 1113.0], [2487.0, 1103.0], [2479.0, 1105.0], [2471.0, 1103.0], [2679.0, 1106.0], [2639.0, 4962.0], [2687.0, 1110.0], [2647.0, 4801.0], [2671.0, 1117.0], [2663.0, 1160.0], [2623.0, 1105.0], [2575.0, 1106.2], [2583.0, 1105.0], [2607.0, 1112.0], [2759.0, 1118.5], [2815.0, 1101.0], [2767.0, 1123.0], [2783.0, 1105.0], [2807.0, 1101.0], [2799.0, 1117.5], [2791.0, 1110.0], [2719.0, 1107.0], [2919.0, 1113.5], [2935.0, 1106.75], [2943.0, 1112.5], [2903.0, 3132.6666666666665], [2927.0, 1108.0], [2879.0, 1128.0], [2823.0, 1097.0], [2831.0, 1103.5], [2839.0, 1502.0], [2847.0, 1295.0], [2871.0, 1126.0], [2855.0, 1776.0], [2991.0, 1307.0], [2959.0, 1796.3333333333333], [2999.0, 1281.0], [1.0, 7960.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[2925.6096527662376, 1298.8490114637234]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 3000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 25683.9, "minX": 1.68421026E12, "maxY": 142949.1, "series": [{"data": [[1.68421044E12, 142949.1], [1.68421056E12, 113643.58333333333], [1.68421026E12, 31612.25], [1.68421038E12, 113095.56666666667], [1.68421032E12, 135472.63333333333], [1.6842105E12, 133649.71666666667]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.68421044E12, 116156.75], [1.68421056E12, 92337.15], [1.68421026E12, 25683.9], [1.68421038E12, 91884.65], [1.68421032E12, 110066.1], [1.6842105E12, 108590.95]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68421056E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 1205.9191599299957, "minX": 1.68421026E12, "maxY": 1952.6687808315703, "series": [{"data": [[1.68421044E12, 1314.392520451888], [1.68421056E12, 1285.724394785844], [1.68421026E12, 1952.6687808315703], [1.68421038E12, 1283.7802619915312], [1.68421032E12, 1245.1512086827786], [1.6842105E12, 1205.9191599299957]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68421056E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 1205.6953912826127, "minX": 1.68421026E12, "maxY": 1952.5045806906273, "series": [{"data": [[1.68421044E12, 1314.143669653294], [1.68421056E12, 1285.524355581692], [1.68421026E12, 1952.5045806906273], [1.68421038E12, 1283.4246035654492], [1.68421032E12, 1244.8854629172822], [1.6842105E12, 1205.6953912826127]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68421056E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 12.241407663213263, "minX": 1.68421026E12, "maxY": 762.3312191684311, "series": [{"data": [[1.68421044E12, 75.99439033891667], [1.68421056E12, 66.18994413407836], [1.68421026E12, 762.3312191684311], [1.68421038E12, 107.8809218950063], [1.68421032E12, 12.241407663213263], [1.6842105E12, 59.82615217934797]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68421056E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 1092.0, "minX": 1.68421026E12, "maxY": 12556.0, "series": [{"data": [[1.68421044E12, 8599.0], [1.68421056E12, 11946.0], [1.68421026E12, 7875.0], [1.68421038E12, 8709.0], [1.68421032E12, 8121.0], [1.6842105E12, 12556.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.68421044E12, 1536.0], [1.68421056E12, 1441.0], [1.68421026E12, 2843.1], [1.68421038E12, 1663.0], [1.68421032E12, 1283.0], [1.6842105E12, 1382.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.68421044E12, 5409.35], [1.68421056E12, 5165.969999999999], [1.68421026E12, 6122.4400000000005], [1.68421038E12, 2831.8999999997686], [1.68421032E12, 5183.850000000004], [1.6842105E12, 1762.0100000000002]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.68421044E12, 1842.0], [1.68421056E12, 1542.0], [1.68421026E12, 3238.0499999999997], [1.68421038E12, 1850.0], [1.68421032E12, 1427.0], [1.6842105E12, 1483.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.68421044E12, 1095.0], [1.68421056E12, 1094.0], [1.68421026E12, 1153.0], [1.68421038E12, 1094.0], [1.68421032E12, 1093.0], [1.6842105E12, 1092.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.68421044E12, 1115.0], [1.68421056E12, 1116.0], [1.68421026E12, 1767.5], [1.68421038E12, 1114.0], [1.68421032E12, 1112.0], [1.6842105E12, 1113.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68421056E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 39.0, "minX": 1.0, "maxY": 5283.5, "series": [{"data": [[2.0, 5161.5], [3.0, 2064.0], [4.0, 5283.5], [5.0, 5112.0], [6.0, 1784.0], [7.0, 1957.5], [8.0, 5040.0], [9.0, 3541.0], [10.0, 5074.0], [11.0, 5092.0], [12.0, 2369.5], [13.0, 1298.0], [15.0, 5063.5], [16.0, 1957.0], [17.0, 1544.0], [19.0, 5134.0], [25.0, 1177.0], [26.0, 1109.5], [29.0, 1105.0], [35.0, 1451.0], [48.0, 1272.0], [51.0, 1194.0], [58.0, 1109.0], [69.0, 1141.0], [92.0, 1108.5], [102.0, 1347.5], [112.0, 1288.0], [120.0, 1124.0], [133.0, 1321.0], [131.0, 1110.0], [141.0, 1652.0], [145.0, 1107.0], [147.0, 1106.0], [175.0, 1108.0], [179.0, 1278.0], [187.0, 1113.0], [188.0, 1170.0], [186.0, 1448.5], [191.0, 1375.0], [190.0, 1486.0], [197.0, 1114.0], [198.0, 1111.0], [199.0, 1113.0], [195.0, 1109.0], [196.0, 1126.5], [193.0, 1109.0], [201.0, 1109.0], [204.0, 1109.0], [200.0, 1109.0], [202.0, 1114.0], [206.0, 1336.5], [203.0, 1112.0], [207.0, 1116.0], [205.0, 1108.0], [209.0, 1403.0], [211.0, 1122.0], [213.0, 1110.0], [208.0, 1110.0], [218.0, 1112.0], [220.0, 1152.5], [225.0, 2441.0], [230.0, 1199.5], [228.0, 1112.0], [229.0, 1450.0], [238.0, 1193.5], [234.0, 1431.5], [245.0, 2397.0], [252.0, 1112.0], [248.0, 1113.0], [250.0, 1458.5], [271.0, 1124.0], [263.0, 1109.0], [284.0, 1115.0], [280.0, 1115.0], [275.0, 1261.5], [298.0, 1111.0], [308.0, 1111.0], [315.0, 1109.0], [305.0, 1107.0], [314.0, 1110.5], [328.0, 1121.0], [320.0, 1523.0], [324.0, 1112.0], [326.0, 1110.0], [342.0, 1190.0], [337.0, 1245.0], [372.0, 1117.0], [374.0, 1108.0], [378.0, 1109.0], [383.0, 1876.0], [397.0, 1112.0], [398.0, 1115.0], [387.0, 1113.0], [399.0, 1111.0], [394.0, 1111.0], [393.0, 1110.0], [392.0, 1299.0], [385.0, 1111.0], [395.0, 1111.0], [384.0, 1394.0], [389.0, 1276.0], [400.0, 1108.0], [404.0, 1410.5], [406.0, 1110.0], [411.0, 1113.0], [407.0, 1115.0], [402.0, 1109.0], [410.0, 1110.0], [401.0, 1137.5], [403.0, 1138.0], [413.0, 1110.0], [426.0, 1910.5], [429.0, 1110.0], [450.0, 1110.0], [454.0, 1108.0], [464.0, 1733.0], [488.0, 1116.0], [512.0, 1109.0], [519.0, 1302.0], [552.0, 1113.0], [544.0, 1110.0], [569.0, 1112.0], [573.0, 1116.0], [567.0, 1110.0], [571.0, 1109.0], [565.0, 1119.0], [594.0, 1114.0], [591.0, 1701.0], [588.0, 1111.0], [596.0, 1111.0], [599.0, 1110.0], [578.0, 1119.0], [583.0, 1190.0], [608.0, 1117.0], [621.0, 1602.0], [614.0, 1281.0], [628.0, 1112.0], [853.0, 1115.0], [1.0, 5092.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[147.0, 42.0], [326.0, 39.0], [401.0, 41.0], [450.0, 42.0], [464.0, 43.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 853.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 39.0, "minX": 1.0, "maxY": 5283.0, "series": [{"data": [[2.0, 5160.5], [3.0, 2064.0], [4.0, 5283.0], [5.0, 5112.0], [6.0, 1784.0], [7.0, 1957.5], [8.0, 5038.0], [9.0, 3540.0], [10.0, 5072.5], [11.0, 5091.0], [12.0, 2369.0], [13.0, 1298.0], [15.0, 5062.0], [16.0, 1957.0], [17.0, 1544.0], [19.0, 5133.0], [25.0, 1177.0], [26.0, 1109.5], [29.0, 1105.0], [35.0, 1450.5], [48.0, 1271.5], [51.0, 1193.0], [58.0, 1108.5], [69.0, 1140.5], [92.0, 1108.0], [102.0, 1347.5], [112.0, 1287.0], [120.0, 1123.5], [133.0, 1321.0], [131.0, 1110.0], [141.0, 1652.0], [145.0, 1107.0], [147.0, 1106.0], [175.0, 1108.0], [179.0, 1278.0], [187.0, 1112.0], [188.0, 1170.0], [186.0, 1448.5], [191.0, 1375.0], [190.0, 1486.0], [197.0, 1114.0], [198.0, 1111.0], [199.0, 1113.0], [195.0, 1109.0], [196.0, 1126.0], [193.0, 1108.0], [201.0, 1109.0], [204.0, 1109.0], [200.0, 1109.0], [202.0, 1114.0], [206.0, 1336.0], [203.0, 1112.0], [207.0, 1116.0], [205.0, 1108.0], [209.0, 1403.0], [211.0, 1122.0], [213.0, 1110.0], [208.0, 1109.0], [218.0, 1112.0], [220.0, 1152.5], [225.0, 2441.0], [230.0, 1199.5], [228.0, 1111.0], [229.0, 1450.0], [238.0, 1193.0], [234.0, 1431.5], [245.0, 2397.0], [252.0, 1111.5], [248.0, 1112.5], [250.0, 1458.0], [271.0, 1123.0], [263.0, 1108.0], [284.0, 1114.5], [280.0, 1114.5], [275.0, 1261.5], [298.0, 1111.0], [308.0, 1111.0], [315.0, 1109.0], [305.0, 1107.0], [314.0, 1110.0], [328.0, 1121.0], [320.0, 1522.5], [324.0, 1111.5], [326.0, 1110.0], [342.0, 1189.5], [337.0, 1245.0], [372.0, 1117.0], [374.0, 1107.0], [378.0, 1109.0], [383.0, 1876.0], [397.0, 1111.0], [398.0, 1115.0], [387.0, 1113.0], [399.0, 1110.0], [394.0, 1110.0], [393.0, 1110.0], [392.0, 1299.0], [385.0, 1111.0], [395.0, 1111.0], [384.0, 1394.0], [389.0, 1276.0], [400.0, 1108.0], [404.0, 1410.5], [406.0, 1110.0], [411.0, 1113.0], [407.0, 1115.0], [402.0, 1109.0], [410.0, 1110.0], [401.0, 1137.5], [403.0, 1138.0], [413.0, 1110.0], [426.0, 1910.5], [429.0, 1110.0], [450.0, 1110.0], [454.0, 1107.5], [464.0, 1732.0], [488.0, 1116.0], [512.0, 1109.0], [519.0, 1302.0], [552.0, 1113.0], [544.0, 1110.0], [569.0, 1111.0], [573.0, 1115.0], [567.0, 1110.0], [571.0, 1109.0], [565.0, 1119.0], [594.0, 1113.0], [591.0, 1700.0], [588.0, 1110.0], [596.0, 1110.0], [599.0, 1109.0], [578.0, 1118.0], [583.0, 1190.0], [608.0, 1117.0], [621.0, 1602.0], [614.0, 1281.0], [628.0, 1112.0], [853.0, 1115.0], [1.0, 5091.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[147.0, 42.0], [326.0, 39.0], [401.0, 41.0], [450.0, 42.0], [464.0, 43.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 853.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 53.333333333333336, "minX": 1.68421026E12, "maxY": 210.0, "series": [{"data": [[1.68421044E12, 210.0], [1.68421056E12, 166.5], [1.68421026E12, 53.333333333333336], [1.68421038E12, 163.51666666666668], [1.68421032E12, 206.48333333333332], [1.6842105E12, 203.33333333333334]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68421056E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.68421026E12, "maxY": 213.86666666666667, "series": [{"data": [[1.68421044E12, 213.86666666666667], [1.68421056E12, 170.03333333333333], [1.68421026E12, 47.3], [1.68421038E12, 169.21666666666667], [1.68421032E12, 202.7], [1.6842105E12, 199.96666666666667]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.68421044E12, 0.05], [1.68421056E12, 0.016666666666666666], [1.6842105E12, 0.016666666666666666]], "isOverall": false, "label": "429", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68421056E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.68421026E12, "maxY": 213.86666666666667, "series": [{"data": [[1.68421044E12, 213.86666666666667], [1.68421056E12, 170.03333333333333], [1.68421026E12, 47.3], [1.68421038E12, 169.21666666666667], [1.68421032E12, 202.7], [1.6842105E12, 199.96666666666667]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.68421044E12, 0.05], [1.68421056E12, 0.016666666666666666], [1.6842105E12, 0.016666666666666666]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68421056E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.68421026E12, "maxY": 213.86666666666667, "series": [{"data": [[1.68421044E12, 213.86666666666667], [1.68421056E12, 170.03333333333333], [1.68421026E12, 47.3], [1.68421038E12, 169.21666666666667], [1.68421032E12, 202.7], [1.6842105E12, 199.96666666666667]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.68421044E12, 0.05], [1.68421056E12, 0.016666666666666666], [1.6842105E12, 0.016666666666666666]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68421056E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

