/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 1093.0, "minX": 0.0, "maxY": 14508.0, "series": [{"data": [[0.0, 1093.0], [0.1, 1096.0], [0.2, 1097.0], [0.3, 1097.0], [0.4, 1097.0], [0.5, 1098.0], [0.6, 1098.0], [0.7, 1098.0], [0.8, 1098.0], [0.9, 1099.0], [1.0, 1099.0], [1.1, 1099.0], [1.2, 1099.0], [1.3, 1099.0], [1.4, 1099.0], [1.5, 1100.0], [1.6, 1100.0], [1.7, 1100.0], [1.8, 1100.0], [1.9, 1100.0], [2.0, 1100.0], [2.1, 1100.0], [2.2, 1100.0], [2.3, 1100.0], [2.4, 1100.0], [2.5, 1101.0], [2.6, 1101.0], [2.7, 1101.0], [2.8, 1101.0], [2.9, 1101.0], [3.0, 1101.0], [3.1, 1101.0], [3.2, 1101.0], [3.3, 1101.0], [3.4, 1101.0], [3.5, 1101.0], [3.6, 1101.0], [3.7, 1101.0], [3.8, 1102.0], [3.9, 1102.0], [4.0, 1102.0], [4.1, 1102.0], [4.2, 1102.0], [4.3, 1102.0], [4.4, 1102.0], [4.5, 1102.0], [4.6, 1102.0], [4.7, 1102.0], [4.8, 1102.0], [4.9, 1102.0], [5.0, 1102.0], [5.1, 1102.0], [5.2, 1102.0], [5.3, 1103.0], [5.4, 1103.0], [5.5, 1103.0], [5.6, 1103.0], [5.7, 1103.0], [5.8, 1103.0], [5.9, 1103.0], [6.0, 1103.0], [6.1, 1103.0], [6.2, 1103.0], [6.3, 1103.0], [6.4, 1103.0], [6.5, 1103.0], [6.6, 1103.0], [6.7, 1103.0], [6.8, 1103.0], [6.9, 1103.0], [7.0, 1103.0], [7.1, 1103.0], [7.2, 1104.0], [7.3, 1104.0], [7.4, 1104.0], [7.5, 1104.0], [7.6, 1104.0], [7.7, 1104.0], [7.8, 1104.0], [7.9, 1104.0], [8.0, 1104.0], [8.1, 1104.0], [8.2, 1104.0], [8.3, 1104.0], [8.4, 1104.0], [8.5, 1104.0], [8.6, 1104.0], [8.7, 1104.0], [8.8, 1104.0], [8.9, 1104.0], [9.0, 1104.0], [9.1, 1105.0], [9.2, 1105.0], [9.3, 1105.0], [9.4, 1105.0], [9.5, 1105.0], [9.6, 1105.0], [9.7, 1105.0], [9.8, 1105.0], [9.9, 1105.0], [10.0, 1105.0], [10.1, 1105.0], [10.2, 1105.0], [10.3, 1105.0], [10.4, 1105.0], [10.5, 1105.0], [10.6, 1105.0], [10.7, 1105.0], [10.8, 1105.0], [10.9, 1105.0], [11.0, 1105.0], [11.1, 1105.0], [11.2, 1106.0], [11.3, 1106.0], [11.4, 1106.0], [11.5, 1106.0], [11.6, 1106.0], [11.7, 1106.0], [11.8, 1106.0], [11.9, 1106.0], [12.0, 1106.0], [12.1, 1106.0], [12.2, 1106.0], [12.3, 1106.0], [12.4, 1106.0], [12.5, 1106.0], [12.6, 1106.0], [12.7, 1106.0], [12.8, 1106.0], [12.9, 1106.0], [13.0, 1106.0], [13.1, 1106.0], [13.2, 1107.0], [13.3, 1107.0], [13.4, 1107.0], [13.5, 1107.0], [13.6, 1107.0], [13.7, 1107.0], [13.8, 1107.0], [13.9, 1107.0], [14.0, 1107.0], [14.1, 1107.0], [14.2, 1107.0], [14.3, 1107.0], [14.4, 1107.0], [14.5, 1107.0], [14.6, 1107.0], [14.7, 1107.0], [14.8, 1107.0], [14.9, 1107.0], [15.0, 1107.0], [15.1, 1107.0], [15.2, 1107.0], [15.3, 1108.0], [15.4, 1108.0], [15.5, 1108.0], [15.6, 1108.0], [15.7, 1108.0], [15.8, 1108.0], [15.9, 1108.0], [16.0, 1108.0], [16.1, 1108.0], [16.2, 1108.0], [16.3, 1108.0], [16.4, 1108.0], [16.5, 1108.0], [16.6, 1108.0], [16.7, 1108.0], [16.8, 1108.0], [16.9, 1108.0], [17.0, 1108.0], [17.1, 1108.0], [17.2, 1109.0], [17.3, 1109.0], [17.4, 1109.0], [17.5, 1109.0], [17.6, 1109.0], [17.7, 1109.0], [17.8, 1109.0], [17.9, 1109.0], [18.0, 1109.0], [18.1, 1109.0], [18.2, 1109.0], [18.3, 1109.0], [18.4, 1109.0], [18.5, 1109.0], [18.6, 1109.0], [18.7, 1109.0], [18.8, 1109.0], [18.9, 1109.0], [19.0, 1110.0], [19.1, 1110.0], [19.2, 1110.0], [19.3, 1110.0], [19.4, 1110.0], [19.5, 1110.0], [19.6, 1110.0], [19.7, 1110.0], [19.8, 1110.0], [19.9, 1110.0], [20.0, 1110.0], [20.1, 1110.0], [20.2, 1110.0], [20.3, 1110.0], [20.4, 1110.0], [20.5, 1110.0], [20.6, 1111.0], [20.7, 1111.0], [20.8, 1111.0], [20.9, 1111.0], [21.0, 1111.0], [21.1, 1111.0], [21.2, 1111.0], [21.3, 1111.0], [21.4, 1111.0], [21.5, 1111.0], [21.6, 1111.0], [21.7, 1111.0], [21.8, 1111.0], [21.9, 1111.0], [22.0, 1111.0], [22.1, 1112.0], [22.2, 1112.0], [22.3, 1112.0], [22.4, 1112.0], [22.5, 1112.0], [22.6, 1112.0], [22.7, 1112.0], [22.8, 1112.0], [22.9, 1112.0], [23.0, 1112.0], [23.1, 1112.0], [23.2, 1112.0], [23.3, 1112.0], [23.4, 1113.0], [23.5, 1113.0], [23.6, 1113.0], [23.7, 1113.0], [23.8, 1113.0], [23.9, 1113.0], [24.0, 1113.0], [24.1, 1113.0], [24.2, 1113.0], [24.3, 1113.0], [24.4, 1113.0], [24.5, 1113.0], [24.6, 1113.0], [24.7, 1114.0], [24.8, 1114.0], [24.9, 1114.0], [25.0, 1114.0], [25.1, 1114.0], [25.2, 1114.0], [25.3, 1114.0], [25.4, 1114.0], [25.5, 1114.0], [25.6, 1114.0], [25.7, 1114.0], [25.8, 1115.0], [25.9, 1115.0], [26.0, 1115.0], [26.1, 1115.0], [26.2, 1115.0], [26.3, 1115.0], [26.4, 1115.0], [26.5, 1115.0], [26.6, 1115.0], [26.7, 1116.0], [26.8, 1116.0], [26.9, 1116.0], [27.0, 1116.0], [27.1, 1116.0], [27.2, 1116.0], [27.3, 1116.0], [27.4, 1116.0], [27.5, 1116.0], [27.6, 1117.0], [27.7, 1117.0], [27.8, 1117.0], [27.9, 1117.0], [28.0, 1117.0], [28.1, 1117.0], [28.2, 1117.0], [28.3, 1117.0], [28.4, 1118.0], [28.5, 1118.0], [28.6, 1118.0], [28.7, 1118.0], [28.8, 1118.0], [28.9, 1118.0], [29.0, 1118.0], [29.1, 1118.0], [29.2, 1119.0], [29.3, 1119.0], [29.4, 1119.0], [29.5, 1119.0], [29.6, 1119.0], [29.7, 1119.0], [29.8, 1119.0], [29.9, 1120.0], [30.0, 1120.0], [30.1, 1120.0], [30.2, 1120.0], [30.3, 1120.0], [30.4, 1120.0], [30.5, 1121.0], [30.6, 1121.0], [30.7, 1121.0], [30.8, 1121.0], [30.9, 1121.0], [31.0, 1121.0], [31.1, 1122.0], [31.2, 1122.0], [31.3, 1122.0], [31.4, 1122.0], [31.5, 1122.0], [31.6, 1122.0], [31.7, 1123.0], [31.8, 1123.0], [31.9, 1123.0], [32.0, 1123.0], [32.1, 1123.0], [32.2, 1124.0], [32.3, 1124.0], [32.4, 1124.0], [32.5, 1124.0], [32.6, 1124.0], [32.7, 1124.0], [32.8, 1125.0], [32.9, 1125.0], [33.0, 1125.0], [33.1, 1125.0], [33.2, 1126.0], [33.3, 1126.0], [33.4, 1126.0], [33.5, 1126.0], [33.6, 1126.0], [33.7, 1127.0], [33.8, 1127.0], [33.9, 1127.0], [34.0, 1127.0], [34.1, 1128.0], [34.2, 1128.0], [34.3, 1128.0], [34.4, 1128.0], [34.5, 1129.0], [34.6, 1129.0], [34.7, 1129.0], [34.8, 1130.0], [34.9, 1130.0], [35.0, 1130.0], [35.1, 1130.0], [35.2, 1131.0], [35.3, 1131.0], [35.4, 1131.0], [35.5, 1132.0], [35.6, 1132.0], [35.7, 1132.0], [35.8, 1132.0], [35.9, 1133.0], [36.0, 1133.0], [36.1, 1133.0], [36.2, 1134.0], [36.3, 1134.0], [36.4, 1134.0], [36.5, 1135.0], [36.6, 1135.0], [36.7, 1135.0], [36.8, 1136.0], [36.9, 1136.0], [37.0, 1136.0], [37.1, 1137.0], [37.2, 1137.0], [37.3, 1138.0], [37.4, 1138.0], [37.5, 1138.0], [37.6, 1139.0], [37.7, 1139.0], [37.8, 1140.0], [37.9, 1140.0], [38.0, 1140.0], [38.1, 1141.0], [38.2, 1141.0], [38.3, 1142.0], [38.4, 1142.0], [38.5, 1143.0], [38.6, 1143.0], [38.7, 1144.0], [38.8, 1144.0], [38.9, 1144.0], [39.0, 1145.0], [39.1, 1145.0], [39.2, 1146.0], [39.3, 1146.0], [39.4, 1147.0], [39.5, 1148.0], [39.6, 1148.0], [39.7, 1149.0], [39.8, 1149.0], [39.9, 1150.0], [40.0, 1151.0], [40.1, 1151.0], [40.2, 1152.0], [40.3, 1153.0], [40.4, 1153.0], [40.5, 1154.0], [40.6, 1155.0], [40.7, 1156.0], [40.8, 1157.0], [40.9, 1158.0], [41.0, 1159.0], [41.1, 1160.0], [41.2, 1161.0], [41.3, 1162.0], [41.4, 1163.0], [41.5, 1164.0], [41.6, 1165.0], [41.7, 1167.0], [41.8, 1169.0], [41.9, 1170.0], [42.0, 1172.0], [42.1, 1173.0], [42.2, 1175.0], [42.3, 1177.0], [42.4, 1179.0], [42.5, 1181.0], [42.6, 1183.0], [42.7, 1185.0], [42.8, 1187.0], [42.9, 1189.0], [43.0, 1191.0], [43.1, 1194.0], [43.2, 1197.0], [43.3, 1199.0], [43.4, 1202.0], [43.5, 1205.0], [43.6, 1208.0], [43.7, 1211.0], [43.8, 1214.0], [43.9, 1218.0], [44.0, 1221.0], [44.1, 1225.0], [44.2, 1228.0], [44.3, 1231.0], [44.4, 1235.0], [44.5, 1239.0], [44.6, 1243.0], [44.7, 1247.0], [44.8, 1251.0], [44.9, 1255.0], [45.0, 1259.0], [45.1, 1264.0], [45.2, 1268.0], [45.3, 1272.0], [45.4, 1277.0], [45.5, 1281.0], [45.6, 1285.0], [45.7, 1289.0], [45.8, 1292.0], [45.9, 1296.0], [46.0, 1300.0], [46.1, 1303.0], [46.2, 1307.0], [46.3, 1311.0], [46.4, 1314.0], [46.5, 1317.0], [46.6, 1321.0], [46.7, 1324.0], [46.8, 1327.0], [46.9, 1331.0], [47.0, 1334.0], [47.1, 1337.0], [47.2, 1341.0], [47.3, 1345.0], [47.4, 1349.0], [47.5, 1353.0], [47.6, 1357.0], [47.7, 1360.0], [47.8, 1364.0], [47.9, 1368.0], [48.0, 1372.0], [48.1, 1376.0], [48.2, 1379.0], [48.3, 1383.0], [48.4, 1386.0], [48.5, 1390.0], [48.6, 1393.0], [48.7, 1397.0], [48.8, 1400.0], [48.9, 1404.0], [49.0, 1407.0], [49.1, 1411.0], [49.2, 1414.0], [49.3, 1418.0], [49.4, 1421.0], [49.5, 1424.0], [49.6, 1428.0], [49.7, 1431.0], [49.8, 1435.0], [49.9, 1438.0], [50.0, 1442.0], [50.1, 1446.0], [50.2, 1450.0], [50.3, 1453.0], [50.4, 1457.0], [50.5, 1461.0], [50.6, 1464.0], [50.7, 1467.0], [50.8, 1471.0], [50.9, 1474.0], [51.0, 1478.0], [51.1, 1481.0], [51.2, 1484.0], [51.3, 1488.0], [51.4, 1492.0], [51.5, 1495.0], [51.6, 1498.0], [51.7, 1501.0], [51.8, 1504.0], [51.9, 1507.0], [52.0, 1510.0], [52.1, 1513.0], [52.2, 1516.0], [52.3, 1519.0], [52.4, 1522.0], [52.5, 1526.0], [52.6, 1528.0], [52.7, 1531.0], [52.8, 1534.0], [52.9, 1537.0], [53.0, 1540.0], [53.1, 1543.0], [53.2, 1546.0], [53.3, 1549.0], [53.4, 1552.0], [53.5, 1555.0], [53.6, 1558.0], [53.7, 1560.0], [53.8, 1563.0], [53.9, 1567.0], [54.0, 1570.0], [54.1, 1573.0], [54.2, 1576.0], [54.3, 1579.0], [54.4, 1581.0], [54.5, 1584.0], [54.6, 1586.0], [54.7, 1589.0], [54.8, 1591.0], [54.9, 1594.0], [55.0, 1596.0], [55.1, 1599.0], [55.2, 1602.0], [55.3, 1605.0], [55.4, 1608.0], [55.5, 1611.0], [55.6, 1614.0], [55.7, 1617.0], [55.8, 1620.0], [55.9, 1624.0], [56.0, 1627.0], [56.1, 1631.0], [56.2, 1634.0], [56.3, 1638.0], [56.4, 1641.0], [56.5, 1644.0], [56.6, 1647.0], [56.7, 1651.0], [56.8, 1655.0], [56.9, 1658.0], [57.0, 1662.0], [57.1, 1666.0], [57.2, 1671.0], [57.3, 1675.0], [57.4, 1678.0], [57.5, 1681.0], [57.6, 1685.0], [57.7, 1689.0], [57.8, 1693.0], [57.9, 1697.0], [58.0, 1700.0], [58.1, 1704.0], [58.2, 1707.0], [58.3, 1710.0], [58.4, 1714.0], [58.5, 1717.0], [58.6, 1721.0], [58.7, 1724.0], [58.8, 1727.0], [58.9, 1730.0], [59.0, 1733.0], [59.1, 1736.0], [59.2, 1740.0], [59.3, 1743.0], [59.4, 1746.0], [59.5, 1749.0], [59.6, 1752.0], [59.7, 1755.0], [59.8, 1759.0], [59.9, 1761.0], [60.0, 1764.0], [60.1, 1767.0], [60.2, 1770.0], [60.3, 1773.0], [60.4, 1776.0], [60.5, 1779.0], [60.6, 1782.0], [60.7, 1785.0], [60.8, 1788.0], [60.9, 1791.0], [61.0, 1794.0], [61.1, 1797.0], [61.2, 1800.0], [61.3, 1803.0], [61.4, 1805.0], [61.5, 1808.0], [61.6, 1811.0], [61.7, 1815.0], [61.8, 1819.0], [61.9, 1821.0], [62.0, 1825.0], [62.1, 1828.0], [62.2, 1831.0], [62.3, 1834.0], [62.4, 1836.0], [62.5, 1839.0], [62.6, 1843.0], [62.7, 1846.0], [62.8, 1849.0], [62.9, 1852.0], [63.0, 1855.0], [63.1, 1858.0], [63.2, 1861.0], [63.3, 1864.0], [63.4, 1867.0], [63.5, 1871.0], [63.6, 1874.0], [63.7, 1877.0], [63.8, 1879.0], [63.9, 1882.0], [64.0, 1885.0], [64.1, 1887.0], [64.2, 1889.0], [64.3, 1892.0], [64.4, 1895.0], [64.5, 1898.0], [64.6, 1901.0], [64.7, 1903.0], [64.8, 1906.0], [64.9, 1909.0], [65.0, 1912.0], [65.1, 1914.0], [65.2, 1917.0], [65.3, 1919.0], [65.4, 1922.0], [65.5, 1925.0], [65.6, 1928.0], [65.7, 1931.0], [65.8, 1934.0], [65.9, 1936.0], [66.0, 1939.0], [66.1, 1942.0], [66.2, 1945.0], [66.3, 1949.0], [66.4, 1952.0], [66.5, 1955.0], [66.6, 1958.0], [66.7, 1961.0], [66.8, 1964.0], [66.9, 1968.0], [67.0, 1971.0], [67.1, 1975.0], [67.2, 1977.0], [67.3, 1981.0], [67.4, 1984.0], [67.5, 1988.0], [67.6, 1991.0], [67.7, 1994.0], [67.8, 1997.0], [67.9, 2001.0], [68.0, 2004.0], [68.1, 2008.0], [68.2, 2011.0], [68.3, 2015.0], [68.4, 2018.0], [68.5, 2022.0], [68.6, 2025.0], [68.7, 2028.0], [68.8, 2032.0], [68.9, 2035.0], [69.0, 2039.0], [69.1, 2042.0], [69.2, 2046.0], [69.3, 2050.0], [69.4, 2053.0], [69.5, 2057.0], [69.6, 2061.0], [69.7, 2064.0], [69.8, 2068.0], [69.9, 2072.0], [70.0, 2076.0], [70.1, 2079.0], [70.2, 2084.0], [70.3, 2088.0], [70.4, 2091.0], [70.5, 2095.0], [70.6, 2099.0], [70.7, 2103.0], [70.8, 2107.0], [70.9, 2110.0], [71.0, 2114.0], [71.1, 2118.0], [71.2, 2122.0], [71.3, 2126.0], [71.4, 2130.0], [71.5, 2134.0], [71.6, 2138.0], [71.7, 2141.0], [71.8, 2145.0], [71.9, 2148.0], [72.0, 2152.0], [72.1, 2155.0], [72.2, 2158.0], [72.3, 2161.0], [72.4, 2165.0], [72.5, 2168.0], [72.6, 2170.0], [72.7, 2173.0], [72.8, 2176.0], [72.9, 2179.0], [73.0, 2183.0], [73.1, 2186.0], [73.2, 2190.0], [73.3, 2194.0], [73.4, 2198.0], [73.5, 2202.0], [73.6, 2206.0], [73.7, 2211.0], [73.8, 2217.0], [73.9, 2222.0], [74.0, 2227.0], [74.1, 2231.0], [74.2, 2236.0], [74.3, 2242.0], [74.4, 2248.0], [74.5, 2254.0], [74.6, 2260.0], [74.7, 2266.0], [74.8, 2272.0], [74.9, 2279.0], [75.0, 2285.0], [75.1, 2291.0], [75.2, 2297.0], [75.3, 2302.0], [75.4, 2308.0], [75.5, 2313.0], [75.6, 2319.0], [75.7, 2324.0], [75.8, 2331.0], [75.9, 2336.0], [76.0, 2342.0], [76.1, 2348.0], [76.2, 2354.0], [76.3, 2359.0], [76.4, 2364.0], [76.5, 2371.0], [76.6, 2377.0], [76.7, 2383.0], [76.8, 2390.0], [76.9, 2395.0], [77.0, 2402.0], [77.1, 2409.0], [77.2, 2416.0], [77.3, 2421.0], [77.4, 2427.0], [77.5, 2432.0], [77.6, 2438.0], [77.7, 2445.0], [77.8, 2451.0], [77.9, 2457.0], [78.0, 2463.0], [78.1, 2468.0], [78.2, 2475.0], [78.3, 2481.0], [78.4, 2487.0], [78.5, 2493.0], [78.6, 2497.0], [78.7, 2501.0], [78.8, 2506.0], [78.9, 2512.0], [79.0, 2518.0], [79.1, 2523.0], [79.2, 2530.0], [79.3, 2536.0], [79.4, 2543.0], [79.5, 2550.0], [79.6, 2557.0], [79.7, 2563.0], [79.8, 2570.0], [79.9, 2576.0], [80.0, 2582.0], [80.1, 2587.0], [80.2, 2593.0], [80.3, 2599.0], [80.4, 2604.0], [80.5, 2609.0], [80.6, 2615.0], [80.7, 2621.0], [80.8, 2626.0], [80.9, 2632.0], [81.0, 2638.0], [81.1, 2644.0], [81.2, 2649.0], [81.3, 2656.0], [81.4, 2662.0], [81.5, 2669.0], [81.6, 2675.0], [81.7, 2682.0], [81.8, 2689.0], [81.9, 2695.0], [82.0, 2701.0], [82.1, 2708.0], [82.2, 2714.0], [82.3, 2722.0], [82.4, 2729.0], [82.5, 2737.0], [82.6, 2746.0], [82.7, 2755.0], [82.8, 2764.0], [82.9, 2772.0], [83.0, 2782.0], [83.1, 2791.0], [83.2, 2800.0], [83.3, 2812.0], [83.4, 2822.0], [83.5, 2831.0], [83.6, 2840.0], [83.7, 2852.0], [83.8, 2861.0], [83.9, 2871.0], [84.0, 2881.0], [84.1, 2890.0], [84.2, 2900.0], [84.3, 2908.0], [84.4, 2916.0], [84.5, 2925.0], [84.6, 2935.0], [84.7, 2944.0], [84.8, 2953.0], [84.9, 2961.0], [85.0, 2969.0], [85.1, 2977.0], [85.2, 2987.0], [85.3, 2996.0], [85.4, 3006.0], [85.5, 3015.0], [85.6, 3025.0], [85.7, 3036.0], [85.8, 3046.0], [85.9, 3058.0], [86.0, 3068.0], [86.1, 3078.0], [86.2, 3089.0], [86.3, 3100.0], [86.4, 3110.0], [86.5, 3120.0], [86.6, 3132.0], [86.7, 3143.0], [86.8, 3152.0], [86.9, 3162.0], [87.0, 3172.0], [87.1, 3184.0], [87.2, 3195.0], [87.3, 3206.0], [87.4, 3216.0], [87.5, 3227.0], [87.6, 3236.0], [87.7, 3246.0], [87.8, 3256.0], [87.9, 3265.0], [88.0, 3275.0], [88.1, 3286.0], [88.2, 3298.0], [88.3, 3308.0], [88.4, 3318.0], [88.5, 3329.0], [88.6, 3339.0], [88.7, 3350.0], [88.8, 3360.0], [88.9, 3370.0], [89.0, 3381.0], [89.1, 3389.0], [89.2, 3400.0], [89.3, 3413.0], [89.4, 3424.0], [89.5, 3436.0], [89.6, 3447.0], [89.7, 3457.0], [89.8, 3468.0], [89.9, 3478.0], [90.0, 3492.0], [90.1, 3503.0], [90.2, 3513.0], [90.3, 3525.0], [90.4, 3538.0], [90.5, 3550.0], [90.6, 3564.0], [90.7, 3578.0], [90.8, 3593.0], [90.9, 3607.0], [91.0, 3624.0], [91.1, 3641.0], [91.2, 3657.0], [91.3, 3672.0], [91.4, 3687.0], [91.5, 3702.0], [91.6, 3720.0], [91.7, 3737.0], [91.8, 3754.0], [91.9, 3772.0], [92.0, 3789.0], [92.1, 3807.0], [92.2, 3826.0], [92.3, 3848.0], [92.4, 3871.0], [92.5, 3894.0], [92.6, 3916.0], [92.7, 3938.0], [92.8, 3958.0], [92.9, 3976.0], [93.0, 3998.0], [93.1, 4015.0], [93.2, 4034.0], [93.3, 4052.0], [93.4, 4070.0], [93.5, 4089.0], [93.6, 4106.0], [93.7, 4124.0], [93.8, 4145.0], [93.9, 4165.0], [94.0, 4180.0], [94.1, 4198.0], [94.2, 4218.0], [94.3, 4236.0], [94.4, 4257.0], [94.5, 4277.0], [94.6, 4299.0], [94.7, 4325.0], [94.8, 4346.0], [94.9, 4370.0], [95.0, 4393.0], [95.1, 4420.0], [95.2, 4451.0], [95.3, 4481.0], [95.4, 4510.0], [95.5, 4539.0], [95.6, 4569.0], [95.7, 4603.0], [95.8, 4640.0], [95.9, 4674.0], [96.0, 4715.0], [96.1, 4759.0], [96.2, 4808.0], [96.3, 4852.0], [96.4, 4894.0], [96.5, 4946.0], [96.6, 4987.0], [96.7, 5029.0], [96.8, 5064.0], [96.9, 5102.0], [97.0, 5147.0], [97.1, 5186.0], [97.2, 5231.0], [97.3, 5285.0], [97.4, 5333.0], [97.5, 5387.0], [97.6, 5449.0], [97.7, 5516.0], [97.8, 5600.0], [97.9, 5671.0], [98.0, 5749.0], [98.1, 5839.0], [98.2, 5949.0], [98.3, 6054.0], [98.4, 6161.0], [98.5, 6294.0], [98.6, 6414.0], [98.7, 6589.0], [98.8, 6803.0], [98.9, 7069.0], [99.0, 7314.0], [99.1, 7544.0], [99.2, 7739.0], [99.3, 7920.0], [99.4, 8184.0], [99.5, 8480.0], [99.6, 8818.0], [99.7, 9272.0], [99.8, 9751.0], [99.9, 10447.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 1000.0, "maxY": 62784.0, "series": [{"data": [[1000.0, 2208.0], [1100.0, 62784.0], [1200.0, 4020.0], [1300.0, 4199.0], [1400.0, 4298.0], [1500.0, 5211.0], [1600.0, 4297.0], [1700.0, 4804.0], [1800.0, 5075.0], [1900.0, 4963.0], [2000.0, 4108.0], [2100.0, 4238.0], [2300.0, 2583.0], [2200.0, 2716.0], [2400.0, 2543.0], [2500.0, 2492.0], [2600.0, 2490.0], [2700.0, 1823.0], [2800.0, 1509.0], [2900.0, 1701.0], [3000.0, 1450.0], [3100.0, 1410.0], [3200.0, 1468.0], [3300.0, 1465.0], [3400.0, 1311.0], [3500.0, 1173.0], [3600.0, 956.0], [3700.0, 849.0], [3800.0, 707.0], [3900.0, 727.0], [4000.0, 835.0], [4100.0, 819.0], [4200.0, 743.0], [4300.0, 638.0], [4400.0, 499.0], [4500.0, 492.0], [4600.0, 409.0], [4700.0, 334.0], [4800.0, 341.0], [5000.0, 390.0], [4900.0, 331.0], [5100.0, 355.0], [5300.0, 289.0], [5200.0, 301.0], [5400.0, 231.0], [5500.0, 184.0], [5600.0, 210.0], [5800.0, 143.0], [5700.0, 183.0], [6100.0, 131.0], [5900.0, 141.0], [6000.0, 145.0], [6200.0, 109.0], [6300.0, 126.0], [6400.0, 90.0], [6500.0, 89.0], [6600.0, 67.0], [6700.0, 68.0], [6900.0, 51.0], [6800.0, 62.0], [7100.0, 49.0], [7000.0, 55.0], [7300.0, 58.0], [7200.0, 74.0], [7400.0, 60.0], [7600.0, 76.0], [7500.0, 93.0], [7800.0, 80.0], [7900.0, 55.0], [7700.0, 82.0], [8000.0, 68.0], [8100.0, 47.0], [8600.0, 41.0], [8700.0, 33.0], [8300.0, 59.0], [8200.0, 46.0], [8400.0, 49.0], [8500.0, 53.0], [9000.0, 30.0], [9100.0, 39.0], [9200.0, 26.0], [8900.0, 31.0], [8800.0, 43.0], [9700.0, 40.0], [9500.0, 32.0], [9300.0, 35.0], [9600.0, 27.0], [9400.0, 25.0], [10200.0, 21.0], [9900.0, 26.0], [9800.0, 11.0], [10000.0, 24.0], [10100.0, 30.0], [10600.0, 17.0], [10300.0, 13.0], [10500.0, 19.0], [10400.0, 18.0], [10700.0, 8.0], [10800.0, 9.0], [10900.0, 6.0], [11000.0, 12.0], [11200.0, 4.0], [11100.0, 8.0], [11300.0, 7.0], [11400.0, 10.0], [11500.0, 6.0], [11600.0, 3.0], [11700.0, 5.0], [11900.0, 3.0], [12000.0, 3.0], [11800.0, 1.0], [12100.0, 2.0], [12200.0, 1.0], [12500.0, 4.0], [12300.0, 2.0], [12600.0, 1.0], [13000.0, 2.0], [13700.0, 1.0], [13400.0, 1.0], [14200.0, 1.0], [14000.0, 2.0], [14300.0, 2.0], [14500.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 14500.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 4.0, "minX": 1.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 77548.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 77548.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 72522.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 4.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 4.0, "minX": 1.68421398E12, "maxY": 3000.0, "series": [{"data": [[1.68421398E12, 3000.0], [1.68421428E12, 4.0], [1.6842141E12, 3000.0], [1.68421422E12, 2852.734713386291], [1.68421404E12, 3000.0], [1.68421416E12, 3000.0]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68421428E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 1094.0, "minX": 1.0, "maxY": 11755.0, "series": [{"data": [[2.0, 7593.0], [3.0, 5982.0], [4.0, 5753.0], [5.0, 5942.0], [6.0, 5874.0], [7.0, 5718.0], [8.0, 5019.0], [9.0, 4930.0], [10.0, 4981.0], [11.0, 5053.0], [12.0, 5031.0], [13.0, 2358.0], [14.0, 2104.0], [15.0, 2108.0], [16.0, 2150.0], [17.0, 2071.0], [18.0, 2082.0], [19.0, 2063.0], [20.0, 2093.0], [21.0, 2069.0], [24.0, 1110.0], [26.0, 1112.0], [29.0, 1115.0], [30.0, 1111.0], [31.0, 1113.0], [32.0, 1579.5], [34.0, 1110.0], [37.0, 1108.0], [39.0, 1600.0], [40.0, 2080.5], [43.0, 1107.0], [45.0, 1110.0], [44.0, 1107.0], [46.0, 1107.0], [48.0, 1588.0], [50.0, 1110.0], [53.0, 2115.0], [52.0, 1109.25], [55.0, 1109.0], [54.0, 1107.0], [58.0, 1107.25], [61.0, 1107.0], [63.0, 1106.0], [65.0, 1107.0], [64.0, 1108.0], [70.0, 1106.0], [69.0, 1104.5], [75.0, 1106.0], [73.0, 1105.0], [72.0, 1106.0], [79.0, 1103.5], [77.0, 1103.5], [81.0, 1102.5], [87.0, 1100.6666666666667], [85.0, 1104.3333333333333], [91.0, 1098.0], [90.0, 1103.0], [89.0, 1101.0], [95.0, 1099.0], [92.0, 1099.5], [99.0, 1102.0], [97.0, 1099.0], [96.0, 1097.0], [102.0, 1098.0], [101.0, 5160.0], [100.0, 1580.5], [107.0, 2048.0], [106.0, 2034.0], [105.0, 2027.0], [104.0, 1566.5], [111.0, 2027.0], [110.0, 2012.0], [109.0, 2011.0], [108.0, 2047.0], [115.0, 2053.0], [114.0, 2066.0], [113.0, 2029.0], [112.0, 2055.0], [119.0, 2036.0], [118.0, 2017.0], [117.0, 1998.0], [116.0, 2009.0], [122.0, 1985.0], [121.0, 2029.0], [120.0, 2023.0], [127.0, 2018.0], [126.0, 2009.0], [125.0, 2043.0], [124.0, 3578.5], [135.0, 1977.5], [133.0, 2007.0], [132.0, 1997.0], [131.0, 2049.0], [130.0, 1969.0], [129.0, 1990.0], [128.0, 1999.0], [143.0, 1991.0], [142.0, 1961.0], [141.0, 2014.0], [140.0, 1953.0], [139.0, 1956.0], [138.0, 1954.0], [137.0, 1977.0], [136.0, 2013.0], [151.0, 1935.0], [150.0, 2001.0], [149.0, 1959.0], [148.0, 2001.0], [147.0, 2007.5], [145.0, 1965.0], [144.0, 1954.0], [159.0, 1927.0], [157.0, 1998.0], [156.0, 1986.0], [155.0, 1997.0], [154.0, 1961.0], [153.0, 1940.0], [152.0, 1934.0], [167.0, 1956.0], [166.0, 1973.0], [164.0, 1976.0], [163.0, 1943.0], [162.0, 1951.0], [161.0, 1959.0], [160.0, 1984.0], [175.0, 1907.0], [174.0, 1876.0], [173.0, 1920.5], [171.0, 5029.0], [170.0, 1906.0], [169.0, 1910.0], [168.0, 1953.0], [183.0, 1930.0], [182.0, 1882.0], [179.0, 1885.0], [178.0, 1926.0], [177.0, 1901.5], [190.0, 1902.0], [189.0, 1839.0], [188.0, 1863.0], [187.0, 5079.0], [186.0, 1888.0], [185.0, 1861.0], [184.0, 1883.0], [199.0, 1913.0], [198.0, 1860.0], [197.0, 1819.0], [196.0, 1852.0], [195.0, 1962.0], [194.0, 1845.0], [193.0, 1849.0], [192.0, 1853.5], [207.0, 1932.0], [206.0, 3427.5], [205.0, 1857.0], [203.0, 1882.0], [202.0, 1897.0], [201.0, 1870.0], [200.0, 1859.0], [215.0, 1789.5], [213.0, 1803.0], [211.0, 1858.0], [210.0, 1886.0], [209.0, 1804.0], [208.0, 1810.0], [222.0, 1798.5], [220.0, 1827.5], [218.0, 1794.0], [217.0, 1841.0], [216.0, 1853.0], [231.0, 1626.0], [230.0, 1630.0], [229.0, 1756.0], [228.0, 1817.0], [227.0, 1770.0], [226.0, 1823.0], [225.0, 1807.0], [239.0, 1651.0], [238.0, 1580.0], [237.0, 1589.0], [236.0, 1607.0], [235.0, 1621.0], [234.0, 1616.0], [233.0, 1634.0], [232.0, 1615.0], [247.0, 1605.0], [245.0, 1592.0], [244.0, 1560.0], [243.0, 1708.0], [242.0, 1610.0], [241.0, 1570.0], [240.0, 1603.0], [255.0, 1555.0], [254.0, 1548.0], [253.0, 1562.0], [252.0, 1558.0], [251.0, 1553.0], [250.0, 1574.0], [249.0, 1545.0], [248.0, 1575.0], [269.0, 1616.5], [271.0, 1545.0], [268.0, 1560.0], [264.0, 1510.0], [263.0, 1549.0], [262.0, 1521.0], [261.0, 1526.0], [260.0, 1528.0], [259.0, 1571.3333333333333], [256.0, 1541.0], [275.0, 1553.0], [287.0, 1514.6666666666667], [284.0, 1483.5], [274.0, 1524.0], [273.0, 1585.0], [272.0, 1568.5], [283.0, 1483.0], [281.0, 1810.0], [280.0, 1560.0], [279.0, 1505.0], [278.0, 1562.0], [277.0, 1529.0], [276.0, 1567.0], [301.0, 1499.0], [302.0, 1429.0], [300.0, 1519.0], [291.0, 1548.0], [290.0, 1546.0], [289.0, 1583.0], [288.0, 1539.0], [299.0, 1553.0], [298.0, 1477.0], [296.0, 1489.0], [295.0, 1552.0], [294.0, 1483.0], [293.0, 1458.0], [292.0, 1510.0], [318.0, 1103.5], [316.0, 1110.0], [307.0, 1450.0], [306.0, 1449.0], [305.0, 1534.0], [304.0, 1483.5], [315.0, 1104.0], [314.0, 1112.0], [313.0, 1110.0], [312.0, 1107.0], [311.0, 1327.0], [310.0, 1304.0], [309.0, 8833.0], [308.0, 1331.0], [334.0, 1114.0], [335.0, 1104.0], [333.0, 1107.0], [332.0, 1111.0], [331.0, 1101.0], [330.0, 1111.0], [329.0, 1106.0], [328.0, 1120.0], [327.0, 1103.0], [322.0, 1108.5], [320.0, 1113.5], [326.0, 1102.0], [325.0, 1104.0], [324.0, 1113.5], [350.0, 1107.0], [351.0, 1111.5], [348.0, 1109.0], [339.0, 1106.0], [338.0, 1109.0], [337.0, 1104.5], [347.0, 1106.0], [346.0, 1115.0], [345.0, 1113.0], [344.0, 1109.5], [342.0, 1107.5], [340.0, 1107.0], [367.0, 1101.0], [366.0, 1109.3333333333333], [363.0, 1101.0], [362.0, 1104.0], [359.0, 1104.0], [358.0, 1119.0], [357.0, 1099.0], [356.0, 1107.5], [354.0, 1107.0], [382.0, 1100.0], [381.0, 1106.5], [379.0, 1107.0], [377.0, 1109.0], [374.0, 1110.0], [373.0, 1107.0], [370.0, 1116.0], [399.0, 1106.0], [397.0, 1105.0], [385.0, 1118.0], [384.0, 1112.5], [395.0, 1111.0], [394.0, 1100.0], [393.0, 1116.0], [392.0, 1104.0], [391.0, 1117.0], [390.0, 1102.0], [389.0, 1111.0], [388.0, 1108.6666666666667], [414.0, 1112.0], [410.0, 1115.0], [409.0, 1107.0], [407.0, 1098.0], [405.0, 1110.3333333333333], [402.0, 1115.0], [401.0, 1101.0], [400.0, 1107.0], [419.0, 1109.0], [430.0, 1112.5], [431.0, 1113.0], [428.0, 1105.0], [426.0, 1102.3333333333333], [423.0, 1108.0], [422.0, 1108.5], [420.0, 1099.0], [418.0, 1114.0], [416.0, 1105.5], [446.0, 1107.0], [444.0, 1100.5], [442.0, 1107.3333333333333], [439.0, 1104.3333333333333], [436.0, 1112.6666666666667], [435.0, 1109.0], [432.0, 1106.0], [462.0, 1113.0], [463.0, 1104.0], [460.0, 1105.0], [457.0, 1107.5], [456.0, 1107.0], [454.0, 1100.0], [453.0, 1113.0], [452.0, 1116.3333333333333], [451.0, 1107.5], [449.0, 1101.0], [472.0, 1107.0], [475.0, 1116.0], [474.0, 1103.0], [473.0, 1109.0], [471.0, 1109.5], [469.0, 1110.0], [468.0, 1109.5], [466.0, 1114.0], [465.0, 1105.5], [494.0, 1143.0], [495.0, 1112.0], [493.0, 1109.0], [492.0, 1115.0], [491.0, 1106.5], [489.0, 1109.0], [488.0, 1112.0], [487.0, 1108.0], [480.0, 1120.0], [482.0, 1112.5], [481.0, 1105.0], [486.0, 1103.0], [484.0, 1109.5], [510.0, 1107.0], [507.0, 1112.0], [506.0, 1098.0], [505.0, 1104.0], [503.0, 1116.0], [496.0, 1110.0], [502.0, 1100.0], [501.0, 1105.0], [500.0, 1111.0], [498.0, 1105.0], [497.0, 1108.0], [536.0, 1110.0], [540.0, 1115.0], [516.0, 1111.0], [514.0, 1104.3333333333333], [524.0, 1118.0], [520.0, 1119.5], [534.0, 1110.5], [530.0, 1114.0], [570.0, 1111.0], [572.0, 1121.0], [568.0, 1103.3333333333333], [562.0, 1128.5], [560.0, 1102.0], [546.0, 1111.0], [550.0, 1102.0], [552.0, 1105.0], [580.0, 1105.5], [604.0, 1111.3333333333333], [606.0, 1107.0], [582.0, 1107.0], [578.0, 1107.0], [590.0, 1110.3333333333333], [586.0, 1102.0], [584.0, 1100.0], [610.0, 1112.0], [626.0, 1109.0], [608.0, 1105.0], [612.0, 1110.5], [620.0, 1111.0], [618.0, 1106.0], [616.0, 1119.0], [630.0, 1108.0], [628.0, 1102.0], [624.0, 1104.0], [666.0, 1108.0], [668.0, 1112.0], [644.0, 1118.3333333333333], [642.0, 1107.0], [654.0, 1114.3333333333333], [662.0, 1104.3333333333333], [658.0, 1120.0], [690.0, 1106.5], [696.0, 1117.0], [694.0, 1116.0], [692.0, 1110.0], [688.0, 1122.0], [684.0, 1106.0], [732.0, 1114.0], [728.0, 1106.0], [724.0, 1104.75], [718.0, 1104.0], [704.0, 1107.3333333333333], [706.0, 1135.0], [710.0, 1126.5], [716.0, 1105.5], [712.0, 1113.0], [766.0, 1110.3333333333333], [756.0, 1110.0], [754.0, 1103.0], [752.0, 1102.0], [736.0, 1104.25], [738.0, 1102.0], [742.0, 1109.5], [740.0, 1113.5], [748.0, 1102.3333333333333], [744.0, 1103.5], [796.0, 1103.0], [798.0, 1105.0], [784.0, 1103.5], [786.0, 1110.0], [770.0, 1108.5], [768.0, 1107.0], [774.0, 1099.0], [772.0, 1105.0], [780.0, 1103.0], [778.0, 1101.0], [776.0, 1113.0], [790.0, 1099.5], [788.0, 1107.0], [826.0, 1102.0], [828.0, 1102.0], [824.0, 1102.0], [818.0, 1111.0], [806.0, 1109.5], [804.0, 1119.0], [810.0, 1103.5], [858.0, 1105.0], [862.0, 1105.0], [850.0, 1096.0], [848.0, 1101.0], [852.0, 1102.0], [860.0, 1110.0], [856.0, 1104.3333333333333], [838.0, 1105.0], [834.0, 1111.0], [832.0, 1104.3333333333333], [846.0, 1102.5], [844.0, 1106.0], [842.0, 1099.0], [840.0, 1107.0], [854.0, 1105.0], [888.0, 1103.3333333333333], [890.0, 1149.0], [866.0, 1103.6666666666667], [870.0, 1117.0], [878.0, 1099.0], [876.0, 1108.0], [874.0, 1107.0], [884.0, 1104.3333333333333], [920.0, 1102.0], [922.0, 1105.5], [926.0, 1105.0], [914.0, 1103.0], [902.0, 1111.0], [900.0, 1104.0], [910.0, 1103.0], [908.0, 1094.0], [904.0, 1102.5], [918.0, 1104.0], [916.0, 1110.0], [958.0, 1103.5], [954.0, 1108.5], [950.0, 1108.5], [946.0, 1104.5], [942.0, 1108.6666666666667], [928.0, 1113.0], [932.0, 1111.0], [934.0, 1102.5], [984.0, 1108.0], [986.0, 1114.5], [960.0, 1102.0], [982.0, 1100.5], [980.0, 1099.0], [976.0, 1102.0], [972.0, 1103.5], [1020.0, 1101.6666666666667], [1012.0, 1102.0], [1016.0, 1105.5], [1006.0, 1104.0], [992.0, 1108.0], [994.0, 1105.0], [996.0, 1109.0], [1004.0, 1107.0], [1000.0, 1103.0], [1014.0, 1107.0], [1010.0, 1107.0], [1008.0, 1107.0], [1084.0, 1103.0], [1064.0, 1108.3333333333333], [1080.0, 1099.0], [1060.0, 1106.0], [1072.0, 1105.3333333333333], [1024.0, 1107.0], [1068.0, 1108.0], [1144.0, 1784.5], [1136.0, 1789.0], [1120.0, 1813.5], [1088.0, 1100.0], [1096.0, 1912.0], [1100.0, 1871.0], [1116.0, 1812.0], [1104.0, 1849.0], [1132.0, 1818.0], [1128.0, 1787.0], [1124.0, 1792.0], [1208.0, 1316.0], [1212.0, 1293.0], [1204.0, 8254.0], [1200.0, 1736.0], [1164.0, 1755.0], [1156.0, 1777.0], [1152.0, 1812.0], [1196.0, 1722.3333333333333], [1188.0, 1735.3333333333333], [1184.0, 1762.0], [1180.0, 1772.0], [1172.0, 1756.0], [1248.0, 1108.0], [1276.0, 1118.0], [1252.0, 1105.0], [1264.0, 1108.0], [1224.0, 1110.0], [1216.0, 1314.0], [1244.0, 1112.0], [1260.0, 1103.5], [1256.0, 1109.0], [1288.0, 1110.0], [1320.0, 1105.5], [1340.0, 4399.5], [1336.0, 1099.0], [1284.0, 1109.0], [1308.0, 1111.5], [1304.0, 1107.0], [1300.0, 1108.0], [1324.0, 1106.0], [1316.0, 1106.5], [1312.0, 1104.5], [1360.0, 1104.0], [1420.0, 1113.5], [1464.0, 1122.5], [1460.0, 1118.0], [1456.0, 1115.5], [1416.0, 1102.0], [1412.0, 1107.0], [1432.0, 1113.0], [1424.0, 1108.0], [1448.0, 1113.3333333333333], [1520.0, 1121.0], [1532.0, 1131.0], [1504.0, 1140.0], [1508.0, 1127.0], [1480.0, 1121.5], [1472.0, 1118.0], [1500.0, 1125.0], [1496.0, 1122.5], [1492.0, 1119.0], [1488.0, 1115.0], [1512.0, 1126.0], [1592.0, 1321.0], [1568.0, 1109.0], [1596.0, 1111.0], [1576.0, 1103.3333333333333], [1584.0, 1107.0], [1540.0, 1128.0], [1548.0, 1120.0], [1560.0, 1110.0], [1652.0, 1102.3333333333333], [1636.0, 1101.5], [1640.0, 1115.0], [1660.0, 1104.0], [1608.0, 1105.0], [1604.0, 1108.0], [1600.0, 1106.0], [1628.0, 1106.0], [1616.0, 1113.5], [1716.0, 1107.3333333333333], [1700.0, 1105.0], [1704.0, 1109.0], [1708.0, 1106.5], [1712.0, 1106.25], [1676.0, 1105.3333333333333], [1672.0, 1108.0], [1692.0, 1100.5], [1688.0, 1105.0], [1684.0, 1105.3333333333333], [1788.0, 1104.0], [1764.0, 1113.0], [1768.0, 1106.3333333333333], [1772.0, 1102.0], [1780.0, 1105.5], [1740.0, 1117.0], [1736.0, 1104.0], [1728.0, 1114.0], [1752.0, 1102.0], [1748.0, 1103.0], [1848.0, 1113.0], [1824.0, 1104.6666666666667], [1828.0, 1103.6666666666667], [1852.0, 1100.0], [1840.0, 1109.5], [1800.0, 1106.0], [1792.0, 1101.5], [1820.0, 1114.5], [1816.0, 1104.0], [1808.0, 1101.5], [1868.0, 1100.6666666666667], [1916.0, 1104.3333333333333], [1896.0, 1105.75], [1892.0, 1102.8333333333333], [1856.0, 1106.0], [1884.0, 1104.0], [1880.0, 1115.0], [1876.0, 1099.5], [1976.0, 1103.0], [1960.0, 1108.0], [1968.0, 1108.5], [1920.0, 1104.75], [1928.0, 1113.0], [1932.0, 1102.0], [1936.0, 1105.0], [2040.0, 1105.0], [2016.0, 1106.0], [2036.0, 1106.0], [1984.0, 1108.0], [1992.0, 1109.0], [1996.0, 1108.0], [2000.0, 1111.0], [2144.0, 1107.0], [2152.0, 1104.0], [2160.0, 1104.0], [2112.0, 1103.0], [2120.0, 1100.0], [2056.0, 1105.8], [2072.0, 1105.0], [2096.0, 1107.0], [2088.0, 1332.0], [2080.0, 1103.0], [2136.0, 1110.3333333333333], [2192.0, 1103.0], [2240.0, 1104.0], [2248.0, 1106.5], [2256.0, 1113.0], [2264.0, 1105.4], [2184.0, 1104.5], [2232.0, 1104.5], [2216.0, 1100.0], [2208.0, 1105.25], [2368.0, 1099.0], [2376.0, 1097.0], [2392.0, 1101.75], [2304.0, 1106.0], [2360.0, 1105.0], [2336.0, 1100.0], [2496.0, 1105.0], [2520.0, 1102.0], [2544.0, 1106.0], [2528.0, 1107.5], [2440.0, 1103.6666666666667], [2448.0, 1105.0], [2464.0, 1100.6666666666667], [2624.0, 1103.6666666666667], [2656.0, 1106.0], [2632.0, 1113.0], [2584.0, 1173.0], [2608.0, 1107.0], [2600.0, 1102.5], [2592.0, 1104.0], [2800.0, 1099.0], [2704.0, 1101.0], [2744.0, 1121.0], [2736.0, 1104.0], [2728.0, 1104.0], [2720.0, 1106.0], [2936.0, 1104.0], [2928.0, 1101.0], [2888.0, 1104.6], [2880.0, 1102.25], [2896.0, 1103.5], [2904.0, 1103.5], [2912.0, 1106.0], [2832.0, 1115.0], [2856.0, 1106.0000000000002], [2848.0, 1110.0], [2944.0, 1108.0], [3000.0, 1964.0721195053259], [2952.0, 1107.5], [2960.0, 1106.0], [2984.0, 1109.0], [2976.0, 1101.3333333333333], [2161.0, 1108.0], [2113.0, 1105.0], [2121.0, 1110.0], [2129.0, 1106.0], [2137.0, 1106.0], [2169.0, 1108.0], [2153.0, 1100.0], [2145.0, 1104.0], [2073.0, 1104.0], [2057.0, 1101.0], [2049.0, 1107.0], [2105.0, 1105.5], [2097.0, 1106.0], [2081.0, 1099.0], [2289.0, 1109.0], [2297.0, 1105.5], [2241.0, 1102.0], [2257.0, 1111.0], [2281.0, 1104.0], [2273.0, 1107.0], [2201.0, 1106.0], [2177.0, 1101.0], [2225.0, 1099.0], [2217.0, 1100.0], [2209.0, 1100.0], [2369.0, 1106.0], [2377.0, 1101.5], [2425.0, 1106.6666666666667], [2385.0, 1114.0], [2393.0, 1094.0], [2329.0, 1102.0], [2313.0, 1106.0], [2305.0, 1105.0], [2537.0, 1102.6666666666667], [2497.0, 1124.0], [2553.0, 1101.0], [2505.0, 1105.5], [2513.0, 1102.6666666666667], [2433.0, 1109.0], [2449.0, 1107.5], [2457.0, 1101.0], [2489.0, 1104.0], [2681.0, 1121.0], [2649.0, 1104.5], [2657.0, 1101.0], [2569.0, 1109.0], [2577.0, 1105.6666666666667], [2585.0, 1123.0], [2809.0, 1110.0], [2761.0, 1099.0], [2769.0, 1114.0], [2745.0, 1104.5], [2737.0, 1100.0], [2929.0, 1102.0], [2881.0, 1106.0], [2889.0, 1104.0], [2905.0, 1103.0], [2921.0, 1102.0], [2913.0, 1114.0], [2833.0, 1113.0], [2873.0, 1116.0], [2865.0, 1107.0], [2945.0, 1108.0], [2953.0, 1103.0], [2993.0, 1101.0], [2969.0, 1108.3333333333333], [2977.0, 1107.0], [1081.0, 1103.0], [1085.0, 1103.0], [1069.0, 1109.0], [1065.0, 1152.1904761904761], [1033.0, 1100.5], [1141.0, 1797.3333333333333], [1149.0, 1785.6666666666667], [1137.0, 1776.0], [1101.0, 1929.0], [1097.0, 1943.0], [1093.0, 2055.0], [1089.0, 1097.0], [1133.0, 1790.5], [1129.0, 1790.0], [1121.0, 1846.0], [1113.0, 1820.0], [1109.0, 1870.0], [1209.0, 1305.0], [1213.0, 7857.0], [1185.0, 1784.5], [1189.0, 1717.0], [1201.0, 1692.0], [1161.0, 1778.0], [1157.0, 1778.0], [1177.0, 1771.75], [1169.0, 1758.0], [1197.0, 1711.0], [1193.0, 1744.6666666666667], [1265.0, 1102.5], [1253.0, 1106.0], [1273.0, 1097.0], [1269.0, 1108.0], [1245.0, 1115.0], [1221.0, 1122.6], [1229.0, 1104.5], [1241.0, 1103.0], [1237.0, 1120.0], [1233.0, 1108.6666666666667], [1257.0, 1115.0], [1249.0, 1118.0], [1333.0, 1107.5], [1329.0, 1107.0], [1337.0, 1110.3333333333333], [1281.0, 1112.5], [1289.0, 1106.0], [1293.0, 1102.5], [1301.0, 1111.0], [1321.0, 1116.0], [1313.0, 1106.0], [1381.0, 1108.5], [1397.0, 1105.3333333333333], [1389.0, 1119.5], [1377.0, 1113.5], [1373.0, 1105.0], [1417.0, 1103.0], [1469.0, 1117.5], [1441.0, 1113.0], [1461.0, 1115.6666666666667], [1413.0, 1105.5], [1437.0, 1108.5], [1433.0, 1111.0], [1425.0, 1110.5], [1453.0, 1121.5], [1445.0, 1112.5], [1521.0, 1130.5], [1525.0, 1129.5], [1529.0, 1130.0], [1509.0, 1119.5], [1485.0, 1122.0], [1477.0, 1127.0], [1473.0, 1118.6666666666667], [1501.0, 1125.0], [1497.0, 1125.0], [1493.0, 1126.0], [1513.0, 1133.0], [1597.0, 1109.0], [1569.0, 1105.0], [1573.0, 1108.0], [1581.0, 1108.0], [1593.0, 7522.0], [1565.0, 1111.4285714285716], [1541.0, 1133.5], [1537.0, 1132.0], [1561.0, 1109.0], [1653.0, 1102.0], [1641.0, 1109.0], [1649.0, 1107.0], [1613.0, 1105.0], [1625.0, 1104.75], [1621.0, 1108.0], [1617.0, 1105.0], [1717.0, 1104.0], [1697.0, 1105.0], [1701.0, 1100.0], [1705.0, 1100.0], [1725.0, 1101.0], [1713.0, 1100.0], [1677.0, 1107.0], [1673.0, 1101.5], [1665.0, 1098.0], [1693.0, 1101.0], [1689.0, 1100.0], [1681.0, 1105.0], [1785.0, 1102.0], [1789.0, 1103.0], [1761.0, 1098.0], [1769.0, 1104.0], [1777.0, 1104.5], [1741.0, 1100.0], [1733.0, 1103.0], [1753.0, 1106.5], [1745.0, 1107.0], [1853.0, 1102.0], [1825.0, 4255.5], [1849.0, 1103.0], [1845.0, 1100.5], [1841.0, 1107.0], [1797.0, 1096.0], [1813.0, 1102.0], [1905.0, 1102.0], [1889.0, 1107.0], [1897.0, 1104.0], [1913.0, 1104.0], [1865.0, 1105.5], [1881.0, 1103.0], [1877.0, 1108.5], [1873.0, 1104.0], [1901.0, 1104.0], [1953.0, 1102.0], [1961.0, 1112.5], [1969.0, 1097.0], [1921.0, 1098.0], [1949.0, 1103.0], [1941.0, 1105.5], [1937.0, 1103.0], [1965.0, 1113.0], [2033.0, 1106.0], [2045.0, 1110.6666666666667], [2017.0, 1100.0], [2025.0, 1104.0], [1985.0, 1102.0], [1993.0, 1103.0], [2005.0, 1106.0], [2001.0, 1102.0], [2114.0, 1101.3333333333333], [2162.0, 1099.0], [2122.0, 1101.0], [2130.0, 1103.0], [2050.0, 1107.6666666666667], [2066.0, 1107.5], [2074.0, 1100.0], [2106.0, 1105.0], [2090.0, 1310.0], [2274.0, 1104.0], [2298.0, 1103.0], [2242.0, 1106.5], [2250.0, 1100.3333333333333], [2258.0, 1105.0], [2194.0, 1100.0], [2186.0, 1100.0], [2234.0, 1105.3333333333333], [2226.0, 1098.0], [2410.0, 1104.5], [2386.0, 1107.0], [2370.0, 1102.0], [2378.0, 1098.0], [2402.0, 1100.3333333333333], [2330.0, 1119.0], [2322.0, 1106.6666666666667], [2314.0, 1104.0], [2346.0, 1101.5], [2338.0, 1107.0], [2530.0, 1106.6666666666667], [2498.0, 1104.0], [2554.0, 1106.0], [2506.0, 1100.0], [2522.0, 1106.0], [2442.0, 1115.0], [2450.0, 1100.0], [2482.0, 1110.3333333333333], [2474.0, 1108.5], [2466.0, 1104.5], [2570.0, 1104.6666666666665], [2682.0, 1099.0], [2650.0, 1102.6666666666667], [2666.0, 1103.6666666666667], [2562.0, 1107.0], [2586.0, 1114.0], [2618.0, 1103.0], [2610.0, 1105.3333333333333], [2594.0, 1105.0], [2810.0, 1109.0], [2762.0, 1099.5], [2794.0, 1103.5], [2698.0, 1105.5], [2738.0, 1100.0], [2930.0, 1114.0], [2882.0, 1103.5], [2890.0, 1114.0], [2898.0, 1109.6666666666667], [2938.0, 1106.875], [2922.0, 1104.75], [2826.0, 1102.0], [2874.0, 1105.0], [2866.0, 1103.0], [2858.0, 1108.3333333333333], [2850.0, 1103.0], [2962.0, 1113.0], [2970.0, 1104.0], [2986.0, 1108.0], [2059.0, 1106.0], [2115.0, 1106.0], [2155.0, 1106.0], [2067.0, 1106.5], [2051.0, 1102.0], [2099.0, 1110.0], [2091.0, 1319.0], [2083.0, 1102.5], [2275.0, 1101.0], [2291.0, 1106.0], [2251.0, 1108.0], [2267.0, 1103.3333333333333], [2187.0, 1105.0], [2235.0, 1101.0], [2219.0, 1102.5], [2211.0, 1100.5], [2323.0, 1104.0], [2419.0, 1102.5], [2371.0, 1104.0], [2387.0, 1105.0], [2307.0, 1112.0], [2363.0, 1101.3333333333333], [2355.0, 1102.5], [2347.0, 1106.0], [2339.0, 1101.0], [2507.0, 1101.5], [2547.0, 1103.3333333333333], [2523.0, 1103.0], [2555.0, 1101.0], [2539.0, 1103.0], [2435.0, 1101.0], [2475.0, 1103.0], [2667.0, 1105.0], [2635.0, 1116.0], [2563.0, 1109.0], [2579.0, 1098.5], [2587.0, 1130.0], [2619.0, 1099.0], [2603.0, 1103.3333333333333], [2803.0, 1105.0], [2811.0, 1107.0], [2739.0, 1106.0], [2939.0, 1100.0], [2931.0, 1113.0], [2883.0, 1097.0], [2891.0, 1100.0], [2915.0, 1103.0], [2835.0, 1103.0], [2875.0, 1103.0], [2867.0, 1106.0], [2947.0, 1104.6666666666665], [2955.0, 1101.5], [543.0, 1103.0], [531.0, 1101.0], [541.0, 1104.75], [527.0, 1106.0], [513.0, 1102.0], [523.0, 1109.75], [535.0, 1109.0], [533.0, 1107.0], [549.0, 1108.0], [575.0, 1120.0], [565.0, 1118.5], [563.0, 1104.0], [559.0, 1110.25], [545.0, 1122.0], [547.0, 1105.0], [551.0, 1109.0], [555.0, 1108.0], [583.0, 1109.5], [601.0, 1132.0], [577.0, 1115.0], [597.0, 1102.0], [595.0, 1120.0], [593.0, 1107.0], [591.0, 1106.0], [587.0, 1111.5], [633.0, 1103.0], [639.0, 1106.0], [637.0, 1103.0], [635.0, 1110.3333333333333], [623.0, 1110.6666666666667], [613.0, 1104.0], [619.0, 1112.0], [617.0, 1121.5], [631.0, 1109.0], [625.0, 1105.0], [647.0, 1119.5], [669.0, 1121.5], [671.0, 1106.0], [665.0, 1115.0], [643.0, 1108.0], [655.0, 1128.0], [651.0, 1117.0], [649.0, 1132.0], [663.0, 1117.0], [661.0, 1112.0], [677.0, 1109.0], [701.0, 1103.0], [699.0, 1111.6666666666667], [679.0, 1124.0], [675.0, 1119.0], [673.0, 1109.0], [693.0, 1103.0], [687.0, 1125.6666666666667], [683.0, 1117.0], [681.0, 1114.2], [731.0, 1108.0], [729.0, 1102.0], [727.0, 1122.0], [725.0, 1111.0], [721.0, 1114.5], [705.0, 1097.0], [707.0, 1105.0], [715.0, 1097.0], [713.0, 1105.0], [767.0, 1106.0], [763.0, 1107.3333333333333], [761.0, 1103.0], [751.0, 1127.6666666666667], [737.0, 1102.0], [745.0, 1100.0], [799.0, 1101.0], [785.0, 1103.0], [797.0, 1106.0], [795.0, 1103.5], [793.0, 1105.5], [783.0, 1099.0], [777.0, 1109.5], [791.0, 1108.0], [787.0, 1104.5], [831.0, 1103.0], [823.0, 1102.0], [821.0, 1104.3333333333333], [817.0, 1104.6666666666667], [815.0, 1097.0], [803.0, 1107.0], [801.0, 1105.0], [813.0, 1106.3333333333333], [811.0, 1105.0], [809.0, 1104.0], [859.0, 1111.0], [863.0, 1103.0], [851.0, 1110.0], [861.0, 1103.0], [839.0, 1099.0], [837.0, 1098.0], [847.0, 1101.0], [841.0, 1109.5], [853.0, 1103.5], [889.0, 1104.0], [893.0, 1098.0], [895.0, 1107.0], [891.0, 1114.0], [879.0, 1110.0], [869.0, 1103.5], [867.0, 1096.0], [871.0, 1111.0], [873.0, 1102.0], [885.0, 1103.0], [881.0, 1103.5], [923.0, 1111.0], [915.0, 1105.0], [925.0, 1109.0], [913.0, 1104.3333333333333], [901.0, 1105.0], [899.0, 1114.5], [897.0, 1106.5], [909.0, 1113.0], [907.0, 1100.5], [905.0, 1105.0], [919.0, 1102.0], [959.0, 1103.0], [955.0, 1106.0], [951.0, 1105.0], [929.0, 1107.0], [931.0, 1106.0], [935.0, 1107.0], [939.0, 1110.0], [937.0, 1103.5], [967.0, 1105.0], [979.0, 1104.0], [965.0, 1108.3333333333333], [963.0, 1097.0], [961.0, 1104.0], [983.0, 1098.0], [977.0, 1096.0], [975.0, 1101.0], [969.0, 1107.0], [1021.0, 1101.5], [1023.0, 1098.5], [995.0, 1107.0], [999.0, 1107.0], [1005.0, 1104.5], [1003.0, 1104.0], [1015.0, 1109.0], [1013.0, 1100.3333333333333], [1078.0, 1107.5], [1058.0, 1107.0], [1074.0, 1101.0], [1034.0, 1098.0], [1030.0, 1101.0], [1070.0, 1100.6666666666667], [1066.0, 1109.0], [1142.0, 1793.0], [1146.0, 1790.5], [1150.0, 1828.0], [1122.0, 1792.0], [1138.0, 1799.0], [1118.0, 1840.0], [1094.0, 2023.0], [1090.0, 1103.0], [1098.0, 1860.0], [1102.0, 1859.0], [1114.0, 1867.5], [1110.0, 1816.0], [1106.0, 1838.5], [1134.0, 1842.0], [1158.0, 1797.5], [1166.0, 1754.0], [1214.0, 1277.0], [1162.0, 1778.0], [1154.0, 1767.5], [1182.0, 1732.5], [1178.0, 1750.0], [1170.0, 1802.0], [1266.0, 1110.0], [1254.0, 1113.0], [1278.0, 1105.0], [1270.0, 1107.0], [1230.0, 1101.0], [1226.0, 1102.5], [1222.0, 1104.0], [1246.0, 1101.0], [1234.0, 1103.0], [1262.0, 1103.5], [1330.0, 1113.0], [1338.0, 1105.0], [1310.0, 1113.0], [1294.0, 1099.0], [1290.0, 1111.0], [1302.0, 1101.0], [1326.0, 1105.0], [1322.0, 1109.0], [1382.0, 1103.0], [1374.0, 1110.5], [1354.0, 1110.0], [1458.0, 1124.5], [1470.0, 1117.0], [1418.0, 1106.5], [1414.0, 1112.0], [1426.0, 1106.0], [1454.0, 1122.3333333333333], [1450.0, 1112.0], [1442.0, 1126.0], [1530.0, 1132.0], [1510.0, 1128.0], [1534.0, 1133.0], [1506.0, 1123.0], [1526.0, 1126.0], [1478.0, 1121.0], [1474.0, 1126.0], [1502.0, 1134.0], [1518.0, 1123.0], [1514.0, 1131.25], [1598.0, 1109.0], [1570.0, 1108.0], [1574.0, 1110.0], [1578.0, 1105.0], [1582.0, 1106.0], [1594.0, 1124.0], [1590.0, 1103.8], [1562.0, 1114.0], [1538.0, 1131.0], [1542.0, 1240.0], [1558.0, 1110.0], [1554.0, 1116.0], [1654.0, 1097.0], [1658.0, 1102.0], [1662.0, 1101.5], [1634.0, 1103.75], [1642.0, 1107.0], [1646.0, 1101.0], [1650.0, 1105.0], [1614.0, 1111.5], [1610.0, 1102.5], [1606.0, 1111.0], [1602.0, 1113.5], [1630.0, 1110.5], [1622.0, 1108.5], [1618.0, 1104.0], [1722.0, 1115.0], [1726.0, 1102.0], [1698.0, 1105.5], [1702.0, 1105.0], [1718.0, 1105.0], [1670.0, 1111.3333333333333], [1666.0, 1103.0], [1686.0, 1103.6666666666667], [1682.0, 1109.0], [1742.0, 1106.0], [1778.0, 1117.0], [1786.0, 1101.0], [1762.0, 1101.5], [1770.0, 1104.0], [1774.0, 1108.0], [1738.0, 1102.0], [1734.0, 1105.6666666666667], [1730.0, 1099.0], [1758.0, 1107.3333333333333], [1754.0, 1100.0], [1746.0, 1104.0], [1846.0, 1100.0], [1850.0, 1106.0], [1834.0, 1106.0], [1838.0, 1108.0], [1842.0, 1102.0], [1806.0, 1100.0], [1802.0, 1103.5], [1794.0, 1103.0], [1810.0, 1100.3333333333333], [1910.0, 1106.3333333333333], [1898.0, 1102.0], [1862.0, 1106.3333333333333], [1858.0, 1113.0], [1886.0, 1110.0], [1902.0, 1102.0], [1974.0, 1112.75], [1978.0, 1103.0], [1982.0, 1104.3333333333333], [1954.0, 1108.0], [1958.0, 1105.5], [1962.0, 1107.0], [1926.0, 1104.3333333333333], [1930.0, 1106.0], [1946.0, 1106.0], [1942.0, 1115.0], [1938.0, 1102.5], [1966.0, 1104.3333333333333], [2042.0, 1111.3333333333333], [2046.0, 1100.0], [2022.0, 1106.0], [2018.0, 1110.0], [2038.0, 1105.0], [2014.0, 1106.0], [1986.0, 1100.0], [1994.0, 1111.0], [2010.0, 1106.5], [2030.0, 1105.0], [2164.0, 1104.5], [2172.0, 1104.3333333333333], [2116.0, 1105.0], [2124.0, 1106.5], [2132.0, 1102.0], [2156.0, 1100.0], [2108.0, 1103.0], [2068.0, 1101.0], [2076.0, 1107.5], [2100.0, 1109.5], [2092.0, 1307.0], [2084.0, 1103.0], [2140.0, 1103.0], [2276.0, 1102.0], [2292.0, 1104.0], [2252.0, 1102.0], [2300.0, 1110.0], [2284.0, 1102.0], [2204.0, 1106.0], [2196.0, 1102.0], [2180.0, 1096.0], [2236.0, 1101.0], [2228.0, 1104.5], [2404.0, 1101.0], [2388.0, 1107.0], [2396.0, 1106.3333333333333], [2332.0, 1104.5], [2316.0, 1110.0], [2340.0, 1110.0], [2540.0, 1103.0], [2556.0, 1107.0], [2508.0, 1106.0], [2516.0, 1108.5], [2444.0, 1099.5], [2452.0, 1113.0], [2492.0, 1100.0], [2476.0, 1102.5], [2468.0, 1107.0], [2588.0, 1119.0], [2660.0, 1100.5], [2644.0, 1126.0], [2676.0, 1104.3333333333333], [2564.0, 1106.0], [2620.0, 1098.0], [2604.0, 1106.0], [2596.0, 1114.0], [2692.0, 1102.0], [2764.0, 1101.6666666666667], [2748.0, 1103.6666666666667], [2740.0, 1103.6666666666667], [2724.0, 1109.0], [2924.0, 1111.0], [2884.0, 1103.0], [2892.0, 1099.0], [2900.0, 1113.0], [2908.0, 1101.0], [2916.0, 1100.5], [2836.0, 1112.0], [2876.0, 1098.0], [2860.0, 1111.0], [2852.0, 1111.5], [2948.0, 1098.0], [2964.0, 1104.6666666666667], [2972.0, 1105.5], [2996.0, 1101.6666666666667], [2988.0, 1104.5], [2980.0, 1110.0], [2157.0, 1099.0], [2117.0, 1104.0], [2141.0, 1098.0], [2173.0, 1111.0], [2149.0, 1102.25], [2069.0, 1107.0], [2061.0, 1105.5], [2109.0, 1177.0], [2093.0, 1324.0], [2085.0, 1101.0], [2285.0, 1103.0], [2245.0, 1107.0], [2253.0, 1106.0], [2261.0, 1104.0], [2269.0, 1100.0], [2293.0, 1100.0], [2277.0, 1102.0], [2197.0, 1105.0], [2189.0, 1101.6666666666667], [2181.0, 1105.0], [2237.0, 1104.0], [2221.0, 1103.5], [2429.0, 1105.0], [2373.0, 1101.0], [2381.0, 1105.3333333333333], [2397.0, 1109.0], [2413.0, 1102.75], [2405.0, 1111.0], [2333.0, 1102.0], [2325.0, 1112.5], [2309.0, 1107.5], [2357.0, 1104.0], [2549.0, 1099.0], [2501.0, 1111.5], [2509.0, 1103.0], [2517.0, 1109.0], [2541.0, 1107.0], [2533.0, 1105.0], [2437.0, 1105.0], [2493.0, 1106.0], [2685.0, 1099.0], [2637.0, 1109.5], [2661.0, 1108.0], [2573.0, 1103.5], [2581.0, 1100.0], [2605.0, 1116.0], [2597.0, 1104.5], [2717.0, 1118.0], [2805.0, 1113.0], [2813.0, 1100.0], [2789.0, 1107.0], [2709.0, 1105.0], [2701.0, 1103.0], [2693.0, 1114.0], [2725.0, 1104.0], [2925.0, 1111.6666666666667], [2941.0, 1107.6666666666667], [2885.0, 1105.5], [2901.0, 1104.0], [2909.0, 1101.5], [2933.0, 1102.6], [2917.0, 1110.0], [2837.0, 1113.0], [2829.0, 1101.0], [2877.0, 1105.3333333333333], [2869.0, 1101.0], [2861.0, 1103.0], [2853.0, 1108.6666666666667], [2973.0, 1105.0], [2997.0, 1103.0], [2981.0, 1107.5], [1087.0, 1104.0], [1083.0, 1104.0], [1075.0, 1107.0], [1047.0, 1113.0], [1031.0, 1104.0], [1027.0, 1105.0], [1095.0, 2013.0], [1103.0, 1842.0], [1127.0, 1837.3333333333333], [1099.0, 1892.0], [1091.0, 1099.6666666666667], [1135.0, 1810.0], [1115.0, 1810.0], [1111.0, 1853.0], [1107.0, 1830.0], [1207.0, 1370.0], [1215.0, 1317.0], [1191.0, 1713.0], [1211.0, 1297.0], [1203.0, 1717.5], [1167.0, 1762.0], [1163.0, 1778.0], [1179.0, 1787.0], [1175.0, 1752.0], [1171.0, 1784.0], [1227.0, 1106.0], [1271.0, 1110.0], [1223.0, 1113.0], [1243.0, 1104.0], [1239.0, 1127.0], [1259.0, 1101.0], [1255.0, 1106.0], [1251.0, 1111.5], [1331.0, 1104.0], [1315.0, 1102.0], [1303.0, 1121.0], [1287.0, 1109.0], [1283.0, 1114.0], [1291.0, 1108.3333333333333], [1295.0, 1104.0], [1299.0, 1106.25], [1323.0, 1109.0], [1319.0, 1105.0], [1399.0, 1107.0], [1403.0, 1106.6666666666667], [1355.0, 1111.0], [1347.0, 1108.0], [1391.0, 1110.0], [1387.0, 1105.5], [1375.0, 1108.0], [1363.0, 1104.0], [1459.0, 1114.0], [1471.0, 1117.0], [1467.0, 1123.0], [1463.0, 1116.0], [1439.0, 1115.0], [1423.0, 1113.0], [1419.0, 1102.0], [1435.0, 1115.0], [1431.0, 1116.0], [1427.0, 1107.25], [1455.0, 1108.0], [1451.0, 1113.5], [1527.0, 1138.0], [1511.0, 1131.3333333333333], [1535.0, 1135.0], [1507.0, 1129.0], [1487.0, 1119.25], [1483.0, 1119.5], [1479.0, 1118.0], [1475.0, 1122.0], [1503.0, 1133.0], [1499.0, 1123.3333333333333], [1495.0, 1124.0], [1491.0, 1126.5714285714284], [1519.0, 1133.0], [1515.0, 1128.0], [1571.0, 1109.5], [1599.0, 1111.0], [1583.0, 1104.0], [1595.0, 1109.0], [1591.0, 1328.0], [1587.0, 1104.5], [1543.0, 1132.0], [1639.0, 1104.0], [1659.0, 1103.75], [1643.0, 1107.0], [1647.0, 1097.0], [1611.0, 1100.0], [1607.0, 1104.6666666666667], [1631.0, 1101.0], [1627.0, 1107.0], [1719.0, 1107.0], [1723.0, 1102.5], [1727.0, 1097.5], [1707.0, 1108.0], [1679.0, 1103.0], [1671.0, 1103.0], [1691.0, 1101.0], [1687.0, 1107.0], [1791.0, 1102.0], [1767.0, 1113.0], [1783.0, 1101.0], [1743.0, 1112.0], [1739.0, 1100.0], [1755.0, 1115.0], [1751.0, 1107.3333333333333], [1831.0, 1100.6666666666667], [1855.0, 1097.5], [1835.0, 1106.0], [1839.0, 1108.5], [1819.0, 1112.5], [1815.0, 1104.0], [1811.0, 1103.0], [1911.0, 1105.0], [1907.0, 1102.5], [1915.0, 1110.0], [1871.0, 1103.0], [1863.0, 1104.0], [1859.0, 1109.0], [1879.0, 1103.5], [1923.0, 1118.0], [1971.0, 1101.0], [1975.0, 1102.0], [1951.0, 1104.4], [1931.0, 1097.0], [1947.0, 1100.0], [1943.0, 1110.0], [1939.0, 1108.0], [2035.0, 1105.0], [2023.0, 1109.0], [1991.0, 1106.6666666666667], [1987.0, 1103.5], [1995.0, 1102.0], [1999.0, 1112.0], [2011.0, 1104.5], [2007.0, 1106.0], [2027.0, 1100.0], [2118.0, 1109.0], [2158.0, 1103.0], [2062.0, 1099.0], [2086.0, 7246.0], [2294.0, 1105.0], [2302.0, 1106.0], [2254.0, 1108.0], [2270.0, 1101.5], [2198.0, 1102.0], [2190.0, 1106.0], [2230.0, 1101.0], [2222.0, 1104.0], [2214.0, 1110.5], [2430.0, 1105.5], [2422.0, 1105.6666666666667], [2374.0, 1101.0], [2414.0, 1100.5], [2318.0, 1106.5], [2358.0, 1107.0], [2342.0, 1107.5], [2534.0, 1104.0], [2502.0, 1104.0], [2518.0, 1109.0], [2526.0, 1109.5], [2494.0, 1107.0], [2446.0, 1102.5], [2486.0, 1103.25], [2478.0, 1102.0], [2686.0, 1097.0], [2646.0, 1108.25], [2574.0, 1103.5], [2582.0, 8674.0], [2590.0, 1109.0], [2614.0, 1104.0], [2606.0, 1116.0], [2710.0, 1101.5], [2718.0, 1100.0], [2774.0, 1106.0], [2814.0, 1106.0], [2702.0, 1103.0], [2694.0, 1116.6666666666667], [2742.0, 1103.0], [2734.0, 1106.6666666666667], [2886.0, 1103.0], [2934.0, 1104.0], [2894.0, 1101.0], [2902.0, 1108.5], [2910.0, 1106.0], [2926.0, 1101.0], [2870.0, 1106.5], [2862.0, 1099.0], [2958.0, 1104.0], [2950.0, 1114.5], [2966.0, 1104.5], [2974.0, 1106.0], [2982.0, 1099.0], [2151.0, 1105.5], [2175.0, 1106.0], [2167.0, 1102.0], [2127.0, 1100.0], [2135.0, 1102.0], [2143.0, 1106.0], [2079.0, 1103.0], [2103.0, 1110.3333333333333], [2095.0, 1112.0], [2087.0, 1317.0], [2295.0, 1110.0], [2247.0, 1098.0], [2287.0, 1114.0], [2199.0, 1106.0], [2191.0, 1106.0], [2239.0, 1103.0], [2215.0, 1106.0], [2407.0, 1107.0], [2423.0, 1117.0], [2383.0, 1103.0], [2399.0, 1105.0], [2327.0, 1104.0], [2319.0, 1102.0], [2311.0, 1114.0], [2367.0, 1105.0], [2351.0, 1105.75], [2343.0, 1117.0], [2551.0, 1102.5], [2559.0, 1104.0], [2511.0, 1101.0], [2519.0, 1106.0], [2527.0, 1106.0], [2543.0, 1105.5], [2455.0, 1103.0], [2463.0, 1108.6666666666667], [2479.0, 1105.0], [2471.0, 1105.2], [2631.0, 1101.5], [2663.0, 1097.0], [2639.0, 1102.5], [2623.0, 1103.0], [2575.0, 1101.0], [2583.0, 1182.0], [2591.0, 1106.5], [2615.0, 1102.0], [2599.0, 1105.0], [2815.0, 1109.0], [2783.0, 2810.0], [2775.0, 1108.0], [2719.0, 1103.5], [2695.0, 1102.5], [2743.0, 1104.0], [2887.0, 1112.0], [2919.0, 1103.6666666666667], [2831.0, 1103.0], [2871.0, 1101.5], [2959.0, 1103.5], [2991.0, 1106.0], [1.0, 11755.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[2970.090981782323, 1949.042239162011]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 3000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 63.35, "minX": 1.68421398E12, "maxY": 356232.0, "series": [{"data": [[1.68421398E12, 356232.0], [1.68421428E12, 77.91666666666667], [1.6842141E12, 289589.06666666665], [1.68421422E12, 337918.01666666666], [1.68421404E12, 345415.2], [1.68421416E12, 342460.25]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.68421398E12, 289373.75], [1.68421428E12, 63.35], [1.6842141E12, 235281.9], [1.68421422E12, 274549.85], [1.68421404E12, 280649.55], [1.68421416E12, 278233.2]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68421428E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 1684.607315947388, "minX": 1.68421398E12, "maxY": 6945.285714285715, "series": [{"data": [[1.68421398E12, 2492.0742408606143], [1.68421428E12, 6945.285714285715], [1.6842141E12, 1684.607315947388], [1.68421422E12, 1829.5672940633613], [1.68421404E12, 1863.5360033536604], [1.68421416E12, 1810.849954462662]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68421428E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 1684.3207939072315, "minX": 1.68421398E12, "maxY": 6943.714285714286, "series": [{"data": [[1.68421398E12, 2491.050129780775], [1.68421428E12, 6943.714285714286], [1.6842141E12, 1684.3207939072315], [1.68421422E12, 1829.3497049807079], [1.68421404E12, 1863.251072200194], [1.68421416E12, 1810.6264962269115]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68421428E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.68421398E12, "maxY": 355.0810582606237, "series": [{"data": [[1.68421398E12, 355.0810582606237], [1.68421428E12, 0.0], [1.6842141E12, 182.6722055542721], [1.68421422E12, 78.7180011207437], [1.68421404E12, 117.39034536132279], [1.68421416E12, 90.26372625552895]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68421428E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 1093.0, "minX": 1.68421398E12, "maxY": 14508.0, "series": [{"data": [[1.68421398E12, 14508.0], [1.68421428E12, 11755.0], [1.6842141E12, 9294.0], [1.68421422E12, 8833.0], [1.68421404E12, 14334.0], [1.68421416E12, 12183.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.68421398E12, 2960.9000000000015], [1.68421428E12, 11755.0], [1.6842141E12, 2382.0], [1.68421422E12, 3371.9000000000015], [1.68421404E12, 2180.0], [1.68421416E12, 3475.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.68421398E12, 6383.950000000008], [1.68421428E12, 11755.0], [1.6842141E12, 3893.7900000000336], [1.68421422E12, 4869.990000000002], [1.68421404E12, 3775.9900000000016], [1.68421416E12, 5283.980000000003]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.68421398E12, 3907.0], [1.68421428E12, 11755.0], [1.6842141E12, 2878.9500000000007], [1.68421422E12, 3820.9500000000007], [1.68421404E12, 2668.9500000000007], [1.68421416E12, 4131.950000000001]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.68421398E12, 1096.0], [1.68421428E12, 5718.0], [1.6842141E12, 1093.0], [1.68421422E12, 1093.0], [1.68421404E12, 1095.0], [1.68421416E12, 1093.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.68421398E12, 1172.0], [1.68421428E12, 5942.0], [1.6842141E12, 1158.0], [1.68421422E12, 1504.0], [1.68421404E12, 1136.0], [1.68421416E12, 1558.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68421428E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 1105.0, "minX": 1.0, "maxY": 11409.0, "series": [{"data": [[2.0, 3887.0], [3.0, 5874.0], [4.0, 5056.0], [5.0, 5031.0], [6.0, 5041.0], [7.0, 4699.0], [8.0, 3085.5], [9.0, 2098.0], [10.0, 2071.0], [12.0, 1319.5], [14.0, 3207.0], [16.0, 2190.0], [18.0, 2556.5], [19.0, 3620.0], [20.0, 2992.0], [21.0, 2288.5], [23.0, 2162.0], [24.0, 5528.0], [28.0, 1637.0], [43.0, 2634.0], [46.0, 1127.0], [50.0, 2291.0], [66.0, 4535.5], [74.0, 1599.5], [73.0, 2647.0], [83.0, 1415.0], [88.0, 3299.0], [111.0, 1213.0], [130.0, 1429.5], [138.0, 3513.5], [141.0, 1712.0], [155.0, 3256.0], [156.0, 1779.5], [158.0, 1953.0], [166.0, 1107.0], [165.0, 4309.0], [169.0, 1847.0], [185.0, 1484.0], [213.0, 1228.0], [227.0, 1712.0], [232.0, 1112.0], [244.0, 1109.0], [249.0, 1653.0], [263.0, 3085.0], [260.0, 4966.5], [268.0, 1116.0], [264.0, 1126.0], [259.0, 2157.0], [271.0, 1143.0], [258.0, 1852.0], [275.0, 3686.0], [282.0, 3408.0], [295.0, 1117.0], [297.0, 1630.0], [310.0, 1733.5], [323.0, 2125.0], [332.0, 1115.0], [337.0, 1171.0], [351.0, 3553.0], [356.0, 1107.0], [395.0, 1120.0], [410.0, 1123.0], [438.0, 1140.0], [456.0, 1197.0], [452.0, 4234.5], [455.0, 1954.0], [495.0, 1108.0], [482.0, 1125.0], [494.0, 1110.0], [492.0, 1700.0], [488.0, 1105.0], [499.0, 1107.0], [506.0, 1127.5], [497.0, 1107.0], [504.0, 1132.0], [505.0, 1113.0], [507.0, 1994.0], [509.0, 1116.0], [510.0, 1111.0], [501.0, 1114.0], [502.0, 1105.0], [503.0, 1501.0], [496.0, 1132.0], [500.0, 1112.0], [538.0, 1318.5], [516.0, 1675.0], [533.0, 2014.0], [540.0, 1947.0], [520.0, 1805.5], [541.0, 1128.0], [529.0, 1200.0], [517.0, 1111.0], [522.0, 1137.0], [544.0, 2114.0], [551.0, 2134.0], [573.0, 1137.0], [571.0, 2715.0], [558.0, 3418.0], [555.0, 1921.0], [598.0, 1350.5], [577.0, 1458.0], [582.0, 1365.0], [592.0, 1578.5], [594.0, 4304.5], [605.0, 2184.0], [614.0, 1612.5], [637.0, 4993.0], [616.0, 1425.5], [632.0, 1926.0], [623.0, 1767.0], [613.0, 1108.0], [634.0, 1795.0], [619.0, 1126.0], [639.0, 1107.0], [631.0, 1889.0], [618.0, 1150.5], [647.0, 3108.0], [653.0, 1132.0], [659.0, 2033.0], [641.0, 1215.0], [672.0, 1111.0], [686.0, 2743.0], [681.0, 1127.0], [682.0, 2351.0], [716.0, 1110.0], [714.0, 3708.0], [727.0, 1581.0], [711.0, 1109.0], [731.0, 2011.0], [710.0, 1957.5], [735.0, 1119.0], [715.0, 1112.0], [706.0, 2337.0], [760.0, 3559.0], [747.0, 1150.0], [767.0, 1128.0], [764.0, 1798.5], [736.0, 1551.5], [757.0, 1553.0], [766.0, 2290.0], [748.0, 1125.0], [785.0, 1118.0], [788.0, 2266.0], [798.0, 1150.0], [795.0, 1286.0], [773.0, 1110.0], [771.0, 2585.0], [826.0, 3382.0], [829.0, 1138.0], [821.0, 1111.0], [803.0, 1134.0], [810.0, 1599.0], [806.0, 1114.0], [827.0, 1994.0], [825.0, 2105.0], [831.0, 2481.0], [837.0, 3399.0], [860.0, 1113.0], [863.0, 3360.0], [854.0, 2079.5], [839.0, 1125.0], [843.0, 1312.0], [846.0, 1108.0], [832.0, 2755.5], [835.0, 1112.0], [862.0, 2767.5], [856.0, 1119.0], [834.0, 1587.0], [891.0, 2795.5], [889.0, 3470.5], [881.0, 1148.0], [894.0, 1812.0], [895.0, 1143.0], [880.0, 2165.0], [887.0, 1897.0], [886.0, 1187.0], [870.0, 3339.5], [871.0, 1892.5], [888.0, 2511.0], [869.0, 1621.0], [866.0, 1107.0], [867.0, 1105.0], [878.0, 1131.0], [873.0, 2022.0], [875.0, 2382.0], [879.0, 2179.0], [882.0, 1299.0], [925.0, 1282.5], [907.0, 1126.5], [912.0, 3201.5], [898.0, 1850.0], [908.0, 1384.5], [911.0, 2066.5], [909.0, 1923.0], [905.0, 1322.0], [904.0, 2022.5], [906.0, 1832.5], [924.0, 1171.0], [923.0, 1105.0], [920.0, 1509.5], [915.0, 2049.0], [919.0, 1149.0], [917.0, 1526.0], [916.0, 2985.0], [918.0, 1187.0], [913.0, 2344.0], [914.0, 1785.0], [943.0, 1108.0], [930.0, 1113.0], [939.0, 1109.0], [1.0, 5046.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[889.0, 10369.0], [881.0, 11409.0], [227.0, 2032.5]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 943.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 5872.0, "series": [{"data": [[2.0, 3886.5], [3.0, 5872.0], [4.0, 5054.0], [5.0, 5029.0], [6.0, 5039.5], [7.0, 4698.5], [8.0, 3085.5], [9.0, 2097.5], [10.0, 2071.0], [12.0, 1319.0], [14.0, 3207.0], [16.0, 2190.0], [18.0, 2556.5], [19.0, 3620.0], [20.0, 2991.5], [21.0, 2288.5], [23.0, 2162.0], [24.0, 5528.0], [28.0, 1637.0], [43.0, 2634.0], [46.0, 1127.0], [50.0, 2291.0], [66.0, 4535.5], [74.0, 1599.5], [73.0, 2647.0], [83.0, 1415.0], [88.0, 3299.0], [111.0, 1212.0], [130.0, 1429.0], [138.0, 3513.5], [141.0, 1712.0], [155.0, 3256.0], [156.0, 1779.0], [158.0, 1952.5], [166.0, 1106.5], [165.0, 4308.0], [169.0, 1847.0], [185.0, 1482.0], [213.0, 1228.0], [227.0, 1711.5], [232.0, 1111.0], [244.0, 1109.0], [249.0, 1653.0], [263.0, 3085.0], [260.0, 4966.5], [268.0, 1116.0], [264.0, 1126.0], [259.0, 2157.0], [271.0, 1143.0], [258.0, 1851.5], [275.0, 3686.0], [282.0, 3408.0], [295.0, 1116.0], [297.0, 1629.0], [310.0, 1733.0], [323.0, 2125.0], [332.0, 1114.5], [337.0, 1171.0], [351.0, 3553.0], [356.0, 1107.0], [395.0, 1120.0], [410.0, 1123.0], [438.0, 1140.0], [456.0, 1197.0], [452.0, 4234.5], [455.0, 1953.0], [495.0, 1108.0], [482.0, 1125.0], [494.0, 1110.0], [492.0, 1700.0], [488.0, 1105.0], [499.0, 1107.0], [506.0, 1127.0], [497.0, 1107.0], [504.0, 1132.0], [505.0, 1113.0], [507.0, 1994.0], [509.0, 1116.0], [510.0, 1111.0], [501.0, 1113.0], [502.0, 1104.0], [503.0, 1501.0], [496.0, 1132.0], [500.0, 1111.0], [538.0, 1318.5], [516.0, 1675.0], [533.0, 2013.0], [540.0, 1947.0], [520.0, 1805.0], [541.0, 1128.0], [529.0, 1200.0], [517.0, 1111.0], [522.0, 1136.0], [544.0, 2114.0], [551.0, 2134.0], [573.0, 1136.0], [571.0, 2715.0], [558.0, 3418.0], [555.0, 1921.0], [598.0, 1350.0], [577.0, 1458.0], [582.0, 1364.5], [592.0, 1578.5], [594.0, 4304.5], [605.0, 2184.0], [614.0, 1611.5], [637.0, 4992.0], [616.0, 1425.5], [632.0, 1926.0], [623.0, 1767.0], [613.0, 1108.0], [634.0, 1795.0], [619.0, 1126.0], [639.0, 1106.0], [631.0, 1889.0], [618.0, 1150.0], [647.0, 3108.0], [653.0, 1131.0], [659.0, 2032.0], [641.0, 1215.0], [672.0, 1111.0], [686.0, 2743.0], [681.0, 1127.0], [682.0, 2350.5], [716.0, 1110.0], [714.0, 3708.0], [727.0, 1581.0], [711.0, 1109.0], [731.0, 2010.0], [710.0, 1957.0], [735.0, 1118.0], [715.0, 1112.0], [706.0, 2337.0], [760.0, 3558.5], [747.0, 1150.0], [767.0, 1127.0], [764.0, 1798.5], [736.0, 1551.5], [757.0, 1553.0], [766.0, 2288.0], [748.0, 1125.0], [785.0, 1118.0], [788.0, 2266.0], [798.0, 1150.0], [795.0, 1286.0], [773.0, 1110.0], [771.0, 2585.0], [826.0, 3381.5], [829.0, 1137.0], [821.0, 1110.0], [803.0, 1134.0], [810.0, 1599.0], [806.0, 1114.0], [827.0, 1994.0], [825.0, 2104.0], [831.0, 2480.0], [837.0, 3399.0], [860.0, 1113.0], [863.0, 3359.0], [854.0, 2079.0], [839.0, 1125.0], [843.0, 1312.0], [846.0, 1107.0], [832.0, 2755.5], [835.0, 1112.0], [862.0, 2766.5], [856.0, 1118.0], [834.0, 1587.0], [891.0, 2795.5], [889.0, 3470.0], [881.0, 1142.0], [894.0, 1811.0], [895.0, 1143.0], [880.0, 2165.0], [887.0, 1896.5], [886.0, 1187.0], [870.0, 3339.0], [871.0, 1892.5], [888.0, 2511.0], [869.0, 1621.0], [866.0, 1107.0], [867.0, 1105.0], [878.0, 1130.5], [873.0, 2021.0], [875.0, 2382.0], [879.0, 2179.0], [882.0, 1298.5], [925.0, 1282.0], [907.0, 1126.5], [912.0, 3201.0], [898.0, 1850.0], [908.0, 1384.0], [911.0, 2066.5], [909.0, 1923.0], [905.0, 1322.0], [904.0, 2022.5], [906.0, 1832.5], [924.0, 1170.0], [923.0, 1105.0], [920.0, 1509.5], [915.0, 2049.0], [919.0, 1148.0], [917.0, 1526.0], [916.0, 2985.0], [918.0, 1186.0], [913.0, 2344.0], [914.0, 1785.0], [943.0, 1108.0], [930.0, 1113.0], [939.0, 1109.0], [1.0, 5045.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[889.0, 0.0], [881.0, 0.0], [227.0, 2032.5]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 943.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 8.483333333333333, "minX": 1.68421392E12, "maxY": 533.3333333333334, "series": [{"data": [[1.68421398E12, 533.1833333333333], [1.6842141E12, 433.3333333333333], [1.68421392E12, 8.483333333333333], [1.68421422E12, 484.56666666666666], [1.68421404E12, 508.3333333333333], [1.68421416E12, 533.3333333333334]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68421422E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.68421398E12, "maxY": 532.9166666666666, "series": [{"data": [[1.68421398E12, 532.9166666666666], [1.68421428E12, 0.11666666666666667], [1.6842141E12, 433.3], [1.68421422E12, 505.6166666666667], [1.68421404E12, 516.8166666666667], [1.68421416E12, 512.4]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.68421398E12, 0.03333333333333333]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.NoHttpResponseException", "isController": false}, {"data": [[1.68421404E12, 0.03333333333333333]], "isOverall": false, "label": "429", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68421428E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.68421398E12, "maxY": 532.9166666666666, "series": [{"data": [[1.68421398E12, 532.9166666666666], [1.68421428E12, 0.11666666666666667], [1.6842141E12, 433.3], [1.68421422E12, 505.6166666666667], [1.68421404E12, 516.8166666666667], [1.68421416E12, 512.4]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.68421398E12, 0.03333333333333333], [1.68421404E12, 0.03333333333333333]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68421428E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.68421398E12, "maxY": 532.9166666666666, "series": [{"data": [[1.68421398E12, 532.9166666666666], [1.68421428E12, 0.11666666666666667], [1.6842141E12, 433.3], [1.68421422E12, 505.6166666666667], [1.68421404E12, 516.8166666666667], [1.68421416E12, 512.4]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.68421398E12, 0.03333333333333333], [1.68421404E12, 0.03333333333333333]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68421428E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

