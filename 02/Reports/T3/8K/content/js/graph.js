/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 38.0, "minX": 0.0, "maxY": 11183.0, "series": [{"data": [[0.0, 38.0], [0.1, 1096.0], [0.2, 1097.0], [0.3, 1097.0], [0.4, 1097.0], [0.5, 1097.0], [0.6, 1098.0], [0.7, 1098.0], [0.8, 1098.0], [0.9, 1098.0], [1.0, 1098.0], [1.1, 1099.0], [1.2, 1099.0], [1.3, 1099.0], [1.4, 1099.0], [1.5, 1099.0], [1.6, 1099.0], [1.7, 1099.0], [1.8, 1099.0], [1.9, 1099.0], [2.0, 1099.0], [2.1, 1100.0], [2.2, 1100.0], [2.3, 1100.0], [2.4, 1100.0], [2.5, 1100.0], [2.6, 1100.0], [2.7, 1100.0], [2.8, 1100.0], [2.9, 1100.0], [3.0, 1100.0], [3.1, 1100.0], [3.2, 1100.0], [3.3, 1100.0], [3.4, 1100.0], [3.5, 1100.0], [3.6, 1101.0], [3.7, 1101.0], [3.8, 1101.0], [3.9, 1101.0], [4.0, 1101.0], [4.1, 1101.0], [4.2, 1101.0], [4.3, 1101.0], [4.4, 1101.0], [4.5, 1101.0], [4.6, 1101.0], [4.7, 1101.0], [4.8, 1101.0], [4.9, 1101.0], [5.0, 1101.0], [5.1, 1101.0], [5.2, 1101.0], [5.3, 1101.0], [5.4, 1101.0], [5.5, 1101.0], [5.6, 1101.0], [5.7, 1102.0], [5.8, 1102.0], [5.9, 1102.0], [6.0, 1102.0], [6.1, 1102.0], [6.2, 1102.0], [6.3, 1102.0], [6.4, 1102.0], [6.5, 1102.0], [6.6, 1102.0], [6.7, 1102.0], [6.8, 1102.0], [6.9, 1102.0], [7.0, 1102.0], [7.1, 1102.0], [7.2, 1102.0], [7.3, 1102.0], [7.4, 1102.0], [7.5, 1102.0], [7.6, 1102.0], [7.7, 1102.0], [7.8, 1102.0], [7.9, 1102.0], [8.0, 1102.0], [8.1, 1102.0], [8.2, 1102.0], [8.3, 1102.0], [8.4, 1102.0], [8.5, 1102.0], [8.6, 1103.0], [8.7, 1103.0], [8.8, 1103.0], [8.9, 1103.0], [9.0, 1103.0], [9.1, 1103.0], [9.2, 1103.0], [9.3, 1103.0], [9.4, 1103.0], [9.5, 1103.0], [9.6, 1103.0], [9.7, 1103.0], [9.8, 1103.0], [9.9, 1103.0], [10.0, 1103.0], [10.1, 1103.0], [10.2, 1103.0], [10.3, 1103.0], [10.4, 1103.0], [10.5, 1103.0], [10.6, 1103.0], [10.7, 1103.0], [10.8, 1103.0], [10.9, 1103.0], [11.0, 1103.0], [11.1, 1103.0], [11.2, 1103.0], [11.3, 1103.0], [11.4, 1103.0], [11.5, 1103.0], [11.6, 1103.0], [11.7, 1103.0], [11.8, 1103.0], [11.9, 1104.0], [12.0, 1104.0], [12.1, 1104.0], [12.2, 1104.0], [12.3, 1104.0], [12.4, 1104.0], [12.5, 1104.0], [12.6, 1104.0], [12.7, 1104.0], [12.8, 1104.0], [12.9, 1104.0], [13.0, 1104.0], [13.1, 1104.0], [13.2, 1104.0], [13.3, 1104.0], [13.4, 1104.0], [13.5, 1104.0], [13.6, 1104.0], [13.7, 1104.0], [13.8, 1104.0], [13.9, 1104.0], [14.0, 1104.0], [14.1, 1104.0], [14.2, 1104.0], [14.3, 1104.0], [14.4, 1104.0], [14.5, 1104.0], [14.6, 1104.0], [14.7, 1104.0], [14.8, 1104.0], [14.9, 1104.0], [15.0, 1104.0], [15.1, 1104.0], [15.2, 1104.0], [15.3, 1104.0], [15.4, 1104.0], [15.5, 1104.0], [15.6, 1104.0], [15.7, 1105.0], [15.8, 1105.0], [15.9, 1105.0], [16.0, 1105.0], [16.1, 1105.0], [16.2, 1105.0], [16.3, 1105.0], [16.4, 1105.0], [16.5, 1105.0], [16.6, 1105.0], [16.7, 1105.0], [16.8, 1105.0], [16.9, 1105.0], [17.0, 1105.0], [17.1, 1105.0], [17.2, 1105.0], [17.3, 1105.0], [17.4, 1105.0], [17.5, 1105.0], [17.6, 1105.0], [17.7, 1105.0], [17.8, 1105.0], [17.9, 1105.0], [18.0, 1105.0], [18.1, 1105.0], [18.2, 1105.0], [18.3, 1105.0], [18.4, 1105.0], [18.5, 1105.0], [18.6, 1105.0], [18.7, 1105.0], [18.8, 1105.0], [18.9, 1105.0], [19.0, 1105.0], [19.1, 1105.0], [19.2, 1105.0], [19.3, 1105.0], [19.4, 1105.0], [19.5, 1105.0], [19.6, 1105.0], [19.7, 1105.0], [19.8, 1105.0], [19.9, 1105.0], [20.0, 1106.0], [20.1, 1106.0], [20.2, 1106.0], [20.3, 1106.0], [20.4, 1106.0], [20.5, 1106.0], [20.6, 1106.0], [20.7, 1106.0], [20.8, 1106.0], [20.9, 1106.0], [21.0, 1106.0], [21.1, 1106.0], [21.2, 1106.0], [21.3, 1106.0], [21.4, 1106.0], [21.5, 1106.0], [21.6, 1106.0], [21.7, 1106.0], [21.8, 1106.0], [21.9, 1106.0], [22.0, 1106.0], [22.1, 1106.0], [22.2, 1106.0], [22.3, 1106.0], [22.4, 1106.0], [22.5, 1106.0], [22.6, 1106.0], [22.7, 1106.0], [22.8, 1106.0], [22.9, 1106.0], [23.0, 1106.0], [23.1, 1106.0], [23.2, 1106.0], [23.3, 1106.0], [23.4, 1106.0], [23.5, 1106.0], [23.6, 1106.0], [23.7, 1106.0], [23.8, 1106.0], [23.9, 1106.0], [24.0, 1106.0], [24.1, 1106.0], [24.2, 1107.0], [24.3, 1107.0], [24.4, 1107.0], [24.5, 1107.0], [24.6, 1107.0], [24.7, 1107.0], [24.8, 1107.0], [24.9, 1107.0], [25.0, 1107.0], [25.1, 1107.0], [25.2, 1107.0], [25.3, 1107.0], [25.4, 1107.0], [25.5, 1107.0], [25.6, 1107.0], [25.7, 1107.0], [25.8, 1107.0], [25.9, 1107.0], [26.0, 1107.0], [26.1, 1107.0], [26.2, 1107.0], [26.3, 1107.0], [26.4, 1107.0], [26.5, 1107.0], [26.6, 1107.0], [26.7, 1107.0], [26.8, 1107.0], [26.9, 1107.0], [27.0, 1107.0], [27.1, 1107.0], [27.2, 1107.0], [27.3, 1107.0], [27.4, 1107.0], [27.5, 1107.0], [27.6, 1107.0], [27.7, 1107.0], [27.8, 1107.0], [27.9, 1107.0], [28.0, 1107.0], [28.1, 1107.0], [28.2, 1107.0], [28.3, 1107.0], [28.4, 1108.0], [28.5, 1108.0], [28.6, 1108.0], [28.7, 1108.0], [28.8, 1108.0], [28.9, 1108.0], [29.0, 1108.0], [29.1, 1108.0], [29.2, 1108.0], [29.3, 1108.0], [29.4, 1108.0], [29.5, 1108.0], [29.6, 1108.0], [29.7, 1108.0], [29.8, 1108.0], [29.9, 1108.0], [30.0, 1108.0], [30.1, 1108.0], [30.2, 1108.0], [30.3, 1108.0], [30.4, 1108.0], [30.5, 1108.0], [30.6, 1108.0], [30.7, 1108.0], [30.8, 1108.0], [30.9, 1108.0], [31.0, 1108.0], [31.1, 1108.0], [31.2, 1108.0], [31.3, 1108.0], [31.4, 1108.0], [31.5, 1108.0], [31.6, 1108.0], [31.7, 1108.0], [31.8, 1108.0], [31.9, 1108.0], [32.0, 1108.0], [32.1, 1108.0], [32.2, 1108.0], [32.3, 1108.0], [32.4, 1108.0], [32.5, 1108.0], [32.6, 1109.0], [32.7, 1109.0], [32.8, 1109.0], [32.9, 1109.0], [33.0, 1109.0], [33.1, 1109.0], [33.2, 1109.0], [33.3, 1109.0], [33.4, 1109.0], [33.5, 1109.0], [33.6, 1109.0], [33.7, 1109.0], [33.8, 1109.0], [33.9, 1109.0], [34.0, 1109.0], [34.1, 1109.0], [34.2, 1109.0], [34.3, 1109.0], [34.4, 1109.0], [34.5, 1109.0], [34.6, 1109.0], [34.7, 1109.0], [34.8, 1109.0], [34.9, 1109.0], [35.0, 1109.0], [35.1, 1109.0], [35.2, 1109.0], [35.3, 1109.0], [35.4, 1109.0], [35.5, 1109.0], [35.6, 1109.0], [35.7, 1109.0], [35.8, 1109.0], [35.9, 1109.0], [36.0, 1109.0], [36.1, 1109.0], [36.2, 1109.0], [36.3, 1109.0], [36.4, 1110.0], [36.5, 1110.0], [36.6, 1110.0], [36.7, 1110.0], [36.8, 1110.0], [36.9, 1110.0], [37.0, 1110.0], [37.1, 1110.0], [37.2, 1110.0], [37.3, 1110.0], [37.4, 1110.0], [37.5, 1110.0], [37.6, 1110.0], [37.7, 1110.0], [37.8, 1110.0], [37.9, 1110.0], [38.0, 1110.0], [38.1, 1110.0], [38.2, 1110.0], [38.3, 1110.0], [38.4, 1110.0], [38.5, 1110.0], [38.6, 1110.0], [38.7, 1110.0], [38.8, 1110.0], [38.9, 1110.0], [39.0, 1110.0], [39.1, 1110.0], [39.2, 1110.0], [39.3, 1110.0], [39.4, 1110.0], [39.5, 1110.0], [39.6, 1110.0], [39.7, 1110.0], [39.8, 1110.0], [39.9, 1110.0], [40.0, 1111.0], [40.1, 1111.0], [40.2, 1111.0], [40.3, 1111.0], [40.4, 1111.0], [40.5, 1111.0], [40.6, 1111.0], [40.7, 1111.0], [40.8, 1111.0], [40.9, 1111.0], [41.0, 1111.0], [41.1, 1111.0], [41.2, 1111.0], [41.3, 1111.0], [41.4, 1111.0], [41.5, 1111.0], [41.6, 1111.0], [41.7, 1111.0], [41.8, 1111.0], [41.9, 1111.0], [42.0, 1111.0], [42.1, 1111.0], [42.2, 1111.0], [42.3, 1111.0], [42.4, 1111.0], [42.5, 1111.0], [42.6, 1111.0], [42.7, 1111.0], [42.8, 1111.0], [42.9, 1111.0], [43.0, 1111.0], [43.1, 1111.0], [43.2, 1112.0], [43.3, 1112.0], [43.4, 1112.0], [43.5, 1112.0], [43.6, 1112.0], [43.7, 1112.0], [43.8, 1112.0], [43.9, 1112.0], [44.0, 1112.0], [44.1, 1112.0], [44.2, 1112.0], [44.3, 1112.0], [44.4, 1112.0], [44.5, 1112.0], [44.6, 1112.0], [44.7, 1112.0], [44.8, 1112.0], [44.9, 1112.0], [45.0, 1112.0], [45.1, 1112.0], [45.2, 1112.0], [45.3, 1112.0], [45.4, 1112.0], [45.5, 1112.0], [45.6, 1112.0], [45.7, 1112.0], [45.8, 1112.0], [45.9, 1112.0], [46.0, 1112.0], [46.1, 1113.0], [46.2, 1113.0], [46.3, 1113.0], [46.4, 1113.0], [46.5, 1113.0], [46.6, 1113.0], [46.7, 1113.0], [46.8, 1113.0], [46.9, 1113.0], [47.0, 1113.0], [47.1, 1113.0], [47.2, 1113.0], [47.3, 1113.0], [47.4, 1113.0], [47.5, 1113.0], [47.6, 1113.0], [47.7, 1113.0], [47.8, 1113.0], [47.9, 1113.0], [48.0, 1113.0], [48.1, 1113.0], [48.2, 1113.0], [48.3, 1113.0], [48.4, 1113.0], [48.5, 1113.0], [48.6, 1113.0], [48.7, 1114.0], [48.8, 1114.0], [48.9, 1114.0], [49.0, 1114.0], [49.1, 1114.0], [49.2, 1114.0], [49.3, 1114.0], [49.4, 1114.0], [49.5, 1114.0], [49.6, 1114.0], [49.7, 1114.0], [49.8, 1114.0], [49.9, 1114.0], [50.0, 1114.0], [50.1, 1114.0], [50.2, 1114.0], [50.3, 1114.0], [50.4, 1114.0], [50.5, 1114.0], [50.6, 1114.0], [50.7, 1114.0], [50.8, 1114.0], [50.9, 1115.0], [51.0, 1115.0], [51.1, 1115.0], [51.2, 1115.0], [51.3, 1115.0], [51.4, 1115.0], [51.5, 1115.0], [51.6, 1115.0], [51.7, 1115.0], [51.8, 1115.0], [51.9, 1115.0], [52.0, 1115.0], [52.1, 1115.0], [52.2, 1115.0], [52.3, 1115.0], [52.4, 1115.0], [52.5, 1115.0], [52.6, 1115.0], [52.7, 1115.0], [52.8, 1115.0], [52.9, 1116.0], [53.0, 1116.0], [53.1, 1116.0], [53.2, 1116.0], [53.3, 1116.0], [53.4, 1116.0], [53.5, 1116.0], [53.6, 1116.0], [53.7, 1116.0], [53.8, 1116.0], [53.9, 1116.0], [54.0, 1116.0], [54.1, 1116.0], [54.2, 1116.0], [54.3, 1116.0], [54.4, 1116.0], [54.5, 1116.0], [54.6, 1117.0], [54.7, 1117.0], [54.8, 1117.0], [54.9, 1117.0], [55.0, 1117.0], [55.1, 1117.0], [55.2, 1117.0], [55.3, 1117.0], [55.4, 1117.0], [55.5, 1117.0], [55.6, 1117.0], [55.7, 1117.0], [55.8, 1117.0], [55.9, 1117.0], [56.0, 1117.0], [56.1, 1117.0], [56.2, 1118.0], [56.3, 1118.0], [56.4, 1118.0], [56.5, 1118.0], [56.6, 1118.0], [56.7, 1118.0], [56.8, 1118.0], [56.9, 1118.0], [57.0, 1118.0], [57.1, 1118.0], [57.2, 1118.0], [57.3, 1118.0], [57.4, 1118.0], [57.5, 1118.0], [57.6, 1119.0], [57.7, 1119.0], [57.8, 1119.0], [57.9, 1119.0], [58.0, 1119.0], [58.1, 1119.0], [58.2, 1119.0], [58.3, 1119.0], [58.4, 1119.0], [58.5, 1119.0], [58.6, 1119.0], [58.7, 1119.0], [58.8, 1120.0], [58.9, 1120.0], [59.0, 1120.0], [59.1, 1120.0], [59.2, 1120.0], [59.3, 1120.0], [59.4, 1120.0], [59.5, 1120.0], [59.6, 1120.0], [59.7, 1120.0], [59.8, 1121.0], [59.9, 1121.0], [60.0, 1121.0], [60.1, 1121.0], [60.2, 1121.0], [60.3, 1121.0], [60.4, 1121.0], [60.5, 1121.0], [60.6, 1121.0], [60.7, 1121.0], [60.8, 1122.0], [60.9, 1122.0], [61.0, 1122.0], [61.1, 1122.0], [61.2, 1122.0], [61.3, 1122.0], [61.4, 1122.0], [61.5, 1122.0], [61.6, 1123.0], [61.7, 1123.0], [61.8, 1123.0], [61.9, 1123.0], [62.0, 1123.0], [62.1, 1123.0], [62.2, 1124.0], [62.3, 1124.0], [62.4, 1124.0], [62.5, 1124.0], [62.6, 1124.0], [62.7, 1124.0], [62.8, 1124.0], [62.9, 1125.0], [63.0, 1125.0], [63.1, 1125.0], [63.2, 1125.0], [63.3, 1125.0], [63.4, 1125.0], [63.5, 1126.0], [63.6, 1126.0], [63.7, 1126.0], [63.8, 1126.0], [63.9, 1126.0], [64.0, 1127.0], [64.1, 1127.0], [64.2, 1127.0], [64.3, 1127.0], [64.4, 1128.0], [64.5, 1128.0], [64.6, 1128.0], [64.7, 1128.0], [64.8, 1129.0], [64.9, 1129.0], [65.0, 1129.0], [65.1, 1129.0], [65.2, 1130.0], [65.3, 1130.0], [65.4, 1130.0], [65.5, 1131.0], [65.6, 1131.0], [65.7, 1131.0], [65.8, 1131.0], [65.9, 1132.0], [66.0, 1132.0], [66.1, 1133.0], [66.2, 1133.0], [66.3, 1133.0], [66.4, 1134.0], [66.5, 1134.0], [66.6, 1134.0], [66.7, 1135.0], [66.8, 1135.0], [66.9, 1136.0], [67.0, 1136.0], [67.1, 1137.0], [67.2, 1137.0], [67.3, 1138.0], [67.4, 1138.0], [67.5, 1139.0], [67.6, 1139.0], [67.7, 1140.0], [67.8, 1140.0], [67.9, 1141.0], [68.0, 1141.0], [68.1, 1142.0], [68.2, 1142.0], [68.3, 1143.0], [68.4, 1143.0], [68.5, 1144.0], [68.6, 1145.0], [68.7, 1145.0], [68.8, 1146.0], [68.9, 1146.0], [69.0, 1147.0], [69.1, 1148.0], [69.2, 1148.0], [69.3, 1149.0], [69.4, 1149.0], [69.5, 1150.0], [69.6, 1151.0], [69.7, 1152.0], [69.8, 1152.0], [69.9, 1153.0], [70.0, 1154.0], [70.1, 1155.0], [70.2, 1156.0], [70.3, 1157.0], [70.4, 1158.0], [70.5, 1159.0], [70.6, 1160.0], [70.7, 1162.0], [70.8, 1163.0], [70.9, 1165.0], [71.0, 1166.0], [71.1, 1168.0], [71.2, 1170.0], [71.3, 1172.0], [71.4, 1174.0], [71.5, 1176.0], [71.6, 1178.0], [71.7, 1180.0], [71.8, 1182.0], [71.9, 1185.0], [72.0, 1187.0], [72.1, 1189.0], [72.2, 1191.0], [72.3, 1193.0], [72.4, 1195.0], [72.5, 1198.0], [72.6, 1200.0], [72.7, 1202.0], [72.8, 1204.0], [72.9, 1206.0], [73.0, 1208.0], [73.1, 1211.0], [73.2, 1213.0], [73.3, 1215.0], [73.4, 1217.0], [73.5, 1219.0], [73.6, 1221.0], [73.7, 1223.0], [73.8, 1226.0], [73.9, 1228.0], [74.0, 1231.0], [74.1, 1233.0], [74.2, 1235.0], [74.3, 1237.0], [74.4, 1239.0], [74.5, 1242.0], [74.6, 1245.0], [74.7, 1247.0], [74.8, 1250.0], [74.9, 1252.0], [75.0, 1255.0], [75.1, 1258.0], [75.2, 1261.0], [75.3, 1263.0], [75.4, 1266.0], [75.5, 1270.0], [75.6, 1273.0], [75.7, 1275.0], [75.8, 1278.0], [75.9, 1280.0], [76.0, 1283.0], [76.1, 1284.0], [76.2, 1286.0], [76.3, 1289.0], [76.4, 1292.0], [76.5, 1294.0], [76.6, 1297.0], [76.7, 1299.0], [76.8, 1302.0], [76.9, 1304.0], [77.0, 1306.0], [77.1, 1308.0], [77.2, 1310.0], [77.3, 1313.0], [77.4, 1314.0], [77.5, 1316.0], [77.6, 1319.0], [77.7, 1321.0], [77.8, 1323.0], [77.9, 1325.0], [78.0, 1326.0], [78.1, 1328.0], [78.2, 1329.0], [78.3, 1331.0], [78.4, 1333.0], [78.5, 1334.0], [78.6, 1336.0], [78.7, 1338.0], [78.8, 1340.0], [78.9, 1342.0], [79.0, 1344.0], [79.1, 1346.0], [79.2, 1348.0], [79.3, 1350.0], [79.4, 1352.0], [79.5, 1353.0], [79.6, 1355.0], [79.7, 1357.0], [79.8, 1359.0], [79.9, 1361.0], [80.0, 1362.0], [80.1, 1364.0], [80.2, 1366.0], [80.3, 1368.0], [80.4, 1370.0], [80.5, 1372.0], [80.6, 1374.0], [80.7, 1377.0], [80.8, 1379.0], [80.9, 1381.0], [81.0, 1384.0], [81.1, 1386.0], [81.2, 1388.0], [81.3, 1391.0], [81.4, 1394.0], [81.5, 1397.0], [81.6, 1399.0], [81.7, 1401.0], [81.8, 1404.0], [81.9, 1407.0], [82.0, 1409.0], [82.1, 1413.0], [82.2, 1415.0], [82.3, 1417.0], [82.4, 1420.0], [82.5, 1422.0], [82.6, 1425.0], [82.7, 1427.0], [82.8, 1429.0], [82.9, 1431.0], [83.0, 1433.0], [83.1, 1435.0], [83.2, 1437.0], [83.3, 1439.0], [83.4, 1441.0], [83.5, 1443.0], [83.6, 1445.0], [83.7, 1447.0], [83.8, 1450.0], [83.9, 1452.0], [84.0, 1454.0], [84.1, 1457.0], [84.2, 1459.0], [84.3, 1461.0], [84.4, 1463.0], [84.5, 1466.0], [84.6, 1469.0], [84.7, 1472.0], [84.8, 1475.0], [84.9, 1478.0], [85.0, 1480.0], [85.1, 1483.0], [85.2, 1486.0], [85.3, 1489.0], [85.4, 1493.0], [85.5, 1496.0], [85.6, 1499.0], [85.7, 1503.0], [85.8, 1506.0], [85.9, 1510.0], [86.0, 1514.0], [86.1, 1518.0], [86.2, 1522.0], [86.3, 1525.0], [86.4, 1527.0], [86.5, 1530.0], [86.6, 1534.0], [86.7, 1536.0], [86.8, 1539.0], [86.9, 1542.0], [87.0, 1544.0], [87.1, 1546.0], [87.2, 1548.0], [87.3, 1550.0], [87.4, 1552.0], [87.5, 1553.0], [87.6, 1555.0], [87.7, 1557.0], [87.8, 1560.0], [87.9, 1562.0], [88.0, 1566.0], [88.1, 1570.0], [88.2, 1574.0], [88.3, 1578.0], [88.4, 1583.0], [88.5, 1587.0], [88.6, 1592.0], [88.7, 1597.0], [88.8, 1603.0], [88.9, 1607.0], [89.0, 1612.0], [89.1, 1616.0], [89.2, 1621.0], [89.3, 1625.0], [89.4, 1630.0], [89.5, 1635.0], [89.6, 1640.0], [89.7, 1644.0], [89.8, 1649.0], [89.9, 1652.0], [90.0, 1657.0], [90.1, 1663.0], [90.2, 1668.0], [90.3, 1673.0], [90.4, 1681.0], [90.5, 1689.0], [90.6, 1695.0], [90.7, 1700.0], [90.8, 1705.0], [90.9, 1712.0], [91.0, 1717.0], [91.1, 1721.0], [91.2, 1726.0], [91.3, 1732.0], [91.4, 1737.0], [91.5, 1744.0], [91.6, 1749.0], [91.7, 1756.0], [91.8, 1762.0], [91.9, 1767.0], [92.0, 1774.0], [92.1, 1780.0], [92.2, 1786.0], [92.3, 1793.0], [92.4, 1800.0], [92.5, 1811.0], [92.6, 1826.0], [92.7, 1835.0], [92.8, 1845.0], [92.9, 1852.0], [93.0, 1861.0], [93.1, 1871.0], [93.2, 1882.0], [93.3, 1891.0], [93.4, 1899.0], [93.5, 1909.0], [93.6, 1926.0], [93.7, 1943.0], [93.8, 1958.0], [93.9, 1969.0], [94.0, 1983.0], [94.1, 2004.0], [94.2, 2024.0], [94.3, 2041.0], [94.4, 2061.0], [94.5, 2078.0], [94.6, 2095.0], [94.7, 2114.0], [94.8, 2143.0], [94.9, 2174.0], [95.0, 2220.0], [95.1, 2272.0], [95.2, 2314.0], [95.3, 2353.0], [95.4, 2410.0], [95.5, 2491.0], [95.6, 2589.0], [95.7, 2649.0], [95.8, 2716.0], [95.9, 2763.0], [96.0, 2865.0], [96.1, 2969.0], [96.2, 3038.0], [96.3, 3122.0], [96.4, 3222.0], [96.5, 3330.0], [96.6, 3407.0], [96.7, 3483.0], [96.8, 3615.0], [96.9, 3706.0], [97.0, 3778.0], [97.1, 3849.0], [97.2, 3926.0], [97.3, 4026.0], [97.4, 4113.0], [97.5, 4229.0], [97.6, 4323.0], [97.7, 4383.0], [97.8, 4445.0], [97.9, 4505.0], [98.0, 4584.0], [98.1, 4660.0], [98.2, 4740.0], [98.3, 4804.0], [98.4, 4893.0], [98.5, 4976.0], [98.6, 5016.0], [98.7, 5064.0], [98.8, 5111.0], [98.9, 5157.0], [99.0, 5207.0], [99.1, 5321.0], [99.2, 5488.0], [99.3, 5713.0], [99.4, 5871.0], [99.5, 7156.0], [99.6, 7630.0], [99.7, 8018.0], [99.8, 8606.0], [99.9, 9048.0], [100.0, 11183.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 56563.0, "series": [{"data": [[0.0, 26.0], [1000.0, 1594.0], [1100.0, 56563.0], [1200.0, 3322.0], [1300.0, 3935.0], [1400.0, 3190.0], [1500.0, 2514.0], [1600.0, 1563.0], [1700.0, 1366.0], [1800.0, 811.0], [1900.0, 536.0], [2000.0, 446.0], [2100.0, 271.0], [2300.0, 178.0], [2200.0, 153.0], [2400.0, 106.0], [2500.0, 103.0], [2600.0, 111.0], [2700.0, 128.0], [2800.0, 72.0], [2900.0, 92.0], [3000.0, 103.0], [3100.0, 83.0], [3200.0, 80.0], [3300.0, 94.0], [3400.0, 100.0], [3500.0, 64.0], [3600.0, 77.0], [3700.0, 112.0], [3800.0, 108.0], [3900.0, 79.0], [4000.0, 103.0], [4100.0, 69.0], [4200.0, 76.0], [4300.0, 123.0], [4400.0, 130.0], [4500.0, 109.0], [4600.0, 104.0], [4700.0, 108.0], [4800.0, 96.0], [4900.0, 124.0], [5000.0, 168.0], [5100.0, 176.0], [5200.0, 76.0], [5300.0, 46.0], [5400.0, 47.0], [5600.0, 32.0], [5500.0, 37.0], [5800.0, 37.0], [5700.0, 64.0], [6000.0, 9.0], [6100.0, 4.0], [5900.0, 25.0], [6300.0, 1.0], [6200.0, 3.0], [6600.0, 3.0], [6400.0, 4.0], [6500.0, 1.0], [6800.0, 2.0], [6900.0, 4.0], [6700.0, 4.0], [7000.0, 7.0], [7100.0, 5.0], [7200.0, 9.0], [7300.0, 20.0], [7400.0, 22.0], [7600.0, 20.0], [7500.0, 21.0], [7800.0, 20.0], [7700.0, 18.0], [7900.0, 22.0], [8100.0, 8.0], [8000.0, 15.0], [8600.0, 16.0], [8300.0, 20.0], [8200.0, 12.0], [8700.0, 14.0], [8500.0, 13.0], [8400.0, 16.0], [8800.0, 24.0], [8900.0, 20.0], [9000.0, 15.0], [9100.0, 17.0], [9200.0, 9.0], [9600.0, 6.0], [9400.0, 8.0], [9500.0, 9.0], [9700.0, 7.0], [9300.0, 8.0], [9800.0, 3.0], [10000.0, 1.0], [9900.0, 1.0], [10600.0, 1.0], [10400.0, 1.0], [11100.0, 1.0], [100.0, 2.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 11100.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 28.0, "minX": 1.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 68624.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 68624.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 11524.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 28.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 2613.098569705332, "minX": 1.6842111E12, "maxY": 3000.0, "series": [{"data": [[1.6842114E12, 2613.098569705332], [1.6842111E12, 3000.0], [1.68421122E12, 3000.0], [1.68421116E12, 3000.0], [1.68421134E12, 3000.0], [1.68421128E12, 3000.0]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6842114E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 1097.0, "minX": 1.0, "maxY": 8028.0, "series": [{"data": [[2.0, 1137.0], [3.0, 1128.0], [5.0, 1145.0], [9.0, 1122.0], [12.0, 1117.75], [14.0, 1116.0], [15.0, 1115.6666666666667], [18.0, 1122.0], [21.0, 1112.5], [22.0, 1121.3333333333333], [24.0, 1114.5], [26.0, 1106.0], [28.0, 1110.0], [30.0, 1105.0], [32.0, 1109.75], [34.0, 1110.0], [37.0, 1108.3333333333333], [41.0, 1107.75], [43.0, 1104.0], [42.0, 1106.0], [45.0, 1102.0], [44.0, 1107.0], [47.0, 1104.0], [49.0, 1104.0], [51.0, 1107.0], [53.0, 1116.0], [55.0, 1104.75], [57.0, 1120.0], [59.0, 1103.5], [58.0, 1100.0], [63.0, 1109.5], [62.0, 1100.5], [67.0, 1111.3333333333333], [64.0, 1109.0], [71.0, 1107.5], [74.0, 1103.0], [72.0, 1105.0], [79.0, 1758.0], [78.0, 1783.0], [77.0, 7494.0], [76.0, 1101.5], [83.0, 1174.0], [82.0, 1212.0], [81.0, 1210.0], [80.0, 1257.0], [87.0, 1119.0], [86.0, 1133.0], [85.0, 1147.0], [84.0, 1136.0], [89.0, 1113.0], [88.0, 1113.0], [93.0, 1121.0], [92.0, 1116.0], [99.0, 1109.0], [98.0, 1116.2], [103.0, 1108.0], [102.0, 1117.5], [101.0, 1107.0], [106.0, 1107.5], [104.0, 1113.0], [110.0, 1111.5], [109.0, 1105.0], [113.0, 1108.6666666666667], [119.0, 1118.0], [116.0, 1109.0], [122.0, 1107.0], [126.0, 1110.0], [127.0, 1106.0], [125.0, 1106.0], [135.0, 1108.0], [134.0, 1104.0], [131.0, 1102.0], [130.0, 1110.0], [128.0, 1103.5], [143.0, 1109.0], [142.0, 1110.0], [140.0, 1111.0], [139.0, 1111.5], [136.0, 1113.0], [150.0, 1107.5], [149.0, 1114.0], [147.0, 1107.0], [146.0, 1107.0], [145.0, 1103.5], [159.0, 1104.3333333333333], [156.0, 1105.2], [153.0, 1107.0], [165.0, 1109.0], [164.0, 1107.5], [162.0, 1107.0], [161.0, 1134.0], [174.0, 1111.0], [172.0, 1118.0], [170.0, 1109.0], [169.0, 1104.0], [182.0, 1126.5], [181.0, 1106.0], [180.0, 1107.0], [178.0, 1107.6666666666667], [176.0, 1105.0], [191.0, 1113.0], [189.0, 1115.0], [187.0, 1109.0], [185.0, 1106.3333333333333], [199.0, 1113.0], [197.0, 1105.5], [195.0, 1108.3333333333333], [194.0, 1112.0], [206.0, 1109.0], [204.0, 1100.0], [203.0, 1105.0], [201.0, 1118.0], [214.0, 1109.0], [213.0, 1111.6666666666667], [210.0, 1104.5], [209.0, 1109.0], [221.0, 1107.0], [218.0, 1112.0], [217.0, 1105.0], [216.0, 1109.5], [230.0, 1099.0], [229.0, 1106.3333333333333], [227.0, 1111.0], [226.0, 1114.0], [224.0, 1119.5], [238.0, 1111.0], [237.0, 1111.0], [235.0, 1119.0], [234.0, 1114.25], [247.0, 1105.0], [245.0, 1105.0], [243.0, 1105.75], [241.0, 1097.0], [255.0, 1100.0], [254.0, 1109.0], [253.0, 1108.5], [251.0, 1104.0], [249.0, 1110.5], [259.0, 1104.0], [270.0, 1098.0], [271.0, 1106.0], [269.0, 1106.5], [266.0, 1108.0], [264.0, 1100.0], [263.0, 1101.0], [262.0, 1110.0], [261.0, 1104.0], [258.0, 1103.0], [257.0, 1105.0], [284.0, 1108.0], [286.0, 1107.0], [287.0, 1106.0], [285.0, 1105.0], [283.0, 1104.0], [280.0, 1105.0], [278.0, 1108.0], [273.0, 1116.5], [275.0, 1121.0], [274.0, 1107.0], [277.0, 1100.0], [276.0, 1111.0], [302.0, 1106.5], [303.0, 1116.0], [300.0, 1102.0], [299.0, 1105.0], [298.0, 1107.25], [297.0, 1105.0], [294.0, 1108.5], [291.0, 1108.6666666666667], [288.0, 1108.0], [318.0, 1102.0], [316.0, 1108.0], [315.0, 1104.6666666666667], [312.0, 1111.0], [311.0, 1108.5], [310.0, 1105.0], [309.0, 1112.0], [306.0, 1103.3333333333333], [332.0, 1103.0], [334.0, 1106.5], [335.0, 1101.0], [333.0, 1101.0], [330.0, 1106.5], [329.0, 1108.0], [327.0, 1110.0], [323.0, 1108.3333333333333], [321.0, 1105.5], [326.0, 1108.0], [325.0, 1112.0], [350.0, 5099.0], [351.0, 5001.0], [349.0, 5779.0], [348.0, 5816.0], [347.0, 5812.0], [346.0, 5184.0], [345.0, 1541.0], [344.0, 1098.0], [343.0, 1100.0], [339.0, 1104.5], [336.0, 1107.0], [342.0, 1104.0], [340.0, 1103.0], [366.0, 1109.0], [367.0, 1119.0], [365.0, 1117.0], [364.0, 1112.5], [362.0, 1121.0], [361.0, 1125.0], [360.0, 1132.0], [359.0, 1118.0], [353.0, 1779.0], [352.0, 1241.0], [355.0, 1189.0], [354.0, 1764.0], [358.0, 1119.0], [357.0, 1117.0], [356.0, 1142.0], [381.0, 1104.0], [383.0, 1107.0], [380.0, 1108.0], [379.0, 1123.0], [378.0, 1110.6666666666667], [375.0, 1109.0], [374.0, 1111.0], [372.0, 1110.0], [371.0, 1126.0], [369.0, 1122.5], [397.0, 1107.3333333333333], [395.0, 1108.0], [393.0, 1109.0], [391.0, 1115.0], [390.0, 1113.5], [388.0, 1116.6666666666667], [386.0, 1107.0], [384.0, 1108.0], [413.0, 1101.0], [414.0, 1109.0], [412.0, 1128.0], [411.0, 1116.0], [409.0, 1110.5], [408.0, 1108.5], [405.0, 1105.0], [404.0, 1104.0], [403.0, 1107.5], [402.0, 1106.0], [400.0, 1107.5], [431.0, 1114.6666666666667], [428.0, 1103.0], [427.0, 1105.0], [426.0, 1110.5], [424.0, 1109.0], [422.0, 1106.5], [420.0, 1109.0], [417.0, 1114.0], [416.0, 1101.0], [446.0, 1109.0], [444.0, 1105.0], [443.0, 1118.0], [442.0, 1097.0], [439.0, 1113.0], [437.0, 1107.5], [435.0, 1110.0], [434.0, 1111.6666666666667], [462.0, 1111.5], [461.0, 1115.0], [459.0, 1108.0], [457.0, 1119.0], [456.0, 1109.0], [454.0, 1115.0], [453.0, 1107.3333333333333], [450.0, 1109.5], [448.0, 1112.0], [467.0, 1105.5], [479.0, 1106.6666666666667], [476.0, 1104.0], [475.0, 1122.0], [474.0, 1106.0], [472.0, 1108.0], [470.0, 1121.0], [469.0, 1113.0], [468.0, 1109.0], [465.0, 1117.0], [464.0, 1125.0], [493.0, 1101.0], [491.0, 1111.0], [490.0, 1119.5], [488.0, 1108.0], [485.0, 1113.3333333333333], [483.0, 1123.0], [480.0, 1099.0], [511.0, 1108.0], [506.0, 1110.0], [505.0, 1105.0], [504.0, 1110.0], [503.0, 1113.75], [500.0, 1114.0], [499.0, 1103.0], [497.0, 1113.5], [496.0, 1109.5], [542.0, 1112.0], [518.0, 1105.0], [512.0, 1109.6666666666667], [532.0, 1114.0], [528.0, 1104.0], [522.0, 1116.3333333333333], [570.0, 1113.0], [562.0, 1110.0], [550.0, 1110.0], [544.0, 1109.0], [558.0, 1116.5], [554.0, 1107.0], [552.0, 1114.0], [564.0, 1118.0], [560.0, 1105.0], [600.0, 1108.0], [606.0, 1110.5], [604.0, 1104.5], [602.0, 1109.6666666666667], [590.0, 1104.0], [578.0, 1118.0], [576.0, 1108.5714285714287], [586.0, 1110.0], [584.0, 1114.0], [592.0, 1113.0], [608.0, 1107.0], [636.0, 1109.0], [632.0, 1139.3999999999999], [612.0, 1108.0], [622.0, 1129.0], [620.0, 1308.0], [618.0, 1102.0], [616.0, 1103.3333333333333], [670.0, 1101.0], [656.0, 1102.0], [664.0, 1106.5], [642.0, 1103.0], [640.0, 1114.3333333333333], [654.0, 1112.0], [660.0, 1104.0], [658.0, 1112.0], [698.0, 1114.0], [690.0, 1108.0], [700.0, 1105.0], [688.0, 1105.0], [696.0, 1106.0], [676.0, 1109.0], [674.0, 1103.0], [672.0, 1103.0], [686.0, 1108.0], [682.0, 1108.0], [694.0, 1113.0], [692.0, 1110.5], [706.0, 1101.5], [734.0, 1104.5], [732.0, 1103.6666666666667], [728.0, 1108.6666666666667], [704.0, 1105.0], [724.0, 1113.0], [720.0, 1112.5], [718.0, 1102.5], [716.0, 1113.0], [712.0, 1104.6666666666667], [764.0, 1108.0], [738.0, 1099.0], [736.0, 1112.0], [750.0, 1105.5], [748.0, 1103.0], [794.0, 1108.5], [774.0, 1112.0], [786.0, 1107.6666666666667], [778.0, 1103.5], [826.0, 1110.0], [816.0, 1111.0], [824.0, 1108.0], [806.0, 1106.5], [802.0, 2394.0], [814.0, 1105.0], [822.0, 1106.5], [860.0, 1109.5], [850.0, 1101.0], [846.0, 1107.0], [834.0, 1103.5], [836.0, 1113.0], [838.0, 1104.3333333333333], [844.0, 1102.5], [840.0, 1110.0], [854.0, 1106.3333333333333], [892.0, 1310.0], [882.0, 1104.0], [884.0, 1101.0], [894.0, 1211.0], [890.0, 2040.0], [888.0, 1736.0], [878.0, 1102.5], [864.0, 1099.0], [876.0, 1104.0], [872.0, 1108.5714285714287], [886.0, 4817.0], [920.0, 1119.0], [924.0, 1107.0], [926.0, 1107.5], [922.0, 1117.0], [896.0, 1173.0], [898.0, 1154.0], [900.0, 1162.0], [902.0, 1815.0], [910.0, 1117.0], [908.0, 1131.0], [906.0, 1144.0], [904.0, 1156.0], [918.0, 1120.0], [954.0, 1108.5], [958.0, 1111.0], [952.0, 1104.0], [942.0, 1112.0], [932.0, 1109.0], [930.0, 1111.0], [948.0, 1110.6666666666667], [944.0, 1106.0], [962.0, 1109.0], [978.0, 1110.0], [986.0, 1106.0], [984.0, 1102.0], [974.0, 1106.0], [972.0, 1130.5], [970.0, 1104.0], [968.0, 1099.0], [976.0, 1110.0], [996.0, 1109.4], [1020.0, 1104.0], [1016.0, 1108.0], [998.0, 1112.0], [994.0, 1107.3333333333333], [1006.0, 1099.0], [1004.0, 1105.5], [1002.0, 1099.0], [1000.0, 1106.0], [1032.0, 1131.0], [1084.0, 1100.5], [1076.0, 1111.0], [1036.0, 1104.0], [1028.0, 1110.0], [1024.0, 1118.0], [1048.0, 1102.0], [1044.0, 1128.0], [1040.0, 1109.5], [1140.0, 1105.0], [1144.0, 1107.0], [1100.0, 1103.0], [1092.0, 1101.5], [1088.0, 1121.0], [1128.0, 1108.5], [1124.0, 1104.0], [1120.0, 1105.5], [1116.0, 1106.5], [1112.0, 1109.5], [1108.0, 1111.0], [1104.0, 1105.0], [1204.0, 1106.0], [1188.0, 1118.0], [1212.0, 1109.0], [1184.0, 1142.0], [1200.0, 1110.0], [1164.0, 1315.5], [1160.0, 1306.0], [1156.0, 1102.75], [1180.0, 1161.0], [1176.0, 1214.0], [1172.0, 1237.0], [1168.0, 1554.0], [1196.0, 1123.0], [1276.0, 1105.0], [1268.0, 1104.0], [1256.0, 1115.0], [1252.0, 1123.0], [1248.0, 1115.0], [1220.0, 1157.0], [1236.0, 1109.0], [1232.0, 1109.0], [1332.0, 1107.0], [1340.0, 1115.0], [1312.0, 1114.0], [1336.0, 1117.6666666666667], [1328.0, 1108.0], [1292.0, 1107.25], [1280.0, 1109.0], [1308.0, 1108.8], [1300.0, 1111.5], [1324.0, 1112.6666666666667], [1320.0, 1115.75], [1392.0, 1109.9090909090908], [1400.0, 1104.5], [1404.0, 1109.6666666666667], [1396.0, 1113.0], [1372.0, 1120.0], [1348.0, 1117.0], [1352.0, 1104.0], [1356.0, 1112.5], [1368.0, 1134.0], [1364.0, 1114.5], [1360.0, 1114.4], [1388.0, 1111.0], [1380.0, 1110.0], [1456.0, 1105.0], [1444.0, 1110.3333333333333], [1468.0, 1112.0], [1464.0, 1106.3333333333333], [1408.0, 1109.0], [1412.0, 1102.0], [1416.0, 1101.0], [1420.0, 1134.0], [1436.0, 1109.0], [1432.0, 1116.6666666666667], [1452.0, 1115.0], [1448.0, 1112.0], [1440.0, 1110.0], [1532.0, 1113.25], [1512.0, 1105.75], [1480.0, 1108.6666666666667], [1500.0, 1108.0], [1492.0, 1116.0], [1488.0, 1109.0], [1516.0, 1106.0], [1508.0, 1110.0], [1588.0, 1111.3333333333333], [1584.0, 1109.8], [1568.0, 1115.5], [1536.0, 1109.0], [1540.0, 1105.0], [1556.0, 1106.0], [1656.0, 1105.0], [1660.0, 1108.0], [1648.0, 1112.0], [1612.0, 1107.0], [1600.0, 1108.25], [1640.0, 1110.5], [1636.0, 1108.0], [1632.0, 1108.5], [1628.0, 1108.0], [1616.0, 1106.0], [1672.0, 1109.0], [1692.0, 5105.0], [1716.0, 1112.0], [1668.0, 1107.0], [1696.0, 1135.0], [1688.0, 1126.0], [1684.0, 1146.0], [1680.0, 1102.0], [1788.0, 1104.0], [1764.0, 1113.0], [1768.0, 1104.0], [1772.0, 1115.0], [1784.0, 1108.5], [1780.0, 1118.0], [1776.0, 1124.2], [1736.0, 1115.0], [1748.0, 1107.0], [1744.0, 1109.0], [1848.0, 1115.3333333333333], [1828.0, 1124.0], [1824.0, 1113.0], [1832.0, 1127.0], [1844.0, 1112.3333333333333], [1800.0, 1104.0], [1816.0, 1111.0], [1812.0, 1121.0], [1808.0, 1112.0], [1908.0, 1112.0], [1896.0, 1116.6666666666667], [1892.0, 1116.6666666666667], [1916.0, 1118.0], [1868.0, 1111.5], [1864.0, 1108.6666666666667], [1856.0, 1121.3333333333333], [1884.0, 1121.3333333333333], [1880.0, 1113.0], [1876.0, 1114.5], [1980.0, 1296.5], [1952.0, 5048.0], [1956.0, 8028.0], [1960.0, 1684.0], [1964.0, 1316.5], [1976.0, 1375.0], [1972.0, 1216.0], [1928.0, 1105.0], [1920.0, 1114.3333333333333], [1948.0, 1103.0], [1944.0, 1103.6666666666667], [1940.0, 1104.0], [1936.0, 1103.0], [2040.0, 1106.0], [1996.0, 1285.5], [2016.0, 1113.0], [2020.0, 1112.0], [2028.0, 1108.0], [2044.0, 1124.0], [1984.0, 1237.5], [2012.0, 1113.0], [2008.0, 1108.0], [2004.0, 1111.0], [2000.0, 1146.0], [2112.0, 1105.5], [2128.0, 1123.0], [2152.0, 1111.3333333333333], [2144.0, 1111.0], [2056.0, 1109.0], [2048.0, 1116.0], [2096.0, 1107.0], [2136.0, 1117.0], [2288.0, 1100.0], [2240.0, 1120.0], [2256.0, 1106.5], [2264.0, 1111.0], [2296.0, 1110.0], [2280.0, 1105.0], [2272.0, 1109.5], [2176.0, 1110.0], [2208.0, 1100.0], [2320.0, 1109.0], [2424.0, 1110.0], [2384.0, 1103.0], [2368.0, 1110.75], [2376.0, 1107.0], [2392.0, 1105.0], [2312.0, 1105.5], [2360.0, 1109.5], [2352.0, 1116.0], [2344.0, 1108.0], [2336.0, 1116.0], [2544.0, 1192.0], [2496.0, 1263.0], [2504.0, 1285.0], [2512.0, 1282.3333333333333], [2552.0, 1130.0], [2440.0, 1108.0], [2448.0, 1105.0], [2480.0, 1109.0], [2472.0, 1112.25], [2464.0, 1107.6666666666667], [2560.0, 1121.0], [2584.0, 1125.0], [2608.0, 1135.5], [2592.0, 1967.0], [2648.0, 1119.0], [2632.0, 1113.0], [2624.0, 1136.0], [2808.0, 1329.0], [2800.0, 1278.0], [2752.0, 1104.5], [2760.0, 1101.0], [2768.0, 1627.0], [2776.0, 1612.5], [2792.0, 1298.0], [2784.0, 1449.0], [2744.0, 1107.0], [2736.0, 1103.0], [2728.0, 1105.0], [2720.0, 1100.0], [2920.0, 1189.5], [2936.0, 1145.0], [2888.0, 1108.0], [2896.0, 1132.6666666666667], [2904.0, 1282.0], [2840.0, 1112.0], [2832.0, 1111.0], [2824.0, 1358.0], [2816.0, 1141.0], [2864.0, 1109.3333333333333], [2856.0, 1109.0], [2848.0, 1110.3333333333333], [2944.0, 1170.2], [3000.0, 1372.6527936293778], [2952.0, 1143.0], [2968.0, 1105.0], [2992.0, 1187.0], [2169.0, 1104.0], [2129.0, 1103.0], [2161.0, 1109.5], [2073.0, 1118.0], [2089.0, 1108.5], [2297.0, 1141.0], [2241.0, 1111.0], [2249.0, 1109.0], [2257.0, 1115.0], [2273.0, 1109.0], [2201.0, 1110.5], [2193.0, 1106.5], [2185.0, 1103.0], [2177.0, 1107.0], [2225.0, 1134.0], [2217.0, 1105.5], [2209.0, 1107.0], [2377.0, 1097.0], [2385.0, 1104.0], [2417.0, 1107.6666666666667], [2305.0, 1118.0], [2321.0, 1116.0], [2329.0, 1110.3333333333333], [2345.0, 1109.0], [2545.0, 1192.0], [2497.0, 1298.0], [2513.0, 1280.0], [2553.0, 1132.0], [2537.0, 1274.0], [2441.0, 1112.0], [2457.0, 1113.0], [2489.0, 1104.0], [2481.0, 1101.0], [2473.0, 1103.5], [2569.0, 1132.0], [2657.0, 1112.5], [2617.0, 1125.0], [2601.0, 1121.5], [2593.0, 1127.0], [2649.0, 1111.0], [2641.0, 1114.0], [2625.0, 1122.0], [2801.0, 1355.0], [2809.0, 1326.0], [2753.0, 1105.5], [2761.0, 1857.0], [2769.0, 1591.0], [2777.0, 1513.0], [2793.0, 1285.0], [2785.0, 1339.0], [2705.0, 1103.0], [2737.0, 1106.0], [2729.0, 1102.0], [2721.0, 1105.0], [2929.0, 1109.6666666666667], [2937.0, 1105.0], [2889.0, 1109.5], [2897.0, 1104.0], [2905.0, 1118.0], [2921.0, 1110.0], [2841.0, 1112.5], [2825.0, 1118.0], [2817.0, 1131.0], [2873.0, 1107.6], [2857.0, 1112.0], [2849.0, 1105.0], [2945.0, 1108.0], [2953.0, 1111.0], [2961.0, 1108.3333333333333], [2985.0, 1105.6666666666667], [2977.0, 1105.0], [1081.0, 1111.0], [1033.0, 1423.5], [1029.0, 1112.0], [1025.0, 1100.0], [1065.0, 1108.3333333333333], [1049.0, 1113.0], [1149.0, 1104.5], [1141.0, 1103.0], [1133.0, 1107.6], [1125.0, 1102.0], [1097.0, 1108.25], [1117.0, 1117.0], [1113.0, 1115.0], [1109.0, 1100.0], [1201.0, 1130.0], [1185.0, 1120.0], [1189.0, 1112.0], [1205.0, 1111.0], [1165.0, 1274.0], [1161.0, 1297.0], [1157.0, 1101.0], [1153.0, 1101.6666666666667], [1181.0, 1160.0], [1177.0, 1165.0], [1173.0, 1234.0], [1169.0, 1255.0], [1193.0, 1124.0], [1277.0, 1106.0], [1229.0, 1112.0], [1225.0, 1106.5], [1253.0, 1119.0], [1249.0, 1105.6666666666667], [1341.0, 1120.0], [1313.0, 1111.5], [1329.0, 1106.0], [1293.0, 1131.0], [1309.0, 1107.0], [1305.0, 1110.0], [1297.0, 1112.0], [1325.0, 1111.0], [1321.0, 1110.0], [1397.0, 1111.0], [1393.0, 1108.0], [1389.0, 1108.0], [1385.0, 1106.5], [1381.0, 1107.0], [1377.0, 1115.0], [1345.0, 1111.0], [1353.0, 1115.5], [1349.0, 1114.6666666666667], [1357.0, 1106.0], [1417.0, 1181.0], [1457.0, 1107.0], [1445.0, 1110.0], [1413.0, 1104.0], [1421.0, 1156.0], [1433.0, 1174.0], [1429.0, 1117.6666666666667], [1425.0, 1124.6666666666667], [1513.0, 1118.0], [1525.0, 1107.0], [1485.0, 1107.0], [1517.0, 1110.0], [1505.0, 1106.0], [1497.0, 1116.5], [1593.0, 1119.0], [1577.0, 1106.0], [1553.0, 1105.0], [1545.0, 1102.5], [1649.0, 1102.0], [1661.0, 1102.0], [1657.0, 1113.0], [1653.0, 1103.75], [1605.0, 1110.5], [1613.0, 1105.0], [1629.0, 1109.5], [1625.0, 1109.0], [1617.0, 1104.0], [1665.0, 1102.0], [1685.0, 1138.0], [1681.0, 1100.0], [1677.0, 1105.0], [1669.0, 1103.0], [1769.0, 1107.5], [1761.0, 1104.0], [1773.0, 1104.5], [1789.0, 1111.0], [1785.0, 1113.0], [1757.0, 1112.0], [1745.0, 1110.0], [1849.0, 1134.0], [1825.0, 1115.142857142857], [1833.0, 1111.0], [1853.0, 1110.0], [1845.0, 1119.0], [1841.0, 1114.0], [1805.0, 1113.0], [1801.0, 1108.5], [1797.0, 1112.0], [1813.0, 1111.6666666666667], [1913.0, 1111.6666666666667], [1917.0, 1112.75], [1889.0, 1117.5], [1897.0, 1113.0], [1905.0, 1117.0], [1865.0, 1113.3333333333333], [1881.0, 1118.8333333333333], [1873.0, 1116.5], [1981.0, 1297.0], [1953.0, 5737.0], [1957.0, 5291.0], [1961.0, 1339.0], [1965.0, 1317.0], [1977.0, 1294.0], [1973.0, 1303.0], [1969.0, 1306.5], [1933.0, 1112.0], [1925.0, 1109.0], [1921.0, 1102.0], [1949.0, 1099.0], [1937.0, 1107.0], [2041.0, 1113.0], [2017.0, 1103.0], [2021.0, 1110.0], [2025.0, 1115.6666666666667], [2037.0, 1106.0], [2033.0, 1103.0], [1985.0, 1204.0], [1989.0, 1290.0], [1993.0, 1292.0], [2013.0, 1115.0], [2005.0, 1117.0], [2001.0, 1118.0], [2074.0, 1113.3333333333333], [2122.0, 1109.25], [2066.0, 1105.0], [2050.0, 1114.0], [2106.0, 1108.0], [2098.0, 1103.5], [2082.0, 1112.0], [2138.0, 1103.0], [2282.0, 1105.5], [2242.0, 1110.0], [2250.0, 1113.5], [2298.0, 1102.0], [2266.0, 1105.0], [2186.0, 1109.0], [2234.0, 1111.6666666666667], [2226.0, 1099.0], [2218.0, 1105.0], [2402.0, 1111.0], [2426.0, 1103.3333333333333], [2370.0, 1106.6666666666667], [2378.0, 1110.5], [2314.0, 1117.0], [2322.0, 1133.0], [2330.0, 1106.0], [2354.0, 1109.0], [2546.0, 1190.0], [2554.0, 1150.0], [2498.0, 1256.0], [2514.0, 1276.0], [2434.0, 1108.25], [2450.0, 1104.75], [2458.0, 1105.0], [2490.0, 1102.0], [2482.0, 1107.0], [2466.0, 1104.0], [2570.0, 1120.0], [2578.0, 1133.142857142857], [2562.0, 1122.0], [2618.0, 1127.0], [2610.0, 1137.0], [2594.0, 1119.0], [2626.0, 1120.0], [2810.0, 1321.0], [2754.0, 1108.0], [2762.0, 1853.0], [2770.0, 1559.0], [2778.0, 1747.0], [2802.0, 1304.0], [2794.0, 1365.0], [2786.0, 1552.0], [2746.0, 1109.5], [2738.0, 1119.0], [2730.0, 1108.0], [2722.0, 1113.0], [2930.0, 1107.0], [2882.0, 1104.6666666666667], [2890.0, 1111.0], [2898.0, 1107.0], [2842.0, 1110.0], [2834.0, 1112.0], [2818.0, 1145.0], [2866.0, 1116.0], [2858.0, 1112.0], [2850.0, 1103.0], [2946.0, 1107.0], [2994.0, 1187.3333333333333], [2954.0, 1113.5], [2970.0, 1111.3333333333333], [2986.0, 1176.0], [2978.0, 1108.0], [2163.0, 1107.6666666666667], [2115.0, 1106.5], [2123.0, 1102.0], [2139.0, 1107.0], [2171.0, 1106.0], [2155.0, 1116.0], [2067.0, 1110.0], [2059.0, 1107.0], [2107.0, 1109.0], [2099.0, 1107.0], [2091.0, 1106.5], [2083.0, 1109.0], [2203.0, 1111.5], [2259.0, 1118.5], [2267.0, 1110.0], [2283.0, 1107.0], [2195.0, 1098.0], [2179.0, 1105.0], [2227.0, 1141.0], [2219.0, 1105.0], [2211.0, 1106.6666666666667], [2307.0, 1103.0], [2411.0, 1105.8], [2395.0, 1108.0], [2315.0, 1104.6666666666667], [2363.0, 1101.0], [2355.0, 1104.0], [2347.0, 1121.0], [2339.0, 1112.3333333333333], [2539.0, 1198.5], [2547.0, 1187.0], [2499.0, 1252.0], [2515.0, 1216.0], [2443.0, 1110.0], [2491.0, 1101.0], [2483.0, 1103.0], [2475.0, 1113.0], [2587.0, 1123.3333333333333], [2571.0, 1120.0], [2635.0, 1126.5], [2651.0, 1110.0], [2667.0, 1115.076923076923], [2611.0, 1123.0], [2603.0, 1129.5], [2595.0, 1124.0], [2643.0, 1110.0], [2627.0, 1127.0], [2803.0, 1342.0], [2763.0, 1838.0], [2771.0, 1634.0], [2779.0, 1583.0], [2811.0, 1306.0], [2787.0, 1306.0], [2691.0, 1108.142857142857], [2699.0, 1103.0], [2747.0, 1105.0], [2739.0, 1114.0], [2731.0, 1105.0], [2931.0, 1101.0], [2883.0, 1109.0], [2899.0, 1171.0], [2907.0, 1120.5], [2939.0, 1105.3333333333333], [2915.0, 1224.5714285714287], [2827.0, 1125.0], [2819.0, 1131.5], [2875.0, 1221.5], [2867.0, 1113.0], [2859.0, 1107.0], [2851.0, 1127.0], [2955.0, 1183.5], [2947.0, 1110.5], [2963.0, 1099.0], [2995.0, 1186.5], [2987.0, 1200.0], [519.0, 1101.0], [541.0, 1109.0], [515.0, 1106.0], [535.0, 1122.0], [533.0, 1118.0], [529.0, 1104.0], [527.0, 1108.0], [523.0, 1113.0], [521.0, 1106.5], [571.0, 1113.3333333333333], [573.0, 1109.5], [549.0, 1108.5], [547.0, 1111.6666666666667], [545.0, 1107.0], [555.0, 1106.0], [553.0, 1111.0], [567.0, 1113.3333333333333], [565.0, 1105.0], [561.0, 1118.0], [581.0, 1109.6666666666667], [593.0, 1105.0], [579.0, 1115.0], [589.0, 1115.5], [599.0, 1111.0], [597.0, 1107.0], [595.0, 1106.25], [615.0, 1104.0], [633.0, 1114.0], [637.0, 1108.0], [635.0, 1113.0], [613.0, 1106.0], [611.0, 1105.0], [609.0, 1106.0], [621.0, 1139.0], [619.0, 1098.0], [667.0, 1105.5], [657.0, 1103.0], [671.0, 1098.0], [669.0, 1105.5], [647.0, 1103.5], [645.0, 1108.6666666666667], [641.0, 1103.0], [653.0, 1105.5], [651.0, 1105.3333333333333], [649.0, 1121.0], [661.0, 1108.0], [699.0, 1100.0], [701.0, 1116.0], [679.0, 1107.0], [677.0, 1106.0], [673.0, 1106.0], [685.0, 1108.3333333333333], [681.0, 1106.0], [693.0, 1109.0], [735.0, 1102.0], [729.0, 1117.0], [709.0, 1102.0], [725.0, 1106.25], [715.0, 1108.25], [761.0, 1102.6666666666667], [765.0, 1101.0], [767.0, 1106.5], [763.0, 1104.0], [743.0, 1115.0], [741.0, 1119.0], [739.0, 1104.0], [751.0, 1111.0], [745.0, 1108.0], [759.0, 1113.0], [757.0, 1102.5], [755.0, 1111.6666666666667], [753.0, 1100.0], [797.0, 1102.6666666666667], [799.0, 1105.5], [775.0, 1108.0], [773.0, 1106.6666666666667], [771.0, 1103.0], [769.0, 1105.5], [791.0, 1105.0], [789.0, 1108.0], [785.0, 1103.0], [783.0, 1106.3333333333333], [779.0, 1108.0], [825.0, 1112.0], [817.0, 1109.0], [829.0, 1110.5], [831.0, 1115.3333333333333], [805.0, 1109.0], [803.0, 1101.0], [813.0, 1111.0], [811.0, 1103.6666666666667], [809.0, 1102.5], [823.0, 1104.5], [819.0, 1110.3333333333333], [859.0, 1107.0], [861.0, 1099.0], [857.0, 1103.5], [835.0, 1107.0], [839.0, 1099.0], [845.0, 1110.0], [843.0, 1104.0], [855.0, 1113.0], [851.0, 1108.5], [849.0, 1103.0], [893.0, 1199.0], [895.0, 1203.0], [881.0, 1107.6666666666667], [883.0, 1104.0], [885.0, 1100.0], [891.0, 1306.0], [889.0, 1430.0], [865.0, 1106.3333333333333], [877.0, 1107.5], [873.0, 1105.0], [887.0, 5107.0], [897.0, 1212.0], [923.0, 1108.0], [921.0, 1117.0], [911.0, 1117.0], [899.0, 1159.0], [901.0, 1808.0], [903.0, 1135.0], [909.0, 1150.0], [907.0, 1169.0], [905.0, 1129.0], [917.0, 1113.0], [915.0, 1446.0], [913.0, 1113.5], [933.0, 1107.5], [945.0, 1111.6], [957.0, 1112.0], [929.0, 1119.0], [935.0, 1110.5], [941.0, 1115.0], [939.0, 1112.0], [937.0, 1102.0], [951.0, 1112.5], [949.0, 1114.0], [985.0, 1106.0], [989.0, 1117.0], [961.0, 1126.0], [963.0, 1103.0], [967.0, 1124.0], [965.0, 1110.5], [983.0, 1110.0], [981.0, 1103.0], [979.0, 1128.0], [1019.0, 1105.0], [1023.0, 1109.3333333333333], [1017.0, 1106.0], [997.0, 1109.0], [1005.0, 1113.0], [1001.0, 1103.0], [1015.0, 1108.0], [1013.0, 1322.3333333333333], [1011.0, 1108.0], [1009.0, 1107.0], [1078.0, 1111.5], [1038.0, 1109.5], [1082.0, 1106.6666666666667], [1074.0, 1112.6666666666667], [1034.0, 1117.0], [1030.0, 1110.0], [1026.0, 1105.0], [1066.0, 1101.0], [1062.0, 1261.25], [1058.0, 1104.5], [1054.0, 1109.6666666666667], [1050.0, 1115.0], [1046.0, 1111.0], [1042.0, 1109.5], [1138.0, 1103.0], [1122.0, 1113.0], [1102.0, 1109.5], [1094.0, 1110.0], [1126.0, 1105.0], [1114.0, 1110.0], [1110.0, 1101.0], [1106.0, 1117.0], [1162.0, 1316.0], [1202.0, 1109.0], [1206.0, 1112.0], [1166.0, 1583.0], [1158.0, 1713.0], [1154.0, 1105.0], [1182.0, 1123.0], [1178.0, 1213.0], [1174.0, 1234.0], [1170.0, 1262.0], [1194.0, 1114.0], [1190.0, 1114.0], [1278.0, 1117.0], [1266.0, 1111.0], [1254.0, 1106.5], [1246.0, 1106.0], [1218.0, 1114.6666666666667], [1230.0, 1107.6], [1222.0, 1116.5], [1242.0, 1110.0], [1234.0, 1106.0], [1314.0, 1111.5], [1318.0, 1111.5], [1338.0, 1117.0], [1310.0, 1110.0], [1306.0, 1115.0], [1298.0, 1101.0], [1326.0, 1116.0], [1394.0, 1105.0], [1398.0, 1110.0], [1346.0, 1119.0], [1354.0, 1117.0], [1358.0, 1114.0], [1366.0, 1115.0], [1386.0, 1118.5], [1382.0, 1112.4285714285716], [1414.0, 1102.0], [1466.0, 1101.5], [1438.0, 1122.0], [1418.0, 1744.0], [1422.0, 1132.0], [1426.0, 1115.0], [1450.0, 1106.0], [1442.0, 1113.0], [1486.0, 1103.5], [1506.0, 1117.0], [1530.0, 1102.0], [1522.0, 1107.0], [1482.0, 1106.0], [1502.0, 1114.5], [1494.0, 1106.0], [1490.0, 1107.3333333333333], [1518.0, 1105.0], [1514.0, 1104.0], [1510.0, 1107.0], [1586.0, 1108.0], [1598.0, 1104.0], [1594.0, 1124.0], [1590.0, 1106.0], [1566.0, 1106.5], [1538.0, 1107.5], [1542.0, 1120.0], [1562.0, 1108.0], [1554.0, 1113.0], [1610.0, 1109.0], [1606.0, 1101.5], [1638.0, 1109.0], [1622.0, 1112.5], [1618.0, 1104.0], [1722.0, 1116.0], [1678.0, 1105.0], [1674.0, 1105.0], [1670.0, 1105.5], [1686.0, 1125.0], [1682.0, 5488.0], [1782.0, 1105.0], [1762.0, 1113.0], [1790.0, 1110.0], [1766.0, 1113.0], [1774.0, 1115.0], [1750.0, 1107.0], [1734.0, 1110.0], [1742.0, 1127.0], [1738.0, 1118.5], [1806.0, 1109.3333333333333], [1842.0, 1112.0], [1850.0, 1116.0], [1830.0, 1106.0], [1838.0, 1110.0], [1802.0, 1113.0], [1794.0, 1117.6666666666667], [1822.0, 1111.3333333333333], [1814.0, 1109.0], [1810.0, 1106.0], [1910.0, 1114.5], [1914.0, 1112.0], [1918.0, 1111.0], [1898.0, 1124.5], [1902.0, 1115.3333333333333], [1870.0, 1121.5], [1866.0, 1119.0], [1862.0, 1109.0], [1858.0, 1110.0], [1878.0, 1121.0], [1874.0, 1120.6666666666667], [1982.0, 1288.0], [1978.0, 1293.0], [1954.0, 5668.0], [1958.0, 7780.0], [1962.0, 1323.0], [1966.0, 1305.0], [1934.0, 1105.0], [1930.0, 1107.0], [1926.0, 1103.3333333333333], [1922.0, 1115.0], [1950.0, 7390.0], [1946.0, 1105.0], [1938.0, 1107.0], [2042.0, 1108.0], [2022.0, 1109.0], [2030.0, 1108.5], [2046.0, 1115.5], [1986.0, 1285.0], [1994.0, 1201.0], [1998.0, 1300.0], [2014.0, 1114.0], [2010.0, 1110.0], [2006.0, 1124.0], [2002.0, 1120.0], [2156.0, 1104.3333333333333], [2172.0, 1106.3333333333333], [2068.0, 1119.0], [2060.0, 1102.0], [2092.0, 1107.5], [2140.0, 1105.0], [2284.0, 1117.0], [2244.0, 1110.0], [2252.0, 1106.0], [2260.0, 1101.0], [2268.0, 1111.0], [2196.0, 1110.0], [2188.0, 1106.6666666666667], [2180.0, 1108.0], [2228.0, 1117.0], [2220.0, 1102.0], [2212.0, 1103.0], [2372.0, 1106.6666666666667], [2388.0, 1105.0], [2404.0, 1099.0], [2324.0, 1118.0], [2332.0, 1104.0], [2540.0, 1196.0], [2500.0, 1251.0], [2508.0, 1284.0], [2556.0, 1124.0], [2444.0, 1103.0], [2452.0, 1109.5], [2460.0, 1110.0], [2492.0, 1097.0], [2620.0, 1116.5], [2572.0, 1129.0], [2612.0, 1124.0], [2596.0, 1121.0], [2652.0, 2000.0], [2644.0, 1135.0], [2636.0, 1124.0], [2628.0, 1122.0], [2796.0, 1364.0], [2812.0, 1276.5], [2764.0, 7665.0], [2772.0, 1582.0], [2780.0, 1482.0], [2692.0, 1109.3684210526312], [2748.0, 1113.0], [2740.0, 1110.0], [2732.0, 1102.0], [2724.0, 1110.0], [2844.0, 1143.5], [2892.0, 1107.3333333333333], [2900.0, 1104.6666666666667], [2924.0, 1109.3333333333333], [2836.0, 1115.6666666666667], [2828.0, 1121.0], [2820.0, 1121.0], [2876.0, 1109.0], [2852.0, 1104.0], [2860.0, 1115.0], [2948.0, 1256.0], [2964.0, 1115.0], [2972.0, 1109.0], [2988.0, 1168.0], [2980.0, 1144.6666666666667], [2173.0, 1103.0], [2117.0, 1106.0], [2125.0, 1112.0], [2133.0, 1106.0], [2141.0, 1108.0], [2157.0, 1106.0], [2149.0, 1107.4], [2077.0, 1114.0], [2061.0, 1106.0], [2109.0, 1114.0], [2093.0, 1122.0], [2085.0, 1106.0], [2277.0, 1111.3333333333333], [2293.0, 1108.5], [2301.0, 1106.0], [2253.0, 1102.5], [2285.0, 1112.0], [2205.0, 1107.0], [2237.0, 1114.3333333333333], [2229.0, 1115.0], [2221.0, 1102.0], [2213.0, 1108.0], [2413.0, 1108.3333333333333], [2421.0, 1102.0], [2429.0, 1109.0], [2389.0, 1105.0], [2309.0, 1111.0], [2317.0, 1111.0], [2325.0, 1098.0], [2333.0, 1105.5], [2357.0, 1106.5], [2349.0, 1106.0], [2341.0, 1104.0], [2549.0, 1183.0], [2541.0, 1196.0], [2501.0, 1289.0], [2509.0, 1253.75], [2557.0, 1129.5], [2437.0, 1113.0], [2445.0, 1109.0], [2453.0, 1113.0], [2493.0, 1273.0], [2485.0, 1109.0], [2477.0, 1104.25], [2573.0, 1126.0], [2581.0, 1128.0], [2565.0, 1129.3333333333333], [2621.0, 1124.5], [2613.0, 1120.0], [2653.0, 1115.0], [2645.0, 1122.0], [2637.0, 1121.0], [2805.0, 1335.5], [2757.0, 1105.0], [2765.0, 1675.0], [2773.0, 1639.0], [2781.0, 1543.0], [2813.0, 1262.0], [2789.0, 1305.0], [2749.0, 1107.0], [2693.0, 1105.0], [2701.0, 1107.0], [2717.0, 1109.875], [2733.0, 1102.0], [2933.0, 1107.6666666666667], [2925.0, 1110.0], [2885.0, 1106.3333333333333], [2901.0, 1097.0], [2909.0, 1276.0], [2941.0, 1165.0], [2917.0, 1111.5], [2845.0, 1108.0], [2837.0, 1108.0], [2829.0, 1124.0], [2861.0, 1109.0], [2853.0, 1114.0], [2989.0, 1199.0], [2957.0, 1113.0], [2973.0, 1107.3333333333333], [2981.0, 1154.6666666666667], [1087.0, 1108.5], [1075.0, 1104.0], [1071.0, 1104.5], [1067.0, 1105.0], [1051.0, 1120.0], [1047.0, 1109.0], [1043.0, 1110.0], [1147.0, 1103.5], [1143.0, 1107.0], [1135.0, 1104.0], [1123.0, 1107.5], [1119.0, 1103.0], [1095.0, 1115.0], [1103.0, 1109.0], [1099.0, 1111.0], [1107.0, 1101.5], [1203.0, 1110.0], [1211.0, 1114.75], [1191.0, 1117.0], [1215.0, 1110.6666666666667], [1187.0, 1118.5], [1167.0, 1294.0], [1159.0, 1717.0], [1183.0, 1123.0], [1179.0, 1152.0], [1175.0, 1184.0], [1171.0, 1265.0], [1199.0, 1114.0], [1195.0, 1115.0], [1231.0, 1108.0], [1279.0, 1107.0], [1219.0, 1108.0], [1263.0, 1106.3333333333333], [1255.0, 1118.0], [1247.0, 1112.5], [1239.0, 1115.6666666666667], [1235.0, 1108.0], [1339.0, 1115.0], [1343.0, 1111.0], [1335.0, 1109.0], [1331.0, 1119.0], [1311.0, 1112.0], [1283.0, 1106.6666666666667], [1307.0, 1103.0], [1327.0, 1109.0], [1323.0, 1116.0], [1403.0, 1111.5], [1407.0, 1106.0], [1375.0, 1108.0], [1359.0, 1126.0], [1371.0, 1107.5], [1367.0, 1107.0], [1463.0, 1101.5], [1467.0, 1114.0], [1459.0, 1109.0], [1455.0, 1117.0], [1447.0, 1109.0], [1435.0, 1122.5], [1411.0, 1103.6666666666667], [1419.0, 1138.0], [1483.0, 1106.0], [1527.0, 1108.0], [1479.0, 1105.5], [1475.0, 1104.5], [1519.0, 1107.0], [1515.0, 1099.0], [1507.0, 1108.3333333333333], [1499.0, 1128.0], [1495.0, 1116.0], [1575.0, 1231.4], [1595.0, 1110.0], [1579.0, 1112.6666666666667], [1571.0, 1106.5], [1559.0, 2343.6666666666665], [1551.0, 1109.8], [1547.0, 1109.0], [1603.0, 1115.0], [1663.0, 1110.0], [1655.0, 1109.5], [1631.0, 1107.0], [1607.0, 1107.0], [1611.0, 1108.5], [1627.0, 1105.0], [1623.0, 1107.0], [1619.0, 1109.0], [1647.0, 1106.0], [1643.0, 1106.6666666666667], [1639.0, 1104.0], [1635.0, 1107.6666666666667], [1671.0, 1108.0], [1687.0, 1127.0], [1683.0, 5254.0], [1679.0, 1106.0], [1675.0, 1105.0], [1667.0, 1111.0], [1787.0, 1108.0], [1763.0, 1114.0], [1783.0, 1104.6666666666667], [1779.0, 1122.0], [1731.0, 1118.0], [1851.0, 1113.75], [1855.0, 1114.0], [1827.0, 1115.0], [1831.0, 1112.0], [1835.0, 1109.3333333333333], [1839.0, 1113.5], [1843.0, 1110.0], [1807.0, 1123.6666666666667], [1799.0, 1101.0], [1795.0, 1105.5], [1819.0, 1112.75], [1815.0, 1106.0], [1811.0, 1108.0], [1867.0, 1119.0], [1899.0, 1125.0], [1911.0, 1113.0], [1871.0, 1121.0], [1863.0, 1116.0], [1859.0, 1123.0], [1887.0, 1121.75], [1879.0, 1118.0], [1875.0, 1118.0], [1971.0, 1298.0], [1975.0, 1259.0], [1959.0, 1740.0], [1955.0, 3198.0], [1967.0, 1335.0], [1935.0, 1103.0], [1931.0, 1107.0], [1927.0, 1112.0], [1951.0, 5054.0], [1947.0, 1102.0], [1943.0, 1107.0], [1987.0, 1317.0], [2035.0, 1113.0], [2043.0, 1105.0], [2047.0, 1104.0], [2019.0, 1110.5], [2027.0, 1221.5], [2015.0, 1112.0], [1991.0, 1293.0], [1999.0, 1278.0], [2011.0, 1107.0], [2007.0, 1118.0], [2003.0, 1125.0], [2070.0, 1106.0], [2078.0, 1106.5], [2166.0, 1107.3333333333333], [2118.0, 1106.0], [2126.0, 1110.0], [2062.0, 1108.0], [2054.0, 1106.0], [2110.0, 1112.0], [2094.0, 1113.0], [2086.0, 1103.0], [2246.0, 1104.5], [2270.0, 1113.5], [2294.0, 1107.0], [2278.0, 1103.0], [2198.0, 1107.6666666666667], [2238.0, 1116.0], [2222.0, 1103.0], [2406.0, 1107.0], [2374.0, 1112.0], [2390.0, 1101.0], [2422.0, 1109.5], [2366.0, 1105.0], [2318.0, 1102.5], [2326.0, 1107.6666666666667], [2350.0, 1120.0], [2558.0, 1131.0], [2550.0, 1227.0], [2502.0, 1227.0], [2438.0, 1115.0], [2446.0, 1122.0], [2494.0, 1268.0], [2470.0, 1102.0], [2590.0, 1120.5], [2646.0, 1127.0], [2582.0, 1129.0], [2574.0, 1142.6666666666667], [2614.0, 1123.0], [2606.0, 1131.0], [2598.0, 1116.0], [2630.0, 1116.5], [2806.0, 1281.0], [2814.0, 1172.0], [2758.0, 1104.3333333333333], [2766.0, 1709.0], [2774.0, 1543.0], [2782.0, 1479.0], [2798.0, 1302.5], [2790.0, 1292.0], [2694.0, 1102.0], [2726.0, 1108.0], [2926.0, 1111.0], [2886.0, 1112.0], [2894.0, 1136.5], [2902.0, 1253.3333333333333], [2910.0, 1172.0], [2934.0, 1264.0], [2830.0, 1122.0], [2878.0, 1113.5], [2870.0, 1112.75], [2862.0, 1115.0], [2950.0, 1105.0], [2958.0, 1107.0], [2966.0, 1147.0], [2998.0, 1184.0], [2990.0, 1197.0], [2982.0, 1102.0], [2167.0, 1113.0], [2175.0, 1114.0], [2135.0, 1109.8], [2143.0, 1102.0], [2159.0, 1115.0], [2079.0, 1108.0], [2063.0, 1099.0], [2103.0, 1107.0], [2095.0, 1122.0], [2295.0, 1109.5], [2247.0, 1108.0], [2255.0, 1118.0], [2263.0, 1110.3333333333333], [2279.0, 1112.0], [2207.0, 1112.0], [2199.0, 1114.0], [2191.0, 1100.6666666666667], [2183.0, 1111.0], [2239.0, 1111.0], [2231.0, 1115.5], [2223.0, 1104.0], [2375.0, 1110.0], [2383.0, 1106.5], [2431.0, 1116.0], [2399.0, 1109.3333333333333], [2367.0, 1105.0], [2335.0, 1104.0], [2351.0, 1104.5], [2343.0, 1108.0], [2543.0, 1194.3333333333333], [2551.0, 1215.0], [2495.0, 1263.0], [2447.0, 1108.0], [2455.0, 1110.0], [2463.0, 1110.0], [2487.0, 1101.6666666666667], [2615.0, 1120.0], [2623.0, 1125.0], [2599.0, 1121.5], [2655.0, 1115.6666666666667], [2647.0, 1123.0], [2639.0, 1167.0], [2631.0, 1121.0], [2807.0, 1330.0], [2767.0, 1622.0], [2815.0, 1310.5], [2759.0, 1105.0], [2783.0, 1382.0], [2799.0, 1297.0], [2791.0, 1318.0], [2695.0, 1107.0], [2703.0, 1100.0], [2719.0, 1496.5], [2743.0, 1111.3333333333333], [2735.0, 1108.5], [2935.0, 1110.0], [2943.0, 1209.3333333333333], [2887.0, 1113.0], [2903.0, 1130.5], [2911.0, 1120.0], [2927.0, 1109.6666666666667], [2839.0, 1121.5], [2831.0, 1729.0], [2823.0, 1198.6666666666667], [2879.0, 1109.0], [2871.0, 1113.0], [2959.0, 1184.75], [2967.0, 1107.0], [2975.0, 1106.5], [2991.0, 1193.5], [2983.0, 1101.0], [1.0, 1154.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[2943.9934269606783, 1364.74044601875]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 3000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 10796.65, "minX": 1.6842111E12, "maxY": 207590.13333333333, "series": [{"data": [[1.6842114E12, 129276.85], [1.6842111E12, 13293.233333333334], [1.68421122E12, 207590.13333333333], [1.68421116E12, 207070.83333333334], [1.68421134E12, 166027.7], [1.68421128E12, 169630.11666666667]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.6842114E12, 105034.3], [1.6842111E12, 10796.65], [1.68421122E12, 168710.1], [1.68421116E12, 168330.0], [1.68421134E12, 134899.3], [1.68421128E12, 137822.45]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6842114E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 1215.5951232121274, "minX": 1.6842111E12, "maxY": 2934.3176865046066, "series": [{"data": [[1.6842114E12, 1215.5951232121274], [1.6842111E12, 2934.3176865046066], [1.68421122E12, 1248.7516897328667], [1.68421116E12, 1694.6172580645207], [1.68421134E12, 1231.080370320677], [1.68421128E12, 1225.359380130014]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6842114E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 1215.360761674999, "minX": 1.6842111E12, "maxY": 2933.4165968147527, "series": [{"data": [[1.6842114E12, 1215.360761674999], [1.6842111E12, 2933.4165968147527], [1.68421122E12, 1248.3869220040815], [1.68421116E12, 1694.3168817204178], [1.68421134E12, 1230.8601234402258], [1.68421128E12, 1225.0889749819378]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6842114E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 48.170367986267536, "minX": 1.6842111E12, "maxY": 1747.3805532271583, "series": [{"data": [[1.6842114E12, 73.78114768223362], [1.6842111E12, 1747.3805532271583], [1.68421122E12, 48.170367986267536], [1.68421116E12, 348.2980645161299], [1.68421134E12, 66.52790822487718], [1.68421128E12, 65.2784818438509]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6842114E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 1093.0, "minX": 1.6842111E12, "maxY": 11183.0, "series": [{"data": [[1.6842114E12, 8386.0], [1.6842111E12, 5398.0], [1.68421122E12, 9317.0], [1.68421116E12, 11183.0], [1.68421134E12, 7983.0], [1.68421128E12, 8089.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.6842114E12, 1463.0], [1.6842111E12, 3945.8], [1.68421122E12, 1552.0], [1.68421116E12, 3688.600000000002], [1.68421134E12, 1457.3999999999996], [1.68421128E12, 1493.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.6842114E12, 1739.9300000000003], [1.6842111E12, 4481.999999999997], [1.68421122E12, 3355.539999999968], [1.68421116E12, 8421.8], [1.68421134E12, 2055.880000000001], [1.68421128E12, 1959.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.6842114E12, 1533.0], [1.6842111E12, 4118.3], [1.68421122E12, 1773.0], [1.68421116E12, 4830.799999999999], [1.68421134E12, 1651.0], [1.68421128E12, 1607.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.6842114E12, 1095.0], [1.6842111E12, 1375.0], [1.68421122E12, 1094.0], [1.68421116E12, 1095.0], [1.68421134E12, 1093.0], [1.68421128E12, 1094.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.6842114E12, 1114.0], [1.6842111E12, 2913.0], [1.68421122E12, 1113.0], [1.68421116E12, 1121.0], [1.68421134E12, 1111.0], [1.68421128E12, 1110.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6842114E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 38.0, "minX": 1.0, "maxY": 7475.5, "series": [{"data": [[2.0, 4092.5], [3.0, 7475.5], [4.0, 1999.0], [5.0, 4984.0], [7.0, 5002.0], [8.0, 2021.0], [9.0, 1919.0], [11.0, 1774.0], [12.0, 1713.0], [13.0, 5738.0], [14.0, 2131.0], [15.0, 1551.0], [16.0, 1242.0], [26.0, 2008.0], [28.0, 2533.0], [45.0, 1318.0], [48.0, 1148.5], [58.0, 1356.0], [66.0, 1105.5], [78.0, 1250.0], [77.0, 1107.0], [76.0, 1109.5], [107.0, 1131.0], [122.0, 1109.0], [132.0, 1567.5], [158.0, 1106.0], [157.0, 1435.0], [175.0, 1962.5], [197.0, 3556.0], [192.0, 1479.5], [218.0, 1109.0], [220.0, 1106.0], [227.0, 1425.0], [233.0, 1145.0], [245.0, 2200.0], [244.0, 1561.5], [271.0, 1564.0], [270.0, 1111.0], [262.0, 1620.5], [259.0, 1115.0], [263.0, 1107.0], [267.0, 1110.0], [266.0, 1114.0], [264.0, 1112.0], [268.0, 1108.0], [269.0, 1110.0], [265.0, 1108.0], [261.0, 1111.0], [260.0, 1562.5], [286.0, 3397.5], [272.0, 1111.0], [273.0, 1109.0], [283.0, 1108.0], [279.0, 1110.0], [274.0, 1106.0], [280.0, 1456.5], [300.0, 1111.0], [292.0, 1660.5], [296.0, 1128.0], [298.0, 1108.0], [289.0, 1121.0], [316.0, 1119.0], [308.0, 1116.0], [318.0, 1142.0], [332.0, 1124.0], [326.0, 1350.0], [337.0, 1178.0], [339.0, 1210.0], [366.0, 4878.0], [359.0, 1662.0], [377.0, 1110.5], [368.0, 1112.0], [369.0, 1108.0], [374.0, 1155.0], [385.0, 3452.0], [398.0, 1784.5], [390.0, 1113.0], [389.0, 1335.0], [408.0, 1197.0], [414.0, 1123.5], [401.0, 1109.0], [426.0, 1209.5], [428.0, 1299.0], [425.0, 1112.0], [416.0, 1371.0], [437.0, 4047.5], [456.0, 1362.0], [450.0, 1137.0], [476.0, 2590.0], [468.0, 1634.0], [465.0, 1725.0], [490.0, 1117.0], [493.0, 1112.0], [509.0, 1127.0], [504.0, 1114.0], [538.0, 1112.0], [528.0, 1110.0], [523.0, 1123.0], [537.0, 1129.0], [539.0, 1114.0], [531.0, 1110.0], [532.0, 1108.0], [524.0, 1116.0], [525.0, 1109.0], [515.0, 1108.0], [517.0, 1111.0], [535.0, 1110.0], [533.0, 1108.0], [521.0, 1308.5], [529.0, 1111.0], [530.0, 1110.0], [562.0, 1121.0], [551.0, 1438.0], [549.0, 1386.0], [595.0, 4493.0], [678.0, 1806.0], [684.0, 1416.0], [693.0, 1153.0], [710.0, 1789.0], [716.0, 1107.0], [733.0, 1112.0], [762.0, 1108.0], [738.0, 1137.0], [755.0, 1113.0], [752.0, 1112.0], [746.0, 1112.0], [737.0, 1119.0], [742.0, 1109.0], [766.0, 1110.0], [763.0, 1108.0], [764.0, 1107.0], [786.0, 1112.0], [775.0, 1110.0], [795.0, 1109.0], [882.0, 1110.0], [895.0, 1108.0], [890.0, 1114.0], [913.0, 1127.0], [1.0, 6553.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[528.0, 40.0], [538.0, 38.0], [298.0, 40.0], [316.0, 184.0], [738.0, 121.0], [755.0, 38.0], [377.0, 41.0], [12.0, 40.0], [786.0, 39.0], [14.0, 41.0], [476.0, 40.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 913.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 38.0, "minX": 1.0, "maxY": 7475.5, "series": [{"data": [[2.0, 4091.0], [3.0, 7475.5], [4.0, 1999.0], [5.0, 4983.0], [7.0, 5001.0], [8.0, 2021.0], [9.0, 1919.0], [11.0, 1774.0], [12.0, 1713.0], [13.0, 5737.0], [14.0, 2131.0], [15.0, 1551.0], [16.0, 1242.0], [26.0, 2007.5], [28.0, 2532.5], [45.0, 1317.0], [48.0, 1148.0], [58.0, 1356.0], [66.0, 1105.0], [78.0, 1250.0], [77.0, 1106.0], [76.0, 1109.0], [107.0, 1130.0], [122.0, 1109.0], [132.0, 1567.0], [158.0, 1106.0], [157.0, 1434.0], [175.0, 1962.5], [197.0, 3556.0], [192.0, 1479.5], [218.0, 1109.0], [220.0, 1106.0], [227.0, 1424.0], [233.0, 1145.0], [245.0, 2200.0], [244.0, 1561.0], [271.0, 1564.0], [270.0, 1111.0], [262.0, 1620.0], [259.0, 1114.0], [263.0, 1107.0], [267.0, 1110.0], [266.0, 1114.0], [264.0, 1112.0], [268.0, 1108.0], [269.0, 1110.0], [265.0, 1107.0], [261.0, 1111.0], [260.0, 1562.5], [286.0, 3389.5], [272.0, 1110.0], [273.0, 1109.0], [283.0, 1108.0], [279.0, 1109.0], [274.0, 1106.0], [280.0, 1456.5], [300.0, 1110.5], [292.0, 1660.5], [296.0, 1128.0], [298.0, 1108.0], [289.0, 1121.0], [316.0, 1119.0], [308.0, 1115.0], [318.0, 1142.0], [332.0, 1124.0], [326.0, 1350.0], [337.0, 1178.0], [339.0, 1210.0], [366.0, 4878.0], [359.0, 1662.0], [377.0, 1110.0], [368.0, 1111.5], [369.0, 1108.0], [374.0, 1155.0], [385.0, 3452.0], [398.0, 1784.0], [390.0, 1113.0], [389.0, 1335.0], [408.0, 1197.0], [414.0, 1123.5], [401.0, 1108.0], [426.0, 1209.0], [428.0, 1298.5], [425.0, 1112.0], [416.0, 1371.0], [437.0, 4047.5], [456.0, 1362.0], [450.0, 1137.0], [476.0, 2590.0], [468.0, 1634.0], [465.0, 1725.0], [490.0, 1116.5], [493.0, 1112.0], [509.0, 1127.0], [504.0, 1114.0], [538.0, 1112.0], [528.0, 1110.0], [523.0, 1123.0], [537.0, 1129.0], [539.0, 1114.0], [531.0, 1110.0], [532.0, 1108.0], [524.0, 1115.0], [525.0, 1108.0], [515.0, 1108.0], [517.0, 1110.0], [535.0, 1110.0], [533.0, 1108.0], [521.0, 1308.5], [529.0, 1110.0], [530.0, 1110.0], [562.0, 1121.0], [551.0, 1438.0], [549.0, 1386.0], [595.0, 4493.0], [678.0, 1806.0], [684.0, 1416.0], [693.0, 1153.0], [710.0, 1789.0], [716.0, 1107.0], [733.0, 1112.0], [762.0, 1108.0], [738.0, 1137.0], [755.0, 1112.0], [752.0, 1111.0], [746.0, 1112.0], [737.0, 1119.0], [742.0, 1108.0], [766.0, 1109.5], [763.0, 1108.0], [764.0, 1107.0], [786.0, 1111.0], [775.0, 1110.0], [795.0, 1108.0], [882.0, 1110.0], [895.0, 1108.0], [890.0, 1114.0], [913.0, 1126.0], [1.0, 6552.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[528.0, 40.0], [538.0, 38.0], [298.0, 40.0], [316.0, 184.0], [738.0, 121.0], [755.0, 38.0], [377.0, 40.0], [12.0, 40.0], [786.0, 39.0], [14.0, 41.0], [476.0, 40.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 913.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 53.4, "minX": 1.6842111E12, "maxY": 298.15, "series": [{"data": [[1.6842114E12, 192.61666666666667], [1.6842111E12, 53.4], [1.68421122E12, 298.15], [1.68421116E12, 289.25], [1.68421134E12, 249.2], [1.68421128E12, 253.65]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6842114E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.6842111E12, "maxY": 310.55, "series": [{"data": [[1.6842114E12, 193.43333333333334], [1.6842111E12, 19.883333333333333], [1.68421122E12, 310.55], [1.68421116E12, 309.71666666666664], [1.68421134E12, 248.41666666666666], [1.68421128E12, 253.8]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.68421122E12, 0.15], [1.68421116E12, 0.2833333333333333], [1.68421134E12, 0.016666666666666666], [1.68421128E12, 0.016666666666666666]], "isOverall": false, "label": "429", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6842114E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.6842111E12, "maxY": 310.55, "series": [{"data": [[1.6842114E12, 193.43333333333334], [1.6842111E12, 19.883333333333333], [1.68421122E12, 310.55], [1.68421116E12, 309.71666666666664], [1.68421134E12, 248.41666666666666], [1.68421128E12, 253.8]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.68421122E12, 0.15], [1.68421116E12, 0.2833333333333333], [1.68421134E12, 0.016666666666666666], [1.68421128E12, 0.016666666666666666]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6842114E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.6842111E12, "maxY": 310.55, "series": [{"data": [[1.6842114E12, 193.43333333333334], [1.6842111E12, 19.883333333333333], [1.68421122E12, 310.55], [1.68421116E12, 309.71666666666664], [1.68421134E12, 248.41666666666666], [1.68421128E12, 253.8]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.68421122E12, 0.15], [1.68421116E12, 0.2833333333333333], [1.68421134E12, 0.016666666666666666], [1.68421128E12, 0.016666666666666666]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6842114E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

