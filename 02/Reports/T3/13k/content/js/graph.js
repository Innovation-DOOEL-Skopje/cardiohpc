/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 28.0, "minX": 0.0, "maxY": 12903.0, "series": [{"data": [[0.0, 28.0], [0.1, 1096.0], [0.2, 1096.0], [0.3, 1097.0], [0.4, 1097.0], [0.5, 1097.0], [0.6, 1098.0], [0.7, 1098.0], [0.8, 1098.0], [0.9, 1098.0], [1.0, 1098.0], [1.1, 1098.0], [1.2, 1099.0], [1.3, 1099.0], [1.4, 1099.0], [1.5, 1099.0], [1.6, 1099.0], [1.7, 1099.0], [1.8, 1099.0], [1.9, 1099.0], [2.0, 1099.0], [2.1, 1100.0], [2.2, 1100.0], [2.3, 1100.0], [2.4, 1100.0], [2.5, 1100.0], [2.6, 1100.0], [2.7, 1100.0], [2.8, 1100.0], [2.9, 1100.0], [3.0, 1100.0], [3.1, 1100.0], [3.2, 1100.0], [3.3, 1100.0], [3.4, 1101.0], [3.5, 1101.0], [3.6, 1101.0], [3.7, 1101.0], [3.8, 1101.0], [3.9, 1101.0], [4.0, 1101.0], [4.1, 1101.0], [4.2, 1101.0], [4.3, 1101.0], [4.4, 1101.0], [4.5, 1101.0], [4.6, 1101.0], [4.7, 1101.0], [4.8, 1101.0], [4.9, 1101.0], [5.0, 1101.0], [5.1, 1101.0], [5.2, 1102.0], [5.3, 1102.0], [5.4, 1102.0], [5.5, 1102.0], [5.6, 1102.0], [5.7, 1102.0], [5.8, 1102.0], [5.9, 1102.0], [6.0, 1102.0], [6.1, 1102.0], [6.2, 1102.0], [6.3, 1102.0], [6.4, 1102.0], [6.5, 1102.0], [6.6, 1102.0], [6.7, 1102.0], [6.8, 1102.0], [6.9, 1102.0], [7.0, 1102.0], [7.1, 1102.0], [7.2, 1102.0], [7.3, 1102.0], [7.4, 1103.0], [7.5, 1103.0], [7.6, 1103.0], [7.7, 1103.0], [7.8, 1103.0], [7.9, 1103.0], [8.0, 1103.0], [8.1, 1103.0], [8.2, 1103.0], [8.3, 1103.0], [8.4, 1103.0], [8.5, 1103.0], [8.6, 1103.0], [8.7, 1103.0], [8.8, 1103.0], [8.9, 1103.0], [9.0, 1103.0], [9.1, 1103.0], [9.2, 1103.0], [9.3, 1103.0], [9.4, 1103.0], [9.5, 1103.0], [9.6, 1103.0], [9.7, 1103.0], [9.8, 1103.0], [9.9, 1103.0], [10.0, 1104.0], [10.1, 1104.0], [10.2, 1104.0], [10.3, 1104.0], [10.4, 1104.0], [10.5, 1104.0], [10.6, 1104.0], [10.7, 1104.0], [10.8, 1104.0], [10.9, 1104.0], [11.0, 1104.0], [11.1, 1104.0], [11.2, 1104.0], [11.3, 1104.0], [11.4, 1104.0], [11.5, 1104.0], [11.6, 1104.0], [11.7, 1104.0], [11.8, 1104.0], [11.9, 1104.0], [12.0, 1104.0], [12.1, 1104.0], [12.2, 1104.0], [12.3, 1104.0], [12.4, 1104.0], [12.5, 1104.0], [12.6, 1104.0], [12.7, 1104.0], [12.8, 1105.0], [12.9, 1105.0], [13.0, 1105.0], [13.1, 1105.0], [13.2, 1105.0], [13.3, 1105.0], [13.4, 1105.0], [13.5, 1105.0], [13.6, 1105.0], [13.7, 1105.0], [13.8, 1105.0], [13.9, 1105.0], [14.0, 1105.0], [14.1, 1105.0], [14.2, 1105.0], [14.3, 1105.0], [14.4, 1105.0], [14.5, 1105.0], [14.6, 1105.0], [14.7, 1105.0], [14.8, 1105.0], [14.9, 1105.0], [15.0, 1105.0], [15.1, 1105.0], [15.2, 1105.0], [15.3, 1105.0], [15.4, 1105.0], [15.5, 1105.0], [15.6, 1105.0], [15.7, 1106.0], [15.8, 1106.0], [15.9, 1106.0], [16.0, 1106.0], [16.1, 1106.0], [16.2, 1106.0], [16.3, 1106.0], [16.4, 1106.0], [16.5, 1106.0], [16.6, 1106.0], [16.7, 1106.0], [16.8, 1106.0], [16.9, 1106.0], [17.0, 1106.0], [17.1, 1106.0], [17.2, 1106.0], [17.3, 1106.0], [17.4, 1106.0], [17.5, 1106.0], [17.6, 1106.0], [17.7, 1106.0], [17.8, 1106.0], [17.9, 1106.0], [18.0, 1106.0], [18.1, 1106.0], [18.2, 1106.0], [18.3, 1106.0], [18.4, 1106.0], [18.5, 1106.0], [18.6, 1107.0], [18.7, 1107.0], [18.8, 1107.0], [18.9, 1107.0], [19.0, 1107.0], [19.1, 1107.0], [19.2, 1107.0], [19.3, 1107.0], [19.4, 1107.0], [19.5, 1107.0], [19.6, 1107.0], [19.7, 1107.0], [19.8, 1107.0], [19.9, 1107.0], [20.0, 1107.0], [20.1, 1107.0], [20.2, 1107.0], [20.3, 1107.0], [20.4, 1107.0], [20.5, 1107.0], [20.6, 1107.0], [20.7, 1107.0], [20.8, 1107.0], [20.9, 1107.0], [21.0, 1107.0], [21.1, 1107.0], [21.2, 1107.0], [21.3, 1107.0], [21.4, 1108.0], [21.5, 1108.0], [21.6, 1108.0], [21.7, 1108.0], [21.8, 1108.0], [21.9, 1108.0], [22.0, 1108.0], [22.1, 1108.0], [22.2, 1108.0], [22.3, 1108.0], [22.4, 1108.0], [22.5, 1108.0], [22.6, 1108.0], [22.7, 1108.0], [22.8, 1108.0], [22.9, 1108.0], [23.0, 1108.0], [23.1, 1108.0], [23.2, 1108.0], [23.3, 1108.0], [23.4, 1108.0], [23.5, 1108.0], [23.6, 1108.0], [23.7, 1108.0], [23.8, 1108.0], [23.9, 1108.0], [24.0, 1109.0], [24.1, 1109.0], [24.2, 1109.0], [24.3, 1109.0], [24.4, 1109.0], [24.5, 1109.0], [24.6, 1109.0], [24.7, 1109.0], [24.8, 1109.0], [24.9, 1109.0], [25.0, 1109.0], [25.1, 1109.0], [25.2, 1109.0], [25.3, 1109.0], [25.4, 1109.0], [25.5, 1109.0], [25.6, 1109.0], [25.7, 1109.0], [25.8, 1109.0], [25.9, 1109.0], [26.0, 1109.0], [26.1, 1109.0], [26.2, 1109.0], [26.3, 1110.0], [26.4, 1110.0], [26.5, 1110.0], [26.6, 1110.0], [26.7, 1110.0], [26.8, 1110.0], [26.9, 1110.0], [27.0, 1110.0], [27.1, 1110.0], [27.2, 1110.0], [27.3, 1110.0], [27.4, 1110.0], [27.5, 1110.0], [27.6, 1110.0], [27.7, 1110.0], [27.8, 1110.0], [27.9, 1110.0], [28.0, 1110.0], [28.1, 1110.0], [28.2, 1110.0], [28.3, 1110.0], [28.4, 1110.0], [28.5, 1110.0], [28.6, 1111.0], [28.7, 1111.0], [28.8, 1111.0], [28.9, 1111.0], [29.0, 1111.0], [29.1, 1111.0], [29.2, 1111.0], [29.3, 1111.0], [29.4, 1111.0], [29.5, 1111.0], [29.6, 1111.0], [29.7, 1111.0], [29.8, 1111.0], [29.9, 1111.0], [30.0, 1111.0], [30.1, 1111.0], [30.2, 1111.0], [30.3, 1111.0], [30.4, 1112.0], [30.5, 1112.0], [30.6, 1112.0], [30.7, 1112.0], [30.8, 1112.0], [30.9, 1112.0], [31.0, 1112.0], [31.1, 1112.0], [31.2, 1112.0], [31.3, 1112.0], [31.4, 1112.0], [31.5, 1112.0], [31.6, 1112.0], [31.7, 1112.0], [31.8, 1112.0], [31.9, 1112.0], [32.0, 1112.0], [32.1, 1113.0], [32.2, 1113.0], [32.3, 1113.0], [32.4, 1113.0], [32.5, 1113.0], [32.6, 1113.0], [32.7, 1113.0], [32.8, 1113.0], [32.9, 1113.0], [33.0, 1113.0], [33.1, 1113.0], [33.2, 1113.0], [33.3, 1113.0], [33.4, 1113.0], [33.5, 1113.0], [33.6, 1114.0], [33.7, 1114.0], [33.8, 1114.0], [33.9, 1114.0], [34.0, 1114.0], [34.1, 1114.0], [34.2, 1114.0], [34.3, 1114.0], [34.4, 1114.0], [34.5, 1114.0], [34.6, 1114.0], [34.7, 1114.0], [34.8, 1114.0], [34.9, 1115.0], [35.0, 1115.0], [35.1, 1115.0], [35.2, 1115.0], [35.3, 1115.0], [35.4, 1115.0], [35.5, 1115.0], [35.6, 1115.0], [35.7, 1115.0], [35.8, 1115.0], [35.9, 1115.0], [36.0, 1115.0], [36.1, 1115.0], [36.2, 1116.0], [36.3, 1116.0], [36.4, 1116.0], [36.5, 1116.0], [36.6, 1116.0], [36.7, 1116.0], [36.8, 1116.0], [36.9, 1116.0], [37.0, 1116.0], [37.1, 1116.0], [37.2, 1117.0], [37.3, 1117.0], [37.4, 1117.0], [37.5, 1117.0], [37.6, 1117.0], [37.7, 1117.0], [37.8, 1117.0], [37.9, 1117.0], [38.0, 1117.0], [38.1, 1117.0], [38.2, 1118.0], [38.3, 1118.0], [38.4, 1118.0], [38.5, 1118.0], [38.6, 1118.0], [38.7, 1118.0], [38.8, 1118.0], [38.9, 1118.0], [39.0, 1118.0], [39.1, 1119.0], [39.2, 1119.0], [39.3, 1119.0], [39.4, 1119.0], [39.5, 1119.0], [39.6, 1119.0], [39.7, 1119.0], [39.8, 1119.0], [39.9, 1120.0], [40.0, 1120.0], [40.1, 1120.0], [40.2, 1120.0], [40.3, 1120.0], [40.4, 1120.0], [40.5, 1120.0], [40.6, 1121.0], [40.7, 1121.0], [40.8, 1121.0], [40.9, 1121.0], [41.0, 1121.0], [41.1, 1121.0], [41.2, 1122.0], [41.3, 1122.0], [41.4, 1122.0], [41.5, 1122.0], [41.6, 1122.0], [41.7, 1122.0], [41.8, 1123.0], [41.9, 1123.0], [42.0, 1123.0], [42.1, 1123.0], [42.2, 1123.0], [42.3, 1123.0], [42.4, 1124.0], [42.5, 1124.0], [42.6, 1124.0], [42.7, 1124.0], [42.8, 1124.0], [42.9, 1125.0], [43.0, 1125.0], [43.1, 1125.0], [43.2, 1125.0], [43.3, 1126.0], [43.4, 1126.0], [43.5, 1126.0], [43.6, 1126.0], [43.7, 1126.0], [43.8, 1127.0], [43.9, 1127.0], [44.0, 1127.0], [44.1, 1127.0], [44.2, 1128.0], [44.3, 1128.0], [44.4, 1128.0], [44.5, 1129.0], [44.6, 1129.0], [44.7, 1129.0], [44.8, 1129.0], [44.9, 1130.0], [45.0, 1130.0], [45.1, 1130.0], [45.2, 1131.0], [45.3, 1131.0], [45.4, 1131.0], [45.5, 1132.0], [45.6, 1132.0], [45.7, 1132.0], [45.8, 1133.0], [45.9, 1133.0], [46.0, 1133.0], [46.1, 1134.0], [46.2, 1134.0], [46.3, 1134.0], [46.4, 1135.0], [46.5, 1135.0], [46.6, 1136.0], [46.7, 1136.0], [46.8, 1137.0], [46.9, 1137.0], [47.0, 1137.0], [47.1, 1138.0], [47.2, 1138.0], [47.3, 1139.0], [47.4, 1139.0], [47.5, 1140.0], [47.6, 1140.0], [47.7, 1141.0], [47.8, 1141.0], [47.9, 1142.0], [48.0, 1142.0], [48.1, 1143.0], [48.2, 1144.0], [48.3, 1144.0], [48.4, 1145.0], [48.5, 1146.0], [48.6, 1147.0], [48.7, 1147.0], [48.8, 1148.0], [48.9, 1149.0], [49.0, 1150.0], [49.1, 1150.0], [49.2, 1151.0], [49.3, 1153.0], [49.4, 1154.0], [49.5, 1155.0], [49.6, 1156.0], [49.7, 1157.0], [49.8, 1158.0], [49.9, 1160.0], [50.0, 1161.0], [50.1, 1163.0], [50.2, 1165.0], [50.3, 1166.0], [50.4, 1168.0], [50.5, 1170.0], [50.6, 1173.0], [50.7, 1175.0], [50.8, 1177.0], [50.9, 1179.0], [51.0, 1181.0], [51.1, 1184.0], [51.2, 1186.0], [51.3, 1188.0], [51.4, 1191.0], [51.5, 1194.0], [51.6, 1196.0], [51.7, 1198.0], [51.8, 1201.0], [51.9, 1203.0], [52.0, 1206.0], [52.1, 1207.0], [52.2, 1209.0], [52.3, 1211.0], [52.4, 1213.0], [52.5, 1216.0], [52.6, 1218.0], [52.7, 1221.0], [52.8, 1223.0], [52.9, 1226.0], [53.0, 1229.0], [53.1, 1231.0], [53.2, 1234.0], [53.3, 1236.0], [53.4, 1239.0], [53.5, 1242.0], [53.6, 1244.0], [53.7, 1247.0], [53.8, 1250.0], [53.9, 1252.0], [54.0, 1255.0], [54.1, 1257.0], [54.2, 1259.0], [54.3, 1262.0], [54.4, 1264.0], [54.5, 1267.0], [54.6, 1269.0], [54.7, 1272.0], [54.8, 1274.0], [54.9, 1277.0], [55.0, 1279.0], [55.1, 1282.0], [55.2, 1284.0], [55.3, 1287.0], [55.4, 1289.0], [55.5, 1291.0], [55.6, 1293.0], [55.7, 1296.0], [55.8, 1298.0], [55.9, 1300.0], [56.0, 1302.0], [56.1, 1304.0], [56.2, 1307.0], [56.3, 1309.0], [56.4, 1311.0], [56.5, 1314.0], [56.6, 1316.0], [56.7, 1318.0], [56.8, 1320.0], [56.9, 1322.0], [57.0, 1325.0], [57.1, 1326.0], [57.2, 1328.0], [57.3, 1330.0], [57.4, 1332.0], [57.5, 1334.0], [57.6, 1337.0], [57.7, 1339.0], [57.8, 1340.0], [57.9, 1342.0], [58.0, 1344.0], [58.1, 1346.0], [58.2, 1348.0], [58.3, 1350.0], [58.4, 1352.0], [58.5, 1355.0], [58.6, 1357.0], [58.7, 1359.0], [58.8, 1361.0], [58.9, 1363.0], [59.0, 1366.0], [59.1, 1368.0], [59.2, 1370.0], [59.3, 1372.0], [59.4, 1374.0], [59.5, 1376.0], [59.6, 1379.0], [59.7, 1381.0], [59.8, 1383.0], [59.9, 1386.0], [60.0, 1388.0], [60.1, 1391.0], [60.2, 1393.0], [60.3, 1395.0], [60.4, 1398.0], [60.5, 1400.0], [60.6, 1403.0], [60.7, 1405.0], [60.8, 1408.0], [60.9, 1410.0], [61.0, 1414.0], [61.1, 1416.0], [61.2, 1418.0], [61.3, 1421.0], [61.4, 1423.0], [61.5, 1426.0], [61.6, 1429.0], [61.7, 1432.0], [61.8, 1434.0], [61.9, 1437.0], [62.0, 1439.0], [62.1, 1442.0], [62.2, 1444.0], [62.3, 1447.0], [62.4, 1449.0], [62.5, 1452.0], [62.6, 1455.0], [62.7, 1458.0], [62.8, 1461.0], [62.9, 1464.0], [63.0, 1467.0], [63.1, 1470.0], [63.2, 1472.0], [63.3, 1474.0], [63.4, 1477.0], [63.5, 1480.0], [63.6, 1483.0], [63.7, 1486.0], [63.8, 1489.0], [63.9, 1491.0], [64.0, 1494.0], [64.1, 1496.0], [64.2, 1499.0], [64.3, 1501.0], [64.4, 1504.0], [64.5, 1507.0], [64.6, 1509.0], [64.7, 1511.0], [64.8, 1514.0], [64.9, 1517.0], [65.0, 1520.0], [65.1, 1523.0], [65.2, 1527.0], [65.3, 1530.0], [65.4, 1533.0], [65.5, 1536.0], [65.6, 1539.0], [65.7, 1542.0], [65.8, 1545.0], [65.9, 1547.0], [66.0, 1550.0], [66.1, 1553.0], [66.2, 1555.0], [66.3, 1559.0], [66.4, 1561.0], [66.5, 1564.0], [66.6, 1566.0], [66.7, 1569.0], [66.8, 1572.0], [66.9, 1574.0], [67.0, 1577.0], [67.1, 1580.0], [67.2, 1583.0], [67.3, 1586.0], [67.4, 1589.0], [67.5, 1592.0], [67.6, 1596.0], [67.7, 1598.0], [67.8, 1601.0], [67.9, 1604.0], [68.0, 1606.0], [68.1, 1609.0], [68.2, 1611.0], [68.3, 1614.0], [68.4, 1617.0], [68.5, 1619.0], [68.6, 1623.0], [68.7, 1627.0], [68.8, 1630.0], [68.9, 1633.0], [69.0, 1636.0], [69.1, 1639.0], [69.2, 1641.0], [69.3, 1644.0], [69.4, 1647.0], [69.5, 1649.0], [69.6, 1652.0], [69.7, 1654.0], [69.8, 1657.0], [69.9, 1660.0], [70.0, 1663.0], [70.1, 1665.0], [70.2, 1668.0], [70.3, 1670.0], [70.4, 1672.0], [70.5, 1675.0], [70.6, 1677.0], [70.7, 1680.0], [70.8, 1682.0], [70.9, 1685.0], [71.0, 1688.0], [71.1, 1691.0], [71.2, 1694.0], [71.3, 1696.0], [71.4, 1699.0], [71.5, 1703.0], [71.6, 1705.0], [71.7, 1708.0], [71.8, 1711.0], [71.9, 1714.0], [72.0, 1717.0], [72.1, 1719.0], [72.2, 1722.0], [72.3, 1724.0], [72.4, 1727.0], [72.5, 1730.0], [72.6, 1732.0], [72.7, 1735.0], [72.8, 1738.0], [72.9, 1741.0], [73.0, 1744.0], [73.1, 1746.0], [73.2, 1749.0], [73.3, 1751.0], [73.4, 1754.0], [73.5, 1757.0], [73.6, 1759.0], [73.7, 1762.0], [73.8, 1765.0], [73.9, 1767.0], [74.0, 1770.0], [74.1, 1773.0], [74.2, 1776.0], [74.3, 1779.0], [74.4, 1782.0], [74.5, 1785.0], [74.6, 1788.0], [74.7, 1791.0], [74.8, 1795.0], [74.9, 1798.0], [75.0, 1801.0], [75.1, 1805.0], [75.2, 1808.0], [75.3, 1812.0], [75.4, 1815.0], [75.5, 1818.0], [75.6, 1821.0], [75.7, 1825.0], [75.8, 1828.0], [75.9, 1831.0], [76.0, 1835.0], [76.1, 1838.0], [76.2, 1841.0], [76.3, 1845.0], [76.4, 1848.0], [76.5, 1852.0], [76.6, 1855.0], [76.7, 1858.0], [76.8, 1862.0], [76.9, 1865.0], [77.0, 1869.0], [77.1, 1872.0], [77.2, 1876.0], [77.3, 1879.0], [77.4, 1883.0], [77.5, 1886.0], [77.6, 1890.0], [77.7, 1893.0], [77.8, 1896.0], [77.9, 1899.0], [78.0, 1903.0], [78.1, 1906.0], [78.2, 1910.0], [78.3, 1913.0], [78.4, 1916.0], [78.5, 1920.0], [78.6, 1923.0], [78.7, 1927.0], [78.8, 1930.0], [78.9, 1933.0], [79.0, 1937.0], [79.1, 1940.0], [79.2, 1944.0], [79.3, 1948.0], [79.4, 1951.0], [79.5, 1954.0], [79.6, 1958.0], [79.7, 1961.0], [79.8, 1964.0], [79.9, 1967.0], [80.0, 1972.0], [80.1, 1975.0], [80.2, 1978.0], [80.3, 1981.0], [80.4, 1985.0], [80.5, 1988.0], [80.6, 1991.0], [80.7, 1994.0], [80.8, 1997.0], [80.9, 2000.0], [81.0, 2002.0], [81.1, 2005.0], [81.2, 2008.0], [81.3, 2011.0], [81.4, 2014.0], [81.5, 2018.0], [81.6, 2020.0], [81.7, 2024.0], [81.8, 2028.0], [81.9, 2031.0], [82.0, 2035.0], [82.1, 2038.0], [82.2, 2042.0], [82.3, 2046.0], [82.4, 2049.0], [82.5, 2052.0], [82.6, 2055.0], [82.7, 2059.0], [82.8, 2062.0], [82.9, 2066.0], [83.0, 2070.0], [83.1, 2074.0], [83.2, 2078.0], [83.3, 2082.0], [83.4, 2086.0], [83.5, 2090.0], [83.6, 2095.0], [83.7, 2099.0], [83.8, 2103.0], [83.9, 2107.0], [84.0, 2111.0], [84.1, 2115.0], [84.2, 2119.0], [84.3, 2124.0], [84.4, 2128.0], [84.5, 2134.0], [84.6, 2139.0], [84.7, 2144.0], [84.8, 2150.0], [84.9, 2155.0], [85.0, 2161.0], [85.1, 2165.0], [85.2, 2168.0], [85.3, 2172.0], [85.4, 2176.0], [85.5, 2180.0], [85.6, 2186.0], [85.7, 2191.0], [85.8, 2198.0], [85.9, 2204.0], [86.0, 2211.0], [86.1, 2217.0], [86.2, 2226.0], [86.3, 2233.0], [86.4, 2243.0], [86.5, 2251.0], [86.6, 2257.0], [86.7, 2267.0], [86.8, 2275.0], [86.9, 2282.0], [87.0, 2288.0], [87.1, 2295.0], [87.2, 2302.0], [87.3, 2309.0], [87.4, 2316.0], [87.5, 2322.0], [87.6, 2330.0], [87.7, 2337.0], [87.8, 2344.0], [87.9, 2351.0], [88.0, 2358.0], [88.1, 2365.0], [88.2, 2372.0], [88.3, 2377.0], [88.4, 2384.0], [88.5, 2390.0], [88.6, 2395.0], [88.7, 2402.0], [88.8, 2409.0], [88.9, 2416.0], [89.0, 2425.0], [89.1, 2434.0], [89.2, 2441.0], [89.3, 2450.0], [89.4, 2458.0], [89.5, 2466.0], [89.6, 2475.0], [89.7, 2484.0], [89.8, 2494.0], [89.9, 2503.0], [90.0, 2514.0], [90.1, 2523.0], [90.2, 2532.0], [90.3, 2541.0], [90.4, 2549.0], [90.5, 2558.0], [90.6, 2567.0], [90.7, 2577.0], [90.8, 2587.0], [90.9, 2598.0], [91.0, 2605.0], [91.1, 2614.0], [91.2, 2626.0], [91.3, 2639.0], [91.4, 2650.0], [91.5, 2662.0], [91.6, 2674.0], [91.7, 2685.0], [91.8, 2697.0], [91.9, 2709.0], [92.0, 2723.0], [92.1, 2735.0], [92.2, 2748.0], [92.3, 2761.0], [92.4, 2771.0], [92.5, 2782.0], [92.6, 2794.0], [92.7, 2806.0], [92.8, 2819.0], [92.9, 2831.0], [93.0, 2842.0], [93.1, 2858.0], [93.2, 2871.0], [93.3, 2884.0], [93.4, 2896.0], [93.5, 2907.0], [93.6, 2920.0], [93.7, 2933.0], [93.8, 2945.0], [93.9, 2960.0], [94.0, 2971.0], [94.1, 2982.0], [94.2, 2995.0], [94.3, 3009.0], [94.4, 3022.0], [94.5, 3036.0], [94.6, 3049.0], [94.7, 3064.0], [94.8, 3079.0], [94.9, 3097.0], [95.0, 3115.0], [95.1, 3134.0], [95.2, 3160.0], [95.3, 3181.0], [95.4, 3207.0], [95.5, 3237.0], [95.6, 3268.0], [95.7, 3300.0], [95.8, 3330.0], [95.9, 3351.0], [96.0, 3374.0], [96.1, 3396.0], [96.2, 3420.0], [96.3, 3447.0], [96.4, 3473.0], [96.5, 3500.0], [96.6, 3534.0], [96.7, 3573.0], [96.8, 3607.0], [96.9, 3645.0], [97.0, 3698.0], [97.1, 3755.0], [97.2, 3807.0], [97.3, 3855.0], [97.4, 3913.0], [97.5, 3974.0], [97.6, 4030.0], [97.7, 4080.0], [97.8, 4145.0], [97.9, 4211.0], [98.0, 4308.0], [98.1, 4384.0], [98.2, 4494.0], [98.3, 4609.0], [98.4, 4739.0], [98.5, 4866.0], [98.6, 4997.0], [98.7, 5089.0], [98.8, 5193.0], [98.9, 5331.0], [99.0, 5530.0], [99.1, 5705.0], [99.2, 5858.0], [99.3, 6135.0], [99.4, 6377.0], [99.5, 6649.0], [99.6, 7024.0], [99.7, 7395.0], [99.8, 7646.0], [99.9, 8038.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 64918.0, "series": [{"data": [[0.0, 4.0], [1000.0, 2662.0], [1100.0, 64918.0], [1200.0, 5388.0], [1300.0, 5995.0], [1400.0, 4877.0], [1500.0, 4618.0], [1600.0, 4782.0], [1700.0, 4629.0], [1800.0, 3855.0], [1900.0, 3908.0], [2000.0, 3683.0], [2100.0, 2757.0], [2200.0, 1744.0], [2300.0, 1958.0], [2400.0, 1558.0], [2500.0, 1397.0], [2600.0, 1166.0], [2700.0, 1088.0], [2800.0, 1020.0], [2900.0, 1044.0], [3000.0, 893.0], [3100.0, 605.0], [3200.0, 418.0], [3300.0, 543.0], [3400.0, 499.0], [3500.0, 367.0], [3600.0, 294.0], [3700.0, 235.0], [3800.0, 260.0], [3900.0, 209.0], [4000.0, 241.0], [4100.0, 207.0], [4300.0, 158.0], [4200.0, 140.0], [4500.0, 116.0], [4600.0, 113.0], [4400.0, 119.0], [4800.0, 99.0], [4700.0, 86.0], [4900.0, 110.0], [5000.0, 137.0], [5100.0, 125.0], [5200.0, 97.0], [5300.0, 80.0], [5400.0, 58.0], [5500.0, 63.0], [5600.0, 79.0], [5700.0, 86.0], [5800.0, 71.0], [6000.0, 42.0], [5900.0, 51.0], [6100.0, 55.0], [6200.0, 54.0], [6300.0, 52.0], [6400.0, 44.0], [6500.0, 46.0], [6600.0, 46.0], [6700.0, 30.0], [6800.0, 37.0], [6900.0, 33.0], [7000.0, 43.0], [7100.0, 21.0], [7200.0, 37.0], [7300.0, 45.0], [7400.0, 49.0], [7500.0, 57.0], [7600.0, 53.0], [7700.0, 46.0], [7800.0, 28.0], [7900.0, 19.0], [8000.0, 19.0], [8100.0, 21.0], [8300.0, 15.0], [8200.0, 14.0], [8500.0, 8.0], [8700.0, 3.0], [8600.0, 4.0], [8400.0, 8.0], [8800.0, 6.0], [8900.0, 2.0], [9000.0, 2.0], [9200.0, 4.0], [9100.0, 4.0], [9400.0, 1.0], [9300.0, 2.0], [9900.0, 1.0], [10100.0, 1.0], [10700.0, 1.0], [10800.0, 3.0], [11200.0, 2.0], [11000.0, 1.0], [11300.0, 2.0], [11500.0, 4.0], [11600.0, 1.0], [11400.0, 1.0], [12200.0, 2.0], [12100.0, 1.0], [11800.0, 1.0], [12900.0, 1.0], [12800.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 12900.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 4.0, "minX": 1.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 83903.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 83903.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 46676.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 4.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1837.122612287049, "minX": 1.6842129E12, "maxY": 3000.0, "series": [{"data": [[1.68421302E12, 3000.0], [1.68421314E12, 3000.0], [1.68421296E12, 3000.0], [1.68421308E12, 3000.0], [1.6842129E12, 3000.0], [1.6842132E12, 1837.122612287049]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6842132E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 1097.0, "minX": 1.0, "maxY": 10897.0, "series": [{"data": [[2.0, 3031.0], [3.0, 5949.0], [4.0, 5752.0], [5.0, 5893.0], [6.0, 5831.0], [7.0, 5190.0], [8.0, 1131.0], [9.0, 1116.0], [10.0, 1112.0], [11.0, 1113.0], [12.0, 1116.0], [13.0, 1113.0], [15.0, 1118.5], [16.0, 1108.0], [18.0, 1109.0], [20.0, 1107.0], [21.0, 1112.5], [23.0, 1112.5], [24.0, 1107.0], [26.0, 1106.5], [27.0, 1107.0], [28.0, 1108.0], [29.0, 1104.0], [31.0, 1108.0], [33.0, 1106.5], [34.0, 1102.0], [36.0, 1105.0], [40.0, 3107.0], [43.0, 1107.0], [42.0, 1106.25], [45.0, 1107.0], [44.0, 1107.0], [47.0, 1103.0], [48.0, 1109.0], [51.0, 1104.3333333333333], [53.0, 1105.5], [55.0, 1104.5], [56.0, 1102.0], [59.0, 5595.0], [58.0, 1098.5], [61.0, 1147.0], [60.0, 4672.0], [63.0, 1119.0], [62.0, 1122.0], [67.0, 1110.0], [66.0, 1117.0], [65.0, 1123.0], [64.0, 1123.0], [70.0, 1116.0], [69.0, 1112.0], [68.0, 1137.0], [75.0, 1121.0], [74.0, 1109.0], [73.0, 1107.0], [72.0, 1112.5], [78.0, 1107.0], [77.0, 1110.0], [83.0, 1114.0], [82.0, 1109.0], [81.0, 1105.0], [80.0, 1112.5], [87.0, 1109.5], [85.0, 1109.5], [91.0, 1110.0], [95.0, 1108.5], [99.0, 1110.0], [102.0, 1111.0], [100.0, 1114.0], [107.0, 1107.0], [105.0, 1105.3333333333333], [111.0, 1106.0], [110.0, 1100.0], [109.0, 1114.0], [115.0, 1110.0], [114.0, 1105.0], [113.0, 1104.0], [119.0, 1113.0], [117.0, 1106.5], [122.0, 1105.0], [120.0, 1111.5], [126.0, 1114.0], [125.0, 1106.5], [124.0, 1111.0], [134.0, 1107.5], [132.0, 1111.0], [131.0, 1109.5], [129.0, 1101.0], [143.0, 1107.0], [141.0, 1109.0], [138.0, 1105.0], [137.0, 1118.0], [136.0, 1105.5], [151.0, 1117.0], [146.0, 1109.5], [144.0, 1103.0], [159.0, 1109.0], [157.0, 1110.5], [155.0, 1117.0], [154.0, 1114.0], [165.0, 1115.5], [163.0, 1108.3333333333333], [160.0, 1108.0], [174.0, 1102.0], [173.0, 1103.5], [171.0, 1113.5], [169.0, 1105.5], [168.0, 1111.5], [182.0, 1105.0], [180.0, 1113.0], [178.0, 1114.5], [176.0, 1107.5], [190.0, 1133.0], [189.0, 1111.5], [187.0, 1106.6666666666667], [184.0, 1106.0], [199.0, 1107.6666666666667], [196.0, 1103.0], [195.0, 1105.5], [192.0, 1110.0], [207.0, 1112.0], [206.0, 1110.6666666666667], [203.0, 1111.3333333333333], [201.0, 1105.0], [215.0, 1105.5], [213.0, 1112.0], [211.0, 1101.0], [210.0, 1121.5], [208.0, 1112.0], [223.0, 1113.0], [221.0, 1105.0], [220.0, 1105.5], [218.0, 1116.0], [216.0, 1105.0], [231.0, 1105.0], [229.0, 1107.0], [228.0, 1112.0], [227.0, 1111.75], [239.0, 1108.3333333333333], [236.0, 1109.0], [235.0, 1104.0], [233.0, 1112.0], [247.0, 1105.0], [246.0, 1107.0], [245.0, 1115.0], [244.0, 1109.0], [242.0, 1114.0], [241.0, 1104.0], [240.0, 1102.0], [255.0, 1115.0], [254.0, 1106.0], [252.0, 1103.0], [251.0, 1111.0], [249.0, 1112.0], [259.0, 1108.0], [269.0, 1100.0], [268.0, 1107.0], [267.0, 1110.0], [266.0, 1101.0], [264.0, 1132.0], [263.0, 1105.0], [262.0, 1119.0], [261.0, 1104.0], [258.0, 1114.0], [256.0, 1107.0], [285.0, 1099.0], [286.0, 1110.0], [284.0, 1116.0], [274.0, 1105.0], [273.0, 1114.5], [272.0, 1105.5], [283.0, 1114.0], [282.0, 1097.0], [281.0, 1106.0], [280.0, 1102.0], [279.0, 1106.0], [278.0, 1108.0], [276.0, 1106.0], [301.0, 1109.3333333333333], [299.0, 1107.0], [297.0, 1106.0], [296.0, 1115.0], [295.0, 1110.5], [292.0, 1106.5], [291.0, 1107.0], [289.0, 1106.3333333333333], [317.0, 1114.0], [319.0, 1116.0], [316.0, 1115.0], [315.0, 1111.0], [314.0, 1115.0], [313.0, 1116.0], [311.0, 1104.3333333333333], [308.0, 1103.0], [307.0, 1103.5], [305.0, 1117.0], [304.0, 1109.3333333333333], [334.0, 1105.0], [333.0, 1109.0], [332.0, 1104.0], [331.0, 1109.5], [328.0, 1113.0], [326.0, 1106.0], [324.0, 1107.0], [322.0, 1112.0], [350.0, 1111.3333333333333], [347.0, 1111.0], [346.0, 1103.5], [344.0, 1108.0], [343.0, 1105.0], [337.0, 1107.3333333333333], [342.0, 1116.0], [341.0, 1107.0], [340.0, 1098.0], [339.0, 1123.0], [338.0, 1112.0], [366.0, 1107.5], [364.0, 1106.0], [363.0, 1110.0], [361.0, 1108.5], [359.0, 1104.0], [358.0, 1110.0], [356.0, 1108.5], [354.0, 1104.0], [353.0, 1105.6666666666667], [382.0, 1104.0], [383.0, 1104.0], [381.0, 1103.6666666666667], [370.0, 1112.0], [369.0, 1107.5], [368.0, 1108.0], [379.0, 1107.0], [377.0, 1109.0], [376.0, 1110.0], [375.0, 1101.0], [374.0, 1106.3333333333333], [373.0, 1110.0], [398.0, 2368.0], [399.0, 2339.0], [397.0, 2378.0], [396.0, 2388.0], [395.0, 2414.0], [394.0, 5745.0], [393.0, 5023.0], [392.0, 5157.0], [391.0, 1098.0], [384.0, 1099.0], [387.0, 1101.0], [385.0, 1103.0], [390.0, 1099.0], [389.0, 1103.0], [388.0, 1103.0], [414.0, 1565.0], [415.0, 1562.0], [413.0, 1566.0], [412.0, 1563.0], [411.0, 1567.0], [410.0, 1573.0], [409.0, 1591.0], [408.0, 4853.0], [407.0, 5050.0], [401.0, 2217.0], [400.0, 2286.0], [403.0, 2180.0], [402.0, 2195.0], [406.0, 2170.0], [405.0, 2172.0], [404.0, 2180.0], [430.0, 1537.0], [431.0, 1534.0], [429.0, 1538.0], [428.0, 1545.0], [427.0, 1546.0], [426.0, 1549.5], [425.0, 1552.0], [423.0, 1547.0], [417.0, 1559.0], [416.0, 1558.0], [419.0, 1557.0], [418.0, 1561.0], [422.0, 1550.0], [421.0, 1557.0], [420.0, 1555.0], [446.0, 1511.0], [447.0, 1513.0], [445.0, 1512.0], [444.0, 1513.0], [443.0, 1518.0], [442.0, 1511.0], [441.0, 1522.0], [440.0, 1521.0], [439.0, 1520.5], [433.0, 1531.0], [432.0, 1536.0], [435.0, 1529.0], [434.0, 1527.0], [437.0, 1519.0], [436.0, 1525.0], [461.0, 1490.0], [463.0, 1487.5], [460.0, 1489.5], [450.0, 1500.0], [449.0, 1501.0], [448.0, 1502.0], [458.0, 1491.0], [457.0, 1489.0], [456.0, 1492.0], [455.0, 1497.0], [454.0, 1501.0], [453.0, 1500.0], [452.0, 1503.0], [478.0, 1473.0], [479.0, 1474.0], [477.0, 1476.5], [467.0, 1484.0], [466.0, 1483.0], [465.0, 1487.0], [464.0, 1485.0], [475.0, 1471.5], [473.0, 1474.0], [472.0, 1481.0], [470.0, 2087.0], [469.0, 1478.0], [468.0, 1480.0], [494.0, 1446.0], [495.0, 1445.0], [493.0, 1457.0], [492.0, 1461.0], [491.0, 1461.0], [490.0, 1465.0], [489.0, 1467.0], [487.0, 1468.0], [483.0, 2080.0], [482.0, 1473.0], [481.0, 1473.5], [485.0, 1469.0], [510.0, 1362.0], [511.0, 1357.0], [509.0, 1366.0], [508.0, 1367.0], [507.0, 1369.0], [506.0, 1374.0], [505.0, 1375.0], [504.0, 1376.0], [503.0, 1372.0], [497.0, 1420.0], [496.0, 1424.0], [499.0, 1414.0], [498.0, 1413.0], [502.0, 1385.0], [501.0, 1387.0], [500.0, 1396.0], [538.0, 1336.5], [542.0, 1333.0], [528.0, 1647.0], [530.0, 1351.0], [532.0, 1350.0], [540.0, 1344.0], [536.0, 1341.0], [516.0, 1960.0], [514.0, 1362.0], [512.0, 1358.0], [526.0, 1345.0], [522.0, 1352.0], [520.0, 1355.0], [534.0, 1347.0], [572.0, 1312.0], [574.0, 1319.0], [560.0, 1326.0], [562.0, 1326.0], [564.0, 1325.0], [570.0, 1315.0], [568.0, 1324.0], [550.0, 1332.0], [548.0, 1330.5], [546.0, 1337.0], [544.0, 1339.0], [558.0, 1330.5], [556.0, 1326.0], [554.0, 1934.0], [604.0, 1304.5], [606.0, 1305.0], [592.0, 1307.0], [594.0, 1610.5], [602.0, 1301.0], [600.0, 1302.0], [582.0, 1314.5], [578.0, 1315.0], [590.0, 1613.0], [588.0, 1311.0], [586.0, 1310.0], [584.0, 1312.0], [598.0, 1303.0], [596.0, 1310.0], [610.0, 1300.0], [636.0, 1288.0], [634.0, 1290.0], [608.0, 1299.5], [612.0, 1299.0], [614.0, 1292.0], [622.0, 1294.0], [620.0, 1599.5], [618.0, 1294.0], [616.0, 1296.0], [626.0, 1292.5], [644.0, 1282.0], [664.0, 1274.5], [670.0, 1274.5], [668.0, 1271.0], [654.0, 1893.0], [640.0, 1288.0], [642.0, 1286.0], [646.0, 1283.0], [652.0, 1277.0], [650.0, 1279.0], [648.0, 1588.5], [662.0, 1271.0], [660.0, 1271.0], [656.0, 1276.0], [696.0, 1258.0], [700.0, 1260.0], [702.0, 1570.0], [698.0, 1267.0], [672.0, 5042.0], [676.0, 1267.0], [678.0, 1270.0], [686.0, 1270.0], [694.0, 1267.5], [692.0, 1580.0], [732.0, 1863.0], [734.0, 1240.0], [720.0, 1469.6666666666667], [722.0, 1249.0], [730.0, 1552.5], [728.0, 1248.0], [704.0, 1570.5], [716.0, 1251.0], [714.0, 1863.0], [726.0, 1561.0], [762.0, 1820.0], [756.0, 1212.0], [752.0, 1214.0], [754.0, 1857.0], [742.0, 1230.0], [740.0, 1839.0], [738.0, 1867.0], [736.0, 1243.0], [750.0, 1519.5], [748.0, 1826.0], [746.0, 1846.0], [758.0, 1210.0], [796.0, 1130.5], [788.0, 1138.0], [784.0, 1186.0], [786.0, 1180.0], [794.0, 1130.0], [792.0, 1128.0], [772.0, 1196.0], [770.0, 1196.0], [768.0, 1816.0], [782.0, 1189.0], [780.0, 1188.0], [778.0, 1193.0], [776.0, 1198.0], [790.0, 1133.0], [824.0, 1115.6666666666667], [822.0, 1120.0], [820.0, 1115.0], [816.0, 1117.0], [800.0, 1123.0], [804.0, 1123.0], [814.0, 1117.0], [810.0, 1119.0], [856.0, 1107.0], [862.0, 1107.0], [848.0, 1112.0], [860.0, 1107.3333333333333], [846.0, 1112.0], [838.0, 1113.0], [836.0, 1112.0], [844.0, 1114.0], [842.0, 1112.6666666666667], [854.0, 1108.0], [852.0, 1111.0], [890.0, 1112.0], [894.0, 1122.5], [880.0, 1152.0], [882.0, 8194.0], [884.0, 1123.0], [888.0, 1120.5], [870.0, 1107.3333333333333], [878.0, 5737.0], [876.0, 1104.0], [874.0, 1105.0], [886.0, 1119.0], [920.0, 1119.5], [926.0, 1115.0], [916.0, 1118.0], [924.0, 1114.0], [900.0, 1109.5], [898.0, 1108.0], [896.0, 1109.0], [910.0, 1112.3333333333333], [904.0, 1136.0], [918.0, 1122.0], [932.0, 1113.25], [948.0, 1122.0], [956.0, 1116.0], [952.0, 1119.0], [942.0, 1122.0], [940.0, 1116.6666666666667], [938.0, 1111.0], [936.0, 1108.5], [950.0, 1116.0], [944.0, 1113.0], [984.0, 1115.0], [976.0, 1109.0], [988.0, 1109.0], [986.0, 1113.0], [960.0, 1113.0], [964.0, 1109.0], [962.0, 1115.0], [966.0, 1110.3333333333333], [972.0, 1118.0], [970.0, 1117.0], [968.0, 1116.0], [982.0, 1111.0], [980.0, 1107.0], [1018.0, 1120.5], [1022.0, 1109.0], [1016.0, 1109.0], [1004.0, 1122.0], [1000.0, 1111.3333333333333], [1014.0, 1122.0], [1010.0, 1123.5], [1008.0, 1110.0], [1072.0, 1110.0], [1080.0, 1105.0], [1060.0, 1118.3333333333333], [1076.0, 1118.0], [1036.0, 1112.5], [1032.0, 1108.6666666666667], [1024.0, 1110.0], [1048.0, 1120.5], [1040.0, 1109.5], [1068.0, 1121.0], [1064.0, 1109.5], [1100.0, 1104.0], [1148.0, 1113.5], [1140.0, 1104.0], [1136.0, 1112.0], [1092.0, 1115.0], [1088.0, 1114.7142857142856], [1128.0, 1106.0], [1116.0, 1114.0], [1112.0, 1109.0], [1108.0, 1110.0], [1104.0, 1104.0], [1204.0, 1112.0], [1184.0, 1110.0], [1164.0, 1108.0], [1156.0, 1117.0], [1176.0, 1111.3333333333333], [1172.0, 1107.0], [1168.0, 1105.0], [1196.0, 1117.0], [1272.0, 1112.0], [1256.0, 1102.6666666666667], [1276.0, 1115.0], [1248.0, 1103.0], [1252.0, 1106.0], [1268.0, 1118.0], [1264.0, 1169.0], [1220.0, 1110.5], [1216.0, 1108.0], [1244.0, 1108.0], [1240.0, 1103.0], [1236.0, 1105.0], [1260.0, 1105.0], [1332.0, 1118.0], [1340.0, 1110.0], [1316.0, 1114.0], [1336.0, 1109.6666666666667], [1328.0, 1113.5], [1288.0, 1112.0], [1284.0, 1108.0], [1280.0, 1112.3333333333333], [1308.0, 1114.0], [1300.0, 1110.3333333333333], [1296.0, 1119.5], [1324.0, 1106.5], [1320.0, 1112.6666666666667], [1392.0, 1104.0], [1384.0, 1108.3333333333333], [1404.0, 1110.8], [1396.0, 1117.0], [1356.0, 1115.0], [1368.0, 1114.0], [1364.0, 1113.5], [1360.0, 1113.5], [1388.0, 1112.0], [1460.0, 1109.5], [1420.0, 1114.0], [1452.0, 1118.0], [1448.0, 1114.0], [1440.0, 1113.5], [1436.0, 1120.0], [1432.0, 1107.5], [1428.0, 1107.0], [1484.0, 1105.6666666666667], [1532.0, 1111.0], [1528.0, 1110.0], [1508.0, 1121.0], [1472.0, 1110.5], [1500.0, 1115.5], [1496.0, 1113.5], [1492.0, 1108.0], [1588.0, 1125.0], [1592.0, 1109.0], [1596.0, 1113.0], [1568.0, 1106.0], [1572.0, 1115.0], [1584.0, 1108.5], [1540.0, 1121.0], [1548.0, 1117.0], [1564.0, 1114.0], [1560.0, 1114.0], [1580.0, 1116.0], [1576.0, 2541.3333333333335], [1656.0, 1113.5], [1648.0, 1108.3333333333333], [1640.0, 1109.5], [1636.0, 1109.0], [1600.0, 1113.0], [1604.0, 1114.5], [1608.0, 1104.0], [1628.0, 1116.0], [1620.0, 1108.0], [1716.0, 1562.5], [1704.0, 5014.0], [1696.0, 1101.0], [1700.0, 7598.0], [1708.0, 1597.0], [1668.0, 1112.0], [1676.0, 1102.0], [1672.0, 1112.0], [1692.0, 1106.0], [1688.0, 1107.0], [1680.0, 1105.6666666666667], [1780.0, 1109.0], [1760.0, 1430.0], [1764.0, 1184.0], [1772.0, 1115.0], [1788.0, 1105.0], [1736.0, 1487.0], [1732.0, 1502.0], [1728.0, 1516.0], [1748.0, 1441.0], [1744.0, 1492.0], [1824.0, 1111.0], [1852.0, 1115.5], [1832.0, 1107.0], [1792.0, 1108.0], [1800.0, 1143.5], [1816.0, 1115.0], [1836.0, 1115.0], [1904.0, 1117.0], [1908.0, 1118.0], [1888.0, 1110.0], [1892.0, 1107.0], [1896.0, 1119.0], [1900.0, 1118.0], [1856.0, 1117.5], [1860.0, 1110.25], [1884.0, 1112.0], [1872.0, 1105.0], [1976.0, 1105.0], [1980.0, 1108.0], [1956.0, 1103.0], [1952.0, 1109.0], [1960.0, 1112.5], [1928.0, 1134.0], [1920.0, 1138.0], [1948.0, 1109.6666666666667], [1944.0, 1106.0], [1940.0, 1106.0], [1936.0, 1107.5], [2020.0, 1107.5], [2044.0, 1158.0], [2024.0, 1115.0], [2028.0, 1110.5], [2036.0, 1109.0], [1988.0, 1120.0], [1984.0, 1110.0], [2012.0, 1107.6], [2168.0, 1121.0], [2136.0, 1105.0], [2160.0, 1120.0], [2072.0, 1117.6666666666667], [2056.0, 1115.5], [2048.0, 1115.0], [2088.0, 1116.0], [2296.0, 1130.0], [2256.0, 1149.0], [2264.0, 1110.0], [2288.0, 1107.0], [2200.0, 1136.0], [2216.0, 1111.0], [2368.0, 1112.0], [2376.0, 1106.0], [2400.0, 1133.0], [2328.0, 1109.0], [2312.0, 1109.0], [2352.0, 1107.6666666666667], [2336.0, 1115.0], [2496.0, 1118.857142857143], [2504.0, 1119.0], [2552.0, 1107.0], [2528.0, 1120.3333333333333], [2472.0, 1114.0], [2672.0, 1509.6666666666667], [2664.0, 1398.0], [2624.0, 1673.0], [2632.0, 1792.5], [2640.0, 1660.0], [2648.0, 1565.0], [2656.0, 1461.0], [2560.0, 1109.0], [2568.0, 2319.0], [2576.0, 1805.5], [2584.0, 1756.0], [2600.0, 1677.5], [2592.0, 1687.5], [2792.0, 1293.0], [2752.0, 1307.0], [2768.0, 1359.0], [2776.0, 1532.0], [2808.0, 1330.0], [2704.0, 1806.0], [2688.0, 1342.0], [2744.0, 1791.0], [2728.0, 1306.0], [2720.0, 1338.5], [2920.0, 1115.0], [2936.0, 1121.0], [2880.0, 1696.0], [2888.0, 1459.0], [2896.0, 1282.3333333333333], [2904.0, 1334.769230769231], [2912.0, 1110.2], [2824.0, 1301.5], [2832.0, 1508.0], [2840.0, 1279.0], [2848.0, 1401.0], [3000.0, 1608.7042504854264], [2944.0, 1110.0], [2952.0, 1117.0], [2968.0, 1148.0], [2992.0, 1114.0], [2129.0, 1114.0], [2073.0, 1115.0], [2137.0, 1101.0], [2105.0, 1114.3333333333333], [2089.0, 1113.3333333333333], [2113.0, 1108.0], [2121.0, 1118.0], [2273.0, 1107.75], [2289.0, 1117.0], [2257.0, 1106.5], [2281.0, 1114.0], [2193.0, 1120.5], [2201.0, 1112.0], [2233.0, 1110.0], [2209.0, 1119.0], [2265.0, 1115.5], [2425.0, 1112.5], [2377.0, 1108.6666666666667], [2393.0, 1125.0], [2369.0, 1102.0], [2401.0, 1121.0], [2313.0, 1110.0], [2361.0, 1112.0], [2337.0, 1119.0], [2513.0, 1117.5], [2521.0, 1118.0], [2553.0, 1113.0], [2537.0, 1113.0], [2441.0, 1116.0], [2473.0, 1118.9444444444443], [2673.0, 1419.0], [2625.0, 1707.5], [2641.0, 1696.0], [2649.0, 1652.0], [2657.0, 1836.0], [2561.0, 1108.3333333333333], [2569.0, 2081.0], [2577.0, 1749.0], [2585.0, 1708.0], [2609.0, 1715.0], [2593.0, 1720.5], [2801.0, 1291.3333333333333], [2809.0, 1340.0], [2753.0, 1371.0], [2761.0, 1331.0], [2769.0, 1293.0], [2793.0, 1357.0], [2785.0, 1337.5], [2713.0, 1376.0], [2705.0, 1391.5], [2697.0, 1379.5], [2689.0, 1438.0], [2737.0, 1332.3333333333333], [2929.0, 1116.8333333333335], [2921.0, 1116.0], [2897.0, 1244.0], [2905.0, 1116.0], [2937.0, 1115.5], [2913.0, 1126.0], [2817.0, 1379.2], [2825.0, 1343.0], [2873.0, 1482.0], [2857.0, 1548.3333333333333], [2953.0, 1111.4], [2945.0, 1115.6249999999998], [2961.0, 1139.5], [2969.0, 1111.0], [2993.0, 1114.2857142857144], [2985.0, 1122.5], [2977.0, 1125.5], [1037.0, 1112.0], [1077.0, 1135.0], [1033.0, 1113.0], [1029.0, 1118.0], [1065.0, 1108.0], [1057.0, 1111.0], [1053.0, 1115.0], [1049.0, 1129.0], [1045.0, 1109.75], [1145.0, 1107.0], [1125.0, 1108.3333333333333], [1149.0, 1118.0], [1121.0, 1113.0], [1141.0, 1113.0], [1097.0, 1113.0], [1093.0, 1113.5], [1089.0, 1121.0], [1117.0, 1112.0], [1113.0, 1107.0], [1109.0, 1109.0], [1133.0, 1113.5], [1129.0, 1112.0], [1201.0, 1113.5], [1205.0, 1112.0], [1161.0, 1113.0], [1165.0, 1110.0], [1177.0, 1120.0], [1173.0, 1119.0], [1193.0, 1108.6666666666667], [1225.0, 1110.0], [1269.0, 1134.0], [1277.0, 1116.0], [1265.0, 1123.0], [1253.0, 1107.0], [1245.0, 1108.3333333333333], [1241.0, 1105.0], [1237.0, 1105.0], [1233.0, 1112.0], [1341.0, 1110.0], [1285.0, 1108.0], [1289.0, 1119.0], [1293.0, 1113.0], [1317.0, 1114.0], [1313.0, 1108.0], [1401.0, 1104.0], [1397.0, 1101.0], [1381.0, 1112.0], [1345.0, 1121.5], [1349.0, 1108.3333333333333], [1353.0, 1110.0], [1373.0, 1113.0], [1361.0, 1113.0], [1421.0, 1110.0], [1469.0, 1112.0], [1465.0, 1106.5], [1457.0, 1108.0], [1417.0, 1106.5000000000002], [1413.0, 1125.0], [1409.0, 1122.0], [1437.0, 1114.6666666666667], [1433.0, 1100.0], [1425.0, 1111.4], [1449.0, 1108.5], [1509.0, 1123.0], [1521.0, 1109.0], [1481.0, 1118.0], [1489.0, 1112.0], [1513.0, 1113.0], [1505.0, 1111.0], [1593.0, 1119.0], [1537.0, 1110.5], [1561.0, 1109.0], [1557.0, 1109.75], [1553.0, 1113.5714285714287], [1653.0, 1107.3333333333333], [1661.0, 1102.0], [1609.0, 1108.0], [1601.0, 1104.0], [1625.0, 1109.0], [1621.0, 1112.0], [1645.0, 1115.3333333333333], [1641.0, 1107.0], [1633.0, 1112.5], [1721.0, 1520.0], [1725.0, 1509.0], [1697.0, 7819.0], [1701.0, 7591.0], [1705.0, 4958.0], [1709.0, 1589.0], [1717.0, 1675.0], [1713.0, 1555.0], [1677.0, 1110.0], [1669.0, 1109.5], [1665.0, 1106.5], [1693.0, 1103.0], [1689.0, 1110.0], [1685.0, 1103.5], [1681.0, 1103.0], [1789.0, 1114.0], [1761.0, 1403.0], [1765.0, 1162.0], [1769.0, 1124.0], [1773.0, 1113.0], [1785.0, 1113.6666666666667], [1777.0, 1116.5], [1741.0, 1505.5], [1737.0, 1506.0], [1733.0, 1522.0], [1729.0, 1507.0], [1757.0, 1423.0], [1749.0, 1463.0], [1745.0, 1488.0], [1845.0, 1102.0], [1853.0, 1109.0], [1829.0, 1119.5], [1833.0, 1103.5], [1793.0, 1112.0], [1797.0, 1110.6666666666667], [1801.0, 1109.0], [1805.0, 1108.0], [1817.0, 1109.0], [1809.0, 1104.0], [1893.0, 1126.0], [1889.0, 1118.5], [1901.0, 1113.0], [1857.0, 1109.0], [1861.0, 1122.0], [1869.0, 1109.0], [1885.0, 1119.0], [1881.0, 1108.0], [1981.0, 1114.0], [1953.0, 1106.0], [1957.0, 1108.0], [1961.0, 1110.0], [1965.0, 1111.0], [1977.0, 1120.0], [1929.0, 1119.3333333333333], [1925.0, 1109.0], [1941.0, 1109.0], [1937.0, 1105.0], [2041.0, 1103.0], [2045.0, 1153.0], [2017.0, 1107.0], [2029.0, 1111.5], [2033.0, 1135.0], [1993.0, 1111.3333333333333], [2005.0, 1109.5], [2001.0, 1103.5], [2114.0, 1115.0], [2122.0, 1112.0], [2050.0, 1112.0], [2106.0, 1108.0], [2098.0, 1108.0], [2082.0, 1121.0], [2138.0, 1308.0], [2298.0, 1113.0], [2242.0, 1105.0], [2290.0, 1107.0], [2282.0, 1122.3333333333333], [2194.0, 1120.5], [2186.0, 1115.0], [2218.0, 1129.0], [2402.0, 1113.0], [2426.0, 1114.8333333333333], [2386.0, 1113.0], [2394.0, 1130.0], [2322.0, 1110.75], [2314.0, 1115.0], [2362.0, 1118.5], [2354.0, 1110.0], [2346.0, 1125.0], [2338.0, 1162.0], [2514.0, 1132.0], [2554.0, 1112.0], [2546.0, 1199.1935483870968], [2530.0, 1117.0], [2434.0, 1114.2], [2474.0, 1119.4285714285716], [2682.0, 1479.5], [2634.0, 1662.5], [2642.0, 1588.0], [2650.0, 1569.0], [2666.0, 1377.75], [2658.0, 1401.0], [2578.0, 1739.0], [2618.0, 1715.5], [2602.0, 1681.5], [2810.0, 1349.0], [2786.0, 1267.0], [2754.0, 1344.0], [2770.0, 1314.0], [2706.0, 1375.0], [2698.0, 1387.0], [2746.0, 1348.0], [2730.0, 1345.6], [2930.0, 1135.0], [2938.0, 1119.857142857143], [2882.0, 1467.5], [2890.0, 1252.0], [2906.0, 1111.8], [2922.0, 1119.4], [2914.0, 1118.5384615384617], [2818.0, 1323.0], [2826.0, 1746.5], [2834.0, 1314.0], [2874.0, 1258.0], [2866.0, 1268.5], [2858.0, 1727.0], [2850.0, 1714.0], [2946.0, 1118.6], [2954.0, 1114.5], [2970.0, 1110.5714285714287], [2994.0, 1122.0], [2986.0, 1121.0], [2978.0, 1115.5], [2067.0, 1114.0], [2075.0, 1111.0], [2051.0, 1113.0], [2091.0, 1113.0], [2115.0, 1108.0], [2139.0, 10144.0], [2131.0, 1109.5], [2283.0, 1113.0], [2275.0, 1128.5], [2203.0, 1117.0], [2211.0, 1116.0], [2267.0, 1116.0], [2259.0, 1116.0], [2331.0, 1125.0], [2419.0, 1117.6], [2387.0, 1112.3333333333333], [2395.0, 1122.0], [2307.0, 1114.0], [2363.0, 1110.0], [2355.0, 1116.0], [2347.0, 1116.0], [2499.0, 1119.0], [2507.0, 1120.0], [2555.0, 1113.5], [2515.0, 1128.0], [2523.0, 1129.0], [2547.0, 1121.5], [2531.0, 1140.0], [2443.0, 1116.5], [2435.0, 1112.4], [2659.0, 1417.0], [2683.0, 1365.0], [2651.0, 1590.0], [2667.0, 1395.0], [2563.0, 1111.6666666666667], [2571.0, 2098.0], [2579.0, 1710.0], [2587.0, 1706.0], [2595.0, 1726.5], [2795.0, 1326.0], [2755.0, 1348.0], [2763.0, 1354.0], [2771.0, 1789.5], [2803.0, 1316.0], [2787.0, 1329.5], [2707.0, 1415.0], [2739.0, 1430.0], [2731.0, 1774.0], [2931.0, 1122.5], [2923.0, 1112.0], [2883.0, 1231.0], [2891.0, 1251.0], [2907.0, 1123.5], [2939.0, 1148.0], [2915.0, 1108.6666666666667], [2819.0, 1318.5], [2875.0, 1245.0], [2867.0, 1254.0], [2859.0, 1709.0], [2851.0, 1230.0], [2955.0, 1112.2], [2947.0, 1118.666666666667], [2963.0, 1118.909090909091], [2971.0, 1115.0], [2987.0, 1118.6], [2979.0, 1117.75], [541.0, 1344.0], [543.0, 1333.0], [529.0, 1343.0], [531.0, 1343.0], [533.0, 1340.0], [539.0, 1336.0], [519.0, 1352.0], [517.0, 1356.0], [515.0, 1354.0], [513.0, 1973.0], [525.0, 1350.6666666666667], [521.0, 1349.0], [535.0, 1342.0], [569.0, 1319.0], [575.0, 1626.0], [561.0, 1328.0], [563.0, 1965.0], [571.0, 1319.0], [551.0, 1332.0], [549.0, 1328.0], [545.0, 1332.0], [559.0, 1326.0], [555.0, 1334.0], [553.0, 1331.0], [567.0, 1323.5], [565.0, 1320.0], [593.0, 1305.0], [605.0, 1302.0], [595.0, 1305.0], [581.0, 1317.0], [579.0, 1312.0], [577.0, 1313.0], [585.0, 1311.5], [599.0, 1300.5], [633.0, 1393.8333333333335], [637.0, 1292.0], [639.0, 1283.5], [635.0, 1290.0], [623.0, 1295.0], [609.0, 1299.0], [611.0, 1293.0], [615.0, 1599.5], [621.0, 1297.0], [617.0, 1294.0], [629.0, 1291.0], [625.0, 1291.0], [667.0, 1679.0], [659.0, 1277.0], [641.0, 1286.0], [643.0, 1288.0], [645.0, 1282.0], [653.0, 1915.0], [649.0, 1282.0], [661.0, 1277.0], [657.0, 1579.5], [675.0, 1275.0], [689.0, 1265.0], [699.0, 1260.0], [697.0, 1258.0], [687.0, 1272.0], [673.0, 1278.0], [677.0, 1274.3333333333333], [679.0, 1266.0], [685.0, 1429.0], [681.0, 1889.0], [695.0, 1258.0], [691.0, 1267.0], [733.0, 1245.0], [735.0, 1869.0], [721.0, 1253.0], [725.0, 1254.0], [723.0, 1248.0], [731.0, 1240.0], [711.0, 1559.5], [709.0, 1515.2], [717.0, 1881.0], [715.0, 1256.0], [713.0, 1257.0], [727.0, 1246.0], [763.0, 1210.0], [765.0, 1508.0], [767.0, 1505.5], [753.0, 1220.0], [755.0, 1219.0], [761.0, 1206.5], [743.0, 1223.0], [741.0, 1225.0], [739.0, 1230.0], [737.0, 1869.0], [751.0, 1217.0], [747.0, 1848.0], [745.0, 1223.5], [759.0, 1211.0], [757.0, 1209.0], [775.0, 1498.5], [797.0, 1125.0], [799.0, 1124.5], [785.0, 1185.0], [787.0, 1185.0], [773.0, 1796.0], [771.0, 1817.0], [769.0, 1827.0], [783.0, 1183.0], [781.0, 1192.0], [779.0, 1196.0], [777.0, 1194.0], [791.0, 1129.0], [789.0, 1139.0], [803.0, 1121.0], [829.0, 1114.5], [831.0, 1116.0], [827.0, 1113.3333333333333], [815.0, 1122.0], [807.0, 1118.0], [805.0, 1122.0], [813.0, 1121.0], [811.0, 1113.0], [809.0, 1122.0], [861.0, 1107.0], [863.0, 1110.0], [851.0, 1111.5], [849.0, 1111.0], [857.0, 1108.0], [833.0, 1113.0], [845.0, 1112.5], [843.0, 1111.0], [855.0, 1110.0], [853.0, 1110.0], [893.0, 1112.0], [895.0, 1115.0], [881.0, 1173.0], [883.0, 1129.0], [891.0, 1109.0], [889.0, 1111.0], [871.0, 1105.0], [867.0, 1106.6666666666667], [865.0, 1109.0], [879.0, 8326.0], [877.0, 1103.0], [875.0, 1105.0], [885.0, 1123.0], [923.0, 1116.5], [921.0, 1110.0], [927.0, 1108.0], [913.0, 1152.0], [915.0, 1114.0], [925.0, 1116.0], [903.0, 1110.5], [901.0, 1112.0], [897.0, 1106.0], [911.0, 1109.0], [907.0, 1110.0], [905.0, 1118.0], [917.0, 1108.0], [959.0, 1110.0], [957.0, 1109.0], [929.0, 1118.0], [951.0, 1111.0], [949.0, 1111.0], [947.0, 1108.0], [989.0, 1109.0], [991.0, 1109.0], [985.0, 1105.0], [975.0, 1109.0], [961.0, 1112.0], [967.0, 1112.0], [971.0, 1112.0], [983.0, 1122.0], [981.0, 1121.5], [1019.0, 1107.0], [1021.0, 1123.0], [997.0, 1112.3333333333333], [995.0, 1111.0], [993.0, 1110.5], [1007.0, 1109.0], [1003.0, 1116.6666666666667], [1013.0, 1104.3333333333333], [1058.0, 1117.0], [1062.0, 1120.5], [1082.0, 1104.0], [1078.0, 1116.0], [1034.0, 1111.0], [1030.0, 1106.0], [1046.0, 1112.0], [1070.0, 1133.5], [1138.0, 1126.0], [1146.0, 1115.0], [1102.0, 1113.0], [1098.0, 1108.0], [1090.0, 1109.0], [1130.0, 1104.0], [1126.0, 1113.0], [1114.0, 1128.0], [1106.0, 1109.5], [1206.0, 1111.0], [1186.0, 1111.0], [1210.0, 1112.3333333333333], [1214.0, 1107.3333333333333], [1202.0, 1109.0], [1162.0, 4604.5], [1158.0, 1127.0], [1154.0, 1107.0], [1182.0, 1107.0], [1174.0, 1112.6], [1170.0, 1112.5], [1198.0, 1110.6666666666667], [1190.0, 1112.0], [1274.0, 1115.0], [1250.0, 1105.0], [1230.0, 1106.4], [1226.0, 1110.0], [1222.0, 1109.0], [1242.0, 1106.0], [1234.0, 1106.0], [1262.0, 4581.5], [1258.0, 1106.0], [1334.0, 1109.0], [1338.0, 1107.0], [1330.0, 1108.0], [1294.0, 1107.0], [1286.0, 1119.5], [1282.0, 1116.0], [1298.0, 1111.0], [1354.0, 1105.5], [1358.0, 1109.5], [1346.0, 1110.0], [1374.0, 1106.5], [1370.0, 1111.5], [1366.0, 1111.0], [1362.0, 1116.0], [1390.0, 1101.5], [1386.0, 1101.0], [1382.0, 1114.0], [1378.0, 1113.3333333333333], [1470.0, 1106.0], [1422.0, 1126.0], [1410.0, 1110.0], [1454.0, 1110.5], [1442.0, 1114.0], [1530.0, 1113.0], [1526.0, 1113.0], [1518.0, 1119.5], [1510.0, 1111.0], [1502.0, 1113.5], [1474.0, 1107.0], [1486.0, 1108.0], [1490.0, 1124.0], [1590.0, 1114.5], [1570.0, 1110.0], [1586.0, 1112.0], [1566.0, 1118.0], [1550.0, 1122.0], [1558.0, 1115.0], [1582.0, 1112.0], [1578.0, 1110.0], [1650.0, 1115.5], [1658.0, 1108.3333333333333], [1630.0, 1110.0], [1602.0, 1106.0], [1606.0, 1111.5], [1614.0, 1110.0], [1610.0, 1119.0], [1618.0, 1105.0], [1722.0, 1504.0], [1718.0, 1529.0], [1698.0, 7633.0], [1726.0, 1511.0], [1702.0, 7428.0], [1706.0, 1970.0], [1710.0, 1595.0], [1714.0, 1537.0], [1694.0, 1101.0], [1690.0, 1106.0], [1686.0, 1106.0], [1682.0, 1101.0], [1782.0, 1110.0], [1762.0, 1313.0], [1766.0, 1126.0], [1770.0, 1114.0], [1774.0, 1109.0], [1778.0, 1126.0], [1742.0, 1482.0], [1738.0, 1506.0], [1730.0, 1523.0], [1758.0, 1438.0], [1754.0, 1444.6666666666667], [1750.0, 1444.0], [1746.0, 1455.0], [1846.0, 1109.0], [1826.0, 1135.0], [1842.0, 1113.25], [1822.0, 1120.5], [1794.0, 1104.0], [1798.0, 1126.0], [1806.0, 1132.0], [1814.0, 1108.0], [1810.0, 1116.0], [1838.0, 1115.5], [1918.0, 1108.5], [1894.0, 1108.5], [1890.0, 1111.6666666666667], [1898.0, 1106.0], [1910.0, 1111.0], [1886.0, 1160.0], [1866.0, 1110.0], [1870.0, 1111.0], [1882.0, 1107.0], [1878.0, 1113.0], [1874.0, 1117.0], [1902.0, 1114.5], [1982.0, 1107.0], [1958.0, 1110.0], [1974.0, 1114.0], [1970.0, 1122.3333333333333], [1934.0, 1112.0], [1930.0, 1115.0], [1946.0, 1105.0], [2034.0, 1108.3333333333333], [2026.0, 1109.0], [2046.0, 1136.0], [2038.0, 1108.0], [2014.0, 1107.0], [1990.0, 1106.8], [1994.0, 1116.0], [1998.0, 1113.5], [2006.0, 1121.0], [2068.0, 1114.5], [2076.0, 1110.0], [2060.0, 1116.5], [2108.0, 1104.0], [2084.0, 1113.25], [2140.0, 1177.0], [2132.0, 1107.0], [2276.0, 1149.0], [2252.0, 1111.0], [2260.0, 1116.0], [2300.0, 1113.2857142857144], [2204.0, 1113.0], [2196.0, 1126.5], [2228.0, 1115.0], [2212.0, 1133.5], [2404.0, 1115.5], [2412.0, 1116.6666666666667], [2380.0, 1116.0], [2396.0, 1106.0], [2332.0, 1128.5], [2324.0, 1105.0], [2364.0, 1123.0], [2356.0, 1120.3333333333333], [2556.0, 1111.5], [2508.0, 1123.0], [2524.0, 1107.0], [2540.0, 1121.5], [2444.0, 1116.25], [2676.0, 1390.6666666666667], [2684.0, 1392.0], [2628.0, 1693.3333333333333], [2644.0, 1628.0], [2668.0, 1813.0], [2660.0, 1459.0], [2564.0, 1110.0], [2572.0, 2081.0], [2580.0, 1784.0], [2620.0, 1677.3333333333333], [2612.0, 1722.5], [2596.0, 1735.0], [2804.0, 1286.5], [2756.0, 1376.0], [2772.0, 1321.0], [2780.0, 1398.6], [2812.0, 1306.0], [2716.0, 1359.6], [2700.0, 1410.0], [2692.0, 1363.3333333333333], [2748.0, 1361.0], [2732.0, 1350.0], [2924.0, 2036.4666666666667], [2932.0, 1117.2], [2940.0, 1117.4], [2884.0, 1286.0], [2900.0, 1456.5], [2908.0, 1114.0], [2916.0, 1117.3333333333333], [2820.0, 1299.0], [2836.0, 1316.5], [2844.0, 1330.5], [2868.0, 1312.0], [2948.0, 1114.2], [2996.0, 1110.6666666666667], [2956.0, 1118.9166666666667], [2964.0, 1114.0], [2972.0, 1109.0], [2988.0, 1112.0], [2173.0, 1119.0], [2053.0, 1119.0], [2109.0, 1109.0], [2125.0, 1115.0], [2141.0, 1127.0], [2133.0, 1113.0], [2293.0, 1113.0], [2237.0, 1124.0], [2197.0, 1121.0], [2205.0, 1109.0], [2261.0, 1117.75], [2405.0, 1121.0], [2373.0, 1112.0], [2389.0, 1104.5], [2397.0, 1108.0], [2317.0, 1110.0], [2325.0, 1111.0], [2333.0, 1100.0], [2365.0, 1115.0], [2357.0, 1113.0], [2341.0, 1112.0], [2549.0, 1110.0], [2501.0, 1142.0], [2509.0, 1116.0], [2533.0, 1125.6666666666667], [2677.0, 1413.0], [2661.0, 1443.0], [2629.0, 1710.0], [2645.0, 1638.5], [2653.0, 1585.0], [2685.0, 1805.0], [2565.0, 1105.0], [2573.0, 2134.0], [2581.0, 1767.0], [2589.0, 1757.0], [2605.0, 1685.0], [2597.0, 1695.0], [2797.0, 1507.5], [2805.0, 1374.0], [2813.0, 1288.0], [2757.0, 1330.0], [2765.0, 1318.0], [2781.0, 1747.5], [2709.0, 1522.6666666666667], [2701.0, 1378.0], [2749.0, 1773.0], [2741.0, 1310.0], [2733.0, 1339.0], [2941.0, 1160.0], [2885.0, 1233.0], [2901.0, 1466.5], [2909.0, 1117.0], [2925.0, 1141.0], [2917.0, 1107.0], [2829.0, 1300.5], [2837.0, 1302.0], [2869.0, 1281.0], [2861.0, 1489.5], [2853.0, 1430.6666666666667], [2957.0, 1118.5], [2949.0, 1113.0], [2965.0, 1118.8], [2973.0, 1139.0], [2989.0, 1120.0], [1055.0, 1110.0], [1075.0, 1110.6666666666667], [1039.0, 1119.0], [1027.0, 1109.3333333333333], [1051.0, 1116.0], [1043.0, 1115.0], [1151.0, 1118.0], [1123.0, 1114.5], [1143.0, 1116.0], [1103.0, 1137.0], [1099.0, 1117.0], [1119.0, 1108.5], [1131.0, 1118.0], [1211.0, 1112.0], [1215.0, 1113.0], [1207.0, 1111.0], [1203.0, 1112.0], [1179.0, 1105.5], [1159.0, 1111.0], [1167.0, 1103.0], [1195.0, 1110.0], [1187.0, 1111.5], [1275.0, 1116.0], [1271.0, 1117.5], [1267.0, 1132.5], [1263.0, 5494.0], [1247.0, 1110.0], [1227.0, 1110.0], [1331.0, 1103.0], [1315.0, 1113.5], [1343.0, 1104.0], [1339.0, 1117.0], [1311.0, 1113.3333333333333], [1287.0, 1162.0], [1291.0, 1107.0], [1295.0, 1108.0], [1307.0, 1107.5], [1303.0, 1108.0], [1327.0, 1118.0], [1323.0, 1111.5], [1407.0, 1112.0], [1395.0, 1115.5], [1391.0, 1113.0], [1375.0, 1111.0], [1351.0, 1102.5], [1355.0, 1105.0], [1371.0, 1108.0], [1463.0, 1113.0], [1467.0, 1113.0], [1419.0, 1103.0], [1415.0, 1113.0], [1411.0, 1109.0], [1431.0, 1115.0], [1427.0, 1109.0], [1451.0, 1112.0], [1447.0, 1110.0], [1443.0, 1111.0], [1523.0, 1110.5], [1535.0, 1108.0], [1479.0, 1118.6666666666667], [1475.0, 1119.5], [1503.0, 1105.0], [1499.0, 1108.0], [1495.0, 1116.0], [1519.0, 1100.0], [1515.0, 1110.0], [1507.0, 1110.0], [1595.0, 1105.5], [1567.0, 1103.0], [1599.0, 1111.0], [1543.0, 1108.5], [1539.0, 1108.0], [1575.0, 1106.0], [1571.0, 1118.0], [1563.0, 1114.5], [1611.0, 1110.0], [1639.0, 1111.5], [1663.0, 1108.0], [1615.0, 1108.0], [1631.0, 1110.0], [1627.0, 1111.5], [1623.0, 1120.0], [1619.0, 1111.0], [1643.0, 1107.5], [1635.0, 1122.0], [1723.0, 1512.0], [1703.0, 7417.0], [1699.0, 7631.0], [1707.0, 1614.0], [1711.0, 1589.0], [1719.0, 1515.0], [1675.0, 1113.5], [1671.0, 1113.0], [1695.0, 1102.0], [1691.0, 1102.0], [1683.0, 1106.0], [1791.0, 1126.0], [1787.0, 1108.5], [1767.0, 1126.0], [1763.0, 1170.0], [1771.0, 1114.0], [1775.0, 1117.0], [1783.0, 1122.0], [1779.0, 1112.0], [1743.0, 1517.0], [1739.0, 1495.0], [1735.0, 1496.0], [1731.0, 1502.0], [1759.0, 1407.0], [1751.0, 10897.0], [1747.0, 1456.0], [1843.0, 1110.0], [1847.0, 1106.0], [1827.0, 1116.0], [1851.0, 1110.0], [1803.0, 1103.0], [1807.0, 1118.0], [1819.0, 1113.5], [1815.0, 1123.5], [1811.0, 1109.0], [1911.0, 1113.0], [1919.0, 1125.0], [1899.0, 1112.0], [1915.0, 1110.75], [1907.0, 1115.0], [1863.0, 1117.0], [1867.0, 1112.5], [1871.0, 1112.0], [1879.0, 1120.0], [1875.0, 1142.0], [1903.0, 1108.0], [1975.0, 1110.75], [1979.0, 1109.0], [1955.0, 1113.5], [1963.0, 1120.0], [1967.0, 1104.0], [1931.0, 1134.0], [1923.0, 1106.5], [1951.0, 1110.0], [1943.0, 1107.0], [1939.0, 1110.5], [2043.0, 1105.5], [2047.0, 1125.0], [2019.0, 1111.0], [2023.0, 1109.6666666666667], [2039.0, 1107.0], [2035.0, 1110.0], [1995.0, 1108.0], [1999.0, 1107.0], [2007.0, 1107.0], [2003.0, 1111.5], [2118.0, 1108.0], [2166.0, 1126.0], [2126.0, 1114.0], [2070.0, 1105.0], [2094.0, 1128.0], [2142.0, 1128.0], [2134.0, 1100.0], [2278.0, 1109.0], [2294.0, 1110.0], [2286.0, 1113.6666666666667], [2302.0, 1111.0], [2270.0, 1122.0], [2206.0, 1114.5], [2198.0, 1116.0], [2238.0, 1119.0], [2222.0, 1117.0], [2214.0, 1114.3333333333333], [2374.0, 1117.0], [2414.0, 1108.0], [2390.0, 1120.5], [2398.0, 1109.5], [2406.0, 1103.0], [2310.0, 1116.0], [2342.0, 1116.0], [2502.0, 1114.0], [2558.0, 1118.0], [2510.0, 1118.0], [2518.0, 1124.75], [2526.0, 1148.0], [2542.0, 1112.5], [2678.0, 1358.0], [2638.0, 1674.4], [2646.0, 1631.0], [2654.0, 1654.0], [2686.0, 1430.0], [2670.0, 1361.5], [2662.0, 1404.0], [2566.0, 2338.0], [2574.0, 2064.0], [2590.0, 1724.0], [2622.0, 1677.0], [2614.0, 1721.0], [2606.0, 1679.5], [2598.0, 1719.0], [2702.0, 1364.0], [2758.0, 1768.0], [2766.0, 1345.0], [2718.0, 1320.0], [2694.0, 1681.6666666666667], [2742.0, 1331.0], [2734.0, 1314.0], [2726.0, 1332.0], [2934.0, 1121.6666666666667], [2926.0, 1142.8], [2886.0, 1252.0], [2894.0, 1277.75], [2902.0, 1483.3333333333333], [2910.0, 1117.8], [2942.0, 1118.5], [2918.0, 1117.0], [2822.0, 1250.0], [2830.0, 1413.5], [2838.0, 1728.0], [2878.0, 1496.0], [2870.0, 1721.0], [2854.0, 1289.0], [2950.0, 1117.6666666666667], [2958.0, 1118.5000000000002], [2966.0, 1122.6], [2974.0, 1110.8], [2998.0, 1111.6666666666667], [2990.0, 1108.5], [2063.0, 1117.7142857142858], [2079.0, 1106.6666666666667], [2111.0, 1102.0], [2103.0, 1114.0], [2095.0, 1108.4], [2119.0, 1110.0], [2127.0, 1113.0], [2143.0, 1126.0], [2135.0, 1109.0], [2255.0, 1113.0], [2191.0, 1127.0], [2199.0, 1235.0], [2407.0, 1126.0], [2415.0, 1114.0], [2383.0, 1112.0], [2367.0, 1125.0], [2335.0, 1107.0], [2359.0, 1121.0], [2559.0, 1114.0], [2511.0, 1127.6666666666667], [2527.0, 1120.3125000000002], [2543.0, 1119.0], [2535.0, 1113.5], [2495.0, 1122.2962962962963], [2663.0, 1414.0], [2687.0, 1344.0], [2639.0, 1715.0], [2647.0, 1643.0], [2655.0, 1609.0], [2623.0, 1693.0], [2567.0, 2339.0], [2575.0, 1812.5], [2583.0, 1740.6666666666667], [2615.0, 1697.0], [2799.0, 1325.0], [2807.0, 1351.0], [2775.0, 1349.5], [2783.0, 4890.0], [2791.0, 1416.25], [2711.0, 1350.5], [2703.0, 1384.0], [2695.0, 1320.0], [2751.0, 1306.0], [2743.0, 1339.5], [2735.0, 1319.0], [2927.0, 1117.3333333333333], [2943.0, 1116.0], [2903.0, 1382.1666666666667], [2911.0, 1115.6], [2935.0, 1117.6666666666667], [2919.0, 1115.0], [2879.0, 1303.0], [2823.0, 1496.0], [2871.0, 1271.0], [2863.0, 1255.0], [2855.0, 1257.0], [2951.0, 1129.0], [2991.0, 1118.375], [2959.0, 1106.0], [2967.0, 1116.0], [2975.0, 1109.0], [2999.0, 1118.5], [2983.0, 1116.25], [1.0, 5037.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[2965.500968732539, 1599.7980671297198]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 3000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 35059.7, "minX": 1.6842129E12, "maxY": 322225.5833333333, "series": [{"data": [[1.68421302E12, 285142.31666666665], [1.68421314E12, 315824.81666666665], [1.68421296E12, 236894.18333333332], [1.68421308E12, 322225.5833333333], [1.6842129E12, 251361.68333333332], [1.6842132E12, 43153.333333333336]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.68421302E12, 231607.6], [1.68421314E12, 256612.75], [1.68421296E12, 192466.35], [1.68421308E12, 261798.4], [1.6842129E12, 204222.3], [1.6842132E12, 35059.7]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6842132E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 1249.6071244192055, "minX": 1.6842129E12, "maxY": 1950.0715235309758, "series": [{"data": [[1.68421302E12, 1664.5516352127524], [1.68421314E12, 1550.8410156938776], [1.68421296E12, 1348.4374382846656], [1.68421308E12, 1548.9474903207984], [1.6842129E12, 1950.0715235309758], [1.6842132E12, 1249.6071244192055]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6842132E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 1249.3526071244203, "minX": 1.6842129E12, "maxY": 1949.7271115837877, "series": [{"data": [[1.68421302E12, 1664.3325518696472], [1.68421314E12, 1550.626203491456], [1.68421296E12, 1348.215733295721], [1.68421308E12, 1548.730849004424], [1.6842129E12, 1949.7271115837877], [1.6842132E12, 1249.3526071244203]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6842132E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.6842129E12, "maxY": 348.49428343525506, "series": [{"data": [[1.68421302E12, 54.34388309303313], [1.68421314E12, 35.455016751895364], [1.68421296E12, 110.7181548878543], [1.68421308E12, 33.204957134955926], [1.6842129E12, 348.49428343525506], [1.6842132E12, 0.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6842132E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 1093.0, "minX": 1.6842129E12, "maxY": 12903.0, "series": [{"data": [[1.68421302E12, 11541.0], [1.68421314E12, 12899.0], [1.68421296E12, 10761.0], [1.68421308E12, 12903.0], [1.6842129E12, 12283.0], [1.6842132E12, 10897.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.68421302E12, 2612.0], [1.68421314E12, 2353.0], [1.68421296E12, 1965.0], [1.68421308E12, 2536.9000000000015], [1.6842129E12, 3254.9000000000015], [1.6842132E12, 1468.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.68421302E12, 4431.850000000024], [1.68421314E12, 4115.980000000003], [1.68421296E12, 3474.980000000003], [1.68421308E12, 3975.980000000003], [1.6842129E12, 6315.990000000002], [1.6842132E12, 4717.25]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.68421302E12, 3189.9500000000007], [1.68421314E12, 2839.800000000003], [1.68421296E12, 2601.9500000000007], [1.68421308E12, 2987.9500000000007], [1.6842129E12, 4357.850000000002], [1.6842132E12, 1709.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.68421302E12, 1093.0], [1.68421314E12, 1093.0], [1.68421296E12, 1093.0], [1.68421308E12, 1093.0], [1.6842129E12, 1093.0], [1.6842132E12, 1097.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.68421302E12, 1407.0], [1.68421314E12, 1277.5], [1.68421296E12, 1112.0], [1.68421308E12, 1304.0], [1.6842129E12, 1307.0], [1.6842132E12, 1115.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6842132E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 28.0, "minX": 1.0, "maxY": 7501.5, "series": [{"data": [[2.0, 4699.5], [3.0, 5268.0], [4.0, 5614.5], [5.0, 3079.5], [6.0, 7501.5], [8.0, 5140.0], [9.0, 1543.0], [11.0, 2367.5], [13.0, 3636.0], [14.0, 4593.5], [15.0, 2286.0], [17.0, 1755.0], [18.0, 1841.0], [23.0, 1772.0], [29.0, 1814.0], [34.0, 3134.5], [37.0, 1949.0], [40.0, 2016.0], [44.0, 4215.0], [48.0, 3015.5], [53.0, 2108.0], [55.0, 1664.0], [56.0, 1581.5], [57.0, 4141.0], [68.0, 1970.0], [70.0, 2023.0], [87.0, 1898.0], [92.0, 4639.0], [93.0, 1830.0], [97.0, 1108.0], [102.0, 1105.0], [100.0, 1111.0], [103.0, 1109.0], [112.0, 1357.0], [119.0, 3095.0], [122.0, 1126.0], [121.0, 1673.0], [126.0, 1406.5], [127.0, 1104.0], [134.0, 1559.0], [139.0, 1461.0], [148.0, 2400.0], [164.0, 2958.5], [177.0, 1107.0], [185.0, 1107.0], [204.0, 1471.0], [222.0, 4912.5], [230.0, 3049.5], [226.0, 3178.0], [243.0, 2033.0], [250.0, 1505.5], [253.0, 1105.0], [249.0, 1105.0], [270.0, 1108.0], [282.0, 1659.5], [277.0, 1194.0], [286.0, 1108.0], [301.0, 1110.0], [309.0, 1108.0], [308.0, 1596.5], [333.0, 1583.0], [331.0, 1117.0], [345.0, 1593.0], [338.0, 1107.0], [347.0, 1112.0], [366.0, 1123.5], [372.0, 2528.5], [370.0, 1108.0], [398.0, 1403.0], [394.0, 1983.0], [414.0, 1207.0], [401.0, 1106.0], [408.0, 1123.0], [409.0, 1784.0], [431.0, 1113.0], [429.0, 2752.0], [421.0, 1122.0], [430.0, 1108.0], [428.0, 1119.0], [426.0, 1108.0], [425.0, 1126.0], [434.0, 1108.0], [440.0, 1129.0], [443.0, 1123.0], [436.0, 1109.0], [432.0, 1111.0], [433.0, 1108.0], [435.0, 1106.0], [446.0, 1110.0], [445.0, 1330.0], [441.0, 1107.0], [437.0, 1107.0], [439.0, 1222.0], [454.0, 1116.0], [448.0, 1105.0], [459.0, 1121.0], [449.0, 1126.0], [477.0, 1128.0], [472.0, 2069.0], [470.0, 1159.5], [488.0, 1113.5], [486.0, 1109.0], [480.0, 1340.0], [492.0, 1117.0], [504.0, 1117.0], [508.0, 1130.5], [529.0, 1108.0], [536.0, 1999.0], [526.0, 1142.0], [568.0, 5637.5], [557.0, 1346.0], [562.0, 1570.0], [602.0, 1740.0], [593.0, 2679.0], [603.0, 1633.0], [601.0, 1106.0], [598.0, 1245.5], [600.0, 2541.5], [638.0, 1933.0], [627.0, 1113.0], [609.0, 1106.0], [616.0, 1766.0], [660.0, 1345.5], [667.0, 2574.0], [665.0, 2676.5], [652.0, 1843.5], [640.0, 2071.0], [658.0, 1959.0], [692.0, 1757.0], [729.0, 1696.0], [725.0, 1111.0], [727.0, 1107.0], [713.0, 1209.0], [715.0, 1816.0], [754.0, 1415.5], [759.0, 2892.0], [745.0, 1560.0], [752.0, 1106.0], [742.0, 2177.0], [757.0, 1112.0], [794.0, 1120.0], [769.0, 2315.0], [777.0, 1428.0], [774.0, 1132.5], [786.0, 1124.0], [791.0, 1270.0], [799.0, 2371.0], [798.0, 1113.0], [771.0, 1135.0], [784.0, 2334.0], [773.0, 1187.0], [807.0, 1172.0], [813.0, 1109.0], [814.0, 1105.0], [812.0, 1108.0], [810.0, 1110.0], [826.0, 1109.0], [825.0, 2247.0], [824.0, 1111.0], [803.0, 1872.0], [819.0, 1110.0], [823.0, 2059.0], [816.0, 1108.0], [827.0, 1115.0], [831.0, 1107.0], [806.0, 1111.0], [829.0, 1106.0], [848.0, 1639.0], [860.0, 2038.0], [838.0, 1127.0], [841.0, 1572.0], [837.0, 1120.0], [857.0, 1752.0], [854.0, 1824.5], [890.0, 1701.0], [873.0, 2371.0], [884.0, 2940.5], [886.0, 1894.5], [876.0, 1338.0], [892.0, 1139.5], [880.0, 1127.0], [877.0, 1126.0], [872.0, 1107.0], [888.0, 1714.0], [866.0, 1672.0], [871.0, 1671.0], [879.0, 1593.0], [922.0, 1234.5], [906.0, 3218.0], [912.0, 1578.0], [921.0, 1192.5], [902.0, 1143.0], [924.0, 1111.0], [911.0, 1407.0], [914.0, 1114.0], [915.0, 1415.0], [917.0, 1699.0], [916.0, 1106.0], [908.0, 1640.0], [901.0, 2391.0], [898.0, 2917.5], [1.0, 5745.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[270.0, 39.0], [394.0, 28.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 924.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 7501.5, "series": [{"data": [[2.0, 4699.5], [3.0, 5268.0], [4.0, 5613.5], [5.0, 3078.5], [6.0, 7501.5], [8.0, 5140.0], [9.0, 1543.0], [11.0, 2367.5], [13.0, 3636.0], [14.0, 4593.5], [15.0, 2286.0], [17.0, 1755.0], [18.0, 1841.0], [23.0, 1772.0], [29.0, 1814.0], [34.0, 3134.0], [37.0, 1949.0], [40.0, 2016.0], [44.0, 4214.5], [48.0, 3015.5], [53.0, 2107.0], [55.0, 1663.0], [56.0, 1580.5], [57.0, 4140.0], [68.0, 1970.0], [70.0, 2023.0], [87.0, 1898.0], [92.0, 4639.0], [93.0, 1829.0], [97.0, 1108.0], [102.0, 1104.0], [100.0, 1111.0], [103.0, 1108.0], [112.0, 1357.0], [119.0, 3095.0], [122.0, 1126.0], [121.0, 1673.0], [126.0, 1406.0], [127.0, 1104.0], [134.0, 1559.0], [139.0, 1461.0], [148.0, 2400.0], [164.0, 2958.5], [177.0, 1107.0], [185.0, 1106.0], [204.0, 1471.0], [222.0, 4912.5], [230.0, 3049.5], [226.0, 3178.0], [243.0, 2033.0], [250.0, 1505.0], [253.0, 1105.0], [249.0, 1105.0], [270.0, 1108.0], [282.0, 1659.5], [277.0, 1194.0], [286.0, 1107.0], [301.0, 1109.0], [309.0, 1107.0], [308.0, 1596.5], [333.0, 1583.0], [331.0, 1117.0], [345.0, 1593.0], [338.0, 1107.0], [347.0, 1112.0], [366.0, 1123.5], [372.0, 2528.0], [370.0, 1108.0], [398.0, 1403.0], [394.0, 1983.0], [414.0, 1206.5], [401.0, 1106.0], [408.0, 1122.0], [409.0, 1784.0], [431.0, 1112.0], [429.0, 2751.0], [421.0, 1122.0], [430.0, 1107.0], [428.0, 1119.0], [426.0, 1108.0], [425.0, 1126.0], [434.0, 1108.0], [440.0, 1128.0], [443.0, 1123.0], [436.0, 1109.0], [432.0, 1111.0], [433.0, 1108.0], [435.0, 1106.0], [446.0, 1109.5], [445.0, 1330.0], [441.0, 1107.0], [437.0, 1107.0], [439.0, 1222.0], [454.0, 1116.0], [448.0, 1105.0], [459.0, 1121.0], [449.0, 1125.0], [477.0, 1128.0], [472.0, 2069.0], [470.0, 1159.0], [488.0, 1113.0], [486.0, 1108.0], [480.0, 1340.0], [492.0, 1117.0], [504.0, 1117.0], [508.0, 1130.0], [529.0, 1108.0], [536.0, 1999.0], [526.0, 1142.0], [568.0, 5637.5], [557.0, 1345.0], [562.0, 1570.0], [602.0, 1740.0], [593.0, 2679.0], [603.0, 1633.0], [601.0, 1106.0], [598.0, 1245.5], [600.0, 2541.5], [638.0, 1933.0], [627.0, 1113.0], [609.0, 1106.0], [616.0, 1766.0], [660.0, 1345.5], [667.0, 2574.0], [665.0, 2676.0], [652.0, 1843.5], [640.0, 2071.0], [658.0, 1959.0], [692.0, 1757.0], [729.0, 1696.0], [725.0, 1110.0], [727.0, 1107.0], [713.0, 1209.0], [715.0, 1816.0], [754.0, 1415.0], [759.0, 2892.0], [745.0, 1560.0], [752.0, 1105.0], [742.0, 2177.0], [757.0, 1111.0], [794.0, 1120.0], [769.0, 2314.0], [777.0, 1422.0], [774.0, 1132.0], [786.0, 1124.0], [791.0, 1270.0], [799.0, 2371.0], [798.0, 1113.0], [771.0, 1135.0], [784.0, 2333.5], [773.0, 1187.0], [807.0, 1172.0], [813.0, 1109.0], [814.0, 1105.0], [812.0, 1107.0], [810.0, 1110.0], [826.0, 1109.0], [825.0, 2246.0], [824.0, 1111.0], [803.0, 1872.0], [819.0, 1110.0], [823.0, 2058.0], [816.0, 1108.0], [827.0, 1115.0], [831.0, 1107.0], [806.0, 1111.0], [829.0, 1106.0], [848.0, 1639.0], [860.0, 2038.0], [838.0, 1127.0], [841.0, 1571.0], [837.0, 1119.0], [857.0, 1752.0], [854.0, 1824.0], [890.0, 1701.0], [873.0, 2371.0], [884.0, 2940.0], [886.0, 1894.0], [876.0, 1338.0], [892.0, 1139.0], [880.0, 1127.0], [877.0, 1126.0], [872.0, 1107.0], [888.0, 1714.0], [866.0, 1672.0], [871.0, 1671.0], [879.0, 1592.5], [922.0, 1234.0], [906.0, 3218.0], [912.0, 1578.0], [921.0, 1192.5], [902.0, 1143.0], [924.0, 1111.0], [911.0, 1407.0], [914.0, 1114.0], [915.0, 1415.0], [917.0, 1699.0], [916.0, 1106.0], [908.0, 1639.5], [901.0, 2391.0], [898.0, 2917.5], [1.0, 5744.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[270.0, 39.0], [394.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 924.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 49.78333333333333, "minX": 1.6842129E12, "maxY": 484.6333333333333, "series": [{"data": [[1.68421302E12, 434.0], [1.68421314E12, 477.4], [1.68421296E12, 349.6], [1.68421308E12, 484.6333333333333], [1.6842129E12, 380.96666666666664], [1.6842132E12, 49.78333333333333]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6842132E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.6842129E12, "maxY": 482.1333333333333, "series": [{"data": [[1.68421302E12, 0.016666666666666666]], "isOverall": false, "label": "Non HTTP response code: javax.net.ssl.SSLException", "isController": false}, {"data": [[1.68421302E12, 426.53333333333336], [1.68421314E12, 472.53333333333336], [1.68421296E12, 354.45], [1.68421308E12, 482.1333333333333], [1.6842129E12, 376.1], [1.6842132E12, 64.56666666666666]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.68421314E12, 0.05]], "isOverall": false, "label": "429", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6842132E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.6842129E12, "maxY": 482.1333333333333, "series": [{"data": [[1.68421302E12, 426.53333333333336], [1.68421314E12, 472.53333333333336], [1.68421296E12, 354.45], [1.68421308E12, 482.1333333333333], [1.6842129E12, 376.1], [1.6842132E12, 64.56666666666666]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.68421302E12, 0.016666666666666666], [1.68421314E12, 0.05]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6842132E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.6842129E12, "maxY": 482.1333333333333, "series": [{"data": [[1.68421302E12, 426.53333333333336], [1.68421314E12, 472.53333333333336], [1.68421296E12, 354.45], [1.68421308E12, 482.1333333333333], [1.6842129E12, 376.1], [1.6842132E12, 64.56666666666666]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.68421302E12, 0.016666666666666666], [1.68421314E12, 0.05]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6842132E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

