/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 1106.0, "minX": 0.0, "maxY": 9285.0, "series": [{"data": [[0.0, 1106.0], [0.1, 1109.0], [0.2, 1110.0], [0.3, 1110.0], [0.4, 1111.0], [0.5, 1111.0], [0.6, 1112.0], [0.7, 1112.0], [0.8, 1112.0], [0.9, 1112.0], [1.0, 1113.0], [1.1, 1113.0], [1.2, 1113.0], [1.3, 1113.0], [1.4, 1114.0], [1.5, 1114.0], [1.6, 1114.0], [1.7, 1114.0], [1.8, 1114.0], [1.9, 1114.0], [2.0, 1114.0], [2.1, 1115.0], [2.2, 1115.0], [2.3, 1115.0], [2.4, 1115.0], [2.5, 1115.0], [2.6, 1115.0], [2.7, 1115.0], [2.8, 1115.0], [2.9, 1115.0], [3.0, 1115.0], [3.1, 1115.0], [3.2, 1116.0], [3.3, 1116.0], [3.4, 1116.0], [3.5, 1116.0], [3.6, 1116.0], [3.7, 1116.0], [3.8, 1116.0], [3.9, 1116.0], [4.0, 1116.0], [4.1, 1116.0], [4.2, 1116.0], [4.3, 1117.0], [4.4, 1117.0], [4.5, 1117.0], [4.6, 1117.0], [4.7, 1117.0], [4.8, 1117.0], [4.9, 1117.0], [5.0, 1117.0], [5.1, 1117.0], [5.2, 1117.0], [5.3, 1117.0], [5.4, 1117.0], [5.5, 1117.0], [5.6, 1117.0], [5.7, 1118.0], [5.8, 1118.0], [5.9, 1118.0], [6.0, 1118.0], [6.1, 1118.0], [6.2, 1118.0], [6.3, 1118.0], [6.4, 1118.0], [6.5, 1118.0], [6.6, 1118.0], [6.7, 1118.0], [6.8, 1118.0], [6.9, 1118.0], [7.0, 1118.0], [7.1, 1118.0], [7.2, 1118.0], [7.3, 1119.0], [7.4, 1119.0], [7.5, 1119.0], [7.6, 1119.0], [7.7, 1119.0], [7.8, 1119.0], [7.9, 1119.0], [8.0, 1119.0], [8.1, 1119.0], [8.2, 1119.0], [8.3, 1119.0], [8.4, 1119.0], [8.5, 1119.0], [8.6, 1119.0], [8.7, 1119.0], [8.8, 1119.0], [8.9, 1119.0], [9.0, 1120.0], [9.1, 1120.0], [9.2, 1120.0], [9.3, 1120.0], [9.4, 1120.0], [9.5, 1120.0], [9.6, 1120.0], [9.7, 1120.0], [9.8, 1120.0], [9.9, 1120.0], [10.0, 1120.0], [10.1, 1120.0], [10.2, 1120.0], [10.3, 1120.0], [10.4, 1120.0], [10.5, 1120.0], [10.6, 1120.0], [10.7, 1121.0], [10.8, 1121.0], [10.9, 1121.0], [11.0, 1121.0], [11.1, 1121.0], [11.2, 1121.0], [11.3, 1121.0], [11.4, 1121.0], [11.5, 1121.0], [11.6, 1121.0], [11.7, 1121.0], [11.8, 1121.0], [11.9, 1121.0], [12.0, 1121.0], [12.1, 1121.0], [12.2, 1121.0], [12.3, 1121.0], [12.4, 1121.0], [12.5, 1122.0], [12.6, 1122.0], [12.7, 1122.0], [12.8, 1122.0], [12.9, 1122.0], [13.0, 1122.0], [13.1, 1122.0], [13.2, 1122.0], [13.3, 1122.0], [13.4, 1122.0], [13.5, 1122.0], [13.6, 1122.0], [13.7, 1122.0], [13.8, 1122.0], [13.9, 1122.0], [14.0, 1122.0], [14.1, 1122.0], [14.2, 1123.0], [14.3, 1123.0], [14.4, 1123.0], [14.5, 1123.0], [14.6, 1123.0], [14.7, 1123.0], [14.8, 1123.0], [14.9, 1123.0], [15.0, 1123.0], [15.1, 1123.0], [15.2, 1123.0], [15.3, 1123.0], [15.4, 1123.0], [15.5, 1123.0], [15.6, 1123.0], [15.7, 1123.0], [15.8, 1123.0], [15.9, 1123.0], [16.0, 1123.0], [16.1, 1124.0], [16.2, 1124.0], [16.3, 1124.0], [16.4, 1124.0], [16.5, 1124.0], [16.6, 1124.0], [16.7, 1124.0], [16.8, 1124.0], [16.9, 1124.0], [17.0, 1124.0], [17.1, 1124.0], [17.2, 1124.0], [17.3, 1124.0], [17.4, 1124.0], [17.5, 1124.0], [17.6, 1124.0], [17.7, 1124.0], [17.8, 1124.0], [17.9, 1124.0], [18.0, 1125.0], [18.1, 1125.0], [18.2, 1125.0], [18.3, 1125.0], [18.4, 1125.0], [18.5, 1125.0], [18.6, 1125.0], [18.7, 1125.0], [18.8, 1125.0], [18.9, 1125.0], [19.0, 1125.0], [19.1, 1125.0], [19.2, 1125.0], [19.3, 1125.0], [19.4, 1125.0], [19.5, 1126.0], [19.6, 1126.0], [19.7, 1126.0], [19.8, 1126.0], [19.9, 1126.0], [20.0, 1126.0], [20.1, 1126.0], [20.2, 1126.0], [20.3, 1126.0], [20.4, 1126.0], [20.5, 1126.0], [20.6, 1126.0], [20.7, 1126.0], [20.8, 1126.0], [20.9, 1126.0], [21.0, 1126.0], [21.1, 1127.0], [21.2, 1127.0], [21.3, 1127.0], [21.4, 1127.0], [21.5, 1127.0], [21.6, 1127.0], [21.7, 1127.0], [21.8, 1127.0], [21.9, 1127.0], [22.0, 1127.0], [22.1, 1127.0], [22.2, 1127.0], [22.3, 1127.0], [22.4, 1127.0], [22.5, 1128.0], [22.6, 1128.0], [22.7, 1128.0], [22.8, 1128.0], [22.9, 1128.0], [23.0, 1128.0], [23.1, 1128.0], [23.2, 1128.0], [23.3, 1128.0], [23.4, 1128.0], [23.5, 1128.0], [23.6, 1128.0], [23.7, 1128.0], [23.8, 1129.0], [23.9, 1129.0], [24.0, 1129.0], [24.1, 1129.0], [24.2, 1129.0], [24.3, 1129.0], [24.4, 1129.0], [24.5, 1129.0], [24.6, 1129.0], [24.7, 1129.0], [24.8, 1129.0], [24.9, 1129.0], [25.0, 1130.0], [25.1, 1130.0], [25.2, 1130.0], [25.3, 1130.0], [25.4, 1130.0], [25.5, 1130.0], [25.6, 1130.0], [25.7, 1130.0], [25.8, 1130.0], [25.9, 1130.0], [26.0, 1130.0], [26.1, 1130.0], [26.2, 1131.0], [26.3, 1131.0], [26.4, 1131.0], [26.5, 1131.0], [26.6, 1131.0], [26.7, 1131.0], [26.8, 1131.0], [26.9, 1131.0], [27.0, 1131.0], [27.1, 1131.0], [27.2, 1131.0], [27.3, 1131.0], [27.4, 1132.0], [27.5, 1132.0], [27.6, 1132.0], [27.7, 1132.0], [27.8, 1132.0], [27.9, 1132.0], [28.0, 1132.0], [28.1, 1132.0], [28.2, 1132.0], [28.3, 1132.0], [28.4, 1133.0], [28.5, 1133.0], [28.6, 1133.0], [28.7, 1133.0], [28.8, 1133.0], [28.9, 1133.0], [29.0, 1133.0], [29.1, 1133.0], [29.2, 1133.0], [29.3, 1133.0], [29.4, 1134.0], [29.5, 1134.0], [29.6, 1134.0], [29.7, 1134.0], [29.8, 1134.0], [29.9, 1134.0], [30.0, 1134.0], [30.1, 1134.0], [30.2, 1134.0], [30.3, 1135.0], [30.4, 1135.0], [30.5, 1135.0], [30.6, 1135.0], [30.7, 1135.0], [30.8, 1135.0], [30.9, 1135.0], [31.0, 1136.0], [31.1, 1136.0], [31.2, 1136.0], [31.3, 1136.0], [31.4, 1136.0], [31.5, 1136.0], [31.6, 1137.0], [31.7, 1137.0], [31.8, 1137.0], [31.9, 1137.0], [32.0, 1137.0], [32.1, 1137.0], [32.2, 1138.0], [32.3, 1138.0], [32.4, 1138.0], [32.5, 1138.0], [32.6, 1138.0], [32.7, 1138.0], [32.8, 1139.0], [32.9, 1139.0], [33.0, 1139.0], [33.1, 1139.0], [33.2, 1139.0], [33.3, 1139.0], [33.4, 1140.0], [33.5, 1140.0], [33.6, 1140.0], [33.7, 1140.0], [33.8, 1140.0], [33.9, 1140.0], [34.0, 1140.0], [34.1, 1141.0], [34.2, 1141.0], [34.3, 1141.0], [34.4, 1141.0], [34.5, 1141.0], [34.6, 1142.0], [34.7, 1142.0], [34.8, 1142.0], [34.9, 1142.0], [35.0, 1143.0], [35.1, 1143.0], [35.2, 1143.0], [35.3, 1144.0], [35.4, 1144.0], [35.5, 1144.0], [35.6, 1144.0], [35.7, 1145.0], [35.8, 1145.0], [35.9, 1145.0], [36.0, 1145.0], [36.1, 1146.0], [36.2, 1146.0], [36.3, 1146.0], [36.4, 1147.0], [36.5, 1147.0], [36.6, 1147.0], [36.7, 1148.0], [36.8, 1148.0], [36.9, 1149.0], [37.0, 1149.0], [37.1, 1150.0], [37.2, 1150.0], [37.3, 1151.0], [37.4, 1151.0], [37.5, 1152.0], [37.6, 1153.0], [37.7, 1154.0], [37.8, 1154.0], [37.9, 1155.0], [38.0, 1156.0], [38.1, 1156.0], [38.2, 1157.0], [38.3, 1158.0], [38.4, 1158.0], [38.5, 1159.0], [38.6, 1160.0], [38.7, 1161.0], [38.8, 1162.0], [38.9, 1163.0], [39.0, 1164.0], [39.1, 1165.0], [39.2, 1166.0], [39.3, 1167.0], [39.4, 1168.0], [39.5, 1169.0], [39.6, 1170.0], [39.7, 1171.0], [39.8, 1172.0], [39.9, 1174.0], [40.0, 1176.0], [40.1, 1177.0], [40.2, 1179.0], [40.3, 1181.0], [40.4, 1182.0], [40.5, 1184.0], [40.6, 1186.0], [40.7, 1187.0], [40.8, 1189.0], [40.9, 1190.0], [41.0, 1192.0], [41.1, 1193.0], [41.2, 1194.0], [41.3, 1196.0], [41.4, 1197.0], [41.5, 1198.0], [41.6, 1199.0], [41.7, 1200.0], [41.8, 1201.0], [41.9, 1202.0], [42.0, 1203.0], [42.1, 1204.0], [42.2, 1205.0], [42.3, 1205.0], [42.4, 1206.0], [42.5, 1207.0], [42.6, 1207.0], [42.7, 1208.0], [42.8, 1208.0], [42.9, 1209.0], [43.0, 1210.0], [43.1, 1210.0], [43.2, 1211.0], [43.3, 1211.0], [43.4, 1212.0], [43.5, 1212.0], [43.6, 1213.0], [43.7, 1214.0], [43.8, 1214.0], [43.9, 1215.0], [44.0, 1215.0], [44.1, 1216.0], [44.2, 1216.0], [44.3, 1217.0], [44.4, 1218.0], [44.5, 1218.0], [44.6, 1218.0], [44.7, 1219.0], [44.8, 1219.0], [44.9, 1220.0], [45.0, 1220.0], [45.1, 1221.0], [45.2, 1221.0], [45.3, 1221.0], [45.4, 1222.0], [45.5, 1222.0], [45.6, 1223.0], [45.7, 1223.0], [45.8, 1224.0], [45.9, 1224.0], [46.0, 1224.0], [46.1, 1225.0], [46.2, 1225.0], [46.3, 1225.0], [46.4, 1226.0], [46.5, 1226.0], [46.6, 1227.0], [46.7, 1227.0], [46.8, 1228.0], [46.9, 1228.0], [47.0, 1229.0], [47.1, 1229.0], [47.2, 1230.0], [47.3, 1230.0], [47.4, 1231.0], [47.5, 1231.0], [47.6, 1231.0], [47.7, 1232.0], [47.8, 1232.0], [47.9, 1233.0], [48.0, 1233.0], [48.1, 1233.0], [48.2, 1234.0], [48.3, 1234.0], [48.4, 1235.0], [48.5, 1236.0], [48.6, 1236.0], [48.7, 1236.0], [48.8, 1237.0], [48.9, 1237.0], [49.0, 1238.0], [49.1, 1238.0], [49.2, 1238.0], [49.3, 1239.0], [49.4, 1239.0], [49.5, 1239.0], [49.6, 1240.0], [49.7, 1240.0], [49.8, 1240.0], [49.9, 1241.0], [50.0, 1241.0], [50.1, 1241.0], [50.2, 1241.0], [50.3, 1242.0], [50.4, 1242.0], [50.5, 1242.0], [50.6, 1243.0], [50.7, 1243.0], [50.8, 1243.0], [50.9, 1243.0], [51.0, 1244.0], [51.1, 1244.0], [51.2, 1244.0], [51.3, 1244.0], [51.4, 1245.0], [51.5, 1245.0], [51.6, 1245.0], [51.7, 1245.0], [51.8, 1246.0], [51.9, 1246.0], [52.0, 1246.0], [52.1, 1246.0], [52.2, 1247.0], [52.3, 1247.0], [52.4, 1247.0], [52.5, 1247.0], [52.6, 1248.0], [52.7, 1248.0], [52.8, 1248.0], [52.9, 1248.0], [53.0, 1249.0], [53.1, 1249.0], [53.2, 1249.0], [53.3, 1249.0], [53.4, 1250.0], [53.5, 1250.0], [53.6, 1250.0], [53.7, 1250.0], [53.8, 1250.0], [53.9, 1251.0], [54.0, 1251.0], [54.1, 1251.0], [54.2, 1251.0], [54.3, 1251.0], [54.4, 1251.0], [54.5, 1252.0], [54.6, 1252.0], [54.7, 1252.0], [54.8, 1252.0], [54.9, 1252.0], [55.0, 1253.0], [55.1, 1253.0], [55.2, 1253.0], [55.3, 1253.0], [55.4, 1253.0], [55.5, 1254.0], [55.6, 1254.0], [55.7, 1254.0], [55.8, 1254.0], [55.9, 1254.0], [56.0, 1254.0], [56.1, 1255.0], [56.2, 1255.0], [56.3, 1255.0], [56.4, 1255.0], [56.5, 1256.0], [56.6, 1256.0], [56.7, 1256.0], [56.8, 1256.0], [56.9, 1256.0], [57.0, 1256.0], [57.1, 1256.0], [57.2, 1257.0], [57.3, 1257.0], [57.4, 1257.0], [57.5, 1257.0], [57.6, 1257.0], [57.7, 1258.0], [57.8, 1258.0], [57.9, 1258.0], [58.0, 1258.0], [58.1, 1258.0], [58.2, 1258.0], [58.3, 1258.0], [58.4, 1259.0], [58.5, 1259.0], [58.6, 1259.0], [58.7, 1259.0], [58.8, 1259.0], [58.9, 1259.0], [59.0, 1259.0], [59.1, 1260.0], [59.2, 1260.0], [59.3, 1260.0], [59.4, 1260.0], [59.5, 1260.0], [59.6, 1260.0], [59.7, 1260.0], [59.8, 1261.0], [59.9, 1261.0], [60.0, 1261.0], [60.1, 1261.0], [60.2, 1261.0], [60.3, 1261.0], [60.4, 1262.0], [60.5, 1262.0], [60.6, 1262.0], [60.7, 1262.0], [60.8, 1262.0], [60.9, 1262.0], [61.0, 1262.0], [61.1, 1263.0], [61.2, 1263.0], [61.3, 1263.0], [61.4, 1263.0], [61.5, 1263.0], [61.6, 1263.0], [61.7, 1263.0], [61.8, 1264.0], [61.9, 1264.0], [62.0, 1264.0], [62.1, 1264.0], [62.2, 1264.0], [62.3, 1264.0], [62.4, 1265.0], [62.5, 1265.0], [62.6, 1265.0], [62.7, 1265.0], [62.8, 1265.0], [62.9, 1265.0], [63.0, 1265.0], [63.1, 1266.0], [63.2, 1266.0], [63.3, 1266.0], [63.4, 1266.0], [63.5, 1266.0], [63.6, 1266.0], [63.7, 1267.0], [63.8, 1267.0], [63.9, 1267.0], [64.0, 1267.0], [64.1, 1267.0], [64.2, 1268.0], [64.3, 1268.0], [64.4, 1268.0], [64.5, 1268.0], [64.6, 1268.0], [64.7, 1268.0], [64.8, 1269.0], [64.9, 1269.0], [65.0, 1269.0], [65.1, 1269.0], [65.2, 1269.0], [65.3, 1270.0], [65.4, 1270.0], [65.5, 1270.0], [65.6, 1270.0], [65.7, 1270.0], [65.8, 1270.0], [65.9, 1271.0], [66.0, 1271.0], [66.1, 1271.0], [66.2, 1271.0], [66.3, 1271.0], [66.4, 1271.0], [66.5, 1272.0], [66.6, 1272.0], [66.7, 1272.0], [66.8, 1272.0], [66.9, 1272.0], [67.0, 1273.0], [67.1, 1273.0], [67.2, 1273.0], [67.3, 1273.0], [67.4, 1273.0], [67.5, 1273.0], [67.6, 1274.0], [67.7, 1274.0], [67.8, 1274.0], [67.9, 1274.0], [68.0, 1274.0], [68.1, 1274.0], [68.2, 1275.0], [68.3, 1275.0], [68.4, 1275.0], [68.5, 1275.0], [68.6, 1275.0], [68.7, 1276.0], [68.8, 1276.0], [68.9, 1276.0], [69.0, 1276.0], [69.1, 1276.0], [69.2, 1276.0], [69.3, 1277.0], [69.4, 1277.0], [69.5, 1277.0], [69.6, 1277.0], [69.7, 1277.0], [69.8, 1278.0], [69.9, 1278.0], [70.0, 1278.0], [70.1, 1278.0], [70.2, 1279.0], [70.3, 1279.0], [70.4, 1279.0], [70.5, 1279.0], [70.6, 1280.0], [70.7, 1280.0], [70.8, 1280.0], [70.9, 1280.0], [71.0, 1281.0], [71.1, 1281.0], [71.2, 1281.0], [71.3, 1281.0], [71.4, 1281.0], [71.5, 1282.0], [71.6, 1282.0], [71.7, 1282.0], [71.8, 1282.0], [71.9, 1283.0], [72.0, 1283.0], [72.1, 1283.0], [72.2, 1283.0], [72.3, 1284.0], [72.4, 1284.0], [72.5, 1284.0], [72.6, 1284.0], [72.7, 1284.0], [72.8, 1285.0], [72.9, 1285.0], [73.0, 1285.0], [73.1, 1285.0], [73.2, 1286.0], [73.3, 1286.0], [73.4, 1286.0], [73.5, 1286.0], [73.6, 1287.0], [73.7, 1287.0], [73.8, 1287.0], [73.9, 1287.0], [74.0, 1288.0], [74.1, 1288.0], [74.2, 1288.0], [74.3, 1288.0], [74.4, 1289.0], [74.5, 1289.0], [74.6, 1289.0], [74.7, 1290.0], [74.8, 1290.0], [74.9, 1290.0], [75.0, 1290.0], [75.1, 1291.0], [75.2, 1291.0], [75.3, 1291.0], [75.4, 1292.0], [75.5, 1292.0], [75.6, 1293.0], [75.7, 1293.0], [75.8, 1294.0], [75.9, 1294.0], [76.0, 1294.0], [76.1, 1295.0], [76.2, 1295.0], [76.3, 1295.0], [76.4, 1296.0], [76.5, 1296.0], [76.6, 1296.0], [76.7, 1297.0], [76.8, 1297.0], [76.9, 1298.0], [77.0, 1298.0], [77.1, 1299.0], [77.2, 1299.0], [77.3, 1300.0], [77.4, 1300.0], [77.5, 1301.0], [77.6, 1301.0], [77.7, 1302.0], [77.8, 1303.0], [77.9, 1303.0], [78.0, 1304.0], [78.1, 1304.0], [78.2, 1305.0], [78.3, 1305.0], [78.4, 1306.0], [78.5, 1306.0], [78.6, 1307.0], [78.7, 1307.0], [78.8, 1308.0], [78.9, 1308.0], [79.0, 1308.0], [79.1, 1309.0], [79.2, 1309.0], [79.3, 1310.0], [79.4, 1310.0], [79.5, 1310.0], [79.6, 1311.0], [79.7, 1311.0], [79.8, 1311.0], [79.9, 1312.0], [80.0, 1312.0], [80.1, 1313.0], [80.2, 1313.0], [80.3, 1314.0], [80.4, 1314.0], [80.5, 1315.0], [80.6, 1315.0], [80.7, 1316.0], [80.8, 1317.0], [80.9, 1317.0], [81.0, 1318.0], [81.1, 1318.0], [81.2, 1319.0], [81.3, 1320.0], [81.4, 1321.0], [81.5, 1321.0], [81.6, 1322.0], [81.7, 1323.0], [81.8, 1324.0], [81.9, 1324.0], [82.0, 1325.0], [82.1, 1326.0], [82.2, 1327.0], [82.3, 1327.0], [82.4, 1328.0], [82.5, 1330.0], [82.6, 1331.0], [82.7, 1332.0], [82.8, 1333.0], [82.9, 1334.0], [83.0, 1336.0], [83.1, 1337.0], [83.2, 1339.0], [83.3, 1341.0], [83.4, 1343.0], [83.5, 1345.0], [83.6, 1346.0], [83.7, 1347.0], [83.8, 1349.0], [83.9, 1350.0], [84.0, 1353.0], [84.1, 1354.0], [84.2, 1356.0], [84.3, 1358.0], [84.4, 1361.0], [84.5, 1363.0], [84.6, 1367.0], [84.7, 1370.0], [84.8, 1374.0], [84.9, 1377.0], [85.0, 1382.0], [85.1, 1384.0], [85.2, 1387.0], [85.3, 1390.0], [85.4, 1393.0], [85.5, 1397.0], [85.6, 1400.0], [85.7, 1403.0], [85.8, 1405.0], [85.9, 1408.0], [86.0, 1411.0], [86.1, 1413.0], [86.2, 1416.0], [86.3, 1418.0], [86.4, 1421.0], [86.5, 1423.0], [86.6, 1425.0], [86.7, 1427.0], [86.8, 1429.0], [86.9, 1430.0], [87.0, 1433.0], [87.1, 1434.0], [87.2, 1436.0], [87.3, 1438.0], [87.4, 1440.0], [87.5, 1442.0], [87.6, 1444.0], [87.7, 1446.0], [87.8, 1448.0], [87.9, 1449.0], [88.0, 1451.0], [88.1, 1453.0], [88.2, 1455.0], [88.3, 1456.0], [88.4, 1458.0], [88.5, 1459.0], [88.6, 1460.0], [88.7, 1462.0], [88.8, 1463.0], [88.9, 1464.0], [89.0, 1465.0], [89.1, 1466.0], [89.2, 1467.0], [89.3, 1468.0], [89.4, 1470.0], [89.5, 1471.0], [89.6, 1473.0], [89.7, 1474.0], [89.8, 1476.0], [89.9, 1477.0], [90.0, 1478.0], [90.1, 1479.0], [90.2, 1480.0], [90.3, 1481.0], [90.4, 1483.0], [90.5, 1484.0], [90.6, 1485.0], [90.7, 1487.0], [90.8, 1488.0], [90.9, 1489.0], [91.0, 1491.0], [91.1, 1492.0], [91.2, 1493.0], [91.3, 1495.0], [91.4, 1496.0], [91.5, 1498.0], [91.6, 1498.0], [91.7, 1499.0], [91.8, 1501.0], [91.9, 1502.0], [92.0, 1504.0], [92.1, 1506.0], [92.2, 1507.0], [92.3, 1509.0], [92.4, 1511.0], [92.5, 1513.0], [92.6, 1515.0], [92.7, 1517.0], [92.8, 1519.0], [92.9, 1522.0], [93.0, 1523.0], [93.1, 1525.0], [93.2, 1527.0], [93.3, 1528.0], [93.4, 1530.0], [93.5, 1532.0], [93.6, 1534.0], [93.7, 1536.0], [93.8, 1539.0], [93.9, 1542.0], [94.0, 1546.0], [94.1, 1550.0], [94.2, 1554.0], [94.3, 1557.0], [94.4, 1563.0], [94.5, 1569.0], [94.6, 1581.0], [94.7, 1589.0], [94.8, 1598.0], [94.9, 1609.0], [95.0, 1622.0], [95.1, 1641.0], [95.2, 1666.0], [95.3, 1694.0], [95.4, 1722.0], [95.5, 1742.0], [95.6, 1753.0], [95.7, 1766.0], [95.8, 1780.0], [95.9, 1798.0], [96.0, 1827.0], [96.1, 1847.0], [96.2, 1873.0], [96.3, 1903.0], [96.4, 1923.0], [96.5, 1953.0], [96.6, 1999.0], [96.7, 2042.0], [96.8, 2091.0], [96.9, 2123.0], [97.0, 2170.0], [97.1, 2198.0], [97.2, 2234.0], [97.3, 2286.0], [97.4, 2415.0], [97.5, 2459.0], [97.6, 2593.0], [97.7, 2784.0], [97.8, 2944.0], [97.9, 3049.0], [98.0, 3579.0], [98.1, 5009.0], [98.2, 5045.0], [98.3, 5074.0], [98.4, 5105.0], [98.5, 5140.0], [98.6, 5182.0], [98.7, 5228.0], [98.8, 5263.0], [98.9, 5310.0], [99.0, 5394.0], [99.1, 5471.0], [99.2, 5615.0], [99.3, 5830.0], [99.4, 5976.0], [99.5, 6228.0], [99.6, 7564.0], [99.7, 7732.0], [99.8, 7926.0], [99.9, 8040.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 1100.0, "maxY": 8367.0, "series": [{"data": [[1100.0, 8367.0], [1200.0, 7163.0], [1300.0, 1675.0], [1400.0, 1227.0], [1500.0, 628.0], [1600.0, 99.0], [1700.0, 118.0], [1800.0, 79.0], [1900.0, 61.0], [2000.0, 44.0], [2100.0, 59.0], [2200.0, 40.0], [2300.0, 13.0], [2400.0, 29.0], [2500.0, 17.0], [2600.0, 5.0], [2800.0, 11.0], [2700.0, 19.0], [2900.0, 17.0], [3000.0, 11.0], [3100.0, 6.0], [3200.0, 6.0], [3300.0, 4.0], [3500.0, 1.0], [4800.0, 3.0], [5100.0, 49.0], [5000.0, 65.0], [4900.0, 11.0], [5300.0, 29.0], [5200.0, 48.0], [5400.0, 20.0], [5600.0, 10.0], [5500.0, 13.0], [5700.0, 9.0], [5800.0, 11.0], [6100.0, 9.0], [5900.0, 16.0], [6000.0, 6.0], [6200.0, 5.0], [6400.0, 2.0], [7100.0, 1.0], [7400.0, 6.0], [7200.0, 1.0], [7300.0, 3.0], [7500.0, 8.0], [7600.0, 11.0], [7700.0, 15.0], [7800.0, 7.0], [7900.0, 15.0], [8000.0, 13.0], [8100.0, 6.0], [8200.0, 6.0], [8300.0, 1.0], [8400.0, 1.0], [9200.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 9200.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 1652.0, "minX": 1.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 18448.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 18448.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 1652.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 170.63905325443775, "minX": 1.68422118E12, "maxY": 3000.0, "series": [{"data": [[1.68422142E12, 2133.8614103819777], [1.68422124E12, 3000.0], [1.68422136E12, 3000.0], [1.68422118E12, 3000.0], [1.68422148E12, 170.63905325443775], [1.6842213E12, 3000.0]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68422148E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 1109.0, "minX": 1.0, "maxY": 8416.0, "series": [{"data": [[2.0, 1504.0], [3.0, 1449.0], [4.0, 1326.0], [5.0, 1303.0], [7.0, 1300.5], [9.0, 1290.0], [10.0, 1287.0], [11.0, 1284.0], [12.0, 1279.0], [13.0, 1275.0], [14.0, 1270.0], [15.0, 1272.0], [16.0, 1267.0], [17.0, 1265.0], [18.0, 1265.0], [19.0, 1265.0], [20.0, 1261.0], [24.0, 1259.0], [25.0, 1259.5], [26.0, 1259.5], [27.0, 1258.0], [30.0, 1259.6666666666667], [32.0, 1256.0], [35.0, 1256.0], [37.0, 1258.0], [39.0, 1255.0], [38.0, 1257.0], [40.0, 1257.0], [42.0, 1254.5], [45.0, 1252.0], [47.0, 1252.0], [46.0, 1253.0], [51.0, 1251.25], [53.0, 1253.0], [55.0, 1250.0], [54.0, 1253.0], [56.0, 1251.0], [59.0, 1250.6666666666667], [60.0, 1251.0], [63.0, 1250.0], [62.0, 1250.0], [67.0, 1243.0], [66.0, 1244.5], [64.0, 1248.0], [71.0, 1277.0], [70.0, 1293.0], [69.0, 1303.0], [68.0, 1244.0], [73.0, 1274.0], [72.0, 1275.0], [79.0, 1270.0], [76.0, 1273.0], [83.0, 1268.75], [81.0, 1269.3333333333333], [80.0, 1270.0], [84.0, 1266.0], [91.0, 1264.0], [90.0, 1265.0], [88.0, 1267.0], [95.0, 1263.6666666666667], [94.0, 1262.0], [99.0, 1259.6666666666667], [98.0, 1260.0], [102.0, 1257.0], [101.0, 1258.0], [100.0, 1258.0], [107.0, 1253.6666666666667], [106.0, 1255.5], [110.0, 1250.0], [108.0, 1252.0], [115.0, 1248.0], [112.0, 1250.3333333333333], [119.0, 1247.6666666666667], [118.0, 1247.0], [123.0, 1243.0], [122.0, 1244.5], [121.0, 1246.0], [120.0, 1246.0], [127.0, 1225.0], [126.0, 1236.0], [125.0, 1239.0], [135.0, 1198.0], [134.0, 1197.0], [133.0, 1202.0], [131.0, 1207.0], [130.0, 1208.0], [129.0, 1213.0], [128.0, 1220.0], [142.0, 1296.0], [141.0, 1290.0], [140.0, 1304.0], [139.0, 1309.0], [138.0, 1310.0], [137.0, 1321.0], [136.0, 1333.0], [151.0, 1288.0], [150.0, 1290.0], [148.0, 1291.0], [147.0, 1295.0], [146.0, 1292.0], [145.0, 1295.0], [144.0, 1297.5], [159.0, 1284.0], [157.0, 1286.0], [156.0, 1287.25], [152.0, 1290.0], [167.0, 1284.0], [166.0, 1281.0], [165.0, 1281.0], [164.0, 1281.3333333333333], [163.0, 1285.0], [160.0, 1284.0], [172.0, 1279.0], [170.0, 1279.5], [168.0, 1279.0], [183.0, 1262.0], [182.0, 1273.0], [180.0, 1276.0], [178.0, 1267.0], [177.0, 1275.6666666666667], [176.0, 1278.0], [191.0, 1267.0], [190.0, 1268.5], [189.0, 1267.0], [187.0, 1272.0], [186.0, 1270.0], [185.0, 1271.5], [199.0, 1258.5], [197.0, 1262.0], [195.0, 1262.0], [194.0, 1263.0], [193.0, 1265.0], [192.0, 1266.0], [206.0, 1285.0], [205.0, 1292.0], [204.0, 1296.0], [203.0, 1305.0], [202.0, 1212.0], [201.0, 1218.0], [200.0, 1260.0], [215.0, 1276.0], [214.0, 1278.0], [213.0, 1278.0], [212.0, 1279.0], [210.0, 1280.0], [209.0, 1280.0], [208.0, 1282.0], [223.0, 1275.0], [221.0, 1272.5], [219.0, 1276.0], [231.0, 1269.5], [229.0, 1268.6666666666667], [226.0, 1270.0], [224.0, 1271.3333333333333], [238.0, 1265.0], [236.0, 1265.0], [235.0, 1265.0], [233.0, 1266.0], [232.0, 1267.0], [247.0, 1262.5], [246.0, 1262.0], [244.0, 1263.0], [243.0, 1263.0], [242.0, 1265.5], [255.0, 1253.4], [253.0, 1257.0], [251.0, 1255.0], [270.0, 7695.0], [271.0, 1585.0], [269.0, 1245.0], [268.0, 1245.0], [267.0, 1246.5], [266.0, 1248.0], [265.0, 1248.0], [263.0, 1250.0], [259.0, 1251.0], [258.0, 1253.0], [257.0, 1253.0], [262.0, 1251.0], [286.0, 1264.5], [287.0, 1263.0], [284.0, 1269.5], [275.0, 1286.5], [273.0, 7599.0], [272.0, 1353.0], [282.0, 1277.0], [281.0, 1259.0], [280.0, 1279.0], [279.0, 1261.0], [278.0, 1266.0], [277.0, 1283.0], [276.0, 1289.0], [301.0, 1259.0], [300.0, 1260.0], [290.0, 1249.0], [289.0, 1251.0], [299.0, 1262.0], [298.0, 1261.0], [297.0, 1266.0], [295.0, 1265.0], [294.0, 1265.0], [293.0, 1266.0], [292.0, 1266.0], [306.0, 1243.0], [317.0, 1241.0], [318.0, 1256.0], [316.0, 1257.0], [315.0, 1255.0], [312.0, 1256.3333333333333], [310.0, 1256.0], [308.0, 1260.5], [305.0, 1258.0], [304.0, 1247.0], [334.0, 1239.0], [335.0, 1244.0], [332.0, 1246.0], [323.0, 1253.0], [322.0, 1255.5], [320.0, 1248.3333333333333], [331.0, 1252.0], [330.0, 1249.0], [329.0, 1249.0], [328.0, 1249.0], [327.0, 1250.0], [326.0, 1235.0], [325.0, 1251.0], [324.0, 1232.0], [339.0, 1298.0], [351.0, 1281.5], [348.0, 1282.3333333333333], [345.0, 1284.5], [343.0, 1287.0], [342.0, 1288.0], [341.0, 1289.0], [340.0, 1292.0], [338.0, 1241.0], [337.0, 1223.0], [336.0, 1243.0], [366.0, 1272.6666666666667], [364.0, 1274.3333333333333], [362.0, 1276.3333333333333], [358.0, 1277.3333333333333], [356.0, 1278.0], [355.0, 1278.0], [352.0, 1282.0], [381.0, 1265.8], [376.0, 1268.0], [375.0, 1268.5], [374.0, 1269.0], [373.0, 1271.0], [372.0, 1271.0], [369.0, 1271.0], [398.0, 1254.5], [396.0, 1256.0], [395.0, 1257.0], [393.0, 1260.0], [392.0, 1260.0], [391.0, 1262.0], [388.0, 1262.75], [385.0, 1265.0], [384.0, 1266.0], [413.0, 1236.0], [415.0, 1241.5], [412.0, 1238.5], [403.0, 1221.0], [402.0, 1228.0], [401.0, 1250.0], [400.0, 1253.0], [410.0, 1240.0], [409.0, 1242.0], [408.0, 1245.0], [407.0, 1264.0], [406.0, 1303.0], [405.0, 1826.0], [404.0, 1212.0], [431.0, 1249.5], [428.0, 1241.0], [425.0, 1240.5], [423.0, 1237.3333333333333], [422.0, 1255.0], [419.0, 1259.0], [418.0, 1251.3333333333333], [445.0, 1241.0], [447.0, 1240.0], [444.0, 1237.0], [443.0, 1244.5], [440.0, 1235.0], [438.0, 1221.5], [437.0, 1235.0], [434.0, 1236.0], [433.0, 1225.0], [462.0, 1227.0], [463.0, 1228.0], [461.0, 1216.5], [449.0, 1213.0], [448.0, 1243.5], [459.0, 1231.0], [458.0, 1232.0], [457.0, 1229.0], [456.0, 1229.0], [455.0, 1231.0], [454.0, 1210.0], [453.0, 1235.0], [452.0, 1237.3333333333333], [477.0, 1264.0], [476.0, 1270.0], [467.0, 1219.75], [475.0, 1271.0], [474.0, 1270.0], [473.0, 1289.0], [472.0, 1320.0], [471.0, 1214.0], [470.0, 1222.0], [469.0, 1219.0], [468.0, 1225.0], [489.0, 1256.0], [482.0, 1258.0], [481.0, 1265.0], [480.0, 1262.0], [509.0, 1250.0], [508.0, 1251.1666666666667], [507.0, 1258.0], [506.0, 1253.0], [505.0, 1253.0], [501.0, 1256.5], [499.0, 1253.0], [498.0, 1255.6], [536.0, 1232.6666666666667], [542.0, 1292.0], [540.0, 1270.0], [538.0, 1871.0], [528.0, 1239.0], [526.0, 1239.0], [522.0, 1240.0], [520.0, 1241.0], [514.0, 1243.5], [512.0, 1243.0], [572.0, 1271.0], [574.0, 1239.0], [570.0, 1242.0], [546.0, 1277.0], [544.0, 1258.0], [566.0, 1244.0], [564.0, 1246.0], [562.0, 1273.0], [558.0, 1246.0], [554.0, 1248.0], [552.0, 1258.0], [604.0, 1224.0], [606.0, 1613.0], [602.0, 1237.3333333333333], [582.0, 1236.0], [578.0, 1257.6666666666667], [590.0, 1248.0], [588.0, 1248.25], [584.0, 1233.0], [598.0, 1254.0], [596.0, 1230.0], [612.0, 1269.0], [634.0, 1260.0], [632.0, 1258.0], [614.0, 1271.0], [608.0, 1285.0], [622.0, 1265.0], [618.0, 1267.0], [616.0, 1267.0], [630.0, 1260.0], [628.0, 1262.0], [624.0, 1264.5], [670.0, 1244.0], [658.0, 1252.0], [666.0, 1246.0], [664.0, 1253.3333333333333], [652.0, 1255.0], [650.0, 1256.0], [648.0, 1257.4], [660.0, 1253.0], [676.0, 5932.0], [700.0, 1260.0], [698.0, 1248.5], [694.0, 1264.0], [682.0, 1268.0], [672.0, 7936.0], [674.0, 5920.0], [678.0, 5134.0], [680.0, 5010.0], [732.0, 1244.0], [720.0, 1244.6666666666667], [730.0, 1237.0], [706.0, 1259.0], [704.0, 1250.25], [708.0, 1249.0], [714.0, 1253.0], [724.0, 1250.0], [722.0, 1243.0], [740.0, 1234.5], [764.0, 1282.0], [760.0, 1282.0], [742.0, 1232.0], [738.0, 1238.0], [750.0, 1290.0], [748.0, 1297.0], [744.0, 1223.0], [792.0, 1270.0], [798.0, 1267.0], [774.0, 1275.0], [772.0, 1279.0], [790.0, 1269.0], [786.0, 1272.0], [784.0, 1273.0], [782.0, 1273.0], [776.0, 1275.0], [806.0, 1260.6666666666667], [826.0, 1270.0], [818.0, 1274.0], [830.0, 1269.0], [816.0, 8075.0], [804.0, 1262.0], [802.0, 1262.6666666666667], [800.0, 1265.0], [814.0, 1196.0], [812.0, 1250.0], [810.0, 1259.5], [820.0, 1273.0], [856.0, 1259.0], [862.0, 1257.0], [838.0, 1265.0], [834.0, 1264.5], [832.0, 1266.0], [850.0, 1261.3333333333333], [844.0, 1261.6666666666667], [842.0, 1263.3333333333333], [892.0, 1279.0], [894.0, 1273.0], [880.0, 1243.0], [882.0, 1239.0], [884.0, 1746.0], [890.0, 1282.0], [888.0, 1289.0], [868.0, 1253.5], [878.0, 1248.0], [876.0, 1248.0], [874.0, 1250.0], [872.0, 1250.0], [886.0, 7777.0], [922.0, 1262.0], [912.0, 1263.0], [900.0, 1273.6666666666667], [902.0, 1269.5], [910.0, 1266.0], [956.0, 1865.0], [944.0, 1251.0], [946.0, 1247.5], [948.0, 1245.0], [958.0, 1814.0], [954.0, 2153.0], [952.0, 1203.0], [928.0, 1261.0], [934.0, 1257.5], [942.0, 1256.0], [938.0, 1258.0], [936.0, 1256.0], [950.0, 1217.0], [986.0, 1255.0], [990.0, 1258.0], [978.0, 1261.6666666666667], [976.0, 1263.0], [988.0, 1261.0], [984.0, 1256.0], [966.0, 1302.0], [964.0, 1464.0], [962.0, 1924.0], [960.0, 2100.0], [974.0, 1266.0], [972.0, 1264.0], [970.0, 1267.0], [968.0, 1274.0], [980.0, 1261.0], [1016.0, 1361.0], [1020.0, 1279.0], [1008.0, 1242.0], [1012.0, 1246.75], [1022.0, 1269.0], [1018.0, 1321.0], [992.0, 1258.0], [994.0, 1251.0], [996.0, 1257.0], [998.0, 1250.5], [1006.0, 1246.0], [1004.0, 1246.0], [1002.0, 1250.0], [1014.0, 1241.0], [1080.0, 1341.0], [1084.0, 1294.0], [1060.0, 1252.0], [1056.0, 1250.0], [1076.0, 1241.5], [1028.0, 1264.0], [1024.0, 1271.0], [1052.0, 1249.0], [1040.0, 1256.5], [1068.0, 1249.0], [1100.0, 1270.5], [1144.0, 1265.0], [1140.0, 1239.0], [1136.0, 1245.0], [1096.0, 1274.0], [1092.0, 1277.0], [1088.0, 1284.0], [1116.0, 1254.5], [1112.0, 1255.0], [1108.0, 1261.0], [1104.0, 1262.0], [1204.0, 1208.0], [1212.0, 1241.0], [1184.0, 1246.0], [1208.0, 1197.0], [1200.0, 1236.0], [1156.0, 1258.5], [1180.0, 1246.0], [1176.0, 1252.0], [1192.0, 1244.0], [1264.0, 1246.0], [1276.0, 1218.0], [1272.0, 1229.0], [1268.0, 1236.0], [1224.0, 1239.6666666666667], [1240.0, 1249.6666666666667], [1236.0, 1243.5], [1232.0, 1219.3333333333333], [1260.0, 1229.5], [1340.0, 1223.0], [1332.0, 1239.0], [1292.0, 1235.0], [1284.0, 1240.0], [1280.0, 1244.0], [1320.0, 1280.0], [1396.0, 1251.0], [1404.0, 7960.0], [1356.0, 1272.0], [1344.0, 1220.3333333333333], [1364.0, 1266.5], [1360.0, 1272.0], [1388.0, 1258.0], [1384.0, 1258.5], [1380.0, 1258.0], [1376.0, 1259.5], [1464.0, 1242.0], [1468.0, 1217.0], [1436.0, 1261.0], [1408.0, 1201.0], [1412.0, 7735.0], [1416.0, 1278.0], [1428.0, 1263.0], [1424.0, 1265.0], [1452.0, 1251.5], [1448.0, 1254.5], [1444.0, 1257.0], [1440.0, 1258.0], [1484.0, 5434.0], [1524.0, 1253.3333333333333], [1532.0, 1246.5], [1520.0, 1255.4285714285716], [1480.0, 5237.0], [1476.0, 1199.0], [1472.0, 1207.0], [1512.0, 1260.3333333333333], [1492.0, 1270.0], [1488.0, 5265.0], [1544.0, 1241.3333333333333], [1548.0, 1237.0], [1536.0, 1247.0], [1576.0, 1284.5], [1564.0, 1288.5], [1556.0, 1297.0], [1552.0, 1153.0], [1648.0, 1226.5], [1660.0, 1220.5], [1656.0, 1298.0], [1652.0, 1302.0], [1600.0, 1279.0], [1604.0, 1279.5], [1608.0, 1277.0], [1612.0, 1277.5], [1624.0, 5020.0], [1620.0, 5011.0], [1640.0, 1256.8], [1672.0, 1289.3333333333333], [1724.0, 1311.6666666666667], [1700.0, 1316.0], [1696.0, 1324.0], [1664.0, 1270.0], [1668.0, 1216.0], [1676.0, 1288.3333333333333], [1692.0, 1118.0], [1688.0, 1249.5], [1684.0, 1254.0], [1740.0, 1315.0], [1788.0, 1282.0], [1776.0, 1286.2], [1772.0, 1292.0], [1760.0, 1113.0], [1732.0, 1309.3333333333333], [1756.0, 1144.0], [1748.0, 1306.0], [1744.0, 1310.5], [1824.0, 1249.0], [1832.0, 1540.0], [1836.0, 1480.0], [1828.0, 5050.0], [1848.0, 1318.3333333333333], [1820.0, 1254.0], [1792.0, 1276.3333333333333], [1796.0, 1270.0], [1800.0, 1270.0], [1816.0, 1263.0], [1904.0, 1433.0], [1888.0, 1309.0], [1892.0, 1304.0], [1896.0, 1493.0], [1868.0, 1315.0], [1864.0, 1319.0], [1860.0, 1319.5], [1880.0, 1308.0], [1876.0, 1310.0], [1872.0, 1311.0], [1968.0, 1546.0], [1972.0, 1281.0], [1960.0, 1112.5], [1976.0, 1268.0], [1952.0, 1134.0], [1964.0, 1435.0], [1920.0, 1277.0], [1924.0, 1270.0], [1928.0, 1266.3333333333333], [1932.0, 1260.0], [1948.0, 1152.0], [1944.0, 1525.0], [2040.0, 1302.0], [2020.0, 1324.0], [2028.0, 1314.0], [2044.0, 1289.0], [2036.0, 1306.0], [1996.0, 1242.0], [1992.0, 1248.0], [2008.0, 1229.0], [2000.0, 1240.0], [2160.0, 1263.0], [2168.0, 1261.0], [2112.0, 1179.0], [2120.0, 1136.0], [2128.0, 1140.5], [2136.0, 1143.0], [2144.0, 1134.0], [2072.0, 1240.0], [2104.0, 1199.0], [2096.0, 1205.0], [2080.0, 1129.0], [2280.0, 1115.0], [2288.0, 1677.0], [2296.0, 1339.0], [2248.0, 1123.0], [2264.0, 1126.0], [2176.0, 1222.0], [2232.0, 1125.0], [2216.0, 1117.3333333333333], [2208.0, 1118.5], [2416.0, 1160.0], [2424.0, 1130.5], [2368.0, 1132.75], [2384.0, 1123.0], [2392.0, 1134.0], [2304.0, 1161.0], [2312.0, 1183.5], [2360.0, 1140.0], [2352.0, 1161.5], [2344.0, 1122.0], [2536.0, 1121.0], [2552.0, 1163.0], [2504.0, 1130.0], [2520.0, 1127.0], [2544.0, 1115.0], [2432.0, 1132.6666666666667], [2488.0, 1145.0], [2480.0, 1109.0], [2472.0, 1119.5], [2464.0, 1127.0], [2624.0, 1134.5], [2640.0, 1139.0], [2656.0, 1122.6666666666667], [2568.0, 1132.6666666666667], [2616.0, 1240.0], [2600.0, 1130.0], [2592.0, 1128.0], [2752.0, 1167.0], [2800.0, 1126.0], [2760.0, 1132.0], [2768.0, 1137.3333333333333], [2776.0, 1134.5], [2784.0, 1130.0], [2696.0, 1136.0], [2744.0, 1112.0], [2736.0, 1122.0], [2904.0, 1129.2], [2936.0, 1121.0], [2816.0, 1165.0], [2824.0, 1133.0], [2832.0, 1131.0], [2856.0, 1123.6666666666667], [2960.0, 1132.0], [3000.0, 1359.5469371054548], [2952.0, 1158.0], [2968.0, 1121.0], [2976.0, 1118.0], [2161.0, 1263.0], [2113.0, 1190.0], [2121.0, 1140.0], [2137.0, 1144.0], [2169.0, 1254.0], [2049.0, 1288.0], [2057.0, 1279.0], [2065.0, 1250.5], [2073.0, 1239.0], [2105.0, 1197.0], [2097.0, 1203.0], [2089.0, 1237.5], [2081.0, 1126.0], [2281.0, 1120.0], [2297.0, 1323.0], [2249.0, 1119.0], [2257.0, 1122.0], [2289.0, 1676.0], [2273.0, 1123.0], [2177.0, 1132.0], [2193.0, 1129.0], [2201.0, 1122.5], [2233.0, 1134.0], [2217.0, 1113.0], [2209.0, 1117.0], [2401.0, 1127.0], [2369.0, 1124.0], [2417.0, 1139.0], [2409.0, 1121.0], [2361.0, 1138.0], [2305.0, 1147.0], [2313.0, 1145.0], [2321.0, 1128.0], [2329.0, 1123.6666666666667], [2353.0, 1121.0], [2345.0, 1118.0], [2337.0, 1118.0], [2441.0, 1120.6666666666667], [2553.0, 1144.0], [2497.0, 1131.0], [2545.0, 1111.0], [2433.0, 1124.0], [2489.0, 1138.0], [2481.0, 1202.0], [2473.0, 1124.0], [2657.0, 1124.0], [2585.0, 1127.0], [2681.0, 1113.0], [2633.0, 1133.3333333333333], [2673.0, 1119.0], [2577.0, 1138.0], [2569.0, 1143.0], [2561.0, 1145.0], [2617.0, 1153.0], [2609.0, 1116.0], [2601.0, 1130.0], [2593.0, 1132.0], [2801.0, 1119.3333333333333], [2753.0, 1171.0], [2769.0, 1128.0], [2777.0, 1125.0], [2745.0, 1118.5], [2737.0, 1123.5], [2729.0, 1126.0], [2721.0, 1134.0], [2921.0, 1125.6666666666667], [2929.0, 1124.3333333333333], [2881.0, 1115.0], [2889.0, 1134.0], [2913.0, 1126.0], [2833.0, 1127.0], [2857.0, 1116.0], [2849.0, 1131.0], [2945.0, 1117.3333333333333], [2993.0, 1123.0], [2953.0, 1139.0], [2985.0, 1121.0], [2977.0, 1121.0], [1077.0, 1238.0], [1073.0, 1242.6666666666667], [1085.0, 1293.0], [1057.0, 1248.0], [1081.0, 1336.0], [1025.0, 1267.0], [1033.0, 1260.5], [1037.0, 1260.5], [1049.0, 1256.3333333333333], [1045.0, 1252.0], [1069.0, 1245.0], [1065.0, 1246.0], [1145.0, 1265.0], [1149.0, 1262.6666666666667], [1125.0, 1249.5], [1129.0, 1248.0], [1141.0, 1238.0], [1137.0, 1245.0], [1101.0, 1265.0], [1097.0, 1273.0], [1117.0, 1253.0], [1113.0, 1258.0], [1105.0, 1261.0], [1133.0, 1248.5], [1205.0, 1205.0], [1185.0, 1246.0], [1193.0, 1242.0], [1209.0, 1138.0], [1201.0, 1226.0], [1165.0, 1254.75], [1161.0, 1256.5], [1157.0, 1255.0], [1153.0, 1260.0], [1177.0, 1252.0], [1173.0, 1251.5], [1197.0, 1240.5], [1269.0, 1232.0], [1277.0, 1213.0], [1249.0, 1247.0], [1273.0, 1227.0], [1265.0, 1241.0], [1217.0, 1278.0], [1221.0, 1224.0], [1245.0, 1262.5], [1233.0, 1244.75], [1257.0, 1238.6666666666667], [1253.0, 1207.0], [1285.0, 1240.0], [1341.0, 1222.0], [1309.0, 1256.0], [1305.0, 1227.0], [1301.0, 1252.0], [1297.0, 1294.0], [1325.0, 1240.5], [1405.0, 1208.0], [1385.0, 1261.0], [1401.0, 1250.0], [1393.0, 1257.0], [1357.0, 1273.0], [1345.0, 1927.0], [1369.0, 1262.0], [1461.0, 1246.0], [1469.0, 1214.0], [1441.0, 1257.5], [1465.0, 1240.0], [1457.0, 1249.0], [1421.0, 1267.0], [1413.0, 1329.0], [1437.0, 1259.3333333333333], [1429.0, 1264.0], [1425.0, 1265.0], [1449.0, 1253.0], [1529.0, 1251.0], [1525.0, 1253.0], [1517.0, 1258.0], [1509.0, 1262.0], [1501.0, 1267.0], [1477.0, 1132.0], [1481.0, 1841.0], [1485.0, 5397.0], [1489.0, 1289.0], [1585.0, 1281.6666666666667], [1597.0, 1282.3333333333333], [1545.0, 1240.0], [1541.0, 1243.0], [1537.0, 1245.0], [1581.0, 1282.0], [1577.0, 1292.0], [1573.0, 1291.3333333333333], [1561.0, 1293.5], [1557.0, 1296.0], [1553.0, 1133.0], [1653.0, 1224.0], [1645.0, 1308.0], [1609.0, 1280.0], [1601.0, 1283.0], [1621.0, 5251.0], [1617.0, 1269.3333333333333], [1669.0, 1254.0], [1721.0, 1318.5], [1697.0, 1248.0], [1713.0, 1313.5], [1693.0, 1506.0], [1689.0, 1245.0], [1685.0, 1251.0], [1681.0, 1285.5], [1709.0, 1327.0], [1705.0, 1314.0], [1789.0, 1277.6666666666667], [1785.0, 1282.6], [1773.0, 1291.0], [1761.0, 1294.0], [1737.0, 1314.5], [1757.0, 1119.0], [1753.0, 1304.5], [1745.0, 1306.0], [1801.0, 1272.0], [1829.0, 4946.0], [1833.0, 1845.0], [1849.0, 1319.0], [1797.0, 1275.0], [1821.0, 1255.0], [1817.0, 1261.0], [1813.0, 1262.5], [1809.0, 1266.25], [1837.0, 1420.0], [1917.0, 1288.0], [1893.0, 1378.3333333333333], [1897.0, 1490.0], [1901.0, 1482.0], [1913.0, 1293.0], [1909.0, 1786.6666666666667], [1905.0, 1806.0], [1869.0, 1311.0], [1861.0, 1320.0], [1885.0, 1313.5], [1877.0, 1310.5], [1873.0, 1312.125], [1977.0, 1261.0], [1981.0, 1253.5], [1953.0, 1130.0], [1957.0, 1120.5], [1961.0, 1447.0], [1965.0, 1427.0], [1973.0, 1285.0], [1969.0, 1694.0], [1921.0, 1276.0], [1929.0, 1265.0], [1933.0, 1238.0], [1945.0, 1168.0], [2045.0, 1285.0], [2017.0, 1125.5], [2021.0, 1122.0], [2025.0, 1317.0], [2041.0, 1297.0], [2037.0, 1305.0], [2033.0, 1310.6666666666667], [1997.0, 1246.0], [1993.0, 1249.2857142857144], [1985.0, 1252.0], [2013.0, 1208.0], [2009.0, 1221.0], [2005.0, 1238.0], [2001.0, 1241.3333333333333], [2170.0, 1259.0], [2122.0, 1134.0], [2114.0, 1178.0], [2138.0, 1141.3333333333333], [2162.0, 1261.0], [2146.0, 1124.5], [2074.0, 1227.0], [2066.0, 1250.0], [2058.0, 1270.0], [2106.0, 1194.0], [2098.0, 1204.0], [2090.0, 1236.0], [2282.0, 1119.0], [2290.0, 1664.0], [2258.0, 1131.0], [2298.0, 1181.0], [2274.0, 1121.0], [2202.0, 1126.0], [2194.0, 1121.6666666666667], [2234.0, 1125.0], [2218.0, 1115.0], [2402.0, 1119.0], [2426.0, 1132.0], [2370.0, 1130.0], [2378.0, 1125.0], [2386.0, 1118.0], [2418.0, 1131.0], [2306.0, 1141.0], [2314.0, 1128.0], [2322.0, 1131.0], [2330.0, 1125.0], [2362.0, 1130.0], [2354.0, 1115.0], [2346.0, 1114.0], [2338.0, 1125.3333333333333], [2546.0, 1111.0], [2538.0, 1126.0], [2498.0, 1134.3333333333333], [2514.0, 1136.0], [2522.0, 1123.5], [2554.0, 1142.0], [2530.0, 1126.0], [2434.0, 1121.0], [2450.0, 1132.0], [2458.0, 1123.3333333333333], [2482.0, 1176.0], [2474.0, 1119.0], [2666.0, 1129.0], [2634.0, 1131.0], [2642.0, 1131.6666666666667], [2650.0, 1124.4], [2682.0, 1111.0], [2586.0, 1124.6666666666667], [2578.0, 1135.0], [2562.0, 1136.0], [2618.0, 1148.0], [2610.0, 1118.0], [2602.0, 1125.0], [2594.0, 1132.0], [2794.0, 1120.0], [2810.0, 1120.0], [2754.0, 1169.0], [2762.0, 1132.0], [2778.0, 1129.0], [2786.0, 1127.0], [2714.0, 1125.0], [2706.0, 1129.0], [2698.0, 1133.0], [2690.0, 1151.0], [2738.0, 1123.0], [2722.0, 1123.6], [2826.0, 1132.0], [2914.0, 1131.0], [2882.0, 1114.0], [2890.0, 1132.0], [2906.0, 1125.0], [2818.0, 1153.5], [2834.0, 1128.0], [2842.0, 1125.5], [2874.0, 1121.0], [2866.0, 1120.6666666666667], [2858.0, 1125.0], [2946.0, 1111.0], [2954.0, 1149.0], [2970.0, 1138.0], [2978.0, 1122.0], [2059.0, 1268.0], [2115.0, 1169.0], [2139.0, 1141.0], [2155.0, 1265.0], [2051.0, 1291.0], [2067.0, 1254.0], [2075.0, 1234.0], [2107.0, 1189.0], [2099.0, 1202.0], [2091.0, 1216.0], [2083.0, 1131.0], [2291.0, 1666.0], [2299.0, 1179.0], [2243.0, 1134.0], [2251.0, 1131.0], [2259.0, 1124.0], [2267.0, 1121.0], [2283.0, 1114.0], [2275.0, 1115.0], [2187.0, 1130.3333333333333], [2235.0, 1132.0], [2219.0, 1170.0], [2211.0, 1119.5], [2419.0, 1132.0], [2371.0, 1127.0], [2411.0, 1116.0], [2307.0, 1244.0], [2355.0, 1199.0], [2339.0, 1129.0], [2443.0, 1129.0], [2515.0, 1123.0], [2547.0, 1292.0], [2539.0, 1124.0], [2435.0, 1131.0], [2451.0, 1124.0], [2459.0, 1124.0], [2483.0, 1157.0], [2475.0, 1123.0], [2467.0, 1122.3333333333333], [2675.0, 1118.6], [2659.0, 1132.0], [2627.0, 1138.0], [2651.0, 1122.0], [2683.0, 1154.0], [2667.0, 1118.5], [2579.0, 1132.0], [2571.0, 1134.0], [2563.0, 1140.0], [2603.0, 1122.0], [2787.0, 1121.0], [2811.0, 1118.0], [2755.0, 1155.0], [2763.0, 1134.0], [2771.0, 1130.0], [2779.0, 1129.0], [2715.0, 1129.0], [2707.0, 1134.0], [2691.0, 1140.0], [2747.0, 1115.0], [2931.0, 1122.0], [2883.0, 1762.0], [2891.0, 1149.0], [2939.0, 1114.0], [2819.0, 1152.0], [2827.0, 1135.0], [2835.0, 1124.0], [2843.0, 1124.0], [2867.0, 1123.0], [2851.0, 1128.6666666666667], [2963.0, 1132.5], [2995.0, 1120.6666666666667], [2979.0, 1121.0], [541.0, 1271.0], [543.0, 1286.0], [539.0, 1301.0], [537.0, 1231.0], [535.0, 1234.0], [533.0, 1233.0], [531.0, 1236.5], [529.0, 1238.0], [523.0, 1238.5], [517.0, 1244.5], [573.0, 1238.0], [575.0, 1239.0], [571.0, 1273.0], [569.0, 1243.5], [567.0, 1245.0], [565.0, 1268.0], [563.0, 1279.0], [561.0, 1260.0], [559.0, 1246.0], [545.0, 1254.0], [549.0, 1249.0], [547.0, 1248.0], [557.0, 1274.5], [553.0, 1279.0], [603.0, 1228.0], [607.0, 1289.0], [593.0, 1230.5], [605.0, 1221.0], [591.0, 1258.0], [579.0, 1269.0], [583.0, 1234.0], [581.0, 1249.5], [599.0, 1226.0], [597.0, 1231.0], [611.0, 1277.0], [627.0, 1264.0], [639.0, 1258.6], [613.0, 1268.0], [609.0, 1281.0], [621.0, 1266.0], [619.0, 1265.0], [617.0, 1268.0], [631.0, 1258.0], [625.0, 1263.0], [665.0, 1250.5], [671.0, 7776.0], [669.0, 1247.0], [667.0, 1249.0], [643.0, 1257.0], [641.0, 1258.0], [653.0, 1253.0], [651.0, 1257.0], [649.0, 1257.0], [659.0, 1253.0], [703.0, 1247.0], [699.0, 1254.0], [695.0, 1258.0], [693.0, 1251.0], [691.0, 1250.25], [673.0, 5957.0], [675.0, 5892.0], [677.0, 5197.0], [679.0, 5128.0], [681.0, 1261.0], [731.0, 1244.0], [733.0, 1241.0], [735.0, 1237.5], [721.0, 1252.0], [729.0, 1240.25], [717.0, 1247.6666666666667], [707.0, 1230.0], [711.0, 1252.0], [709.0, 1250.0], [715.0, 1254.0], [713.0, 1247.0], [725.0, 1248.5], [723.0, 1244.0], [765.0, 1280.0], [767.0, 1280.0], [763.0, 1282.6666666666667], [743.0, 1230.0], [741.0, 1234.0], [737.0, 1236.0], [759.0, 1285.0], [755.0, 1285.0], [753.0, 1286.0], [749.0, 1290.0], [747.0, 1221.5], [745.0, 1221.0], [771.0, 1278.0], [785.0, 1270.0], [795.0, 1267.3333333333333], [773.0, 1279.0], [787.0, 1269.0], [783.0, 1271.0], [781.0, 1275.0], [779.0, 1275.5], [777.0, 1275.0], [825.0, 1270.5], [829.0, 1269.5], [817.0, 1278.0], [827.0, 1269.0], [807.0, 1259.0], [803.0, 1264.0], [815.0, 1884.0], [813.0, 1224.0], [811.0, 1256.0], [823.0, 1271.5], [821.0, 1272.0], [861.0, 1256.75], [863.0, 1256.0], [857.0, 1258.0], [835.0, 1266.0], [855.0, 1258.0], [853.0, 1260.3333333333333], [847.0, 1261.6666666666667], [889.0, 1288.0], [895.0, 1277.0], [881.0, 1243.0], [883.0, 3073.0], [885.0, 7973.0], [891.0, 1282.0], [871.0, 1252.5], [869.0, 1252.0], [867.0, 1252.0], [865.0, 1255.0], [879.0, 1247.0], [877.0, 1249.0], [875.0, 1248.0], [887.0, 1319.0], [925.0, 1260.5], [927.0, 1261.0], [921.0, 1262.25], [917.0, 1263.5], [915.0, 1263.0], [913.0, 1262.0], [911.0, 1268.0], [897.0, 1274.0], [903.0, 1269.0], [909.0, 1264.0], [907.0, 1268.0], [905.0, 1270.5], [957.0, 1827.0], [959.0, 2020.0], [947.0, 1249.0], [949.0, 1245.0], [955.0, 1917.0], [953.0, 1193.0], [943.0, 1251.0], [931.0, 1259.0], [929.0, 1262.0], [935.0, 1260.0], [941.0, 1253.6666666666667], [937.0, 1257.0], [951.0, 2275.0], [965.0, 1326.0], [979.0, 1262.0], [991.0, 1253.0], [967.0, 1282.0], [963.0, 1989.0], [961.0, 1725.0], [973.0, 1264.0], [971.0, 1266.0], [983.0, 1257.0], [981.0, 1259.0], [1019.0, 1280.0], [1023.0, 1267.0], [1013.0, 1242.0], [1021.0, 1276.0], [1017.0, 1358.0], [1007.0, 1251.0], [993.0, 1257.0], [995.0, 1257.0], [999.0, 1249.0], [1005.0, 1245.0], [1003.0, 1249.0], [1001.0, 1249.0], [1015.0, 1238.0], [1082.0, 1293.0], [1086.0, 1288.0], [1066.0, 1245.0], [1062.0, 1246.5], [1078.0, 1375.0], [1074.0, 1244.0], [1038.0, 1255.0], [1030.0, 1264.0], [1026.0, 1266.0], [1050.0, 1255.0], [1042.0, 1254.5], [1070.0, 1243.0], [1102.0, 1265.0], [1142.0, 1233.0], [1146.0, 1266.0], [1150.0, 1264.0], [1138.0, 1242.0], [1098.0, 1270.0], [1094.0, 1275.5], [1090.0, 1283.0], [1118.0, 1254.0], [1114.0, 1256.0], [1110.0, 1258.5], [1106.0, 1260.0], [1126.0, 1249.0], [1122.0, 1252.0], [1202.0, 1211.0], [1210.0, 7966.0], [1190.0, 1245.75], [1206.0, 1202.0], [1166.0, 1252.0], [1154.0, 1258.0], [1178.0, 1250.0], [1170.0, 1251.6666666666667], [1198.0, 1241.0], [1278.0, 1263.0], [1250.0, 1234.5], [1274.0, 1223.0], [1266.0, 1241.0], [1242.0, 1215.0], [1254.0, 1258.0], [1334.0, 1228.0], [1318.0, 1233.6666666666667], [1338.0, 1225.0], [1314.0, 1223.0], [1330.0, 1230.0], [1294.0, 1299.0], [1290.0, 1237.0], [1282.0, 1242.0], [1310.0, 1224.0], [1306.0, 1226.0], [1326.0, 1254.0], [1322.0, 1274.0], [1358.0, 1271.0], [1406.0, 1207.0], [1402.0, 1245.0], [1398.0, 1250.5], [1374.0, 1262.0], [1370.0, 1263.3333333333333], [1366.0, 1267.5], [1362.0, 1269.5], [1466.0, 1240.0], [1446.0, 1256.3333333333333], [1458.0, 1247.0], [1414.0, 1309.0], [1418.0, 1269.0], [1430.0, 1263.0], [1426.0, 1265.0], [1450.0, 1254.5], [1482.0, 1938.0], [1530.0, 1251.0], [1526.0, 1251.3333333333333], [1486.0, 5325.0], [1478.0, 8007.0], [1474.0, 1204.5], [1494.0, 1266.0], [1490.0, 1274.0], [1594.0, 1281.75], [1598.0, 1284.0], [1590.0, 1282.4], [1550.0, 1237.0], [1546.0, 1238.0], [1582.0, 1283.0], [1574.0, 1286.0], [1570.0, 1292.0], [1562.0, 1290.0], [1554.0, 1303.0], [1654.0, 1225.0], [1658.0, 1222.0], [1630.0, 1242.0], [1602.0, 1277.0], [1606.0, 1275.0], [1610.0, 1271.0], [1614.0, 1274.5], [1622.0, 5238.0], [1618.0, 5172.0], [1646.0, 1279.6666666666667], [1642.0, 1249.25], [1666.0, 1294.6666666666667], [1722.0, 1312.0], [1718.0, 1319.5], [1714.0, 1312.0], [1706.0, 1312.5], [1698.0, 1321.0], [1694.0, 3049.0], [1678.0, 1287.0], [1690.0, 1241.0], [1686.0, 1250.0], [1682.0, 1282.5], [1738.0, 1309.0], [1782.0, 1283.5], [1778.0, 1287.0], [1770.0, 1288.0], [1758.0, 5754.0], [1730.0, 1318.5], [1734.0, 1311.0], [1742.0, 1314.0], [1754.0, 1302.0], [1750.0, 1301.5], [1746.0, 1312.0], [1826.0, 1247.5], [1850.0, 1317.0], [1830.0, 1888.0], [1834.0, 1513.0], [1794.0, 1275.0], [1798.0, 1272.0], [1806.0, 1266.0], [1818.0, 1259.0], [1810.0, 1264.0], [1838.0, 5261.0], [1910.0, 1405.0], [1906.0, 1414.0], [1894.0, 1581.0], [1890.0, 1309.0], [1898.0, 1481.0], [1902.0, 1465.0], [1918.0, 1283.0], [1870.0, 1315.0], [1866.0, 1315.0], [1858.0, 1317.0], [1882.0, 1315.3333333333333], [1878.0, 1311.0], [1974.0, 1273.0], [1958.0, 1117.0], [1962.0, 1450.0], [1966.0, 1398.0], [1970.0, 1308.0], [1922.0, 1273.0], [1926.0, 1269.0], [1930.0, 1263.0], [1934.0, 1263.0], [1950.0, 1129.5], [1946.0, 1161.0], [1994.0, 1249.0], [2034.0, 1310.0], [2026.0, 1315.0], [2042.0, 1296.0], [1990.0, 1248.0], [2014.0, 1380.0], [2010.0, 1219.0], [2006.0, 1234.0], [2002.0, 1241.0], [2172.0, 1240.0], [2116.0, 1141.0], [2124.0, 1139.0], [2132.0, 1139.3333333333333], [2140.0, 1140.0], [2148.0, 1126.5], [2076.0, 1338.0], [2068.0, 1246.0], [2060.0, 1263.0], [2052.0, 1285.5], [2108.0, 1190.0], [2100.0, 1202.0], [2084.0, 1120.0], [2300.0, 1265.0], [2244.0, 1127.5], [2260.0, 1119.0], [2268.0, 1120.0], [2292.0, 1622.0], [2284.0, 1112.0], [2276.0, 1120.0], [2204.0, 1119.0], [2196.0, 1123.0], [2188.0, 1122.0], [2180.0, 1133.6666666666667], [2220.0, 1160.0], [2212.0, 1120.0], [2404.0, 1136.0], [2420.0, 1132.0], [2388.0, 1123.0], [2428.0, 1123.0], [2364.0, 1133.5], [2308.0, 1142.0], [2316.0, 1183.5], [2324.0, 1130.0], [2332.0, 1124.5], [2356.0, 1193.0], [2348.0, 1118.5], [2540.0, 1116.0], [2548.0, 1256.0], [2508.0, 1127.0], [2516.0, 1129.4285714285716], [2524.0, 1126.0], [2452.0, 1119.0], [2460.0, 1115.0], [2492.0, 1136.6666666666667], [2476.0, 1119.0], [2468.0, 1126.0], [2660.0, 1122.0], [2684.0, 1144.0], [2668.0, 1123.0], [2628.0, 1140.0], [2636.0, 1132.5], [2652.0, 1124.0], [2588.0, 1126.6666666666667], [2572.0, 1136.0], [2564.0, 1140.0], [2612.0, 1118.0], [2596.0, 1126.0], [2796.0, 1126.0], [2804.0, 1127.0], [2756.0, 1143.0], [2764.0, 1137.5], [2780.0, 1126.0], [2788.0, 1121.0], [2716.0, 1127.0], [2708.0, 1140.0], [2700.0, 1138.0], [2692.0, 1138.0], [2748.0, 1110.0], [2740.0, 1115.5], [2732.0, 1122.6666666666667], [2916.0, 1127.0], [2932.0, 1124.5], [2884.0, 1146.0], [2892.0, 1139.0], [2924.0, 1124.0], [2820.0, 1146.0], [2836.0, 1139.0], [2844.0, 1124.0], [2868.0, 1126.0], [2860.0, 1116.0], [2852.0, 1127.0], [2948.0, 1114.0], [2956.0, 1141.0], [2972.0, 1130.0], [2165.0, 1263.75], [2077.0, 1167.0], [2117.0, 1136.0], [2125.0, 1145.0], [2141.0, 1130.0], [2173.0, 1238.0], [2157.0, 1263.3333333333333], [2061.0, 1257.0], [2069.0, 1240.0], [2109.0, 1185.0], [2093.0, 1220.5], [2085.0, 1115.0], [2293.0, 1621.0], [2253.0, 1121.0], [2261.0, 1124.0], [2301.0, 1164.0], [2285.0, 2114.0], [2277.0, 1118.0], [2237.0, 1130.5], [2197.0, 1117.0], [2205.0, 1125.0], [2221.0, 1146.0], [2213.0, 1119.0], [2413.0, 1121.0], [2405.0, 1127.0], [2373.0, 1126.0], [2429.0, 1124.0], [2421.0, 1132.0], [2317.0, 1127.0], [2333.0, 1130.0], [2357.0, 1159.0], [2349.0, 1116.0], [2341.0, 1120.0], [2541.0, 1123.5], [2557.0, 1144.0], [2501.0, 1137.0], [2509.0, 1133.8], [2525.0, 1126.0], [2549.0, 8032.0], [2533.0, 1123.4], [2437.0, 1128.5], [2445.0, 1133.0], [2461.0, 1127.0], [2485.0, 1157.5], [2469.0, 1120.0], [2677.0, 1119.0], [2629.0, 1131.0], [2645.0, 1127.0], [2653.0, 1129.0], [2669.0, 1118.0], [2581.0, 1132.5], [2573.0, 1132.0], [2565.0, 1136.0], [2613.0, 1117.3333333333333], [2605.0, 1125.5], [2597.0, 1123.0], [2813.0, 1117.0], [2765.0, 1136.0], [2773.0, 1135.3333333333333], [2781.0, 1121.0], [2805.0, 1123.0], [2717.0, 1126.0], [2701.0, 1143.5], [2693.0, 1136.5], [2749.0, 1749.0], [2725.0, 1119.0], [2829.0, 1134.3333333333333], [2885.0, 1150.0], [2901.0, 1134.0], [2909.0, 1134.0], [2821.0, 1136.0], [2845.0, 1123.0], [2877.0, 1120.75], [2869.0, 1113.0], [2861.0, 1116.0], [2949.0, 1114.5], [2957.0, 1137.0], [2989.0, 1126.5], [2981.0, 1119.5], [1027.0, 1262.0], [1087.0, 1286.0], [1079.0, 1234.0], [1055.0, 1250.6666666666667], [1031.0, 1262.0], [1035.0, 1259.0], [1051.0, 1251.0], [1047.0, 1250.0], [1043.0, 1254.0], [1063.0, 1243.0], [1059.0, 1249.5], [1139.0, 1242.0], [1151.0, 1260.0], [1123.0, 1251.0], [1127.0, 1249.0], [1143.0, 1272.0], [1103.0, 1264.0], [1095.0, 1275.0], [1091.0, 1281.0], [1119.0, 1250.0], [1111.0, 1257.0], [1135.0, 1245.5], [1211.0, 1244.0], [1203.0, 1210.0], [1215.0, 1263.6666666666667], [1191.0, 1245.0], [1187.0, 1244.0], [1195.0, 1244.0], [1207.0, 1202.0], [1159.0, 1254.5], [1183.0, 1249.0], [1175.0, 1251.0], [1171.0, 1251.5], [1199.0, 1241.0], [1279.0, 1252.0], [1251.0, 1238.6], [1275.0, 1221.0], [1247.0, 1261.0], [1219.0, 1274.0], [1239.0, 1267.0], [1263.0, 1251.0], [1255.0, 1255.0], [1339.0, 1229.0], [1319.0, 1263.0], [1335.0, 1226.5], [1331.0, 1233.0], [1283.0, 1273.5], [1307.0, 1269.0], [1303.0, 1250.3333333333333], [1327.0, 1238.0], [1323.0, 1212.0], [1315.0, 1285.0], [1399.0, 1250.0], [1407.0, 1203.0], [1379.0, 1259.6666666666667], [1403.0, 1235.0], [1395.0, 1254.5], [1359.0, 1270.6666666666667], [1355.0, 1289.1666666666667], [1371.0, 1261.0], [1391.0, 1257.6666666666667], [1387.0, 1257.5], [1459.0, 1245.0], [1467.0, 1219.0], [1443.0, 1258.0], [1463.0, 1244.5], [1419.0, 1270.0], [1415.0, 1286.0], [1411.0, 1200.6666666666667], [1435.0, 1260.0], [1431.0, 1262.0], [1427.0, 1263.0], [1455.0, 1249.5], [1531.0, 1249.0], [1527.0, 1251.0], [1515.0, 1258.7272727272727], [1475.0, 1203.0], [1479.0, 2380.0], [1483.0, 1617.0], [1487.0, 5287.0], [1491.0, 1273.0], [1551.0, 1236.0], [1599.0, 1284.0], [1539.0, 1244.6666666666667], [1579.0, 1282.5], [1567.0, 1290.3333333333333], [1559.0, 1301.5], [1555.0, 1307.0], [1651.0, 1265.5], [1659.0, 1300.0], [1655.0, 1223.0], [1631.0, 1236.0], [1623.0, 5151.0], [1619.0, 8416.0], [1727.0, 1317.4], [1699.0, 1328.0], [1719.0, 1321.5], [1715.0, 1320.0], [1695.0, 1375.0], [1691.0, 1236.0], [1683.0, 2469.0], [1703.0, 1323.5], [1743.0, 1306.0], [1783.0, 1285.0], [1779.0, 1283.6], [1775.0, 1288.0], [1759.0, 1140.0], [1739.0, 1310.75], [1755.0, 1301.0], [1751.0, 1306.0], [1747.0, 1312.0], [1847.0, 1434.0], [1827.0, 5118.0], [1855.0, 1319.0], [1831.0, 1546.0], [1835.0, 1510.0], [1803.0, 1269.0], [1799.0, 1273.0], [1795.0, 1272.0], [1823.0, 1250.0], [1819.0, 1257.0], [1839.0, 1374.0], [1911.0, 1329.0], [1915.0, 1289.5], [1919.0, 1280.0], [1891.0, 1309.0], [1895.0, 1526.0], [1903.0, 1133.0], [1863.0, 1315.0], [1859.0, 1320.0], [1887.0, 1310.6666666666667], [1883.0, 1312.0], [1975.0, 1269.0], [1979.0, 1258.0], [1955.0, 1122.0], [1963.0, 1443.0], [1967.0, 1362.0], [1971.0, 1294.0], [1951.0, 1491.0], [1923.0, 1271.0], [1931.0, 1263.0], [1947.0, 1126.0], [1943.0, 1249.0], [2039.0, 1303.0], [2043.0, 1292.0], [2047.0, 1288.0], [2019.0, 1125.5], [2023.0, 1119.0], [2031.0, 1312.3333333333333], [2035.0, 1308.0], [1999.0, 1240.0], [1995.0, 1243.0], [2015.0, 1333.0], [2011.0, 1213.0], [2007.0, 1231.0], [2150.0, 1130.5], [2174.0, 1233.0], [2118.0, 1139.0], [2134.0, 1139.5], [2166.0, 1260.0], [2078.0, 1324.0], [2070.0, 1238.0], [2054.0, 1284.5], [2110.0, 1195.0], [2102.0, 1199.0], [2094.0, 1210.0], [2086.0, 1118.0], [2294.0, 1812.0], [2302.0, 1154.0], [2246.0, 1127.5], [2254.0, 1122.0], [2262.0, 1129.0], [2270.0, 1123.0], [2286.0, 1908.0], [2278.0, 1111.0], [2198.0, 1128.0], [2190.0, 1122.0], [2230.0, 1135.9999999999998], [2222.0, 1148.0], [2414.0, 1120.0], [2422.0, 1133.0], [2374.0, 1125.0], [2382.0, 1125.3333333333333], [2310.0, 1138.0], [2326.0, 1174.5], [2334.0, 1119.0], [2358.0, 1168.0], [2350.0, 1122.0], [2542.0, 1116.0], [2550.0, 1205.0], [2534.0, 1119.0], [2494.0, 1135.0], [2438.0, 1126.0], [2446.0, 1119.0], [2462.0, 1122.0], [2486.0, 1151.0], [2478.0, 1117.5], [2638.0, 1136.0], [2646.0, 1130.0], [2654.0, 1121.0], [2582.0, 1133.0], [2614.0, 1116.0], [2798.0, 1130.0], [2718.0, 1137.0], [2814.0, 1116.3333333333333], [2710.0, 1129.0], [2702.0, 1131.0], [2750.0, 1180.0], [2726.0, 1122.5], [2942.0, 1119.25], [2910.0, 1126.0], [2822.0, 1151.0], [2830.0, 1134.0], [2838.0, 1125.0], [2862.0, 1120.0], [2854.0, 1127.0], [2950.0, 7933.0], [2958.0, 1130.0], [2974.0, 1121.5], [2998.0, 1127.0], [2990.0, 1122.0], [2151.0, 1131.0], [2167.0, 1260.0], [2175.0, 1227.0], [2119.0, 1150.0], [2143.0, 1123.0], [2159.0, 1265.6666666666667], [2111.0, 1194.0], [2055.0, 1279.0], [2063.0, 1255.0], [2071.0, 1243.0], [2079.0, 1157.0], [2103.0, 1198.0], [2095.0, 1205.0], [2087.0, 1116.0], [2295.0, 1419.0], [2303.0, 1150.0], [2255.0, 1127.0], [2263.0, 1118.0], [2271.0, 1122.0], [2287.0, 1711.0], [2279.0, 1111.0], [2183.0, 1124.3333333333333], [2191.0, 1131.0], [2199.0, 1123.0], [2223.0, 1143.0], [2415.0, 1117.0], [2431.0, 1125.0], [2375.0, 1121.0], [2391.0, 1124.5], [2399.0, 1131.0], [2407.0, 1124.75], [2319.0, 1127.0], [2359.0, 1137.0], [2343.0, 1126.5], [2543.0, 1122.0], [2551.0, 1182.0], [2519.0, 1137.0], [2527.0, 1118.0], [2447.0, 1127.0], [2455.0, 1121.0], [2463.0, 1118.0], [2487.0, 1159.0], [2479.0, 1114.0], [2591.0, 1123.5], [2655.0, 1123.5], [2679.0, 1117.0], [2663.0, 1119.0], [2575.0, 1136.0], [2567.0, 1135.0], [2615.0, 1735.0], [2607.0, 1122.0], [2599.0, 1121.0], [2799.0, 1129.0], [2791.0, 1127.3333333333333], [2815.0, 1118.0], [2783.0, 1127.0], [2807.0, 1119.5], [2719.0, 1131.0], [2711.0, 1123.0], [2703.0, 1137.0], [2695.0, 1133.0], [2751.0, 1168.0], [2743.0, 1117.5], [2919.0, 1124.25], [2935.0, 1119.5], [2887.0, 1143.0], [2927.0, 1123.5], [2879.0, 1118.0], [2823.0, 1142.0], [2831.0, 1130.0], [2847.0, 1127.0], [2863.0, 1121.0], [2951.0, 1177.0], [2967.0, 1127.0], [2975.0, 1128.0], [2991.0, 1120.5], [1.0, 7899.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[2776.4360696517488, 1351.0405472636874]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 3000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 3058.9, "minX": 1.68422118E12, "maxY": 50861.7, "series": [{"data": [[1.68422142E12, 45491.05], [1.68422124E12, 50861.7], [1.68422136E12, 46325.21666666667], [1.68422118E12, 30454.316666666666], [1.68422148E12, 3765.35], [1.6842213E12, 46994.916666666664]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.68422142E12, 36960.2], [1.68422124E12, 41322.3], [1.68422136E12, 37638.95], [1.68422118E12, 24742.7], [1.68422148E12, 3058.9], [1.6842213E12, 38181.95]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68422148E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 1258.4373163565165, "minX": 1.68422118E12, "maxY": 1538.0808339429404, "series": [{"data": [[1.68422142E12, 1258.4373163565165], [1.68422124E12, 1405.5035041611925], [1.68422136E12, 1342.4037028131802], [1.68422118E12, 1538.0808339429404], [1.68422148E12, 1322.6715976331352], [1.6842213E12, 1271.319032946197]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68422148E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 1258.2904015670924, "minX": 1.68422118E12, "maxY": 1537.8547915142638, "series": [{"data": [[1.68422142E12, 1258.2904015670924], [1.68422124E12, 1405.281208935615], [1.68422136E12, 1342.2688146188991], [1.68422118E12, 1537.8547915142638], [1.68422148E12, 1322.5650887573975], [1.6842213E12, 1271.154776013272]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68422148E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 57.17629774730652, "minX": 1.68422118E12, "maxY": 307.96964155084095, "series": [{"data": [[1.68422142E12, 57.17629774730652], [1.68422124E12, 57.7748576434517], [1.68422136E12, 122.78215917287822], [1.68422118E12, 307.96964155084095], [1.68422148E12, 136.88461538461522], [1.6842213E12, 60.56624792604887]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68422148E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 1106.0, "minX": 1.68422118E12, "maxY": 9285.0, "series": [{"data": [[1.68422142E12, 9285.0], [1.68422124E12, 8294.0], [1.68422136E12, 8315.0], [1.68422118E12, 8230.0], [1.68422148E12, 7899.0], [1.6842213E12, 8202.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.68422142E12, 1287.0], [1.68422124E12, 1470.0], [1.68422136E12, 1431.0], [1.68422118E12, 1846.0], [1.68422148E12, 1289.0], [1.6842213E12, 1312.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.68422142E12, 5053.750000000002], [1.68422124E12, 5713.449999999995], [1.68422136E12, 5525.599999999991], [1.68422118E12, 5488.200000000001], [1.68422148E12, 5253.540000000082], [1.6842213E12, 5216.600000000007]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.68422142E12, 1317.0], [1.68422124E12, 1969.0499999999938], [1.68422136E12, 1494.0], [1.68422118E12, 2440.0], [1.68422148E12, 1302.05], [1.6842213E12, 1345.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.68422142E12, 1109.0], [1.68422124E12, 1106.0], [1.68422136E12, 1107.0], [1.68422118E12, 1164.0], [1.68422148E12, 1197.0], [1.6842213E12, 1106.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.68422142E12, 1151.5], [1.68422124E12, 1165.0], [1.68422136E12, 1260.0], [1.68422118E12, 1441.0], [1.68422148E12, 1262.0], [1.6842213E12, 1141.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68422148E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 1119.0, "minX": 1.0, "maxY": 7781.0, "series": [{"data": [[2.0, 5629.0], [3.0, 2416.0], [4.0, 3752.0], [5.0, 5285.0], [7.0, 5165.5], [8.0, 5056.5], [9.0, 1676.0], [10.0, 1575.0], [11.0, 1761.0], [16.0, 1164.5], [18.0, 1271.0], [19.0, 1245.0], [23.0, 2408.0], [25.0, 2234.0], [26.0, 1282.0], [27.0, 1980.0], [28.0, 1119.0], [29.0, 1186.0], [31.0, 1464.0], [33.0, 1255.0], [32.0, 1268.5], [34.0, 1412.5], [39.0, 1133.0], [41.0, 1451.0], [43.0, 1424.0], [42.0, 1180.5], [47.0, 1480.0], [48.0, 1496.0], [49.0, 5253.0], [52.0, 1286.5], [55.0, 1126.0], [57.0, 1263.0], [61.0, 1257.0], [62.0, 1277.5], [63.0, 1123.0], [67.0, 1204.0], [66.0, 1239.0], [64.0, 1335.5], [65.0, 1239.0], [70.0, 1226.0], [68.0, 1251.0], [69.0, 1242.0], [71.0, 1239.0], [72.0, 1255.0], [74.0, 1266.0], [73.0, 1260.5], [75.0, 1274.0], [76.0, 1455.0], [79.0, 1134.0], [77.0, 1135.0], [78.0, 1141.0], [80.0, 1152.5], [85.0, 1241.0], [90.0, 1433.5], [93.0, 1292.0], [95.0, 1133.0], [97.0, 1513.0], [101.0, 1252.0], [106.0, 1261.5], [109.0, 1482.0], [115.0, 1410.0], [113.0, 1124.0], [118.0, 2619.5], [119.0, 1128.0], [122.0, 1489.0], [123.0, 1127.0], [120.0, 1126.5], [121.0, 1260.0], [126.0, 1329.5], [125.0, 1273.0], [129.0, 1216.0], [133.0, 1208.0], [132.0, 1242.5], [135.0, 1197.0], [130.0, 1133.5], [134.0, 1263.0], [131.0, 1173.5], [139.0, 1124.0], [137.0, 1125.0], [136.0, 1275.0], [145.0, 1355.0], [151.0, 1134.0], [175.0, 1302.0], [170.0, 1261.5], [174.0, 1129.0], [182.0, 1252.0], [184.0, 1263.0], [189.0, 1338.0], [195.0, 1130.0], [194.0, 1139.0], [198.0, 1281.0], [196.0, 1325.5], [197.0, 1125.0], [199.0, 1202.0], [193.0, 1263.0], [200.0, 1132.0], [220.0, 1142.0], [234.0, 1460.0], [240.0, 1135.0], [244.0, 1309.5], [254.0, 1129.0], [253.0, 1127.0], [260.0, 1282.0], [295.0, 1131.0], [1.0, 7781.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 295.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 1119.0, "minX": 1.0, "maxY": 7781.0, "series": [{"data": [[2.0, 5628.5], [3.0, 2413.0], [4.0, 3751.5], [5.0, 5285.0], [7.0, 5165.0], [8.0, 5055.0], [9.0, 1676.0], [10.0, 1574.5], [11.0, 1761.0], [16.0, 1164.0], [18.0, 1271.0], [19.0, 1245.0], [23.0, 2408.0], [25.0, 2234.0], [26.0, 1282.0], [27.0, 1980.0], [28.0, 1119.0], [29.0, 1186.0], [31.0, 1464.0], [33.0, 1255.0], [32.0, 1268.5], [34.0, 1412.5], [39.0, 1133.0], [41.0, 1450.5], [43.0, 1424.0], [42.0, 1180.5], [47.0, 1480.0], [48.0, 1496.0], [49.0, 5251.0], [52.0, 1286.5], [55.0, 1125.0], [57.0, 1263.0], [61.0, 1257.0], [62.0, 1277.5], [63.0, 1123.0], [67.0, 1204.0], [66.0, 1239.0], [64.0, 1335.5], [65.0, 1238.0], [70.0, 1226.0], [68.0, 1251.0], [69.0, 1241.5], [71.0, 1239.0], [72.0, 1255.0], [74.0, 1266.0], [73.0, 1260.5], [75.0, 1274.0], [76.0, 1454.5], [79.0, 1134.0], [77.0, 1134.0], [78.0, 1141.0], [80.0, 1152.0], [85.0, 1241.0], [90.0, 1433.5], [93.0, 1292.0], [95.0, 1132.0], [97.0, 1513.0], [101.0, 1252.0], [106.0, 1261.5], [109.0, 1482.0], [115.0, 1410.0], [113.0, 1124.0], [118.0, 2619.5], [119.0, 1128.0], [122.0, 1489.0], [123.0, 1127.0], [120.0, 1126.5], [121.0, 1260.0], [126.0, 1328.5], [125.0, 1273.0], [129.0, 1216.0], [133.0, 1208.0], [132.0, 1242.0], [135.0, 1197.0], [130.0, 1133.5], [134.0, 1263.0], [131.0, 1173.5], [139.0, 1124.0], [137.0, 1125.0], [136.0, 1275.0], [145.0, 1355.0], [151.0, 1134.0], [175.0, 1302.0], [170.0, 1261.5], [174.0, 1129.0], [182.0, 1252.0], [184.0, 1263.0], [189.0, 1338.0], [195.0, 1130.0], [194.0, 1138.0], [198.0, 1281.0], [196.0, 1325.5], [197.0, 1125.0], [199.0, 1202.0], [193.0, 1263.0], [200.0, 1132.0], [220.0, 1141.0], [234.0, 1460.0], [240.0, 1135.0], [244.0, 1309.5], [254.0, 1128.5], [253.0, 1127.0], [260.0, 1282.0], [295.0, 1130.0], [1.0, 7781.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 295.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 4.466666666666667, "minX": 1.68422118E12, "maxY": 72.6, "series": [{"data": [[1.68422142E12, 69.23333333333333], [1.68422124E12, 72.6], [1.68422136E12, 67.0], [1.68422118E12, 50.233333333333334], [1.68422148E12, 4.466666666666667], [1.6842213E12, 71.46666666666667]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68422148E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 5.633333333333334, "minX": 1.68422118E12, "maxY": 76.1, "series": [{"data": [[1.68422142E12, 68.06666666666666], [1.68422124E12, 76.1], [1.68422136E12, 69.31666666666666], [1.68422118E12, 45.56666666666667], [1.68422148E12, 5.633333333333334], [1.6842213E12, 70.31666666666666]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68422148E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 5.633333333333334, "minX": 1.68422118E12, "maxY": 76.1, "series": [{"data": [[1.68422142E12, 68.06666666666666], [1.68422124E12, 76.1], [1.68422136E12, 69.31666666666666], [1.68422118E12, 45.56666666666667], [1.68422148E12, 5.633333333333334], [1.6842213E12, 70.31666666666666]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68422148E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 5.633333333333334, "minX": 1.68422118E12, "maxY": 76.1, "series": [{"data": [[1.68422142E12, 68.06666666666666], [1.68422124E12, 76.1], [1.68422136E12, 69.31666666666666], [1.68422118E12, 45.56666666666667], [1.68422148E12, 5.633333333333334], [1.6842213E12, 70.31666666666666]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68422148E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

